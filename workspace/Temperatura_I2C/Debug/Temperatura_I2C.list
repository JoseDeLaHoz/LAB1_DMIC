
Temperatura_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080061a0  080061a0  000161a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006488  08006488  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006490  08006490  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08006508  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08006508  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e34c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e66  00000000  00000000  0002e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00030250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e7b  00000000  00000000  00031878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecdb  00000000  00000000  000596f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f39bf  00000000  00000000  000683ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bd8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  0015bde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006188 	.word	0x08006188

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006188 	.word	0x08006188

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fbc2 	bl	8000d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f88d 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f96d 	bl	80008d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f93b 	bl	8000870 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005fa:	f000 f8f9 	bl	80007f0 <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */
  uint8_t bufe[] = "error\r\n";
 80005fe:	4a3e      	ldr	r2, [pc, #248]	; (80006f8 <main+0x114>)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	e883 0003 	stmia.w	r3, {r0, r1}
  char buffer[12];
  uint8_t buff_rx[2] = {0};
 800060c:	2300      	movs	r3, #0
 800060e:	80bb      	strh	r3, [r7, #4]
  uint8_t buff_tx[2] = {0};
 8000610:	2300      	movs	r3, #0
 8000612:	803b      	strh	r3, [r7, #0]
  static const uint8_t ADDR_W = 0x90;
  static const uint8_t POINTER_Temp = 0x00;
  uint16_t val = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t a1 = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t a0 = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	843b      	strh	r3, [r7, #32]
  float temp;
  HAL_StatusTypeDef ret;

  buff_tx[0]= POINTER_Temp;
 8000620:	4b36      	ldr	r3, [pc, #216]	; (80006fc <main+0x118>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	703b      	strb	r3, [r7, #0]
  while (1)
  {
	  //HAL_UART_Transmit(&huart3, buf, sizeof(buf), HAL_MAX_DELAY);
	  //HAL_Delay(300);

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx, 1, HAL_MAX_DELAY);
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <main+0x11c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b299      	uxth	r1, r3
 800062c:	463a      	mov	r2, r7
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <main+0x120>)
 8000638:	f000 ff3e 	bl	80014b8 <HAL_I2C_Master_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  if (ret == HAL_OK){
 8000642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000646:	2b00      	cmp	r3, #0
 8000648:	d144      	bne.n	80006d4 <main+0xf0>

		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_W, buff_rx, 2, HAL_MAX_DELAY);
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <main+0x11c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b299      	uxth	r1, r3
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	482a      	ldr	r0, [pc, #168]	; (8000704 <main+0x120>)
 800065c:	f001 f820 	bl	80016a0 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		  if(ret == HAL_OK){
 8000666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800066a:	2b00      	cmp	r3, #0
 800066c:	d132      	bne.n	80006d4 <main+0xf0>

			  a1 = buff_rx[1];
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	847b      	strh	r3, [r7, #34]	; 0x22
			  a1 = (a1 >> 5);
 8000672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000674:	095b      	lsrs	r3, r3, #5
 8000676:	847b      	strh	r3, [r7, #34]	; 0x22

			  a0 = buff_rx[0];
 8000678:	793b      	ldrb	r3, [r7, #4]
 800067a:	843b      	strh	r3, [r7, #32]
			  a0 = (a0 << 3);
 800067c:	8c3b      	ldrh	r3, [r7, #32]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	843b      	strh	r3, [r7, #32]

			  val = (a0 | a1);
 8000682:	8c3a      	ldrh	r2, [r7, #32]
 8000684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000686:	4313      	orrs	r3, r2
 8000688:	84bb      	strh	r3, [r7, #36]	; 0x24

			  temp = val*0.125;
 800068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000694:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8000698:	ee27 7b06 	vmul.f64	d7, d7, d6
 800069c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006a0:	edc7 7a07 	vstr	s15, [r7, #28]

			  gcvt(temp, 3, buffer);
 80006a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80006a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	2003      	movs	r0, #3
 80006b4:	eeb0 0b47 	vmov.f64	d0, d7
 80006b8:	f003 fa34 	bl	8003b24 <gcvt>

			  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80006bc:	f107 0108 	add.w	r1, r7, #8
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	220c      	movs	r2, #12
 80006c6:	4810      	ldr	r0, [pc, #64]	; (8000708 <main+0x124>)
 80006c8:	f002 fd8e 	bl	80031e8 <HAL_UART_Transmit>
			  HAL_Delay(400);
 80006cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006d0:	f000 fbac 	bl	8000e2c <HAL_Delay>
		  }
	  }

	  if (ret != HAL_OK){
 80006d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0a4      	beq.n	8000626 <main+0x42>
		  HAL_UART_Transmit(&huart3, bufe, sizeof(bufe), HAL_MAX_DELAY);
 80006dc:	f107 0114 	add.w	r1, r7, #20
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2208      	movs	r2, #8
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <main+0x124>)
 80006e8:	f002 fd7e 	bl	80031e8 <HAL_UART_Transmit>
		  HAL_Delay(300);
 80006ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f0:	f000 fb9c 	bl	8000e2c <HAL_Delay>
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx, 1, HAL_MAX_DELAY);
 80006f4:	e797      	b.n	8000626 <main+0x42>
 80006f6:	bf00      	nop
 80006f8:	080061a0 	.word	0x080061a0
 80006fc:	080061a8 	.word	0x080061a8
 8000700:	080061a9 	.word	0x080061a9
 8000704:	2000008c 	.word	0x2000008c
 8000708:	200000e0 	.word	0x200000e0

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fa4a 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000730:	f001 fbb0 	bl	8001e94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <SystemClock_Config+0xdc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <SystemClock_Config+0xdc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemClock_Config+0xdc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <SystemClock_Config+0xe0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xe0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fbdd 	bl	8001f54 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 f8d2 	bl	8000948 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a4:	f001 fb86 	bl	8001eb4 <HAL_PWREx_EnableOverDrive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ae:	f000 f8cb 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2103      	movs	r1, #3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fe6e 	bl	80024b0 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007da:	f000 f8b5 	bl	8000948 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C1_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C1_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C1_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C1_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_I2C1_Init+0x74>)
 800082c:	f000 fdb4 	bl	8001398 <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f887 	bl	8000948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C1_Init+0x74>)
 800083e:	f001 fa91 	bl	8001d64 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f87e 	bl	8000948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2C1_Init+0x74>)
 8000850:	f001 fad3 	bl	8001dfa <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f875 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008c 	.word	0x2000008c
 8000868:	40005400 	.word	0x40005400
 800086c:	10805d88 	.word	0x10805d88

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART3_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART3_UART_Init+0x58>)
 80008b4:	f002 fc4a 	bl	800314c <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f843 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000e0 	.word	0x200000e0
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_GPIO_Init+0x74>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MX_GPIO_Init+0x74>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0x74>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0x74>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_GPIO_Init+0x74>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_GPIO_Init+0x74>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_GPIO_Init+0x74>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <MX_GPIO_Init+0x74>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_GPIO_Init+0x74>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_GPIO_Init+0x74>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <MX_GPIO_Init+0x74>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_GPIO_Init+0x74>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x44>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x44>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x44>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x44>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x44>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ae      	sub	sp, #184	; 0xb8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2290      	movs	r2, #144	; 0x90
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f8f9 	bl	8003bb4 <memset>
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_I2C_MspInit+0xb4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13c      	bne.n	8000a46 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ff8e 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e6:	f7ff ffaf 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_I2C_MspInit+0xbc>)
 8000a2a:	f000 fb09 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	37b8      	adds	r7, #184	; 0xb8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0ae      	sub	sp, #184	; 0xb8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2290      	movs	r2, #144	; 0x90
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 f899 	bl	8003bb4 <memset>
  if(huart->Instance==USART3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_UART_MspInit+0xb4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d13c      	bne.n	8000b06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 ff2e 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa6:	f7ff ff4f 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xb8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_UART_MspInit+0xbc>)
 8000b02:	f000 fa9d 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	37b8      	adds	r7, #184	; 0xb8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004800 	.word	0x40004800
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f940 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_kill>:

int _kill(int pid, int sig)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b8a:	f002 ffe9 	bl	8003b60 <__errno>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2216      	movs	r2, #22
 8000b92:	601a      	str	r2, [r3, #0]
	return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe7 	bl	8000b80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
	}

return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
	}
	return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 ff4e 	bl	8003b60 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20080000 	.word	0x20080000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000168 	.word	0x20000168
 8000cf8:	20000180 	.word	0x20000180

08000cfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 ff0d 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc47 	bl	80005e4 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d64:	08006498 	.word	0x08006498
  ldr r2, =_sbss
 8000d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d6c:	20000180 	.word	0x20000180

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>

08000d72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 f92e 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f805 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d82:	f7ff fde7 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f93b 	bl	8001026 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f911 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	2000016c 	.word	0x2000016c

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000016c 	.word	0x2000016c

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e175      	b.n	800134c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8164 	bne.w	8001346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x56>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80be 	beq.w	8001346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e2:	4a61      	ldr	r2, [pc, #388]	; (8001368 <HAL_GPIO_Init+0x328>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_GPIO_Init+0x32c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d037      	beq.n	800127e <HAL_GPIO_Init+0x23e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d031      	beq.n	800127a <HAL_GPIO_Init+0x23a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x334>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x236>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a55      	ldr	r2, [pc, #340]	; (8001378 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x232>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a54      	ldr	r2, [pc, #336]	; (800137c <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x22e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a53      	ldr	r2, [pc, #332]	; (8001380 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x22a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a50      	ldr	r2, [pc, #320]	; (800138c <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x350>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x21a>
 8001256:	2309      	movs	r3, #9
 8001258:	e012      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125a:	230a      	movs	r3, #10
 800125c:	e010      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125e:	2308      	movs	r3, #8
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001262:	2307      	movs	r3, #7
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x328>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x354>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae86 	bls.w	8001060 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40022000 	.word	0x40022000
 8001390:	40022400 	.word	0x40022400
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e07f      	b.n	80014aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff faec 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e006      	b.n	8001420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800141e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d104      	bne.n	8001432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_I2C_Init+0x11c>)
 800143e:	430b      	orrs	r3, r1
 8001440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69d9      	ldr	r1, [r3, #28]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2220      	movs	r2, #32
 8001496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	02008000 	.word	0x02008000

080014b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	817b      	strh	r3, [r7, #10]
 80014c8:	4613      	mov	r3, r2
 80014ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	f040 80da 	bne.w	800168e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x30>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0d3      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014f0:	f7ff fc90 	bl	8000e14 <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2319      	movs	r3, #25
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f9e6 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0be      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2210      	movs	r2, #16
 800151e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d90e      	bls.n	8001562 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	b2da      	uxtb	r2, r3
 8001550:	8979      	ldrh	r1, [r7, #10]
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_I2C_Master_Transmit+0x1e0>)
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fbd0 	bl	8001d00 <I2C_TransferConfig>
 8001560:	e06c      	b.n	800163c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001570:	b2da      	uxtb	r2, r3
 8001572:	8979      	ldrh	r1, [r7, #10]
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <HAL_I2C_Master_Transmit+0x1e0>)
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fbbf 	bl	8001d00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001582:	e05b      	b.n	800163c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	6a39      	ldr	r1, [r7, #32]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f9e3 	bl	8001954 <I2C_WaitOnTXISFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e07b      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d034      	beq.n	800163c <HAL_I2C_Master_Transmit+0x184>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d130      	bne.n	800163c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	2200      	movs	r2, #0
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f975 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e04d      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d90e      	bls.n	800161c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	22ff      	movs	r2, #255	; 0xff
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	b2da      	uxtb	r2, r3
 800160a:	8979      	ldrh	r1, [r7, #10]
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 fb73 	bl	8001d00 <I2C_TransferConfig>
 800161a:	e00f      	b.n	800163c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	b2da      	uxtb	r2, r3
 800162c:	8979      	ldrh	r1, [r7, #10]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fb62 	bl	8001d00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d19e      	bne.n	8001584 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	6a39      	ldr	r1, [r7, #32]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f9c2 	bl	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e01a      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2220      	movs	r2, #32
 8001660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_I2C_Master_Transmit+0x1e4>)
 800166e:	400b      	ands	r3, r1
 8001670:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	80002000 	.word	0x80002000
 800169c:	fe00e800 	.word	0xfe00e800

080016a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	461a      	mov	r2, r3
 80016ac:	460b      	mov	r3, r1
 80016ae:	817b      	strh	r3, [r7, #10]
 80016b0:	4613      	mov	r3, r2
 80016b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b20      	cmp	r3, #32
 80016be:	f040 80db 	bne.w	8001878 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_I2C_Master_Receive+0x30>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0d4      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016d8:	f7ff fb9c 	bl	8000e14 <HAL_GetTick>
 80016dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2319      	movs	r3, #25
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f8f2 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0bf      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2222      	movs	r2, #34	; 0x22
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2210      	movs	r2, #16
 8001706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	893a      	ldrh	r2, [r7, #8]
 800171a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	d90e      	bls.n	800174a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001736:	b2da      	uxtb	r2, r3
 8001738:	8979      	ldrh	r1, [r7, #10]
 800173a:	4b52      	ldr	r3, [pc, #328]	; (8001884 <HAL_I2C_Master_Receive+0x1e4>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fadc 	bl	8001d00 <I2C_TransferConfig>
 8001748:	e06d      	b.n	8001826 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	b2da      	uxtb	r2, r3
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_I2C_Master_Receive+0x1e4>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 facb 	bl	8001d00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800176a:	e05c      	b.n	8001826 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	6a39      	ldr	r1, [r7, #32]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f96b 	bl	8001a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e07c      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d034      	beq.n	8001826 <HAL_I2C_Master_Receive+0x186>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d130      	bne.n	8001826 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	2200      	movs	r2, #0
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f880 	bl	80018d4 <I2C_WaitOnFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e04d      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2bff      	cmp	r3, #255	; 0xff
 80017e6:	d90e      	bls.n	8001806 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	22ff      	movs	r2, #255	; 0xff
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	8979      	ldrh	r1, [r7, #10]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fa7e 	bl	8001d00 <I2C_TransferConfig>
 8001804:	e00f      	b.n	8001826 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	b2da      	uxtb	r2, r3
 8001816:	8979      	ldrh	r1, [r7, #10]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 fa6d 	bl	8001d00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d19d      	bne.n	800176c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	6a39      	ldr	r1, [r7, #32]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f8cd 	bl	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e01a      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2220      	movs	r2, #32
 800184a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_I2C_Master_Receive+0x1e8>)
 8001858:	400b      	ands	r3, r1
 800185a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
  }
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	80002400 	.word	0x80002400
 8001888:	fe00e800 	.word	0xfe00e800

0800188c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d103      	bne.n	80018aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	619a      	str	r2, [r3, #24]
  }
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e4:	e022      	b.n	800192c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d01e      	beq.n	800192c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff fa91 	bl	8000e14 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d113      	bne.n	800192c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e00f      	b.n	800194c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4013      	ands	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	429a      	cmp	r2, r3
 8001948:	d0cd      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001960:	e02c      	b.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f8ea 	bl	8001b40 <I2C_IsErrorOccurred>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e02a      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d01e      	beq.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197e:	f7ff fa49 	bl	8000e14 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	429a      	cmp	r2, r3
 800198c:	d302      	bcc.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d113      	bne.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f043 0220 	orr.w	r2, r3, #32
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d1cb      	bne.n	8001962 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e0:	e028      	b.n	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8aa 	bl	8001b40 <I2C_IsErrorOccurred>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e026      	b.n	8001a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f6:	f7ff fa0d 	bl	8000e14 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e007      	b.n	8001a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d1cf      	bne.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a58:	e064      	b.n	8001b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f86e 	bl	8001b40 <I2C_IsErrorOccurred>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e062      	b.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d138      	bne.n	8001aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d105      	bne.n	8001a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e04e      	b.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d107      	bne.n	8001ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab2:	e002      	b.n	8001aba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001ace:	400b      	ands	r3, r1
 8001ad0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e022      	b.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7ff f991 	bl	8000e14 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d193      	bne.n	8001a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	fe00e800 	.word	0xfe00e800

08001b40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d068      	beq.n	8001c3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2210      	movs	r2, #16
 8001b72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b74:	e049      	b.n	8001c0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d045      	beq.n	8001c0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b7e:	f7ff f949 	bl	8000e14 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d302      	bcc.n	8001b94 <I2C_IsErrorOccurred+0x54>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d13a      	bne.n	8001c0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ba6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb6:	d121      	bne.n	8001bfc <I2C_IsErrorOccurred+0xbc>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bbe:	d01d      	beq.n	8001bfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bc0:	7cfb      	ldrb	r3, [r7, #19]
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d01a      	beq.n	8001bfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bd6:	f7ff f91d 	bl	8000e14 <HAL_GetTick>
 8001bda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bdc:	e00e      	b.n	8001bfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bde:	f7ff f919 	bl	8000e14 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b19      	cmp	r3, #25
 8001bea:	d907      	bls.n	8001bfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001bfa:	e006      	b.n	8001c0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d1e9      	bne.n	8001bde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d003      	beq.n	8001c20 <I2C_IsErrorOccurred+0xe0>
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0aa      	beq.n	8001b76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fde9 	bl	800188c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <I2C_IsErrorOccurred+0x1bc>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	fe00e800 	.word	0xfe00e800

08001d00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	817b      	strh	r3, [r7, #10]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	0d5b      	lsrs	r3, r3, #21
 8001d3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <I2C_TransferConfig+0x60>)
 8001d40:	430b      	orrs	r3, r1
 8001d42:	43db      	mvns	r3, r3
 8001d44:	ea02 0103 	and.w	r1, r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	03ff63ff 	.word	0x03ff63ff

08001d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d138      	bne.n	8001dec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e032      	b.n	8001dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001db6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d139      	bne.n	8001e84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e033      	b.n	8001e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee2:	f7fe ff97 	bl	8000e14 <HAL_GetTick>
 8001ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ee8:	e009      	b.n	8001efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eea:	f7fe ff93 	bl	8000e14 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef8:	d901      	bls.n	8001efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e022      	b.n	8001f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d1ee      	bne.n	8001eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f18:	f7fe ff7c 	bl	8000e14 <HAL_GetTick>
 8001f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f1e:	e009      	b.n	8001f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f20:	f7fe ff78 	bl	8000e14 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2e:	d901      	bls.n	8001f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e007      	b.n	8001f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f40:	d1ee      	bne.n	8001f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e29b      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f78:	4b96      	ldr	r3, [pc, #600]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f84:	4b93      	ldr	r3, [pc, #588]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62>
 8001f90:	4b90      	ldr	r3, [pc, #576]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06c      	beq.n	8002084 <HAL_RCC_OscConfig+0x130>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d168      	bne.n	8002084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e275      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x7a>
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e02e      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x9c>
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7e      	ldr	r2, [pc, #504]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7b      	ldr	r2, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xd8>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe feee 	bl	8000e14 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe feea 	bl	8000e14 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e229      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe feda 	bl	8000e14 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7fe fed6 	bl	8000e14 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e215      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x110>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d069      	beq.n	8002166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x190>
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x17a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1e9      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	493d      	ldr	r1, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e040      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe8c 	bl	8000e14 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe fe88 	bl	8000e14 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1c7      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4929      	ldr	r1, [pc, #164]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fe68 	bl	8000e14 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fe64 	bl	8000e14 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1a3      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d038      	beq.n	80021e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fe45 	bl	8000e14 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fe41 	bl	8000e14 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e180      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x23a>
 80021ac:	e01a      	b.n	80021e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_OscConfig+0x280>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fe2b 	bl	8000e14 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fe27 	bl	8000e14 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d903      	bls.n	80021d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e166      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
 80021d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a4 	beq.w	800233a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a88      	ldr	r2, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b86      	ldr	r3, [pc, #536]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221a:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002226:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7fe fdef 	bl	8000e14 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe fdeb 	bl	8000e14 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e12a      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224c:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x31a>
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a6f      	ldr	r2, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x33c>
 8002276:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x35e>
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a61      	ldr	r2, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a5e      	ldr	r2, [pc, #376]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
 80022b2:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a5b      	ldr	r2, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fd9f 	bl	8000e14 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fd9b 	bl	8000e14 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0d8      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x386>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fd89 	bl	8000e14 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fd85 	bl	8000e14 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0c2      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80ae 	beq.w	80024a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d06d      	beq.n	800242c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d14b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fd56 	bl	8000e14 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fd52 	bl	8000e14 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e091      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	071b      	lsls	r3, r3, #28
 80023b6:	491b      	ldr	r1, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fd24 	bl	8000e14 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fd20 	bl	8000e14 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e05f      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x47c>
 80023ee:	e057      	b.n	80024a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd0a 	bl	8000e14 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fd06 	bl	8000e14 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e045      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x4b0>
 8002422:	e03d      	b.n	80024a0 <HAL_RCC_OscConfig+0x54c>
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_RCC_OscConfig+0x558>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d030      	beq.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d129      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d122      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002464:	4293      	cmp	r3, r2
 8002466:	d119      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d10f      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe fc36 	bl	8000e14 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fc32 	bl	8000e14 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1cc>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1d0>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fb92 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	080061ac 	.word	0x080061ac
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b094      	sub	sp, #80	; 0x50
 800268e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	f200 80e1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ba:	e0db      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b73      	ldr	r3, [pc, #460]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c0:	e0db      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_GetSysClockFreq+0x208>)
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c6:	e0d8      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	2200      	movs	r2, #0
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	0159      	lsls	r1, r3, #5
 8002708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270c:	0150      	lsls	r0, r2, #5
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4621      	mov	r1, r4
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	6139      	str	r1, [r7, #16]
 8002718:	4629      	mov	r1, r5
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272c:	4659      	mov	r1, fp
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002736:	4651      	mov	r1, sl
 8002738:	018a      	lsls	r2, r1, #6
 800273a:	4651      	mov	r1, sl
 800273c:	ebb2 0801 	subs.w	r8, r2, r1
 8002740:	4659      	mov	r1, fp
 8002742:	eb63 0901 	sbc.w	r9, r3, r1
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4623      	mov	r3, r4
 8002760:	eb18 0303 	adds.w	r3, r8, r3
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	462b      	mov	r3, r5
 8002768:	eb49 0303 	adc.w	r3, r9, r3
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277a:	4629      	mov	r1, r5
 800277c:	024b      	lsls	r3, r1, #9
 800277e:	4621      	mov	r1, r4
 8002780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002784:	4621      	mov	r1, r4
 8002786:	024a      	lsls	r2, r1, #9
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	2200      	movs	r2, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002798:	f7fd fda2 	bl	80002e0 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	e058      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	2200      	movs	r2, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	4611      	mov	r1, r2
 80027b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0159      	lsls	r1, r3, #5
 80027ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d2:	0150      	lsls	r0, r2, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4641      	mov	r1, r8
 80027da:	ebb2 0a01 	subs.w	sl, r2, r1
 80027de:	4649      	mov	r1, r9
 80027e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f8:	ebb2 040a 	subs.w	r4, r2, sl
 80027fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	464b      	mov	r3, r9
 800281c:	eb45 0303 	adc.w	r3, r5, r3
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282e:	4629      	mov	r1, r5
 8002830:	028b      	lsls	r3, r1, #10
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002838:	4621      	mov	r1, r4
 800283a:	028a      	lsls	r2, r1, #10
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	61fa      	str	r2, [r7, #28]
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	f7fd fd48 	bl	80002e0 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800287c:	4618      	mov	r0, r3
 800287e:	3750      	adds	r7, #80	; 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200

08002894 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a9b      	lsrs	r3, r3, #10
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080061bc 	.word	0x080061bc

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffdc 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0b5b      	lsrs	r3, r3, #13
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	080061bc 	.word	0x080061bc

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002924:	4b69      	ldr	r3, [pc, #420]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800292e:	6093      	str	r3, [r2, #8]
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	4964      	ldr	r1, [pc, #400]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002956:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	4959      	ldr	r1, [pc, #356]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002974:	d101      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d017      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	494a      	ldr	r1, [pc, #296]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b0:	d101      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 808b 	beq.w	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6413      	str	r3, [r2, #64]	; 0x40
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f8:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fa06 	bl	8000e14 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0c:	f7fe fa02 	bl	8000e14 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e38f      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d035      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d02e      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d114      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f9ca 	bl	8000e14 <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe f9c6 	bl	8000e14 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e351      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ee      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	4901      	ldr	r1, [pc, #4]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	0ffffcff 	.word	0x0ffffcff
 8002ad8:	4bac      	ldr	r3, [pc, #688]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4aab      	ldr	r2, [pc, #684]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	4ba9      	ldr	r3, [pc, #676]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	49a6      	ldr	r1, [pc, #664]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b02:	4ba2      	ldr	r3, [pc, #648]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b08:	4aa0      	ldr	r2, [pc, #640]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b12:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	499b      	ldr	r1, [pc, #620]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b30:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3e:	4993      	ldr	r1, [pc, #588]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b52:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b60:	498a      	ldr	r1, [pc, #552]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b74:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	4982      	ldr	r1, [pc, #520]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b96:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4979      	ldr	r1, [pc, #484]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb8:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4971      	ldr	r1, [pc, #452]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bda:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f023 020c 	bic.w	r2, r3, #12
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	4968      	ldr	r1, [pc, #416]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bfc:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	4960      	ldr	r1, [pc, #384]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	4957      	ldr	r1, [pc, #348]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c40:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	494f      	ldr	r1, [pc, #316]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4946      	ldr	r1, [pc, #280]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	493e      	ldr	r1, [pc, #248]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	4935      	ldr	r1, [pc, #212]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd6:	492d      	ldr	r1, [pc, #180]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf8:	4924      	ldr	r1, [pc, #144]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	4914      	ldr	r1, [pc, #80]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00f      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	4902      	ldr	r1, [pc, #8]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d88:	e002      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d9c:	4b8a      	ldr	r3, [pc, #552]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	4986      	ldr	r1, [pc, #536]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd0:	497d      	ldr	r1, [pc, #500]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d006      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80d6 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dec:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f80c 	bl	8000e14 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e00:	f7fe f808 	bl	8000e14 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e195      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d021      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11d      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e32:	4b65      	ldr	r3, [pc, #404]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	0e1b      	lsrs	r3, r3, #24
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	019a      	lsls	r2, r3, #6
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	4958      	ldr	r1, [pc, #352]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02e      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d129      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea8:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eae:	0f1b      	lsrs	r3, r3, #28
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	019a      	lsls	r2, r3, #6
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	071b      	lsls	r3, r3, #28
 8002ece:	493e      	ldr	r1, [pc, #248]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	f023 021f 	bic.w	r2, r3, #31
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4938      	ldr	r1, [pc, #224]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01d      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0e:	0f1b      	lsrs	r3, r3, #28
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	4926      	ldr	r1, [pc, #152]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d011      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	019a      	lsls	r2, r3, #6
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	071b      	lsls	r3, r3, #28
 8002f5e:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f72:	f7fd ff4f 	bl	8000e14 <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f7a:	f7fd ff4b 	bl	8000e14 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0d8      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 80ce 	bne.w	800313c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fac:	f7fd ff32 	bl	8000e14 <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fb4:	f7fd ff2e 	bl	8000e14 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d904      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e0bb      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd8:	d0ec      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d02e      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d12a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003002:	4b51      	ldr	r3, [pc, #324]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003010:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	0f1b      	lsrs	r3, r3, #28
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	019a      	lsls	r2, r3, #6
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	061b      	lsls	r3, r3, #24
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	4944      	ldr	r1, [pc, #272]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	493d      	ldr	r1, [pc, #244]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d022      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306c:	d11d      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	0e1b      	lsrs	r3, r3, #24
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	0f1b      	lsrs	r3, r3, #28
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	019a      	lsls	r2, r3, #6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	4929      	ldr	r1, [pc, #164]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	0e1b      	lsrs	r3, r3, #24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030c4:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	019a      	lsls	r2, r3, #6
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4917      	ldr	r1, [pc, #92]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4911      	ldr	r1, [pc, #68]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fd fe7e 	bl	8000e14 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800311c:	f7fd fe7a 	bl	8000e14 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e007      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800313a:	d1ef      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e040      	b.n	80031e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fc74 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8b0 	bl	80032f0 <UART_SetConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb08 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb8f 	bl	80038fc <UART_CheckIdleState>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d171      	bne.n	80032e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_UART_Transmit+0x24>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e06a      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2221      	movs	r2, #33	; 0x21
 800321c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321e:	f7fd fdf9 	bl	8000e14 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d108      	bne.n	8003250 <HAL_UART_Transmit+0x68>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e003      	b.n	8003258 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003258:	e02c      	b.n	80032b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fb96 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e038      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1cc      	bne.n	800325a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fb63 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e005      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4ba6      	ldr	r3, [pc, #664]	; (80035b4 <UART_SetConfig+0x2c4>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	430b      	orrs	r3, r1
 8003326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a94      	ldr	r2, [pc, #592]	; (80035b8 <UART_SetConfig+0x2c8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d120      	bne.n	80033ae <UART_SetConfig+0xbe>
 800336c:	4b93      	ldr	r3, [pc, #588]	; (80035bc <UART_SetConfig+0x2cc>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d816      	bhi.n	80033a8 <UART_SetConfig+0xb8>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x90>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	0800339d 	.word	0x0800339d
 8003388:	08003397 	.word	0x08003397
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e150      	b.n	8003638 <UART_SetConfig+0x348>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e14d      	b.n	8003638 <UART_SetConfig+0x348>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e14a      	b.n	8003638 <UART_SetConfig+0x348>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e147      	b.n	8003638 <UART_SetConfig+0x348>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e144      	b.n	8003638 <UART_SetConfig+0x348>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <UART_SetConfig+0x2d0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d132      	bne.n	800341e <UART_SetConfig+0x12e>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <UART_SetConfig+0x2cc>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d828      	bhi.n	8003418 <UART_SetConfig+0x128>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xdc>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003419 	.word	0x08003419
 80033d8:	08003419 	.word	0x08003419
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003407 	.word	0x08003407
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003413 	.word	0x08003413
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e118      	b.n	8003638 <UART_SetConfig+0x348>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e115      	b.n	8003638 <UART_SetConfig+0x348>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e112      	b.n	8003638 <UART_SetConfig+0x348>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e10f      	b.n	8003638 <UART_SetConfig+0x348>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e10c      	b.n	8003638 <UART_SetConfig+0x348>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a68      	ldr	r2, [pc, #416]	; (80035c4 <UART_SetConfig+0x2d4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <UART_SetConfig+0x17a>
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <UART_SetConfig+0x2cc>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d013      	beq.n	800345e <UART_SetConfig+0x16e>
 8003436:	2b30      	cmp	r3, #48	; 0x30
 8003438:	d814      	bhi.n	8003464 <UART_SetConfig+0x174>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d009      	beq.n	8003452 <UART_SetConfig+0x162>
 800343e:	2b20      	cmp	r3, #32
 8003440:	d810      	bhi.n	8003464 <UART_SetConfig+0x174>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <UART_SetConfig+0x15c>
 8003446:	2b10      	cmp	r3, #16
 8003448:	d006      	beq.n	8003458 <UART_SetConfig+0x168>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x174>
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e0f2      	b.n	8003638 <UART_SetConfig+0x348>
 8003452:	2302      	movs	r3, #2
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e0ef      	b.n	8003638 <UART_SetConfig+0x348>
 8003458:	2304      	movs	r3, #4
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e0ec      	b.n	8003638 <UART_SetConfig+0x348>
 800345e:	2308      	movs	r3, #8
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e0e9      	b.n	8003638 <UART_SetConfig+0x348>
 8003464:	2310      	movs	r3, #16
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e0e6      	b.n	8003638 <UART_SetConfig+0x348>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a56      	ldr	r2, [pc, #344]	; (80035c8 <UART_SetConfig+0x2d8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d120      	bne.n	80034b6 <UART_SetConfig+0x1c6>
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <UART_SetConfig+0x2cc>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d013      	beq.n	80034aa <UART_SetConfig+0x1ba>
 8003482:	2bc0      	cmp	r3, #192	; 0xc0
 8003484:	d814      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d009      	beq.n	800349e <UART_SetConfig+0x1ae>
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d810      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x1a8>
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x1b4>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x1c0>
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0cc      	b.n	8003638 <UART_SetConfig+0x348>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e0c9      	b.n	8003638 <UART_SetConfig+0x348>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0c6      	b.n	8003638 <UART_SetConfig+0x348>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0c3      	b.n	8003638 <UART_SetConfig+0x348>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0c0      	b.n	8003638 <UART_SetConfig+0x348>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a44      	ldr	r2, [pc, #272]	; (80035cc <UART_SetConfig+0x2dc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <UART_SetConfig+0x21c>
 80034c0:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <UART_SetConfig+0x2cc>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d017      	beq.n	8003500 <UART_SetConfig+0x210>
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d817      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d00b      	beq.n	80034f4 <UART_SetConfig+0x204>
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d811      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <UART_SetConfig+0x1fe>
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d006      	beq.n	80034fa <UART_SetConfig+0x20a>
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x216>
 80034ee:	2300      	movs	r3, #0
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0a1      	b.n	8003638 <UART_SetConfig+0x348>
 80034f4:	2302      	movs	r3, #2
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e09e      	b.n	8003638 <UART_SetConfig+0x348>
 80034fa:	2304      	movs	r3, #4
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e09b      	b.n	8003638 <UART_SetConfig+0x348>
 8003500:	2308      	movs	r3, #8
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e098      	b.n	8003638 <UART_SetConfig+0x348>
 8003506:	2310      	movs	r3, #16
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e095      	b.n	8003638 <UART_SetConfig+0x348>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <UART_SetConfig+0x2e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x272>
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <UART_SetConfig+0x2cc>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0x266>
 8003526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352a:	d817      	bhi.n	800355c <UART_SetConfig+0x26c>
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d00b      	beq.n	800354a <UART_SetConfig+0x25a>
 8003532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003536:	d811      	bhi.n	800355c <UART_SetConfig+0x26c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <UART_SetConfig+0x254>
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x260>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x26c>
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e076      	b.n	8003638 <UART_SetConfig+0x348>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e073      	b.n	8003638 <UART_SetConfig+0x348>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e070      	b.n	8003638 <UART_SetConfig+0x348>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e06d      	b.n	8003638 <UART_SetConfig+0x348>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e06a      	b.n	8003638 <UART_SetConfig+0x348>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <UART_SetConfig+0x2e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d138      	bne.n	80035de <UART_SetConfig+0x2ee>
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <UART_SetConfig+0x2cc>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357a:	d017      	beq.n	80035ac <UART_SetConfig+0x2bc>
 800357c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003580:	d82a      	bhi.n	80035d8 <UART_SetConfig+0x2e8>
 8003582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003586:	d00b      	beq.n	80035a0 <UART_SetConfig+0x2b0>
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358c:	d824      	bhi.n	80035d8 <UART_SetConfig+0x2e8>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <UART_SetConfig+0x2aa>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	d006      	beq.n	80035a6 <UART_SetConfig+0x2b6>
 8003598:	e01e      	b.n	80035d8 <UART_SetConfig+0x2e8>
 800359a:	2300      	movs	r3, #0
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e04b      	b.n	8003638 <UART_SetConfig+0x348>
 80035a0:	2302      	movs	r3, #2
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e048      	b.n	8003638 <UART_SetConfig+0x348>
 80035a6:	2304      	movs	r3, #4
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e045      	b.n	8003638 <UART_SetConfig+0x348>
 80035ac:	2308      	movs	r3, #8
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e042      	b.n	8003638 <UART_SetConfig+0x348>
 80035b2:	bf00      	nop
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40004800 	.word	0x40004800
 80035c8:	40004c00 	.word	0x40004c00
 80035cc:	40005000 	.word	0x40005000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40007800 	.word	0x40007800
 80035d8:	2310      	movs	r3, #16
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e02c      	b.n	8003638 <UART_SetConfig+0x348>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	; (80037ac <UART_SetConfig+0x4bc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d125      	bne.n	8003634 <UART_SetConfig+0x344>
 80035e8:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <UART_SetConfig+0x4c0>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f6:	d017      	beq.n	8003628 <UART_SetConfig+0x338>
 80035f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035fc:	d817      	bhi.n	800362e <UART_SetConfig+0x33e>
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d00b      	beq.n	800361c <UART_SetConfig+0x32c>
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	d811      	bhi.n	800362e <UART_SetConfig+0x33e>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <UART_SetConfig+0x326>
 800360e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003612:	d006      	beq.n	8003622 <UART_SetConfig+0x332>
 8003614:	e00b      	b.n	800362e <UART_SetConfig+0x33e>
 8003616:	2300      	movs	r3, #0
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e00d      	b.n	8003638 <UART_SetConfig+0x348>
 800361c:	2302      	movs	r3, #2
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e00a      	b.n	8003638 <UART_SetConfig+0x348>
 8003622:	2304      	movs	r3, #4
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e007      	b.n	8003638 <UART_SetConfig+0x348>
 8003628:	2308      	movs	r3, #8
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e004      	b.n	8003638 <UART_SetConfig+0x348>
 800362e:	2310      	movs	r3, #16
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e001      	b.n	8003638 <UART_SetConfig+0x348>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003640:	d15b      	bne.n	80036fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003642:	7ffb      	ldrb	r3, [r7, #31]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d828      	bhi.n	800369a <UART_SetConfig+0x3aa>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x360>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003675 	.word	0x08003675
 8003654:	0800367d 	.word	0x0800367d
 8003658:	08003685 	.word	0x08003685
 800365c:	0800369b 	.word	0x0800369b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800369b 	.word	0x0800369b
 8003668:	0800369b 	.word	0x0800369b
 800366c:	0800369b 	.word	0x0800369b
 8003670:	08003693 	.word	0x08003693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7ff f91a 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003678:	61b8      	str	r0, [r7, #24]
        break;
 800367a:	e013      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff f92a 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e00f      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <UART_SetConfig+0x4c4>)
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00c      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7fe fffd 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800368e:	61b8      	str	r0, [r7, #24]
        break;
 8003690:	e008      	b.n	80036a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003696:	61bb      	str	r3, [r7, #24]
        break;
 8003698:	e004      	b.n	80036a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77bb      	strb	r3, [r7, #30]
        break;
 80036a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d074      	beq.n	8003794 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d916      	bls.n	80036f4 <UART_SetConfig+0x404>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d212      	bcs.n	80036f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	89fa      	ldrh	r2, [r7, #14]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e04f      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77bb      	strb	r3, [r7, #30]
 80036f8:	e04c      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d828      	bhi.n	8003752 <UART_SetConfig+0x462>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0x418>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7ff f8be 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003730:	61b8      	str	r0, [r7, #24]
        break;
 8003732:	e013      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7ff f8ce 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8003738:	61b8      	str	r0, [r7, #24]
        break;
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <UART_SetConfig+0x4c4>)
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e00c      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe ffa1 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8003746:	61b8      	str	r0, [r7, #24]
        break;
 8003748:	e008      	b.n	800375c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	61bb      	str	r3, [r7, #24]
        break;
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	77bb      	strb	r3, [r7, #30]
        break;
 800375a:	bf00      	nop
    }

    if (pclk != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d909      	bls.n	8003790 <UART_SetConfig+0x4a0>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d205      	bcs.n	8003790 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e001      	b.n	8003794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40007c00 	.word	0x40007c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01a      	beq.n	80038ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d10a      	bne.n	80038ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800390c:	f7fd fa82 	bl	8000e14 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d10e      	bne.n	800393e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f831 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e027      	b.n	800398e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d10e      	bne.n	800396a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f81b 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e011      	b.n	800398e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b09c      	sub	sp, #112	; 0x70
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	e0a7      	b.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	f000 80a3 	beq.w	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd fa2f 	bl	8000e14 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80039c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13f      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039dc:	667b      	str	r3, [r7, #100]	; 0x64
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e6      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	663b      	str	r3, [r7, #96]	; 0x60
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e068      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d050      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	d148      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e6      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e010      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	f43f af48 	beq.w	80039a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3770      	adds	r7, #112	; 0x70
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <gcvt>:
 8003b24:	b513      	push	{r0, r1, r4, lr}
 8003b26:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	bf42      	ittt	mi
 8003b32:	232d      	movmi	r3, #45	; 0x2d
 8003b34:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8003b38:	f802 3b01 	strbmi.w	r3, [r2], #1
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	2300      	movs	r3, #0
 8003b40:	4601      	mov	r1, r0
 8003b42:	4806      	ldr	r0, [pc, #24]	; (8003b5c <gcvt+0x38>)
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	2367      	movs	r3, #103	; 0x67
 8003b4a:	f000 f8b1 	bl	8003cb0 <_gcvt>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	bf14      	ite	ne
 8003b52:	4620      	movne	r0, r4
 8003b54:	2000      	moveq	r0, #0
 8003b56:	b002      	add	sp, #8
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000000c 	.word	0x2000000c

08003b60 <__errno>:
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <__errno+0x8>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ba4 <__libc_init_array+0x38>)
 8003b70:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	2600      	movs	r6, #0
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	4d0b      	ldr	r5, [pc, #44]	; (8003bac <__libc_init_array+0x40>)
 8003b7e:	4c0c      	ldr	r4, [pc, #48]	; (8003bb0 <__libc_init_array+0x44>)
 8003b80:	f002 fb02 	bl	8006188 <_init>
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	2600      	movs	r6, #0
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08006490 	.word	0x08006490
 8003ba8:	08006490 	.word	0x08006490
 8003bac:	08006490 	.word	0x08006490
 8003bb0:	08006494 	.word	0x08006494

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <print_e>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	461e      	mov	r6, r3
 8003bca:	ab04      	add	r3, sp, #16
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	ab03      	add	r3, sp, #12
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	ab05      	add	r3, sp, #20
 8003bd6:	4615      	mov	r5, r2
 8003bd8:	2102      	movs	r1, #2
 8003bda:	3201      	adds	r2, #1
 8003bdc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003bde:	f000 fe1f 	bl	8004820 <_dtoa_r>
 8003be2:	9b05      	ldr	r3, [sp, #20]
 8003be4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d105      	bne.n	8003bf8 <print_e+0x34>
 8003bec:	4601      	mov	r1, r0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 fd64 	bl	80046bc <strcpy>
 8003bf4:	b007      	add	sp, #28
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf8:	7802      	ldrb	r2, [r0, #0]
 8003bfa:	f804 2b01 	strb.w	r2, [r4], #1
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	bfc8      	it	gt
 8003c02:	2701      	movgt	r7, #1
 8003c04:	222e      	movs	r2, #46	; 0x2e
 8003c06:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8003c0a:	b109      	cbz	r1, 8003c10 <print_e+0x4c>
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	dc37      	bgt.n	8003c80 <print_e+0xbc>
 8003c10:	2e67      	cmp	r6, #103	; 0x67
 8003c12:	d046      	beq.n	8003ca2 <print_e+0xde>
 8003c14:	2e47      	cmp	r6, #71	; 0x47
 8003c16:	d046      	beq.n	8003ca6 <print_e+0xe2>
 8003c18:	222e      	movs	r2, #46	; 0x2e
 8003c1a:	2130      	movs	r1, #48	; 0x30
 8003c1c:	2d00      	cmp	r5, #0
 8003c1e:	dc38      	bgt.n	8003c92 <print_e+0xce>
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	bfb8      	it	lt
 8003c26:	f1c3 0301 	rsblt	r3, r3, #1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	9205      	str	r2, [sp, #20]
 8003c2e:	bfac      	ite	ge
 8003c30:	232b      	movge	r3, #43	; 0x2b
 8003c32:	9305      	strlt	r3, [sp, #20]
 8003c34:	f801 6b02 	strb.w	r6, [r1], #2
 8003c38:	bfa8      	it	ge
 8003c3a:	7063      	strbge	r3, [r4, #1]
 8003c3c:	9b05      	ldr	r3, [sp, #20]
 8003c3e:	bfbc      	itt	lt
 8003c40:	222d      	movlt	r2, #45	; 0x2d
 8003c42:	7062      	strblt	r2, [r4, #1]
 8003c44:	2b63      	cmp	r3, #99	; 0x63
 8003c46:	dd0b      	ble.n	8003c60 <print_e+0x9c>
 8003c48:	2264      	movs	r2, #100	; 0x64
 8003c4a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003c4e:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8003c52:	70a0      	strb	r0, [r4, #2]
 8003c54:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8003c58:	fb00 3302 	mla	r3, r0, r2, r3
 8003c5c:	1ce1      	adds	r1, r4, #3
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	9b05      	ldr	r3, [sp, #20]
 8003c62:	220a      	movs	r2, #10
 8003c64:	fb93 f2f2 	sdiv	r2, r3, r2
 8003c68:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8003c6c:	7008      	strb	r0, [r1, #0]
 8003c6e:	f06f 0009 	mvn.w	r0, #9
 8003c72:	fb00 3302 	mla	r3, r0, r2, r3
 8003c76:	3330      	adds	r3, #48	; 0x30
 8003c78:	704b      	strb	r3, [r1, #1]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	708b      	strb	r3, [r1, #2]
 8003c7e:	e7b9      	b.n	8003bf4 <print_e+0x30>
 8003c80:	b10f      	cbz	r7, 8003c86 <print_e+0xc2>
 8003c82:	f804 2b01 	strb.w	r2, [r4], #1
 8003c86:	7801      	ldrb	r1, [r0, #0]
 8003c88:	f804 1b01 	strb.w	r1, [r4], #1
 8003c8c:	3d01      	subs	r5, #1
 8003c8e:	2700      	movs	r7, #0
 8003c90:	e7b9      	b.n	8003c06 <print_e+0x42>
 8003c92:	b10f      	cbz	r7, 8003c98 <print_e+0xd4>
 8003c94:	f804 2b01 	strb.w	r2, [r4], #1
 8003c98:	f804 1b01 	strb.w	r1, [r4], #1
 8003c9c:	3d01      	subs	r5, #1
 8003c9e:	2700      	movs	r7, #0
 8003ca0:	e7bc      	b.n	8003c1c <print_e+0x58>
 8003ca2:	2665      	movs	r6, #101	; 0x65
 8003ca4:	e7bc      	b.n	8003c20 <print_e+0x5c>
 8003ca6:	2645      	movs	r6, #69	; 0x45
 8003ca8:	e7ba      	b.n	8003c20 <print_e+0x5c>
 8003caa:	0000      	movs	r0, r0
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <_gcvt>:
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003cb6:	ed2d 8b02 	vpush	{d8}
 8003cba:	eeb0 8b40 	vmov.f64	d8, d0
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	bf48      	it	mi
 8003cc6:	eeb1 8b40 	vnegmi.f64	d8, d0
 8003cca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	4615      	mov	r5, r2
 8003cda:	d108      	bne.n	8003cee <_gcvt+0x3e>
 8003cdc:	2330      	movs	r3, #48	; 0x30
 8003cde:	7013      	strb	r3, [r2, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	7053      	strb	r3, [r2, #1]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	b009      	add	sp, #36	; 0x24
 8003ce8:	ecbd 8b02 	vpop	{d8}
 8003cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cee:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8003e10 <_gcvt+0x160>
 8003cf2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	d808      	bhi.n	8003d0e <_gcvt+0x5e>
 8003cfc:	eeb0 0b48 	vmov.f64	d0, d8
 8003d00:	9700      	str	r7, [sp, #0]
 8003d02:	1e62      	subs	r2, r4, #1
 8003d04:	4629      	mov	r1, r5
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7ff ff5c 	bl	8003bc4 <print_e>
 8003d0c:	e7ea      	b.n	8003ce4 <_gcvt+0x34>
 8003d0e:	4608      	mov	r0, r1
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	f000 fc05 	bl	8004520 <_mprec_log10>
 8003d16:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	9b03      	ldr	r3, [sp, #12]
 8003d20:	d9ec      	bls.n	8003cfc <_gcvt+0x4c>
 8003d22:	eeb0 0b48 	vmov.f64	d0, d8
 8003d26:	ab07      	add	r3, sp, #28
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	ab06      	add	r3, sp, #24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4622      	mov	r2, r4
 8003d30:	ab05      	add	r3, sp, #20
 8003d32:	2102      	movs	r1, #2
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 fd73 	bl	8004820 <_dtoa_r>
 8003d3a:	9a05      	ldr	r2, [sp, #20]
 8003d3c:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d00c      	beq.n	8003d5e <_gcvt+0xae>
 8003d44:	462b      	mov	r3, r5
 8003d46:	1929      	adds	r1, r5, r4
 8003d48:	4684      	mov	ip, r0
 8003d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4e:	9c05      	ldr	r4, [sp, #20]
 8003d50:	1ace      	subs	r6, r1, r3
 8003d52:	b10a      	cbz	r2, 8003d58 <_gcvt+0xa8>
 8003d54:	2c00      	cmp	r4, #0
 8003d56:	dc07      	bgt.n	8003d68 <_gcvt+0xb8>
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2030      	movs	r0, #48	; 0x30
 8003d5c:	e00d      	b.n	8003d7a <_gcvt+0xca>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fcab 	bl	80046bc <strcpy>
 8003d66:	e7bd      	b.n	8003ce4 <_gcvt+0x34>
 8003d68:	3c01      	subs	r4, #1
 8003d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8003d6e:	9405      	str	r4, [sp, #20]
 8003d70:	e7ea      	b.n	8003d48 <_gcvt+0x98>
 8003d72:	f803 0b01 	strb.w	r0, [r3], #1
 8003d76:	3e01      	subs	r6, #1
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	dc29      	bgt.n	8003dd4 <_gcvt+0x124>
 8003d80:	b102      	cbz	r2, 8003d84 <_gcvt+0xd4>
 8003d82:	9405      	str	r4, [sp, #20]
 8003d84:	b917      	cbnz	r7, 8003d8c <_gcvt+0xdc>
 8003d86:	f89c 2000 	ldrb.w	r2, [ip]
 8003d8a:	b302      	cbz	r2, 8003dce <_gcvt+0x11e>
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	bf04      	itt	eq
 8003d90:	2230      	moveq	r2, #48	; 0x30
 8003d92:	f803 2b01 	strbeq.w	r2, [r3], #1
 8003d96:	222e      	movs	r2, #46	; 0x2e
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	9a05      	ldr	r2, [sp, #20]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	2000      	movs	r0, #0
 8003da0:	1ad4      	subs	r4, r2, r3
 8003da2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003da6:	42cc      	cmn	r4, r1
 8003da8:	d41c      	bmi.n	8003de4 <_gcvt+0x134>
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	f1c2 0100 	rsb	r1, r2, #0
 8003db0:	bfc8      	it	gt
 8003db2:	2100      	movgt	r1, #0
 8003db4:	1c4c      	adds	r4, r1, #1
 8003db6:	4423      	add	r3, r4
 8003db8:	440a      	add	r2, r1
 8003dba:	b100      	cbz	r0, 8003dbe <_gcvt+0x10e>
 8003dbc:	9205      	str	r2, [sp, #20]
 8003dbe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003dc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003dc6:	b109      	cbz	r1, 8003dcc <_gcvt+0x11c>
 8003dc8:	2e00      	cmp	r6, #0
 8003dca:	dc0f      	bgt.n	8003dec <_gcvt+0x13c>
 8003dcc:	b9df      	cbnz	r7, 8003e06 <_gcvt+0x156>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e787      	b.n	8003ce4 <_gcvt+0x34>
 8003dd4:	2e00      	cmp	r6, #0
 8003dd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003dda:	dcca      	bgt.n	8003d72 <_gcvt+0xc2>
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d0d1      	beq.n	8003d84 <_gcvt+0xd4>
 8003de0:	9105      	str	r1, [sp, #20]
 8003de2:	e7cf      	b.n	8003d84 <_gcvt+0xd4>
 8003de4:	f801 ef01 	strb.w	lr, [r1, #1]!
 8003de8:	2001      	movs	r0, #1
 8003dea:	e7dc      	b.n	8003da6 <_gcvt+0xf6>
 8003dec:	f803 1b01 	strb.w	r1, [r3], #1
 8003df0:	3e01      	subs	r6, #1
 8003df2:	e7e6      	b.n	8003dc2 <_gcvt+0x112>
 8003df4:	f802 4b01 	strb.w	r4, [r2], #1
 8003df8:	1a81      	subs	r1, r0, r2
 8003dfa:	2900      	cmp	r1, #0
 8003dfc:	dcfa      	bgt.n	8003df4 <_gcvt+0x144>
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	bfa8      	it	ge
 8003e02:	199b      	addge	r3, r3, r6
 8003e04:	e7e3      	b.n	8003dce <_gcvt+0x11e>
 8003e06:	461a      	mov	r2, r3
 8003e08:	1998      	adds	r0, r3, r6
 8003e0a:	2430      	movs	r4, #48	; 0x30
 8003e0c:	e7f4      	b.n	8003df8 <_gcvt+0x148>
 8003e0e:	bf00      	nop
 8003e10:	eb1c432d 	.word	0xeb1c432d
 8003e14:	3f1a36e2 	.word	0x3f1a36e2

08003e18 <_Balloc>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	460d      	mov	r5, r1
 8003e20:	b976      	cbnz	r6, 8003e40 <_Balloc+0x28>
 8003e22:	2010      	movs	r0, #16
 8003e24:	f001 fa7c 	bl	8005320 <malloc>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8003e2c:	b920      	cbnz	r0, 8003e38 <_Balloc+0x20>
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <_Balloc+0x78>)
 8003e30:	4818      	ldr	r0, [pc, #96]	; (8003e94 <_Balloc+0x7c>)
 8003e32:	2166      	movs	r1, #102	; 0x66
 8003e34:	f000 fc4a 	bl	80046cc <__assert_func>
 8003e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e3c:	6006      	str	r6, [r0, #0]
 8003e3e:	60c6      	str	r6, [r0, #12]
 8003e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e42:	68f3      	ldr	r3, [r6, #12]
 8003e44:	b183      	cbz	r3, 8003e68 <_Balloc+0x50>
 8003e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e4e:	b9b8      	cbnz	r0, 8003e80 <_Balloc+0x68>
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f605 	lsl.w	r6, r1, r5
 8003e56:	1d72      	adds	r2, r6, #5
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 fb74 	bl	8004548 <_calloc_r>
 8003e60:	b160      	cbz	r0, 8003e7c <_Balloc+0x64>
 8003e62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e66:	e00e      	b.n	8003e86 <_Balloc+0x6e>
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 fb6b 	bl	8004548 <_calloc_r>
 8003e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e74:	60f0      	str	r0, [r6, #12]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e4      	bne.n	8003e46 <_Balloc+0x2e>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e86:	2300      	movs	r3, #0
 8003e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e8c:	e7f7      	b.n	8003e7e <_Balloc+0x66>
 8003e8e:	bf00      	nop
 8003e90:	080061c8 	.word	0x080061c8
 8003e94:	080061df 	.word	0x080061df

08003e98 <_Bfree>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e9c:	4605      	mov	r5, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	b976      	cbnz	r6, 8003ec0 <_Bfree+0x28>
 8003ea2:	2010      	movs	r0, #16
 8003ea4:	f001 fa3c 	bl	8005320 <malloc>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6268      	str	r0, [r5, #36]	; 0x24
 8003eac:	b920      	cbnz	r0, 8003eb8 <_Bfree+0x20>
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <_Bfree+0x3c>)
 8003eb0:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <_Bfree+0x40>)
 8003eb2:	218a      	movs	r1, #138	; 0x8a
 8003eb4:	f000 fc0a 	bl	80046cc <__assert_func>
 8003eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ebc:	6006      	str	r6, [r0, #0]
 8003ebe:	60c6      	str	r6, [r0, #12]
 8003ec0:	b13c      	cbz	r4, 8003ed2 <_Bfree+0x3a>
 8003ec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ec4:	6862      	ldr	r2, [r4, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ecc:	6021      	str	r1, [r4, #0]
 8003ece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	080061c8 	.word	0x080061c8
 8003ed8:	080061df 	.word	0x080061df

08003edc <__multadd>:
 8003edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee0:	690d      	ldr	r5, [r1, #16]
 8003ee2:	4607      	mov	r7, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	461e      	mov	r6, r3
 8003ee8:	f101 0c14 	add.w	ip, r1, #20
 8003eec:	2000      	movs	r0, #0
 8003eee:	f8dc 3000 	ldr.w	r3, [ip]
 8003ef2:	b299      	uxth	r1, r3
 8003ef4:	fb02 6101 	mla	r1, r2, r1, r6
 8003ef8:	0c1e      	lsrs	r6, r3, #16
 8003efa:	0c0b      	lsrs	r3, r1, #16
 8003efc:	fb02 3306 	mla	r3, r2, r6, r3
 8003f00:	b289      	uxth	r1, r1
 8003f02:	3001      	adds	r0, #1
 8003f04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003f08:	4285      	cmp	r5, r0
 8003f0a:	f84c 1b04 	str.w	r1, [ip], #4
 8003f0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003f12:	dcec      	bgt.n	8003eee <__multadd+0x12>
 8003f14:	b30e      	cbz	r6, 8003f5a <__multadd+0x7e>
 8003f16:	68a3      	ldr	r3, [r4, #8]
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dc19      	bgt.n	8003f50 <__multadd+0x74>
 8003f1c:	6861      	ldr	r1, [r4, #4]
 8003f1e:	4638      	mov	r0, r7
 8003f20:	3101      	adds	r1, #1
 8003f22:	f7ff ff79 	bl	8003e18 <_Balloc>
 8003f26:	4680      	mov	r8, r0
 8003f28:	b928      	cbnz	r0, 8003f36 <__multadd+0x5a>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <__multadd+0x84>)
 8003f2e:	480d      	ldr	r0, [pc, #52]	; (8003f64 <__multadd+0x88>)
 8003f30:	21b5      	movs	r1, #181	; 0xb5
 8003f32:	f000 fbcb 	bl	80046cc <__assert_func>
 8003f36:	6922      	ldr	r2, [r4, #16]
 8003f38:	3202      	adds	r2, #2
 8003f3a:	f104 010c 	add.w	r1, r4, #12
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	300c      	adds	r0, #12
 8003f42:	f001 f9f5 	bl	8005330 <memcpy>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7ff ffa5 	bl	8003e98 <_Bfree>
 8003f4e:	4644      	mov	r4, r8
 8003f50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f54:	3501      	adds	r5, #1
 8003f56:	615e      	str	r6, [r3, #20]
 8003f58:	6125      	str	r5, [r4, #16]
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f60:	0800623b 	.word	0x0800623b
 8003f64:	080061df 	.word	0x080061df

08003f68 <__hi0bits>:
 8003f68:	0c03      	lsrs	r3, r0, #16
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	b9d3      	cbnz	r3, 8003fa4 <__hi0bits+0x3c>
 8003f6e:	0400      	lsls	r0, r0, #16
 8003f70:	2310      	movs	r3, #16
 8003f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003f76:	bf04      	itt	eq
 8003f78:	0200      	lsleq	r0, r0, #8
 8003f7a:	3308      	addeq	r3, #8
 8003f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003f80:	bf04      	itt	eq
 8003f82:	0100      	lsleq	r0, r0, #4
 8003f84:	3304      	addeq	r3, #4
 8003f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003f8a:	bf04      	itt	eq
 8003f8c:	0080      	lsleq	r0, r0, #2
 8003f8e:	3302      	addeq	r3, #2
 8003f90:	2800      	cmp	r0, #0
 8003f92:	db05      	blt.n	8003fa0 <__hi0bits+0x38>
 8003f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003f98:	f103 0301 	add.w	r3, r3, #1
 8003f9c:	bf08      	it	eq
 8003f9e:	2320      	moveq	r3, #32
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4770      	bx	lr
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e7e4      	b.n	8003f72 <__hi0bits+0xa>

08003fa8 <__lo0bits>:
 8003fa8:	6803      	ldr	r3, [r0, #0]
 8003faa:	f013 0207 	ands.w	r2, r3, #7
 8003fae:	4601      	mov	r1, r0
 8003fb0:	d00b      	beq.n	8003fca <__lo0bits+0x22>
 8003fb2:	07da      	lsls	r2, r3, #31
 8003fb4:	d423      	bmi.n	8003ffe <__lo0bits+0x56>
 8003fb6:	0798      	lsls	r0, r3, #30
 8003fb8:	bf49      	itett	mi
 8003fba:	085b      	lsrmi	r3, r3, #1
 8003fbc:	089b      	lsrpl	r3, r3, #2
 8003fbe:	2001      	movmi	r0, #1
 8003fc0:	600b      	strmi	r3, [r1, #0]
 8003fc2:	bf5c      	itt	pl
 8003fc4:	600b      	strpl	r3, [r1, #0]
 8003fc6:	2002      	movpl	r0, #2
 8003fc8:	4770      	bx	lr
 8003fca:	b298      	uxth	r0, r3
 8003fcc:	b9a8      	cbnz	r0, 8003ffa <__lo0bits+0x52>
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	2010      	movs	r0, #16
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	b90a      	cbnz	r2, 8003fda <__lo0bits+0x32>
 8003fd6:	3008      	adds	r0, #8
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	071a      	lsls	r2, r3, #28
 8003fdc:	bf04      	itt	eq
 8003fde:	091b      	lsreq	r3, r3, #4
 8003fe0:	3004      	addeq	r0, #4
 8003fe2:	079a      	lsls	r2, r3, #30
 8003fe4:	bf04      	itt	eq
 8003fe6:	089b      	lsreq	r3, r3, #2
 8003fe8:	3002      	addeq	r0, #2
 8003fea:	07da      	lsls	r2, r3, #31
 8003fec:	d403      	bmi.n	8003ff6 <__lo0bits+0x4e>
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	f100 0001 	add.w	r0, r0, #1
 8003ff4:	d005      	beq.n	8004002 <__lo0bits+0x5a>
 8003ff6:	600b      	str	r3, [r1, #0]
 8003ff8:	4770      	bx	lr
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	e7e9      	b.n	8003fd2 <__lo0bits+0x2a>
 8003ffe:	2000      	movs	r0, #0
 8004000:	4770      	bx	lr
 8004002:	2020      	movs	r0, #32
 8004004:	4770      	bx	lr
	...

08004008 <__i2b>:
 8004008:	b510      	push	{r4, lr}
 800400a:	460c      	mov	r4, r1
 800400c:	2101      	movs	r1, #1
 800400e:	f7ff ff03 	bl	8003e18 <_Balloc>
 8004012:	4602      	mov	r2, r0
 8004014:	b928      	cbnz	r0, 8004022 <__i2b+0x1a>
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <__i2b+0x24>)
 8004018:	4805      	ldr	r0, [pc, #20]	; (8004030 <__i2b+0x28>)
 800401a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800401e:	f000 fb55 	bl	80046cc <__assert_func>
 8004022:	2301      	movs	r3, #1
 8004024:	6144      	str	r4, [r0, #20]
 8004026:	6103      	str	r3, [r0, #16]
 8004028:	bd10      	pop	{r4, pc}
 800402a:	bf00      	nop
 800402c:	0800623b 	.word	0x0800623b
 8004030:	080061df 	.word	0x080061df

08004034 <__multiply>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	4691      	mov	r9, r2
 800403a:	690a      	ldr	r2, [r1, #16]
 800403c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	bfb8      	it	lt
 8004044:	460b      	movlt	r3, r1
 8004046:	460c      	mov	r4, r1
 8004048:	bfbc      	itt	lt
 800404a:	464c      	movlt	r4, r9
 800404c:	4699      	movlt	r9, r3
 800404e:	6927      	ldr	r7, [r4, #16]
 8004050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004054:	68a3      	ldr	r3, [r4, #8]
 8004056:	6861      	ldr	r1, [r4, #4]
 8004058:	eb07 060a 	add.w	r6, r7, sl
 800405c:	42b3      	cmp	r3, r6
 800405e:	b085      	sub	sp, #20
 8004060:	bfb8      	it	lt
 8004062:	3101      	addlt	r1, #1
 8004064:	f7ff fed8 	bl	8003e18 <_Balloc>
 8004068:	b930      	cbnz	r0, 8004078 <__multiply+0x44>
 800406a:	4602      	mov	r2, r0
 800406c:	4b44      	ldr	r3, [pc, #272]	; (8004180 <__multiply+0x14c>)
 800406e:	4845      	ldr	r0, [pc, #276]	; (8004184 <__multiply+0x150>)
 8004070:	f240 115d 	movw	r1, #349	; 0x15d
 8004074:	f000 fb2a 	bl	80046cc <__assert_func>
 8004078:	f100 0514 	add.w	r5, r0, #20
 800407c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004080:	462b      	mov	r3, r5
 8004082:	2200      	movs	r2, #0
 8004084:	4543      	cmp	r3, r8
 8004086:	d321      	bcc.n	80040cc <__multiply+0x98>
 8004088:	f104 0314 	add.w	r3, r4, #20
 800408c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004090:	f109 0314 	add.w	r3, r9, #20
 8004094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004098:	9202      	str	r2, [sp, #8]
 800409a:	1b3a      	subs	r2, r7, r4
 800409c:	3a15      	subs	r2, #21
 800409e:	f022 0203 	bic.w	r2, r2, #3
 80040a2:	3204      	adds	r2, #4
 80040a4:	f104 0115 	add.w	r1, r4, #21
 80040a8:	428f      	cmp	r7, r1
 80040aa:	bf38      	it	cc
 80040ac:	2204      	movcc	r2, #4
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	9a02      	ldr	r2, [sp, #8]
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d80c      	bhi.n	80040d2 <__multiply+0x9e>
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	dd03      	ble.n	80040c4 <__multiply+0x90>
 80040bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05a      	beq.n	800417a <__multiply+0x146>
 80040c4:	6106      	str	r6, [r0, #16]
 80040c6:	b005      	add	sp, #20
 80040c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040cc:	f843 2b04 	str.w	r2, [r3], #4
 80040d0:	e7d8      	b.n	8004084 <__multiply+0x50>
 80040d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80040d6:	f1ba 0f00 	cmp.w	sl, #0
 80040da:	d024      	beq.n	8004126 <__multiply+0xf2>
 80040dc:	f104 0e14 	add.w	lr, r4, #20
 80040e0:	46a9      	mov	r9, r5
 80040e2:	f04f 0c00 	mov.w	ip, #0
 80040e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80040ea:	f8d9 1000 	ldr.w	r1, [r9]
 80040ee:	fa1f fb82 	uxth.w	fp, r2
 80040f2:	b289      	uxth	r1, r1
 80040f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80040f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80040fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004100:	4461      	add	r1, ip
 8004102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004106:	fb0a c20b 	mla	r2, sl, fp, ip
 800410a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800410e:	b289      	uxth	r1, r1
 8004110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004114:	4577      	cmp	r7, lr
 8004116:	f849 1b04 	str.w	r1, [r9], #4
 800411a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800411e:	d8e2      	bhi.n	80040e6 <__multiply+0xb2>
 8004120:	9a01      	ldr	r2, [sp, #4]
 8004122:	f845 c002 	str.w	ip, [r5, r2]
 8004126:	9a03      	ldr	r2, [sp, #12]
 8004128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800412c:	3304      	adds	r3, #4
 800412e:	f1b9 0f00 	cmp.w	r9, #0
 8004132:	d020      	beq.n	8004176 <__multiply+0x142>
 8004134:	6829      	ldr	r1, [r5, #0]
 8004136:	f104 0c14 	add.w	ip, r4, #20
 800413a:	46ae      	mov	lr, r5
 800413c:	f04f 0a00 	mov.w	sl, #0
 8004140:	f8bc b000 	ldrh.w	fp, [ip]
 8004144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004148:	fb09 220b 	mla	r2, r9, fp, r2
 800414c:	4492      	add	sl, r2
 800414e:	b289      	uxth	r1, r1
 8004150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004154:	f84e 1b04 	str.w	r1, [lr], #4
 8004158:	f85c 2b04 	ldr.w	r2, [ip], #4
 800415c:	f8be 1000 	ldrh.w	r1, [lr]
 8004160:	0c12      	lsrs	r2, r2, #16
 8004162:	fb09 1102 	mla	r1, r9, r2, r1
 8004166:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800416a:	4567      	cmp	r7, ip
 800416c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004170:	d8e6      	bhi.n	8004140 <__multiply+0x10c>
 8004172:	9a01      	ldr	r2, [sp, #4]
 8004174:	50a9      	str	r1, [r5, r2]
 8004176:	3504      	adds	r5, #4
 8004178:	e79a      	b.n	80040b0 <__multiply+0x7c>
 800417a:	3e01      	subs	r6, #1
 800417c:	e79c      	b.n	80040b8 <__multiply+0x84>
 800417e:	bf00      	nop
 8004180:	0800623b 	.word	0x0800623b
 8004184:	080061df 	.word	0x080061df

08004188 <__pow5mult>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	4615      	mov	r5, r2
 800418e:	f012 0203 	ands.w	r2, r2, #3
 8004192:	4606      	mov	r6, r0
 8004194:	460f      	mov	r7, r1
 8004196:	d007      	beq.n	80041a8 <__pow5mult+0x20>
 8004198:	4c25      	ldr	r4, [pc, #148]	; (8004230 <__pow5mult+0xa8>)
 800419a:	3a01      	subs	r2, #1
 800419c:	2300      	movs	r3, #0
 800419e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041a2:	f7ff fe9b 	bl	8003edc <__multadd>
 80041a6:	4607      	mov	r7, r0
 80041a8:	10ad      	asrs	r5, r5, #2
 80041aa:	d03d      	beq.n	8004228 <__pow5mult+0xa0>
 80041ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80041ae:	b97c      	cbnz	r4, 80041d0 <__pow5mult+0x48>
 80041b0:	2010      	movs	r0, #16
 80041b2:	f001 f8b5 	bl	8005320 <malloc>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6270      	str	r0, [r6, #36]	; 0x24
 80041ba:	b928      	cbnz	r0, 80041c8 <__pow5mult+0x40>
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <__pow5mult+0xac>)
 80041be:	481e      	ldr	r0, [pc, #120]	; (8004238 <__pow5mult+0xb0>)
 80041c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80041c4:	f000 fa82 	bl	80046cc <__assert_func>
 80041c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041cc:	6004      	str	r4, [r0, #0]
 80041ce:	60c4      	str	r4, [r0, #12]
 80041d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80041d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80041d8:	b94c      	cbnz	r4, 80041ee <__pow5mult+0x66>
 80041da:	f240 2171 	movw	r1, #625	; 0x271
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff ff12 	bl	8004008 <__i2b>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80041ea:	4604      	mov	r4, r0
 80041ec:	6003      	str	r3, [r0, #0]
 80041ee:	f04f 0900 	mov.w	r9, #0
 80041f2:	07eb      	lsls	r3, r5, #31
 80041f4:	d50a      	bpl.n	800420c <__pow5mult+0x84>
 80041f6:	4639      	mov	r1, r7
 80041f8:	4622      	mov	r2, r4
 80041fa:	4630      	mov	r0, r6
 80041fc:	f7ff ff1a 	bl	8004034 <__multiply>
 8004200:	4639      	mov	r1, r7
 8004202:	4680      	mov	r8, r0
 8004204:	4630      	mov	r0, r6
 8004206:	f7ff fe47 	bl	8003e98 <_Bfree>
 800420a:	4647      	mov	r7, r8
 800420c:	106d      	asrs	r5, r5, #1
 800420e:	d00b      	beq.n	8004228 <__pow5mult+0xa0>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	b938      	cbnz	r0, 8004224 <__pow5mult+0x9c>
 8004214:	4622      	mov	r2, r4
 8004216:	4621      	mov	r1, r4
 8004218:	4630      	mov	r0, r6
 800421a:	f7ff ff0b 	bl	8004034 <__multiply>
 800421e:	6020      	str	r0, [r4, #0]
 8004220:	f8c0 9000 	str.w	r9, [r0]
 8004224:	4604      	mov	r4, r0
 8004226:	e7e4      	b.n	80041f2 <__pow5mult+0x6a>
 8004228:	4638      	mov	r0, r7
 800422a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800422e:	bf00      	nop
 8004230:	08006340 	.word	0x08006340
 8004234:	080061c8 	.word	0x080061c8
 8004238:	080061df 	.word	0x080061df

0800423c <__lshift>:
 800423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004240:	460c      	mov	r4, r1
 8004242:	6849      	ldr	r1, [r1, #4]
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	4607      	mov	r7, r0
 800424e:	4691      	mov	r9, r2
 8004250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004254:	f108 0601 	add.w	r6, r8, #1
 8004258:	42b3      	cmp	r3, r6
 800425a:	db0b      	blt.n	8004274 <__lshift+0x38>
 800425c:	4638      	mov	r0, r7
 800425e:	f7ff fddb 	bl	8003e18 <_Balloc>
 8004262:	4605      	mov	r5, r0
 8004264:	b948      	cbnz	r0, 800427a <__lshift+0x3e>
 8004266:	4602      	mov	r2, r0
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <__lshift+0xd8>)
 800426a:	482b      	ldr	r0, [pc, #172]	; (8004318 <__lshift+0xdc>)
 800426c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004270:	f000 fa2c 	bl	80046cc <__assert_func>
 8004274:	3101      	adds	r1, #1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	e7ee      	b.n	8004258 <__lshift+0x1c>
 800427a:	2300      	movs	r3, #0
 800427c:	f100 0114 	add.w	r1, r0, #20
 8004280:	f100 0210 	add.w	r2, r0, #16
 8004284:	4618      	mov	r0, r3
 8004286:	4553      	cmp	r3, sl
 8004288:	db37      	blt.n	80042fa <__lshift+0xbe>
 800428a:	6920      	ldr	r0, [r4, #16]
 800428c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004290:	f104 0314 	add.w	r3, r4, #20
 8004294:	f019 091f 	ands.w	r9, r9, #31
 8004298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800429c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80042a0:	d02f      	beq.n	8004302 <__lshift+0xc6>
 80042a2:	f1c9 0e20 	rsb	lr, r9, #32
 80042a6:	468a      	mov	sl, r1
 80042a8:	f04f 0c00 	mov.w	ip, #0
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	fa02 f209 	lsl.w	r2, r2, r9
 80042b2:	ea42 020c 	orr.w	r2, r2, ip
 80042b6:	f84a 2b04 	str.w	r2, [sl], #4
 80042ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80042be:	4298      	cmp	r0, r3
 80042c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80042c4:	d8f2      	bhi.n	80042ac <__lshift+0x70>
 80042c6:	1b03      	subs	r3, r0, r4
 80042c8:	3b15      	subs	r3, #21
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	3304      	adds	r3, #4
 80042d0:	f104 0215 	add.w	r2, r4, #21
 80042d4:	4290      	cmp	r0, r2
 80042d6:	bf38      	it	cc
 80042d8:	2304      	movcc	r3, #4
 80042da:	f841 c003 	str.w	ip, [r1, r3]
 80042de:	f1bc 0f00 	cmp.w	ip, #0
 80042e2:	d001      	beq.n	80042e8 <__lshift+0xac>
 80042e4:	f108 0602 	add.w	r6, r8, #2
 80042e8:	3e01      	subs	r6, #1
 80042ea:	4638      	mov	r0, r7
 80042ec:	612e      	str	r6, [r5, #16]
 80042ee:	4621      	mov	r1, r4
 80042f0:	f7ff fdd2 	bl	8003e98 <_Bfree>
 80042f4:	4628      	mov	r0, r5
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80042fe:	3301      	adds	r3, #1
 8004300:	e7c1      	b.n	8004286 <__lshift+0x4a>
 8004302:	3904      	subs	r1, #4
 8004304:	f853 2b04 	ldr.w	r2, [r3], #4
 8004308:	f841 2f04 	str.w	r2, [r1, #4]!
 800430c:	4298      	cmp	r0, r3
 800430e:	d8f9      	bhi.n	8004304 <__lshift+0xc8>
 8004310:	e7ea      	b.n	80042e8 <__lshift+0xac>
 8004312:	bf00      	nop
 8004314:	0800623b 	.word	0x0800623b
 8004318:	080061df 	.word	0x080061df

0800431c <__mcmp>:
 800431c:	b530      	push	{r4, r5, lr}
 800431e:	6902      	ldr	r2, [r0, #16]
 8004320:	690c      	ldr	r4, [r1, #16]
 8004322:	1b12      	subs	r2, r2, r4
 8004324:	d10e      	bne.n	8004344 <__mcmp+0x28>
 8004326:	f100 0314 	add.w	r3, r0, #20
 800432a:	3114      	adds	r1, #20
 800432c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800433c:	42a5      	cmp	r5, r4
 800433e:	d003      	beq.n	8004348 <__mcmp+0x2c>
 8004340:	d305      	bcc.n	800434e <__mcmp+0x32>
 8004342:	2201      	movs	r2, #1
 8004344:	4610      	mov	r0, r2
 8004346:	bd30      	pop	{r4, r5, pc}
 8004348:	4283      	cmp	r3, r0
 800434a:	d3f3      	bcc.n	8004334 <__mcmp+0x18>
 800434c:	e7fa      	b.n	8004344 <__mcmp+0x28>
 800434e:	f04f 32ff 	mov.w	r2, #4294967295
 8004352:	e7f7      	b.n	8004344 <__mcmp+0x28>

08004354 <__mdiff>:
 8004354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	460c      	mov	r4, r1
 800435a:	4606      	mov	r6, r0
 800435c:	4611      	mov	r1, r2
 800435e:	4620      	mov	r0, r4
 8004360:	4690      	mov	r8, r2
 8004362:	f7ff ffdb 	bl	800431c <__mcmp>
 8004366:	1e05      	subs	r5, r0, #0
 8004368:	d110      	bne.n	800438c <__mdiff+0x38>
 800436a:	4629      	mov	r1, r5
 800436c:	4630      	mov	r0, r6
 800436e:	f7ff fd53 	bl	8003e18 <_Balloc>
 8004372:	b930      	cbnz	r0, 8004382 <__mdiff+0x2e>
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <__mdiff+0x10c>)
 8004376:	4602      	mov	r2, r0
 8004378:	f240 2132 	movw	r1, #562	; 0x232
 800437c:	4839      	ldr	r0, [pc, #228]	; (8004464 <__mdiff+0x110>)
 800437e:	f000 f9a5 	bl	80046cc <__assert_func>
 8004382:	2301      	movs	r3, #1
 8004384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	bfa4      	itt	ge
 800438e:	4643      	movge	r3, r8
 8004390:	46a0      	movge	r8, r4
 8004392:	4630      	mov	r0, r6
 8004394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004398:	bfa6      	itte	ge
 800439a:	461c      	movge	r4, r3
 800439c:	2500      	movge	r5, #0
 800439e:	2501      	movlt	r5, #1
 80043a0:	f7ff fd3a 	bl	8003e18 <_Balloc>
 80043a4:	b920      	cbnz	r0, 80043b0 <__mdiff+0x5c>
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <__mdiff+0x10c>)
 80043a8:	4602      	mov	r2, r0
 80043aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80043ae:	e7e5      	b.n	800437c <__mdiff+0x28>
 80043b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80043b4:	6926      	ldr	r6, [r4, #16]
 80043b6:	60c5      	str	r5, [r0, #12]
 80043b8:	f104 0914 	add.w	r9, r4, #20
 80043bc:	f108 0514 	add.w	r5, r8, #20
 80043c0:	f100 0e14 	add.w	lr, r0, #20
 80043c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80043c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80043cc:	f108 0210 	add.w	r2, r8, #16
 80043d0:	46f2      	mov	sl, lr
 80043d2:	2100      	movs	r1, #0
 80043d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80043d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80043dc:	fa1f f883 	uxth.w	r8, r3
 80043e0:	fa11 f18b 	uxtah	r1, r1, fp
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	eba1 0808 	sub.w	r8, r1, r8
 80043ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80043ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80043f2:	fa1f f888 	uxth.w	r8, r8
 80043f6:	1419      	asrs	r1, r3, #16
 80043f8:	454e      	cmp	r6, r9
 80043fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80043fe:	f84a 3b04 	str.w	r3, [sl], #4
 8004402:	d8e7      	bhi.n	80043d4 <__mdiff+0x80>
 8004404:	1b33      	subs	r3, r6, r4
 8004406:	3b15      	subs	r3, #21
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	3304      	adds	r3, #4
 800440e:	3415      	adds	r4, #21
 8004410:	42a6      	cmp	r6, r4
 8004412:	bf38      	it	cc
 8004414:	2304      	movcc	r3, #4
 8004416:	441d      	add	r5, r3
 8004418:	4473      	add	r3, lr
 800441a:	469e      	mov	lr, r3
 800441c:	462e      	mov	r6, r5
 800441e:	4566      	cmp	r6, ip
 8004420:	d30e      	bcc.n	8004440 <__mdiff+0xec>
 8004422:	f10c 0203 	add.w	r2, ip, #3
 8004426:	1b52      	subs	r2, r2, r5
 8004428:	f022 0203 	bic.w	r2, r2, #3
 800442c:	3d03      	subs	r5, #3
 800442e:	45ac      	cmp	ip, r5
 8004430:	bf38      	it	cc
 8004432:	2200      	movcc	r2, #0
 8004434:	441a      	add	r2, r3
 8004436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800443a:	b17b      	cbz	r3, 800445c <__mdiff+0x108>
 800443c:	6107      	str	r7, [r0, #16]
 800443e:	e7a3      	b.n	8004388 <__mdiff+0x34>
 8004440:	f856 8b04 	ldr.w	r8, [r6], #4
 8004444:	fa11 f288 	uxtah	r2, r1, r8
 8004448:	1414      	asrs	r4, r2, #16
 800444a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800444e:	b292      	uxth	r2, r2
 8004450:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004454:	f84e 2b04 	str.w	r2, [lr], #4
 8004458:	1421      	asrs	r1, r4, #16
 800445a:	e7e0      	b.n	800441e <__mdiff+0xca>
 800445c:	3f01      	subs	r7, #1
 800445e:	e7ea      	b.n	8004436 <__mdiff+0xe2>
 8004460:	0800623b 	.word	0x0800623b
 8004464:	080061df 	.word	0x080061df

08004468 <__d2b>:
 8004468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800446c:	4689      	mov	r9, r1
 800446e:	2101      	movs	r1, #1
 8004470:	ec57 6b10 	vmov	r6, r7, d0
 8004474:	4690      	mov	r8, r2
 8004476:	f7ff fccf 	bl	8003e18 <_Balloc>
 800447a:	4604      	mov	r4, r0
 800447c:	b930      	cbnz	r0, 800448c <__d2b+0x24>
 800447e:	4602      	mov	r2, r0
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <__d2b+0xb0>)
 8004482:	4826      	ldr	r0, [pc, #152]	; (800451c <__d2b+0xb4>)
 8004484:	f240 310a 	movw	r1, #778	; 0x30a
 8004488:	f000 f920 	bl	80046cc <__assert_func>
 800448c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004494:	bb35      	cbnz	r5, 80044e4 <__d2b+0x7c>
 8004496:	2e00      	cmp	r6, #0
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	d028      	beq.n	80044ee <__d2b+0x86>
 800449c:	4668      	mov	r0, sp
 800449e:	9600      	str	r6, [sp, #0]
 80044a0:	f7ff fd82 	bl	8003fa8 <__lo0bits>
 80044a4:	9900      	ldr	r1, [sp, #0]
 80044a6:	b300      	cbz	r0, 80044ea <__d2b+0x82>
 80044a8:	9a01      	ldr	r2, [sp, #4]
 80044aa:	f1c0 0320 	rsb	r3, r0, #32
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	430b      	orrs	r3, r1
 80044b4:	40c2      	lsrs	r2, r0
 80044b6:	6163      	str	r3, [r4, #20]
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	61a3      	str	r3, [r4, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2202      	movne	r2, #2
 80044c4:	2201      	moveq	r2, #1
 80044c6:	6122      	str	r2, [r4, #16]
 80044c8:	b1d5      	cbz	r5, 8004500 <__d2b+0x98>
 80044ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80044ce:	4405      	add	r5, r0
 80044d0:	f8c9 5000 	str.w	r5, [r9]
 80044d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80044d8:	f8c8 0000 	str.w	r0, [r8]
 80044dc:	4620      	mov	r0, r4
 80044de:	b003      	add	sp, #12
 80044e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e8:	e7d5      	b.n	8004496 <__d2b+0x2e>
 80044ea:	6161      	str	r1, [r4, #20]
 80044ec:	e7e5      	b.n	80044ba <__d2b+0x52>
 80044ee:	a801      	add	r0, sp, #4
 80044f0:	f7ff fd5a 	bl	8003fa8 <__lo0bits>
 80044f4:	9b01      	ldr	r3, [sp, #4]
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	2201      	movs	r2, #1
 80044fa:	6122      	str	r2, [r4, #16]
 80044fc:	3020      	adds	r0, #32
 80044fe:	e7e3      	b.n	80044c8 <__d2b+0x60>
 8004500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004508:	f8c9 0000 	str.w	r0, [r9]
 800450c:	6918      	ldr	r0, [r3, #16]
 800450e:	f7ff fd2b 	bl	8003f68 <__hi0bits>
 8004512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004516:	e7df      	b.n	80044d8 <__d2b+0x70>
 8004518:	0800623b 	.word	0x0800623b
 800451c:	080061df 	.word	0x080061df

08004520 <_mprec_log10>:
 8004520:	2817      	cmp	r0, #23
 8004522:	dc05      	bgt.n	8004530 <_mprec_log10+0x10>
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <_mprec_log10+0x24>)
 8004526:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800452a:	ed90 0b00 	vldr	d0, [r0]
 800452e:	4770      	bx	lr
 8004530:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004534:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8004538:	3801      	subs	r0, #1
 800453a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800453e:	d1fb      	bne.n	8004538 <_mprec_log10+0x18>
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08006278 	.word	0x08006278

08004548 <_calloc_r>:
 8004548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800454a:	fba1 2402 	umull	r2, r4, r1, r2
 800454e:	b94c      	cbnz	r4, 8004564 <_calloc_r+0x1c>
 8004550:	4611      	mov	r1, r2
 8004552:	9201      	str	r2, [sp, #4]
 8004554:	f000 f82e 	bl	80045b4 <_malloc_r>
 8004558:	9a01      	ldr	r2, [sp, #4]
 800455a:	4605      	mov	r5, r0
 800455c:	b930      	cbnz	r0, 800456c <_calloc_r+0x24>
 800455e:	4628      	mov	r0, r5
 8004560:	b003      	add	sp, #12
 8004562:	bd30      	pop	{r4, r5, pc}
 8004564:	220c      	movs	r2, #12
 8004566:	6002      	str	r2, [r0, #0]
 8004568:	2500      	movs	r5, #0
 800456a:	e7f8      	b.n	800455e <_calloc_r+0x16>
 800456c:	4621      	mov	r1, r4
 800456e:	f7ff fb21 	bl	8003bb4 <memset>
 8004572:	e7f4      	b.n	800455e <_calloc_r+0x16>

08004574 <sbrk_aligned>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4e0e      	ldr	r6, [pc, #56]	; (80045b0 <sbrk_aligned+0x3c>)
 8004578:	460c      	mov	r4, r1
 800457a:	6831      	ldr	r1, [r6, #0]
 800457c:	4605      	mov	r5, r0
 800457e:	b911      	cbnz	r1, 8004586 <sbrk_aligned+0x12>
 8004580:	f000 f88c 	bl	800469c <_sbrk_r>
 8004584:	6030      	str	r0, [r6, #0]
 8004586:	4621      	mov	r1, r4
 8004588:	4628      	mov	r0, r5
 800458a:	f000 f887 	bl	800469c <_sbrk_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	d00a      	beq.n	80045a8 <sbrk_aligned+0x34>
 8004592:	1cc4      	adds	r4, r0, #3
 8004594:	f024 0403 	bic.w	r4, r4, #3
 8004598:	42a0      	cmp	r0, r4
 800459a:	d007      	beq.n	80045ac <sbrk_aligned+0x38>
 800459c:	1a21      	subs	r1, r4, r0
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 f87c 	bl	800469c <_sbrk_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d101      	bne.n	80045ac <sbrk_aligned+0x38>
 80045a8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ac:	4620      	mov	r0, r4
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	20000174 	.word	0x20000174

080045b4 <_malloc_r>:
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	1ccd      	adds	r5, r1, #3
 80045ba:	f025 0503 	bic.w	r5, r5, #3
 80045be:	3508      	adds	r5, #8
 80045c0:	2d0c      	cmp	r5, #12
 80045c2:	bf38      	it	cc
 80045c4:	250c      	movcc	r5, #12
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	4607      	mov	r7, r0
 80045ca:	db01      	blt.n	80045d0 <_malloc_r+0x1c>
 80045cc:	42a9      	cmp	r1, r5
 80045ce:	d905      	bls.n	80045dc <_malloc_r+0x28>
 80045d0:	230c      	movs	r3, #12
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	2600      	movs	r6, #0
 80045d6:	4630      	mov	r0, r6
 80045d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045dc:	4e2e      	ldr	r6, [pc, #184]	; (8004698 <_malloc_r+0xe4>)
 80045de:	f000 feb5 	bl	800534c <__malloc_lock>
 80045e2:	6833      	ldr	r3, [r6, #0]
 80045e4:	461c      	mov	r4, r3
 80045e6:	bb34      	cbnz	r4, 8004636 <_malloc_r+0x82>
 80045e8:	4629      	mov	r1, r5
 80045ea:	4638      	mov	r0, r7
 80045ec:	f7ff ffc2 	bl	8004574 <sbrk_aligned>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	4604      	mov	r4, r0
 80045f4:	d14d      	bne.n	8004692 <_malloc_r+0xde>
 80045f6:	6834      	ldr	r4, [r6, #0]
 80045f8:	4626      	mov	r6, r4
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d140      	bne.n	8004680 <_malloc_r+0xcc>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	4631      	mov	r1, r6
 8004602:	4638      	mov	r0, r7
 8004604:	eb04 0803 	add.w	r8, r4, r3
 8004608:	f000 f848 	bl	800469c <_sbrk_r>
 800460c:	4580      	cmp	r8, r0
 800460e:	d13a      	bne.n	8004686 <_malloc_r+0xd2>
 8004610:	6821      	ldr	r1, [r4, #0]
 8004612:	3503      	adds	r5, #3
 8004614:	1a6d      	subs	r5, r5, r1
 8004616:	f025 0503 	bic.w	r5, r5, #3
 800461a:	3508      	adds	r5, #8
 800461c:	2d0c      	cmp	r5, #12
 800461e:	bf38      	it	cc
 8004620:	250c      	movcc	r5, #12
 8004622:	4629      	mov	r1, r5
 8004624:	4638      	mov	r0, r7
 8004626:	f7ff ffa5 	bl	8004574 <sbrk_aligned>
 800462a:	3001      	adds	r0, #1
 800462c:	d02b      	beq.n	8004686 <_malloc_r+0xd2>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	442b      	add	r3, r5
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	e00e      	b.n	8004654 <_malloc_r+0xa0>
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	1b52      	subs	r2, r2, r5
 800463a:	d41e      	bmi.n	800467a <_malloc_r+0xc6>
 800463c:	2a0b      	cmp	r2, #11
 800463e:	d916      	bls.n	800466e <_malloc_r+0xba>
 8004640:	1961      	adds	r1, r4, r5
 8004642:	42a3      	cmp	r3, r4
 8004644:	6025      	str	r5, [r4, #0]
 8004646:	bf18      	it	ne
 8004648:	6059      	strne	r1, [r3, #4]
 800464a:	6863      	ldr	r3, [r4, #4]
 800464c:	bf08      	it	eq
 800464e:	6031      	streq	r1, [r6, #0]
 8004650:	5162      	str	r2, [r4, r5]
 8004652:	604b      	str	r3, [r1, #4]
 8004654:	4638      	mov	r0, r7
 8004656:	f104 060b 	add.w	r6, r4, #11
 800465a:	f000 fe7d 	bl	8005358 <__malloc_unlock>
 800465e:	f026 0607 	bic.w	r6, r6, #7
 8004662:	1d23      	adds	r3, r4, #4
 8004664:	1af2      	subs	r2, r6, r3
 8004666:	d0b6      	beq.n	80045d6 <_malloc_r+0x22>
 8004668:	1b9b      	subs	r3, r3, r6
 800466a:	50a3      	str	r3, [r4, r2]
 800466c:	e7b3      	b.n	80045d6 <_malloc_r+0x22>
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	42a3      	cmp	r3, r4
 8004672:	bf0c      	ite	eq
 8004674:	6032      	streq	r2, [r6, #0]
 8004676:	605a      	strne	r2, [r3, #4]
 8004678:	e7ec      	b.n	8004654 <_malloc_r+0xa0>
 800467a:	4623      	mov	r3, r4
 800467c:	6864      	ldr	r4, [r4, #4]
 800467e:	e7b2      	b.n	80045e6 <_malloc_r+0x32>
 8004680:	4634      	mov	r4, r6
 8004682:	6876      	ldr	r6, [r6, #4]
 8004684:	e7b9      	b.n	80045fa <_malloc_r+0x46>
 8004686:	230c      	movs	r3, #12
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4638      	mov	r0, r7
 800468c:	f000 fe64 	bl	8005358 <__malloc_unlock>
 8004690:	e7a1      	b.n	80045d6 <_malloc_r+0x22>
 8004692:	6025      	str	r5, [r4, #0]
 8004694:	e7de      	b.n	8004654 <_malloc_r+0xa0>
 8004696:	bf00      	nop
 8004698:	20000170 	.word	0x20000170

0800469c <_sbrk_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	; (80046b8 <_sbrk_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc faf2 	bl	8000c90 <_sbrk>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_sbrk_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_sbrk_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000178 	.word	0x20000178

080046bc <strcpy>:
 80046bc:	4603      	mov	r3, r0
 80046be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c2:	f803 2b01 	strb.w	r2, [r3], #1
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	d1f9      	bne.n	80046be <strcpy+0x2>
 80046ca:	4770      	bx	lr

080046cc <__assert_func>:
 80046cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046ce:	4614      	mov	r4, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <__assert_func+0x2c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4605      	mov	r5, r0
 80046d8:	68d8      	ldr	r0, [r3, #12]
 80046da:	b14c      	cbz	r4, 80046f0 <__assert_func+0x24>
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <__assert_func+0x30>)
 80046de:	9100      	str	r1, [sp, #0]
 80046e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80046e4:	4906      	ldr	r1, [pc, #24]	; (8004700 <__assert_func+0x34>)
 80046e6:	462b      	mov	r3, r5
 80046e8:	f000 fe08 	bl	80052fc <fiprintf>
 80046ec:	f001 fa34 	bl	8005b58 <abort>
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <__assert_func+0x38>)
 80046f2:	461c      	mov	r4, r3
 80046f4:	e7f3      	b.n	80046de <__assert_func+0x12>
 80046f6:	bf00      	nop
 80046f8:	2000000c 	.word	0x2000000c
 80046fc:	0800634c 	.word	0x0800634c
 8004700:	08006359 	.word	0x08006359
 8004704:	08006387 	.word	0x08006387

08004708 <quorem>:
 8004708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	6903      	ldr	r3, [r0, #16]
 800470e:	690c      	ldr	r4, [r1, #16]
 8004710:	42a3      	cmp	r3, r4
 8004712:	4607      	mov	r7, r0
 8004714:	f2c0 8081 	blt.w	800481a <quorem+0x112>
 8004718:	3c01      	subs	r4, #1
 800471a:	f101 0814 	add.w	r8, r1, #20
 800471e:	f100 0514 	add.w	r5, r0, #20
 8004722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800472c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004730:	3301      	adds	r3, #1
 8004732:	429a      	cmp	r2, r3
 8004734:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800473c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004740:	d331      	bcc.n	80047a6 <quorem+0x9e>
 8004742:	f04f 0e00 	mov.w	lr, #0
 8004746:	4640      	mov	r0, r8
 8004748:	46ac      	mov	ip, r5
 800474a:	46f2      	mov	sl, lr
 800474c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004750:	b293      	uxth	r3, r2
 8004752:	fb06 e303 	mla	r3, r6, r3, lr
 8004756:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800475a:	b29b      	uxth	r3, r3
 800475c:	ebaa 0303 	sub.w	r3, sl, r3
 8004760:	f8dc a000 	ldr.w	sl, [ip]
 8004764:	0c12      	lsrs	r2, r2, #16
 8004766:	fa13 f38a 	uxtah	r3, r3, sl
 800476a:	fb06 e202 	mla	r2, r6, r2, lr
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	9b00      	ldr	r3, [sp, #0]
 8004772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004776:	b292      	uxth	r2, r2
 8004778:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800477c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004780:	f8bd 3000 	ldrh.w	r3, [sp]
 8004784:	4581      	cmp	r9, r0
 8004786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800478a:	f84c 3b04 	str.w	r3, [ip], #4
 800478e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004792:	d2db      	bcs.n	800474c <quorem+0x44>
 8004794:	f855 300b 	ldr.w	r3, [r5, fp]
 8004798:	b92b      	cbnz	r3, 80047a6 <quorem+0x9e>
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	3b04      	subs	r3, #4
 800479e:	429d      	cmp	r5, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	d32e      	bcc.n	8004802 <quorem+0xfa>
 80047a4:	613c      	str	r4, [r7, #16]
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7ff fdb8 	bl	800431c <__mcmp>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	db24      	blt.n	80047fa <quorem+0xf2>
 80047b0:	3601      	adds	r6, #1
 80047b2:	4628      	mov	r0, r5
 80047b4:	f04f 0c00 	mov.w	ip, #0
 80047b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80047bc:	f8d0 e000 	ldr.w	lr, [r0]
 80047c0:	b293      	uxth	r3, r2
 80047c2:	ebac 0303 	sub.w	r3, ip, r3
 80047c6:	0c12      	lsrs	r2, r2, #16
 80047c8:	fa13 f38e 	uxtah	r3, r3, lr
 80047cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047da:	45c1      	cmp	r9, r8
 80047dc:	f840 3b04 	str.w	r3, [r0], #4
 80047e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047e4:	d2e8      	bcs.n	80047b8 <quorem+0xb0>
 80047e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ee:	b922      	cbnz	r2, 80047fa <quorem+0xf2>
 80047f0:	3b04      	subs	r3, #4
 80047f2:	429d      	cmp	r5, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	d30a      	bcc.n	800480e <quorem+0x106>
 80047f8:	613c      	str	r4, [r7, #16]
 80047fa:	4630      	mov	r0, r6
 80047fc:	b003      	add	sp, #12
 80047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	3b04      	subs	r3, #4
 8004806:	2a00      	cmp	r2, #0
 8004808:	d1cc      	bne.n	80047a4 <quorem+0x9c>
 800480a:	3c01      	subs	r4, #1
 800480c:	e7c7      	b.n	800479e <quorem+0x96>
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	3b04      	subs	r3, #4
 8004812:	2a00      	cmp	r2, #0
 8004814:	d1f0      	bne.n	80047f8 <quorem+0xf0>
 8004816:	3c01      	subs	r4, #1
 8004818:	e7eb      	b.n	80047f2 <quorem+0xea>
 800481a:	2000      	movs	r0, #0
 800481c:	e7ee      	b.n	80047fc <quorem+0xf4>
	...

08004820 <_dtoa_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	ed2d 8b02 	vpush	{d8}
 8004828:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800482a:	b091      	sub	sp, #68	; 0x44
 800482c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004830:	ec59 8b10 	vmov	r8, r9, d0
 8004834:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004836:	9106      	str	r1, [sp, #24]
 8004838:	4606      	mov	r6, r0
 800483a:	9208      	str	r2, [sp, #32]
 800483c:	930c      	str	r3, [sp, #48]	; 0x30
 800483e:	b975      	cbnz	r5, 800485e <_dtoa_r+0x3e>
 8004840:	2010      	movs	r0, #16
 8004842:	f000 fd6d 	bl	8005320 <malloc>
 8004846:	4602      	mov	r2, r0
 8004848:	6270      	str	r0, [r6, #36]	; 0x24
 800484a:	b920      	cbnz	r0, 8004856 <_dtoa_r+0x36>
 800484c:	4baa      	ldr	r3, [pc, #680]	; (8004af8 <_dtoa_r+0x2d8>)
 800484e:	21ea      	movs	r1, #234	; 0xea
 8004850:	48aa      	ldr	r0, [pc, #680]	; (8004afc <_dtoa_r+0x2dc>)
 8004852:	f7ff ff3b 	bl	80046cc <__assert_func>
 8004856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800485a:	6005      	str	r5, [r0, #0]
 800485c:	60c5      	str	r5, [r0, #12]
 800485e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	b151      	cbz	r1, 800487a <_dtoa_r+0x5a>
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	604a      	str	r2, [r1, #4]
 8004868:	2301      	movs	r3, #1
 800486a:	4093      	lsls	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	4630      	mov	r0, r6
 8004870:	f7ff fb12 	bl	8003e98 <_Bfree>
 8004874:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f1b9 0300 	subs.w	r3, r9, #0
 800487e:	bfbb      	ittet	lt
 8004880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004884:	9303      	strlt	r3, [sp, #12]
 8004886:	2300      	movge	r3, #0
 8004888:	2201      	movlt	r2, #1
 800488a:	bfac      	ite	ge
 800488c:	6023      	strge	r3, [r4, #0]
 800488e:	6022      	strlt	r2, [r4, #0]
 8004890:	4b9b      	ldr	r3, [pc, #620]	; (8004b00 <_dtoa_r+0x2e0>)
 8004892:	9c03      	ldr	r4, [sp, #12]
 8004894:	43a3      	bics	r3, r4
 8004896:	d11c      	bne.n	80048d2 <_dtoa_r+0xb2>
 8004898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800489a:	f242 730f 	movw	r3, #9999	; 0x270f
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80048a4:	ea53 0308 	orrs.w	r3, r3, r8
 80048a8:	f000 84fd 	beq.w	80052a6 <_dtoa_r+0xa86>
 80048ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048ae:	b963      	cbnz	r3, 80048ca <_dtoa_r+0xaa>
 80048b0:	4b94      	ldr	r3, [pc, #592]	; (8004b04 <_dtoa_r+0x2e4>)
 80048b2:	e01f      	b.n	80048f4 <_dtoa_r+0xd4>
 80048b4:	4b94      	ldr	r3, [pc, #592]	; (8004b08 <_dtoa_r+0x2e8>)
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	3308      	adds	r3, #8
 80048ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	9801      	ldr	r0, [sp, #4]
 80048c0:	b011      	add	sp, #68	; 0x44
 80048c2:	ecbd 8b02 	vpop	{d8}
 80048c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ca:	4b8e      	ldr	r3, [pc, #568]	; (8004b04 <_dtoa_r+0x2e4>)
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	3303      	adds	r3, #3
 80048d0:	e7f3      	b.n	80048ba <_dtoa_r+0x9a>
 80048d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80048d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d10b      	bne.n	80048f8 <_dtoa_r+0xd8>
 80048e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e2:	2301      	movs	r3, #1
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 84d9 	beq.w	80052a0 <_dtoa_r+0xa80>
 80048ee:	4887      	ldr	r0, [pc, #540]	; (8004b0c <_dtoa_r+0x2ec>)
 80048f0:	6018      	str	r0, [r3, #0]
 80048f2:	1e43      	subs	r3, r0, #1
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	e7e2      	b.n	80048be <_dtoa_r+0x9e>
 80048f8:	a90f      	add	r1, sp, #60	; 0x3c
 80048fa:	aa0e      	add	r2, sp, #56	; 0x38
 80048fc:	4630      	mov	r0, r6
 80048fe:	eeb0 0b48 	vmov.f64	d0, d8
 8004902:	f7ff fdb1 	bl	8004468 <__d2b>
 8004906:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800490a:	4605      	mov	r5, r0
 800490c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800490e:	2900      	cmp	r1, #0
 8004910:	d046      	beq.n	80049a0 <_dtoa_r+0x180>
 8004912:	ee18 4a90 	vmov	r4, s17
 8004916:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800491a:	ec53 2b18 	vmov	r2, r3, d8
 800491e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8004922:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004926:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800492a:	2400      	movs	r4, #0
 800492c:	ec43 2b16 	vmov	d6, r2, r3
 8004930:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004934:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004ae0 <_dtoa_r+0x2c0>
 8004938:	ee36 7b47 	vsub.f64	d7, d6, d7
 800493c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004ae8 <_dtoa_r+0x2c8>
 8004940:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004944:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004af0 <_dtoa_r+0x2d0>
 8004948:	ee07 1a90 	vmov	s15, r1
 800494c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004950:	eeb0 7b46 	vmov.f64	d7, d6
 8004954:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004958:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800495c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	ee16 ba90 	vmov	fp, s13
 8004968:	940a      	str	r4, [sp, #40]	; 0x28
 800496a:	d508      	bpl.n	800497e <_dtoa_r+0x15e>
 800496c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004970:	eeb4 6b47 	vcmp.f64	d6, d7
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	bf18      	it	ne
 800497a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800497e:	f1bb 0f16 	cmp.w	fp, #22
 8004982:	d82f      	bhi.n	80049e4 <_dtoa_r+0x1c4>
 8004984:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <_dtoa_r+0x2f0>)
 8004986:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800498a:	ed93 7b00 	vldr	d7, [r3]
 800498e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d501      	bpl.n	800499c <_dtoa_r+0x17c>
 8004998:	f10b 3bff 	add.w	fp, fp, #4294967295
 800499c:	2300      	movs	r3, #0
 800499e:	e022      	b.n	80049e6 <_dtoa_r+0x1c6>
 80049a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80049a2:	4401      	add	r1, r0
 80049a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	bfc1      	itttt	gt
 80049ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049b0:	fa04 f303 	lslgt.w	r3, r4, r3
 80049b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80049b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80049bc:	bfd6      	itet	le
 80049be:	f1c3 0320 	rsble	r3, r3, #32
 80049c2:	ea43 0808 	orrgt.w	r8, r3, r8
 80049c6:	fa08 f803 	lslle.w	r8, r8, r3
 80049ca:	ee07 8a90 	vmov	s15, r8
 80049ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80049d2:	3901      	subs	r1, #1
 80049d4:	ee17 4a90 	vmov	r4, s15
 80049d8:	ec53 2b17 	vmov	r2, r3, d7
 80049dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80049e0:	2401      	movs	r4, #1
 80049e2:	e7a3      	b.n	800492c <_dtoa_r+0x10c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e8:	1a43      	subs	r3, r0, r1
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	bf45      	ittet	mi
 80049ee:	f1c3 0301 	rsbmi	r3, r3, #1
 80049f2:	9304      	strmi	r3, [sp, #16]
 80049f4:	2300      	movpl	r3, #0
 80049f6:	2300      	movmi	r3, #0
 80049f8:	9205      	str	r2, [sp, #20]
 80049fa:	bf54      	ite	pl
 80049fc:	9304      	strpl	r3, [sp, #16]
 80049fe:	9305      	strmi	r3, [sp, #20]
 8004a00:	f1bb 0f00 	cmp.w	fp, #0
 8004a04:	db18      	blt.n	8004a38 <_dtoa_r+0x218>
 8004a06:	9b05      	ldr	r3, [sp, #20]
 8004a08:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004a0c:	445b      	add	r3, fp
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	2300      	movs	r3, #0
 8004a12:	9a06      	ldr	r2, [sp, #24]
 8004a14:	2a09      	cmp	r2, #9
 8004a16:	d849      	bhi.n	8004aac <_dtoa_r+0x28c>
 8004a18:	2a05      	cmp	r2, #5
 8004a1a:	bfc4      	itt	gt
 8004a1c:	3a04      	subgt	r2, #4
 8004a1e:	9206      	strgt	r2, [sp, #24]
 8004a20:	9a06      	ldr	r2, [sp, #24]
 8004a22:	f1a2 0202 	sub.w	r2, r2, #2
 8004a26:	bfcc      	ite	gt
 8004a28:	2400      	movgt	r4, #0
 8004a2a:	2401      	movle	r4, #1
 8004a2c:	2a03      	cmp	r2, #3
 8004a2e:	d848      	bhi.n	8004ac2 <_dtoa_r+0x2a2>
 8004a30:	e8df f002 	tbb	[pc, r2]
 8004a34:	3a2c2e0b 	.word	0x3a2c2e0b
 8004a38:	9b04      	ldr	r3, [sp, #16]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	eba3 030b 	sub.w	r3, r3, fp
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	9209      	str	r2, [sp, #36]	; 0x24
 8004a44:	f1cb 0300 	rsb	r3, fp, #0
 8004a48:	e7e3      	b.n	8004a12 <_dtoa_r+0x1f2>
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	9207      	str	r2, [sp, #28]
 8004a4e:	9a08      	ldr	r2, [sp, #32]
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	dc39      	bgt.n	8004ac8 <_dtoa_r+0x2a8>
 8004a54:	f04f 0a01 	mov.w	sl, #1
 8004a58:	46d1      	mov	r9, sl
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8004a60:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004a62:	2100      	movs	r1, #0
 8004a64:	6079      	str	r1, [r7, #4]
 8004a66:	2004      	movs	r0, #4
 8004a68:	f100 0c14 	add.w	ip, r0, #20
 8004a6c:	4594      	cmp	ip, r2
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	d92f      	bls.n	8004ad2 <_dtoa_r+0x2b2>
 8004a72:	4630      	mov	r0, r6
 8004a74:	930d      	str	r3, [sp, #52]	; 0x34
 8004a76:	f7ff f9cf 	bl	8003e18 <_Balloc>
 8004a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a7c:	9001      	str	r0, [sp, #4]
 8004a7e:	4602      	mov	r2, r0
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d149      	bne.n	8004b18 <_dtoa_r+0x2f8>
 8004a84:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <_dtoa_r+0x2f4>)
 8004a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a8a:	e6e1      	b.n	8004850 <_dtoa_r+0x30>
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	e7dd      	b.n	8004a4c <_dtoa_r+0x22c>
 8004a90:	2200      	movs	r2, #0
 8004a92:	9207      	str	r2, [sp, #28]
 8004a94:	9a08      	ldr	r2, [sp, #32]
 8004a96:	eb0b 0a02 	add.w	sl, fp, r2
 8004a9a:	f10a 0901 	add.w	r9, sl, #1
 8004a9e:	464a      	mov	r2, r9
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	bfb8      	it	lt
 8004aa4:	2201      	movlt	r2, #1
 8004aa6:	e7db      	b.n	8004a60 <_dtoa_r+0x240>
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	e7f2      	b.n	8004a92 <_dtoa_r+0x272>
 8004aac:	2401      	movs	r4, #1
 8004aae:	2200      	movs	r2, #0
 8004ab0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004ab4:	f04f 3aff 	mov.w	sl, #4294967295
 8004ab8:	2100      	movs	r1, #0
 8004aba:	46d1      	mov	r9, sl
 8004abc:	2212      	movs	r2, #18
 8004abe:	9108      	str	r1, [sp, #32]
 8004ac0:	e7ce      	b.n	8004a60 <_dtoa_r+0x240>
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	9207      	str	r2, [sp, #28]
 8004ac6:	e7f5      	b.n	8004ab4 <_dtoa_r+0x294>
 8004ac8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004acc:	46d1      	mov	r9, sl
 8004ace:	4652      	mov	r2, sl
 8004ad0:	e7c6      	b.n	8004a60 <_dtoa_r+0x240>
 8004ad2:	3101      	adds	r1, #1
 8004ad4:	6079      	str	r1, [r7, #4]
 8004ad6:	0040      	lsls	r0, r0, #1
 8004ad8:	e7c6      	b.n	8004a68 <_dtoa_r+0x248>
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w
 8004ae0:	636f4361 	.word	0x636f4361
 8004ae4:	3fd287a7 	.word	0x3fd287a7
 8004ae8:	8b60c8b3 	.word	0x8b60c8b3
 8004aec:	3fc68a28 	.word	0x3fc68a28
 8004af0:	509f79fb 	.word	0x509f79fb
 8004af4:	3fd34413 	.word	0x3fd34413
 8004af8:	080061c8 	.word	0x080061c8
 8004afc:	08006397 	.word	0x08006397
 8004b00:	7ff00000 	.word	0x7ff00000
 8004b04:	08006391 	.word	0x08006391
 8004b08:	08006388 	.word	0x08006388
 8004b0c:	08006396 	.word	0x08006396
 8004b10:	08006278 	.word	0x08006278
 8004b14:	0800623b 	.word	0x0800623b
 8004b18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004b1a:	9901      	ldr	r1, [sp, #4]
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	f1b9 0f0e 	cmp.w	r9, #14
 8004b22:	d86c      	bhi.n	8004bfe <_dtoa_r+0x3de>
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d06a      	beq.n	8004bfe <_dtoa_r+0x3de>
 8004b28:	f1bb 0f00 	cmp.w	fp, #0
 8004b2c:	f340 80a0 	ble.w	8004c70 <_dtoa_r+0x450>
 8004b30:	49c1      	ldr	r1, [pc, #772]	; (8004e38 <_dtoa_r+0x618>)
 8004b32:	f00b 020f 	and.w	r2, fp, #15
 8004b36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004b3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004b3e:	ed92 7b00 	vldr	d7, [r2]
 8004b42:	ea4f 112b 	mov.w	r1, fp, asr #4
 8004b46:	f000 8087 	beq.w	8004c58 <_dtoa_r+0x438>
 8004b4a:	4abc      	ldr	r2, [pc, #752]	; (8004e3c <_dtoa_r+0x61c>)
 8004b4c:	ed92 6b08 	vldr	d6, [r2, #32]
 8004b50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004b54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004b58:	f001 010f 	and.w	r1, r1, #15
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	48b7      	ldr	r0, [pc, #732]	; (8004e3c <_dtoa_r+0x61c>)
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d17b      	bne.n	8004c5c <_dtoa_r+0x43c>
 8004b64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004b68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b72:	2900      	cmp	r1, #0
 8004b74:	f000 80a2 	beq.w	8004cbc <_dtoa_r+0x49c>
 8004b78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004b7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b88:	f140 8098 	bpl.w	8004cbc <_dtoa_r+0x49c>
 8004b8c:	f1b9 0f00 	cmp.w	r9, #0
 8004b90:	f000 8094 	beq.w	8004cbc <_dtoa_r+0x49c>
 8004b94:	f1ba 0f00 	cmp.w	sl, #0
 8004b98:	dd2f      	ble.n	8004bfa <_dtoa_r+0x3da>
 8004b9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ba2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ba6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004baa:	3201      	adds	r2, #1
 8004bac:	4650      	mov	r0, sl
 8004bae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004bb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004bb6:	ee07 2a90 	vmov	s15, r2
 8004bba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004bbe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004bc2:	ee15 4a90 	vmov	r4, s11
 8004bc6:	ec52 1b15 	vmov	r1, r2, d5
 8004bca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d177      	bne.n	8004cc2 <_dtoa_r+0x4a2>
 8004bd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004bd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004bda:	ec42 1b17 	vmov	d7, r1, r2
 8004bde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	f300 8263 	bgt.w	80050b0 <_dtoa_r+0x890>
 8004bea:	eeb1 7b47 	vneg.f64	d7, d7
 8004bee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf6:	f100 8258 	bmi.w	80050aa <_dtoa_r+0x88a>
 8004bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	f2c0 811d 	blt.w	8004e40 <_dtoa_r+0x620>
 8004c06:	f1bb 0f0e 	cmp.w	fp, #14
 8004c0a:	f300 8119 	bgt.w	8004e40 <_dtoa_r+0x620>
 8004c0e:	4b8a      	ldr	r3, [pc, #552]	; (8004e38 <_dtoa_r+0x618>)
 8004c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c14:	ed93 6b00 	vldr	d6, [r3]
 8004c18:	9b08      	ldr	r3, [sp, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f280 80b7 	bge.w	8004d8e <_dtoa_r+0x56e>
 8004c20:	f1b9 0f00 	cmp.w	r9, #0
 8004c24:	f300 80b3 	bgt.w	8004d8e <_dtoa_r+0x56e>
 8004c28:	f040 823f 	bne.w	80050aa <_dtoa_r+0x88a>
 8004c2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004c30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c40:	464c      	mov	r4, r9
 8004c42:	464f      	mov	r7, r9
 8004c44:	f280 8215 	bge.w	8005072 <_dtoa_r+0x852>
 8004c48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004c4c:	2331      	movs	r3, #49	; 0x31
 8004c4e:	f808 3b01 	strb.w	r3, [r8], #1
 8004c52:	f10b 0b01 	add.w	fp, fp, #1
 8004c56:	e211      	b.n	800507c <_dtoa_r+0x85c>
 8004c58:	2202      	movs	r2, #2
 8004c5a:	e780      	b.n	8004b5e <_dtoa_r+0x33e>
 8004c5c:	07cc      	lsls	r4, r1, #31
 8004c5e:	d504      	bpl.n	8004c6a <_dtoa_r+0x44a>
 8004c60:	ed90 6b00 	vldr	d6, [r0]
 8004c64:	3201      	adds	r2, #1
 8004c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c6a:	1049      	asrs	r1, r1, #1
 8004c6c:	3008      	adds	r0, #8
 8004c6e:	e777      	b.n	8004b60 <_dtoa_r+0x340>
 8004c70:	d022      	beq.n	8004cb8 <_dtoa_r+0x498>
 8004c72:	f1cb 0100 	rsb	r1, fp, #0
 8004c76:	4a70      	ldr	r2, [pc, #448]	; (8004e38 <_dtoa_r+0x618>)
 8004c78:	f001 000f 	and.w	r0, r1, #15
 8004c7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004c80:	ed92 7b00 	vldr	d7, [r2]
 8004c84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c8c:	486b      	ldr	r0, [pc, #428]	; (8004e3c <_dtoa_r+0x61c>)
 8004c8e:	1109      	asrs	r1, r1, #4
 8004c90:	2400      	movs	r4, #0
 8004c92:	2202      	movs	r2, #2
 8004c94:	b929      	cbnz	r1, 8004ca2 <_dtoa_r+0x482>
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	f43f af6a 	beq.w	8004b70 <_dtoa_r+0x350>
 8004c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ca0:	e766      	b.n	8004b70 <_dtoa_r+0x350>
 8004ca2:	07cf      	lsls	r7, r1, #31
 8004ca4:	d505      	bpl.n	8004cb2 <_dtoa_r+0x492>
 8004ca6:	ed90 6b00 	vldr	d6, [r0]
 8004caa:	3201      	adds	r2, #1
 8004cac:	2401      	movs	r4, #1
 8004cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cb2:	1049      	asrs	r1, r1, #1
 8004cb4:	3008      	adds	r0, #8
 8004cb6:	e7ed      	b.n	8004c94 <_dtoa_r+0x474>
 8004cb8:	2202      	movs	r2, #2
 8004cba:	e759      	b.n	8004b70 <_dtoa_r+0x350>
 8004cbc:	465f      	mov	r7, fp
 8004cbe:	4648      	mov	r0, r9
 8004cc0:	e775      	b.n	8004bae <_dtoa_r+0x38e>
 8004cc2:	ec42 1b17 	vmov	d7, r1, r2
 8004cc6:	4a5c      	ldr	r2, [pc, #368]	; (8004e38 <_dtoa_r+0x618>)
 8004cc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004ccc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004cd0:	9a01      	ldr	r2, [sp, #4]
 8004cd2:	1814      	adds	r4, r2, r0
 8004cd4:	9a07      	ldr	r2, [sp, #28]
 8004cd6:	b352      	cbz	r2, 8004d2e <_dtoa_r+0x50e>
 8004cd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004cdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004ce0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ce4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004ce8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004cf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004cf4:	ee14 2a90 	vmov	r2, s9
 8004cf8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004cfc:	3230      	adds	r2, #48	; 0x30
 8004cfe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004d02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	f808 2b01 	strb.w	r2, [r8], #1
 8004d0e:	d439      	bmi.n	8004d84 <_dtoa_r+0x564>
 8004d10:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004d14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1c:	d472      	bmi.n	8004e04 <_dtoa_r+0x5e4>
 8004d1e:	45a0      	cmp	r8, r4
 8004d20:	f43f af6b 	beq.w	8004bfa <_dtoa_r+0x3da>
 8004d24:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004d28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004d2c:	e7e0      	b.n	8004cf0 <_dtoa_r+0x4d0>
 8004d2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004d36:	4621      	mov	r1, r4
 8004d38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004d3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004d40:	ee14 2a90 	vmov	r2, s9
 8004d44:	3230      	adds	r2, #48	; 0x30
 8004d46:	f808 2b01 	strb.w	r2, [r8], #1
 8004d4a:	45a0      	cmp	r8, r4
 8004d4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004d50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004d54:	d118      	bne.n	8004d88 <_dtoa_r+0x568>
 8004d56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004d5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004d5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	dc4d      	bgt.n	8004e04 <_dtoa_r+0x5e4>
 8004d68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	f57f af41 	bpl.w	8004bfa <_dtoa_r+0x3da>
 8004d78:	4688      	mov	r8, r1
 8004d7a:	3901      	subs	r1, #1
 8004d7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d0f9      	beq.n	8004d78 <_dtoa_r+0x558>
 8004d84:	46bb      	mov	fp, r7
 8004d86:	e02a      	b.n	8004dde <_dtoa_r+0x5be>
 8004d88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004d8c:	e7d6      	b.n	8004d3c <_dtoa_r+0x51c>
 8004d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004d9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004da2:	ee15 3a10 	vmov	r3, s10
 8004da6:	3330      	adds	r3, #48	; 0x30
 8004da8:	f808 3b01 	strb.w	r3, [r8], #1
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	eba8 0303 	sub.w	r3, r8, r3
 8004db2:	4599      	cmp	r9, r3
 8004db4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004db8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004dbc:	d133      	bne.n	8004e26 <_dtoa_r+0x606>
 8004dbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004dc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	dc1a      	bgt.n	8004e02 <_dtoa_r+0x5e2>
 8004dcc:	eeb4 7b46 	vcmp.f64	d7, d6
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d103      	bne.n	8004dde <_dtoa_r+0x5be>
 8004dd6:	ee15 3a10 	vmov	r3, s10
 8004dda:	07d9      	lsls	r1, r3, #31
 8004ddc:	d411      	bmi.n	8004e02 <_dtoa_r+0x5e2>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7ff f859 	bl	8003e98 <_Bfree>
 8004de6:	2300      	movs	r3, #0
 8004de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dea:	f888 3000 	strb.w	r3, [r8]
 8004dee:	f10b 0301 	add.w	r3, fp, #1
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f43f ad61 	beq.w	80048be <_dtoa_r+0x9e>
 8004dfc:	f8c3 8000 	str.w	r8, [r3]
 8004e00:	e55d      	b.n	80048be <_dtoa_r+0x9e>
 8004e02:	465f      	mov	r7, fp
 8004e04:	4643      	mov	r3, r8
 8004e06:	4698      	mov	r8, r3
 8004e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e0c:	2a39      	cmp	r2, #57	; 0x39
 8004e0e:	d106      	bne.n	8004e1e <_dtoa_r+0x5fe>
 8004e10:	9a01      	ldr	r2, [sp, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d1f7      	bne.n	8004e06 <_dtoa_r+0x5e6>
 8004e16:	9901      	ldr	r1, [sp, #4]
 8004e18:	2230      	movs	r2, #48	; 0x30
 8004e1a:	3701      	adds	r7, #1
 8004e1c:	700a      	strb	r2, [r1, #0]
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	3201      	adds	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e7ae      	b.n	8004d84 <_dtoa_r+0x564>
 8004e26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	d1b2      	bne.n	8004d9a <_dtoa_r+0x57a>
 8004e34:	e7d3      	b.n	8004dde <_dtoa_r+0x5be>
 8004e36:	bf00      	nop
 8004e38:	08006278 	.word	0x08006278
 8004e3c:	08006250 	.word	0x08006250
 8004e40:	9907      	ldr	r1, [sp, #28]
 8004e42:	2900      	cmp	r1, #0
 8004e44:	f000 80d0 	beq.w	8004fe8 <_dtoa_r+0x7c8>
 8004e48:	9906      	ldr	r1, [sp, #24]
 8004e4a:	2901      	cmp	r1, #1
 8004e4c:	f300 80b4 	bgt.w	8004fb8 <_dtoa_r+0x798>
 8004e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e52:	2900      	cmp	r1, #0
 8004e54:	f000 80ac 	beq.w	8004fb0 <_dtoa_r+0x790>
 8004e58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004e60:	461c      	mov	r4, r3
 8004e62:	930a      	str	r3, [sp, #40]	; 0x28
 8004e64:	9b04      	ldr	r3, [sp, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	9b05      	ldr	r3, [sp, #20]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	4630      	mov	r0, r6
 8004e72:	9305      	str	r3, [sp, #20]
 8004e74:	f7ff f8c8 	bl	8004008 <__i2b>
 8004e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	f1b8 0f00 	cmp.w	r8, #0
 8004e80:	dd0d      	ble.n	8004e9e <_dtoa_r+0x67e>
 8004e82:	9a05      	ldr	r2, [sp, #20]
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	dd0a      	ble.n	8004e9e <_dtoa_r+0x67e>
 8004e88:	4542      	cmp	r2, r8
 8004e8a:	9904      	ldr	r1, [sp, #16]
 8004e8c:	bfa8      	it	ge
 8004e8e:	4642      	movge	r2, r8
 8004e90:	1a89      	subs	r1, r1, r2
 8004e92:	9104      	str	r1, [sp, #16]
 8004e94:	9905      	ldr	r1, [sp, #20]
 8004e96:	eba8 0802 	sub.w	r8, r8, r2
 8004e9a:	1a8a      	subs	r2, r1, r2
 8004e9c:	9205      	str	r2, [sp, #20]
 8004e9e:	b303      	cbz	r3, 8004ee2 <_dtoa_r+0x6c2>
 8004ea0:	9a07      	ldr	r2, [sp, #28]
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	f000 80a5 	beq.w	8004ff2 <_dtoa_r+0x7d2>
 8004ea8:	2c00      	cmp	r4, #0
 8004eaa:	dd13      	ble.n	8004ed4 <_dtoa_r+0x6b4>
 8004eac:	4639      	mov	r1, r7
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8004eb4:	f7ff f968 	bl	8004188 <__pow5mult>
 8004eb8:	462a      	mov	r2, r5
 8004eba:	4601      	mov	r1, r0
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff f8b8 	bl	8004034 <__multiply>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	900a      	str	r0, [sp, #40]	; 0x28
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f7fe ffe5 	bl	8003e98 <_Bfree>
 8004ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	1b1a      	subs	r2, r3, r4
 8004ed6:	d004      	beq.n	8004ee2 <_dtoa_r+0x6c2>
 8004ed8:	4629      	mov	r1, r5
 8004eda:	4630      	mov	r0, r6
 8004edc:	f7ff f954 	bl	8004188 <__pow5mult>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f7ff f88f 	bl	8004008 <__i2b>
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	f340 8081 	ble.w	8004ff6 <_dtoa_r+0x7d6>
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f7ff f945 	bl	8004188 <__pow5mult>
 8004efe:	9b06      	ldr	r3, [sp, #24]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	4604      	mov	r4, r0
 8004f04:	dd7a      	ble.n	8004ffc <_dtoa_r+0x7dc>
 8004f06:	2300      	movs	r3, #0
 8004f08:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0a:	6922      	ldr	r2, [r4, #16]
 8004f0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004f10:	6910      	ldr	r0, [r2, #16]
 8004f12:	f7ff f829 	bl	8003f68 <__hi0bits>
 8004f16:	f1c0 0020 	rsb	r0, r0, #32
 8004f1a:	9b05      	ldr	r3, [sp, #20]
 8004f1c:	4418      	add	r0, r3
 8004f1e:	f010 001f 	ands.w	r0, r0, #31
 8004f22:	f000 808c 	beq.w	800503e <_dtoa_r+0x81e>
 8004f26:	f1c0 0220 	rsb	r2, r0, #32
 8004f2a:	2a04      	cmp	r2, #4
 8004f2c:	f340 8085 	ble.w	800503a <_dtoa_r+0x81a>
 8004f30:	f1c0 001c 	rsb	r0, r0, #28
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	4403      	add	r3, r0
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	9b05      	ldr	r3, [sp, #20]
 8004f3c:	4403      	add	r3, r0
 8004f3e:	4480      	add	r8, r0
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	9b04      	ldr	r3, [sp, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dd05      	ble.n	8004f54 <_dtoa_r+0x734>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff f975 	bl	800423c <__lshift>
 8004f52:	4605      	mov	r5, r0
 8004f54:	9b05      	ldr	r3, [sp, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd05      	ble.n	8004f66 <_dtoa_r+0x746>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff f96c 	bl	800423c <__lshift>
 8004f64:	4604      	mov	r4, r0
 8004f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d06a      	beq.n	8005042 <_dtoa_r+0x822>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f7ff f9d4 	bl	800431c <__mcmp>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	da64      	bge.n	8005042 <_dtoa_r+0x822>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	220a      	movs	r2, #10
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7fe ffac 	bl	8003edc <__multadd>
 8004f84:	9b07      	ldr	r3, [sp, #28]
 8004f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 8191 	beq.w	80052b4 <_dtoa_r+0xa94>
 8004f92:	4639      	mov	r1, r7
 8004f94:	2300      	movs	r3, #0
 8004f96:	220a      	movs	r2, #10
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7fe ff9f 	bl	8003edc <__multadd>
 8004f9e:	f1ba 0f00 	cmp.w	sl, #0
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	f300 808d 	bgt.w	80050c2 <_dtoa_r+0x8a2>
 8004fa8:	9b06      	ldr	r3, [sp, #24]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	dc50      	bgt.n	8005050 <_dtoa_r+0x830>
 8004fae:	e088      	b.n	80050c2 <_dtoa_r+0x8a2>
 8004fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004fb6:	e751      	b.n	8004e5c <_dtoa_r+0x63c>
 8004fb8:	f109 34ff 	add.w	r4, r9, #4294967295
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	bfbf      	itttt	lt
 8004fc0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8004fc2:	1ae3      	sublt	r3, r4, r3
 8004fc4:	18d2      	addlt	r2, r2, r3
 8004fc6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8004fc8:	bfb6      	itet	lt
 8004fca:	4623      	movlt	r3, r4
 8004fcc:	1b1c      	subge	r4, r3, r4
 8004fce:	2400      	movlt	r4, #0
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	bfb5      	itete	lt
 8004fd6:	9a04      	ldrlt	r2, [sp, #16]
 8004fd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8004fdc:	eba2 0809 	sublt.w	r8, r2, r9
 8004fe0:	464a      	movge	r2, r9
 8004fe2:	bfb8      	it	lt
 8004fe4:	2200      	movlt	r2, #0
 8004fe6:	e73c      	b.n	8004e62 <_dtoa_r+0x642>
 8004fe8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004fec:	9f07      	ldr	r7, [sp, #28]
 8004fee:	461c      	mov	r4, r3
 8004ff0:	e744      	b.n	8004e7c <_dtoa_r+0x65c>
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	e770      	b.n	8004ed8 <_dtoa_r+0x6b8>
 8004ff6:	9b06      	ldr	r3, [sp, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	dc18      	bgt.n	800502e <_dtoa_r+0x80e>
 8004ffc:	9b02      	ldr	r3, [sp, #8]
 8004ffe:	b9b3      	cbnz	r3, 800502e <_dtoa_r+0x80e>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005006:	b9a2      	cbnz	r2, 8005032 <_dtoa_r+0x812>
 8005008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800500c:	0d12      	lsrs	r2, r2, #20
 800500e:	0512      	lsls	r2, r2, #20
 8005010:	b18a      	cbz	r2, 8005036 <_dtoa_r+0x816>
 8005012:	9b04      	ldr	r3, [sp, #16]
 8005014:	3301      	adds	r3, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	9b05      	ldr	r3, [sp, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	2301      	movs	r3, #1
 8005020:	930a      	str	r3, [sp, #40]	; 0x28
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	f47f af70 	bne.w	8004f0a <_dtoa_r+0x6ea>
 800502a:	2001      	movs	r0, #1
 800502c:	e775      	b.n	8004f1a <_dtoa_r+0x6fa>
 800502e:	2300      	movs	r3, #0
 8005030:	e7f6      	b.n	8005020 <_dtoa_r+0x800>
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	e7f4      	b.n	8005020 <_dtoa_r+0x800>
 8005036:	920a      	str	r2, [sp, #40]	; 0x28
 8005038:	e7f3      	b.n	8005022 <_dtoa_r+0x802>
 800503a:	d082      	beq.n	8004f42 <_dtoa_r+0x722>
 800503c:	4610      	mov	r0, r2
 800503e:	301c      	adds	r0, #28
 8005040:	e778      	b.n	8004f34 <_dtoa_r+0x714>
 8005042:	f1b9 0f00 	cmp.w	r9, #0
 8005046:	dc37      	bgt.n	80050b8 <_dtoa_r+0x898>
 8005048:	9b06      	ldr	r3, [sp, #24]
 800504a:	2b02      	cmp	r3, #2
 800504c:	dd34      	ble.n	80050b8 <_dtoa_r+0x898>
 800504e:	46ca      	mov	sl, r9
 8005050:	f1ba 0f00 	cmp.w	sl, #0
 8005054:	d10d      	bne.n	8005072 <_dtoa_r+0x852>
 8005056:	4621      	mov	r1, r4
 8005058:	4653      	mov	r3, sl
 800505a:	2205      	movs	r2, #5
 800505c:	4630      	mov	r0, r6
 800505e:	f7fe ff3d 	bl	8003edc <__multadd>
 8005062:	4601      	mov	r1, r0
 8005064:	4604      	mov	r4, r0
 8005066:	4628      	mov	r0, r5
 8005068:	f7ff f958 	bl	800431c <__mcmp>
 800506c:	2800      	cmp	r0, #0
 800506e:	f73f adeb 	bgt.w	8004c48 <_dtoa_r+0x428>
 8005072:	9b08      	ldr	r3, [sp, #32]
 8005074:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005078:	ea6f 0b03 	mvn.w	fp, r3
 800507c:	f04f 0900 	mov.w	r9, #0
 8005080:	4621      	mov	r1, r4
 8005082:	4630      	mov	r0, r6
 8005084:	f7fe ff08 	bl	8003e98 <_Bfree>
 8005088:	2f00      	cmp	r7, #0
 800508a:	f43f aea8 	beq.w	8004dde <_dtoa_r+0x5be>
 800508e:	f1b9 0f00 	cmp.w	r9, #0
 8005092:	d005      	beq.n	80050a0 <_dtoa_r+0x880>
 8005094:	45b9      	cmp	r9, r7
 8005096:	d003      	beq.n	80050a0 <_dtoa_r+0x880>
 8005098:	4649      	mov	r1, r9
 800509a:	4630      	mov	r0, r6
 800509c:	f7fe fefc 	bl	8003e98 <_Bfree>
 80050a0:	4639      	mov	r1, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fe fef8 	bl	8003e98 <_Bfree>
 80050a8:	e699      	b.n	8004dde <_dtoa_r+0x5be>
 80050aa:	2400      	movs	r4, #0
 80050ac:	4627      	mov	r7, r4
 80050ae:	e7e0      	b.n	8005072 <_dtoa_r+0x852>
 80050b0:	46bb      	mov	fp, r7
 80050b2:	4604      	mov	r4, r0
 80050b4:	4607      	mov	r7, r0
 80050b6:	e5c7      	b.n	8004c48 <_dtoa_r+0x428>
 80050b8:	9b07      	ldr	r3, [sp, #28]
 80050ba:	46ca      	mov	sl, r9
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8100 	beq.w	80052c2 <_dtoa_r+0xaa2>
 80050c2:	f1b8 0f00 	cmp.w	r8, #0
 80050c6:	dd05      	ble.n	80050d4 <_dtoa_r+0x8b4>
 80050c8:	4639      	mov	r1, r7
 80050ca:	4642      	mov	r2, r8
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff f8b5 	bl	800423c <__lshift>
 80050d2:	4607      	mov	r7, r0
 80050d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d05d      	beq.n	8005196 <_dtoa_r+0x976>
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4630      	mov	r0, r6
 80050de:	f7fe fe9b 	bl	8003e18 <_Balloc>
 80050e2:	4680      	mov	r8, r0
 80050e4:	b928      	cbnz	r0, 80050f2 <_dtoa_r+0x8d2>
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <_dtoa_r+0xad0>)
 80050e8:	4602      	mov	r2, r0
 80050ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80050ee:	f7ff bbaf 	b.w	8004850 <_dtoa_r+0x30>
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	3202      	adds	r2, #2
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	f107 010c 	add.w	r1, r7, #12
 80050fc:	300c      	adds	r0, #12
 80050fe:	f000 f917 	bl	8005330 <memcpy>
 8005102:	2201      	movs	r2, #1
 8005104:	4641      	mov	r1, r8
 8005106:	4630      	mov	r0, r6
 8005108:	f7ff f898 	bl	800423c <__lshift>
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	3301      	adds	r3, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	4453      	add	r3, sl
 8005116:	9308      	str	r3, [sp, #32]
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	46b9      	mov	r9, r7
 8005120:	9307      	str	r3, [sp, #28]
 8005122:	4607      	mov	r7, r0
 8005124:	9b04      	ldr	r3, [sp, #16]
 8005126:	4621      	mov	r1, r4
 8005128:	3b01      	subs	r3, #1
 800512a:	4628      	mov	r0, r5
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	f7ff faeb 	bl	8004708 <quorem>
 8005132:	4603      	mov	r3, r0
 8005134:	3330      	adds	r3, #48	; 0x30
 8005136:	9005      	str	r0, [sp, #20]
 8005138:	4649      	mov	r1, r9
 800513a:	4628      	mov	r0, r5
 800513c:	9309      	str	r3, [sp, #36]	; 0x24
 800513e:	f7ff f8ed 	bl	800431c <__mcmp>
 8005142:	463a      	mov	r2, r7
 8005144:	4682      	mov	sl, r0
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff f903 	bl	8004354 <__mdiff>
 800514e:	68c2      	ldr	r2, [r0, #12]
 8005150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005152:	4680      	mov	r8, r0
 8005154:	bb0a      	cbnz	r2, 800519a <_dtoa_r+0x97a>
 8005156:	4601      	mov	r1, r0
 8005158:	4628      	mov	r0, r5
 800515a:	f7ff f8df 	bl	800431c <__mcmp>
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	4602      	mov	r2, r0
 8005162:	4641      	mov	r1, r8
 8005164:	4630      	mov	r0, r6
 8005166:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800516a:	f7fe fe95 	bl	8003e98 <_Bfree>
 800516e:	9b06      	ldr	r3, [sp, #24]
 8005170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005172:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005176:	ea43 0102 	orr.w	r1, r3, r2
 800517a:	9b07      	ldr	r3, [sp, #28]
 800517c:	430b      	orrs	r3, r1
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	d10d      	bne.n	800519e <_dtoa_r+0x97e>
 8005182:	2b39      	cmp	r3, #57	; 0x39
 8005184:	d029      	beq.n	80051da <_dtoa_r+0x9ba>
 8005186:	f1ba 0f00 	cmp.w	sl, #0
 800518a:	dd01      	ble.n	8005190 <_dtoa_r+0x970>
 800518c:	9b05      	ldr	r3, [sp, #20]
 800518e:	3331      	adds	r3, #49	; 0x31
 8005190:	9a02      	ldr	r2, [sp, #8]
 8005192:	7013      	strb	r3, [r2, #0]
 8005194:	e774      	b.n	8005080 <_dtoa_r+0x860>
 8005196:	4638      	mov	r0, r7
 8005198:	e7b8      	b.n	800510c <_dtoa_r+0x8ec>
 800519a:	2201      	movs	r2, #1
 800519c:	e7e1      	b.n	8005162 <_dtoa_r+0x942>
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	db06      	blt.n	80051b2 <_dtoa_r+0x992>
 80051a4:	9906      	ldr	r1, [sp, #24]
 80051a6:	ea41 0a0a 	orr.w	sl, r1, sl
 80051aa:	9907      	ldr	r1, [sp, #28]
 80051ac:	ea5a 0101 	orrs.w	r1, sl, r1
 80051b0:	d120      	bne.n	80051f4 <_dtoa_r+0x9d4>
 80051b2:	2a00      	cmp	r2, #0
 80051b4:	ddec      	ble.n	8005190 <_dtoa_r+0x970>
 80051b6:	4629      	mov	r1, r5
 80051b8:	2201      	movs	r2, #1
 80051ba:	4630      	mov	r0, r6
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	f7ff f83d 	bl	800423c <__lshift>
 80051c2:	4621      	mov	r1, r4
 80051c4:	4605      	mov	r5, r0
 80051c6:	f7ff f8a9 	bl	800431c <__mcmp>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	9b04      	ldr	r3, [sp, #16]
 80051ce:	dc02      	bgt.n	80051d6 <_dtoa_r+0x9b6>
 80051d0:	d1de      	bne.n	8005190 <_dtoa_r+0x970>
 80051d2:	07da      	lsls	r2, r3, #31
 80051d4:	d5dc      	bpl.n	8005190 <_dtoa_r+0x970>
 80051d6:	2b39      	cmp	r3, #57	; 0x39
 80051d8:	d1d8      	bne.n	800518c <_dtoa_r+0x96c>
 80051da:	9a02      	ldr	r2, [sp, #8]
 80051dc:	2339      	movs	r3, #57	; 0x39
 80051de:	7013      	strb	r3, [r2, #0]
 80051e0:	4643      	mov	r3, r8
 80051e2:	4698      	mov	r8, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80051ea:	2a39      	cmp	r2, #57	; 0x39
 80051ec:	d051      	beq.n	8005292 <_dtoa_r+0xa72>
 80051ee:	3201      	adds	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e745      	b.n	8005080 <_dtoa_r+0x860>
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	dd03      	ble.n	8005200 <_dtoa_r+0x9e0>
 80051f8:	2b39      	cmp	r3, #57	; 0x39
 80051fa:	d0ee      	beq.n	80051da <_dtoa_r+0x9ba>
 80051fc:	3301      	adds	r3, #1
 80051fe:	e7c7      	b.n	8005190 <_dtoa_r+0x970>
 8005200:	9a04      	ldr	r2, [sp, #16]
 8005202:	9908      	ldr	r1, [sp, #32]
 8005204:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005208:	428a      	cmp	r2, r1
 800520a:	d02b      	beq.n	8005264 <_dtoa_r+0xa44>
 800520c:	4629      	mov	r1, r5
 800520e:	2300      	movs	r3, #0
 8005210:	220a      	movs	r2, #10
 8005212:	4630      	mov	r0, r6
 8005214:	f7fe fe62 	bl	8003edc <__multadd>
 8005218:	45b9      	cmp	r9, r7
 800521a:	4605      	mov	r5, r0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 020a 	mov.w	r2, #10
 8005224:	4649      	mov	r1, r9
 8005226:	4630      	mov	r0, r6
 8005228:	d107      	bne.n	800523a <_dtoa_r+0xa1a>
 800522a:	f7fe fe57 	bl	8003edc <__multadd>
 800522e:	4681      	mov	r9, r0
 8005230:	4607      	mov	r7, r0
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	3301      	adds	r3, #1
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	e774      	b.n	8005124 <_dtoa_r+0x904>
 800523a:	f7fe fe4f 	bl	8003edc <__multadd>
 800523e:	4639      	mov	r1, r7
 8005240:	4681      	mov	r9, r0
 8005242:	2300      	movs	r3, #0
 8005244:	220a      	movs	r2, #10
 8005246:	4630      	mov	r0, r6
 8005248:	f7fe fe48 	bl	8003edc <__multadd>
 800524c:	4607      	mov	r7, r0
 800524e:	e7f0      	b.n	8005232 <_dtoa_r+0xa12>
 8005250:	f1ba 0f00 	cmp.w	sl, #0
 8005254:	9a01      	ldr	r2, [sp, #4]
 8005256:	bfcc      	ite	gt
 8005258:	46d0      	movgt	r8, sl
 800525a:	f04f 0801 	movle.w	r8, #1
 800525e:	4490      	add	r8, r2
 8005260:	f04f 0900 	mov.w	r9, #0
 8005264:	4629      	mov	r1, r5
 8005266:	2201      	movs	r2, #1
 8005268:	4630      	mov	r0, r6
 800526a:	9302      	str	r3, [sp, #8]
 800526c:	f7fe ffe6 	bl	800423c <__lshift>
 8005270:	4621      	mov	r1, r4
 8005272:	4605      	mov	r5, r0
 8005274:	f7ff f852 	bl	800431c <__mcmp>
 8005278:	2800      	cmp	r0, #0
 800527a:	dcb1      	bgt.n	80051e0 <_dtoa_r+0x9c0>
 800527c:	d102      	bne.n	8005284 <_dtoa_r+0xa64>
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	07db      	lsls	r3, r3, #31
 8005282:	d4ad      	bmi.n	80051e0 <_dtoa_r+0x9c0>
 8005284:	4643      	mov	r3, r8
 8005286:	4698      	mov	r8, r3
 8005288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800528c:	2a30      	cmp	r2, #48	; 0x30
 800528e:	d0fa      	beq.n	8005286 <_dtoa_r+0xa66>
 8005290:	e6f6      	b.n	8005080 <_dtoa_r+0x860>
 8005292:	9a01      	ldr	r2, [sp, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d1a4      	bne.n	80051e2 <_dtoa_r+0x9c2>
 8005298:	f10b 0b01 	add.w	fp, fp, #1
 800529c:	2331      	movs	r3, #49	; 0x31
 800529e:	e778      	b.n	8005192 <_dtoa_r+0x972>
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <_dtoa_r+0xad4>)
 80052a2:	f7ff bb27 	b.w	80048f4 <_dtoa_r+0xd4>
 80052a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f ab03 	bne.w	80048b4 <_dtoa_r+0x94>
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <_dtoa_r+0xad8>)
 80052b0:	f7ff bb20 	b.w	80048f4 <_dtoa_r+0xd4>
 80052b4:	f1ba 0f00 	cmp.w	sl, #0
 80052b8:	dc03      	bgt.n	80052c2 <_dtoa_r+0xaa2>
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f73f aec7 	bgt.w	8005050 <_dtoa_r+0x830>
 80052c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f7ff fa1d 	bl	8004708 <quorem>
 80052ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80052d2:	f808 3b01 	strb.w	r3, [r8], #1
 80052d6:	9a01      	ldr	r2, [sp, #4]
 80052d8:	eba8 0202 	sub.w	r2, r8, r2
 80052dc:	4592      	cmp	sl, r2
 80052de:	ddb7      	ble.n	8005250 <_dtoa_r+0xa30>
 80052e0:	4629      	mov	r1, r5
 80052e2:	2300      	movs	r3, #0
 80052e4:	220a      	movs	r2, #10
 80052e6:	4630      	mov	r0, r6
 80052e8:	f7fe fdf8 	bl	8003edc <__multadd>
 80052ec:	4605      	mov	r5, r0
 80052ee:	e7ea      	b.n	80052c6 <_dtoa_r+0xaa6>
 80052f0:	0800623b 	.word	0x0800623b
 80052f4:	08006395 	.word	0x08006395
 80052f8:	08006388 	.word	0x08006388

080052fc <fiprintf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	b503      	push	{r0, r1, lr}
 8005300:	4601      	mov	r1, r0
 8005302:	ab03      	add	r3, sp, #12
 8005304:	4805      	ldr	r0, [pc, #20]	; (800531c <fiprintf+0x20>)
 8005306:	f853 2b04 	ldr.w	r2, [r3], #4
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	f000 f89f 	bl	8005450 <_vfiprintf_r>
 8005312:	b002      	add	sp, #8
 8005314:	f85d eb04 	ldr.w	lr, [sp], #4
 8005318:	b003      	add	sp, #12
 800531a:	4770      	bx	lr
 800531c:	2000000c 	.word	0x2000000c

08005320 <malloc>:
 8005320:	4b02      	ldr	r3, [pc, #8]	; (800532c <malloc+0xc>)
 8005322:	4601      	mov	r1, r0
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f7ff b945 	b.w	80045b4 <_malloc_r>
 800532a:	bf00      	nop
 800532c:	2000000c 	.word	0x2000000c

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <__malloc_lock>:
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <__malloc_lock+0x8>)
 800534e:	f000 bdc3 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005352:	bf00      	nop
 8005354:	2000017c 	.word	0x2000017c

08005358 <__malloc_unlock>:
 8005358:	4801      	ldr	r0, [pc, #4]	; (8005360 <__malloc_unlock+0x8>)
 800535a:	f000 bdbe 	b.w	8005eda <__retarget_lock_release_recursive>
 800535e:	bf00      	nop
 8005360:	2000017c 	.word	0x2000017c

08005364 <_free_r>:
 8005364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005366:	2900      	cmp	r1, #0
 8005368:	d044      	beq.n	80053f4 <_free_r+0x90>
 800536a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536e:	9001      	str	r0, [sp, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f1a1 0404 	sub.w	r4, r1, #4
 8005376:	bfb8      	it	lt
 8005378:	18e4      	addlt	r4, r4, r3
 800537a:	f7ff ffe7 	bl	800534c <__malloc_lock>
 800537e:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <_free_r+0x94>)
 8005380:	9801      	ldr	r0, [sp, #4]
 8005382:	6813      	ldr	r3, [r2, #0]
 8005384:	b933      	cbnz	r3, 8005394 <_free_r+0x30>
 8005386:	6063      	str	r3, [r4, #4]
 8005388:	6014      	str	r4, [r2, #0]
 800538a:	b003      	add	sp, #12
 800538c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005390:	f7ff bfe2 	b.w	8005358 <__malloc_unlock>
 8005394:	42a3      	cmp	r3, r4
 8005396:	d908      	bls.n	80053aa <_free_r+0x46>
 8005398:	6825      	ldr	r5, [r4, #0]
 800539a:	1961      	adds	r1, r4, r5
 800539c:	428b      	cmp	r3, r1
 800539e:	bf01      	itttt	eq
 80053a0:	6819      	ldreq	r1, [r3, #0]
 80053a2:	685b      	ldreq	r3, [r3, #4]
 80053a4:	1949      	addeq	r1, r1, r5
 80053a6:	6021      	streq	r1, [r4, #0]
 80053a8:	e7ed      	b.n	8005386 <_free_r+0x22>
 80053aa:	461a      	mov	r2, r3
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	b10b      	cbz	r3, 80053b4 <_free_r+0x50>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d9fa      	bls.n	80053aa <_free_r+0x46>
 80053b4:	6811      	ldr	r1, [r2, #0]
 80053b6:	1855      	adds	r5, r2, r1
 80053b8:	42a5      	cmp	r5, r4
 80053ba:	d10b      	bne.n	80053d4 <_free_r+0x70>
 80053bc:	6824      	ldr	r4, [r4, #0]
 80053be:	4421      	add	r1, r4
 80053c0:	1854      	adds	r4, r2, r1
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	d1e0      	bne.n	800538a <_free_r+0x26>
 80053c8:	681c      	ldr	r4, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	6053      	str	r3, [r2, #4]
 80053ce:	4421      	add	r1, r4
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	e7da      	b.n	800538a <_free_r+0x26>
 80053d4:	d902      	bls.n	80053dc <_free_r+0x78>
 80053d6:	230c      	movs	r3, #12
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	e7d6      	b.n	800538a <_free_r+0x26>
 80053dc:	6825      	ldr	r5, [r4, #0]
 80053de:	1961      	adds	r1, r4, r5
 80053e0:	428b      	cmp	r3, r1
 80053e2:	bf04      	itt	eq
 80053e4:	6819      	ldreq	r1, [r3, #0]
 80053e6:	685b      	ldreq	r3, [r3, #4]
 80053e8:	6063      	str	r3, [r4, #4]
 80053ea:	bf04      	itt	eq
 80053ec:	1949      	addeq	r1, r1, r5
 80053ee:	6021      	streq	r1, [r4, #0]
 80053f0:	6054      	str	r4, [r2, #4]
 80053f2:	e7ca      	b.n	800538a <_free_r+0x26>
 80053f4:	b003      	add	sp, #12
 80053f6:	bd30      	pop	{r4, r5, pc}
 80053f8:	20000170 	.word	0x20000170

080053fc <__sfputc_r>:
 80053fc:	6893      	ldr	r3, [r2, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	b410      	push	{r4}
 8005404:	6093      	str	r3, [r2, #8]
 8005406:	da08      	bge.n	800541a <__sfputc_r+0x1e>
 8005408:	6994      	ldr	r4, [r2, #24]
 800540a:	42a3      	cmp	r3, r4
 800540c:	db01      	blt.n	8005412 <__sfputc_r+0x16>
 800540e:	290a      	cmp	r1, #10
 8005410:	d103      	bne.n	800541a <__sfputc_r+0x1e>
 8005412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005416:	f000 badf 	b.w	80059d8 <__swbuf_r>
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	1c58      	adds	r0, r3, #1
 800541e:	6010      	str	r0, [r2, #0]
 8005420:	7019      	strb	r1, [r3, #0]
 8005422:	4608      	mov	r0, r1
 8005424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005428:	4770      	bx	lr

0800542a <__sfputs_r>:
 800542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	4614      	mov	r4, r2
 8005432:	18d5      	adds	r5, r2, r3
 8005434:	42ac      	cmp	r4, r5
 8005436:	d101      	bne.n	800543c <__sfputs_r+0x12>
 8005438:	2000      	movs	r0, #0
 800543a:	e007      	b.n	800544c <__sfputs_r+0x22>
 800543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005440:	463a      	mov	r2, r7
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffda 	bl	80053fc <__sfputc_r>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d1f3      	bne.n	8005434 <__sfputs_r+0xa>
 800544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005450 <_vfiprintf_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	460d      	mov	r5, r1
 8005456:	b09d      	sub	sp, #116	; 0x74
 8005458:	4614      	mov	r4, r2
 800545a:	4698      	mov	r8, r3
 800545c:	4606      	mov	r6, r0
 800545e:	b118      	cbz	r0, 8005468 <_vfiprintf_r+0x18>
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b90b      	cbnz	r3, 8005468 <_vfiprintf_r+0x18>
 8005464:	f000 fc9a 	bl	8005d9c <__sinit>
 8005468:	4b89      	ldr	r3, [pc, #548]	; (8005690 <_vfiprintf_r+0x240>)
 800546a:	429d      	cmp	r5, r3
 800546c:	d11b      	bne.n	80054a6 <_vfiprintf_r+0x56>
 800546e:	6875      	ldr	r5, [r6, #4]
 8005470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x32>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x32>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f000 fd2b 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	d501      	bpl.n	800548c <_vfiprintf_r+0x3c>
 8005488:	692b      	ldr	r3, [r5, #16]
 800548a:	b9eb      	cbnz	r3, 80054c8 <_vfiprintf_r+0x78>
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 faf4 	bl	8005a7c <__swsetup_r>
 8005494:	b1c0      	cbz	r0, 80054c8 <_vfiprintf_r+0x78>
 8005496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005498:	07dc      	lsls	r4, r3, #31
 800549a:	d50e      	bpl.n	80054ba <_vfiprintf_r+0x6a>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b01d      	add	sp, #116	; 0x74
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	4b7b      	ldr	r3, [pc, #492]	; (8005694 <_vfiprintf_r+0x244>)
 80054a8:	429d      	cmp	r5, r3
 80054aa:	d101      	bne.n	80054b0 <_vfiprintf_r+0x60>
 80054ac:	68b5      	ldr	r5, [r6, #8]
 80054ae:	e7df      	b.n	8005470 <_vfiprintf_r+0x20>
 80054b0:	4b79      	ldr	r3, [pc, #484]	; (8005698 <_vfiprintf_r+0x248>)
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf08      	it	eq
 80054b6:	68f5      	ldreq	r5, [r6, #12]
 80054b8:	e7da      	b.n	8005470 <_vfiprintf_r+0x20>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	0598      	lsls	r0, r3, #22
 80054be:	d4ed      	bmi.n	800549c <_vfiprintf_r+0x4c>
 80054c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054c2:	f000 fd0a 	bl	8005eda <__retarget_lock_release_recursive>
 80054c6:	e7e9      	b.n	800549c <_vfiprintf_r+0x4c>
 80054c8:	2300      	movs	r3, #0
 80054ca:	9309      	str	r3, [sp, #36]	; 0x24
 80054cc:	2320      	movs	r3, #32
 80054ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d6:	2330      	movs	r3, #48	; 0x30
 80054d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800569c <_vfiprintf_r+0x24c>
 80054dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e0:	f04f 0901 	mov.w	r9, #1
 80054e4:	4623      	mov	r3, r4
 80054e6:	469a      	mov	sl, r3
 80054e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ec:	b10a      	cbz	r2, 80054f2 <_vfiprintf_r+0xa2>
 80054ee:	2a25      	cmp	r2, #37	; 0x25
 80054f0:	d1f9      	bne.n	80054e6 <_vfiprintf_r+0x96>
 80054f2:	ebba 0b04 	subs.w	fp, sl, r4
 80054f6:	d00b      	beq.n	8005510 <_vfiprintf_r+0xc0>
 80054f8:	465b      	mov	r3, fp
 80054fa:	4622      	mov	r2, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ff93 	bl	800542a <__sfputs_r>
 8005504:	3001      	adds	r0, #1
 8005506:	f000 80aa 	beq.w	800565e <_vfiprintf_r+0x20e>
 800550a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550c:	445a      	add	r2, fp
 800550e:	9209      	str	r2, [sp, #36]	; 0x24
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a2 	beq.w	800565e <_vfiprintf_r+0x20e>
 800551a:	2300      	movs	r3, #0
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005524:	f10a 0a01 	add.w	sl, sl, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005530:	931a      	str	r3, [sp, #104]	; 0x68
 8005532:	4654      	mov	r4, sl
 8005534:	2205      	movs	r2, #5
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4858      	ldr	r0, [pc, #352]	; (800569c <_vfiprintf_r+0x24c>)
 800553c:	f7fa fe80 	bl	8000240 <memchr>
 8005540:	9a04      	ldr	r2, [sp, #16]
 8005542:	b9d8      	cbnz	r0, 800557c <_vfiprintf_r+0x12c>
 8005544:	06d1      	lsls	r1, r2, #27
 8005546:	bf44      	itt	mi
 8005548:	2320      	movmi	r3, #32
 800554a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800554e:	0713      	lsls	r3, r2, #28
 8005550:	bf44      	itt	mi
 8005552:	232b      	movmi	r3, #43	; 0x2b
 8005554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b2a      	cmp	r3, #42	; 0x2a
 800555e:	d015      	beq.n	800558c <_vfiprintf_r+0x13c>
 8005560:	9a07      	ldr	r2, [sp, #28]
 8005562:	4654      	mov	r4, sl
 8005564:	2000      	movs	r0, #0
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	4621      	mov	r1, r4
 800556c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005570:	3b30      	subs	r3, #48	; 0x30
 8005572:	2b09      	cmp	r3, #9
 8005574:	d94e      	bls.n	8005614 <_vfiprintf_r+0x1c4>
 8005576:	b1b0      	cbz	r0, 80055a6 <_vfiprintf_r+0x156>
 8005578:	9207      	str	r2, [sp, #28]
 800557a:	e014      	b.n	80055a6 <_vfiprintf_r+0x156>
 800557c:	eba0 0308 	sub.w	r3, r0, r8
 8005580:	fa09 f303 	lsl.w	r3, r9, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	46a2      	mov	sl, r4
 800558a:	e7d2      	b.n	8005532 <_vfiprintf_r+0xe2>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	1d19      	adds	r1, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	9103      	str	r1, [sp, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfbb      	ittet	lt
 8005598:	425b      	neglt	r3, r3
 800559a:	f042 0202 	orrlt.w	r2, r2, #2
 800559e:	9307      	strge	r3, [sp, #28]
 80055a0:	9307      	strlt	r3, [sp, #28]
 80055a2:	bfb8      	it	lt
 80055a4:	9204      	strlt	r2, [sp, #16]
 80055a6:	7823      	ldrb	r3, [r4, #0]
 80055a8:	2b2e      	cmp	r3, #46	; 0x2e
 80055aa:	d10c      	bne.n	80055c6 <_vfiprintf_r+0x176>
 80055ac:	7863      	ldrb	r3, [r4, #1]
 80055ae:	2b2a      	cmp	r3, #42	; 0x2a
 80055b0:	d135      	bne.n	800561e <_vfiprintf_r+0x1ce>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c2:	3402      	adds	r4, #2
 80055c4:	9305      	str	r3, [sp, #20]
 80055c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056ac <_vfiprintf_r+0x25c>
 80055ca:	7821      	ldrb	r1, [r4, #0]
 80055cc:	2203      	movs	r2, #3
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa fe36 	bl	8000240 <memchr>
 80055d4:	b140      	cbz	r0, 80055e8 <_vfiprintf_r+0x198>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	eba0 000a 	sub.w	r0, r0, sl
 80055dc:	fa03 f000 	lsl.w	r0, r3, r0
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	4303      	orrs	r3, r0
 80055e4:	3401      	adds	r4, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	482c      	ldr	r0, [pc, #176]	; (80056a0 <_vfiprintf_r+0x250>)
 80055ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f2:	2206      	movs	r2, #6
 80055f4:	f7fa fe24 	bl	8000240 <memchr>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d03f      	beq.n	800567c <_vfiprintf_r+0x22c>
 80055fc:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <_vfiprintf_r+0x254>)
 80055fe:	bb1b      	cbnz	r3, 8005648 <_vfiprintf_r+0x1f8>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	3307      	adds	r3, #7
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	3308      	adds	r3, #8
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	443b      	add	r3, r7
 8005610:	9309      	str	r3, [sp, #36]	; 0x24
 8005612:	e767      	b.n	80054e4 <_vfiprintf_r+0x94>
 8005614:	fb0c 3202 	mla	r2, ip, r2, r3
 8005618:	460c      	mov	r4, r1
 800561a:	2001      	movs	r0, #1
 800561c:	e7a5      	b.n	800556a <_vfiprintf_r+0x11a>
 800561e:	2300      	movs	r3, #0
 8005620:	3401      	adds	r4, #1
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	4619      	mov	r1, r3
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4620      	mov	r0, r4
 800562c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005630:	3a30      	subs	r2, #48	; 0x30
 8005632:	2a09      	cmp	r2, #9
 8005634:	d903      	bls.n	800563e <_vfiprintf_r+0x1ee>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c5      	beq.n	80055c6 <_vfiprintf_r+0x176>
 800563a:	9105      	str	r1, [sp, #20]
 800563c:	e7c3      	b.n	80055c6 <_vfiprintf_r+0x176>
 800563e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	e7f0      	b.n	800562a <_vfiprintf_r+0x1da>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462a      	mov	r2, r5
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <_vfiprintf_r+0x258>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	4630      	mov	r0, r6
 8005654:	f3af 8000 	nop.w
 8005658:	4607      	mov	r7, r0
 800565a:	1c78      	adds	r0, r7, #1
 800565c:	d1d6      	bne.n	800560c <_vfiprintf_r+0x1bc>
 800565e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005660:	07d9      	lsls	r1, r3, #31
 8005662:	d405      	bmi.n	8005670 <_vfiprintf_r+0x220>
 8005664:	89ab      	ldrh	r3, [r5, #12]
 8005666:	059a      	lsls	r2, r3, #22
 8005668:	d402      	bmi.n	8005670 <_vfiprintf_r+0x220>
 800566a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800566c:	f000 fc35 	bl	8005eda <__retarget_lock_release_recursive>
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	065b      	lsls	r3, r3, #25
 8005674:	f53f af12 	bmi.w	800549c <_vfiprintf_r+0x4c>
 8005678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800567a:	e711      	b.n	80054a0 <_vfiprintf_r+0x50>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <_vfiprintf_r+0x258>)
 8005684:	a904      	add	r1, sp, #16
 8005686:	4630      	mov	r0, r6
 8005688:	f000 f880 	bl	800578c <_printf_i>
 800568c:	e7e4      	b.n	8005658 <_vfiprintf_r+0x208>
 800568e:	bf00      	nop
 8005690:	08006448 	.word	0x08006448
 8005694:	08006468 	.word	0x08006468
 8005698:	08006428 	.word	0x08006428
 800569c:	080063f2 	.word	0x080063f2
 80056a0:	080063fc 	.word	0x080063fc
 80056a4:	00000000 	.word	0x00000000
 80056a8:	0800542b 	.word	0x0800542b
 80056ac:	080063f8 	.word	0x080063f8

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4699      	mov	r9, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056fc:	1e13      	subs	r3, r2, #0
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	68e5      	ldr	r5, [r4, #12]
 800571a:	6832      	ldr	r2, [r6, #0]
 800571c:	f003 0306 	and.w	r3, r3, #6
 8005720:	2b04      	cmp	r3, #4
 8005722:	bf08      	it	eq
 8005724:	1aad      	subeq	r5, r5, r2
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4649      	mov	r1, r9
 800574c:	4638      	mov	r0, r7
 800574e:	47c0      	blx	r8
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	; 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005794:	2f78      	cmp	r7, #120	; 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	; 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d8 	beq.w	800595e <_printf_i+0x1d2>
 80057ae:	2f58      	cmp	r7, #88	; 0x58
 80057b0:	f000 80a3 	beq.w	80058fa <_printf_i+0x16e>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005945 	.word	0x08005945
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005927 	.word	0x08005927
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	08005967 	.word	0x08005967
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	0800592f 	.word	0x0800592f
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e0a3      	b.n	8005980 <_printf_i+0x1f4>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	f101 0304 	add.w	r3, r1, #4
 8005842:	d50a      	bpl.n	800585a <_printf_i+0xce>
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	2e00      	cmp	r6, #0
 800584a:	da03      	bge.n	8005854 <_printf_i+0xc8>
 800584c:	232d      	movs	r3, #45	; 0x2d
 800584e:	4276      	negs	r6, r6
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	485e      	ldr	r0, [pc, #376]	; (80059d0 <_printf_i+0x244>)
 8005856:	230a      	movs	r3, #10
 8005858:	e019      	b.n	800588e <_printf_i+0x102>
 800585a:	680e      	ldr	r6, [r1, #0]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005862:	bf18      	it	ne
 8005864:	b236      	sxthne	r6, r6
 8005866:	e7ef      	b.n	8005848 <_printf_i+0xbc>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6029      	str	r1, [r5, #0]
 8005870:	0601      	lsls	r1, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xec>
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0xf2>
 8005878:	0646      	lsls	r6, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xe8>
 800587c:	881e      	ldrh	r6, [r3, #0]
 800587e:	4854      	ldr	r0, [pc, #336]	; (80059d0 <_printf_i+0x244>)
 8005880:	2f6f      	cmp	r7, #111	; 0x6f
 8005882:	bf0c      	ite	eq
 8005884:	2308      	moveq	r3, #8
 8005886:	230a      	movne	r3, #10
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588e:	6865      	ldr	r5, [r4, #4]
 8005890:	60a5      	str	r5, [r4, #8]
 8005892:	2d00      	cmp	r5, #0
 8005894:	bfa2      	ittt	ge
 8005896:	6821      	ldrge	r1, [r4, #0]
 8005898:	f021 0104 	bicge.w	r1, r1, #4
 800589c:	6021      	strge	r1, [r4, #0]
 800589e:	b90e      	cbnz	r6, 80058a4 <_printf_i+0x118>
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d04d      	beq.n	8005940 <_printf_i+0x1b4>
 80058a4:	4615      	mov	r5, r2
 80058a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058aa:	fb03 6711 	mls	r7, r3, r1, r6
 80058ae:	5dc7      	ldrb	r7, [r0, r7]
 80058b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b4:	4637      	mov	r7, r6
 80058b6:	42bb      	cmp	r3, r7
 80058b8:	460e      	mov	r6, r1
 80058ba:	d9f4      	bls.n	80058a6 <_printf_i+0x11a>
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d10b      	bne.n	80058d8 <_printf_i+0x14c>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07de      	lsls	r6, r3, #31
 80058c4:	d508      	bpl.n	80058d8 <_printf_i+0x14c>
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	bfde      	ittt	le
 80058ce:	2330      	movle	r3, #48	; 0x30
 80058d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d8:	1b52      	subs	r2, r2, r5
 80058da:	6122      	str	r2, [r4, #16]
 80058dc:	f8cd a000 	str.w	sl, [sp]
 80058e0:	464b      	mov	r3, r9
 80058e2:	aa03      	add	r2, sp, #12
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff fee2 	bl	80056b0 <_printf_common>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d14c      	bne.n	800598a <_printf_i+0x1fe>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	b004      	add	sp, #16
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	4835      	ldr	r0, [pc, #212]	; (80059d0 <_printf_i+0x244>)
 80058fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f851 6b04 	ldr.w	r6, [r1], #4
 8005908:	6029      	str	r1, [r5, #0]
 800590a:	061d      	lsls	r5, r3, #24
 800590c:	d514      	bpl.n	8005938 <_printf_i+0x1ac>
 800590e:	07df      	lsls	r7, r3, #31
 8005910:	bf44      	itt	mi
 8005912:	f043 0320 	orrmi.w	r3, r3, #32
 8005916:	6023      	strmi	r3, [r4, #0]
 8005918:	b91e      	cbnz	r6, 8005922 <_printf_i+0x196>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f023 0320 	bic.w	r3, r3, #32
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	2310      	movs	r3, #16
 8005924:	e7b0      	b.n	8005888 <_printf_i+0xfc>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f043 0320 	orr.w	r3, r3, #32
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	4828      	ldr	r0, [pc, #160]	; (80059d4 <_printf_i+0x248>)
 8005932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005936:	e7e3      	b.n	8005900 <_printf_i+0x174>
 8005938:	0659      	lsls	r1, r3, #25
 800593a:	bf48      	it	mi
 800593c:	b2b6      	uxthmi	r6, r6
 800593e:	e7e6      	b.n	800590e <_printf_i+0x182>
 8005940:	4615      	mov	r5, r2
 8005942:	e7bb      	b.n	80058bc <_printf_i+0x130>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6826      	ldr	r6, [r4, #0]
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6028      	str	r0, [r5, #0]
 800594e:	0635      	lsls	r5, r6, #24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	d501      	bpl.n	8005958 <_printf_i+0x1cc>
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e002      	b.n	800595e <_printf_i+0x1d2>
 8005958:	0670      	lsls	r0, r6, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0x1c8>
 800595c:	8019      	strh	r1, [r3, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	4615      	mov	r5, r2
 8005964:	e7ba      	b.n	80058dc <_printf_i+0x150>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fc64 	bl	8000240 <memchr>
 8005978:	b108      	cbz	r0, 800597e <_printf_i+0x1f2>
 800597a:	1b40      	subs	r0, r0, r5
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	2300      	movs	r3, #0
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	e7a8      	b.n	80058dc <_printf_i+0x150>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d0ab      	beq.n	80058f0 <_printf_i+0x164>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d413      	bmi.n	80059c6 <_printf_i+0x23a>
 800599e:	68e0      	ldr	r0, [r4, #12]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	4298      	cmp	r0, r3
 80059a4:	bfb8      	it	lt
 80059a6:	4618      	movlt	r0, r3
 80059a8:	e7a4      	b.n	80058f4 <_printf_i+0x168>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4632      	mov	r2, r6
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09b      	beq.n	80058f0 <_printf_i+0x164>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9903      	ldr	r1, [sp, #12]
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf2      	bgt.n	80059aa <_printf_i+0x21e>
 80059c4:	e7eb      	b.n	800599e <_printf_i+0x212>
 80059c6:	2500      	movs	r5, #0
 80059c8:	f104 0619 	add.w	r6, r4, #25
 80059cc:	e7f5      	b.n	80059ba <_printf_i+0x22e>
 80059ce:	bf00      	nop
 80059d0:	08006403 	.word	0x08006403
 80059d4:	08006414 	.word	0x08006414

080059d8 <__swbuf_r>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	460e      	mov	r6, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	4605      	mov	r5, r0
 80059e0:	b118      	cbz	r0, 80059ea <__swbuf_r+0x12>
 80059e2:	6983      	ldr	r3, [r0, #24]
 80059e4:	b90b      	cbnz	r3, 80059ea <__swbuf_r+0x12>
 80059e6:	f000 f9d9 	bl	8005d9c <__sinit>
 80059ea:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <__swbuf_r+0x98>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d12b      	bne.n	8005a48 <__swbuf_r+0x70>
 80059f0:	686c      	ldr	r4, [r5, #4]
 80059f2:	69a3      	ldr	r3, [r4, #24]
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	071a      	lsls	r2, r3, #28
 80059fa:	d52f      	bpl.n	8005a5c <__swbuf_r+0x84>
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	b36b      	cbz	r3, 8005a5c <__swbuf_r+0x84>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	1ac0      	subs	r0, r0, r3
 8005a06:	6963      	ldr	r3, [r4, #20]
 8005a08:	b2f6      	uxtb	r6, r6
 8005a0a:	4283      	cmp	r3, r0
 8005a0c:	4637      	mov	r7, r6
 8005a0e:	dc04      	bgt.n	8005a1a <__swbuf_r+0x42>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f92e 	bl	8005c74 <_fflush_r>
 8005a18:	bb30      	cbnz	r0, 8005a68 <__swbuf_r+0x90>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	701e      	strb	r6, [r3, #0]
 8005a28:	6963      	ldr	r3, [r4, #20]
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	4283      	cmp	r3, r0
 8005a2e:	d004      	beq.n	8005a3a <__swbuf_r+0x62>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	07db      	lsls	r3, r3, #31
 8005a34:	d506      	bpl.n	8005a44 <__swbuf_r+0x6c>
 8005a36:	2e0a      	cmp	r6, #10
 8005a38:	d104      	bne.n	8005a44 <__swbuf_r+0x6c>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f919 	bl	8005c74 <_fflush_r>
 8005a42:	b988      	cbnz	r0, 8005a68 <__swbuf_r+0x90>
 8005a44:	4638      	mov	r0, r7
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <__swbuf_r+0x9c>)
 8005a4a:	429c      	cmp	r4, r3
 8005a4c:	d101      	bne.n	8005a52 <__swbuf_r+0x7a>
 8005a4e:	68ac      	ldr	r4, [r5, #8]
 8005a50:	e7cf      	b.n	80059f2 <__swbuf_r+0x1a>
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <__swbuf_r+0xa0>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	bf08      	it	eq
 8005a58:	68ec      	ldreq	r4, [r5, #12]
 8005a5a:	e7ca      	b.n	80059f2 <__swbuf_r+0x1a>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f80c 	bl	8005a7c <__swsetup_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d0cb      	beq.n	8005a00 <__swbuf_r+0x28>
 8005a68:	f04f 37ff 	mov.w	r7, #4294967295
 8005a6c:	e7ea      	b.n	8005a44 <__swbuf_r+0x6c>
 8005a6e:	bf00      	nop
 8005a70:	08006448 	.word	0x08006448
 8005a74:	08006468 	.word	0x08006468
 8005a78:	08006428 	.word	0x08006428

08005a7c <__swsetup_r>:
 8005a7c:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <__swsetup_r+0xcc>)
 8005a7e:	b570      	push	{r4, r5, r6, lr}
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	4606      	mov	r6, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	b125      	cbz	r5, 8005a92 <__swsetup_r+0x16>
 8005a88:	69ab      	ldr	r3, [r5, #24]
 8005a8a:	b913      	cbnz	r3, 8005a92 <__swsetup_r+0x16>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f985 	bl	8005d9c <__sinit>
 8005a92:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <__swsetup_r+0xd0>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d10f      	bne.n	8005ab8 <__swsetup_r+0x3c>
 8005a98:	686c      	ldr	r4, [r5, #4]
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa0:	0719      	lsls	r1, r3, #28
 8005aa2:	d42c      	bmi.n	8005afe <__swsetup_r+0x82>
 8005aa4:	06dd      	lsls	r5, r3, #27
 8005aa6:	d411      	bmi.n	8005acc <__swsetup_r+0x50>
 8005aa8:	2309      	movs	r3, #9
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e03e      	b.n	8005b36 <__swsetup_r+0xba>
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <__swsetup_r+0xd4>)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	d101      	bne.n	8005ac2 <__swsetup_r+0x46>
 8005abe:	68ac      	ldr	r4, [r5, #8]
 8005ac0:	e7eb      	b.n	8005a9a <__swsetup_r+0x1e>
 8005ac2:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <__swsetup_r+0xd8>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	bf08      	it	eq
 8005ac8:	68ec      	ldreq	r4, [r5, #12]
 8005aca:	e7e6      	b.n	8005a9a <__swsetup_r+0x1e>
 8005acc:	0758      	lsls	r0, r3, #29
 8005ace:	d512      	bpl.n	8005af6 <__swsetup_r+0x7a>
 8005ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ad2:	b141      	cbz	r1, 8005ae6 <__swsetup_r+0x6a>
 8005ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <__swsetup_r+0x66>
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff fc41 	bl	8005364 <_free_r>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	2300      	movs	r3, #0
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	b94b      	cbnz	r3, 8005b16 <__swsetup_r+0x9a>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d003      	beq.n	8005b16 <__swsetup_r+0x9a>
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 fa09 	bl	8005f28 <__smakebuf_r>
 8005b16:	89a0      	ldrh	r0, [r4, #12]
 8005b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b1c:	f010 0301 	ands.w	r3, r0, #1
 8005b20:	d00a      	beq.n	8005b38 <__swsetup_r+0xbc>
 8005b22:	2300      	movs	r3, #0
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	6963      	ldr	r3, [r4, #20]
 8005b28:	425b      	negs	r3, r3
 8005b2a:	61a3      	str	r3, [r4, #24]
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	b943      	cbnz	r3, 8005b42 <__swsetup_r+0xc6>
 8005b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b34:	d1ba      	bne.n	8005aac <__swsetup_r+0x30>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	0781      	lsls	r1, r0, #30
 8005b3a:	bf58      	it	pl
 8005b3c:	6963      	ldrpl	r3, [r4, #20]
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	e7f4      	b.n	8005b2c <__swsetup_r+0xb0>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e7f7      	b.n	8005b36 <__swsetup_r+0xba>
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	08006448 	.word	0x08006448
 8005b50:	08006468 	.word	0x08006468
 8005b54:	08006428 	.word	0x08006428

08005b58 <abort>:
 8005b58:	b508      	push	{r3, lr}
 8005b5a:	2006      	movs	r0, #6
 8005b5c:	f000 fa4c 	bl	8005ff8 <raise>
 8005b60:	2001      	movs	r0, #1
 8005b62:	f7fb f81d 	bl	8000ba0 <_exit>
	...

08005b68 <__sflush_r>:
 8005b68:	898a      	ldrh	r2, [r1, #12]
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	0710      	lsls	r0, r2, #28
 8005b72:	460c      	mov	r4, r1
 8005b74:	d458      	bmi.n	8005c28 <__sflush_r+0xc0>
 8005b76:	684b      	ldr	r3, [r1, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc05      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d0f9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	d032      	beq.n	8005c00 <__sflush_r+0x98>
 8005b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	075a      	lsls	r2, r3, #29
 8005ba0:	d505      	bpl.n	8005bae <__sflush_r+0x46>
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba8:	b10b      	cbz	r3, 8005bae <__sflush_r+0x46>
 8005baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bac:	1ac0      	subs	r0, r0, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb4:	6a21      	ldr	r1, [r4, #32]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	d106      	bne.n	8005bce <__sflush_r+0x66>
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	291d      	cmp	r1, #29
 8005bc4:	d82c      	bhi.n	8005c20 <__sflush_r+0xb8>
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <__sflush_r+0x108>)
 8005bc8:	40ca      	lsrs	r2, r1
 8005bca:	07d6      	lsls	r6, r2, #31
 8005bcc:	d528      	bpl.n	8005c20 <__sflush_r+0xb8>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	04d9      	lsls	r1, r3, #19
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	d504      	bpl.n	8005be4 <__sflush_r+0x7c>
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	d101      	bne.n	8005be2 <__sflush_r+0x7a>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b903      	cbnz	r3, 8005be4 <__sflush_r+0x7c>
 8005be2:	6560      	str	r0, [r4, #84]	; 0x54
 8005be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d0ca      	beq.n	8005b82 <__sflush_r+0x1a>
 8005bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	d002      	beq.n	8005bfa <__sflush_r+0x92>
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f7ff fbb5 	bl	8005364 <_free_r>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8005bfe:	e7c1      	b.n	8005b84 <__sflush_r+0x1c>
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	2301      	movs	r3, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c41      	adds	r1, r0, #1
 8005c0a:	d1c7      	bne.n	8005b9c <__sflush_r+0x34>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c4      	beq.n	8005b9c <__sflush_r+0x34>
 8005c12:	2b1d      	cmp	r3, #29
 8005c14:	d001      	beq.n	8005c1a <__sflush_r+0xb2>
 8005c16:	2b16      	cmp	r3, #22
 8005c18:	d101      	bne.n	8005c1e <__sflush_r+0xb6>
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	e7b1      	b.n	8005b82 <__sflush_r+0x1a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	e7ad      	b.n	8005b84 <__sflush_r+0x1c>
 8005c28:	690f      	ldr	r7, [r1, #16]
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d0a9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005c2e:	0793      	lsls	r3, r2, #30
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	bf08      	it	eq
 8005c34:	694b      	ldreq	r3, [r1, #20]
 8005c36:	600f      	str	r7, [r1, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	eba6 0807 	sub.w	r8, r6, r7
 8005c40:	608b      	str	r3, [r1, #8]
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	dd9c      	ble.n	8005b82 <__sflush_r+0x1a>
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	463a      	mov	r2, r7
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dc06      	bgt.n	8005c66 <__sflush_r+0xfe>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e78e      	b.n	8005b84 <__sflush_r+0x1c>
 8005c66:	4407      	add	r7, r0
 8005c68:	eba8 0800 	sub.w	r8, r8, r0
 8005c6c:	e7e9      	b.n	8005c42 <__sflush_r+0xda>
 8005c6e:	bf00      	nop
 8005c70:	20400001 	.word	0x20400001

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6983      	ldr	r3, [r0, #24]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f000 f887 	bl	8005d9c <__sinit>
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <_fflush_r+0x6c>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	d11b      	bne.n	8005ccc <_fflush_r+0x58>
 8005c94:	686c      	ldr	r4, [r5, #4]
 8005c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ef      	beq.n	8005c7e <_fflush_r+0xa>
 8005c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ca0:	07d0      	lsls	r0, r2, #31
 8005ca2:	d404      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca4:	0599      	lsls	r1, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005caa:	f000 f915 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	f7ff ff59 	bl	8005b68 <__sflush_r>
 8005cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb8:	07da      	lsls	r2, r3, #31
 8005cba:	4605      	mov	r5, r0
 8005cbc:	d4e0      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	059b      	lsls	r3, r3, #22
 8005cc2:	d4dd      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc6:	f000 f908 	bl	8005eda <__retarget_lock_release_recursive>
 8005cca:	e7d9      	b.n	8005c80 <_fflush_r+0xc>
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <_fflush_r+0x70>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d101      	bne.n	8005cd6 <_fflush_r+0x62>
 8005cd2:	68ac      	ldr	r4, [r5, #8]
 8005cd4:	e7df      	b.n	8005c96 <_fflush_r+0x22>
 8005cd6:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <_fflush_r+0x74>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	bf08      	it	eq
 8005cdc:	68ec      	ldreq	r4, [r5, #12]
 8005cde:	e7da      	b.n	8005c96 <_fflush_r+0x22>
 8005ce0:	08006448 	.word	0x08006448
 8005ce4:	08006468 	.word	0x08006468
 8005ce8:	08006428 	.word	0x08006428

08005cec <std>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cfa:	6083      	str	r3, [r0, #8]
 8005cfc:	8181      	strh	r1, [r0, #12]
 8005cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005d00:	81c2      	strh	r2, [r0, #14]
 8005d02:	6183      	str	r3, [r0, #24]
 8005d04:	4619      	mov	r1, r3
 8005d06:	2208      	movs	r2, #8
 8005d08:	305c      	adds	r0, #92	; 0x5c
 8005d0a:	f7fd ff53 	bl	8003bb4 <memset>
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <std+0x38>)
 8005d10:	6263      	str	r3, [r4, #36]	; 0x24
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <std+0x3c>)
 8005d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <std+0x40>)
 8005d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <std+0x44>)
 8005d1c:	6224      	str	r4, [r4, #32]
 8005d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08006031 	.word	0x08006031
 8005d28:	08006053 	.word	0x08006053
 8005d2c:	0800608b 	.word	0x0800608b
 8005d30:	080060af 	.word	0x080060af

08005d34 <_cleanup_r>:
 8005d34:	4901      	ldr	r1, [pc, #4]	; (8005d3c <_cleanup_r+0x8>)
 8005d36:	f000 b8af 	b.w	8005e98 <_fwalk_reent>
 8005d3a:	bf00      	nop
 8005d3c:	08005c75 	.word	0x08005c75

08005d40 <__sfmoreglue>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	2268      	movs	r2, #104	; 0x68
 8005d44:	1e4d      	subs	r5, r1, #1
 8005d46:	4355      	muls	r5, r2
 8005d48:	460e      	mov	r6, r1
 8005d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d4e:	f7fe fc31 	bl	80045b4 <_malloc_r>
 8005d52:	4604      	mov	r4, r0
 8005d54:	b140      	cbz	r0, 8005d68 <__sfmoreglue+0x28>
 8005d56:	2100      	movs	r1, #0
 8005d58:	e9c0 1600 	strd	r1, r6, [r0]
 8005d5c:	300c      	adds	r0, #12
 8005d5e:	60a0      	str	r0, [r4, #8]
 8005d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d64:	f7fd ff26 	bl	8003bb4 <memset>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}

08005d6c <__sfp_lock_acquire>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	; (8005d74 <__sfp_lock_acquire+0x8>)
 8005d6e:	f000 b8b3 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d72:	bf00      	nop
 8005d74:	2000017d 	.word	0x2000017d

08005d78 <__sfp_lock_release>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__sfp_lock_release+0x8>)
 8005d7a:	f000 b8ae 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d7e:	bf00      	nop
 8005d80:	2000017d 	.word	0x2000017d

08005d84 <__sinit_lock_acquire>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__sinit_lock_acquire+0x8>)
 8005d86:	f000 b8a7 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	2000017e 	.word	0x2000017e

08005d90 <__sinit_lock_release>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__sinit_lock_release+0x8>)
 8005d92:	f000 b8a2 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	2000017e 	.word	0x2000017e

08005d9c <__sinit>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	f7ff fff0 	bl	8005d84 <__sinit_lock_acquire>
 8005da4:	69a3      	ldr	r3, [r4, #24]
 8005da6:	b11b      	cbz	r3, 8005db0 <__sinit+0x14>
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f7ff bff0 	b.w	8005d90 <__sinit_lock_release>
 8005db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005db4:	6523      	str	r3, [r4, #80]	; 0x50
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <__sinit+0x68>)
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <__sinit+0x6c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	bf04      	itt	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	61a3      	streq	r3, [r4, #24]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f820 	bl	8005e0c <__sfp>
 8005dcc:	6060      	str	r0, [r4, #4]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f81c 	bl	8005e0c <__sfp>
 8005dd4:	60a0      	str	r0, [r4, #8]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f818 	bl	8005e0c <__sfp>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60e0      	str	r0, [r4, #12]
 8005de0:	2104      	movs	r1, #4
 8005de2:	6860      	ldr	r0, [r4, #4]
 8005de4:	f7ff ff82 	bl	8005cec <std>
 8005de8:	68a0      	ldr	r0, [r4, #8]
 8005dea:	2201      	movs	r2, #1
 8005dec:	2109      	movs	r1, #9
 8005dee:	f7ff ff7d 	bl	8005cec <std>
 8005df2:	68e0      	ldr	r0, [r4, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff ff78 	bl	8005cec <std>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61a3      	str	r3, [r4, #24]
 8005e00:	e7d2      	b.n	8005da8 <__sinit+0xc>
 8005e02:	bf00      	nop
 8005e04:	080061c4 	.word	0x080061c4
 8005e08:	08005d35 	.word	0x08005d35

08005e0c <__sfp>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	4607      	mov	r7, r0
 8005e10:	f7ff ffac 	bl	8005d6c <__sfp_lock_acquire>
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <__sfp+0x84>)
 8005e16:	681e      	ldr	r6, [r3, #0]
 8005e18:	69b3      	ldr	r3, [r6, #24]
 8005e1a:	b913      	cbnz	r3, 8005e22 <__sfp+0x16>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ffbd 	bl	8005d9c <__sinit>
 8005e22:	3648      	adds	r6, #72	; 0x48
 8005e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	d503      	bpl.n	8005e34 <__sfp+0x28>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	b30b      	cbz	r3, 8005e74 <__sfp+0x68>
 8005e30:	6836      	ldr	r6, [r6, #0]
 8005e32:	e7f7      	b.n	8005e24 <__sfp+0x18>
 8005e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e38:	b9d5      	cbnz	r5, 8005e70 <__sfp+0x64>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <__sfp+0x88>)
 8005e3c:	60e3      	str	r3, [r4, #12]
 8005e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e42:	6665      	str	r5, [r4, #100]	; 0x64
 8005e44:	f000 f847 	bl	8005ed6 <__retarget_lock_init_recursive>
 8005e48:	f7ff ff96 	bl	8005d78 <__sfp_lock_release>
 8005e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e54:	6025      	str	r5, [r4, #0]
 8005e56:	61a5      	str	r5, [r4, #24]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e60:	f7fd fea8 	bl	8003bb4 <memset>
 8005e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e70:	3468      	adds	r4, #104	; 0x68
 8005e72:	e7d9      	b.n	8005e28 <__sfp+0x1c>
 8005e74:	2104      	movs	r1, #4
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff ff62 	bl	8005d40 <__sfmoreglue>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	6030      	str	r0, [r6, #0]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1d5      	bne.n	8005e30 <__sfp+0x24>
 8005e84:	f7ff ff78 	bl	8005d78 <__sfp_lock_release>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	e7ee      	b.n	8005e6c <__sfp+0x60>
 8005e8e:	bf00      	nop
 8005e90:	080061c4 	.word	0x080061c4
 8005e94:	ffff0001 	.word	0xffff0001

08005e98 <_fwalk_reent>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	4688      	mov	r8, r1
 8005ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea4:	2700      	movs	r7, #0
 8005ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8005eae:	d505      	bpl.n	8005ebc <_fwalk_reent+0x24>
 8005eb0:	6824      	ldr	r4, [r4, #0]
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d1f7      	bne.n	8005ea6 <_fwalk_reent+0xe>
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d907      	bls.n	8005ed2 <_fwalk_reent+0x3a>
 8005ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	d003      	beq.n	8005ed2 <_fwalk_reent+0x3a>
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	47c0      	blx	r8
 8005ed0:	4307      	orrs	r7, r0
 8005ed2:	3568      	adds	r5, #104	; 0x68
 8005ed4:	e7e9      	b.n	8005eaa <_fwalk_reent+0x12>

08005ed6 <__retarget_lock_init_recursive>:
 8005ed6:	4770      	bx	lr

08005ed8 <__retarget_lock_acquire_recursive>:
 8005ed8:	4770      	bx	lr

08005eda <__retarget_lock_release_recursive>:
 8005eda:	4770      	bx	lr

08005edc <__swhatbuf_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	460e      	mov	r6, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	b096      	sub	sp, #88	; 0x58
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	da08      	bge.n	8005f00 <__swhatbuf_r+0x24>
 8005eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	061a      	lsls	r2, r3, #24
 8005ef8:	d410      	bmi.n	8005f1c <__swhatbuf_r+0x40>
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	e00e      	b.n	8005f1e <__swhatbuf_r+0x42>
 8005f00:	466a      	mov	r2, sp
 8005f02:	f000 f8fb 	bl	80060fc <_fstat_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dbf1      	blt.n	8005eee <__swhatbuf_r+0x12>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f14:	425a      	negs	r2, r3
 8005f16:	415a      	adcs	r2, r3
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	e7ee      	b.n	8005efa <__swhatbuf_r+0x1e>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	b016      	add	sp, #88	; 0x58
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b002      	add	sp, #8
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffc8 	bl	8005edc <__swhatbuf_r>
 8005f4c:	9900      	ldr	r1, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7fe fb2f 	bl	80045b4 <_malloc_r>
 8005f56:	b948      	cbnz	r0, 8005f6c <__smakebuf_r+0x44>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d4ef      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7e3      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <__smakebuf_r+0x7c>)
 8005f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x74>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f8c9 	bl	8006120 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x74>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a0      	ldrh	r0, [r4, #12]
 8005f9e:	4305      	orrs	r5, r0
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cd      	b.n	8005f40 <__smakebuf_r+0x18>
 8005fa4:	08005d35 	.word	0x08005d35

08005fa8 <_raise_r>:
 8005fa8:	291f      	cmp	r1, #31
 8005faa:	b538      	push	{r3, r4, r5, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	460d      	mov	r5, r1
 8005fb0:	d904      	bls.n	8005fbc <_raise_r+0x14>
 8005fb2:	2316      	movs	r3, #22
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fbe:	b112      	cbz	r2, 8005fc6 <_raise_r+0x1e>
 8005fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fc4:	b94b      	cbnz	r3, 8005fda <_raise_r+0x32>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 f830 	bl	800602c <_getpid_r>
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4601      	mov	r1, r0
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd6:	f000 b817 	b.w	8006008 <_kill_r>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d00a      	beq.n	8005ff4 <_raise_r+0x4c>
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	d103      	bne.n	8005fea <_raise_r+0x42>
 8005fe2:	2316      	movs	r3, #22
 8005fe4:	6003      	str	r3, [r0, #0]
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e7e7      	b.n	8005fba <_raise_r+0x12>
 8005fea:	2400      	movs	r4, #0
 8005fec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	4798      	blx	r3
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e7e0      	b.n	8005fba <_raise_r+0x12>

08005ff8 <raise>:
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <raise+0xc>)
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f7ff bfd3 	b.w	8005fa8 <_raise_r>
 8006002:	bf00      	nop
 8006004:	2000000c 	.word	0x2000000c

08006008 <_kill_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d07      	ldr	r5, [pc, #28]	; (8006028 <_kill_r+0x20>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	602b      	str	r3, [r5, #0]
 8006016:	f7fa fdb3 	bl	8000b80 <_kill>
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d102      	bne.n	8006024 <_kill_r+0x1c>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	b103      	cbz	r3, 8006024 <_kill_r+0x1c>
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	bd38      	pop	{r3, r4, r5, pc}
 8006026:	bf00      	nop
 8006028:	20000178 	.word	0x20000178

0800602c <_getpid_r>:
 800602c:	f7fa bda0 	b.w	8000b70 <_getpid>

08006030 <__sread>:
 8006030:	b510      	push	{r4, lr}
 8006032:	460c      	mov	r4, r1
 8006034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006038:	f000 f894 	bl	8006164 <_read_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	bfab      	itete	ge
 8006040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006042:	89a3      	ldrhlt	r3, [r4, #12]
 8006044:	181b      	addge	r3, r3, r0
 8006046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800604a:	bfac      	ite	ge
 800604c:	6563      	strge	r3, [r4, #84]	; 0x54
 800604e:	81a3      	strhlt	r3, [r4, #12]
 8006050:	bd10      	pop	{r4, pc}

08006052 <__swrite>:
 8006052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006056:	461f      	mov	r7, r3
 8006058:	898b      	ldrh	r3, [r1, #12]
 800605a:	05db      	lsls	r3, r3, #23
 800605c:	4605      	mov	r5, r0
 800605e:	460c      	mov	r4, r1
 8006060:	4616      	mov	r6, r2
 8006062:	d505      	bpl.n	8006070 <__swrite+0x1e>
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	2302      	movs	r3, #2
 800606a:	2200      	movs	r2, #0
 800606c:	f000 f868 	bl	8006140 <_lseek_r>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006086:	f000 b817 	b.w	80060b8 <_write_r>

0800608a <__sseek>:
 800608a:	b510      	push	{r4, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006092:	f000 f855 	bl	8006140 <_lseek_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	bf15      	itete	ne
 800609c:	6560      	strne	r0, [r4, #84]	; 0x54
 800609e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060a6:	81a3      	strheq	r3, [r4, #12]
 80060a8:	bf18      	it	ne
 80060aa:	81a3      	strhne	r3, [r4, #12]
 80060ac:	bd10      	pop	{r4, pc}

080060ae <__sclose>:
 80060ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b2:	f000 b813 	b.w	80060dc <_close_r>
	...

080060b8 <_write_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d07      	ldr	r5, [pc, #28]	; (80060d8 <_write_r+0x20>)
 80060bc:	4604      	mov	r4, r0
 80060be:	4608      	mov	r0, r1
 80060c0:	4611      	mov	r1, r2
 80060c2:	2200      	movs	r2, #0
 80060c4:	602a      	str	r2, [r5, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f7fa fd91 	bl	8000bee <_write>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_write_r+0x1e>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_write_r+0x1e>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20000178 	.word	0x20000178

080060dc <_close_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4d06      	ldr	r5, [pc, #24]	; (80060f8 <_close_r+0x1c>)
 80060e0:	2300      	movs	r3, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	f7fa fd9d 	bl	8000c26 <_close>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_close_r+0x1a>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_close_r+0x1a>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000178 	.word	0x20000178

080060fc <_fstat_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	; (800611c <_fstat_r+0x20>)
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	f7fa fd98 	bl	8000c3e <_fstat>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d102      	bne.n	8006118 <_fstat_r+0x1c>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	b103      	cbz	r3, 8006118 <_fstat_r+0x1c>
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	20000178 	.word	0x20000178

08006120 <_isatty_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d06      	ldr	r5, [pc, #24]	; (800613c <_isatty_r+0x1c>)
 8006124:	2300      	movs	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fa fd97 	bl	8000c5e <_isatty>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d102      	bne.n	800613a <_isatty_r+0x1a>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	b103      	cbz	r3, 800613a <_isatty_r+0x1a>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	20000178 	.word	0x20000178

08006140 <_lseek_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d07      	ldr	r5, [pc, #28]	; (8006160 <_lseek_r+0x20>)
 8006144:	4604      	mov	r4, r0
 8006146:	4608      	mov	r0, r1
 8006148:	4611      	mov	r1, r2
 800614a:	2200      	movs	r2, #0
 800614c:	602a      	str	r2, [r5, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	f7fa fd90 	bl	8000c74 <_lseek>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_lseek_r+0x1e>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_lseek_r+0x1e>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20000178 	.word	0x20000178

08006164 <_read_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d07      	ldr	r5, [pc, #28]	; (8006184 <_read_r+0x20>)
 8006168:	4604      	mov	r4, r0
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	2200      	movs	r2, #0
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f7fa fd1e 	bl	8000bb4 <_read>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_read_r+0x1e>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_read_r+0x1e>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000178 	.word	0x20000178

08006188 <_init>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	bf00      	nop
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr

08006194 <_fini>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr
