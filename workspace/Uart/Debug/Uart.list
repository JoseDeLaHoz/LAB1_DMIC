
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e854  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002410  0800ea58  0800ea58  0001ea58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e68  08010e68  000309bc  2**0
                  CONTENTS
  4 .ARM          00000008  08010e68  08010e68  00020e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e70  08010e70  000309bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010e70  08010e70  00020e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e78  08010e78  00020e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  08010e7c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200009bc  08011838  000309bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08011838  00030af4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118fb  00000000  00000000  000309ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  000422e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000445a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00045370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029254  00000000  00000000  00046058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118d1  00000000  00000000  0006f2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd871  00000000  00000000  00080b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e3ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  0017e440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00183c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00183c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009bc 	.word	0x200009bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ea3c 	.word	0x0800ea3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009c0 	.word	0x200009c0
 800023c:	0800ea3c 	.word	0x0800ea3c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <Saludo>:

/**
 *
 */

void Saludo(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	printf("\x1b[2J"); //Clear the screen
 80009e0:	4814      	ldr	r0, [pc, #80]	; (8000a34 <Saludo+0x58>)
 80009e2:	f004 fbcd 	bl	8005180 <printf>
	printf("\n\r***************************************************************");
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <Saludo+0x5c>)
 80009e8:	f004 fbca 	bl	8005180 <printf>
	printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <Saludo+0x60>)
 80009ee:	f004 fbc7 	bl	8005180 <printf>
	printf("\n\r*                    DMIC - B - 2022                          *");
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <Saludo+0x64>)
 80009f4:	f004 fbc4 	bl	8005180 <printf>
	printf("\n\r*\t Jose De La Hoz                                       *");
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <Saludo+0x68>)
 80009fa:	f004 fbc1 	bl	8005180 <printf>
	printf("\n\r*\t Jhan Carlos Reyes                                    *");
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <Saludo+0x6c>)
 8000a00:	f004 fbbe 	bl	8005180 <printf>
	printf("\n\r*\t Esneider Silva                                       *");
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Saludo+0x70>)
 8000a06:	f004 fbbb 	bl	8005180 <printf>
	printf("\n\r*\t\t'GENERADOR DE NUMEROS PSEUDOALEATORIO'        *");
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <Saludo+0x74>)
 8000a0c:	f004 fbb8 	bl	8005180 <printf>
	printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <Saludo+0x78>)
 8000a12:	f004 fbb5 	bl	8005180 <printf>
	printf("\n\r***************************************************************");
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <Saludo+0x5c>)
 8000a18:	f004 fbb2 	bl	8005180 <printf>
	printf("\r\n");
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <Saludo+0x7c>)
 8000a1e:	f004 fc07 	bl	8005230 <puts>
	printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <Saludo+0x80>)
 8000a24:	f004 fbac 	bl	8005180 <printf>
	printf("\r\n");
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <Saludo+0x7c>)
 8000a2a:	f004 fc01 	bl	8005230 <puts>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	0800ea58 	.word	0x0800ea58
 8000a38:	0800ea60 	.word	0x0800ea60
 8000a3c:	0800eaa4 	.word	0x0800eaa4
 8000a40:	0800eae8 	.word	0x0800eae8
 8000a44:	0800eb2c 	.word	0x0800eb2c
 8000a48:	0800eb68 	.word	0x0800eb68
 8000a4c:	0800eba4 	.word	0x0800eba4
 8000a50:	0800ebe0 	.word	0x0800ebe0
 8000a54:	0800ec18 	.word	0x0800ec18
 8000a58:	0800ec5c 	.word	0x0800ec5c
 8000a5c:	0800ec60 	.word	0x0800ec60

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a64:	ed2d 8b02 	vpush	{d8}
 8000a68:	b0e0      	sub	sp, #384	; 0x180
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 f933 	bl	8001cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 fdc2 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 feae 	bl	80017d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a78:	f000 fe7c 	bl	8001774 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a7c:	f000 fe2c 	bl	80016d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //Apagar el LED
 8000a80:	2200      	movs	r2, #0
 8000a82:	2101      	movs	r1, #1
 8000a84:	48aa      	ldr	r0, [pc, #680]	; (8000d30 <main+0x2d0>)
 8000a86:	f001 fceb 	bl	8002460 <HAL_GPIO_WritePin>

	RetargetInit(&huart3); // declarar Uart3 (conectado con el stlink)
 8000a8a:	48aa      	ldr	r0, [pc, #680]	; (8000d34 <main+0x2d4>)
 8000a8c:	f000 ff0e 	bl	80018ac <RetargetInit>



	while (1) {
		char buf_lfsr[10];
			uint8_t receive[32] = { 0 }; // Arreglo para recibir
 8000a90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000a94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]
			uint8_t seed[32] = { 0 };	//Arreglo semilla
 8000aae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ab2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]
			uint8_t seed_init[32] = { 0 }; //Arreglo semilla inicial
 8000acc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
			uint8_t pol[32] = { 0 }; // Almacenar polinomio
 8000aea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	3304      	adds	r3, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]
			uint8_t aux[32] = { 0 }; // Auxiliar para invertir
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000b0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]
			uint8_t xor[32] = { 0 }; // Almacena las xor
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000b28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]
			uint8_t buffer_lfsr[16]={0};	//Transmitir
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000b42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
			uint8_t band = 1;		//bandera de ciclo max
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

			//Uso del timer 2 para LED_Blinking
			HAL_TIM_Base_Start(&htim2);
 8000b54:	4878      	ldr	r0, [pc, #480]	; (8000d38 <main+0x2d8>)
 8000b56:	f002 fe5b 	bl	8003810 <HAL_TIM_Base_Start>
			__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000b5a:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <main+0x2d8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f06f 0201 	mvn.w	r2, #1
 8000b62:	611a      	str	r2, [r3, #16]
			int16_t timerLimit = 250;
 8000b64:	23fa      	movs	r3, #250	; 0xfa
 8000b66:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c

			//Mensaje de saludo
			Saludo();
 8000b6a:	f7ff ff37 	bl	80009dc <Saludo>

			//Etiqueta para reiniciar
			init:
			printf("\n\rNumero de bits termino de realimentacion\n\r");
 8000b6e:	4873      	ldr	r0, [pc, #460]	; (8000d3c <main+0x2dc>)
 8000b70:	f004 fb06 	bl	8005180 <printf>
			scanf("%s", buf_lfsr);
 8000b74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4871      	ldr	r0, [pc, #452]	; (8000d40 <main+0x2e0>)
 8000b7c:	f004 fb60 	bl	8005240 <scanf>
			int numbits = atoi(buf_lfsr);
 8000b80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 faaa 	bl	80050de <atoi>
 8000b8a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
			printf("\n\rNumero de bits - Decimals: %d\n\r", numbits);
 8000b8e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000b92:	486c      	ldr	r0, [pc, #432]	; (8000d44 <main+0x2e4>)
 8000b94:	f004 faf4 	bl	8005180 <printf>

			printf("\n\rIngrese el polinomio de %d bits en binario\n\r", numbits);
 8000b98:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000b9c:	486a      	ldr	r0, [pc, #424]	; (8000d48 <main+0x2e8>)
 8000b9e:	f004 faef 	bl	8005180 <printf>
			if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits,
 8000ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	f107 0114 	add.w	r1, r7, #20
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	4860      	ldr	r0, [pc, #384]	; (8000d34 <main+0x2d4>)
 8000bb2:	f003 fa00 	bl	8003fb6 <HAL_UART_Receive>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d121      	bne.n	8000c00 <main+0x1a0>
					HAL_MAX_DELAY)) {

				for (int i = 0; (i < numbits); i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000bc2:	e017      	b.n	8000bf4 <main+0x194>
					pol[i] = (receive[i] - 48);
 8000bc4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000bc8:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8000bcc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3b30      	subs	r3, #48	; 0x30
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000bdc:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000be0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000be4:	4413      	add	r3, r2
 8000be6:	460a      	mov	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; (i < numbits); i++) {
 8000bea:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000bf4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbe1      	blt.n	8000bc4 <main+0x164>
			}


			///////////

		printf("\n\rIngrese el numero de la semilla de %d bits en binario\n\r",
 8000c00:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000c04:	4851      	ldr	r0, [pc, #324]	; (8000d4c <main+0x2ec>)
 8000c06:	f004 fabb 	bl	8005180 <printf>
				numbits);
		if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits, HAL_MAX_DELAY)) {
 8000c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	f107 0114 	add.w	r1, r7, #20
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	4846      	ldr	r0, [pc, #280]	; (8000d34 <main+0x2d4>)
 8000c1a:	f003 f9cc 	bl	8003fb6 <HAL_UART_Receive>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 814f 	bne.w	8000ec4 <main+0x464>

			//Recibe una semilla del tamaño de bits anteriormente especificado en binario
			for (int i = 0; (i < numbits); i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000c2c:	e028      	b.n	8000c80 <main+0x220>
				seed[i] = (receive[i] - 48);
 8000c2e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c32:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8000c36:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3b30      	subs	r3, #48	; 0x30
 8000c40:	b2d9      	uxtb	r1, r3
 8000c42:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c46:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8000c4a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c4e:	4413      	add	r3, r2
 8000c50:	460a      	mov	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
				seed_init[i] = seed[i];
 8000c54:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c58:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8000c5c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c60:	4413      	add	r3, r2
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c68:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8000c6c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c70:	4413      	add	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
			for (int i = 0; (i < numbits); i++) {
 8000c76:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000c80:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbd0      	blt.n	8000c2e <main+0x1ce>
			}
			band = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			//Convertir de arreglo a byte
			uint64_t usr = 0;
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
			for (int i = 0; (i < numbits); i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000ca4:	e034      	b.n	8000d10 <main+0x2b0>
				usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 8000ca6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8000caa:	f7ff fca7 	bl	80005fc <__aeabi_ul2d>
 8000cae:	ec41 0b18 	vmov	d8, r0, r1
 8000cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cc6:	eeb0 1b47 	vmov.f64	d1, d7
 8000cca:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000cce:	f00d fbdf 	bl	800e490 <pow>
 8000cd2:	eeb0 6b40 	vmov.f64	d6, d0
 8000cd6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cda:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8000cde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cf2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000cf6:	ec51 0b17 	vmov	r0, r1, d7
 8000cfa:	f7ff fce5 	bl	80006c8 <__aeabi_d2ulz>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
			for (int i = 0; (i < numbits); i++) {
 8000d06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000d10:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000d14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbc4      	blt.n	8000ca6 <main+0x246>
			}

			uint64_t taps = 0;
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
			for (int i = 0; (i < numbits); i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d2e:	e047      	b.n	8000dc0 <main+0x360>
 8000d30:	40020400 	.word	0x40020400
 8000d34:	20000a24 	.word	0x20000a24
 8000d38:	200009d8 	.word	0x200009d8
 8000d3c:	0800ed90 	.word	0x0800ed90
 8000d40:	0800edc0 	.word	0x0800edc0
 8000d44:	0800edc4 	.word	0x0800edc4
 8000d48:	0800ede8 	.word	0x0800ede8
 8000d4c:	0800ee18 	.word	0x0800ee18
				taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 8000d50:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8000d54:	f7ff fc52 	bl	80005fc <__aeabi_ul2d>
 8000d58:	ec41 0b18 	vmov	d8, r0, r1
 8000d5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d70:	eeb0 1b47 	vmov.f64	d1, d7
 8000d74:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d78:	f00d fb8a 	bl	800e490 <pow>
 8000d7c:	eeb0 6b40 	vmov.f64	d6, d0
 8000d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000d90:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000da2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000da6:	ec51 0b17 	vmov	r0, r1, d7
 8000daa:	f7ff fc8d 	bl	80006c8 <__aeabi_d2ulz>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
			for (int i = 0; (i < numbits); i++) {
 8000db6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000dc0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000dc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbc1      	blt.n	8000d50 <main+0x2f0>
			}


			printf("\n\r\n\r***************************************************************");
 8000dcc:	48c1      	ldr	r0, [pc, #772]	; (80010d4 <main+0x674>)
 8000dce:	f004 f9d7 	bl	8005180 <printf>
			printf("\n\r\t*\t RESUMEN INICIAL DE LA SECUENCIA \t*\n\r");
 8000dd2:	48c1      	ldr	r0, [pc, #772]	; (80010d8 <main+0x678>)
 8000dd4:	f004 f9d4 	bl	8005180 <printf>
			printf("***************************************************************");
 8000dd8:	48c0      	ldr	r0, [pc, #768]	; (80010dc <main+0x67c>)
 8000dda:	f004 f9d1 	bl	8005180 <printf>
			printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000dde:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000de2:	48bf      	ldr	r0, [pc, #764]	; (80010e0 <main+0x680>)
 8000de4:	f004 f9cc 	bl	8005180 <printf>
			printf("Funcion de realimentacion: BIN ");
 8000de8:	48be      	ldr	r0, [pc, #760]	; (80010e4 <main+0x684>)
 8000dea:	f004 f9c9 	bl	8005180 <printf>

			printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000dee:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000df2:	48bb      	ldr	r0, [pc, #748]	; (80010e0 <main+0x680>)
 8000df4:	f004 f9c4 	bl	8005180 <printf>
			printf("Funcion de realimentacion; ");
 8000df8:	48bb      	ldr	r0, [pc, #748]	; (80010e8 <main+0x688>)
 8000dfa:	f004 f9c1 	bl	8005180 <printf>
			itoa(taps, (char*) buffer_lfsr, 2);
 8000dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e02:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000e06:	2202      	movs	r2, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 f9af 	bl	800516c <itoa>
			printf("%s", buffer_lfsr);
 8000e0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e12:	4619      	mov	r1, r3
 8000e14:	48b5      	ldr	r0, [pc, #724]	; (80010ec <main+0x68c>)
 8000e16:	f004 f9b3 	bl	8005180 <printf>
			printf(" - ");
 8000e1a:	48b5      	ldr	r0, [pc, #724]	; (80010f0 <main+0x690>)
 8000e1c:	f004 f9b0 	bl	8005180 <printf>
			itoa(taps, (char*) buffer_lfsr, 16);
 8000e20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e24:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000e28:	2210      	movs	r2, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 f99e 	bl	800516c <itoa>
			printf("%s", buffer_lfsr);
 8000e30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e34:	4619      	mov	r1, r3
 8000e36:	48ad      	ldr	r0, [pc, #692]	; (80010ec <main+0x68c>)
 8000e38:	f004 f9a2 	bl	8005180 <printf>

			printf("\n\rValor inicial - Semilla : ");
 8000e3c:	48ad      	ldr	r0, [pc, #692]	; (80010f4 <main+0x694>)
 8000e3e:	f004 f99f 	bl	8005180 <printf>
			itoa(usr, (char*) buffer_lfsr, 2);
 8000e42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e46:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 f98d 	bl	800516c <itoa>
			printf("%s", buffer_lfsr);
 8000e52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e56:	4619      	mov	r1, r3
 8000e58:	48a4      	ldr	r0, [pc, #656]	; (80010ec <main+0x68c>)
 8000e5a:	f004 f991 	bl	8005180 <printf>
			printf(" - ");
 8000e5e:	48a4      	ldr	r0, [pc, #656]	; (80010f0 <main+0x690>)
 8000e60:	f004 f98e 	bl	8005180 <printf>
			itoa(usr, (char*) buffer_lfsr, 16);
 8000e64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e68:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 f97c 	bl	800516c <itoa>
			printf("%s", buffer_lfsr);
 8000e74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	489c      	ldr	r0, [pc, #624]	; (80010ec <main+0x68c>)
 8000e7c:	f004 f980 	bl	8005180 <printf>

			uint64_t a = pow(2,numbits)-1;
 8000e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e8c:	eeb0 1b47 	vmov.f64	d1, d7
 8000e90:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000e94:	f00d fafc 	bl	800e490 <pow>
 8000e98:	eeb0 7b40 	vmov.f64	d7, d0
 8000e9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ea4:	ec51 0b17 	vmov	r0, r1, d7
 8000ea8:	f7ff fc0e 	bl	80006c8 <__aeabi_d2ulz>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			printf("\n\rTotal de numeros esperados en la secuencia: %llu ", a);
 8000eb4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8000eb8:	488f      	ldr	r0, [pc, #572]	; (80010f8 <main+0x698>)
 8000eba:	f004 f961 	bl	8005180 <printf>
			printf("\r\n");
 8000ebe:	488f      	ldr	r0, [pc, #572]	; (80010fc <main+0x69c>)
 8000ec0:	f004 f9b6 	bl	8005230 <puts>

		}

		printf("\n\r");
 8000ec4:	488e      	ldr	r0, [pc, #568]	; (8001100 <main+0x6a0>)
 8000ec6:	f004 f95b 	bl	8005180 <printf>
		//////////////////////////////////////////////////////
		//Invertir el polinomio de acuerdo con los parámetros establecidos
			for (int w = 0; w < numbits; w++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ed0:	e016      	b.n	8000f00 <main+0x4a0>
				aux[w] = pol[numbits - 1 - w];
 8000ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000ee2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ee6:	5cd1      	ldrb	r1, [r2, r3]
 8000ee8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000eec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ef0:	4413      	add	r3, r2
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < numbits; w++) {
 8000ef6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f00:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000f04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbe2      	blt.n	8000ed2 <main+0x472>
			}

			for (int w = 0; w < numbits; w++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f12:	e013      	b.n	8000f3c <main+0x4dc>
				pol[w] = aux[w];
 8000f14:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000f1c:	4413      	add	r3, r2
 8000f1e:	7819      	ldrb	r1, [r3, #0]
 8000f20:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f24:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000f2c:	4413      	add	r3, r2
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < numbits; w++) {
 8000f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000f36:	3301      	adds	r3, #1
 8000f38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbe5      	blt.n	8000f14 <main+0x4b4>
			}

		uint64_t k = 0;
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		while (k < pow(2, numbits)) {
 8000f54:	e1c1      	b.n	80012da <main+0x87a>

			//Revisa si la bandera de interrupción del TIM esta en 1
			if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000f56:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <main+0x6a4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10c      	bne.n	8000f7e <main+0x51e>
				__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE); //Borra la bandera de interrupcion del timer.
 8000f64:	4b67      	ldr	r3, [pc, #412]	; (8001104 <main+0x6a4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f06f 0201 	mvn.w	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4865      	ldr	r0, [pc, #404]	; (8001108 <main+0x6a8>)
 8000f72:	f001 fa8e 	bl	8002492 <HAL_GPIO_TogglePin>
				timerLimit = 250;
 8000f76:	23fa      	movs	r3, #250	; 0xfa
 8000f78:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
 8000f7c:	e00c      	b.n	8000f98 <main+0x538>
			} else if (__HAL_TIM_GET_COUNTER(&htim2) >= timerLimit) {
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <main+0x6a4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f84:	f9b7 317c 	ldrsh.w	r3, [r7, #380]	; 0x17c
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d305      	bcc.n	8000f98 <main+0x538>
				timerLimit += 250;
 8000f8c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8000f90:	33fa      	adds	r3, #250	; 0xfa
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
			}

			for (int i = 0; (i < numbits); i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000f9e:	e025      	b.n	8000fec <main+0x58c>
				if (pol[i] == 1) {
 8000fa0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000fa4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000fa8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10f      	bne.n	8000fd4 <main+0x574>
					xor[i] = seed[i];
 8000fb4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000fb8:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8000fbc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fc0:	4413      	add	r3, r2
 8000fc2:	7819      	ldrb	r1, [r3, #0]
 8000fc4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000fc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fcc:	4413      	add	r3, r2
 8000fce:	460a      	mov	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e006      	b.n	8000fe2 <main+0x582>
				} else {
					xor[i] = 0;
 8000fd4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000fd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fdc:	4413      	add	r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; (i < numbits); i++) {
 8000fe2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000fec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbd3      	blt.n	8000fa0 <main+0x540>
			}
			////////////////////////////////////////////////////////

			/////////////////////////////////////////////////////////////////////////////////
			//Determinar cuantos 1's tiene
			uint64_t res = 0;
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			for (int i = 0; (i < numbits); i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800100a:	e016      	b.n	800103a <main+0x5da>
				res = res + xor[i];
 800100c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2200      	movs	r2, #0
 800101c:	4698      	mov	r8, r3
 800101e:	4691      	mov	r9, r2
 8001020:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001024:	eb12 0a08 	adds.w	sl, r2, r8
 8001028:	eb43 0b09 	adc.w	fp, r3, r9
 800102c:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	; 0x130
			for (int i = 0; (i < numbits); i++) {
 8001030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001034:	3301      	adds	r3, #1
 8001036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800103a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800103e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001042:	429a      	cmp	r2, r3
 8001044:	dbe2      	blt.n	800100c <main+0x5ac>
			// Función utilizada en DEBUGG
			// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

			////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

			if (res % 2 == 0) {
 8001046:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800104a:	f002 0401 	and.w	r4, r2, #1
 800104e:	2500      	movs	r5, #0
 8001050:	ea54 0305 	orrs.w	r3, r4, r5
 8001054:	d106      	bne.n	8001064 <main+0x604>
				res = 0;
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001062:	e005      	b.n	8001070 <main+0x610>
			} else {
				res = 1;
 8001064:	f04f 0201 	mov.w	r2, #1
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			}
			///////////////////////////////////////////////
			// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);

			///mover y poner el valor xor en la cabeza
			for (int i = numbits - 1; i > 0; i--) {
 8001070:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001074:	3b01      	subs	r3, #1
 8001076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800107a:	e015      	b.n	80010a8 <main+0x648>
				seed[i] = seed[i - 1];
 800107c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001080:	3b01      	subs	r3, #1
 8001082:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001086:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800108a:	5cd1      	ldrb	r1, [r2, r3]
 800108c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001090:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001098:	4413      	add	r3, r2
 800109a:	460a      	mov	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
			for (int i = numbits - 1; i > 0; i--) {
 800109e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80010a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dce5      	bgt.n	800107c <main+0x61c>
			}

			seed[0] = res;
 80010b0:	f897 2130 	ldrb.w	r2, [r7, #304]	; 0x130
 80010b4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80010bc:	701a      	strb	r2, [r3, #0]

			uint64_t usr = 0;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			for (int i = 0; (i < numbits); i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010d0:	e051      	b.n	8001176 <main+0x716>
 80010d2:	bf00      	nop
 80010d4:	0800ee54 	.word	0x0800ee54
 80010d8:	0800ee98 	.word	0x0800ee98
 80010dc:	0800eec4 	.word	0x0800eec4
 80010e0:	0800ef04 	.word	0x0800ef04
 80010e4:	0800ef38 	.word	0x0800ef38
 80010e8:	0800ef58 	.word	0x0800ef58
 80010ec:	0800edc0 	.word	0x0800edc0
 80010f0:	0800ef74 	.word	0x0800ef74
 80010f4:	0800ef78 	.word	0x0800ef78
 80010f8:	0800ef98 	.word	0x0800ef98
 80010fc:	0800efcc 	.word	0x0800efcc
 8001100:	0800efd0 	.word	0x0800efd0
 8001104:	200009d8 	.word	0x200009d8
 8001108:	40020400 	.word	0x40020400
				usr = usr + pow(2, ((numbits - 1) - i)) * seed[i];
 800110c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001110:	f7ff fa74 	bl	80005fc <__aeabi_ul2d>
 8001114:	ec41 0b18 	vmov	d8, r0, r1
 8001118:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112c:	eeb0 1b47 	vmov.f64	d1, d7
 8001130:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001134:	f00d f9ac 	bl	800e490 <pow>
 8001138:	eeb0 6b40 	vmov.f64	d6, d0
 800113c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001140:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001154:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001158:	ee38 7b07 	vadd.f64	d7, d8, d7
 800115c:	ec51 0b17 	vmov	r0, r1, d7
 8001160:	f7ff fab2 	bl	80006c8 <__aeabi_d2ulz>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			for (int i = 0; (i < numbits); i++) {
 800116c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001170:	3301      	adds	r3, #1
 8001172:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001176:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800117a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800117e:	429a      	cmp	r2, r3
 8001180:	dbc4      	blt.n	800110c <main+0x6ac>
			}
			// Línea equivalente al anterior ciclo pero con tamaño de 4 bits
			//int usr = 16 * seed[0] + 8 * seed[1] + 4 * seed[2] + 2 * seed[3] + seed[4];


			itoa(usr, (char*) buffer_lfsr, 16);
 8001182:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001186:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800118a:	2210      	movs	r2, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ffed 	bl	800516c <itoa>
			printf("\n\r%s", buffer_lfsr);
 8001192:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001196:	4619      	mov	r1, r3
 8001198:	488d      	ldr	r0, [pc, #564]	; (80013d0 <main+0x970>)
 800119a:	f003 fff1 	bl	8005180 <printf>

			if(HAL_GPIO_ReadPin (GPIOC, btn_Pin)){
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	488c      	ldr	r0, [pc, #560]	; (80013d4 <main+0x974>)
 80011a4:	f001 f944 	bl	8002430 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <main+0x76c>
				printf("\n\r\n\r***************************************************************");
 80011ae:	488a      	ldr	r0, [pc, #552]	; (80013d8 <main+0x978>)
 80011b0:	f003 ffe6 	bl	8005180 <printf>
				printf("\n\r\t*\t DETENER LA SECUENCIA POR EL USUARIO\t*\n\r");
 80011b4:	4889      	ldr	r0, [pc, #548]	; (80013dc <main+0x97c>)
 80011b6:	f003 ffe3 	bl	8005180 <printf>
				printf("***************************************************************");
 80011ba:	4889      	ldr	r0, [pc, #548]	; (80013e0 <main+0x980>)
 80011bc:	f003 ffe0 	bl	8005180 <printf>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2101      	movs	r1, #1
 80011c4:	4887      	ldr	r0, [pc, #540]	; (80013e4 <main+0x984>)
 80011c6:	f001 f94b 	bl	8002460 <HAL_GPIO_WritePin>
				goto last;
 80011ca:	e0a1      	b.n	8001310 <main+0x8b0>
			}


			if (band == 1) {
 80011cc:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d103      	bne.n	80011dc <main+0x77c>
				band = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80011da:	e026      	b.n	800122a <main+0x7ca>
			} else {
				band = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
				for (int i = 0; i < numbits; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80011e8:	e019      	b.n	800121e <main+0x7be>
					if (seed[i] != seed_init[i]) {
 80011ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80011ee:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80011f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80011f6:	4413      	add	r3, r2
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80011fe:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8001202:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001206:	440b      	add	r3, r1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d002      	beq.n	8001214 <main+0x7b4>
						band = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
				for (int i = 0; i < numbits; i++) {
 8001214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800121e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001226:	429a      	cmp	r2, r3
 8001228:	dbdf      	blt.n	80011ea <main+0x78a>
					}
				}
			}

			if (band == 0) {
 800122a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d124      	bne.n	800127c <main+0x81c>
				if (k == pow(2, numbits) - 2) {
 8001232:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001236:	f7ff f9e1 	bl	80005fc <__aeabi_ul2d>
 800123a:	ec41 0b18 	vmov	d8, r0, r1
 800123e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800124a:	eeb0 1b47 	vmov.f64	d1, d7
 800124e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001252:	f00d f91d 	bl	800e490 <pow>
 8001256:	eeb0 7b40 	vmov.f64	d7, d0
 800125a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800125e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001262:	eeb4 8b47 	vcmp.f64	d8, d7
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	d103      	bne.n	8001274 <main+0x814>
					printf("\n\rMAXIMO\n\r");
 800126c:	485e      	ldr	r0, [pc, #376]	; (80013e8 <main+0x988>)
 800126e:	f003 ff87 	bl	8005180 <printf>
				} else {
					printf("\n\rNO MAX\n\r");
				}
				break;
 8001272:	e04d      	b.n	8001310 <main+0x8b0>
					printf("\n\rNO MAX\n\r");
 8001274:	485d      	ldr	r0, [pc, #372]	; (80013ec <main+0x98c>)
 8001276:	f003 ff83 	bl	8005180 <printf>
				break;
 800127a:	e049      	b.n	8001310 <main+0x8b0>
			}
			if (band == 2 && k== pow(2, numbits) - 1) {
 800127c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001280:	2b02      	cmp	r3, #2
 8001282:	d11f      	bne.n	80012c4 <main+0x864>
 8001284:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001288:	f7ff f9b8 	bl	80005fc <__aeabi_ul2d>
 800128c:	ec41 0b18 	vmov	d8, r0, r1
 8001290:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800129c:	eeb0 1b47 	vmov.f64	d1, d7
 80012a0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80012a4:	f00d f8f4 	bl	800e490 <pow>
 80012a8:	eeb0 7b40 	vmov.f64	d7, d0
 80012ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012b4:	eeb4 8b47 	vcmp.f64	d8, d7
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d102      	bne.n	80012c4 <main+0x864>
				printf("\n\rNO MAX\n\r");
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <main+0x98c>)
 80012c0:	f003 ff5e 	bl	8005180 <printf>
			}
			k++;
 80012c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80012c8:	1c51      	adds	r1, r2, #1
 80012ca:	6039      	str	r1, [r7, #0]
 80012cc:	f143 0300 	adc.w	r3, r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		while (k < pow(2, numbits)) {
 80012da:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80012de:	f7ff f98d 	bl	80005fc <__aeabi_ul2d>
 80012e2:	ec41 0b18 	vmov	d8, r0, r1
 80012e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012f2:	eeb0 1b47 	vmov.f64	d1, d7
 80012f6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80012fa:	f00d f8c9 	bl	800e490 <pow>
 80012fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001302:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	f53f ae24 	bmi.w	8000f56 <main+0x4f6>
		}
		last:
 800130e:	bf00      	nop
		printf("\n\r\n\r***************************************************************");
 8001310:	4831      	ldr	r0, [pc, #196]	; (80013d8 <main+0x978>)
 8001312:	f003 ff35 	bl	8005180 <printf>
		printf("\n\r\t*\t RESUMEN FINAL DE LA SECUENCIA \t*\n\r");
 8001316:	4836      	ldr	r0, [pc, #216]	; (80013f0 <main+0x990>)
 8001318:	f003 ff32 	bl	8005180 <printf>
		printf("***************************************************************");
 800131c:	4830      	ldr	r0, [pc, #192]	; (80013e0 <main+0x980>)
 800131e:	f003 ff2f 	bl	8005180 <printf>
		printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8001322:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001326:	4833      	ldr	r0, [pc, #204]	; (80013f4 <main+0x994>)
 8001328:	f003 ff2a 	bl	8005180 <printf>
		printf("Funcion de realimentacion: BIN ");
 800132c:	4832      	ldr	r0, [pc, #200]	; (80013f8 <main+0x998>)
 800132e:	f003 ff27 	bl	8005180 <printf>

		uint64_t usr = 0;
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		for (int i = 0; (i < numbits); i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001344:	e034      	b.n	80013b0 <main+0x950>
			usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 8001346:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800134a:	f7ff f957 	bl	80005fc <__aeabi_ul2d>
 800134e:	ec41 0b18 	vmov	d8, r0, r1
 8001352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001356:	1e5a      	subs	r2, r3, #1
 8001358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001366:	eeb0 1b47 	vmov.f64	d1, d7
 800136a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800136e:	f00d f88f 	bl	800e490 <pow>
 8001372:	eeb0 6b40 	vmov.f64	d6, d0
 8001376:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800137a:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800137e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800138e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001392:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001396:	ec51 0b17 	vmov	r0, r1, d7
 800139a:	f7ff f995 	bl	80006c8 <__aeabi_d2ulz>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		for (int i = 0; (i < numbits); i++) {
 80013a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013aa:	3301      	adds	r3, #1
 80013ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013b0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80013b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbc4      	blt.n	8001346 <main+0x8e6>
		}

		uint64_t taps = 0;
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		for (int i = 0; (i < numbits); i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013ce:	e04d      	b.n	800146c <main+0xa0c>
 80013d0:	0800efd4 	.word	0x0800efd4
 80013d4:	40020800 	.word	0x40020800
 80013d8:	0800ee54 	.word	0x0800ee54
 80013dc:	0800efdc 	.word	0x0800efdc
 80013e0:	0800eec4 	.word	0x0800eec4
 80013e4:	40020400 	.word	0x40020400
 80013e8:	0800f00c 	.word	0x0800f00c
 80013ec:	0800f018 	.word	0x0800f018
 80013f0:	0800f024 	.word	0x0800f024
 80013f4:	0800ef04 	.word	0x0800ef04
 80013f8:	0800ef38 	.word	0x0800ef38
			taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 80013fc:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001400:	f7ff f8fc 	bl	80005fc <__aeabi_ul2d>
 8001404:	ec41 0b18 	vmov	d8, r0, r1
 8001408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800141c:	eeb0 1b47 	vmov.f64	d1, d7
 8001420:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001424:	f00d f834 	bl	800e490 <pow>
 8001428:	eeb0 6b40 	vmov.f64	d6, d0
 800142c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800143c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800144a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800144e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001452:	ec51 0b17 	vmov	r0, r1, d7
 8001456:	f7ff f937 	bl	80006c8 <__aeabi_d2ulz>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		for (int i = 0; (i < numbits); i++) {
 8001462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001466:	3301      	adds	r3, #1
 8001468:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800146c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001470:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001474:	429a      	cmp	r2, r3
 8001476:	dbc1      	blt.n	80013fc <main+0x99c>

			for (int w = 0; w < numbits; w++) {
				pol[w] = aux[w];
			}
		 */
		itoa(taps, (char*) buffer_lfsr, 2);
 8001478:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800147c:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001480:	2202      	movs	r2, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fe72 	bl	800516c <itoa>
		printf("%s", buffer_lfsr);
 8001488:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800148c:	4619      	mov	r1, r3
 800148e:	4851      	ldr	r0, [pc, #324]	; (80015d4 <main+0xb74>)
 8001490:	f003 fe76 	bl	8005180 <printf>
		printf(" - HEX ");
 8001494:	4850      	ldr	r0, [pc, #320]	; (80015d8 <main+0xb78>)
 8001496:	f003 fe73 	bl	8005180 <printf>
		itoa(taps, (char*) buffer_lfsr, 16);
 800149a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800149e:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80014a2:	2210      	movs	r2, #16
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fe61 	bl	800516c <itoa>
		printf("%s", buffer_lfsr);
 80014aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4848      	ldr	r0, [pc, #288]	; (80015d4 <main+0xb74>)
 80014b2:	f003 fe65 	bl	8005180 <printf>

		printf("\n\rValor inicial - Semilla : ");
 80014b6:	4849      	ldr	r0, [pc, #292]	; (80015dc <main+0xb7c>)
 80014b8:	f003 fe62 	bl	8005180 <printf>
		itoa(usr, (char*) buffer_lfsr, 2);
 80014bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014c0:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80014c4:	2202      	movs	r2, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fe50 	bl	800516c <itoa>
		printf("%s", buffer_lfsr);
 80014cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4840      	ldr	r0, [pc, #256]	; (80015d4 <main+0xb74>)
 80014d4:	f003 fe54 	bl	8005180 <printf>
		printf(" - ");
 80014d8:	4841      	ldr	r0, [pc, #260]	; (80015e0 <main+0xb80>)
 80014da:	f003 fe51 	bl	8005180 <printf>
		itoa(usr, (char*) buffer_lfsr, 16);
 80014de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014e2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80014e6:	2210      	movs	r2, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fe3f 	bl	800516c <itoa>
		printf("%s", buffer_lfsr);
 80014ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <main+0xb74>)
 80014f6:	f003 fe43 	bl	8005180 <printf>


		printf("\n\rNumero de valores calculados en la secuencia: %llu ", k+1);
 80014fa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80014fe:	1c51      	adds	r1, r2, #1
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	f143 0300 	adc.w	r3, r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800150c:	4835      	ldr	r0, [pc, #212]	; (80015e4 <main+0xb84>)
 800150e:	f003 fe37 	bl	8005180 <printf>
		if (band == 0) {
 8001512:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001516:	2b00      	cmp	r3, #0
 8001518:	d12d      	bne.n	8001576 <main+0xb16>
			if (k == pow(2, numbits) - 2) {
 800151a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800151e:	f7ff f86d 	bl	80005fc <__aeabi_ul2d>
 8001522:	ec41 0b18 	vmov	d8, r0, r1
 8001526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001532:	eeb0 1b47 	vmov.f64	d1, d7
 8001536:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800153a:	f00c ffa9 	bl	800e490 <pow>
 800153e:	eeb0 7b40 	vmov.f64	d7, d0
 8001542:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001546:	ee37 7b46 	vsub.f64	d7, d7, d6
 800154a:	eeb4 8b47 	vcmp.f64	d8, d7
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d108      	bne.n	8001566 <main+0xb06>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2101      	movs	r1, #1
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <main+0xb88>)
 800155a:	f000 ff81 	bl	8002460 <HAL_GPIO_WritePin>
				printf("\n\rMAXIMO\n\r");
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <main+0xb8c>)
 8001560:	f003 fe0e 	bl	8005180 <printf>
 8001564:	e007      	b.n	8001576 <main+0xb16>
			} else {
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	481f      	ldr	r0, [pc, #124]	; (80015e8 <main+0xb88>)
 800156c:	f000 ff78 	bl	8002460 <HAL_GPIO_WritePin>
				printf("\n\rNO MAX\n\r");
 8001570:	481f      	ldr	r0, [pc, #124]	; (80015f0 <main+0xb90>)
 8001572:	f003 fe05 	bl	8005180 <printf>
			}
		}
		if (band == 2 && k== pow(2, numbits) - 1) {
 8001576:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800157a:	2b02      	cmp	r3, #2
 800157c:	d124      	bne.n	80015c8 <main+0xb68>
 800157e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001582:	f7ff f83b 	bl	80005fc <__aeabi_ul2d>
 8001586:	ec41 0b18 	vmov	d8, r0, r1
 800158a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001596:	eeb0 1b47 	vmov.f64	d1, d7
 800159a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800159e:	f00c ff77 	bl	800e490 <pow>
 80015a2:	eeb0 7b40 	vmov.f64	d7, d0
 80015a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015ae:	eeb4 8b47 	vcmp.f64	d8, d7
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	d107      	bne.n	80015c8 <main+0xb68>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <main+0xb88>)
 80015be:	f000 ff4f 	bl	8002460 <HAL_GPIO_WritePin>
			printf("\n\rNO MAX\n\r");
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <main+0xb90>)
 80015c4:	f003 fddc 	bl	8005180 <printf>
		}
		printf("\n\r***************************************************************\n\r");
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <main+0xb94>)
 80015ca:	f003 fdd9 	bl	8005180 <printf>
		goto init;
 80015ce:	f7ff bace 	b.w	8000b6e <main+0x10e>
 80015d2:	bf00      	nop
 80015d4:	0800edc0 	.word	0x0800edc0
 80015d8:	0800f050 	.word	0x0800f050
 80015dc:	0800ef78 	.word	0x0800ef78
 80015e0:	0800ef74 	.word	0x0800ef74
 80015e4:	0800f058 	.word	0x0800f058
 80015e8:	40020400 	.word	0x40020400
 80015ec:	0800f00c 	.word	0x0800f00c
 80015f0:	0800f018 	.word	0x0800f018
 80015f4:	0800f090 	.word	0x0800f090

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2234      	movs	r2, #52	; 0x34
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fdb2 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <SystemClock_Config+0xd8>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <SystemClock_Config+0xd8>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <SystemClock_Config+0xd8>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <SystemClock_Config+0xdc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <SystemClock_Config+0xdc>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <SystemClock_Config+0xdc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165a:	2302      	movs	r3, #2
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001664:	2304      	movs	r3, #4
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001670:	2304      	movs	r3, #4
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001674:	2302      	movs	r3, #2
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4618      	mov	r0, r3
 800167e:	f000 ff73 	bl	8002568 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001688:	f000 f90a 	bl	80018a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800168c:	f000 ff1c 	bl	80024c8 <HAL_PWREx_EnableOverDrive>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001696:	f000 f903 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169a:	230f      	movs	r3, #15
 800169c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169e:	2302      	movs	r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2103      	movs	r1, #3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fa04 	bl	8002ac4 <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016c2:	f000 f8ed 	bl	80018a0 <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3750      	adds	r7, #80	; 0x50
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_TIM2_Init+0x98>)
 80016f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_TIM2_Init+0x98>)
 8001700:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_TIM2_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_TIM2_Init+0x98>)
 800170e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_TIM2_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM2_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <MX_TIM2_Init+0x98>)
 8001722:	f002 f81d 	bl	8003760 <HAL_TIM_Base_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800172c:	f000 f8b8 	bl	80018a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4619      	mov	r1, r3
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_TIM2_Init+0x98>)
 800173e:	f002 f8d7 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001748:	f000 f8aa 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_TIM2_Init+0x98>)
 800175a:	f002 facd 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001764:	f000 f89c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200009d8 	.word	0x200009d8

08001774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_USART3_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b8:	f002 fb2c 	bl	8003e14 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f000 f86d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000a24 	.word	0x20000a24
 80017d0:	40004800 	.word	0x40004800

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <MX_GPIO_Init+0xc0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <MX_GPIO_Init+0xc0>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <MX_GPIO_Init+0xc0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_GPIO_Init+0xc0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_GPIO_Init+0xc0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001850:	f000 fe06 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 8001854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800185e:	2302      	movs	r3, #2
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <MX_GPIO_Init+0xc8>)
 800186a:	f000 fc35 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001886:	f000 fc27 	bl	80020d8 <HAL_GPIO_Init>

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <RetargetInit+0x28>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <RetargetInit+0x2c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2202      	movs	r2, #2
 80018c4:	2100      	movs	r1, #0
 80018c6:	f003 fccd 	bl	8005264 <setvbuf>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000aac 	.word	0x20000aac
 80018d8:	2000000c 	.word	0x2000000c

080018dc <_isatty>:

int _isatty(int fd) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db04      	blt.n	80018f4 <_isatty+0x18>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	dc01      	bgt.n	80018f4 <_isatty+0x18>
    return 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e005      	b.n	8001900 <_isatty+0x24>

  errno = EBADF;
 80018f4:	f003 fbf8 	bl	80050e8 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2209      	movs	r2, #9
 80018fc:	601a      	str	r2, [r3, #0]
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

int _write(int fd, char* ptr, int len) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <_write+0x18>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d111      	bne.n	8001944 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <_write+0x54>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	f002 fabf 	bl	8003eb0 <HAL_UART_Transmit>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <_write+0x38>
      return len;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e008      	b.n	8001952 <_write+0x4a>
    else
      return EIO;
 8001940:	2305      	movs	r3, #5
 8001942:	e006      	b.n	8001952 <_write+0x4a>
  }
  errno = EBADF;
 8001944:	f003 fbd0 	bl	80050e8 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	2209      	movs	r2, #9
 800194c:	601a      	str	r2, [r3, #0]
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000aac 	.word	0x20000aac

08001960 <_close>:

int _close(int fd) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db04      	blt.n	8001978 <_close+0x18>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	dc01      	bgt.n	8001978 <_close+0x18>
    return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e006      	b.n	8001986 <_close+0x26>

  errno = EBADF;
 8001978:	f003 fbb6 	bl	80050e8 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	2209      	movs	r2, #9
 8001980:	601a      	str	r2, [r3, #0]
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800199a:	f003 fba5 	bl	80050e8 <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	2209      	movs	r2, #9
 80019a2:	601a      	str	r2, [r3, #0]
  return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d110      	bne.n	80019e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <_read+0x4c>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	2201      	movs	r2, #1
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	f002 faf2 	bl	8003fb6 <HAL_UART_Receive>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <_read+0x30>
      return 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	e008      	b.n	80019f2 <_read+0x42>
    else
      return EIO;
 80019e0:	2305      	movs	r3, #5
 80019e2:	e006      	b.n	80019f2 <_read+0x42>
  }
  errno = EBADF;
 80019e4:	f003 fb80 	bl	80050e8 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2209      	movs	r2, #9
 80019ec:	601a      	str	r2, [r3, #0]
  return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000aac 	.word	0x20000aac

08001a00 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db08      	blt.n	8001a22 <_fstat+0x22>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	dc05      	bgt.n	8001a22 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
    return 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e005      	b.n	8001a2e <_fstat+0x2e>
  }

  errno = EBADF;
 8001a22:	f003 fb61 	bl	80050e8 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2209      	movs	r2, #9
 8001a2a:	601a      	str	r2, [r3, #0]
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_MspInit+0x44>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_MspInit+0x44>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_MspInit+0x44>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x44>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x44>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x44>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d10b      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_TIM_Base_MspInit+0x38>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_TIM_Base_MspInit+0x38>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_TIM_Base_MspInit+0x38>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0ae      	sub	sp, #184	; 0xb8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2290      	movs	r2, #144	; 0x90
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fb47 	bl	8005170 <memset>
  if(huart->Instance==USART3)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_UART_MspInit+0xc4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d144      	bne.n	8001b76 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fa08 	bl	8002f10 <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b06:	f7ff fecb 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_UART_MspInit+0xc8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_UART_MspInit+0xcc>)
 8001b62:	f000 fab9 	bl	80020d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2027      	movs	r0, #39	; 0x27
 8001b6c:	f000 f9eb 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b70:	2027      	movs	r0, #39	; 0x27
 8001b72:	f000 fa04 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	37b8      	adds	r7, #184	; 0xb8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004800 	.word	0x40004800
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f8ba 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USART3_IRQHandler+0x10>)
 8001be6:	f002 faab 	bl	8004140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000a24 	.word	0x20000a24

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f003 fa60 	bl	80050e8 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20080000 	.word	0x20080000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	20000ab0 	.word	0x20000ab0
 8001c5c:	20000af8 	.word	0x20000af8

08001c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca0:	4c0b      	ldr	r4, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cae:	f7ff ffd7 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f003 fa1f 	bl	80050f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7fe fed3 	bl	8000a60 <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 8001cc8:	08010e7c 	.word	0x08010e7c
  ldr r2, =_sbss
 8001ccc:	200009bc 	.word	0x200009bc
  ldr r4, =_ebss
 8001cd0:	20000af4 	.word	0x20000af4

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>

08001cd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 f928 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 f805 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce6:	f7ff fea7 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f943 	bl	8001f9a <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 f90b 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000ab4 	.word	0x20000ab4

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000ab4 	.word	0x20000ab4

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	05fa0000 	.word	0x05fa0000

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff feda 	bl	8001d78 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d008      	beq.n	8001fe4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e052      	b.n	800208a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0216 	bic.w	r2, r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <HAL_DMA_Abort+0x62>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0208 	bic.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	e013      	b.n	800205e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002036:	f7ff fe9f 	bl	8001d78 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b05      	cmp	r3, #5
 8002042:	d90c      	bls.n	800205e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e015      	b.n	800208a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e4      	bne.n	8002036 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e00c      	b.n	80020ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2205      	movs	r2, #5
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e175      	b.n	80023e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	f040 8164 	bne.w	80023de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <HAL_GPIO_Init+0x56>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d130      	bne.n	8002190 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b03      	cmp	r3, #3
 800219a:	d017      	beq.n	80021cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d123      	bne.n	8002220 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	69b9      	ldr	r1, [r7, #24]
 800221c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80be 	beq.w	80023de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800227a:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_GPIO_Init+0x328>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_GPIO_Init+0x32c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d037      	beq.n	8002316 <HAL_GPIO_Init+0x23e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_GPIO_Init+0x330>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_GPIO_Init+0x23a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a56      	ldr	r2, [pc, #344]	; (800240c <HAL_GPIO_Init+0x334>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <HAL_GPIO_Init+0x236>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a55      	ldr	r2, [pc, #340]	; (8002410 <HAL_GPIO_Init+0x338>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x232>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_GPIO_Init+0x33c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x22e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a53      	ldr	r2, [pc, #332]	; (8002418 <HAL_GPIO_Init+0x340>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x22a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_GPIO_Init+0x344>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x226>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x348>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x222>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_GPIO_Init+0x34c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x21e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x350>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022ee:	2309      	movs	r3, #9
 80022f0:	e012      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022f2:	230a      	movs	r3, #10
 80022f4:	e010      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022f6:	2308      	movs	r3, #8
 80022f8:	e00e      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022fe:	2306      	movs	r3, #6
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x240>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x240>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x328>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_GPIO_Init+0x354>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_GPIO_Init+0x354>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_GPIO_Init+0x354>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a29      	ldr	r2, [pc, #164]	; (800242c <HAL_GPIO_Init+0x354>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_GPIO_Init+0x354>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_GPIO_Init+0x354>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_GPIO_Init+0x354>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_GPIO_Init+0x354>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae86 	bls.w	80020f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40022000 	.word	0x40022000
 8002428:	40022400 	.word	0x40022400
 800242c:	40013c00 	.word	0x40013c00

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	041a      	lsls	r2, r3, #16
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	400b      	ands	r3, r1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f6:	f7ff fc3f 	bl	8001d78 <HAL_GetTick>
 80024fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024fc:	e009      	b.n	8002512 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024fe:	f7ff fc3b 	bl	8001d78 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250c:	d901      	bls.n	8002512 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e022      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251e:	d1ee      	bne.n	80024fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff fc24 	bl	8001d78 <HAL_GetTick>
 8002530:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002532:	e009      	b.n	8002548 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002534:	f7ff fc20 	bl	8001d78 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002542:	d901      	bls.n	8002548 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e007      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002554:	d1ee      	bne.n	8002534 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e29b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	d00c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002598:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d112      	bne.n	80025ca <HAL_RCC_OscConfig+0x62>
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b0:	d10b      	bne.n	80025ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d06c      	beq.n	8002698 <HAL_RCC_OscConfig+0x130>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d168      	bne.n	8002698 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e275      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x7a>
 80025d4:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a83      	ldr	r2, [pc, #524]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e02e      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x9c>
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7b      	ldr	r2, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0xc0>
 800260e:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a75      	ldr	r2, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a72      	ldr	r2, [pc, #456]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6b      	ldr	r2, [pc, #428]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fb96 	bl	8001d78 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fb92 	bl	8001d78 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e229      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff fb82 	bl	8001d78 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fb7e 	bl	8001d78 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e215      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x110>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d069      	beq.n	800277a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x190>
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1e9      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	493d      	ldr	r1, [pc, #244]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e040      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff fb34 	bl	8001d78 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7ff fb30 	bl	8001d78 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1c7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
 8002746:	e018      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff fb10 	bl	8001d78 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7ff fb0c 	bl	8001d78 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1a3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d038      	beq.n	80027f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d019      	beq.n	80027c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7ff faed 	bl	8001d78 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7ff fae9 	bl	8001d78 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e180      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x23a>
 80027c0:	e01a      	b.n	80027f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7ff fad3 	bl	8001d78 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7ff facf 	bl	8001d78 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d903      	bls.n	80027ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e166      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
 80027e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b92      	ldr	r3, [pc, #584]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a4 	beq.w	800294e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b8c      	ldr	r3, [pc, #560]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10d      	bne.n	800282e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b89      	ldr	r3, [pc, #548]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a88      	ldr	r2, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282e:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x4d4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800283a:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <HAL_RCC_OscConfig+0x4d4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7f      	ldr	r2, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x4d4>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7ff fa97 	bl	8001d78 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7ff fa93 	bl	8001d78 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b64      	cmp	r3, #100	; 0x64
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e12a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x4d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x31a>
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	e02d      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x33c>
 800288a:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a6a      	ldr	r2, [pc, #424]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
 80028a2:	e01c      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x35e>
 80028ac:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	e00b      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a5b      	ldr	r2, [pc, #364]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d015      	beq.n	8002912 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7ff fa47 	bl	8001d78 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7ff fa43 	bl	8001d78 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0d8      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ee      	beq.n	80028ee <HAL_RCC_OscConfig+0x386>
 8002910:	e014      	b.n	800293c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7ff fa31 	bl	8001d78 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7ff fa2d 	bl	8001d78 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0c2      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ee      	bne.n	800291a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80ae 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d06d      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d14b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff f9fe 	bl	8001d78 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff f9fa 	bl	8001d78 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e091      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	071b      	lsls	r3, r3, #28
 80029ca:	491b      	ldr	r1, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7ff f9cc 	bl	8001d78 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff f9c8 	bl	8001d78 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e05f      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x47c>
 8002a02:	e057      	b.n	8002ab4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff f9b2 	bl	8001d78 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff f9ae 	bl	8001d78 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e045      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4b0>
 8002a36:	e03d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x54c>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a40:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCC_OscConfig+0x558>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d030      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d129      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d122      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d119      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d0      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 020f 	bic.w	r2, r3, #15
 8002af2:	4965      	ldr	r1, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d040      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e073      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4936      	ldr	r1, [pc, #216]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7ff f8de 	bl	8001d78 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7ff f8da 	bl	8001d78 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e053      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d210      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 020f 	bic.w	r2, r3, #15
 8002bfe:	4922      	ldr	r1, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1cc>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1d0>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1d4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f83a 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	0800f0d4 	.word	0x0800f0d4
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b094      	sub	sp, #80	; 0x50
 8002ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	2300      	movs	r3, #0
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cac:	2300      	movs	r3, #0
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x40>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	f200 80e1 	bhi.w	8002e88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cce:	e0db      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd4:	e0db      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cda:	e0d8      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	0159      	lsls	r1, r3, #5
 8002d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d20:	0150      	lsls	r0, r2, #5
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4621      	mov	r1, r4
 8002d28:	1a51      	subs	r1, r2, r1
 8002d2a:	6139      	str	r1, [r7, #16]
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d40:	4659      	mov	r1, fp
 8002d42:	018b      	lsls	r3, r1, #6
 8002d44:	4651      	mov	r1, sl
 8002d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	018a      	lsls	r2, r1, #6
 8002d4e:	4651      	mov	r1, sl
 8002d50:	ebb2 0801 	subs.w	r8, r2, r1
 8002d54:	4659      	mov	r1, fp
 8002d56:	eb63 0901 	sbc.w	r9, r3, r1
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6e:	4690      	mov	r8, r2
 8002d70:	4699      	mov	r9, r3
 8002d72:	4623      	mov	r3, r4
 8002d74:	eb18 0303 	adds.w	r3, r8, r3
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	eb49 0303 	adc.w	r3, r9, r3
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	024b      	lsls	r3, r1, #9
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d98:	4621      	mov	r1, r4
 8002d9a:	024a      	lsls	r2, r1, #9
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dac:	f7fd fc5c 	bl	8000668 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	e058      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0159      	lsls	r1, r3, #5
 8002de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de6:	0150      	lsls	r0, r2, #5
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4641      	mov	r1, r8
 8002dee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e10:	eb63 050b 	sbc.w	r5, r3, fp
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	464b      	mov	r3, r9
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e56:	2200      	movs	r2, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	61fa      	str	r2, [r7, #28]
 8002e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e60:	f7fd fc02 	bl	8000668 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3750      	adds	r7, #80	; 0x50
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	0800f0e4 	.word	0x0800f0e4

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffdc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0b5b      	lsrs	r3, r3, #13
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	0800f0e4 	.word	0x0800f0e4

08002f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f38:	4b69      	ldr	r3, [pc, #420]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f42:	6093      	str	r3, [r2, #8]
 8002f44:	4b66      	ldr	r3, [pc, #408]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	4964      	ldr	r1, [pc, #400]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d017      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	4959      	ldr	r1, [pc, #356]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f88:	d101      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d017      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa6:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	494a      	ldr	r1, [pc, #296]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc4:	d101      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 808b 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8003000:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800300c:	4b35      	ldr	r3, [pc, #212]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe feae 	bl	8001d78 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe feaa 	bl	8001d78 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e38f      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d035      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d02e      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003064:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a1a      	ldr	r2, [pc, #104]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d114      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fe72 	bl	8001d78 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe fe6e 	bl	8001d78 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e351      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ee      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c6:	d111      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030d6:	400b      	ands	r3, r1
 80030d8:	4901      	ldr	r1, [pc, #4]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
 80030de:	e00b      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000
 80030e8:	0ffffcff 	.word	0x0ffffcff
 80030ec:	4bac      	ldr	r3, [pc, #688]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4aab      	ldr	r2, [pc, #684]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030f6:	6093      	str	r3, [r2, #8]
 80030f8:	4ba9      	ldr	r3, [pc, #676]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	49a6      	ldr	r1, [pc, #664]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003116:	4ba2      	ldr	r3, [pc, #648]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	4aa0      	ldr	r2, [pc, #640]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003126:	4b9e      	ldr	r3, [pc, #632]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	499b      	ldr	r1, [pc, #620]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003144:	4b96      	ldr	r3, [pc, #600]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003152:	4993      	ldr	r1, [pc, #588]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003166:	4b8e      	ldr	r3, [pc, #568]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003174:	498a      	ldr	r1, [pc, #552]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003188:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	4982      	ldr	r1, [pc, #520]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031aa:	4b7d      	ldr	r3, [pc, #500]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4979      	ldr	r1, [pc, #484]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031cc:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4971      	ldr	r1, [pc, #452]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ee:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f023 020c 	bic.w	r2, r3, #12
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	4968      	ldr	r1, [pc, #416]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003210:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4960      	ldr	r1, [pc, #384]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	4957      	ldr	r1, [pc, #348]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003254:	4b52      	ldr	r3, [pc, #328]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	494f      	ldr	r1, [pc, #316]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	4946      	ldr	r1, [pc, #280]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	493e      	ldr	r1, [pc, #248]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	4935      	ldr	r1, [pc, #212]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ea:	492d      	ldr	r1, [pc, #180]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330c:	4924      	ldr	r1, [pc, #144]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	4914      	ldr	r1, [pc, #80]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003370:	490b      	ldr	r1, [pc, #44]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	4902      	ldr	r1, [pc, #8]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800339c:	e002      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033b0:	4b8a      	ldr	r3, [pc, #552]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	4986      	ldr	r1, [pc, #536]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e4:	497d      	ldr	r1, [pc, #500]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d006      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80d6 	beq.w	80035ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003400:	4b76      	ldr	r3, [pc, #472]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a75      	ldr	r2, [pc, #468]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fe fcb4 	bl	8001d78 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003414:	f7fe fcb0 	bl	8001d78 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e195      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003426:	4b6d      	ldr	r3, [pc, #436]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d021      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003446:	4b65      	ldr	r3, [pc, #404]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003454:	4b61      	ldr	r3, [pc, #388]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345a:	0e1b      	lsrs	r3, r3, #24
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	019a      	lsls	r2, r3, #6
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	4958      	ldr	r1, [pc, #352]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ac:	d129      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034bc:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	0f1b      	lsrs	r3, r3, #28
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	019a      	lsls	r2, r3, #6
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	493e      	ldr	r1, [pc, #248]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f0:	f023 021f 	bic.w	r2, r3, #31
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	3b01      	subs	r3, #1
 80034fa:	4938      	ldr	r1, [pc, #224]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01d      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800351c:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	0f1b      	lsrs	r3, r3, #28
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	019a      	lsls	r2, r3, #6
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	4926      	ldr	r1, [pc, #152]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	019a      	lsls	r2, r3, #6
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	491a      	ldr	r1, [pc, #104]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003586:	f7fe fbf7 	bl	8001d78 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800358e:	f7fe fbf3 	bl	8001d78 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0d8      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 80ce 	bne.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fe fbda 	bl	8001d78 <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035c6:	e00b      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c8:	f7fe fbd6 	bl	8001d78 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d904      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0bb      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035e0:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ec:	d0ec      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02e      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d12a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003616:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	0f1b      	lsrs	r3, r3, #28
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	4944      	ldr	r1, [pc, #272]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003652:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d022      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003680:	d11d      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	0e1b      	lsrs	r3, r3, #24
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	0f1b      	lsrs	r3, r3, #28
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	019a      	lsls	r2, r3, #6
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	071b      	lsls	r3, r3, #28
 80036b6:	4929      	ldr	r1, [pc, #164]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d028      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	0e1b      	lsrs	r3, r3, #24
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	0c1b      	lsrs	r3, r3, #16
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	019a      	lsls	r2, r3, #6
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	4917      	ldr	r1, [pc, #92]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4911      	ldr	r1, [pc, #68]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fe fb26 	bl	8001d78 <HAL_GetTick>
 800372c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003730:	f7fe fb22 	bl	8001d78 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e007      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800374a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800374e:	d1ef      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800

08003760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e049      	b.n	8003806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe f97a 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 f970 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e04c      	b.n	80038c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <HAL_TIM_Base_Start+0xc0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003842:	d01d      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <HAL_TIM_Base_Start+0xc4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <HAL_TIM_Base_Start+0xc8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_TIM_Base_Start+0xcc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_TIM_Base_Start+0xd0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <HAL_TIM_Base_Start+0xd4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start+0x70>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIM_Base_Start+0xd8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d115      	bne.n	80038ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_TIM_Base_Start+0xdc>)
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d015      	beq.n	80038be <HAL_TIM_Base_Start+0xae>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d011      	beq.n	80038be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	e008      	b.n	80038be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40001800 	.word	0x40001800
 80038ec:	00010007 	.word	0x00010007

080038f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIM_ConfigClockSource+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e0b4      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x186>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_TIM_ConfigClockSource+0x190>)
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d03e      	beq.n	80039c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	f200 8087 	bhi.w	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	f000 8086 	beq.w	8003a62 <HAL_TIM_ConfigClockSource+0x172>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d87f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d01a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xa6>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d87b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d050      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x11a>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d877      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b50      	cmp	r3, #80	; 0x50
 800396e:	d03c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xfa>
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d873      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d058      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x13a>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d86f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b30      	cmp	r3, #48	; 0x30
 800397e:	d064      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b30      	cmp	r3, #48	; 0x30
 8003982:	d86b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d060      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d867      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d05c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b10      	cmp	r3, #16
 8003992:	d05a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	e062      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f000 f987 	bl	8003cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	609a      	str	r2, [r3, #8]
      break;
 80039c2:	e04f      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f000 f970 	bl	8003cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e6:	609a      	str	r2, [r3, #8]
      break;
 80039e8:	e03c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 f8e4 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2150      	movs	r1, #80	; 0x50
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f93d 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e02c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f000 f903 	bl	8003c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2160      	movs	r1, #96	; 0x60
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f92d 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a28:	e01c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 f8c4 	bl	8003bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f91d 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a48:	e00c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 f914 	bl	8003c82 <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e003      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	e000      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	fffeff88 	.word	0xfffeff88

08003a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3c      	ldr	r2, [pc, #240]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d027      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d023      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d017      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <TIM_Base_SetConfig+0x128>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <TIM_Base_SetConfig+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <TIM_Base_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0x134>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <TIM_Base_SetConfig+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <TIM_Base_SetConfig+0x13c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0xf8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40010400 	.word	0x40010400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40001800 	.word	0x40001800
 8003bbc:	40001c00 	.word	0x40001c00
 8003bc0:	40002000 	.word	0x40002000

08003bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 030a 	bic.w	r3, r3, #10
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b087      	sub	sp, #28
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0210 	bic.w	r2, r3, #16
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	031b      	lsls	r3, r3, #12
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f043 0307 	orr.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	021a      	lsls	r2, r3, #8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e06d      	b.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a30      	ldr	r2, [pc, #192]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d01d      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d10c      	bne.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40001800 	.word	0x40001800

08003e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e040      	b.n	8003ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fe40 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fc86 	bl	8004764 <UART_SetConfig>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e022      	b.n	8003ea8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fede 	bl	8004c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 ff65 	bl	8004d70 <UART_CheckIdleState>
 8003ea6:	4603      	mov	r3, r0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d171      	bne.n	8003fac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Transmit+0x24>
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e06a      	b.n	8003fae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2221      	movs	r2, #33	; 0x21
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee6:	f7fd ff47 	bl	8001d78 <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d108      	bne.n	8003f18 <HAL_UART_Transmit+0x68>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e003      	b.n	8003f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f20:	e02c      	b.n	8003f7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 ff6c 	bl	8004e0a <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e038      	b.n	8003fae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3302      	adds	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e007      	b.n	8003f6a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1cc      	bne.n	8003f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 ff39 	bl	8004e0a <UART_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e005      	b.n	8003fae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af02      	add	r7, sp, #8
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 80b1 	bne.w	8004134 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_Receive+0x28>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0a9      	b.n	8004136 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2222      	movs	r2, #34	; 0x22
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd febe 	bl	8001d78 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d10e      	bne.n	8004036 <HAL_UART_Receive+0x80>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_UART_Receive+0x76>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800402a:	e02d      	b.n	8004088 <HAL_UART_Receive+0xd2>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	22ff      	movs	r2, #255	; 0xff
 8004030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004034:	e028      	b.n	8004088 <HAL_UART_Receive+0xd2>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <HAL_UART_Receive+0xa4>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Receive+0x9a>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	22ff      	movs	r2, #255	; 0xff
 800404a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800404e:	e01b      	b.n	8004088 <HAL_UART_Receive+0xd2>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	227f      	movs	r2, #127	; 0x7f
 8004054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004058:	e016      	b.n	8004088 <HAL_UART_Receive+0xd2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004062:	d10d      	bne.n	8004080 <HAL_UART_Receive+0xca>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_UART_Receive+0xc0>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	227f      	movs	r2, #127	; 0x7f
 8004070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004074:	e008      	b.n	8004088 <HAL_UART_Receive+0xd2>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	223f      	movs	r2, #63	; 0x3f
 800407a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407e:	e003      	b.n	8004088 <HAL_UART_Receive+0xd2>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800408e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d108      	bne.n	80040ac <HAL_UART_Receive+0xf6>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040b4:	e032      	b.n	800411c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2120      	movs	r1, #32
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fea2 	bl	8004e0a <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e032      	b.n	8004136 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b29a      	uxth	r2, r3
 80040de:	8a7b      	ldrh	r3, [r7, #18]
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3302      	adds	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e00c      	b.n	800410a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8a7b      	ldrh	r3, [r7, #18]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	4013      	ands	r3, r2
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1c6      	bne.n	80040b6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b0ba      	sub	sp, #232	; 0xe8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800416a:	f640 030f 	movw	r3, #2063	; 0x80f
 800416e:	4013      	ands	r3, r2
 8004170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d115      	bne.n	80041a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00f      	beq.n	80041a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 82ac 	beq.w	80046f6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
      }
      return;
 80041a6:	e2a6      	b.n	80046f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8117 	beq.w	80043e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041c2:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_UART_IRQHandler+0x298>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 810a 	beq.w	80043e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <HAL_UART_IRQHandler+0xbc>
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <HAL_UART_IRQHandler+0xec>
 8004208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d011      	beq.n	800425c <HAL_UART_IRQHandler+0x11c>
 8004238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2204      	movs	r2, #4
 800424a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004278:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428e:	f043 0208 	orr.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_UART_IRQHandler+0x18a>
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00c      	beq.n	80042ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8212 	beq.w	80046fa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800431a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04f      	beq.n	80043c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fe37 	bl	8004f96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d141      	bne.n	80043ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800434c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800436e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800437a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1d9      	bne.n	8004336 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	2b00      	cmp	r3, #0
 8004388:	d013      	beq.n	80043b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <HAL_UART_IRQHandler+0x29c>)
 8004390:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd fe7b 	bl	8002092 <HAL_DMA_Abort_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043ac:	4610      	mov	r0, r2
 80043ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e00f      	b.n	80043d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9b6 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e00b      	b.n	80043d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9b2 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e007      	b.n	80043d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9ae 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80043d0:	e193      	b.n	80046fa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d2:	bf00      	nop
    return;
 80043d4:	e191      	b.n	80046fa <HAL_UART_IRQHandler+0x5ba>
 80043d6:	bf00      	nop
 80043d8:	04000120 	.word	0x04000120
 80043dc:	0800505f 	.word	0x0800505f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 814c 	bne.w	8004682 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8145 	beq.w	8004682 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 813e 	beq.w	8004682 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2210      	movs	r2, #16
 800440c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	f040 80b6 	bne.w	800458a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800442a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8165 	beq.w	80046fe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800443a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800443e:	429a      	cmp	r2, r3
 8004440:	f080 815d 	bcs.w	80046fe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800444a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004458:	f000 8086 	beq.w	8004568 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800448a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800449e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1da      	bne.n	800445c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e1      	bne.n	80044a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800450c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e3      	bne.n	80044e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004538:	f023 0310 	bic.w	r3, r3, #16
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800454a:	65bb      	str	r3, [r7, #88]	; 0x58
 800454c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e4      	bne.n	8004528 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	4618      	mov	r0, r3
 8004564:	f7fd fd25 	bl	8001fb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800457a:	b29b      	uxth	r3, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	b29b      	uxth	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8d8 	bl	8004738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004588:	e0b9      	b.n	80046fe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004596:	b29b      	uxth	r3, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80ab 	beq.w	8004702 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80045ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a6 	beq.w	8004702 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
 80045da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e4      	bne.n	80045b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	623b      	str	r3, [r7, #32]
   return(result);
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004610:	633a      	str	r2, [r7, #48]	; 0x30
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e3      	bne.n	80045ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	60fb      	str	r3, [r7, #12]
   return(result);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 0310 	bic.w	r3, r3, #16
 800464c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	617b      	str	r3, [r7, #20]
   return(result);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e4      	bne.n	8004638 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f85c 	bl	8004738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004680:	e03f      	b.n	8004702 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <HAL_UART_IRQHandler+0x56c>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f853 	bl	8004750 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046aa:	e02d      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00e      	beq.n	80046d6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01c      	beq.n	8004706 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
    }
    return;
 80046d4:	e017      	b.n	8004706 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <HAL_UART_IRQHandler+0x5c8>
 80046e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fccb 	bl	800508a <UART_EndTransmit_IT>
    return;
 80046f4:	e008      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046f6:	bf00      	nop
 80046f8:	e006      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
    return;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004706:	bf00      	nop
  }

}
 8004708:	37e8      	adds	r7, #232	; 0xe8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop

08004710 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	4ba6      	ldr	r3, [pc, #664]	; (8004a28 <UART_SetConfig+0x2c4>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	430b      	orrs	r3, r1
 800479a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a94      	ldr	r2, [pc, #592]	; (8004a2c <UART_SetConfig+0x2c8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d120      	bne.n	8004822 <UART_SetConfig+0xbe>
 80047e0:	4b93      	ldr	r3, [pc, #588]	; (8004a30 <UART_SetConfig+0x2cc>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d816      	bhi.n	800481c <UART_SetConfig+0xb8>
 80047ee:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <UART_SetConfig+0x90>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004811 	.word	0x08004811
 80047fc:	0800480b 	.word	0x0800480b
 8004800:	08004817 	.word	0x08004817
 8004804:	2301      	movs	r3, #1
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e150      	b.n	8004aac <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e14d      	b.n	8004aac <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e14a      	b.n	8004aac <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e147      	b.n	8004aac <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e144      	b.n	8004aac <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a83      	ldr	r2, [pc, #524]	; (8004a34 <UART_SetConfig+0x2d0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d132      	bne.n	8004892 <UART_SetConfig+0x12e>
 800482c:	4b80      	ldr	r3, [pc, #512]	; (8004a30 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d828      	bhi.n	800488c <UART_SetConfig+0x128>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0xdc>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004875 	.word	0x08004875
 8004844:	0800488d 	.word	0x0800488d
 8004848:	0800488d 	.word	0x0800488d
 800484c:	0800488d 	.word	0x0800488d
 8004850:	08004881 	.word	0x08004881
 8004854:	0800488d 	.word	0x0800488d
 8004858:	0800488d 	.word	0x0800488d
 800485c:	0800488d 	.word	0x0800488d
 8004860:	0800487b 	.word	0x0800487b
 8004864:	0800488d 	.word	0x0800488d
 8004868:	0800488d 	.word	0x0800488d
 800486c:	0800488d 	.word	0x0800488d
 8004870:	08004887 	.word	0x08004887
 8004874:	2300      	movs	r3, #0
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e118      	b.n	8004aac <UART_SetConfig+0x348>
 800487a:	2302      	movs	r3, #2
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e115      	b.n	8004aac <UART_SetConfig+0x348>
 8004880:	2304      	movs	r3, #4
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e112      	b.n	8004aac <UART_SetConfig+0x348>
 8004886:	2308      	movs	r3, #8
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e10f      	b.n	8004aac <UART_SetConfig+0x348>
 800488c:	2310      	movs	r3, #16
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e10c      	b.n	8004aac <UART_SetConfig+0x348>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a68      	ldr	r2, [pc, #416]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d120      	bne.n	80048de <UART_SetConfig+0x17a>
 800489c:	4b64      	ldr	r3, [pc, #400]	; (8004a30 <UART_SetConfig+0x2cc>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048a6:	2b30      	cmp	r3, #48	; 0x30
 80048a8:	d013      	beq.n	80048d2 <UART_SetConfig+0x16e>
 80048aa:	2b30      	cmp	r3, #48	; 0x30
 80048ac:	d814      	bhi.n	80048d8 <UART_SetConfig+0x174>
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d009      	beq.n	80048c6 <UART_SetConfig+0x162>
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d810      	bhi.n	80048d8 <UART_SetConfig+0x174>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <UART_SetConfig+0x15c>
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d006      	beq.n	80048cc <UART_SetConfig+0x168>
 80048be:	e00b      	b.n	80048d8 <UART_SetConfig+0x174>
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e0f2      	b.n	8004aac <UART_SetConfig+0x348>
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e0ef      	b.n	8004aac <UART_SetConfig+0x348>
 80048cc:	2304      	movs	r3, #4
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e0ec      	b.n	8004aac <UART_SetConfig+0x348>
 80048d2:	2308      	movs	r3, #8
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e0e9      	b.n	8004aac <UART_SetConfig+0x348>
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e0e6      	b.n	8004aac <UART_SetConfig+0x348>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a56      	ldr	r2, [pc, #344]	; (8004a3c <UART_SetConfig+0x2d8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d120      	bne.n	800492a <UART_SetConfig+0x1c6>
 80048e8:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <UART_SetConfig+0x2cc>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048f2:	2bc0      	cmp	r3, #192	; 0xc0
 80048f4:	d013      	beq.n	800491e <UART_SetConfig+0x1ba>
 80048f6:	2bc0      	cmp	r3, #192	; 0xc0
 80048f8:	d814      	bhi.n	8004924 <UART_SetConfig+0x1c0>
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d009      	beq.n	8004912 <UART_SetConfig+0x1ae>
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d810      	bhi.n	8004924 <UART_SetConfig+0x1c0>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <UART_SetConfig+0x1a8>
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d006      	beq.n	8004918 <UART_SetConfig+0x1b4>
 800490a:	e00b      	b.n	8004924 <UART_SetConfig+0x1c0>
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e0cc      	b.n	8004aac <UART_SetConfig+0x348>
 8004912:	2302      	movs	r3, #2
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e0c9      	b.n	8004aac <UART_SetConfig+0x348>
 8004918:	2304      	movs	r3, #4
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e0c6      	b.n	8004aac <UART_SetConfig+0x348>
 800491e:	2308      	movs	r3, #8
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e0c3      	b.n	8004aac <UART_SetConfig+0x348>
 8004924:	2310      	movs	r3, #16
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e0c0      	b.n	8004aac <UART_SetConfig+0x348>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a44      	ldr	r2, [pc, #272]	; (8004a40 <UART_SetConfig+0x2dc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d125      	bne.n	8004980 <UART_SetConfig+0x21c>
 8004934:	4b3e      	ldr	r3, [pc, #248]	; (8004a30 <UART_SetConfig+0x2cc>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004942:	d017      	beq.n	8004974 <UART_SetConfig+0x210>
 8004944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004948:	d817      	bhi.n	800497a <UART_SetConfig+0x216>
 800494a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494e:	d00b      	beq.n	8004968 <UART_SetConfig+0x204>
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d811      	bhi.n	800497a <UART_SetConfig+0x216>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <UART_SetConfig+0x1fe>
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d006      	beq.n	800496e <UART_SetConfig+0x20a>
 8004960:	e00b      	b.n	800497a <UART_SetConfig+0x216>
 8004962:	2300      	movs	r3, #0
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e0a1      	b.n	8004aac <UART_SetConfig+0x348>
 8004968:	2302      	movs	r3, #2
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e09e      	b.n	8004aac <UART_SetConfig+0x348>
 800496e:	2304      	movs	r3, #4
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e09b      	b.n	8004aac <UART_SetConfig+0x348>
 8004974:	2308      	movs	r3, #8
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e098      	b.n	8004aac <UART_SetConfig+0x348>
 800497a:	2310      	movs	r3, #16
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e095      	b.n	8004aac <UART_SetConfig+0x348>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <UART_SetConfig+0x2e0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d125      	bne.n	80049d6 <UART_SetConfig+0x272>
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <UART_SetConfig+0x2cc>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004998:	d017      	beq.n	80049ca <UART_SetConfig+0x266>
 800499a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800499e:	d817      	bhi.n	80049d0 <UART_SetConfig+0x26c>
 80049a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a4:	d00b      	beq.n	80049be <UART_SetConfig+0x25a>
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d811      	bhi.n	80049d0 <UART_SetConfig+0x26c>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <UART_SetConfig+0x254>
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b4:	d006      	beq.n	80049c4 <UART_SetConfig+0x260>
 80049b6:	e00b      	b.n	80049d0 <UART_SetConfig+0x26c>
 80049b8:	2301      	movs	r3, #1
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e076      	b.n	8004aac <UART_SetConfig+0x348>
 80049be:	2302      	movs	r3, #2
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e073      	b.n	8004aac <UART_SetConfig+0x348>
 80049c4:	2304      	movs	r3, #4
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e070      	b.n	8004aac <UART_SetConfig+0x348>
 80049ca:	2308      	movs	r3, #8
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e06d      	b.n	8004aac <UART_SetConfig+0x348>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e06a      	b.n	8004aac <UART_SetConfig+0x348>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <UART_SetConfig+0x2e4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d138      	bne.n	8004a52 <UART_SetConfig+0x2ee>
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <UART_SetConfig+0x2cc>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ee:	d017      	beq.n	8004a20 <UART_SetConfig+0x2bc>
 80049f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f4:	d82a      	bhi.n	8004a4c <UART_SetConfig+0x2e8>
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d00b      	beq.n	8004a14 <UART_SetConfig+0x2b0>
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a00:	d824      	bhi.n	8004a4c <UART_SetConfig+0x2e8>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <UART_SetConfig+0x2aa>
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0x2b6>
 8004a0c:	e01e      	b.n	8004a4c <UART_SetConfig+0x2e8>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e04b      	b.n	8004aac <UART_SetConfig+0x348>
 8004a14:	2302      	movs	r3, #2
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e048      	b.n	8004aac <UART_SetConfig+0x348>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e045      	b.n	8004aac <UART_SetConfig+0x348>
 8004a20:	2308      	movs	r3, #8
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e042      	b.n	8004aac <UART_SetConfig+0x348>
 8004a26:	bf00      	nop
 8004a28:	efff69f3 	.word	0xefff69f3
 8004a2c:	40011000 	.word	0x40011000
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40004400 	.word	0x40004400
 8004a38:	40004800 	.word	0x40004800
 8004a3c:	40004c00 	.word	0x40004c00
 8004a40:	40005000 	.word	0x40005000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	40007800 	.word	0x40007800
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e02c      	b.n	8004aac <UART_SetConfig+0x348>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a72      	ldr	r2, [pc, #456]	; (8004c20 <UART_SetConfig+0x4bc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d125      	bne.n	8004aa8 <UART_SetConfig+0x344>
 8004a5c:	4b71      	ldr	r3, [pc, #452]	; (8004c24 <UART_SetConfig+0x4c0>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a6a:	d017      	beq.n	8004a9c <UART_SetConfig+0x338>
 8004a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a70:	d817      	bhi.n	8004aa2 <UART_SetConfig+0x33e>
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	d00b      	beq.n	8004a90 <UART_SetConfig+0x32c>
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d811      	bhi.n	8004aa2 <UART_SetConfig+0x33e>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <UART_SetConfig+0x326>
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a86:	d006      	beq.n	8004a96 <UART_SetConfig+0x332>
 8004a88:	e00b      	b.n	8004aa2 <UART_SetConfig+0x33e>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e00d      	b.n	8004aac <UART_SetConfig+0x348>
 8004a90:	2302      	movs	r3, #2
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e00a      	b.n	8004aac <UART_SetConfig+0x348>
 8004a96:	2304      	movs	r3, #4
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e007      	b.n	8004aac <UART_SetConfig+0x348>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e004      	b.n	8004aac <UART_SetConfig+0x348>
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e001      	b.n	8004aac <UART_SetConfig+0x348>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	d15b      	bne.n	8004b6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ab6:	7ffb      	ldrb	r3, [r7, #31]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d828      	bhi.n	8004b0e <UART_SetConfig+0x3aa>
 8004abc:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <UART_SetConfig+0x360>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b0f 	.word	0x08004b0f
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe f9ea 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8004aec:	61b8      	str	r0, [r7, #24]
        break;
 8004aee:	e013      	b.n	8004b18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe f9fa 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8004af4:	61b8      	str	r0, [r7, #24]
        break;
 8004af6:	e00f      	b.n	8004b18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <UART_SetConfig+0x4c4>)
 8004afa:	61bb      	str	r3, [r7, #24]
        break;
 8004afc:	e00c      	b.n	8004b18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe f8cd 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004b02:	61b8      	str	r0, [r7, #24]
        break;
 8004b04:	e008      	b.n	8004b18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e004      	b.n	8004b18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	77bb      	strb	r3, [r7, #30]
        break;
 8004b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d074      	beq.n	8004c08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	441a      	add	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d916      	bls.n	8004b68 <UART_SetConfig+0x404>
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d212      	bcs.n	8004b68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f023 030f 	bic.w	r3, r3, #15
 8004b4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	89fb      	ldrh	r3, [r7, #14]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	89fa      	ldrh	r2, [r7, #14]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e04f      	b.n	8004c08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77bb      	strb	r3, [r7, #30]
 8004b6c:	e04c      	b.n	8004c08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d828      	bhi.n	8004bc6 <UART_SetConfig+0x462>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x418>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe f98e 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61b8      	str	r0, [r7, #24]
        break;
 8004ba6:	e013      	b.n	8004bd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe f99e 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8004bac:	61b8      	str	r0, [r7, #24]
        break;
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <UART_SetConfig+0x4c4>)
 8004bb2:	61bb      	str	r3, [r7, #24]
        break;
 8004bb4:	e00c      	b.n	8004bd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe f871 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004bba:	61b8      	str	r0, [r7, #24]
        break;
 8004bbc:	e008      	b.n	8004bd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e004      	b.n	8004bd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bce:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085a      	lsrs	r2, r3, #1
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d909      	bls.n	8004c04 <UART_SetConfig+0x4a0>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf6:	d205      	bcs.n	8004c04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e001      	b.n	8004c08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40007c00 	.word	0x40007c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400

08004c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d10a      	bne.n	8004d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc fffa 	bl	8001d78 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10e      	bne.n	8004db2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f831 	bl	8004e0a <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e027      	b.n	8004e02 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d10e      	bne.n	8004dde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f81b 	bl	8004e0a <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e011      	b.n	8004e02 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b09c      	sub	sp, #112	; 0x70
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1a:	e0a7      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	f000 80a3 	beq.w	8004f6c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fc ffa7 	bl	8001d78 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d13f      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e50:	667b      	str	r3, [r7, #100]	; 0x64
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	663b      	str	r3, [r7, #96]	; 0x60
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e068      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d050      	beq.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed8:	d148      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e6      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	613b      	str	r3, [r7, #16]
   return(result);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f36:	623a      	str	r2, [r7, #32]
 8004f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e010      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f43f af48 	beq.w	8004e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3770      	adds	r7, #112	; 0x70
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b095      	sub	sp, #84	; 0x54
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	2b01      	cmp	r3, #1
 800500a:	d118      	bne.n	800503e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	60bb      	str	r3, [r7, #8]
   return(result);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	647b      	str	r3, [r7, #68]	; 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	613b      	str	r3, [r7, #16]
   return(result);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e6      	bne.n	800500c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005052:	bf00      	nop
 8005054:	3754      	adds	r7, #84	; 0x54
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff fb51 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6979      	ldr	r1, [r7, #20]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	613b      	str	r3, [r7, #16]
   return(result);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fb1d 	bl	8004710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d6:	bf00      	nop
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <atoi>:
 80050de:	220a      	movs	r2, #10
 80050e0:	2100      	movs	r1, #0
 80050e2:	f000 b9f9 	b.w	80054d8 <strtol>
	...

080050e8 <__errno>:
 80050e8:	4b01      	ldr	r3, [pc, #4]	; (80050f0 <__errno+0x8>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2000000c 	.word	0x2000000c

080050f4 <__libc_init_array>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4d0d      	ldr	r5, [pc, #52]	; (800512c <__libc_init_array+0x38>)
 80050f8:	4c0d      	ldr	r4, [pc, #52]	; (8005130 <__libc_init_array+0x3c>)
 80050fa:	1b64      	subs	r4, r4, r5
 80050fc:	10a4      	asrs	r4, r4, #2
 80050fe:	2600      	movs	r6, #0
 8005100:	42a6      	cmp	r6, r4
 8005102:	d109      	bne.n	8005118 <__libc_init_array+0x24>
 8005104:	4d0b      	ldr	r5, [pc, #44]	; (8005134 <__libc_init_array+0x40>)
 8005106:	4c0c      	ldr	r4, [pc, #48]	; (8005138 <__libc_init_array+0x44>)
 8005108:	f009 fc98 	bl	800ea3c <_init>
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	2600      	movs	r6, #0
 8005112:	42a6      	cmp	r6, r4
 8005114:	d105      	bne.n	8005122 <__libc_init_array+0x2e>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f855 3b04 	ldr.w	r3, [r5], #4
 800511c:	4798      	blx	r3
 800511e:	3601      	adds	r6, #1
 8005120:	e7ee      	b.n	8005100 <__libc_init_array+0xc>
 8005122:	f855 3b04 	ldr.w	r3, [r5], #4
 8005126:	4798      	blx	r3
 8005128:	3601      	adds	r6, #1
 800512a:	e7f2      	b.n	8005112 <__libc_init_array+0x1e>
 800512c:	08010e70 	.word	0x08010e70
 8005130:	08010e70 	.word	0x08010e70
 8005134:	08010e70 	.word	0x08010e70
 8005138:	08010e78 	.word	0x08010e78

0800513c <__itoa>:
 800513c:	1e93      	subs	r3, r2, #2
 800513e:	2b22      	cmp	r3, #34	; 0x22
 8005140:	b510      	push	{r4, lr}
 8005142:	460c      	mov	r4, r1
 8005144:	d904      	bls.n	8005150 <__itoa+0x14>
 8005146:	2300      	movs	r3, #0
 8005148:	700b      	strb	r3, [r1, #0]
 800514a:	461c      	mov	r4, r3
 800514c:	4620      	mov	r0, r4
 800514e:	bd10      	pop	{r4, pc}
 8005150:	2a0a      	cmp	r2, #10
 8005152:	d109      	bne.n	8005168 <__itoa+0x2c>
 8005154:	2800      	cmp	r0, #0
 8005156:	da07      	bge.n	8005168 <__itoa+0x2c>
 8005158:	232d      	movs	r3, #45	; 0x2d
 800515a:	700b      	strb	r3, [r1, #0]
 800515c:	4240      	negs	r0, r0
 800515e:	2101      	movs	r1, #1
 8005160:	4421      	add	r1, r4
 8005162:	f000 f9c3 	bl	80054ec <__utoa>
 8005166:	e7f1      	b.n	800514c <__itoa+0x10>
 8005168:	2100      	movs	r1, #0
 800516a:	e7f9      	b.n	8005160 <__itoa+0x24>

0800516c <itoa>:
 800516c:	f7ff bfe6 	b.w	800513c <__itoa>

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <printf>:
 8005180:	b40f      	push	{r0, r1, r2, r3}
 8005182:	b507      	push	{r0, r1, r2, lr}
 8005184:	4906      	ldr	r1, [pc, #24]	; (80051a0 <printf+0x20>)
 8005186:	ab04      	add	r3, sp, #16
 8005188:	6808      	ldr	r0, [r1, #0]
 800518a:	f853 2b04 	ldr.w	r2, [r3], #4
 800518e:	6881      	ldr	r1, [r0, #8]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	f000 f9ed 	bl	8005570 <_vfprintf_r>
 8005196:	b003      	add	sp, #12
 8005198:	f85d eb04 	ldr.w	lr, [sp], #4
 800519c:	b004      	add	sp, #16
 800519e:	4770      	bx	lr
 80051a0:	2000000c 	.word	0x2000000c

080051a4 <_puts_r>:
 80051a4:	b530      	push	{r4, r5, lr}
 80051a6:	4605      	mov	r5, r0
 80051a8:	b089      	sub	sp, #36	; 0x24
 80051aa:	4608      	mov	r0, r1
 80051ac:	460c      	mov	r4, r1
 80051ae:	f7fb f847 	bl	8000240 <strlen>
 80051b2:	4b1e      	ldr	r3, [pc, #120]	; (800522c <_puts_r+0x88>)
 80051b4:	9306      	str	r3, [sp, #24]
 80051b6:	2301      	movs	r3, #1
 80051b8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	4418      	add	r0, r3
 80051c0:	ab04      	add	r3, sp, #16
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	2302      	movs	r3, #2
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80051ca:	68ac      	ldr	r4, [r5, #8]
 80051cc:	9003      	str	r0, [sp, #12]
 80051ce:	b913      	cbnz	r3, 80051d6 <_puts_r+0x32>
 80051d0:	4628      	mov	r0, r5
 80051d2:	f003 fd4f 	bl	8008c74 <__sinit>
 80051d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d8:	07db      	lsls	r3, r3, #31
 80051da:	d405      	bmi.n	80051e8 <_puts_r+0x44>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	0598      	lsls	r0, r3, #22
 80051e0:	d402      	bmi.n	80051e8 <_puts_r+0x44>
 80051e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051e4:	f004 f89e 	bl	8009324 <__retarget_lock_acquire_recursive>
 80051e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ec:	0499      	lsls	r1, r3, #18
 80051ee:	d406      	bmi.n	80051fe <_puts_r+0x5a>
 80051f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fc:	6663      	str	r3, [r4, #100]	; 0x64
 80051fe:	4628      	mov	r0, r5
 8005200:	aa01      	add	r2, sp, #4
 8005202:	4621      	mov	r1, r4
 8005204:	f003 feee 	bl	8008fe4 <__sfvwrite_r>
 8005208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800520a:	2800      	cmp	r0, #0
 800520c:	bf14      	ite	ne
 800520e:	f04f 35ff 	movne.w	r5, #4294967295
 8005212:	250a      	moveq	r5, #10
 8005214:	07da      	lsls	r2, r3, #31
 8005216:	d405      	bmi.n	8005224 <_puts_r+0x80>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	059b      	lsls	r3, r3, #22
 800521c:	d402      	bmi.n	8005224 <_puts_r+0x80>
 800521e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005220:	f004 f881 	bl	8009326 <__retarget_lock_release_recursive>
 8005224:	4628      	mov	r0, r5
 8005226:	b009      	add	sp, #36	; 0x24
 8005228:	bd30      	pop	{r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	0800f53a 	.word	0x0800f53a

08005230 <puts>:
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <puts+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f7ff bfb5 	b.w	80051a4 <_puts_r>
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c

08005240 <scanf>:
 8005240:	b40f      	push	{r0, r1, r2, r3}
 8005242:	b507      	push	{r0, r1, r2, lr}
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <scanf+0x20>)
 8005246:	ab04      	add	r3, sp, #16
 8005248:	6808      	ldr	r0, [r1, #0]
 800524a:	f853 2b04 	ldr.w	r2, [r3], #4
 800524e:	6841      	ldr	r1, [r0, #4]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	f002 fda3 	bl	8007d9c <_vfscanf_r>
 8005256:	b003      	add	sp, #12
 8005258:	f85d eb04 	ldr.w	lr, [sp], #4
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	2000000c 	.word	0x2000000c

08005264 <setvbuf>:
 8005264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005268:	461d      	mov	r5, r3
 800526a:	4b58      	ldr	r3, [pc, #352]	; (80053cc <setvbuf+0x168>)
 800526c:	681f      	ldr	r7, [r3, #0]
 800526e:	4604      	mov	r4, r0
 8005270:	460e      	mov	r6, r1
 8005272:	4690      	mov	r8, r2
 8005274:	b127      	cbz	r7, 8005280 <setvbuf+0x1c>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	b913      	cbnz	r3, 8005280 <setvbuf+0x1c>
 800527a:	4638      	mov	r0, r7
 800527c:	f003 fcfa 	bl	8008c74 <__sinit>
 8005280:	f1b8 0f02 	cmp.w	r8, #2
 8005284:	d006      	beq.n	8005294 <setvbuf+0x30>
 8005286:	f1b8 0f01 	cmp.w	r8, #1
 800528a:	f200 809a 	bhi.w	80053c2 <setvbuf+0x15e>
 800528e:	2d00      	cmp	r5, #0
 8005290:	f2c0 8097 	blt.w	80053c2 <setvbuf+0x15e>
 8005294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	d405      	bmi.n	80052a6 <setvbuf+0x42>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	0598      	lsls	r0, r3, #22
 800529e:	d402      	bmi.n	80052a6 <setvbuf+0x42>
 80052a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a2:	f004 f83f 	bl	8009324 <__retarget_lock_acquire_recursive>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4638      	mov	r0, r7
 80052aa:	f003 fc65 	bl	8008b78 <_fflush_r>
 80052ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052b0:	b141      	cbz	r1, 80052c4 <setvbuf+0x60>
 80052b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d002      	beq.n	80052c0 <setvbuf+0x5c>
 80052ba:	4638      	mov	r0, r7
 80052bc:	f003 fdd2 	bl	8008e64 <_free_r>
 80052c0:	2300      	movs	r3, #0
 80052c2:	6323      	str	r3, [r4, #48]	; 0x30
 80052c4:	2300      	movs	r3, #0
 80052c6:	61a3      	str	r3, [r4, #24]
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	0619      	lsls	r1, r3, #24
 80052ce:	d503      	bpl.n	80052d8 <setvbuf+0x74>
 80052d0:	6921      	ldr	r1, [r4, #16]
 80052d2:	4638      	mov	r0, r7
 80052d4:	f003 fdc6 	bl	8008e64 <_free_r>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	f1b8 0f02 	cmp.w	r8, #2
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	d067      	beq.n	80053ba <setvbuf+0x156>
 80052ea:	ab01      	add	r3, sp, #4
 80052ec:	466a      	mov	r2, sp
 80052ee:	4621      	mov	r1, r4
 80052f0:	4638      	mov	r0, r7
 80052f2:	f004 f819 	bl	8009328 <__swhatbuf_r>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	4318      	orrs	r0, r3
 80052fa:	81a0      	strh	r0, [r4, #12]
 80052fc:	bb35      	cbnz	r5, 800534c <setvbuf+0xe8>
 80052fe:	9d00      	ldr	r5, [sp, #0]
 8005300:	4628      	mov	r0, r5
 8005302:	f004 f87d 	bl	8009400 <malloc>
 8005306:	4606      	mov	r6, r0
 8005308:	2800      	cmp	r0, #0
 800530a:	d151      	bne.n	80053b0 <setvbuf+0x14c>
 800530c:	f8dd 9000 	ldr.w	r9, [sp]
 8005310:	45a9      	cmp	r9, r5
 8005312:	d146      	bne.n	80053a2 <setvbuf+0x13e>
 8005314:	f04f 35ff 	mov.w	r5, #4294967295
 8005318:	2200      	movs	r2, #0
 800531a:	60a2      	str	r2, [r4, #8]
 800531c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005320:	6022      	str	r2, [r4, #0]
 8005322:	6122      	str	r2, [r4, #16]
 8005324:	2201      	movs	r2, #1
 8005326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532a:	6162      	str	r2, [r4, #20]
 800532c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	07d2      	lsls	r2, r2, #31
 8005334:	81a3      	strh	r3, [r4, #12]
 8005336:	d405      	bmi.n	8005344 <setvbuf+0xe0>
 8005338:	f413 7f00 	tst.w	r3, #512	; 0x200
 800533c:	d102      	bne.n	8005344 <setvbuf+0xe0>
 800533e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005340:	f003 fff1 	bl	8009326 <__retarget_lock_release_recursive>
 8005344:	4628      	mov	r0, r5
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800534c:	2e00      	cmp	r6, #0
 800534e:	d0d7      	beq.n	8005300 <setvbuf+0x9c>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	b913      	cbnz	r3, 800535a <setvbuf+0xf6>
 8005354:	4638      	mov	r0, r7
 8005356:	f003 fc8d 	bl	8008c74 <__sinit>
 800535a:	9b00      	ldr	r3, [sp, #0]
 800535c:	6026      	str	r6, [r4, #0]
 800535e:	42ab      	cmp	r3, r5
 8005360:	bf1e      	ittt	ne
 8005362:	89a3      	ldrhne	r3, [r4, #12]
 8005364:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8005368:	81a3      	strhne	r3, [r4, #12]
 800536a:	f1b8 0f01 	cmp.w	r8, #1
 800536e:	bf02      	ittt	eq
 8005370:	89a3      	ldrheq	r3, [r4, #12]
 8005372:	f043 0301 	orreq.w	r3, r3, #1
 8005376:	81a3      	strheq	r3, [r4, #12]
 8005378:	89a2      	ldrh	r2, [r4, #12]
 800537a:	f012 0308 	ands.w	r3, r2, #8
 800537e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005382:	d01c      	beq.n	80053be <setvbuf+0x15a>
 8005384:	07d3      	lsls	r3, r2, #31
 8005386:	bf41      	itttt	mi
 8005388:	2300      	movmi	r3, #0
 800538a:	426d      	negmi	r5, r5
 800538c:	60a3      	strmi	r3, [r4, #8]
 800538e:	61a5      	strmi	r5, [r4, #24]
 8005390:	bf58      	it	pl
 8005392:	60a5      	strpl	r5, [r4, #8]
 8005394:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005396:	f015 0501 	ands.w	r5, r5, #1
 800539a:	d115      	bne.n	80053c8 <setvbuf+0x164>
 800539c:	f412 7f00 	tst.w	r2, #512	; 0x200
 80053a0:	e7cc      	b.n	800533c <setvbuf+0xd8>
 80053a2:	4648      	mov	r0, r9
 80053a4:	f004 f82c 	bl	8009400 <malloc>
 80053a8:	4606      	mov	r6, r0
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0b2      	beq.n	8005314 <setvbuf+0xb0>
 80053ae:	464d      	mov	r5, r9
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	e7ca      	b.n	8005350 <setvbuf+0xec>
 80053ba:	2500      	movs	r5, #0
 80053bc:	e7ac      	b.n	8005318 <setvbuf+0xb4>
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	e7e8      	b.n	8005394 <setvbuf+0x130>
 80053c2:	f04f 35ff 	mov.w	r5, #4294967295
 80053c6:	e7bd      	b.n	8005344 <setvbuf+0xe0>
 80053c8:	2500      	movs	r5, #0
 80053ca:	e7bb      	b.n	8005344 <setvbuf+0xe0>
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <_strtol_l.constprop.0>:
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d6:	d001      	beq.n	80053dc <_strtol_l.constprop.0+0xc>
 80053d8:	2b24      	cmp	r3, #36	; 0x24
 80053da:	d906      	bls.n	80053ea <_strtol_l.constprop.0+0x1a>
 80053dc:	f7ff fe84 	bl	80050e8 <__errno>
 80053e0:	2316      	movs	r3, #22
 80053e2:	6003      	str	r3, [r0, #0]
 80053e4:	2000      	movs	r0, #0
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80054d0 <_strtol_l.constprop.0+0x100>
 80053ee:	460d      	mov	r5, r1
 80053f0:	462e      	mov	r6, r5
 80053f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80053fa:	f017 0708 	ands.w	r7, r7, #8
 80053fe:	d1f7      	bne.n	80053f0 <_strtol_l.constprop.0+0x20>
 8005400:	2c2d      	cmp	r4, #45	; 0x2d
 8005402:	d132      	bne.n	800546a <_strtol_l.constprop.0+0x9a>
 8005404:	782c      	ldrb	r4, [r5, #0]
 8005406:	2701      	movs	r7, #1
 8005408:	1cb5      	adds	r5, r6, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d05b      	beq.n	80054c6 <_strtol_l.constprop.0+0xf6>
 800540e:	2b10      	cmp	r3, #16
 8005410:	d109      	bne.n	8005426 <_strtol_l.constprop.0+0x56>
 8005412:	2c30      	cmp	r4, #48	; 0x30
 8005414:	d107      	bne.n	8005426 <_strtol_l.constprop.0+0x56>
 8005416:	782c      	ldrb	r4, [r5, #0]
 8005418:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800541c:	2c58      	cmp	r4, #88	; 0x58
 800541e:	d14d      	bne.n	80054bc <_strtol_l.constprop.0+0xec>
 8005420:	786c      	ldrb	r4, [r5, #1]
 8005422:	2310      	movs	r3, #16
 8005424:	3502      	adds	r5, #2
 8005426:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800542a:	f108 38ff 	add.w	r8, r8, #4294967295
 800542e:	f04f 0c00 	mov.w	ip, #0
 8005432:	fbb8 f9f3 	udiv	r9, r8, r3
 8005436:	4666      	mov	r6, ip
 8005438:	fb03 8a19 	mls	sl, r3, r9, r8
 800543c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005440:	f1be 0f09 	cmp.w	lr, #9
 8005444:	d816      	bhi.n	8005474 <_strtol_l.constprop.0+0xa4>
 8005446:	4674      	mov	r4, lr
 8005448:	42a3      	cmp	r3, r4
 800544a:	dd24      	ble.n	8005496 <_strtol_l.constprop.0+0xc6>
 800544c:	f1bc 0f00 	cmp.w	ip, #0
 8005450:	db1e      	blt.n	8005490 <_strtol_l.constprop.0+0xc0>
 8005452:	45b1      	cmp	r9, r6
 8005454:	d31c      	bcc.n	8005490 <_strtol_l.constprop.0+0xc0>
 8005456:	d101      	bne.n	800545c <_strtol_l.constprop.0+0x8c>
 8005458:	45a2      	cmp	sl, r4
 800545a:	db19      	blt.n	8005490 <_strtol_l.constprop.0+0xc0>
 800545c:	fb06 4603 	mla	r6, r6, r3, r4
 8005460:	f04f 0c01 	mov.w	ip, #1
 8005464:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005468:	e7e8      	b.n	800543c <_strtol_l.constprop.0+0x6c>
 800546a:	2c2b      	cmp	r4, #43	; 0x2b
 800546c:	bf04      	itt	eq
 800546e:	782c      	ldrbeq	r4, [r5, #0]
 8005470:	1cb5      	addeq	r5, r6, #2
 8005472:	e7ca      	b.n	800540a <_strtol_l.constprop.0+0x3a>
 8005474:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005478:	f1be 0f19 	cmp.w	lr, #25
 800547c:	d801      	bhi.n	8005482 <_strtol_l.constprop.0+0xb2>
 800547e:	3c37      	subs	r4, #55	; 0x37
 8005480:	e7e2      	b.n	8005448 <_strtol_l.constprop.0+0x78>
 8005482:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005486:	f1be 0f19 	cmp.w	lr, #25
 800548a:	d804      	bhi.n	8005496 <_strtol_l.constprop.0+0xc6>
 800548c:	3c57      	subs	r4, #87	; 0x57
 800548e:	e7db      	b.n	8005448 <_strtol_l.constprop.0+0x78>
 8005490:	f04f 3cff 	mov.w	ip, #4294967295
 8005494:	e7e6      	b.n	8005464 <_strtol_l.constprop.0+0x94>
 8005496:	f1bc 0f00 	cmp.w	ip, #0
 800549a:	da05      	bge.n	80054a8 <_strtol_l.constprop.0+0xd8>
 800549c:	2322      	movs	r3, #34	; 0x22
 800549e:	6003      	str	r3, [r0, #0]
 80054a0:	4646      	mov	r6, r8
 80054a2:	b942      	cbnz	r2, 80054b6 <_strtol_l.constprop.0+0xe6>
 80054a4:	4630      	mov	r0, r6
 80054a6:	e79e      	b.n	80053e6 <_strtol_l.constprop.0+0x16>
 80054a8:	b107      	cbz	r7, 80054ac <_strtol_l.constprop.0+0xdc>
 80054aa:	4276      	negs	r6, r6
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	d0f9      	beq.n	80054a4 <_strtol_l.constprop.0+0xd4>
 80054b0:	f1bc 0f00 	cmp.w	ip, #0
 80054b4:	d000      	beq.n	80054b8 <_strtol_l.constprop.0+0xe8>
 80054b6:	1e69      	subs	r1, r5, #1
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	e7f3      	b.n	80054a4 <_strtol_l.constprop.0+0xd4>
 80054bc:	2430      	movs	r4, #48	; 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1b1      	bne.n	8005426 <_strtol_l.constprop.0+0x56>
 80054c2:	2308      	movs	r3, #8
 80054c4:	e7af      	b.n	8005426 <_strtol_l.constprop.0+0x56>
 80054c6:	2c30      	cmp	r4, #48	; 0x30
 80054c8:	d0a5      	beq.n	8005416 <_strtol_l.constprop.0+0x46>
 80054ca:	230a      	movs	r3, #10
 80054cc:	e7ab      	b.n	8005426 <_strtol_l.constprop.0+0x56>
 80054ce:	bf00      	nop
 80054d0:	0800f191 	.word	0x0800f191

080054d4 <_strtol_r>:
 80054d4:	f7ff bf7c 	b.w	80053d0 <_strtol_l.constprop.0>

080054d8 <strtol>:
 80054d8:	4613      	mov	r3, r2
 80054da:	460a      	mov	r2, r1
 80054dc:	4601      	mov	r1, r0
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <strtol+0x10>)
 80054e0:	6800      	ldr	r0, [r0, #0]
 80054e2:	f7ff bf75 	b.w	80053d0 <_strtol_l.constprop.0>
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <__utoa>:
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	4c1f      	ldr	r4, [pc, #124]	; (800556c <__utoa+0x80>)
 80054f0:	b08b      	sub	sp, #44	; 0x2c
 80054f2:	4605      	mov	r5, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	466e      	mov	r6, sp
 80054f8:	f104 0c20 	add.w	ip, r4, #32
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	6861      	ldr	r1, [r4, #4]
 8005500:	4637      	mov	r7, r6
 8005502:	c703      	stmia	r7!, {r0, r1}
 8005504:	3408      	adds	r4, #8
 8005506:	4564      	cmp	r4, ip
 8005508:	463e      	mov	r6, r7
 800550a:	d1f7      	bne.n	80054fc <__utoa+0x10>
 800550c:	7921      	ldrb	r1, [r4, #4]
 800550e:	7139      	strb	r1, [r7, #4]
 8005510:	1e91      	subs	r1, r2, #2
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	6038      	str	r0, [r7, #0]
 8005516:	2922      	cmp	r1, #34	; 0x22
 8005518:	f04f 0100 	mov.w	r1, #0
 800551c:	d904      	bls.n	8005528 <__utoa+0x3c>
 800551e:	7019      	strb	r1, [r3, #0]
 8005520:	460b      	mov	r3, r1
 8005522:	4618      	mov	r0, r3
 8005524:	b00b      	add	sp, #44	; 0x2c
 8005526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005528:	1e58      	subs	r0, r3, #1
 800552a:	4684      	mov	ip, r0
 800552c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005530:	fb02 5617 	mls	r6, r2, r7, r5
 8005534:	3628      	adds	r6, #40	; 0x28
 8005536:	446e      	add	r6, sp
 8005538:	460c      	mov	r4, r1
 800553a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800553e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005542:	462e      	mov	r6, r5
 8005544:	42b2      	cmp	r2, r6
 8005546:	f101 0101 	add.w	r1, r1, #1
 800554a:	463d      	mov	r5, r7
 800554c:	d9ee      	bls.n	800552c <__utoa+0x40>
 800554e:	2200      	movs	r2, #0
 8005550:	545a      	strb	r2, [r3, r1]
 8005552:	1919      	adds	r1, r3, r4
 8005554:	1aa5      	subs	r5, r4, r2
 8005556:	42aa      	cmp	r2, r5
 8005558:	dae3      	bge.n	8005522 <__utoa+0x36>
 800555a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800555e:	780e      	ldrb	r6, [r1, #0]
 8005560:	7006      	strb	r6, [r0, #0]
 8005562:	3201      	adds	r2, #1
 8005564:	f801 5901 	strb.w	r5, [r1], #-1
 8005568:	e7f4      	b.n	8005554 <__utoa+0x68>
 800556a:	bf00      	nop
 800556c:	0800f0f0 	.word	0x0800f0f0

08005570 <_vfprintf_r>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	ed2d 8b04 	vpush	{d8-d9}
 8005578:	b0cb      	sub	sp, #300	; 0x12c
 800557a:	460d      	mov	r5, r1
 800557c:	4692      	mov	sl, r2
 800557e:	461c      	mov	r4, r3
 8005580:	4698      	mov	r8, r3
 8005582:	4606      	mov	r6, r0
 8005584:	f003 fec8 	bl	8009318 <_localeconv_r>
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	930f      	str	r3, [sp, #60]	; 0x3c
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa fe57 	bl	8000240 <strlen>
 8005592:	900a      	str	r0, [sp, #40]	; 0x28
 8005594:	b126      	cbz	r6, 80055a0 <_vfprintf_r+0x30>
 8005596:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005598:	b913      	cbnz	r3, 80055a0 <_vfprintf_r+0x30>
 800559a:	4630      	mov	r0, r6
 800559c:	f003 fb6a 	bl	8008c74 <__sinit>
 80055a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a2:	07d8      	lsls	r0, r3, #31
 80055a4:	d405      	bmi.n	80055b2 <_vfprintf_r+0x42>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	0599      	lsls	r1, r3, #22
 80055aa:	d402      	bmi.n	80055b2 <_vfprintf_r+0x42>
 80055ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ae:	f003 feb9 	bl	8009324 <__retarget_lock_acquire_recursive>
 80055b2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80055b6:	049a      	lsls	r2, r3, #18
 80055b8:	d406      	bmi.n	80055c8 <_vfprintf_r+0x58>
 80055ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055be:	81ab      	strh	r3, [r5, #12]
 80055c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c6:	666b      	str	r3, [r5, #100]	; 0x64
 80055c8:	89ab      	ldrh	r3, [r5, #12]
 80055ca:	071f      	lsls	r7, r3, #28
 80055cc:	d501      	bpl.n	80055d2 <_vfprintf_r+0x62>
 80055ce:	692b      	ldr	r3, [r5, #16]
 80055d0:	b9bb      	cbnz	r3, 8005602 <_vfprintf_r+0x92>
 80055d2:	4629      	mov	r1, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	f002 fbf5 	bl	8007dc4 <__swsetup_r>
 80055da:	b190      	cbz	r0, 8005602 <_vfprintf_r+0x92>
 80055dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055de:	07dc      	lsls	r4, r3, #31
 80055e0:	d508      	bpl.n	80055f4 <_vfprintf_r+0x84>
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80055ea:	b04b      	add	sp, #300	; 0x12c
 80055ec:	ecbd 8b04 	vpop	{d8-d9}
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	89ab      	ldrh	r3, [r5, #12]
 80055f6:	0598      	lsls	r0, r3, #22
 80055f8:	d4f3      	bmi.n	80055e2 <_vfprintf_r+0x72>
 80055fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fc:	f003 fe93 	bl	8009326 <__retarget_lock_release_recursive>
 8005600:	e7ef      	b.n	80055e2 <_vfprintf_r+0x72>
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	f003 021a 	and.w	r2, r3, #26
 8005608:	2a0a      	cmp	r2, #10
 800560a:	d116      	bne.n	800563a <_vfprintf_r+0xca>
 800560c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8005610:	2a00      	cmp	r2, #0
 8005612:	db12      	blt.n	800563a <_vfprintf_r+0xca>
 8005614:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8005616:	07d1      	lsls	r1, r2, #31
 8005618:	d404      	bmi.n	8005624 <_vfprintf_r+0xb4>
 800561a:	059a      	lsls	r2, r3, #22
 800561c:	d402      	bmi.n	8005624 <_vfprintf_r+0xb4>
 800561e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005620:	f003 fe81 	bl	8009326 <__retarget_lock_release_recursive>
 8005624:	4623      	mov	r3, r4
 8005626:	4652      	mov	r2, sl
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	b04b      	add	sp, #300	; 0x12c
 800562e:	ecbd 8b04 	vpop	{d8-d9}
 8005632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f001 b9bf 	b.w	80069b8 <__sbprintf>
 800563a:	2300      	movs	r3, #0
 800563c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8005640:	ed9f 8b97 	vldr	d8, [pc, #604]	; 80058a0 <_vfprintf_r+0x330>
 8005644:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8005648:	ac21      	add	r4, sp, #132	; 0x84
 800564a:	941e      	str	r4, [sp, #120]	; 0x78
 800564c:	9303      	str	r3, [sp, #12]
 800564e:	9308      	str	r3, [sp, #32]
 8005650:	930e      	str	r3, [sp, #56]	; 0x38
 8005652:	9310      	str	r3, [sp, #64]	; 0x40
 8005654:	930b      	str	r3, [sp, #44]	; 0x2c
 8005656:	4653      	mov	r3, sl
 8005658:	461f      	mov	r7, r3
 800565a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800565e:	b10a      	cbz	r2, 8005664 <_vfprintf_r+0xf4>
 8005660:	2a25      	cmp	r2, #37	; 0x25
 8005662:	d1f9      	bne.n	8005658 <_vfprintf_r+0xe8>
 8005664:	ebb7 090a 	subs.w	r9, r7, sl
 8005668:	d00d      	beq.n	8005686 <_vfprintf_r+0x116>
 800566a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800566c:	444b      	add	r3, r9
 800566e:	9320      	str	r3, [sp, #128]	; 0x80
 8005670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005672:	3301      	adds	r3, #1
 8005674:	2b07      	cmp	r3, #7
 8005676:	e9c4 a900 	strd	sl, r9, [r4]
 800567a:	931f      	str	r3, [sp, #124]	; 0x7c
 800567c:	dc77      	bgt.n	800576e <_vfprintf_r+0x1fe>
 800567e:	3408      	adds	r4, #8
 8005680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005682:	444b      	add	r3, r9
 8005684:	930b      	str	r3, [sp, #44]	; 0x2c
 8005686:	783b      	ldrb	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f001 8150 	beq.w	800692e <_vfprintf_r+0x13be>
 800568e:	2200      	movs	r2, #0
 8005690:	1c7b      	adds	r3, r7, #1
 8005692:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8005696:	f04f 37ff 	mov.w	r7, #4294967295
 800569a:	920c      	str	r2, [sp, #48]	; 0x30
 800569c:	4693      	mov	fp, r2
 800569e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80056a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a6:	9204      	str	r2, [sp, #16]
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	3b20      	subs	r3, #32
 80056ae:	2b5a      	cmp	r3, #90	; 0x5a
 80056b0:	f200 85a7 	bhi.w	8006202 <_vfprintf_r+0xc92>
 80056b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056b8:	05a5007d 	.word	0x05a5007d
 80056bc:	008505a5 	.word	0x008505a5
 80056c0:	05a505a5 	.word	0x05a505a5
 80056c4:	006505a5 	.word	0x006505a5
 80056c8:	05a505a5 	.word	0x05a505a5
 80056cc:	00920088 	.word	0x00920088
 80056d0:	008f05a5 	.word	0x008f05a5
 80056d4:	05a50095 	.word	0x05a50095
 80056d8:	00b100ae 	.word	0x00b100ae
 80056dc:	00b100b1 	.word	0x00b100b1
 80056e0:	00b100b1 	.word	0x00b100b1
 80056e4:	00b100b1 	.word	0x00b100b1
 80056e8:	00b100b1 	.word	0x00b100b1
 80056ec:	05a505a5 	.word	0x05a505a5
 80056f0:	05a505a5 	.word	0x05a505a5
 80056f4:	05a505a5 	.word	0x05a505a5
 80056f8:	013305a5 	.word	0x013305a5
 80056fc:	00df05a5 	.word	0x00df05a5
 8005700:	013300fc 	.word	0x013300fc
 8005704:	01330133 	.word	0x01330133
 8005708:	05a505a5 	.word	0x05a505a5
 800570c:	05a505a5 	.word	0x05a505a5
 8005710:	05a500c2 	.word	0x05a500c2
 8005714:	046905a5 	.word	0x046905a5
 8005718:	05a505a5 	.word	0x05a505a5
 800571c:	04b705a5 	.word	0x04b705a5
 8005720:	04db05a5 	.word	0x04db05a5
 8005724:	05a505a5 	.word	0x05a505a5
 8005728:	05a50501 	.word	0x05a50501
 800572c:	05a505a5 	.word	0x05a505a5
 8005730:	05a505a5 	.word	0x05a505a5
 8005734:	05a505a5 	.word	0x05a505a5
 8005738:	013305a5 	.word	0x013305a5
 800573c:	00df05a5 	.word	0x00df05a5
 8005740:	013300fe 	.word	0x013300fe
 8005744:	01330133 	.word	0x01330133
 8005748:	00fe00c5 	.word	0x00fe00c5
 800574c:	05a500d9 	.word	0x05a500d9
 8005750:	05a500d2 	.word	0x05a500d2
 8005754:	046b043e 	.word	0x046b043e
 8005758:	00d904a4 	.word	0x00d904a4
 800575c:	04b705a5 	.word	0x04b705a5
 8005760:	04dd007b 	.word	0x04dd007b
 8005764:	05a505a5 	.word	0x05a505a5
 8005768:	05a50522 	.word	0x05a50522
 800576c:	007b      	.short	0x007b
 800576e:	aa1e      	add	r2, sp, #120	; 0x78
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f007 fab8 	bl	800cce8 <__sprint_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	f040 812a 	bne.w	80059d2 <_vfprintf_r+0x462>
 800577e:	ac21      	add	r4, sp, #132	; 0x84
 8005780:	e77e      	b.n	8005680 <_vfprintf_r+0x110>
 8005782:	4630      	mov	r0, r6
 8005784:	f003 fdc8 	bl	8009318 <_localeconv_r>
 8005788:	6843      	ldr	r3, [r0, #4]
 800578a:	9310      	str	r3, [sp, #64]	; 0x40
 800578c:	4618      	mov	r0, r3
 800578e:	f7fa fd57 	bl	8000240 <strlen>
 8005792:	900e      	str	r0, [sp, #56]	; 0x38
 8005794:	4630      	mov	r0, r6
 8005796:	f003 fdbf 	bl	8009318 <_localeconv_r>
 800579a:	6883      	ldr	r3, [r0, #8]
 800579c:	9308      	str	r3, [sp, #32]
 800579e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a0:	b12b      	cbz	r3, 80057ae <_vfprintf_r+0x23e>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	b11b      	cbz	r3, 80057ae <_vfprintf_r+0x23e>
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b10b      	cbz	r3, 80057ae <_vfprintf_r+0x23e>
 80057aa:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	e777      	b.n	80056a2 <_vfprintf_r+0x132>
 80057b2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f9      	bne.n	80057ae <_vfprintf_r+0x23e>
 80057ba:	2320      	movs	r3, #32
 80057bc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80057c0:	e7f5      	b.n	80057ae <_vfprintf_r+0x23e>
 80057c2:	f04b 0b01 	orr.w	fp, fp, #1
 80057c6:	e7f2      	b.n	80057ae <_vfprintf_r+0x23e>
 80057c8:	f858 3b04 	ldr.w	r3, [r8], #4
 80057cc:	930c      	str	r3, [sp, #48]	; 0x30
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	daed      	bge.n	80057ae <_vfprintf_r+0x23e>
 80057d2:	425b      	negs	r3, r3
 80057d4:	930c      	str	r3, [sp, #48]	; 0x30
 80057d6:	f04b 0b04 	orr.w	fp, fp, #4
 80057da:	e7e8      	b.n	80057ae <_vfprintf_r+0x23e>
 80057dc:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 80057e0:	e7e5      	b.n	80057ae <_vfprintf_r+0x23e>
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057e8:	9204      	str	r2, [sp, #16]
 80057ea:	2a2a      	cmp	r2, #42	; 0x2a
 80057ec:	d110      	bne.n	8005810 <_vfprintf_r+0x2a0>
 80057ee:	f858 7b04 	ldr.w	r7, [r8], #4
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 80057f8:	e7d9      	b.n	80057ae <_vfprintf_r+0x23e>
 80057fa:	210a      	movs	r1, #10
 80057fc:	fb01 2707 	mla	r7, r1, r7, r2
 8005800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005804:	9204      	str	r2, [sp, #16]
 8005806:	9a04      	ldr	r2, [sp, #16]
 8005808:	3a30      	subs	r2, #48	; 0x30
 800580a:	2a09      	cmp	r2, #9
 800580c:	d9f5      	bls.n	80057fa <_vfprintf_r+0x28a>
 800580e:	e74b      	b.n	80056a8 <_vfprintf_r+0x138>
 8005810:	2700      	movs	r7, #0
 8005812:	e7f8      	b.n	8005806 <_vfprintf_r+0x296>
 8005814:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005818:	e7c9      	b.n	80057ae <_vfprintf_r+0x23e>
 800581a:	2200      	movs	r2, #0
 800581c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581e:	920c      	str	r2, [sp, #48]	; 0x30
 8005820:	9a04      	ldr	r2, [sp, #16]
 8005822:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005824:	3a30      	subs	r2, #48	; 0x30
 8005826:	200a      	movs	r0, #10
 8005828:	fb00 2201 	mla	r2, r0, r1, r2
 800582c:	920c      	str	r2, [sp, #48]	; 0x30
 800582e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005832:	9204      	str	r2, [sp, #16]
 8005834:	3a30      	subs	r2, #48	; 0x30
 8005836:	2a09      	cmp	r2, #9
 8005838:	d9f2      	bls.n	8005820 <_vfprintf_r+0x2b0>
 800583a:	e735      	b.n	80056a8 <_vfprintf_r+0x138>
 800583c:	f04b 0b08 	orr.w	fp, fp, #8
 8005840:	e7b5      	b.n	80057ae <_vfprintf_r+0x23e>
 8005842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b68      	cmp	r3, #104	; 0x68
 8005848:	bf01      	itttt	eq
 800584a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800584c:	3301      	addeq	r3, #1
 800584e:	9309      	streq	r3, [sp, #36]	; 0x24
 8005850:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8005854:	bf18      	it	ne
 8005856:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800585a:	e7a8      	b.n	80057ae <_vfprintf_r+0x23e>
 800585c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b6c      	cmp	r3, #108	; 0x6c
 8005862:	d105      	bne.n	8005870 <_vfprintf_r+0x300>
 8005864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	9309      	str	r3, [sp, #36]	; 0x24
 800586a:	f04b 0b20 	orr.w	fp, fp, #32
 800586e:	e79e      	b.n	80057ae <_vfprintf_r+0x23e>
 8005870:	f04b 0b10 	orr.w	fp, fp, #16
 8005874:	e79b      	b.n	80057ae <_vfprintf_r+0x23e>
 8005876:	4642      	mov	r2, r8
 8005878:	2000      	movs	r0, #0
 800587a:	f852 3b04 	ldr.w	r3, [r2], #4
 800587e:	9205      	str	r2, [sp, #20]
 8005880:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8005884:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8005888:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	2701      	movs	r7, #1
 8005890:	4681      	mov	r9, r0
 8005892:	4680      	mov	r8, r0
 8005894:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8005898:	e19b      	b.n	8005bd2 <_vfprintf_r+0x662>
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w
	...
 80058a8:	ffffffff 	.word	0xffffffff
 80058ac:	7fefffff 	.word	0x7fefffff
 80058b0:	f04b 0b10 	orr.w	fp, fp, #16
 80058b4:	f01b 0f20 	tst.w	fp, #32
 80058b8:	d016      	beq.n	80058e8 <_vfprintf_r+0x378>
 80058ba:	f108 0807 	add.w	r8, r8, #7
 80058be:	f028 0307 	bic.w	r3, r8, #7
 80058c2:	461a      	mov	r2, r3
 80058c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80058c8:	f852 8b08 	ldr.w	r8, [r2], #8
 80058cc:	9205      	str	r2, [sp, #20]
 80058ce:	f1b9 0f00 	cmp.w	r9, #0
 80058d2:	da07      	bge.n	80058e4 <_vfprintf_r+0x374>
 80058d4:	f1d8 0800 	rsbs	r8, r8, #0
 80058d8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80058dc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80058e0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80058e4:	2301      	movs	r3, #1
 80058e6:	e365      	b.n	8005fb4 <_vfprintf_r+0xa44>
 80058e8:	4642      	mov	r2, r8
 80058ea:	f01b 0f10 	tst.w	fp, #16
 80058ee:	f852 3b04 	ldr.w	r3, [r2], #4
 80058f2:	9205      	str	r2, [sp, #20]
 80058f4:	d003      	beq.n	80058fe <_vfprintf_r+0x38e>
 80058f6:	4698      	mov	r8, r3
 80058f8:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80058fc:	e7e7      	b.n	80058ce <_vfprintf_r+0x35e>
 80058fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005902:	d004      	beq.n	800590e <_vfprintf_r+0x39e>
 8005904:	fa0f f883 	sxth.w	r8, r3
 8005908:	f343 39c0 	sbfx	r9, r3, #15, #1
 800590c:	e7df      	b.n	80058ce <_vfprintf_r+0x35e>
 800590e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005912:	d0f0      	beq.n	80058f6 <_vfprintf_r+0x386>
 8005914:	fa4f f883 	sxtb.w	r8, r3
 8005918:	f343 19c0 	sbfx	r9, r3, #7, #1
 800591c:	e7d7      	b.n	80058ce <_vfprintf_r+0x35e>
 800591e:	f108 0807 	add.w	r8, r8, #7
 8005922:	f028 0307 	bic.w	r3, r8, #7
 8005926:	ecb3 8b02 	vldmia	r3!, {d8}
 800592a:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 80058a8 <_vfprintf_r+0x338>
 800592e:	eeb0 6bc8 	vabs.f64	d6, d8
 8005932:	eeb4 6b47 	vcmp.f64	d6, d7
 8005936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	dd18      	ble.n	8005970 <_vfprintf_r+0x400>
 800593e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8005942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005946:	d502      	bpl.n	800594e <_vfprintf_r+0x3de>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <_vfprintf_r+0x480>)
 8005950:	4828      	ldr	r0, [pc, #160]	; (80059f4 <_vfprintf_r+0x484>)
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	2b47      	cmp	r3, #71	; 0x47
 8005956:	bfd4      	ite	le
 8005958:	4692      	movle	sl, r2
 800595a:	4682      	movgt	sl, r0
 800595c:	2300      	movs	r3, #0
 800595e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	2703      	movs	r7, #3
 8005966:	4699      	mov	r9, r3
 8005968:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800596c:	4698      	mov	r8, r3
 800596e:	e130      	b.n	8005bd2 <_vfprintf_r+0x662>
 8005970:	eeb4 8b48 	vcmp.f64	d8, d8
 8005974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005978:	d70a      	bvc.n	8005990 <_vfprintf_r+0x420>
 800597a:	ee18 3a90 	vmov	r3, s17
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	232d      	movlt	r3, #45	; 0x2d
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <_vfprintf_r+0x488>)
 8005986:	481d      	ldr	r0, [pc, #116]	; (80059fc <_vfprintf_r+0x48c>)
 8005988:	bfb8      	it	lt
 800598a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800598e:	e7e0      	b.n	8005952 <_vfprintf_r+0x3e2>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	f023 0920 	bic.w	r9, r3, #32
 8005996:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800599a:	d131      	bne.n	8005a00 <_vfprintf_r+0x490>
 800599c:	2330      	movs	r3, #48	; 0x30
 800599e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	2b61      	cmp	r3, #97	; 0x61
 80059a6:	bf0c      	ite	eq
 80059a8:	2378      	moveq	r3, #120	; 0x78
 80059aa:	2358      	movne	r3, #88	; 0x58
 80059ac:	2f63      	cmp	r7, #99	; 0x63
 80059ae:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80059b2:	f04b 0b02 	orr.w	fp, fp, #2
 80059b6:	f340 81e3 	ble.w	8005d80 <_vfprintf_r+0x810>
 80059ba:	1c79      	adds	r1, r7, #1
 80059bc:	4630      	mov	r0, r6
 80059be:	f003 fd2f 	bl	8009420 <_malloc_r>
 80059c2:	4682      	mov	sl, r0
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f040 81e0 	bne.w	8005d8a <_vfprintf_r+0x81a>
 80059ca:	89ab      	ldrh	r3, [r5, #12]
 80059cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d0:	81ab      	strh	r3, [r5, #12]
 80059d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059d4:	07d9      	lsls	r1, r3, #31
 80059d6:	d405      	bmi.n	80059e4 <_vfprintf_r+0x474>
 80059d8:	89ab      	ldrh	r3, [r5, #12]
 80059da:	059a      	lsls	r2, r3, #22
 80059dc:	d402      	bmi.n	80059e4 <_vfprintf_r+0x474>
 80059de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e0:	f003 fca1 	bl	8009326 <__retarget_lock_release_recursive>
 80059e4:	89ab      	ldrh	r3, [r5, #12]
 80059e6:	065b      	lsls	r3, r3, #25
 80059e8:	f57f adfe 	bpl.w	80055e8 <_vfprintf_r+0x78>
 80059ec:	e5f9      	b.n	80055e2 <_vfprintf_r+0x72>
 80059ee:	bf00      	nop
 80059f0:	0800f115 	.word	0x0800f115
 80059f4:	0800f119 	.word	0x0800f119
 80059f8:	0800f11d 	.word	0x0800f11d
 80059fc:	0800f121 	.word	0x0800f121
 8005a00:	1c7b      	adds	r3, r7, #1
 8005a02:	f000 81c4 	beq.w	8005d8e <_vfprintf_r+0x81e>
 8005a06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a0a:	f040 81c4 	bne.w	8005d96 <_vfprintf_r+0x826>
 8005a0e:	2f00      	cmp	r7, #0
 8005a10:	f040 81c1 	bne.w	8005d96 <_vfprintf_r+0x826>
 8005a14:	9702      	str	r7, [sp, #8]
 8005a16:	2701      	movs	r7, #1
 8005a18:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8005a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a1e:	ee18 3a90 	vmov	r3, s17
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f280 81ba 	bge.w	8005d9c <_vfprintf_r+0x82c>
 8005a28:	eeb1 9b48 	vneg.f64	d9, d8
 8005a2c:	232d      	movs	r3, #45	; 0x2d
 8005a2e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8005a32:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a34:	f040 81cb 	bne.w	8005dce <_vfprintf_r+0x85e>
 8005a38:	eeb0 0b49 	vmov.f64	d0, d9
 8005a3c:	a818      	add	r0, sp, #96	; 0x60
 8005a3e:	f004 fe33 	bl	800a6a8 <frexp>
 8005a42:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8005a46:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005a4a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a52:	bf08      	it	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	9a04      	ldr	r2, [sp, #16]
 8005a58:	bf08      	it	eq
 8005a5a:	9318      	streq	r3, [sp, #96]	; 0x60
 8005a5c:	49b7      	ldr	r1, [pc, #732]	; (8005d3c <_vfprintf_r+0x7cc>)
 8005a5e:	4bb8      	ldr	r3, [pc, #736]	; (8005d40 <_vfprintf_r+0x7d0>)
 8005a60:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8005a64:	2a61      	cmp	r2, #97	; 0x61
 8005a66:	bf18      	it	ne
 8005a68:	4619      	movne	r1, r3
 8005a6a:	1e7a      	subs	r2, r7, #1
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005a72:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8005a76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005a7a:	ee16 ca90 	vmov	ip, s13
 8005a7e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8005a82:	f803 0b01 	strb.w	r0, [r3], #1
 8005a86:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8005a90:	d006      	beq.n	8005aa0 <_vfprintf_r+0x530>
 8005a92:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005a9e:	d1e6      	bne.n	8005a6e <_vfprintf_r+0x4fe>
 8005aa0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005aa4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aac:	dc09      	bgt.n	8005ac2 <_vfprintf_r+0x552>
 8005aae:	eeb4 0b47 	vcmp.f64	d0, d7
 8005ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab6:	f040 8184 	bne.w	8005dc2 <_vfprintf_r+0x852>
 8005aba:	f01c 0f01 	tst.w	ip, #1
 8005abe:	f000 8180 	beq.w	8005dc2 <_vfprintf_r+0x852>
 8005ac2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8005ac6:	931c      	str	r3, [sp, #112]	; 0x70
 8005ac8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005acc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005ace:	1e42      	subs	r2, r0, #1
 8005ad0:	921c      	str	r2, [sp, #112]	; 0x70
 8005ad2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8005ad6:	4562      	cmp	r2, ip
 8005ad8:	f000 8164 	beq.w	8005da4 <_vfprintf_r+0x834>
 8005adc:	2a39      	cmp	r2, #57	; 0x39
 8005ade:	bf16      	itet	ne
 8005ae0:	3201      	addne	r2, #1
 8005ae2:	7a8a      	ldrbeq	r2, [r1, #10]
 8005ae4:	b2d2      	uxtbne	r2, r2
 8005ae6:	f800 2c01 	strb.w	r2, [r0, #-1]
 8005aea:	eba3 030a 	sub.w	r3, r3, sl
 8005aee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005af2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	f040 81ac 	bne.w	8005e54 <_vfprintf_r+0x8e4>
 8005afc:	f118 0f03 	cmn.w	r8, #3
 8005b00:	db02      	blt.n	8005b08 <_vfprintf_r+0x598>
 8005b02:	4547      	cmp	r7, r8
 8005b04:	f280 81ce 	bge.w	8005ea4 <_vfprintf_r+0x934>
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	9904      	ldr	r1, [sp, #16]
 8005b10:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005b14:	f021 0120 	bic.w	r1, r1, #32
 8005b18:	2941      	cmp	r1, #65	; 0x41
 8005b1a:	bf08      	it	eq
 8005b1c:	320f      	addeq	r2, #15
 8005b1e:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b22:	bf06      	itte	eq
 8005b24:	b2d2      	uxtbeq	r2, r2
 8005b26:	2101      	moveq	r1, #1
 8005b28:	2100      	movne	r1, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	9318      	str	r3, [sp, #96]	; 0x60
 8005b2e:	bfb8      	it	lt
 8005b30:	f1c8 0301 	rsblt	r3, r8, #1
 8005b34:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8005b38:	bfb4      	ite	lt
 8005b3a:	222d      	movlt	r2, #45	; 0x2d
 8005b3c:	222b      	movge	r2, #43	; 0x2b
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005b44:	f340 819d 	ble.w	8005e82 <_vfprintf_r+0x912>
 8005b48:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 8005b4c:	200a      	movs	r0, #10
 8005b4e:	4611      	mov	r1, r2
 8005b50:	fb93 f7f0 	sdiv	r7, r3, r0
 8005b54:	fb00 3017 	mls	r0, r0, r7, r3
 8005b58:	3030      	adds	r0, #48	; 0x30
 8005b5a:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	2863      	cmp	r0, #99	; 0x63
 8005b62:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b66:	463b      	mov	r3, r7
 8005b68:	dcf0      	bgt.n	8005b4c <_vfprintf_r+0x5dc>
 8005b6a:	3330      	adds	r3, #48	; 0x30
 8005b6c:	1e88      	subs	r0, r1, #2
 8005b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b72:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8005b76:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	42bb      	cmp	r3, r7
 8005b7e:	f0c0 817b 	bcc.w	8005e78 <_vfprintf_r+0x908>
 8005b82:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8005b86:	1a52      	subs	r2, r2, r1
 8005b88:	42b8      	cmp	r0, r7
 8005b8a:	bf88      	it	hi
 8005b8c:	2200      	movhi	r2, #0
 8005b8e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8005b92:	441a      	add	r2, r3
 8005b94:	ab1a      	add	r3, sp, #104	; 0x68
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	9a03      	ldr	r2, [sp, #12]
 8005b9a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	eb03 0702 	add.w	r7, r3, r2
 8005ba2:	dc02      	bgt.n	8005baa <_vfprintf_r+0x63a>
 8005ba4:	f01b 0f01 	tst.w	fp, #1
 8005ba8:	d001      	beq.n	8005bae <_vfprintf_r+0x63e>
 8005baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bac:	441f      	add	r7, r3
 8005bae:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005bbe:	4698      	mov	r8, r3
 8005bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bc2:	b113      	cbz	r3, 8005bca <_vfprintf_r+0x65a>
 8005bc4:	232d      	movs	r3, #45	; 0x2d
 8005bc6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8005bca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005bce:	f04f 0900 	mov.w	r9, #0
 8005bd2:	45b9      	cmp	r9, r7
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	bfb8      	it	lt
 8005bd8:	463b      	movlt	r3, r7
 8005bda:	930d      	str	r3, [sp, #52]	; 0x34
 8005bdc:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8005be0:	b113      	cbz	r3, 8005be8 <_vfprintf_r+0x678>
 8005be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005be4:	3301      	adds	r3, #1
 8005be6:	930d      	str	r3, [sp, #52]	; 0x34
 8005be8:	f01b 0302 	ands.w	r3, fp, #2
 8005bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bee:	bf1e      	ittt	ne
 8005bf0:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8005bf2:	3302      	addne	r3, #2
 8005bf4:	930d      	strne	r3, [sp, #52]	; 0x34
 8005bf6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8005bfa:	9314      	str	r3, [sp, #80]	; 0x50
 8005bfc:	d120      	bne.n	8005c40 <_vfprintf_r+0x6d0>
 8005bfe:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd1b      	ble.n	8005c40 <_vfprintf_r+0x6d0>
 8005c08:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8005c0c:	494d      	ldr	r1, [pc, #308]	; (8005d44 <_vfprintf_r+0x7d4>)
 8005c0e:	6021      	str	r1, [r4, #0]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	f102 0201 	add.w	r2, r2, #1
 8005c16:	f104 0008 	add.w	r0, r4, #8
 8005c1a:	f300 8302 	bgt.w	8006222 <_vfprintf_r+0xcb2>
 8005c1e:	eb0c 0103 	add.w	r1, ip, r3
 8005c22:	2a07      	cmp	r2, #7
 8005c24:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	f340 830f 	ble.w	800624c <_vfprintf_r+0xcdc>
 8005c2e:	aa1e      	add	r2, sp, #120	; 0x78
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f007 f858 	bl	800cce8 <__sprint_r>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f040 8655 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8005c3e:	ac21      	add	r4, sp, #132	; 0x84
 8005c40:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8005c44:	b173      	cbz	r3, 8005c64 <_vfprintf_r+0x6f4>
 8005c46:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c52:	3301      	adds	r3, #1
 8005c54:	9320      	str	r3, [sp, #128]	; 0x80
 8005c56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c58:	3301      	adds	r3, #1
 8005c5a:	2b07      	cmp	r3, #7
 8005c5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8005c5e:	f300 82f7 	bgt.w	8006250 <_vfprintf_r+0xce0>
 8005c62:	3408      	adds	r4, #8
 8005c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c66:	b16b      	cbz	r3, 8005c84 <_vfprintf_r+0x714>
 8005c68:	ab17      	add	r3, sp, #92	; 0x5c
 8005c6a:	6023      	str	r3, [r4, #0]
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	6063      	str	r3, [r4, #4]
 8005c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c72:	3302      	adds	r3, #2
 8005c74:	9320      	str	r3, [sp, #128]	; 0x80
 8005c76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c78:	3301      	adds	r3, #1
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8005c7e:	f300 82f1 	bgt.w	8006264 <_vfprintf_r+0xcf4>
 8005c82:	3408      	adds	r4, #8
 8005c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d120      	bne.n	8005ccc <_vfprintf_r+0x75c>
 8005c8a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	dd1b      	ble.n	8005ccc <_vfprintf_r+0x75c>
 8005c94:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8005c98:	492b      	ldr	r1, [pc, #172]	; (8005d48 <_vfprintf_r+0x7d8>)
 8005c9a:	6021      	str	r1, [r4, #0]
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	f102 0201 	add.w	r2, r2, #1
 8005ca2:	f104 0008 	add.w	r0, r4, #8
 8005ca6:	f300 82e7 	bgt.w	8006278 <_vfprintf_r+0xd08>
 8005caa:	eb0c 0103 	add.w	r1, ip, r3
 8005cae:	2a07      	cmp	r2, #7
 8005cb0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	f340 82f4 	ble.w	80062a2 <_vfprintf_r+0xd32>
 8005cba:	aa1e      	add	r2, sp, #120	; 0x78
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f007 f812 	bl	800cce8 <__sprint_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f040 860f 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8005cca:	ac21      	add	r4, sp, #132	; 0x84
 8005ccc:	eba9 0907 	sub.w	r9, r9, r7
 8005cd0:	f1b9 0f00 	cmp.w	r9, #0
 8005cd4:	dd1c      	ble.n	8005d10 <_vfprintf_r+0x7a0>
 8005cd6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8005cda:	481b      	ldr	r0, [pc, #108]	; (8005d48 <_vfprintf_r+0x7d8>)
 8005cdc:	6020      	str	r0, [r4, #0]
 8005cde:	f1b9 0f10 	cmp.w	r9, #16
 8005ce2:	f102 0201 	add.w	r2, r2, #1
 8005ce6:	f104 0108 	add.w	r1, r4, #8
 8005cea:	f300 82dc 	bgt.w	80062a6 <_vfprintf_r+0xd36>
 8005cee:	444b      	add	r3, r9
 8005cf0:	2a07      	cmp	r2, #7
 8005cf2:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8005cf6:	f8c4 9004 	str.w	r9, [r4, #4]
 8005cfa:	f340 82e8 	ble.w	80062ce <_vfprintf_r+0xd5e>
 8005cfe:	aa1e      	add	r2, sp, #120	; 0x78
 8005d00:	4629      	mov	r1, r5
 8005d02:	4630      	mov	r0, r6
 8005d04:	f006 fff0 	bl	800cce8 <__sprint_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f040 85ed 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8005d0e:	ac21      	add	r4, sp, #132	; 0x84
 8005d10:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d14:	9820      	ldr	r0, [sp, #128]	; 0x80
 8005d16:	f040 82e1 	bne.w	80062dc <_vfprintf_r+0xd6c>
 8005d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4438      	add	r0, r7
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	e9c4 a700 	strd	sl, r7, [r4]
 8005d26:	9020      	str	r0, [sp, #128]	; 0x80
 8005d28:	931f      	str	r3, [sp, #124]	; 0x7c
 8005d2a:	f300 831c 	bgt.w	8006366 <_vfprintf_r+0xdf6>
 8005d2e:	3408      	adds	r4, #8
 8005d30:	f01b 0f04 	tst.w	fp, #4
 8005d34:	f040 85b7 	bne.w	80068a6 <_vfprintf_r+0x1336>
 8005d38:	e008      	b.n	8005d4c <_vfprintf_r+0x7dc>
 8005d3a:	bf00      	nop
 8005d3c:	0800f125 	.word	0x0800f125
 8005d40:	0800f136 	.word	0x0800f136
 8005d44:	0800f149 	.word	0x0800f149
 8005d48:	0800f159 	.word	0x0800f159
 8005d4c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8005d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d52:	428a      	cmp	r2, r1
 8005d54:	bfac      	ite	ge
 8005d56:	189b      	addge	r3, r3, r2
 8005d58:	185b      	addlt	r3, r3, r1
 8005d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d5e:	b13b      	cbz	r3, 8005d70 <_vfprintf_r+0x800>
 8005d60:	aa1e      	add	r2, sp, #120	; 0x78
 8005d62:	4629      	mov	r1, r5
 8005d64:	4630      	mov	r0, r6
 8005d66:	f006 ffbf 	bl	800cce8 <__sprint_r>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f040 85bc 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8005d70:	2300      	movs	r3, #0
 8005d72:	931f      	str	r3, [sp, #124]	; 0x7c
 8005d74:	9b02      	ldr	r3, [sp, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 85d3 	bne.w	8006922 <_vfprintf_r+0x13b2>
 8005d7c:	ac21      	add	r4, sp, #132	; 0x84
 8005d7e:	e0e6      	b.n	8005f4e <_vfprintf_r+0x9de>
 8005d80:	2300      	movs	r3, #0
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8005d88:	e646      	b.n	8005a18 <_vfprintf_r+0x4a8>
 8005d8a:	9002      	str	r0, [sp, #8]
 8005d8c:	e644      	b.n	8005a18 <_vfprintf_r+0x4a8>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9302      	str	r3, [sp, #8]
 8005d92:	2706      	movs	r7, #6
 8005d94:	e640      	b.n	8005a18 <_vfprintf_r+0x4a8>
 8005d96:	2300      	movs	r3, #0
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	e63d      	b.n	8005a18 <_vfprintf_r+0x4a8>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	eeb0 9b48 	vmov.f64	d9, d8
 8005da2:	e644      	b.n	8005a2e <_vfprintf_r+0x4be>
 8005da4:	f800 ec01 	strb.w	lr, [r0, #-1]
 8005da8:	e690      	b.n	8005acc <_vfprintf_r+0x55c>
 8005daa:	f802 eb01 	strb.w	lr, [r2], #1
 8005dae:	ebac 0102 	sub.w	r1, ip, r2
 8005db2:	2900      	cmp	r1, #0
 8005db4:	daf9      	bge.n	8005daa <_vfprintf_r+0x83a>
 8005db6:	1c42      	adds	r2, r0, #1
 8005db8:	3001      	adds	r0, #1
 8005dba:	bfb8      	it	lt
 8005dbc:	2200      	movlt	r2, #0
 8005dbe:	4413      	add	r3, r2
 8005dc0:	e693      	b.n	8005aea <_vfprintf_r+0x57a>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	eb03 0c00 	add.w	ip, r3, r0
 8005dc8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005dcc:	e7ef      	b.n	8005dae <_vfprintf_r+0x83e>
 8005dce:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8005dd2:	d006      	beq.n	8005de2 <_vfprintf_r+0x872>
 8005dd4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8005dd8:	d119      	bne.n	8005e0e <_vfprintf_r+0x89e>
 8005dda:	f107 0801 	add.w	r8, r7, #1
 8005dde:	2102      	movs	r1, #2
 8005de0:	e001      	b.n	8005de6 <_vfprintf_r+0x876>
 8005de2:	46b8      	mov	r8, r7
 8005de4:	2103      	movs	r1, #3
 8005de6:	ab1c      	add	r3, sp, #112	; 0x70
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	ab19      	add	r3, sp, #100	; 0x64
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4642      	mov	r2, r8
 8005df0:	ab18      	add	r3, sp, #96	; 0x60
 8005df2:	4630      	mov	r0, r6
 8005df4:	eeb0 0b49 	vmov.f64	d0, d9
 8005df8:	f002 f8da 	bl	8007fb0 <_dtoa_r>
 8005dfc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e00:	4682      	mov	sl, r0
 8005e02:	d106      	bne.n	8005e12 <_vfprintf_r+0x8a2>
 8005e04:	f01b 0f01 	tst.w	fp, #1
 8005e08:	d103      	bne.n	8005e12 <_vfprintf_r+0x8a2>
 8005e0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e0c:	e66d      	b.n	8005aea <_vfprintf_r+0x57a>
 8005e0e:	46b8      	mov	r8, r7
 8005e10:	e7e5      	b.n	8005dde <_vfprintf_r+0x86e>
 8005e12:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8005e16:	eb0a 0308 	add.w	r3, sl, r8
 8005e1a:	d10d      	bne.n	8005e38 <_vfprintf_r+0x8c8>
 8005e1c:	f89a 2000 	ldrb.w	r2, [sl]
 8005e20:	2a30      	cmp	r2, #48	; 0x30
 8005e22:	d107      	bne.n	8005e34 <_vfprintf_r+0x8c4>
 8005e24:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	bf1c      	itt	ne
 8005e2e:	f1c8 0201 	rsbne	r2, r8, #1
 8005e32:	9218      	strne	r2, [sp, #96]	; 0x60
 8005e34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e36:	4413      	add	r3, r2
 8005e38:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	bf08      	it	eq
 8005e42:	931c      	streq	r3, [sp, #112]	; 0x70
 8005e44:	2130      	movs	r1, #48	; 0x30
 8005e46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d9de      	bls.n	8005e0a <_vfprintf_r+0x89a>
 8005e4c:	1c50      	adds	r0, r2, #1
 8005e4e:	901c      	str	r0, [sp, #112]	; 0x70
 8005e50:	7011      	strb	r1, [r2, #0]
 8005e52:	e7f8      	b.n	8005e46 <_vfprintf_r+0x8d6>
 8005e54:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8005e58:	f47f ae59 	bne.w	8005b0e <_vfprintf_r+0x59e>
 8005e5c:	f00b 0301 	and.w	r3, fp, #1
 8005e60:	f1b8 0f00 	cmp.w	r8, #0
 8005e64:	ea43 0307 	orr.w	r3, r3, r7
 8005e68:	dd18      	ble.n	8005e9c <_vfprintf_r+0x92c>
 8005e6a:	b38b      	cbz	r3, 8005ed0 <_vfprintf_r+0x960>
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6e:	4443      	add	r3, r8
 8005e70:	441f      	add	r7, r3
 8005e72:	2366      	movs	r3, #102	; 0x66
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	e030      	b.n	8005eda <_vfprintf_r+0x96a>
 8005e78:	f813 cb01 	ldrb.w	ip, [r3], #1
 8005e7c:	f802 cb01 	strb.w	ip, [r2], #1
 8005e80:	e67c      	b.n	8005b7c <_vfprintf_r+0x60c>
 8005e82:	b941      	cbnz	r1, 8005e96 <_vfprintf_r+0x926>
 8005e84:	2230      	movs	r2, #48	; 0x30
 8005e86:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8005e8a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8005e8e:	3330      	adds	r3, #48	; 0x30
 8005e90:	f802 3b01 	strb.w	r3, [r2], #1
 8005e94:	e67e      	b.n	8005b94 <_vfprintf_r+0x624>
 8005e96:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8005e9a:	e7f8      	b.n	8005e8e <_vfprintf_r+0x91e>
 8005e9c:	b1d3      	cbz	r3, 8005ed4 <_vfprintf_r+0x964>
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	e7e5      	b.n	8005e70 <_vfprintf_r+0x900>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	4543      	cmp	r3, r8
 8005ea8:	dc07      	bgt.n	8005eba <_vfprintf_r+0x94a>
 8005eaa:	f01b 0f01 	tst.w	fp, #1
 8005eae:	d02a      	beq.n	8005f06 <_vfprintf_r+0x996>
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb2:	eb08 0703 	add.w	r7, r8, r3
 8005eb6:	2367      	movs	r3, #103	; 0x67
 8005eb8:	e7dc      	b.n	8005e74 <_vfprintf_r+0x904>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	eb03 0702 	add.w	r7, r3, r2
 8005ec6:	dcf6      	bgt.n	8005eb6 <_vfprintf_r+0x946>
 8005ec8:	f1c8 0301 	rsb	r3, r8, #1
 8005ecc:	441f      	add	r7, r3
 8005ece:	e7f2      	b.n	8005eb6 <_vfprintf_r+0x946>
 8005ed0:	4647      	mov	r7, r8
 8005ed2:	e7ce      	b.n	8005e72 <_vfprintf_r+0x902>
 8005ed4:	2366      	movs	r3, #102	; 0x66
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	2701      	movs	r7, #1
 8005eda:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	d025      	beq.n	8005f2e <_vfprintf_r+0x9be>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f1b8 0f00 	cmp.w	r8, #0
 8005ee8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005eec:	f77f ae68 	ble.w	8005bc0 <_vfprintf_r+0x650>
 8005ef0:	9b08      	ldr	r3, [sp, #32]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2bff      	cmp	r3, #255	; 0xff
 8005ef6:	d108      	bne.n	8005f0a <_vfprintf_r+0x99a>
 8005ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005efc:	4413      	add	r3, r2
 8005efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f00:	fb02 7703 	mla	r7, r2, r3, r7
 8005f04:	e65c      	b.n	8005bc0 <_vfprintf_r+0x650>
 8005f06:	4647      	mov	r7, r8
 8005f08:	e7d5      	b.n	8005eb6 <_vfprintf_r+0x946>
 8005f0a:	4543      	cmp	r3, r8
 8005f0c:	daf4      	bge.n	8005ef8 <_vfprintf_r+0x988>
 8005f0e:	eba8 0803 	sub.w	r8, r8, r3
 8005f12:	9b08      	ldr	r3, [sp, #32]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	b133      	cbz	r3, 8005f26 <_vfprintf_r+0x9b6>
 8005f18:	9b07      	ldr	r3, [sp, #28]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	9307      	str	r3, [sp, #28]
 8005f1e:	9b08      	ldr	r3, [sp, #32]
 8005f20:	3301      	adds	r3, #1
 8005f22:	9308      	str	r3, [sp, #32]
 8005f24:	e7e4      	b.n	8005ef0 <_vfprintf_r+0x980>
 8005f26:	9b06      	ldr	r3, [sp, #24]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	e7e0      	b.n	8005ef0 <_vfprintf_r+0x980>
 8005f2e:	9b07      	ldr	r3, [sp, #28]
 8005f30:	9306      	str	r3, [sp, #24]
 8005f32:	e645      	b.n	8005bc0 <_vfprintf_r+0x650>
 8005f34:	f108 0304 	add.w	r3, r8, #4
 8005f38:	f01b 0f20 	tst.w	fp, #32
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	d00c      	beq.n	8005f5a <_vfprintf_r+0x9ea>
 8005f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f42:	f8d8 3000 	ldr.w	r3, [r8]
 8005f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f48:	17d2      	asrs	r2, r2, #31
 8005f4a:	e9c3 1200 	strd	r1, r2, [r3]
 8005f4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005f52:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005f56:	f7ff bb7e 	b.w	8005656 <_vfprintf_r+0xe6>
 8005f5a:	f01b 0f10 	tst.w	fp, #16
 8005f5e:	d004      	beq.n	8005f6a <_vfprintf_r+0x9fa>
 8005f60:	f8d8 3000 	ldr.w	r3, [r8]
 8005f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e7f1      	b.n	8005f4e <_vfprintf_r+0x9de>
 8005f6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005f6e:	d004      	beq.n	8005f7a <_vfprintf_r+0xa0a>
 8005f70:	f8d8 3000 	ldr.w	r3, [r8]
 8005f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e7e9      	b.n	8005f4e <_vfprintf_r+0x9de>
 8005f7a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005f7e:	d0ef      	beq.n	8005f60 <_vfprintf_r+0x9f0>
 8005f80:	f8d8 3000 	ldr.w	r3, [r8]
 8005f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	e7e1      	b.n	8005f4e <_vfprintf_r+0x9de>
 8005f8a:	f04b 0b10 	orr.w	fp, fp, #16
 8005f8e:	f01b 0320 	ands.w	r3, fp, #32
 8005f92:	d020      	beq.n	8005fd6 <_vfprintf_r+0xa66>
 8005f94:	f108 0807 	add.w	r8, r8, #7
 8005f98:	f028 0307 	bic.w	r3, r8, #7
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005fa2:	f852 8b08 	ldr.w	r8, [r2], #8
 8005fa6:	9205      	str	r2, [sp, #20]
 8005fa8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8005fac:	2300      	movs	r3, #0
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8005fb4:	1c7a      	adds	r2, r7, #1
 8005fb6:	f000 84cd 	beq.w	8006954 <_vfprintf_r+0x13e4>
 8005fba:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	ea58 0209 	orrs.w	r2, r8, r9
 8005fc4:	f040 84cc 	bne.w	8006960 <_vfprintf_r+0x13f0>
 8005fc8:	2f00      	cmp	r7, #0
 8005fca:	f000 810f 	beq.w	80061ec <_vfprintf_r+0xc7c>
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	f040 84c9 	bne.w	8006966 <_vfprintf_r+0x13f6>
 8005fd4:	e0ae      	b.n	8006134 <_vfprintf_r+0xbc4>
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	f01b 0910 	ands.w	r9, fp, #16
 8005fdc:	f852 8b04 	ldr.w	r8, [r2], #4
 8005fe0:	9205      	str	r2, [sp, #20]
 8005fe2:	d001      	beq.n	8005fe8 <_vfprintf_r+0xa78>
 8005fe4:	4699      	mov	r9, r3
 8005fe6:	e7df      	b.n	8005fa8 <_vfprintf_r+0xa38>
 8005fe8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005fec:	d002      	beq.n	8005ff4 <_vfprintf_r+0xa84>
 8005fee:	fa1f f888 	uxth.w	r8, r8
 8005ff2:	e7d9      	b.n	8005fa8 <_vfprintf_r+0xa38>
 8005ff4:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8005ff8:	d0d6      	beq.n	8005fa8 <_vfprintf_r+0xa38>
 8005ffa:	fa5f f888 	uxtb.w	r8, r8
 8005ffe:	e7f1      	b.n	8005fe4 <_vfprintf_r+0xa74>
 8006000:	4643      	mov	r3, r8
 8006002:	2278      	movs	r2, #120	; 0x78
 8006004:	f853 8b04 	ldr.w	r8, [r3], #4
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	2330      	movs	r3, #48	; 0x30
 800600c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8006010:	4bb0      	ldr	r3, [pc, #704]	; (80062d4 <_vfprintf_r+0xd64>)
 8006012:	9312      	str	r3, [sp, #72]	; 0x48
 8006014:	f04f 0900 	mov.w	r9, #0
 8006018:	f04b 0b02 	orr.w	fp, fp, #2
 800601c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8006020:	2302      	movs	r3, #2
 8006022:	9204      	str	r2, [sp, #16]
 8006024:	e7c3      	b.n	8005fae <_vfprintf_r+0xa3e>
 8006026:	4643      	mov	r3, r8
 8006028:	1c79      	adds	r1, r7, #1
 800602a:	f853 ab04 	ldr.w	sl, [r3], #4
 800602e:	9305      	str	r3, [sp, #20]
 8006030:	f04f 0800 	mov.w	r8, #0
 8006034:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8006038:	d010      	beq.n	800605c <_vfprintf_r+0xaec>
 800603a:	463a      	mov	r2, r7
 800603c:	4641      	mov	r1, r8
 800603e:	4650      	mov	r0, sl
 8006040:	f7fa f906 	bl	8000250 <memchr>
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 80e8 	beq.w	800621c <_vfprintf_r+0xcac>
 800604c:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8006050:	eba0 070a 	sub.w	r7, r0, sl
 8006054:	f8cd 8008 	str.w	r8, [sp, #8]
 8006058:	46c1      	mov	r9, r8
 800605a:	e5ba      	b.n	8005bd2 <_vfprintf_r+0x662>
 800605c:	4650      	mov	r0, sl
 800605e:	f7fa f8ef 	bl	8000240 <strlen>
 8006062:	46c1      	mov	r9, r8
 8006064:	4607      	mov	r7, r0
 8006066:	f8cd 8008 	str.w	r8, [sp, #8]
 800606a:	464b      	mov	r3, r9
 800606c:	e47c      	b.n	8005968 <_vfprintf_r+0x3f8>
 800606e:	f04b 0b10 	orr.w	fp, fp, #16
 8006072:	f01b 0320 	ands.w	r3, fp, #32
 8006076:	d00b      	beq.n	8006090 <_vfprintf_r+0xb20>
 8006078:	f108 0807 	add.w	r8, r8, #7
 800607c:	f028 0307 	bic.w	r3, r8, #7
 8006080:	461a      	mov	r2, r3
 8006082:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8006086:	f852 8b08 	ldr.w	r8, [r2], #8
 800608a:	9205      	str	r2, [sp, #20]
 800608c:	2301      	movs	r3, #1
 800608e:	e78e      	b.n	8005fae <_vfprintf_r+0xa3e>
 8006090:	4642      	mov	r2, r8
 8006092:	f01b 0910 	ands.w	r9, fp, #16
 8006096:	f852 8b04 	ldr.w	r8, [r2], #4
 800609a:	9205      	str	r2, [sp, #20]
 800609c:	d001      	beq.n	80060a2 <_vfprintf_r+0xb32>
 800609e:	4699      	mov	r9, r3
 80060a0:	e7f4      	b.n	800608c <_vfprintf_r+0xb1c>
 80060a2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80060a6:	d002      	beq.n	80060ae <_vfprintf_r+0xb3e>
 80060a8:	fa1f f888 	uxth.w	r8, r8
 80060ac:	e7ee      	b.n	800608c <_vfprintf_r+0xb1c>
 80060ae:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 80060b2:	d0eb      	beq.n	800608c <_vfprintf_r+0xb1c>
 80060b4:	fa5f f888 	uxtb.w	r8, r8
 80060b8:	e7f1      	b.n	800609e <_vfprintf_r+0xb2e>
 80060ba:	4b87      	ldr	r3, [pc, #540]	; (80062d8 <_vfprintf_r+0xd68>)
 80060bc:	9312      	str	r3, [sp, #72]	; 0x48
 80060be:	f01b 0320 	ands.w	r3, fp, #32
 80060c2:	d01d      	beq.n	8006100 <_vfprintf_r+0xb90>
 80060c4:	f108 0807 	add.w	r8, r8, #7
 80060c8:	f028 0307 	bic.w	r3, r8, #7
 80060cc:	461a      	mov	r2, r3
 80060ce:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80060d2:	f852 8b08 	ldr.w	r8, [r2], #8
 80060d6:	9205      	str	r2, [sp, #20]
 80060d8:	f01b 0f01 	tst.w	fp, #1
 80060dc:	d00a      	beq.n	80060f4 <_vfprintf_r+0xb84>
 80060de:	ea58 0309 	orrs.w	r3, r8, r9
 80060e2:	d007      	beq.n	80060f4 <_vfprintf_r+0xb84>
 80060e4:	2330      	movs	r3, #48	; 0x30
 80060e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80060f0:	f04b 0b02 	orr.w	fp, fp, #2
 80060f4:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80060f8:	2302      	movs	r3, #2
 80060fa:	e758      	b.n	8005fae <_vfprintf_r+0xa3e>
 80060fc:	4b75      	ldr	r3, [pc, #468]	; (80062d4 <_vfprintf_r+0xd64>)
 80060fe:	e7dd      	b.n	80060bc <_vfprintf_r+0xb4c>
 8006100:	4642      	mov	r2, r8
 8006102:	f01b 0910 	ands.w	r9, fp, #16
 8006106:	f852 8b04 	ldr.w	r8, [r2], #4
 800610a:	9205      	str	r2, [sp, #20]
 800610c:	d001      	beq.n	8006112 <_vfprintf_r+0xba2>
 800610e:	4699      	mov	r9, r3
 8006110:	e7e2      	b.n	80060d8 <_vfprintf_r+0xb68>
 8006112:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006116:	d002      	beq.n	800611e <_vfprintf_r+0xbae>
 8006118:	fa1f f888 	uxth.w	r8, r8
 800611c:	e7dc      	b.n	80060d8 <_vfprintf_r+0xb68>
 800611e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8006122:	d0d9      	beq.n	80060d8 <_vfprintf_r+0xb68>
 8006124:	fa5f f888 	uxtb.w	r8, r8
 8006128:	e7f1      	b.n	800610e <_vfprintf_r+0xb9e>
 800612a:	f1b8 0f0a 	cmp.w	r8, #10
 800612e:	f179 0300 	sbcs.w	r3, r9, #0
 8006132:	d207      	bcs.n	8006144 <_vfprintf_r+0xbd4>
 8006134:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006138:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 800613c:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8006140:	f000 bc2f 	b.w	80069a2 <_vfprintf_r+0x1432>
 8006144:	2300      	movs	r3, #0
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	9b02      	ldr	r3, [sp, #8]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8006152:	9306      	str	r3, [sp, #24]
 8006154:	220a      	movs	r2, #10
 8006156:	2300      	movs	r3, #0
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa fa84 	bl	8000668 <__aeabi_uldivmod>
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	9b06      	ldr	r3, [sp, #24]
 8006168:	3230      	adds	r2, #48	; 0x30
 800616a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800616e:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8006172:	b1db      	cbz	r3, 80061ac <_vfprintf_r+0xc3c>
 8006174:	9b08      	ldr	r3, [sp, #32]
 8006176:	9a03      	ldr	r2, [sp, #12]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d116      	bne.n	80061ac <_vfprintf_r+0xc3c>
 800617e:	2aff      	cmp	r2, #255	; 0xff
 8006180:	d014      	beq.n	80061ac <_vfprintf_r+0xc3c>
 8006182:	f1b8 0f0a 	cmp.w	r8, #10
 8006186:	f179 0300 	sbcs.w	r3, r9, #0
 800618a:	d30f      	bcc.n	80061ac <_vfprintf_r+0xc3c>
 800618c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800618e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006190:	ebaa 0a03 	sub.w	sl, sl, r3
 8006194:	461a      	mov	r2, r3
 8006196:	4650      	mov	r0, sl
 8006198:	f004 fb6f 	bl	800a87a <strncpy>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	b11b      	cbz	r3, 80061aa <_vfprintf_r+0xc3a>
 80061a2:	9b08      	ldr	r3, [sp, #32]
 80061a4:	3301      	adds	r3, #1
 80061a6:	9308      	str	r3, [sp, #32]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	2300      	movs	r3, #0
 80061ae:	220a      	movs	r2, #10
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fa58 	bl	8000668 <__aeabi_uldivmod>
 80061b8:	f1b8 0f0a 	cmp.w	r8, #10
 80061bc:	f179 0300 	sbcs.w	r3, r9, #0
 80061c0:	f0c0 83ef 	bcc.w	80069a2 <_vfprintf_r+0x1432>
 80061c4:	4680      	mov	r8, r0
 80061c6:	4689      	mov	r9, r1
 80061c8:	46d3      	mov	fp, sl
 80061ca:	e7c3      	b.n	8006154 <_vfprintf_r+0xbe4>
 80061cc:	f008 030f 	and.w	r3, r8, #15
 80061d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061d2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80061d6:	5cd3      	ldrb	r3, [r2, r3]
 80061d8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 80061dc:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 80061e0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80061e4:	ea58 0309 	orrs.w	r3, r8, r9
 80061e8:	d1f0      	bne.n	80061cc <_vfprintf_r+0xc5c>
 80061ea:	e3da      	b.n	80069a2 <_vfprintf_r+0x1432>
 80061ec:	b933      	cbnz	r3, 80061fc <_vfprintf_r+0xc8c>
 80061ee:	f01b 0f01 	tst.w	fp, #1
 80061f2:	d003      	beq.n	80061fc <_vfprintf_r+0xc8c>
 80061f4:	2330      	movs	r3, #48	; 0x30
 80061f6:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 80061fa:	e79f      	b.n	800613c <_vfprintf_r+0xbcc>
 80061fc:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8006200:	e3cf      	b.n	80069a2 <_vfprintf_r+0x1432>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8392 	beq.w	800692e <_vfprintf_r+0x13be>
 800620a:	2000      	movs	r0, #0
 800620c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8006210:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8006214:	f8cd 8014 	str.w	r8, [sp, #20]
 8006218:	f7ff bb36 	b.w	8005888 <_vfprintf_r+0x318>
 800621c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006220:	e723      	b.n	800606a <_vfprintf_r+0xafa>
 8006222:	2110      	movs	r1, #16
 8006224:	6061      	str	r1, [r4, #4]
 8006226:	2a07      	cmp	r2, #7
 8006228:	4461      	add	r1, ip
 800622a:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800622e:	dd0a      	ble.n	8006246 <_vfprintf_r+0xcd6>
 8006230:	aa1e      	add	r2, sp, #120	; 0x78
 8006232:	4629      	mov	r1, r5
 8006234:	4630      	mov	r0, r6
 8006236:	9315      	str	r3, [sp, #84]	; 0x54
 8006238:	f006 fd56 	bl	800cce8 <__sprint_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 8353 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006244:	a821      	add	r0, sp, #132	; 0x84
 8006246:	3b10      	subs	r3, #16
 8006248:	4604      	mov	r4, r0
 800624a:	e4dd      	b.n	8005c08 <_vfprintf_r+0x698>
 800624c:	4604      	mov	r4, r0
 800624e:	e4f7      	b.n	8005c40 <_vfprintf_r+0x6d0>
 8006250:	aa1e      	add	r2, sp, #120	; 0x78
 8006252:	4629      	mov	r1, r5
 8006254:	4630      	mov	r0, r6
 8006256:	f006 fd47 	bl	800cce8 <__sprint_r>
 800625a:	2800      	cmp	r0, #0
 800625c:	f040 8344 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006260:	ac21      	add	r4, sp, #132	; 0x84
 8006262:	e4ff      	b.n	8005c64 <_vfprintf_r+0x6f4>
 8006264:	aa1e      	add	r2, sp, #120	; 0x78
 8006266:	4629      	mov	r1, r5
 8006268:	4630      	mov	r0, r6
 800626a:	f006 fd3d 	bl	800cce8 <__sprint_r>
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 833a 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006274:	ac21      	add	r4, sp, #132	; 0x84
 8006276:	e505      	b.n	8005c84 <_vfprintf_r+0x714>
 8006278:	2110      	movs	r1, #16
 800627a:	6061      	str	r1, [r4, #4]
 800627c:	2a07      	cmp	r2, #7
 800627e:	4461      	add	r1, ip
 8006280:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8006284:	dd0a      	ble.n	800629c <_vfprintf_r+0xd2c>
 8006286:	aa1e      	add	r2, sp, #120	; 0x78
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	9313      	str	r3, [sp, #76]	; 0x4c
 800628e:	f006 fd2b 	bl	800cce8 <__sprint_r>
 8006292:	2800      	cmp	r0, #0
 8006294:	f040 8328 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800629a:	a821      	add	r0, sp, #132	; 0x84
 800629c:	3b10      	subs	r3, #16
 800629e:	4604      	mov	r4, r0
 80062a0:	e4f8      	b.n	8005c94 <_vfprintf_r+0x724>
 80062a2:	4604      	mov	r4, r0
 80062a4:	e512      	b.n	8005ccc <_vfprintf_r+0x75c>
 80062a6:	2010      	movs	r0, #16
 80062a8:	4403      	add	r3, r0
 80062aa:	2a07      	cmp	r2, #7
 80062ac:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 80062b0:	6060      	str	r0, [r4, #4]
 80062b2:	dd08      	ble.n	80062c6 <_vfprintf_r+0xd56>
 80062b4:	aa1e      	add	r2, sp, #120	; 0x78
 80062b6:	4629      	mov	r1, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	f006 fd15 	bl	800cce8 <__sprint_r>
 80062be:	2800      	cmp	r0, #0
 80062c0:	f040 8312 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80062c4:	a921      	add	r1, sp, #132	; 0x84
 80062c6:	f1a9 0910 	sub.w	r9, r9, #16
 80062ca:	460c      	mov	r4, r1
 80062cc:	e503      	b.n	8005cd6 <_vfprintf_r+0x766>
 80062ce:	460c      	mov	r4, r1
 80062d0:	e51e      	b.n	8005d10 <_vfprintf_r+0x7a0>
 80062d2:	bf00      	nop
 80062d4:	0800f125 	.word	0x0800f125
 80062d8:	0800f136 	.word	0x0800f136
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	2b65      	cmp	r3, #101	; 0x65
 80062e0:	f340 8252 	ble.w	8006788 <_vfprintf_r+0x1218>
 80062e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	d16c      	bne.n	80063c8 <_vfprintf_r+0xe58>
 80062ee:	4b75      	ldr	r3, [pc, #468]	; (80064c4 <_vfprintf_r+0xf54>)
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	2301      	movs	r3, #1
 80062f4:	4418      	add	r0, r3
 80062f6:	6063      	str	r3, [r4, #4]
 80062f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062fa:	9020      	str	r0, [sp, #128]	; 0x80
 80062fc:	3301      	adds	r3, #1
 80062fe:	2b07      	cmp	r3, #7
 8006300:	931f      	str	r3, [sp, #124]	; 0x7c
 8006302:	dc3a      	bgt.n	800637a <_vfprintf_r+0xe0a>
 8006304:	3408      	adds	r4, #8
 8006306:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006308:	9a03      	ldr	r2, [sp, #12]
 800630a:	4293      	cmp	r3, r2
 800630c:	db03      	blt.n	8006316 <_vfprintf_r+0xda6>
 800630e:	f01b 0f01 	tst.w	fp, #1
 8006312:	f43f ad0d 	beq.w	8005d30 <_vfprintf_r+0x7c0>
 8006316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006322:	4413      	add	r3, r2
 8006324:	9320      	str	r3, [sp, #128]	; 0x80
 8006326:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006328:	3301      	adds	r3, #1
 800632a:	2b07      	cmp	r3, #7
 800632c:	931f      	str	r3, [sp, #124]	; 0x7c
 800632e:	dc2e      	bgt.n	800638e <_vfprintf_r+0xe1e>
 8006330:	3408      	adds	r4, #8
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	1e5f      	subs	r7, r3, #1
 8006336:	2f00      	cmp	r7, #0
 8006338:	f77f acfa 	ble.w	8005d30 <_vfprintf_r+0x7c0>
 800633c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80064c8 <_vfprintf_r+0xf58>
 8006340:	f04f 0910 	mov.w	r9, #16
 8006344:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8006348:	2f10      	cmp	r7, #16
 800634a:	f103 0301 	add.w	r3, r3, #1
 800634e:	f104 0108 	add.w	r1, r4, #8
 8006352:	f8c4 8000 	str.w	r8, [r4]
 8006356:	dc24      	bgt.n	80063a2 <_vfprintf_r+0xe32>
 8006358:	443a      	add	r2, r7
 800635a:	6067      	str	r7, [r4, #4]
 800635c:	9220      	str	r2, [sp, #128]	; 0x80
 800635e:	2b07      	cmp	r3, #7
 8006360:	931f      	str	r3, [sp, #124]	; 0x7c
 8006362:	f340 829d 	ble.w	80068a0 <_vfprintf_r+0x1330>
 8006366:	aa1e      	add	r2, sp, #120	; 0x78
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f006 fcbc 	bl	800cce8 <__sprint_r>
 8006370:	2800      	cmp	r0, #0
 8006372:	f040 82b9 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006376:	ac21      	add	r4, sp, #132	; 0x84
 8006378:	e4da      	b.n	8005d30 <_vfprintf_r+0x7c0>
 800637a:	aa1e      	add	r2, sp, #120	; 0x78
 800637c:	4629      	mov	r1, r5
 800637e:	4630      	mov	r0, r6
 8006380:	f006 fcb2 	bl	800cce8 <__sprint_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	f040 82af 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800638a:	ac21      	add	r4, sp, #132	; 0x84
 800638c:	e7bb      	b.n	8006306 <_vfprintf_r+0xd96>
 800638e:	aa1e      	add	r2, sp, #120	; 0x78
 8006390:	4629      	mov	r1, r5
 8006392:	4630      	mov	r0, r6
 8006394:	f006 fca8 	bl	800cce8 <__sprint_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	f040 82a5 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800639e:	ac21      	add	r4, sp, #132	; 0x84
 80063a0:	e7c7      	b.n	8006332 <_vfprintf_r+0xdc2>
 80063a2:	3210      	adds	r2, #16
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80063aa:	f8c4 9004 	str.w	r9, [r4, #4]
 80063ae:	dd08      	ble.n	80063c2 <_vfprintf_r+0xe52>
 80063b0:	aa1e      	add	r2, sp, #120	; 0x78
 80063b2:	4629      	mov	r1, r5
 80063b4:	4630      	mov	r0, r6
 80063b6:	f006 fc97 	bl	800cce8 <__sprint_r>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f040 8294 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80063c0:	a921      	add	r1, sp, #132	; 0x84
 80063c2:	3f10      	subs	r7, #16
 80063c4:	460c      	mov	r4, r1
 80063c6:	e7bd      	b.n	8006344 <_vfprintf_r+0xdd4>
 80063c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dc7e      	bgt.n	80064cc <_vfprintf_r+0xf5c>
 80063ce:	4b3d      	ldr	r3, [pc, #244]	; (80064c4 <_vfprintf_r+0xf54>)
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	2301      	movs	r3, #1
 80063d4:	4418      	add	r0, r3
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063da:	9020      	str	r0, [sp, #128]	; 0x80
 80063dc:	3301      	adds	r3, #1
 80063de:	2b07      	cmp	r3, #7
 80063e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80063e2:	dc47      	bgt.n	8006474 <_vfprintf_r+0xf04>
 80063e4:	3408      	adds	r4, #8
 80063e6:	9903      	ldr	r1, [sp, #12]
 80063e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80063ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063ec:	430a      	orrs	r2, r1
 80063ee:	f00b 0101 	and.w	r1, fp, #1
 80063f2:	430a      	orrs	r2, r1
 80063f4:	f43f ac9c 	beq.w	8005d30 <_vfprintf_r+0x7c0>
 80063f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063fa:	6022      	str	r2, [r4, #0]
 80063fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063fe:	6062      	str	r2, [r4, #4]
 8006400:	4413      	add	r3, r2
 8006402:	9320      	str	r3, [sp, #128]	; 0x80
 8006404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006406:	3301      	adds	r3, #1
 8006408:	2b07      	cmp	r3, #7
 800640a:	931f      	str	r3, [sp, #124]	; 0x7c
 800640c:	dc3c      	bgt.n	8006488 <_vfprintf_r+0xf18>
 800640e:	f104 0308 	add.w	r3, r4, #8
 8006412:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8006414:	2f00      	cmp	r7, #0
 8006416:	da1c      	bge.n	8006452 <_vfprintf_r+0xee2>
 8006418:	4c2b      	ldr	r4, [pc, #172]	; (80064c8 <_vfprintf_r+0xf58>)
 800641a:	427f      	negs	r7, r7
 800641c:	461a      	mov	r2, r3
 800641e:	f04f 0810 	mov.w	r8, #16
 8006422:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8006426:	2f10      	cmp	r7, #16
 8006428:	f101 0101 	add.w	r1, r1, #1
 800642c:	f103 0308 	add.w	r3, r3, #8
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	dc33      	bgt.n	800649c <_vfprintf_r+0xf2c>
 8006434:	6057      	str	r7, [r2, #4]
 8006436:	2907      	cmp	r1, #7
 8006438:	4407      	add	r7, r0
 800643a:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 800643e:	dd08      	ble.n	8006452 <_vfprintf_r+0xee2>
 8006440:	aa1e      	add	r2, sp, #120	; 0x78
 8006442:	4629      	mov	r1, r5
 8006444:	4630      	mov	r0, r6
 8006446:	f006 fc4f 	bl	800cce8 <__sprint_r>
 800644a:	2800      	cmp	r0, #0
 800644c:	f040 824c 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006450:	ab21      	add	r3, sp, #132	; 0x84
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	9903      	ldr	r1, [sp, #12]
 8006458:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800645a:	f8c3 a000 	str.w	sl, [r3]
 800645e:	440a      	add	r2, r1
 8006460:	9220      	str	r2, [sp, #128]	; 0x80
 8006462:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006464:	3201      	adds	r2, #1
 8006466:	2a07      	cmp	r2, #7
 8006468:	921f      	str	r2, [sp, #124]	; 0x7c
 800646a:	f73f af7c 	bgt.w	8006366 <_vfprintf_r+0xdf6>
 800646e:	f103 0408 	add.w	r4, r3, #8
 8006472:	e45d      	b.n	8005d30 <_vfprintf_r+0x7c0>
 8006474:	aa1e      	add	r2, sp, #120	; 0x78
 8006476:	4629      	mov	r1, r5
 8006478:	4630      	mov	r0, r6
 800647a:	f006 fc35 	bl	800cce8 <__sprint_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	f040 8232 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006484:	ac21      	add	r4, sp, #132	; 0x84
 8006486:	e7ae      	b.n	80063e6 <_vfprintf_r+0xe76>
 8006488:	aa1e      	add	r2, sp, #120	; 0x78
 800648a:	4629      	mov	r1, r5
 800648c:	4630      	mov	r0, r6
 800648e:	f006 fc2b 	bl	800cce8 <__sprint_r>
 8006492:	2800      	cmp	r0, #0
 8006494:	f040 8228 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006498:	ab21      	add	r3, sp, #132	; 0x84
 800649a:	e7ba      	b.n	8006412 <_vfprintf_r+0xea2>
 800649c:	3010      	adds	r0, #16
 800649e:	2907      	cmp	r1, #7
 80064a0:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 80064a4:	f8c2 8004 	str.w	r8, [r2, #4]
 80064a8:	dd08      	ble.n	80064bc <_vfprintf_r+0xf4c>
 80064aa:	aa1e      	add	r2, sp, #120	; 0x78
 80064ac:	4629      	mov	r1, r5
 80064ae:	4630      	mov	r0, r6
 80064b0:	f006 fc1a 	bl	800cce8 <__sprint_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f040 8217 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80064ba:	ab21      	add	r3, sp, #132	; 0x84
 80064bc:	3f10      	subs	r7, #16
 80064be:	461a      	mov	r2, r3
 80064c0:	e7af      	b.n	8006422 <_vfprintf_r+0xeb2>
 80064c2:	bf00      	nop
 80064c4:	0800f147 	.word	0x0800f147
 80064c8:	0800f159 	.word	0x0800f159
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	4543      	cmp	r3, r8
 80064d0:	bfa8      	it	ge
 80064d2:	4643      	movge	r3, r8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	4699      	mov	r9, r3
 80064d8:	dd0a      	ble.n	80064f0 <_vfprintf_r+0xf80>
 80064da:	4418      	add	r0, r3
 80064dc:	e9c4 a300 	strd	sl, r3, [r4]
 80064e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064e2:	9020      	str	r0, [sp, #128]	; 0x80
 80064e4:	3301      	adds	r3, #1
 80064e6:	2b07      	cmp	r3, #7
 80064e8:	931f      	str	r3, [sp, #124]	; 0x7c
 80064ea:	f300 8084 	bgt.w	80065f6 <_vfprintf_r+0x1086>
 80064ee:	3408      	adds	r4, #8
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	bfac      	ite	ge
 80064f6:	eba8 0709 	subge.w	r7, r8, r9
 80064fa:	4647      	movlt	r7, r8
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	dd1b      	ble.n	8006538 <_vfprintf_r+0xfc8>
 8006500:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 800694c <_vfprintf_r+0x13dc>
 8006504:	f8c4 9000 	str.w	r9, [r4]
 8006508:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800650c:	2f10      	cmp	r7, #16
 800650e:	f103 0301 	add.w	r3, r3, #1
 8006512:	f104 0108 	add.w	r1, r4, #8
 8006516:	dc78      	bgt.n	800660a <_vfprintf_r+0x109a>
 8006518:	6067      	str	r7, [r4, #4]
 800651a:	2b07      	cmp	r3, #7
 800651c:	4417      	add	r7, r2
 800651e:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8006522:	f340 8085 	ble.w	8006630 <_vfprintf_r+0x10c0>
 8006526:	aa1e      	add	r2, sp, #120	; 0x78
 8006528:	4629      	mov	r1, r5
 800652a:	4630      	mov	r0, r6
 800652c:	f006 fbdc 	bl	800cce8 <__sprint_r>
 8006530:	2800      	cmp	r0, #0
 8006532:	f040 81d9 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006536:	ac21      	add	r4, sp, #132	; 0x84
 8006538:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800653c:	44d0      	add	r8, sl
 800653e:	d00a      	beq.n	8006556 <_vfprintf_r+0xfe6>
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d176      	bne.n	8006634 <_vfprintf_r+0x10c4>
 8006546:	9b06      	ldr	r3, [sp, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d176      	bne.n	800663a <_vfprintf_r+0x10ca>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	4453      	add	r3, sl
 8006550:	4598      	cmp	r8, r3
 8006552:	bf28      	it	cs
 8006554:	4698      	movcs	r8, r3
 8006556:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006558:	9a03      	ldr	r2, [sp, #12]
 800655a:	4293      	cmp	r3, r2
 800655c:	db02      	blt.n	8006564 <_vfprintf_r+0xff4>
 800655e:	f01b 0f01 	tst.w	fp, #1
 8006562:	d00e      	beq.n	8006582 <_vfprintf_r+0x1012>
 8006564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006570:	4413      	add	r3, r2
 8006572:	9320      	str	r3, [sp, #128]	; 0x80
 8006574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006576:	3301      	adds	r3, #1
 8006578:	2b07      	cmp	r3, #7
 800657a:	931f      	str	r3, [sp, #124]	; 0x7c
 800657c:	f300 80dd 	bgt.w	800673a <_vfprintf_r+0x11ca>
 8006580:	3408      	adds	r4, #8
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	9903      	ldr	r1, [sp, #12]
 8006586:	eb0a 0203 	add.w	r2, sl, r3
 800658a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800658c:	eba2 0208 	sub.w	r2, r2, r8
 8006590:	eba1 0903 	sub.w	r9, r1, r3
 8006594:	4591      	cmp	r9, r2
 8006596:	bfa8      	it	ge
 8006598:	4691      	movge	r9, r2
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	dd0b      	ble.n	80065b8 <_vfprintf_r+0x1048>
 80065a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065a2:	444b      	add	r3, r9
 80065a4:	9320      	str	r3, [sp, #128]	; 0x80
 80065a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065a8:	3301      	adds	r3, #1
 80065aa:	2b07      	cmp	r3, #7
 80065ac:	e9c4 8900 	strd	r8, r9, [r4]
 80065b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80065b2:	f300 80cc 	bgt.w	800674e <_vfprintf_r+0x11de>
 80065b6:	3408      	adds	r4, #8
 80065b8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	f1b9 0f00 	cmp.w	r9, #0
 80065c0:	eba3 0707 	sub.w	r7, r3, r7
 80065c4:	bfa8      	it	ge
 80065c6:	eba7 0709 	subge.w	r7, r7, r9
 80065ca:	2f00      	cmp	r7, #0
 80065cc:	f77f abb0 	ble.w	8005d30 <_vfprintf_r+0x7c0>
 80065d0:	f8df 8378 	ldr.w	r8, [pc, #888]	; 800694c <_vfprintf_r+0x13dc>
 80065d4:	f04f 0910 	mov.w	r9, #16
 80065d8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80065dc:	2f10      	cmp	r7, #16
 80065de:	f103 0301 	add.w	r3, r3, #1
 80065e2:	f104 0108 	add.w	r1, r4, #8
 80065e6:	f8c4 8000 	str.w	r8, [r4]
 80065ea:	f300 80ba 	bgt.w	8006762 <_vfprintf_r+0x11f2>
 80065ee:	6067      	str	r7, [r4, #4]
 80065f0:	4417      	add	r7, r2
 80065f2:	9720      	str	r7, [sp, #128]	; 0x80
 80065f4:	e6b3      	b.n	800635e <_vfprintf_r+0xdee>
 80065f6:	aa1e      	add	r2, sp, #120	; 0x78
 80065f8:	4629      	mov	r1, r5
 80065fa:	4630      	mov	r0, r6
 80065fc:	f006 fb74 	bl	800cce8 <__sprint_r>
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 8171 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006606:	ac21      	add	r4, sp, #132	; 0x84
 8006608:	e772      	b.n	80064f0 <_vfprintf_r+0xf80>
 800660a:	2010      	movs	r0, #16
 800660c:	4402      	add	r2, r0
 800660e:	2b07      	cmp	r3, #7
 8006610:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8006614:	6060      	str	r0, [r4, #4]
 8006616:	dd08      	ble.n	800662a <_vfprintf_r+0x10ba>
 8006618:	aa1e      	add	r2, sp, #120	; 0x78
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	f006 fb63 	bl	800cce8 <__sprint_r>
 8006622:	2800      	cmp	r0, #0
 8006624:	f040 8160 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006628:	a921      	add	r1, sp, #132	; 0x84
 800662a:	3f10      	subs	r7, #16
 800662c:	460c      	mov	r4, r1
 800662e:	e769      	b.n	8006504 <_vfprintf_r+0xf94>
 8006630:	460c      	mov	r4, r1
 8006632:	e781      	b.n	8006538 <_vfprintf_r+0xfc8>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d04f      	beq.n	80066da <_vfprintf_r+0x116a>
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	3b01      	subs	r3, #1
 800663e:	9306      	str	r3, [sp, #24]
 8006640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800664c:	4413      	add	r3, r2
 800664e:	9320      	str	r3, [sp, #128]	; 0x80
 8006650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006652:	3301      	adds	r3, #1
 8006654:	2b07      	cmp	r3, #7
 8006656:	931f      	str	r3, [sp, #124]	; 0x7c
 8006658:	dc46      	bgt.n	80066e8 <_vfprintf_r+0x1178>
 800665a:	3408      	adds	r4, #8
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	9a08      	ldr	r2, [sp, #32]
 8006660:	eb0a 0903 	add.w	r9, sl, r3
 8006664:	eba9 0308 	sub.w	r3, r9, r8
 8006668:	f892 9000 	ldrb.w	r9, [r2]
 800666c:	4599      	cmp	r9, r3
 800666e:	bfa8      	it	ge
 8006670:	4699      	movge	r9, r3
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	dd0a      	ble.n	800668e <_vfprintf_r+0x111e>
 8006678:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800667a:	444b      	add	r3, r9
 800667c:	9320      	str	r3, [sp, #128]	; 0x80
 800667e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006680:	3301      	adds	r3, #1
 8006682:	2b07      	cmp	r3, #7
 8006684:	e9c4 8900 	strd	r8, r9, [r4]
 8006688:	931f      	str	r3, [sp, #124]	; 0x7c
 800668a:	dc37      	bgt.n	80066fc <_vfprintf_r+0x118c>
 800668c:	3408      	adds	r4, #8
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	781f      	ldrb	r7, [r3, #0]
 8006692:	f1b9 0f00 	cmp.w	r9, #0
 8006696:	bfa8      	it	ge
 8006698:	eba7 0709 	subge.w	r7, r7, r9
 800669c:	2f00      	cmp	r7, #0
 800669e:	dd18      	ble.n	80066d2 <_vfprintf_r+0x1162>
 80066a0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80066a4:	48a9      	ldr	r0, [pc, #676]	; (800694c <_vfprintf_r+0x13dc>)
 80066a6:	6020      	str	r0, [r4, #0]
 80066a8:	2f10      	cmp	r7, #16
 80066aa:	f103 0301 	add.w	r3, r3, #1
 80066ae:	f104 0108 	add.w	r1, r4, #8
 80066b2:	dc2d      	bgt.n	8006710 <_vfprintf_r+0x11a0>
 80066b4:	6067      	str	r7, [r4, #4]
 80066b6:	2b07      	cmp	r3, #7
 80066b8:	4417      	add	r7, r2
 80066ba:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80066be:	dd3a      	ble.n	8006736 <_vfprintf_r+0x11c6>
 80066c0:	aa1e      	add	r2, sp, #120	; 0x78
 80066c2:	4629      	mov	r1, r5
 80066c4:	4630      	mov	r0, r6
 80066c6:	f006 fb0f 	bl	800cce8 <__sprint_r>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	f040 810c 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80066d0:	ac21      	add	r4, sp, #132	; 0x84
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	4498      	add	r8, r3
 80066d8:	e732      	b.n	8006540 <_vfprintf_r+0xfd0>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	3b01      	subs	r3, #1
 80066de:	9308      	str	r3, [sp, #32]
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	e7ab      	b.n	8006640 <_vfprintf_r+0x10d0>
 80066e8:	aa1e      	add	r2, sp, #120	; 0x78
 80066ea:	4629      	mov	r1, r5
 80066ec:	4630      	mov	r0, r6
 80066ee:	f006 fafb 	bl	800cce8 <__sprint_r>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f040 80f8 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80066f8:	ac21      	add	r4, sp, #132	; 0x84
 80066fa:	e7af      	b.n	800665c <_vfprintf_r+0x10ec>
 80066fc:	aa1e      	add	r2, sp, #120	; 0x78
 80066fe:	4629      	mov	r1, r5
 8006700:	4630      	mov	r0, r6
 8006702:	f006 faf1 	bl	800cce8 <__sprint_r>
 8006706:	2800      	cmp	r0, #0
 8006708:	f040 80ee 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800670c:	ac21      	add	r4, sp, #132	; 0x84
 800670e:	e7be      	b.n	800668e <_vfprintf_r+0x111e>
 8006710:	2010      	movs	r0, #16
 8006712:	4402      	add	r2, r0
 8006714:	2b07      	cmp	r3, #7
 8006716:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800671a:	6060      	str	r0, [r4, #4]
 800671c:	dd08      	ble.n	8006730 <_vfprintf_r+0x11c0>
 800671e:	aa1e      	add	r2, sp, #120	; 0x78
 8006720:	4629      	mov	r1, r5
 8006722:	4630      	mov	r0, r6
 8006724:	f006 fae0 	bl	800cce8 <__sprint_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	f040 80dd 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800672e:	a921      	add	r1, sp, #132	; 0x84
 8006730:	3f10      	subs	r7, #16
 8006732:	460c      	mov	r4, r1
 8006734:	e7b4      	b.n	80066a0 <_vfprintf_r+0x1130>
 8006736:	460c      	mov	r4, r1
 8006738:	e7cb      	b.n	80066d2 <_vfprintf_r+0x1162>
 800673a:	aa1e      	add	r2, sp, #120	; 0x78
 800673c:	4629      	mov	r1, r5
 800673e:	4630      	mov	r0, r6
 8006740:	f006 fad2 	bl	800cce8 <__sprint_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	f040 80cf 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800674a:	ac21      	add	r4, sp, #132	; 0x84
 800674c:	e719      	b.n	8006582 <_vfprintf_r+0x1012>
 800674e:	aa1e      	add	r2, sp, #120	; 0x78
 8006750:	4629      	mov	r1, r5
 8006752:	4630      	mov	r0, r6
 8006754:	f006 fac8 	bl	800cce8 <__sprint_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	f040 80c5 	bne.w	80068e8 <_vfprintf_r+0x1378>
 800675e:	ac21      	add	r4, sp, #132	; 0x84
 8006760:	e72a      	b.n	80065b8 <_vfprintf_r+0x1048>
 8006762:	3210      	adds	r2, #16
 8006764:	2b07      	cmp	r3, #7
 8006766:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800676a:	f8c4 9004 	str.w	r9, [r4, #4]
 800676e:	dd08      	ble.n	8006782 <_vfprintf_r+0x1212>
 8006770:	aa1e      	add	r2, sp, #120	; 0x78
 8006772:	4629      	mov	r1, r5
 8006774:	4630      	mov	r0, r6
 8006776:	f006 fab7 	bl	800cce8 <__sprint_r>
 800677a:	2800      	cmp	r0, #0
 800677c:	f040 80b4 	bne.w	80068e8 <_vfprintf_r+0x1378>
 8006780:	a921      	add	r1, sp, #132	; 0x84
 8006782:	3f10      	subs	r7, #16
 8006784:	460c      	mov	r4, r1
 8006786:	e727      	b.n	80065d8 <_vfprintf_r+0x1068>
 8006788:	9903      	ldr	r1, [sp, #12]
 800678a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800678c:	2901      	cmp	r1, #1
 800678e:	f100 0001 	add.w	r0, r0, #1
 8006792:	f102 0201 	add.w	r2, r2, #1
 8006796:	f104 0308 	add.w	r3, r4, #8
 800679a:	dc02      	bgt.n	80067a2 <_vfprintf_r+0x1232>
 800679c:	f01b 0f01 	tst.w	fp, #1
 80067a0:	d073      	beq.n	800688a <_vfprintf_r+0x131a>
 80067a2:	2101      	movs	r1, #1
 80067a4:	2a07      	cmp	r2, #7
 80067a6:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 80067aa:	f8c4 a000 	str.w	sl, [r4]
 80067ae:	6061      	str	r1, [r4, #4]
 80067b0:	dd08      	ble.n	80067c4 <_vfprintf_r+0x1254>
 80067b2:	aa1e      	add	r2, sp, #120	; 0x78
 80067b4:	4629      	mov	r1, r5
 80067b6:	4630      	mov	r0, r6
 80067b8:	f006 fa96 	bl	800cce8 <__sprint_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	f040 8093 	bne.w	80068e8 <_vfprintf_r+0x1378>
 80067c2:	ab21      	add	r3, sp, #132	; 0x84
 80067c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067d0:	440a      	add	r2, r1
 80067d2:	9220      	str	r2, [sp, #128]	; 0x80
 80067d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80067d6:	3201      	adds	r2, #1
 80067d8:	2a07      	cmp	r2, #7
 80067da:	921f      	str	r2, [sp, #124]	; 0x7c
 80067dc:	dc25      	bgt.n	800682a <_vfprintf_r+0x12ba>
 80067de:	3308      	adds	r3, #8
 80067e0:	9a03      	ldr	r2, [sp, #12]
 80067e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ea:	f102 34ff 	add.w	r4, r2, #4294967295
 80067ee:	d025      	beq.n	800683c <_vfprintf_r+0x12cc>
 80067f0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80067f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067f4:	f10a 0001 	add.w	r0, sl, #1
 80067f8:	e9c3 0400 	strd	r0, r4, [r3]
 80067fc:	9803      	ldr	r0, [sp, #12]
 80067fe:	3101      	adds	r1, #1
 8006800:	3a01      	subs	r2, #1
 8006802:	4402      	add	r2, r0
 8006804:	2907      	cmp	r1, #7
 8006806:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800680a:	dd47      	ble.n	800689c <_vfprintf_r+0x132c>
 800680c:	aa1e      	add	r2, sp, #120	; 0x78
 800680e:	4629      	mov	r1, r5
 8006810:	4630      	mov	r0, r6
 8006812:	f006 fa69 	bl	800cce8 <__sprint_r>
 8006816:	2800      	cmp	r0, #0
 8006818:	d166      	bne.n	80068e8 <_vfprintf_r+0x1378>
 800681a:	ab21      	add	r3, sp, #132	; 0x84
 800681c:	aa1a      	add	r2, sp, #104	; 0x68
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006822:	605a      	str	r2, [r3, #4]
 8006824:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006826:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006828:	e619      	b.n	800645e <_vfprintf_r+0xeee>
 800682a:	aa1e      	add	r2, sp, #120	; 0x78
 800682c:	4629      	mov	r1, r5
 800682e:	4630      	mov	r0, r6
 8006830:	f006 fa5a 	bl	800cce8 <__sprint_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	d157      	bne.n	80068e8 <_vfprintf_r+0x1378>
 8006838:	ab21      	add	r3, sp, #132	; 0x84
 800683a:	e7d1      	b.n	80067e0 <_vfprintf_r+0x1270>
 800683c:	2c00      	cmp	r4, #0
 800683e:	dded      	ble.n	800681c <_vfprintf_r+0x12ac>
 8006840:	4f42      	ldr	r7, [pc, #264]	; (800694c <_vfprintf_r+0x13dc>)
 8006842:	f04f 0810 	mov.w	r8, #16
 8006846:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800684a:	2c10      	cmp	r4, #16
 800684c:	f102 0201 	add.w	r2, r2, #1
 8006850:	f103 0008 	add.w	r0, r3, #8
 8006854:	601f      	str	r7, [r3, #0]
 8006856:	dc07      	bgt.n	8006868 <_vfprintf_r+0x12f8>
 8006858:	605c      	str	r4, [r3, #4]
 800685a:	2a07      	cmp	r2, #7
 800685c:	440c      	add	r4, r1
 800685e:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8006862:	dcd3      	bgt.n	800680c <_vfprintf_r+0x129c>
 8006864:	4603      	mov	r3, r0
 8006866:	e7d9      	b.n	800681c <_vfprintf_r+0x12ac>
 8006868:	3110      	adds	r1, #16
 800686a:	2a07      	cmp	r2, #7
 800686c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8006870:	f8c3 8004 	str.w	r8, [r3, #4]
 8006874:	dd06      	ble.n	8006884 <_vfprintf_r+0x1314>
 8006876:	aa1e      	add	r2, sp, #120	; 0x78
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f006 fa34 	bl	800cce8 <__sprint_r>
 8006880:	bb90      	cbnz	r0, 80068e8 <_vfprintf_r+0x1378>
 8006882:	a821      	add	r0, sp, #132	; 0x84
 8006884:	3c10      	subs	r4, #16
 8006886:	4603      	mov	r3, r0
 8006888:	e7dd      	b.n	8006846 <_vfprintf_r+0x12d6>
 800688a:	2101      	movs	r1, #1
 800688c:	2a07      	cmp	r2, #7
 800688e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8006892:	f8c4 a000 	str.w	sl, [r4]
 8006896:	6061      	str	r1, [r4, #4]
 8006898:	ddc0      	ble.n	800681c <_vfprintf_r+0x12ac>
 800689a:	e7b7      	b.n	800680c <_vfprintf_r+0x129c>
 800689c:	3308      	adds	r3, #8
 800689e:	e7bd      	b.n	800681c <_vfprintf_r+0x12ac>
 80068a0:	460c      	mov	r4, r1
 80068a2:	f7ff ba45 	b.w	8005d30 <_vfprintf_r+0x7c0>
 80068a6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80068aa:	1a9f      	subs	r7, r3, r2
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f77f aa4d 	ble.w	8005d4c <_vfprintf_r+0x7dc>
 80068b2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8006950 <_vfprintf_r+0x13e0>
 80068b6:	f04f 0910 	mov.w	r9, #16
 80068ba:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80068be:	2f10      	cmp	r7, #16
 80068c0:	f103 0301 	add.w	r3, r3, #1
 80068c4:	f8c4 8000 	str.w	r8, [r4]
 80068c8:	dc18      	bgt.n	80068fc <_vfprintf_r+0x138c>
 80068ca:	6067      	str	r7, [r4, #4]
 80068cc:	2b07      	cmp	r3, #7
 80068ce:	4417      	add	r7, r2
 80068d0:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80068d4:	f77f aa3a 	ble.w	8005d4c <_vfprintf_r+0x7dc>
 80068d8:	aa1e      	add	r2, sp, #120	; 0x78
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f006 fa03 	bl	800cce8 <__sprint_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f43f aa32 	beq.w	8005d4c <_vfprintf_r+0x7dc>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f43f a871 	beq.w	80059d2 <_vfprintf_r+0x462>
 80068f0:	4619      	mov	r1, r3
 80068f2:	4630      	mov	r0, r6
 80068f4:	f002 fab6 	bl	8008e64 <_free_r>
 80068f8:	f7ff b86b 	b.w	80059d2 <_vfprintf_r+0x462>
 80068fc:	3210      	adds	r2, #16
 80068fe:	2b07      	cmp	r3, #7
 8006900:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8006904:	f8c4 9004 	str.w	r9, [r4, #4]
 8006908:	dc02      	bgt.n	8006910 <_vfprintf_r+0x13a0>
 800690a:	3408      	adds	r4, #8
 800690c:	3f10      	subs	r7, #16
 800690e:	e7d4      	b.n	80068ba <_vfprintf_r+0x134a>
 8006910:	aa1e      	add	r2, sp, #120	; 0x78
 8006912:	4629      	mov	r1, r5
 8006914:	4630      	mov	r0, r6
 8006916:	f006 f9e7 	bl	800cce8 <__sprint_r>
 800691a:	2800      	cmp	r0, #0
 800691c:	d1e4      	bne.n	80068e8 <_vfprintf_r+0x1378>
 800691e:	ac21      	add	r4, sp, #132	; 0x84
 8006920:	e7f4      	b.n	800690c <_vfprintf_r+0x139c>
 8006922:	9902      	ldr	r1, [sp, #8]
 8006924:	4630      	mov	r0, r6
 8006926:	f002 fa9d 	bl	8008e64 <_free_r>
 800692a:	f7ff ba27 	b.w	8005d7c <_vfprintf_r+0x80c>
 800692e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006930:	b91b      	cbnz	r3, 800693a <_vfprintf_r+0x13ca>
 8006932:	2300      	movs	r3, #0
 8006934:	931f      	str	r3, [sp, #124]	; 0x7c
 8006936:	f7ff b84c 	b.w	80059d2 <_vfprintf_r+0x462>
 800693a:	aa1e      	add	r2, sp, #120	; 0x78
 800693c:	4629      	mov	r1, r5
 800693e:	4630      	mov	r0, r6
 8006940:	f006 f9d2 	bl	800cce8 <__sprint_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	d0f4      	beq.n	8006932 <_vfprintf_r+0x13c2>
 8006948:	f7ff b843 	b.w	80059d2 <_vfprintf_r+0x462>
 800694c:	0800f159 	.word	0x0800f159
 8006950:	0800f149 	.word	0x0800f149
 8006954:	ea58 0209 	orrs.w	r2, r8, r9
 8006958:	f8cd b008 	str.w	fp, [sp, #8]
 800695c:	f43f ab37 	beq.w	8005fce <_vfprintf_r+0xa5e>
 8006960:	2b01      	cmp	r3, #1
 8006962:	f43f abe2 	beq.w	800612a <_vfprintf_r+0xbba>
 8006966:	2b02      	cmp	r3, #2
 8006968:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800696c:	f43f ac2e 	beq.w	80061cc <_vfprintf_r+0xc5c>
 8006970:	f008 0307 	and.w	r3, r8, #7
 8006974:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8006978:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800697c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8006980:	3330      	adds	r3, #48	; 0x30
 8006982:	ea58 0109 	orrs.w	r1, r8, r9
 8006986:	4652      	mov	r2, sl
 8006988:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800698c:	d1f0      	bne.n	8006970 <_vfprintf_r+0x1400>
 800698e:	9902      	ldr	r1, [sp, #8]
 8006990:	07c8      	lsls	r0, r1, #31
 8006992:	d506      	bpl.n	80069a2 <_vfprintf_r+0x1432>
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d004      	beq.n	80069a2 <_vfprintf_r+0x1432>
 8006998:	2330      	movs	r3, #48	; 0x30
 800699a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800699e:	f1a2 0a02 	sub.w	sl, r2, #2
 80069a2:	ab4a      	add	r3, sp, #296	; 0x128
 80069a4:	46b9      	mov	r9, r7
 80069a6:	eba3 070a 	sub.w	r7, r3, sl
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069b0:	9302      	str	r3, [sp, #8]
 80069b2:	f7fe bfd9 	b.w	8005968 <_vfprintf_r+0x3f8>
 80069b6:	bf00      	nop

080069b8 <__sbprintf>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	460c      	mov	r4, r1
 80069bc:	8989      	ldrh	r1, [r1, #12]
 80069be:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80069c2:	f021 0102 	bic.w	r1, r1, #2
 80069c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80069ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80069cc:	911b      	str	r1, [sp, #108]	; 0x6c
 80069ce:	89e1      	ldrh	r1, [r4, #14]
 80069d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80069d4:	69e1      	ldr	r1, [r4, #28]
 80069d6:	9109      	str	r1, [sp, #36]	; 0x24
 80069d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069da:	910b      	str	r1, [sp, #44]	; 0x2c
 80069dc:	a91c      	add	r1, sp, #112	; 0x70
 80069de:	9102      	str	r1, [sp, #8]
 80069e0:	9106      	str	r1, [sp, #24]
 80069e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069e6:	4606      	mov	r6, r0
 80069e8:	9104      	str	r1, [sp, #16]
 80069ea:	9107      	str	r1, [sp, #28]
 80069ec:	a818      	add	r0, sp, #96	; 0x60
 80069ee:	2100      	movs	r1, #0
 80069f0:	e9cd 3200 	strd	r3, r2, [sp]
 80069f4:	9108      	str	r1, [sp, #32]
 80069f6:	f002 fc93 	bl	8009320 <__retarget_lock_init_recursive>
 80069fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80069fe:	a902      	add	r1, sp, #8
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7fe fdb5 	bl	8005570 <_vfprintf_r>
 8006a06:	1e05      	subs	r5, r0, #0
 8006a08:	db07      	blt.n	8006a1a <__sbprintf+0x62>
 8006a0a:	a902      	add	r1, sp, #8
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f002 f8b3 	bl	8008b78 <_fflush_r>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	bf18      	it	ne
 8006a16:	f04f 35ff 	movne.w	r5, #4294967295
 8006a1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006a1e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006a20:	065b      	lsls	r3, r3, #25
 8006a22:	bf42      	ittt	mi
 8006a24:	89a3      	ldrhmi	r3, [r4, #12]
 8006a26:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8006a2a:	81a3      	strhmi	r3, [r4, #12]
 8006a2c:	f002 fc79 	bl	8009322 <__retarget_lock_close_recursive>
 8006a30:	4628      	mov	r0, r5
 8006a32:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8006a36:	bd70      	pop	{r4, r5, r6, pc}

08006a38 <__svfscanf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b02 	vpush	{d8}
 8006a40:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8006a44:	461e      	mov	r6, r3
 8006a46:	af02      	add	r7, sp, #8
 8006a48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006a4a:	617a      	str	r2, [r7, #20]
 8006a4c:	07da      	lsls	r2, r3, #31
 8006a4e:	ee08 0a10 	vmov	s16, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	d405      	bmi.n	8006a62 <__svfscanf_r+0x2a>
 8006a56:	898b      	ldrh	r3, [r1, #12]
 8006a58:	059b      	lsls	r3, r3, #22
 8006a5a:	d402      	bmi.n	8006a62 <__svfscanf_r+0x2a>
 8006a5c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006a5e:	f002 fc61 	bl	8009324 <__retarget_lock_acquire_recursive>
 8006a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a66:	049d      	lsls	r5, r3, #18
 8006a68:	d406      	bmi.n	8006a78 <__svfscanf_r+0x40>
 8006a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a76:	6663      	str	r3, [r4, #100]	; 0x64
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006a8c:	617a      	str	r2, [r7, #20]
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80d6 	beq.w	8006c42 <__svfscanf_r+0x20a>
 8006a96:	4a91      	ldr	r2, [pc, #580]	; (8006cdc <__svfscanf_r+0x2a4>)
 8006a98:	f813 8002 	ldrb.w	r8, [r3, r2]
 8006a9c:	f018 0808 	ands.w	r8, r8, #8
 8006aa0:	d019      	beq.n	8006ad6 <__svfscanf_r+0x9e>
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dd0e      	ble.n	8006ac6 <__svfscanf_r+0x8e>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	498c      	ldr	r1, [pc, #560]	; (8006cdc <__svfscanf_r+0x2a4>)
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	5c8a      	ldrb	r2, [r1, r2]
 8006ab0:	0710      	lsls	r0, r2, #28
 8006ab2:	d5e8      	bpl.n	8006a86 <__svfscanf_r+0x4e>
 8006ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	3301      	adds	r3, #1
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	6062      	str	r2, [r4, #4]
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	e7ed      	b.n	8006aa2 <__svfscanf_r+0x6a>
 8006ac6:	ee18 0a10 	vmov	r0, s16
 8006aca:	4621      	mov	r1, r4
 8006acc:	f003 fd6a 	bl	800a5a4 <__srefill_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d0e9      	beq.n	8006aa8 <__svfscanf_r+0x70>
 8006ad4:	e7d7      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006ad6:	2b25      	cmp	r3, #37	; 0x25
 8006ad8:	d165      	bne.n	8006ba6 <__svfscanf_r+0x16e>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8006ae0:	46c1      	mov	r9, r8
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	781d      	ldrb	r5, [r3, #0]
 8006ae8:	3101      	adds	r1, #1
 8006aea:	6179      	str	r1, [r7, #20]
 8006aec:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8006af0:	2955      	cmp	r1, #85	; 0x55
 8006af2:	f200 80a6 	bhi.w	8006c42 <__svfscanf_r+0x20a>
 8006af6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006afa:	0056      	.short	0x0056
 8006afc:	00a400a4 	.word	0x00a400a4
 8006b00:	00a400a4 	.word	0x00a400a4
 8006b04:	00a4007d 	.word	0x00a4007d
 8006b08:	00a400a4 	.word	0x00a400a4
 8006b0c:	00a400a4 	.word	0x00a400a4
 8006b10:	00d100d1 	.word	0x00d100d1
 8006b14:	00d100d1 	.word	0x00d100d1
 8006b18:	00d100d1 	.word	0x00d100d1
 8006b1c:	00d100d1 	.word	0x00d100d1
 8006b20:	00d100d1 	.word	0x00d100d1
 8006b24:	00a400a4 	.word	0x00a400a4
 8006b28:	00a400a4 	.word	0x00a400a4
 8006b2c:	00a400a4 	.word	0x00a400a4
 8006b30:	00f700a4 	.word	0x00f700a4
 8006b34:	011b00a4 	.word	0x011b00a4
 8006b38:	00f700db 	.word	0x00f700db
 8006b3c:	00f700f7 	.word	0x00f700f7
 8006b40:	00a400a4 	.word	0x00a400a4
 8006b44:	00a400a4 	.word	0x00a400a4
 8006b48:	00a400a1 	.word	0x00a400a1
 8006b4c:	00df00a4 	.word	0x00df00a4
 8006b50:	00a400a4 	.word	0x00a400a4
 8006b54:	010d00a4 	.word	0x010d00a4
 8006b58:	00a400a4 	.word	0x00a400a4
 8006b5c:	00a400a4 	.word	0x00a400a4
 8006b60:	00a400eb 	.word	0x00a400eb
 8006b64:	011100a4 	.word	0x011100a4
 8006b68:	00a400a4 	.word	0x00a400a4
 8006b6c:	00a400a4 	.word	0x00a400a4
 8006b70:	00f700a4 	.word	0x00f700a4
 8006b74:	011d00a4 	.word	0x011d00a4
 8006b78:	00f700dd 	.word	0x00f700dd
 8006b7c:	00f700f7 	.word	0x00f700f7
 8006b80:	01450094 	.word	0x01450094
 8006b84:	00a400a1 	.word	0x00a400a1
 8006b88:	00c40086 	.word	0x00c40086
 8006b8c:	00e10124 	.word	0x00e10124
 8006b90:	00a40121 	.word	0x00a40121
 8006b94:	010f00a4 	.word	0x010f00a4
 8006b98:	00e700c0 	.word	0x00e700c0
 8006b9c:	00a400a4 	.word	0x00a400a4
 8006ba0:	00a400eb 	.word	0x00a400eb
 8006ba4:	00c0      	.short	0x00c0
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dd0f      	ble.n	8006bcc <__svfscanf_r+0x194>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	7819      	ldrb	r1, [r3, #0]
 8006bb2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	d143      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	6062      	str	r2, [r4, #4]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bca:	e75c      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006bcc:	ee18 0a10 	vmov	r0, s16
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f003 fce7 	bl	800a5a4 <__srefill_r>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0e8      	beq.n	8006bac <__svfscanf_r+0x174>
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 810e 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	bf18      	it	ne
 8006bec:	f04f 33ff 	movne.w	r3, #4294967295
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf2:	e026      	b.n	8006c42 <__svfscanf_r+0x20a>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	ea53 0309 	orrs.w	r3, r3, r9
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfc:	d121      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006bfe:	f04f 0910 	mov.w	r9, #16
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	e76e      	b.n	8006ae4 <__svfscanf_r+0xac>
 8006c06:	f019 0f0f 	tst.w	r9, #15
 8006c0a:	d11a      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006c0c:	7859      	ldrb	r1, [r3, #1]
 8006c0e:	296c      	cmp	r1, #108	; 0x6c
 8006c10:	d104      	bne.n	8006c1c <__svfscanf_r+0x1e4>
 8006c12:	3302      	adds	r3, #2
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	f049 0902 	orr.w	r9, r9, #2
 8006c1a:	e7f2      	b.n	8006c02 <__svfscanf_r+0x1ca>
 8006c1c:	f049 0901 	orr.w	r9, r9, #1
 8006c20:	e7ef      	b.n	8006c02 <__svfscanf_r+0x1ca>
 8006c22:	f019 0f0f 	tst.w	r9, #15
 8006c26:	d10c      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006c28:	7859      	ldrb	r1, [r3, #1]
 8006c2a:	2968      	cmp	r1, #104	; 0x68
 8006c2c:	bf03      	ittte	eq
 8006c2e:	3302      	addeq	r3, #2
 8006c30:	617b      	streq	r3, [r7, #20]
 8006c32:	f049 0908 	orreq.w	r9, r9, #8
 8006c36:	f049 0904 	orrne.w	r9, r9, #4
 8006c3a:	e7e2      	b.n	8006c02 <__svfscanf_r+0x1ca>
 8006c3c:	f019 0f0f 	tst.w	r9, #15
 8006c40:	d0e9      	beq.n	8006c16 <__svfscanf_r+0x1de>
 8006c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c44:	07da      	lsls	r2, r3, #31
 8006c46:	d405      	bmi.n	8006c54 <__svfscanf_r+0x21c>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	059b      	lsls	r3, r3, #22
 8006c4c:	d402      	bmi.n	8006c54 <__svfscanf_r+0x21c>
 8006c4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c50:	f002 fb69 	bl	8009326 <__retarget_lock_release_recursive>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	b143      	cbz	r3, 8006c6a <__svfscanf_r+0x232>
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f001 8092 	beq.w	8007d84 <__svfscanf_r+0x134c>
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f041 8090 	bne.w	8007d8a <__svfscanf_r+0x1352>
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6c:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8006c70:	46bd      	mov	sp, r7
 8006c72:	ecbd 8b02 	vpop	{d8}
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	f019 0f0f 	tst.w	r9, #15
 8006c7e:	d0c0      	beq.n	8006c02 <__svfscanf_r+0x1ca>
 8006c80:	e7df      	b.n	8006c42 <__svfscanf_r+0x20a>
 8006c82:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8006c86:	d1dc      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006c88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c8a:	b921      	cbnz	r1, 8006c96 <__svfscanf_r+0x25e>
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	a902      	add	r1, sp, #8
 8006c90:	e9c1 3300 	strd	r3, r3, [r1]
 8006c94:	6379      	str	r1, [r7, #52]	; 0x34
 8006c96:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8006c9a:	e7b2      	b.n	8006c02 <__svfscanf_r+0x1ca>
 8006c9c:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8006ca0:	d1cf      	bne.n	8006c42 <__svfscanf_r+0x20a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	fb02 5503 	mla	r5, r2, r3, r5
 8006ca8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30
 8006cae:	e7a8      	b.n	8006c02 <__svfscanf_r+0x1ca>
 8006cb0:	f049 0901 	orr.w	r9, r9, #1
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <__svfscanf_r+0x2a8>)
 8006cb6:	e008      	b.n	8006cca <__svfscanf_r+0x292>
 8006cb8:	f049 0901 	orr.w	r9, r9, #1
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <__svfscanf_r+0x2ac>)
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	2503      	movs	r5, #3
 8006cc6:	e010      	b.n	8006cea <__svfscanf_r+0x2b2>
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <__svfscanf_r+0x2ac>)
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	230a      	movs	r3, #10
 8006cce:	e7f8      	b.n	8006cc2 <__svfscanf_r+0x28a>
 8006cd0:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8006cd4:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <__svfscanf_r+0x2ac>)
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	2310      	movs	r3, #16
 8006cda:	e7f2      	b.n	8006cc2 <__svfscanf_r+0x28a>
 8006cdc:	0800f191 	.word	0x0800f191
 8006ce0:	080054d5 	.word	0x080054d5
 8006ce4:	0800b665 	.word	0x0800b665
 8006ce8:	2504      	movs	r5, #4
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd4d      	ble.n	8006d8c <__svfscanf_r+0x354>
 8006cf0:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006cf4:	d105      	bne.n	8006d02 <__svfscanf_r+0x2ca>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	49a3      	ldr	r1, [pc, #652]	; (8006f88 <__svfscanf_r+0x550>)
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	5c52      	ldrb	r2, [r2, r1]
 8006cfe:	0711      	lsls	r1, r2, #28
 8006d00:	d44c      	bmi.n	8006d9c <__svfscanf_r+0x364>
 8006d02:	3d01      	subs	r5, #1
 8006d04:	2d03      	cmp	r5, #3
 8006d06:	d85c      	bhi.n	8006dc2 <__svfscanf_r+0x38a>
 8006d08:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006d0c:	037801ba 	.word	0x037801ba
 8006d10:	06170524 	.word	0x06170524
 8006d14:	f049 0901 	orr.w	r9, r9, #1
 8006d18:	2502      	movs	r5, #2
 8006d1a:	e7e6      	b.n	8006cea <__svfscanf_r+0x2b2>
 8006d1c:	6979      	ldr	r1, [r7, #20]
 8006d1e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006d22:	f003 fd09 	bl	800a738 <__sccl>
 8006d26:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8006d2a:	6178      	str	r0, [r7, #20]
 8006d2c:	2501      	movs	r5, #1
 8006d2e:	e7dc      	b.n	8006cea <__svfscanf_r+0x2b2>
 8006d30:	f049 0901 	orr.w	r9, r9, #1
 8006d34:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8006d38:	2500      	movs	r5, #0
 8006d3a:	e7d6      	b.n	8006cea <__svfscanf_r+0x2b2>
 8006d3c:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8006d40:	e7c8      	b.n	8006cd4 <__svfscanf_r+0x29c>
 8006d42:	f019 0f10 	tst.w	r9, #16
 8006d46:	f47f ae9e 	bne.w	8006a86 <__svfscanf_r+0x4e>
 8006d4a:	f019 0f08 	tst.w	r9, #8
 8006d4e:	f856 3b04 	ldr.w	r3, [r6], #4
 8006d52:	d002      	beq.n	8006d5a <__svfscanf_r+0x322>
 8006d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e695      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006d5a:	f019 0f04 	tst.w	r9, #4
 8006d5e:	d002      	beq.n	8006d66 <__svfscanf_r+0x32e>
 8006d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e68f      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006d66:	f019 0f01 	tst.w	r9, #1
 8006d6a:	d002      	beq.n	8006d72 <__svfscanf_r+0x33a>
 8006d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e689      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006d72:	f019 0f02 	tst.w	r9, #2
 8006d76:	d0f9      	beq.n	8006d6c <__svfscanf_r+0x334>
 8006d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7c:	17d2      	asrs	r2, r2, #31
 8006d7e:	e9c3 1200 	strd	r1, r2, [r3]
 8006d82:	e680      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006d84:	4b81      	ldr	r3, [pc, #516]	; (8006f8c <__svfscanf_r+0x554>)
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e79a      	b.n	8006cc2 <__svfscanf_r+0x28a>
 8006d8c:	ee18 0a10 	vmov	r0, s16
 8006d90:	4621      	mov	r1, r4
 8006d92:	f003 fc07 	bl	800a5a4 <__srefill_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d0aa      	beq.n	8006cf0 <__svfscanf_r+0x2b8>
 8006d9a:	e71e      	b.n	8006bda <__svfscanf_r+0x1a2>
 8006d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9e:	3201      	adds	r2, #1
 8006da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da2:	6862      	ldr	r2, [r4, #4]
 8006da4:	3a01      	subs	r2, #1
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	6062      	str	r2, [r4, #4]
 8006daa:	dd02      	ble.n	8006db2 <__svfscanf_r+0x37a>
 8006dac:	3301      	adds	r3, #1
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	e7a1      	b.n	8006cf6 <__svfscanf_r+0x2be>
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	4621      	mov	r1, r4
 8006db8:	f003 fbf4 	bl	800a5a4 <__srefill_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d09a      	beq.n	8006cf6 <__svfscanf_r+0x2be>
 8006dc0:	e70b      	b.n	8006bda <__svfscanf_r+0x1a2>
 8006dc2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8006dc4:	2d01      	cmp	r5, #1
 8006dc6:	bf38      	it	cc
 8006dc8:	2501      	movcc	r5, #1
 8006dca:	f019 0801 	ands.w	r8, r9, #1
 8006dce:	f009 0b10 	and.w	fp, r9, #16
 8006dd2:	f000 80dd 	beq.w	8006f90 <__svfscanf_r+0x558>
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	f040 809a 	bne.w	8006f12 <__svfscanf_r+0x4da>
 8006dde:	4633      	mov	r3, r6
 8006de0:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006de4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dea:	f000 8099 	beq.w	8006f20 <__svfscanf_r+0x4e8>
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	f43f af27 	beq.w	8006c42 <__svfscanf_r+0x20a>
 8006df4:	2080      	movs	r0, #128	; 0x80
 8006df6:	f002 fb03 	bl	8009400 <malloc>
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	b910      	cbnz	r0, 8006e04 <__svfscanf_r+0x3cc>
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	e6f5      	b.n	8006bf0 <__svfscanf_r+0x1b8>
 8006e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e06:	6030      	str	r0, [r6, #0]
 8006e08:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006e0c:	889b      	ldrh	r3, [r3, #4]
 8006e0e:	4599      	cmp	r9, r3
 8006e10:	d312      	bcc.n	8006e38 <__svfscanf_r+0x400>
 8006e12:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d8f1      	bhi.n	8006dfe <__svfscanf_r+0x3c6>
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	fa1f fa83 	uxth.w	sl, r3
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	f003 fa06 	bl	800a238 <realloc>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d0e6      	beq.n	8006dfe <__svfscanf_r+0x3c6>
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	6018      	str	r0, [r3, #0]
 8006e34:	f8a3 a004 	strh.w	sl, [r3, #4]
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f109 0201 	add.w	r2, r9, #1
 8006e42:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8006e46:	46b2      	mov	sl, r6
 8006e48:	80ca      	strh	r2, [r1, #6]
 8006e4a:	4646      	mov	r6, r8
 8006e4c:	f04f 0920 	mov.w	r9, #32
 8006e50:	2200      	movs	r2, #0
 8006e52:	627a      	str	r2, [r7, #36]	; 0x24
 8006e54:	f002 fa5a 	bl	800930c <__locale_mb_cur_max>
 8006e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5a:	4290      	cmp	r0, r2
 8006e5c:	f43f aebd 	beq.w	8006bda <__svfscanf_r+0x1a2>
 8006e60:	6821      	ldr	r1, [r4, #0]
 8006e62:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8006e66:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006e6a:	f80c 0002 	strb.w	r0, [ip, r2]
 8006e6e:	1c53      	adds	r3, r2, #1
 8006e70:	6862      	ldr	r2, [r4, #4]
 8006e72:	3a01      	subs	r2, #1
 8006e74:	e9c4 1200 	strd	r1, r2, [r4]
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	2a03      	cmp	r2, #3
 8006e7c:	d102      	bne.n	8006e84 <__svfscanf_r+0x44c>
 8006e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e80:	2a04      	cmp	r2, #4
 8006e82:	d007      	beq.n	8006e94 <__svfscanf_r+0x45c>
 8006e84:	2208      	movs	r2, #8
 8006e86:	2100      	movs	r1, #0
 8006e88:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	f7fe f96f 	bl	8005170 <memset>
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
 8006e96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e9a:	9200      	str	r2, [sp, #0]
 8006e9c:	ee18 0a10 	vmov	r0, s16
 8006ea0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	f002 fcf7 	bl	8009898 <_mbrtowc_r>
 8006eaa:	1c42      	adds	r2, r0, #1
 8006eac:	6238      	str	r0, [r7, #32]
 8006eae:	f43f ae94 	beq.w	8006bda <__svfscanf_r+0x1a2>
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d137      	bne.n	8006f28 <__svfscanf_r+0x4f0>
 8006eb8:	f1bb 0f00 	cmp.w	fp, #0
 8006ebc:	d101      	bne.n	8006ec2 <__svfscanf_r+0x48a>
 8006ebe:	f8c6 b000 	str.w	fp, [r6]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec4:	441a      	add	r2, r3
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d102      	bne.n	8006ed4 <__svfscanf_r+0x49c>
 8006ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d000      	beq.n	8006ed6 <__svfscanf_r+0x49e>
 8006ed4:	3d01      	subs	r5, #1
 8006ed6:	f1bb 0f00 	cmp.w	fp, #0
 8006eda:	d118      	bne.n	8006f0e <__svfscanf_r+0x4d6>
 8006edc:	f1ba 0f00 	cmp.w	sl, #0
 8006ee0:	d014      	beq.n	8006f0c <__svfscanf_r+0x4d4>
 8006ee2:	eba6 0308 	sub.w	r3, r6, r8
 8006ee6:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8006eea:	d80f      	bhi.n	8006f0c <__svfscanf_r+0x4d4>
 8006eec:	4640      	mov	r0, r8
 8006eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef4:	f003 f9a0 	bl	800a238 <realloc>
 8006ef8:	4680      	mov	r8, r0
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f af7f 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	f8ca 0000 	str.w	r0, [sl]
 8006f06:	18c6      	adds	r6, r0, r3
 8006f08:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006f0c:	3604      	adds	r6, #4
 8006f0e:	2200      	movs	r2, #0
 8006f10:	e00e      	b.n	8006f30 <__svfscanf_r+0x4f8>
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	633e      	str	r6, [r7, #48]	; 0x30
 8006f18:	46c8      	mov	r8, r9
 8006f1a:	46ca      	mov	sl, r9
 8006f1c:	464e      	mov	r6, r9
 8006f1e:	e797      	b.n	8006e50 <__svfscanf_r+0x418>
 8006f20:	46d9      	mov	r9, fp
 8006f22:	46d8      	mov	r8, fp
 8006f24:	46da      	mov	sl, fp
 8006f26:	e793      	b.n	8006e50 <__svfscanf_r+0x418>
 8006f28:	6a3a      	ldr	r2, [r7, #32]
 8006f2a:	3202      	adds	r2, #2
 8006f2c:	d1c9      	bne.n	8006ec2 <__svfscanf_r+0x48a>
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dc15      	bgt.n	8006f62 <__svfscanf_r+0x52a>
 8006f36:	ee18 0a10 	vmov	r0, s16
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f3e:	f003 fb31 	bl	800a5a4 <__srefill_r>
 8006f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f44:	b168      	cbz	r0, 8006f62 <__svfscanf_r+0x52a>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	f47f ae47 	bne.w	8006bda <__svfscanf_r+0x1a2>
 8006f4c:	f1ba 0f00 	cmp.w	sl, #0
 8006f50:	d10b      	bne.n	8006f6a <__svfscanf_r+0x532>
 8006f52:	f1bb 0f00 	cmp.w	fp, #0
 8006f56:	d102      	bne.n	8006f5e <__svfscanf_r+0x526>
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f5e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8006f60:	e591      	b.n	8006a86 <__svfscanf_r+0x4e>
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	f47f af75 	bne.w	8006e52 <__svfscanf_r+0x41a>
 8006f68:	e7f0      	b.n	8006f4c <__svfscanf_r+0x514>
 8006f6a:	eba6 0108 	sub.w	r1, r6, r8
 8006f6e:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8006f72:	d9ee      	bls.n	8006f52 <__svfscanf_r+0x51a>
 8006f74:	f8da 0000 	ldr.w	r0, [sl]
 8006f78:	f003 f95e 	bl	800a238 <realloc>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0e8      	beq.n	8006f52 <__svfscanf_r+0x51a>
 8006f80:	f8ca 0000 	str.w	r0, [sl]
 8006f84:	e7e5      	b.n	8006f52 <__svfscanf_r+0x51a>
 8006f86:	bf00      	nop
 8006f88:	0800f191 	.word	0x0800f191
 8006f8c:	080054d5 	.word	0x080054d5
 8006f90:	f1bb 0f00 	cmp.w	fp, #0
 8006f94:	d01b      	beq.n	8006fce <__svfscanf_r+0x596>
 8006f96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	dd11      	ble.n	8006fc2 <__svfscanf_r+0x58a>
 8006f9e:	4498      	add	r8, r3
 8006fa0:	1aed      	subs	r5, r5, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	ee18 0a10 	vmov	r0, s16
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	4621      	mov	r1, r4
 8006fac:	f003 fafa 	bl	800a5a4 <__srefill_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0f0      	beq.n	8006f96 <__svfscanf_r+0x55e>
 8006fb4:	f1b8 0f00 	cmp.w	r8, #0
 8006fb8:	f43f ae0f 	beq.w	8006bda <__svfscanf_r+0x1a2>
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	4443      	add	r3, r8
 8006fc0:	e602      	b.n	8006bc8 <__svfscanf_r+0x190>
 8006fc2:	1b5b      	subs	r3, r3, r5
 8006fc4:	442a      	add	r2, r5
 8006fc6:	44a8      	add	r8, r5
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	6022      	str	r2, [r4, #0]
 8006fcc:	e7f6      	b.n	8006fbc <__svfscanf_r+0x584>
 8006fce:	46b0      	mov	r8, r6
 8006fd0:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8006fd4:	f858 6b04 	ldr.w	r6, [r8], #4
 8006fd8:	d031      	beq.n	800703e <__svfscanf_r+0x606>
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	f43f ae31 	beq.w	8006c42 <__svfscanf_r+0x20a>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f002 fa0d 	bl	8009400 <malloc>
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f af08 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8006ff6:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8006ffa:	45cb      	cmp	fp, r9
 8006ffc:	d315      	bcc.n	800702a <__svfscanf_r+0x5f2>
 8006ffe:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8007002:	4599      	cmp	r9, r3
 8007004:	f63f aefb 	bhi.w	8006dfe <__svfscanf_r+0x3c6>
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	f109 0908 	add.w	r9, r9, #8
 800700e:	fa1f f989 	uxth.w	r9, r9
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8007018:	f003 f90e 	bl	800a238 <realloc>
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f aeee 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	6018      	str	r0, [r3, #0]
 8007026:	f8a3 9004 	strh.w	r9, [r3, #4]
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f10b 0201 	add.w	r2, fp, #1
 8007034:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8007038:	46b1      	mov	r9, r6
 800703a:	80ca      	strh	r2, [r1, #6]
 800703c:	4656      	mov	r6, sl
 800703e:	4631      	mov	r1, r6
 8007040:	ee18 0a10 	vmov	r0, s16
 8007044:	9400      	str	r4, [sp, #0]
 8007046:	462b      	mov	r3, r5
 8007048:	2201      	movs	r2, #1
 800704a:	f001 fe4f 	bl	8008cec <_fread_r>
 800704e:	4606      	mov	r6, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f adc2 	beq.w	8006bda <__svfscanf_r+0x1a2>
 8007056:	f1b9 0f00 	cmp.w	r9, #0
 800705a:	d009      	beq.n	8007070 <__svfscanf_r+0x638>
 800705c:	4285      	cmp	r5, r0
 800705e:	d907      	bls.n	8007070 <__svfscanf_r+0x638>
 8007060:	4601      	mov	r1, r0
 8007062:	f8d9 0000 	ldr.w	r0, [r9]
 8007066:	f003 f8e7 	bl	800a238 <realloc>
 800706a:	b108      	cbz	r0, 8007070 <__svfscanf_r+0x638>
 800706c:	f8c9 0000 	str.w	r0, [r9]
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	4433      	add	r3, r6
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	3301      	adds	r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
 800707c:	4646      	mov	r6, r8
 800707e:	e502      	b.n	8006a86 <__svfscanf_r+0x4e>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf08      	it	eq
 8007086:	f04f 33ff 	moveq.w	r3, #4294967295
 800708a:	f019 0501 	ands.w	r5, r9, #1
 800708e:	633b      	str	r3, [r7, #48]	; 0x30
 8007090:	f009 0b10 	and.w	fp, r9, #16
 8007094:	f000 8107 	beq.w	80072a6 <__svfscanf_r+0x86e>
 8007098:	f1bb 0f00 	cmp.w	fp, #0
 800709c:	f040 80a7 	bne.w	80071ee <__svfscanf_r+0x7b6>
 80070a0:	4633      	mov	r3, r6
 80070a2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80070a6:	f853 5b04 	ldr.w	r5, [r3], #4
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	f000 80a8 	beq.w	8007200 <__svfscanf_r+0x7c8>
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	f43f adc6 	beq.w	8006c42 <__svfscanf_r+0x20a>
 80070b6:	2080      	movs	r0, #128	; 0x80
 80070b8:	f002 f9a2 	bl	8009400 <malloc>
 80070bc:	4680      	mov	r8, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f ae9d 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c6:	6028      	str	r0, [r5, #0]
 80070c8:	88de      	ldrh	r6, [r3, #6]
 80070ca:	889b      	ldrh	r3, [r3, #4]
 80070cc:	429e      	cmp	r6, r3
 80070ce:	d314      	bcc.n	80070fa <__svfscanf_r+0x6c2>
 80070d0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80070d4:	4293      	cmp	r3, r2
 80070d6:	f63f ae92 	bhi.w	8006dfe <__svfscanf_r+0x3c6>
 80070da:	3308      	adds	r3, #8
 80070dc:	fa1f f983 	uxth.w	r9, r3
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e2:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	f003 f8a6 	bl	800a238 <realloc>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f43f ae86 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 80070f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	f8a3 9004 	strh.w	r9, [r3, #4]
 80070fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	627d      	str	r5, [r7, #36]	; 0x24
 8007102:	1c72      	adds	r2, r6, #1
 8007104:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8007108:	80ca      	strh	r2, [r1, #6]
 800710a:	4645      	mov	r5, r8
 800710c:	f04f 0a20 	mov.w	sl, #32
 8007110:	2600      	movs	r6, #0
 8007112:	f002 f8fb 	bl	800930c <__locale_mb_cur_max>
 8007116:	42b0      	cmp	r0, r6
 8007118:	f43f ad5f 	beq.w	8006bda <__svfscanf_r+0x1a2>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007126:	558a      	strb	r2, [r1, r6]
 8007128:	6862      	ldr	r2, [r4, #4]
 800712a:	3a01      	subs	r2, #1
 800712c:	e9c4 3200 	strd	r3, r2, [r4]
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b03      	cmp	r3, #3
 8007134:	f106 0901 	add.w	r9, r6, #1
 8007138:	d102      	bne.n	8007140 <__svfscanf_r+0x708>
 800713a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713c:	2b04      	cmp	r3, #4
 800713e:	d005      	beq.n	800714c <__svfscanf_r+0x714>
 8007140:	2208      	movs	r2, #8
 8007142:	2100      	movs	r1, #0
 8007144:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007148:	f7fe f812 	bl	8005170 <memset>
 800714c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	ee18 0a10 	vmov	r0, s16
 8007156:	464b      	mov	r3, r9
 8007158:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800715c:	4629      	mov	r1, r5
 800715e:	f002 fb9b 	bl	8009898 <_mbrtowc_r>
 8007162:	4603      	mov	r3, r0
 8007164:	6238      	str	r0, [r7, #32]
 8007166:	1c58      	adds	r0, r3, #1
 8007168:	f43f ad37 	beq.w	8006bda <__svfscanf_r+0x1a2>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d14c      	bne.n	800720a <__svfscanf_r+0x7d2>
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	682e      	ldr	r6, [r5, #0]
 8007174:	1c71      	adds	r1, r6, #1
 8007176:	d059      	beq.n	800722c <__svfscanf_r+0x7f4>
 8007178:	2208      	movs	r2, #8
 800717a:	2100      	movs	r1, #0
 800717c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8007180:	f7fd fff6 	bl	8005170 <memset>
 8007184:	4b9c      	ldr	r3, [pc, #624]	; (80073f8 <__svfscanf_r+0x9c0>)
 8007186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	4632      	mov	r2, r6
 800718e:	ee18 0a10 	vmov	r0, s16
 8007192:	68fe      	ldr	r6, [r7, #12]
 8007194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007198:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800719c:	47b0      	blx	r6
 800719e:	2801      	cmp	r0, #1
 80071a0:	d146      	bne.n	8007230 <__svfscanf_r+0x7f8>
 80071a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d14b      	bne.n	8007248 <__svfscanf_r+0x810>
 80071b0:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 80071b4:	f1b9 0f00 	cmp.w	r9, #0
 80071b8:	d13c      	bne.n	8007234 <__svfscanf_r+0x7fc>
 80071ba:	f1bb 0f00 	cmp.w	fp, #0
 80071be:	d114      	bne.n	80071ea <__svfscanf_r+0x7b2>
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	f8c5 b000 	str.w	fp, [r5]
 80071c6:	b16b      	cbz	r3, 80071e4 <__svfscanf_r+0x7ac>
 80071c8:	eba5 0108 	sub.w	r1, r5, r8
 80071cc:	108b      	asrs	r3, r1, #2
 80071ce:	3301      	adds	r3, #1
 80071d0:	459a      	cmp	sl, r3
 80071d2:	d907      	bls.n	80071e4 <__svfscanf_r+0x7ac>
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	3104      	adds	r1, #4
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f003 f82d 	bl	800a238 <realloc>
 80071de:	b108      	cbz	r0, 80071e4 <__svfscanf_r+0x7ac>
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	6018      	str	r0, [r3, #0]
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	3301      	adds	r3, #1
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ea:	693e      	ldr	r6, [r7, #16]
 80071ec:	e44b      	b.n	8006a86 <__svfscanf_r+0x4e>
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	613e      	str	r6, [r7, #16]
 80071f4:	46d0      	mov	r8, sl
 80071f6:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 80071fa:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80071fe:	e787      	b.n	8007110 <__svfscanf_r+0x6d8>
 8007200:	46da      	mov	sl, fp
 8007202:	46d8      	mov	r8, fp
 8007204:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8007208:	e782      	b.n	8007110 <__svfscanf_r+0x6d8>
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	3302      	adds	r3, #2
 800720e:	d1b0      	bne.n	8007172 <__svfscanf_r+0x73a>
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc42      	bgt.n	800729c <__svfscanf_r+0x864>
 8007216:	ee18 0a10 	vmov	r0, s16
 800721a:	4621      	mov	r1, r4
 800721c:	f003 f9c2 	bl	800a5a4 <__srefill_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	d03b      	beq.n	800729c <__svfscanf_r+0x864>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	d0c7      	beq.n	80071ba <__svfscanf_r+0x782>
 800722a:	e4d6      	b.n	8006bda <__svfscanf_r+0x1a2>
 800722c:	4632      	mov	r2, r6
 800722e:	e7ba      	b.n	80071a6 <__svfscanf_r+0x76e>
 8007230:	2200      	movs	r2, #0
 8007232:	e7b8      	b.n	80071a6 <__svfscanf_r+0x76e>
 8007234:	f109 39ff 	add.w	r9, r9, #4294967295
 8007238:	ee18 0a10 	vmov	r0, s16
 800723c:	f816 1009 	ldrb.w	r1, [r6, r9]
 8007240:	4622      	mov	r2, r4
 8007242:	f005 fcc2 	bl	800cbca <_ungetc_r>
 8007246:	e7b5      	b.n	80071b4 <__svfscanf_r+0x77c>
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	444b      	add	r3, r9
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d102      	bne.n	800725a <__svfscanf_r+0x822>
 8007254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007256:	2b04      	cmp	r3, #4
 8007258:	d002      	beq.n	8007260 <__svfscanf_r+0x828>
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	3b01      	subs	r3, #1
 800725e:	633b      	str	r3, [r7, #48]	; 0x30
 8007260:	f1bb 0f00 	cmp.w	fp, #0
 8007264:	d117      	bne.n	8007296 <__svfscanf_r+0x85e>
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	3504      	adds	r5, #4
 800726a:	b1a3      	cbz	r3, 8007296 <__svfscanf_r+0x85e>
 800726c:	eba5 0608 	sub.w	r6, r5, r8
 8007270:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 8007274:	d80d      	bhi.n	8007292 <__svfscanf_r+0x85a>
 8007276:	4640      	mov	r0, r8
 8007278:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800727c:	f002 ffdc 	bl	800a238 <realloc>
 8007280:	4680      	mov	r8, r0
 8007282:	2800      	cmp	r0, #0
 8007284:	f43f adbb 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	1985      	adds	r5, r0, r6
 800728c:	6018      	str	r0, [r3, #0]
 800728e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8007292:	46d9      	mov	r9, fp
 8007294:	e7bc      	b.n	8007210 <__svfscanf_r+0x7d8>
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	e7b9      	b.n	8007210 <__svfscanf_r+0x7d8>
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d08b      	beq.n	80071ba <__svfscanf_r+0x782>
 80072a2:	464e      	mov	r6, r9
 80072a4:	e735      	b.n	8007112 <__svfscanf_r+0x6da>
 80072a6:	f1bb 0f00 	cmp.w	fp, #0
 80072aa:	d01d      	beq.n	80072e8 <__svfscanf_r+0x8b0>
 80072ac:	f107 0850 	add.w	r8, r7, #80	; 0x50
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	f818 2002 	ldrb.w	r2, [r8, r2]
 80072b8:	b90a      	cbnz	r2, 80072be <__svfscanf_r+0x886>
 80072ba:	b995      	cbnz	r5, 80072e2 <__svfscanf_r+0x8aa>
 80072bc:	e4c1      	b.n	8006c42 <__svfscanf_r+0x20a>
 80072be:	3301      	adds	r3, #1
 80072c0:	6862      	ldr	r2, [r4, #4]
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	3501      	adds	r5, #1
 80072c8:	3a01      	subs	r2, #1
 80072ca:	429d      	cmp	r5, r3
 80072cc:	6062      	str	r2, [r4, #4]
 80072ce:	d008      	beq.n	80072e2 <__svfscanf_r+0x8aa>
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	dced      	bgt.n	80072b0 <__svfscanf_r+0x878>
 80072d4:	ee18 0a10 	vmov	r0, s16
 80072d8:	4621      	mov	r1, r4
 80072da:	f003 f963 	bl	800a5a4 <__srefill_r>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0e6      	beq.n	80072b0 <__svfscanf_r+0x878>
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	442b      	add	r3, r5
 80072e6:	e46f      	b.n	8006bc8 <__svfscanf_r+0x190>
 80072e8:	46b3      	mov	fp, r6
 80072ea:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 80072ee:	f85b 6b04 	ldr.w	r6, [fp], #4
 80072f2:	d07f      	beq.n	80073f4 <__svfscanf_r+0x9bc>
 80072f4:	2e00      	cmp	r6, #0
 80072f6:	f43f aca4 	beq.w	8006c42 <__svfscanf_r+0x20a>
 80072fa:	2020      	movs	r0, #32
 80072fc:	f002 f880 	bl	8009400 <malloc>
 8007300:	4680      	mov	r8, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	f43f ad7b 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	6030      	str	r0, [r6, #0]
 800730c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8007310:	889d      	ldrh	r5, [r3, #4]
 8007312:	45a9      	cmp	r9, r5
 8007314:	d311      	bcc.n	800733a <__svfscanf_r+0x902>
 8007316:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800731a:	429d      	cmp	r5, r3
 800731c:	f63f ad6f 	bhi.w	8006dfe <__svfscanf_r+0x3c6>
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	3508      	adds	r5, #8
 8007324:	b2ad      	uxth	r5, r5
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	00a9      	lsls	r1, r5, #2
 800732a:	f002 ff85 	bl	800a238 <realloc>
 800732e:	2800      	cmp	r0, #0
 8007330:	f43f ad65 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	6018      	str	r0, [r3, #0]
 8007338:	809d      	strh	r5, [r3, #4]
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f109 0201 	add.w	r2, r9, #1
 8007344:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8007348:	46b2      	mov	sl, r6
 800734a:	80ca      	strh	r2, [r1, #6]
 800734c:	4646      	mov	r6, r8
 800734e:	f04f 0920 	mov.w	r9, #32
 8007352:	4635      	mov	r5, r6
 8007354:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8007360:	b36a      	cbz	r2, 80073be <__svfscanf_r+0x986>
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	3a01      	subs	r2, #1
 8007366:	6062      	str	r2, [r4, #4]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f806 3b01 	strb.w	r3, [r6], #1
 8007372:	f1ba 0f00 	cmp.w	sl, #0
 8007376:	d011      	beq.n	800739c <__svfscanf_r+0x964>
 8007378:	1b73      	subs	r3, r6, r5
 800737a:	454b      	cmp	r3, r9
 800737c:	d30e      	bcc.n	800739c <__svfscanf_r+0x964>
 800737e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007382:	4628      	mov	r0, r5
 8007384:	4649      	mov	r1, r9
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	f002 ff56 	bl	800a238 <realloc>
 800738c:	4605      	mov	r5, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f ad35 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f8ca 0000 	str.w	r0, [sl]
 800739a:	18c6      	adds	r6, r0, r3
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3b01      	subs	r3, #1
 80073a0:	633b      	str	r3, [r7, #48]	; 0x30
 80073a2:	d00c      	beq.n	80073be <__svfscanf_r+0x986>
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dcd6      	bgt.n	8007358 <__svfscanf_r+0x920>
 80073aa:	ee18 0a10 	vmov	r0, s16
 80073ae:	4621      	mov	r1, r4
 80073b0:	f003 f8f8 	bl	800a5a4 <__srefill_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0cf      	beq.n	8007358 <__svfscanf_r+0x920>
 80073b8:	42ae      	cmp	r6, r5
 80073ba:	f43f ac0e 	beq.w	8006bda <__svfscanf_r+0x1a2>
 80073be:	1b75      	subs	r5, r6, r5
 80073c0:	f43f ac3f 	beq.w	8006c42 <__svfscanf_r+0x20a>
 80073c4:	2300      	movs	r3, #0
 80073c6:	7033      	strb	r3, [r6, #0]
 80073c8:	f1ba 0f00 	cmp.w	sl, #0
 80073cc:	d009      	beq.n	80073e2 <__svfscanf_r+0x9aa>
 80073ce:	1c69      	adds	r1, r5, #1
 80073d0:	4589      	cmp	r9, r1
 80073d2:	d906      	bls.n	80073e2 <__svfscanf_r+0x9aa>
 80073d4:	f8da 0000 	ldr.w	r0, [sl]
 80073d8:	f002 ff2e 	bl	800a238 <realloc>
 80073dc:	b108      	cbz	r0, 80073e2 <__svfscanf_r+0x9aa>
 80073de:	f8ca 0000 	str.w	r0, [sl]
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	3301      	adds	r3, #1
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	442b      	add	r3, r5
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ee:	465e      	mov	r6, fp
 80073f0:	f7ff bb49 	b.w	8006a86 <__svfscanf_r+0x4e>
 80073f4:	46ca      	mov	sl, r9
 80073f6:	e7ac      	b.n	8007352 <__svfscanf_r+0x91a>
 80073f8:	2000043c 	.word	0x2000043c
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf08      	it	eq
 8007402:	f04f 33ff 	moveq.w	r3, #4294967295
 8007406:	f019 0501 	ands.w	r5, r9, #1
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
 800740c:	f009 0810 	and.w	r8, r9, #16
 8007410:	f000 80fb 	beq.w	800760a <__svfscanf_r+0xbd2>
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	f040 80a0 	bne.w	800755c <__svfscanf_r+0xb24>
 800741c:	4633      	mov	r3, r6
 800741e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8007422:	f853 6b04 	ldr.w	r6, [r3], #4
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	f000 80a0 	beq.w	800756c <__svfscanf_r+0xb34>
 800742c:	2e00      	cmp	r6, #0
 800742e:	f43f ac08 	beq.w	8006c42 <__svfscanf_r+0x20a>
 8007432:	2080      	movs	r0, #128	; 0x80
 8007434:	f001 ffe4 	bl	8009400 <malloc>
 8007438:	4605      	mov	r5, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f acdf 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	6030      	str	r0, [r6, #0]
 8007444:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8007448:	889b      	ldrh	r3, [r3, #4]
 800744a:	4599      	cmp	r9, r3
 800744c:	d314      	bcc.n	8007478 <__svfscanf_r+0xa40>
 800744e:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8007452:	4293      	cmp	r3, r2
 8007454:	f63f acd3 	bhi.w	8006dfe <__svfscanf_r+0x3c6>
 8007458:	3308      	adds	r3, #8
 800745a:	fa1f fa83 	uxth.w	sl, r3
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f002 fee7 	bl	800a238 <realloc>
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f acc7 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	6018      	str	r0, [r3, #0]
 8007474:	f8a3 a004 	strh.w	sl, [r3, #4]
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f109 0201 	add.w	r2, r9, #1
 8007482:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8007486:	46b2      	mov	sl, r6
 8007488:	80ca      	strh	r2, [r1, #6]
 800748a:	462e      	mov	r6, r5
 800748c:	f04f 0920 	mov.w	r9, #32
 8007490:	2200      	movs	r2, #0
 8007492:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	49ad      	ldr	r1, [pc, #692]	; (8007750 <__svfscanf_r+0xd18>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	5c5b      	ldrb	r3, [r3, r1]
 800749e:	0718      	lsls	r0, r3, #28
 80074a0:	d441      	bmi.n	8007526 <__svfscanf_r+0xaee>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d03e      	beq.n	8007526 <__svfscanf_r+0xaee>
 80074a8:	613a      	str	r2, [r7, #16]
 80074aa:	f001 ff2f 	bl	800930c <__locale_mb_cur_max>
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4290      	cmp	r0, r2
 80074b2:	f43f ab92 	beq.w	8006bda <__svfscanf_r+0x1a2>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80074bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80074c0:	f80c 0002 	strb.w	r0, [ip, r2]
 80074c4:	1c53      	adds	r3, r2, #1
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	3a01      	subs	r2, #1
 80074ca:	e9c4 1200 	strd	r1, r2, [r4]
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	2a03      	cmp	r2, #3
 80074d2:	d103      	bne.n	80074dc <__svfscanf_r+0xaa4>
 80074d4:	f8db 2000 	ldr.w	r2, [fp]
 80074d8:	2a04      	cmp	r2, #4
 80074da:	d006      	beq.n	80074ea <__svfscanf_r+0xab2>
 80074dc:	2208      	movs	r2, #8
 80074de:	2100      	movs	r1, #0
 80074e0:	4658      	mov	r0, fp
 80074e2:	623b      	str	r3, [r7, #32]
 80074e4:	f7fd fe44 	bl	8005170 <memset>
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	f8cd b000 	str.w	fp, [sp]
 80074ee:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80074f2:	ee18 0a10 	vmov	r0, s16
 80074f6:	4631      	mov	r1, r6
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	f002 f9cd 	bl	8009898 <_mbrtowc_r>
 80074fe:	1c42      	adds	r2, r0, #1
 8007500:	6238      	str	r0, [r7, #32]
 8007502:	f43f ab6a 	beq.w	8006bda <__svfscanf_r+0x1a2>
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2800      	cmp	r0, #0
 800750a:	d133      	bne.n	8007574 <__svfscanf_r+0xb3c>
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	6830      	ldr	r0, [r6, #0]
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	f001 feed 	bl	80092f0 <iswspace>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4602      	mov	r2, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	d049      	beq.n	80075b2 <__svfscanf_r+0xb7a>
 800751e:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8007522:	2b00      	cmp	r3, #0
 8007524:	d13a      	bne.n	800759c <__svfscanf_r+0xb64>
 8007526:	f1b8 0f00 	cmp.w	r8, #0
 800752a:	d114      	bne.n	8007556 <__svfscanf_r+0xb1e>
 800752c:	f8c6 8000 	str.w	r8, [r6]
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	d00c      	beq.n	8007550 <__svfscanf_r+0xb18>
 8007536:	1b71      	subs	r1, r6, r5
 8007538:	108b      	asrs	r3, r1, #2
 800753a:	3301      	adds	r3, #1
 800753c:	4599      	cmp	r9, r3
 800753e:	d907      	bls.n	8007550 <__svfscanf_r+0xb18>
 8007540:	f8da 0000 	ldr.w	r0, [sl]
 8007544:	3104      	adds	r1, #4
 8007546:	f002 fe77 	bl	800a238 <realloc>
 800754a:	b108      	cbz	r0, 8007550 <__svfscanf_r+0xb18>
 800754c:	f8ca 0000 	str.w	r0, [sl]
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	3301      	adds	r3, #1
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
 8007556:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8007558:	f7ff ba95 	b.w	8006a86 <__svfscanf_r+0x4e>
 800755c:	f04f 0900 	mov.w	r9, #0
 8007560:	627e      	str	r6, [r7, #36]	; 0x24
 8007562:	464d      	mov	r5, r9
 8007564:	46ca      	mov	sl, r9
 8007566:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 800756a:	e791      	b.n	8007490 <__svfscanf_r+0xa58>
 800756c:	46c1      	mov	r9, r8
 800756e:	4645      	mov	r5, r8
 8007570:	46c2      	mov	sl, r8
 8007572:	e78d      	b.n	8007490 <__svfscanf_r+0xa58>
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	3202      	adds	r2, #2
 8007578:	d1c9      	bne.n	800750e <__svfscanf_r+0xad6>
 800757a:	461a      	mov	r2, r3
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dc89      	bgt.n	8007496 <__svfscanf_r+0xa5e>
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	4621      	mov	r1, r4
 8007588:	613a      	str	r2, [r7, #16]
 800758a:	f003 f80b 	bl	800a5a4 <__srefill_r>
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	2800      	cmp	r0, #0
 8007592:	d080      	beq.n	8007496 <__svfscanf_r+0xa5e>
 8007594:	2a00      	cmp	r2, #0
 8007596:	f47f ab20 	bne.w	8006bda <__svfscanf_r+0x1a2>
 800759a:	e7c4      	b.n	8007526 <__svfscanf_r+0xaee>
 800759c:	3b01      	subs	r3, #1
 800759e:	ee18 0a10 	vmov	r0, s16
 80075a2:	f81b 1003 	ldrb.w	r1, [fp, r3]
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
 80075a8:	4622      	mov	r2, r4
 80075aa:	f005 fb0e 	bl	800cbca <_ungetc_r>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	e7b7      	b.n	8007522 <__svfscanf_r+0xaea>
 80075b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b4:	4419      	add	r1, r3
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d103      	bne.n	80075c6 <__svfscanf_r+0xb8e>
 80075be:	f8db 3000 	ldr.w	r3, [fp]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d002      	beq.n	80075cc <__svfscanf_r+0xb94>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	3b01      	subs	r3, #1
 80075ca:	633b      	str	r3, [r7, #48]	; 0x30
 80075cc:	f1b8 0f00 	cmp.w	r8, #0
 80075d0:	d1d4      	bne.n	800757c <__svfscanf_r+0xb44>
 80075d2:	3604      	adds	r6, #4
 80075d4:	f1ba 0f00 	cmp.w	sl, #0
 80075d8:	d015      	beq.n	8007606 <__svfscanf_r+0xbce>
 80075da:	1b73      	subs	r3, r6, r5
 80075dc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80075e0:	d80f      	bhi.n	8007602 <__svfscanf_r+0xbca>
 80075e2:	4628      	mov	r0, r5
 80075e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	f002 fe25 	bl	800a238 <realloc>
 80075ee:	4605      	mov	r5, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ac04 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f8ca 0000 	str.w	r0, [sl]
 80075fc:	18c6      	adds	r6, r0, r3
 80075fe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007602:	4642      	mov	r2, r8
 8007604:	e7ba      	b.n	800757c <__svfscanf_r+0xb44>
 8007606:	4652      	mov	r2, sl
 8007608:	e7b8      	b.n	800757c <__svfscanf_r+0xb44>
 800760a:	f1b8 0f00 	cmp.w	r8, #0
 800760e:	d01a      	beq.n	8007646 <__svfscanf_r+0xc0e>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	494f      	ldr	r1, [pc, #316]	; (8007750 <__svfscanf_r+0xd18>)
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	5c52      	ldrb	r2, [r2, r1]
 8007618:	0711      	lsls	r1, r2, #28
 800761a:	f53f ae62 	bmi.w	80072e2 <__svfscanf_r+0x8aa>
 800761e:	3301      	adds	r3, #1
 8007620:	6862      	ldr	r2, [r4, #4]
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	3501      	adds	r5, #1
 8007628:	3a01      	subs	r2, #1
 800762a:	42ab      	cmp	r3, r5
 800762c:	6062      	str	r2, [r4, #4]
 800762e:	f43f ae58 	beq.w	80072e2 <__svfscanf_r+0x8aa>
 8007632:	2a00      	cmp	r2, #0
 8007634:	dcec      	bgt.n	8007610 <__svfscanf_r+0xbd8>
 8007636:	ee18 0a10 	vmov	r0, s16
 800763a:	4621      	mov	r1, r4
 800763c:	f002 ffb2 	bl	800a5a4 <__srefill_r>
 8007640:	2800      	cmp	r0, #0
 8007642:	d0e5      	beq.n	8007610 <__svfscanf_r+0xbd8>
 8007644:	e64d      	b.n	80072e2 <__svfscanf_r+0x8aa>
 8007646:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800764a:	f856 5b04 	ldr.w	r5, [r6], #4
 800764e:	d07d      	beq.n	800774c <__svfscanf_r+0xd14>
 8007650:	2d00      	cmp	r5, #0
 8007652:	f43f aaf6 	beq.w	8006c42 <__svfscanf_r+0x20a>
 8007656:	2020      	movs	r0, #32
 8007658:	f001 fed2 	bl	8009400 <malloc>
 800765c:	4681      	mov	r9, r0
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f abcd 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	6028      	str	r0, [r5, #0]
 8007668:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800766c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8007670:	45c2      	cmp	sl, r8
 8007672:	d315      	bcc.n	80076a0 <__svfscanf_r+0xc68>
 8007674:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8007678:	4598      	cmp	r8, r3
 800767a:	f63f abc0 	bhi.w	8006dfe <__svfscanf_r+0x3c6>
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	f108 0808 	add.w	r8, r8, #8
 8007684:	fa1f f888 	uxth.w	r8, r8
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800768e:	f002 fdd3 	bl	800a238 <realloc>
 8007692:	2800      	cmp	r0, #0
 8007694:	f43f abb3 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	6018      	str	r0, [r3, #0]
 800769c:	f8a3 8004 	strh.w	r8, [r3, #4]
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f10a 0201 	add.w	r2, sl, #1
 80076aa:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80076ae:	80ca      	strh	r2, [r1, #6]
 80076b0:	46aa      	mov	sl, r5
 80076b2:	464d      	mov	r5, r9
 80076b4:	f04f 0920 	mov.w	r9, #32
 80076b8:	46a8      	mov	r8, r5
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	4924      	ldr	r1, [pc, #144]	; (8007750 <__svfscanf_r+0xd18>)
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	5c52      	ldrb	r2, [r2, r1]
 80076c2:	0712      	lsls	r2, r2, #28
 80076c4:	d42a      	bmi.n	800771c <__svfscanf_r+0xce4>
 80076c6:	6862      	ldr	r2, [r4, #4]
 80076c8:	3a01      	subs	r2, #1
 80076ca:	6062      	str	r2, [r4, #4]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	6022      	str	r2, [r4, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f805 3b01 	strb.w	r3, [r5], #1
 80076d6:	f1ba 0f00 	cmp.w	sl, #0
 80076da:	d011      	beq.n	8007700 <__svfscanf_r+0xcc8>
 80076dc:	eba5 0b08 	sub.w	fp, r5, r8
 80076e0:	45cb      	cmp	fp, r9
 80076e2:	d30d      	bcc.n	8007700 <__svfscanf_r+0xcc8>
 80076e4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f002 fda4 	bl	800a238 <realloc>
 80076f0:	4680      	mov	r8, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f ab83 	beq.w	8006dfe <__svfscanf_r+0x3c6>
 80076f8:	eb00 050b 	add.w	r5, r0, fp
 80076fc:	f8ca 0000 	str.w	r0, [sl]
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	3b01      	subs	r3, #1
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
 8007706:	d009      	beq.n	800771c <__svfscanf_r+0xce4>
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dcd5      	bgt.n	80076ba <__svfscanf_r+0xc82>
 800770e:	ee18 0a10 	vmov	r0, s16
 8007712:	4621      	mov	r1, r4
 8007714:	f002 ff46 	bl	800a5a4 <__srefill_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	d0ce      	beq.n	80076ba <__svfscanf_r+0xc82>
 800771c:	2300      	movs	r3, #0
 800771e:	702b      	strb	r3, [r5, #0]
 8007720:	eba5 0508 	sub.w	r5, r5, r8
 8007724:	f1ba 0f00 	cmp.w	sl, #0
 8007728:	d009      	beq.n	800773e <__svfscanf_r+0xd06>
 800772a:	1c69      	adds	r1, r5, #1
 800772c:	4589      	cmp	r9, r1
 800772e:	d906      	bls.n	800773e <__svfscanf_r+0xd06>
 8007730:	f8da 0000 	ldr.w	r0, [sl]
 8007734:	f002 fd80 	bl	800a238 <realloc>
 8007738:	b108      	cbz	r0, 800773e <__svfscanf_r+0xd06>
 800773a:	f8ca 0000 	str.w	r0, [sl]
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	442b      	add	r3, r5
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	3301      	adds	r3, #1
 8007748:	f7ff b99c 	b.w	8006a84 <__svfscanf_r+0x4c>
 800774c:	46ca      	mov	sl, r9
 800774e:	e7b3      	b.n	80076b8 <__svfscanf_r+0xc80>
 8007750:	0800f191 	.word	0x0800f191
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	3b01      	subs	r3, #1
 8007758:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800775c:	bf81      	itttt	hi
 800775e:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8007760:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8007764:	eb03 0b0c 	addhi.w	fp, r3, ip
 8007768:	f240 135d 	movwhi	r3, #349	; 0x15d
 800776c:	bf88      	it	hi
 800776e:	633b      	strhi	r3, [r7, #48]	; 0x30
 8007770:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 8007774:	f8df 9414 	ldr.w	r9, [pc, #1044]	; 8007b8c <__svfscanf_r+0x1154>
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
 800777a:	bf98      	it	ls
 800777c:	f04f 0b00 	movls.w	fp, #0
 8007780:	f04f 0a00 	mov.w	sl, #0
 8007784:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	7813      	ldrb	r3, [r2, #0]
 800778c:	2b39      	cmp	r3, #57	; 0x39
 800778e:	d80f      	bhi.n	80077b0 <__svfscanf_r+0xd78>
 8007790:	2b2a      	cmp	r3, #42	; 0x2a
 8007792:	d91a      	bls.n	80077ca <__svfscanf_r+0xd92>
 8007794:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007798:	290e      	cmp	r1, #14
 800779a:	d816      	bhi.n	80077ca <__svfscanf_r+0xd92>
 800779c:	e8df f001 	tbb	[pc, r1]
 80077a0:	157f157f 	.word	0x157f157f
 80077a4:	70704215 	.word	0x70704215
 80077a8:	70707070 	.word	0x70707070
 80077ac:	7870      	.short	0x7870
 80077ae:	78          	.byte	0x78
 80077af:	00          	.byte	0x00
 80077b0:	2b66      	cmp	r3, #102	; 0x66
 80077b2:	d835      	bhi.n	8007820 <__svfscanf_r+0xde8>
 80077b4:	2b60      	cmp	r3, #96	; 0x60
 80077b6:	d803      	bhi.n	80077c0 <__svfscanf_r+0xd88>
 80077b8:	2b46      	cmp	r3, #70	; 0x46
 80077ba:	d804      	bhi.n	80077c6 <__svfscanf_r+0xd8e>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d904      	bls.n	80077ca <__svfscanf_r+0xd92>
 80077c0:	69f9      	ldr	r1, [r7, #28]
 80077c2:	290a      	cmp	r1, #10
 80077c4:	e069      	b.n	800789a <__svfscanf_r+0xe62>
 80077c6:	2b58      	cmp	r3, #88	; 0x58
 80077c8:	d06f      	beq.n	80078aa <__svfscanf_r+0xe72>
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	05d8      	lsls	r0, r3, #23
 80077ce:	d512      	bpl.n	80077f6 <__svfscanf_r+0xdbe>
 80077d0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80077d4:	4598      	cmp	r8, r3
 80077d6:	d909      	bls.n	80077ec <__svfscanf_r+0xdb4>
 80077d8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 80077dc:	ee18 0a10 	vmov	r0, s16
 80077e0:	4622      	mov	r2, r4
 80077e2:	f005 f9f2 	bl	800cbca <_ungetc_r>
 80077e6:	f108 39ff 	add.w	r9, r8, #4294967295
 80077ea:	46c8      	mov	r8, r9
 80077ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80077f0:	4598      	cmp	r8, r3
 80077f2:	f43f aa26 	beq.w	8006c42 <__svfscanf_r+0x20a>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	f013 0210 	ands.w	r2, r3, #16
 80077fc:	d175      	bne.n	80078ea <__svfscanf_r+0xeb2>
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	69bd      	ldr	r5, [r7, #24]
 8007802:	f888 2000 	strb.w	r2, [r8]
 8007806:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800780a:	ee18 0a10 	vmov	r0, s16
 800780e:	47a8      	blx	r5
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	0699      	lsls	r1, r3, #26
 8007814:	f106 0904 	add.w	r9, r6, #4
 8007818:	d55e      	bpl.n	80078d8 <__svfscanf_r+0xea0>
 800781a:	6833      	ldr	r3, [r6, #0]
 800781c:	6018      	str	r0, [r3, #0]
 800781e:	e060      	b.n	80078e2 <__svfscanf_r+0xeaa>
 8007820:	2b78      	cmp	r3, #120	; 0x78
 8007822:	e7d1      	b.n	80077c8 <__svfscanf_r+0xd90>
 8007824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007826:	050d      	lsls	r5, r1, #20
 8007828:	d50d      	bpl.n	8007846 <__svfscanf_r+0xe0e>
 800782a:	69f9      	ldr	r1, [r7, #28]
 800782c:	b929      	cbnz	r1, 800783a <__svfscanf_r+0xe02>
 800782e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007830:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007834:	6279      	str	r1, [r7, #36]	; 0x24
 8007836:	2108      	movs	r1, #8
 8007838:	61f9      	str	r1, [r7, #28]
 800783a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800783c:	0548      	lsls	r0, r1, #21
 800783e:	d505      	bpl.n	800784c <__svfscanf_r+0xe14>
 8007840:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 8007844:	6279      	str	r1, [r7, #36]	; 0x24
 8007846:	f808 3b01 	strb.w	r3, [r8], #1
 800784a:	e00d      	b.n	8007868 <__svfscanf_r+0xe30>
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	f1bb 0f00 	cmp.w	fp, #0
 8007858:	d004      	beq.n	8007864 <__svfscanf_r+0xe2c>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	3301      	adds	r3, #1
 800785e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
 8007864:	f10a 0a01 	add.w	sl, sl, #1
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	3b01      	subs	r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	dd2a      	ble.n	80078c8 <__svfscanf_r+0xe90>
 8007872:	3201      	adds	r2, #1
 8007874:	6022      	str	r2, [r4, #0]
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	3b01      	subs	r3, #1
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
 800787c:	d184      	bne.n	8007788 <__svfscanf_r+0xd50>
 800787e:	e7a4      	b.n	80077ca <__svfscanf_r+0xd92>
 8007880:	69f9      	ldr	r1, [r7, #28]
 8007882:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8007886:	61f9      	str	r1, [r7, #28]
 8007888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800788a:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 800788e:	e7d9      	b.n	8007844 <__svfscanf_r+0xe0c>
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8007896:	61f9      	str	r1, [r7, #28]
 8007898:	2908      	cmp	r1, #8
 800789a:	dcf5      	bgt.n	8007888 <__svfscanf_r+0xe50>
 800789c:	e795      	b.n	80077ca <__svfscanf_r+0xd92>
 800789e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a0:	060d      	lsls	r5, r1, #24
 80078a2:	d592      	bpl.n	80077ca <__svfscanf_r+0xd92>
 80078a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078a8:	e7cc      	b.n	8007844 <__svfscanf_r+0xe0c>
 80078aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ac:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 80078b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80078b4:	d189      	bne.n	80077ca <__svfscanf_r+0xd92>
 80078b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b8:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 80078bc:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 80078c0:	6279      	str	r1, [r7, #36]	; 0x24
 80078c2:	2110      	movs	r1, #16
 80078c4:	61f9      	str	r1, [r7, #28]
 80078c6:	e7be      	b.n	8007846 <__svfscanf_r+0xe0e>
 80078c8:	ee18 0a10 	vmov	r0, s16
 80078cc:	4621      	mov	r1, r4
 80078ce:	f002 fe69 	bl	800a5a4 <__srefill_r>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0cf      	beq.n	8007876 <__svfscanf_r+0xe3e>
 80078d6:	e778      	b.n	80077ca <__svfscanf_r+0xd92>
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	071a      	lsls	r2, r3, #28
 80078dc:	d50e      	bpl.n	80078fc <__svfscanf_r+0xec4>
 80078de:	6833      	ldr	r3, [r6, #0]
 80078e0:	7018      	strb	r0, [r3, #0]
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	3301      	adds	r3, #1
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e8:	464e      	mov	r6, r9
 80078ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80078ee:	eba8 0803 	sub.w	r8, r8, r3
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	44c2      	add	sl, r8
 80078f6:	4453      	add	r3, sl
 80078f8:	f7ff b966 	b.w	8006bc8 <__svfscanf_r+0x190>
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	075b      	lsls	r3, r3, #29
 8007900:	d502      	bpl.n	8007908 <__svfscanf_r+0xed0>
 8007902:	6833      	ldr	r3, [r6, #0]
 8007904:	8018      	strh	r0, [r3, #0]
 8007906:	e7ec      	b.n	80078e2 <__svfscanf_r+0xeaa>
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	f013 0201 	ands.w	r2, r3, #1
 800790e:	d184      	bne.n	800781a <__svfscanf_r+0xde2>
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	079d      	lsls	r5, r3, #30
 8007914:	d581      	bpl.n	800781a <__svfscanf_r+0xde2>
 8007916:	4b9c      	ldr	r3, [pc, #624]	; (8007b88 <__svfscanf_r+0x1150>)
 8007918:	69b9      	ldr	r1, [r7, #24]
 800791a:	4299      	cmp	r1, r3
 800791c:	ee18 0a10 	vmov	r0, s16
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007926:	d105      	bne.n	8007934 <__svfscanf_r+0xefc>
 8007928:	f003 ff36 	bl	800b798 <_strtoull_r>
 800792c:	6833      	ldr	r3, [r6, #0]
 800792e:	e9c3 0100 	strd	r0, r1, [r3]
 8007932:	e7d6      	b.n	80078e2 <__svfscanf_r+0xeaa>
 8007934:	f003 fe22 	bl	800b57c <_strtoll_r>
 8007938:	e7f8      	b.n	800792c <__svfscanf_r+0xef4>
 800793a:	ee18 0a10 	vmov	r0, s16
 800793e:	f001 fceb 	bl	8009318 <_localeconv_r>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6802      	ldr	r2, [r0, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800794c:	f04f 0b00 	mov.w	fp, #0
 8007950:	bf88      	it	hi
 8007952:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8007954:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8007958:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 800795c:	bf84      	itt	hi
 800795e:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8007962:	f240 115d 	movwhi	r1, #349	; 0x15d
 8007966:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800796a:	bf86      	itte	hi
 800796c:	181b      	addhi	r3, r3, r0
 800796e:	6339      	strhi	r1, [r7, #48]	; 0x30
 8007970:	2300      	movls	r3, #0
 8007972:	46da      	mov	sl, fp
 8007974:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 8007978:	f8d4 e000 	ldr.w	lr, [r4]
 800797c:	f89e 0000 	ldrb.w	r0, [lr]
 8007980:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 8007984:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 8007988:	f200 811e 	bhi.w	8007bc8 <__svfscanf_r+0x1190>
 800798c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8007990:	011c0087 	.word	0x011c0087
 8007994:	011c0087 	.word	0x011c0087
 8007998:	004f011c 	.word	0x004f011c
 800799c:	006f006f 	.word	0x006f006f
 80079a0:	006f006f 	.word	0x006f006f
 80079a4:	006f006f 	.word	0x006f006f
 80079a8:	006f006f 	.word	0x006f006f
 80079ac:	011c006f 	.word	0x011c006f
 80079b0:	011c011c 	.word	0x011c011c
 80079b4:	011c011c 	.word	0x011c011c
 80079b8:	011c011c 	.word	0x011c011c
 80079bc:	006d00ad 	.word	0x006d00ad
 80079c0:	006d006d 	.word	0x006d006d
 80079c4:	00e50119 	.word	0x00e50119
 80079c8:	011c011c 	.word	0x011c011c
 80079cc:	011c00cf 	.word	0x011c00cf
 80079d0:	011c011c 	.word	0x011c011c
 80079d4:	008e011c 	.word	0x008e011c
 80079d8:	0100011c 	.word	0x0100011c
 80079dc:	011c011c 	.word	0x011c011c
 80079e0:	00f0011c 	.word	0x00f0011c
 80079e4:	011c011c 	.word	0x011c011c
 80079e8:	0073011c 	.word	0x0073011c
 80079ec:	011c00f6 	.word	0x011c00f6
 80079f0:	011c011c 	.word	0x011c011c
 80079f4:	011c011c 	.word	0x011c011c
 80079f8:	011c011c 	.word	0x011c011c
 80079fc:	006d00ad 	.word	0x006d00ad
 8007a00:	006d006d 	.word	0x006d006d
 8007a04:	00e50119 	.word	0x00e50119
 8007a08:	011c011c 	.word	0x011c011c
 8007a0c:	011c00cf 	.word	0x011c00cf
 8007a10:	011c011c 	.word	0x011c011c
 8007a14:	008e011c 	.word	0x008e011c
 8007a18:	0100011c 	.word	0x0100011c
 8007a1c:	011c011c 	.word	0x011c011c
 8007a20:	00f0011c 	.word	0x00f0011c
 8007a24:	011c011c 	.word	0x011c011c
 8007a28:	0073011c 	.word	0x0073011c
 8007a2c:	00f6      	.short	0x00f6
 8007a2e:	05e9      	lsls	r1, r5, #23
 8007a30:	d51d      	bpl.n	8007a6e <__svfscanf_r+0x1036>
 8007a32:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007a36:	f10a 0a01 	add.w	sl, sl, #1
 8007a3a:	b11b      	cbz	r3, 8007a44 <__svfscanf_r+0x100c>
 8007a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a3e:	3001      	adds	r0, #1
 8007a40:	3b01      	subs	r3, #1
 8007a42:	6338      	str	r0, [r7, #48]	; 0x30
 8007a44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a48:	3001      	adds	r0, #1
 8007a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a4c:	6860      	ldr	r0, [r4, #4]
 8007a4e:	3801      	subs	r0, #1
 8007a50:	3901      	subs	r1, #1
 8007a52:	2800      	cmp	r0, #0
 8007a54:	6339      	str	r1, [r7, #48]	; 0x30
 8007a56:	6060      	str	r0, [r4, #4]
 8007a58:	f340 80c7 	ble.w	8007bea <__svfscanf_r+0x11b2>
 8007a5c:	f10e 0101 	add.w	r1, lr, #1
 8007a60:	6021      	str	r1, [r4, #0]
 8007a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d187      	bne.n	8007978 <__svfscanf_r+0xf40>
 8007a68:	e04a      	b.n	8007b00 <__svfscanf_r+0x10c8>
 8007a6a:	0529      	lsls	r1, r5, #20
 8007a6c:	d548      	bpl.n	8007b00 <__svfscanf_r+0x10c8>
 8007a6e:	eb1b 0f08 	cmn.w	fp, r8
 8007a72:	d03f      	beq.n	8007af4 <__svfscanf_r+0x10bc>
 8007a74:	e044      	b.n	8007b00 <__svfscanf_r+0x10c8>
 8007a76:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 8007a7a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8007a7e:	d13f      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007a80:	f1ba 0f01 	cmp.w	sl, #1
 8007a84:	d13c      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a88:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8007a8c:	3901      	subs	r1, #1
 8007a8e:	f809 cb01 	strb.w	ip, [r9], #1
 8007a92:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8007a96:	6339      	str	r1, [r7, #48]	; 0x30
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	e003      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007a9e:	0629      	lsls	r1, r5, #24
 8007aa0:	d52e      	bpl.n	8007b00 <__svfscanf_r+0x10c8>
 8007aa2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007aa6:	f809 0b01 	strb.w	r0, [r9], #1
 8007aaa:	e7cb      	b.n	8007a44 <__svfscanf_r+0x100c>
 8007aac:	f1bb 0f00 	cmp.w	fp, #0
 8007ab0:	d10c      	bne.n	8007acc <__svfscanf_r+0x1094>
 8007ab2:	f1ba 0f00 	cmp.w	sl, #0
 8007ab6:	d10d      	bne.n	8007ad4 <__svfscanf_r+0x109c>
 8007ab8:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8007abc:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8007ac0:	d108      	bne.n	8007ad4 <__svfscanf_r+0x109c>
 8007ac2:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007ac6:	f04f 0b01 	mov.w	fp, #1
 8007aca:	e7ec      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007acc:	f1bb 0f02 	cmp.w	fp, #2
 8007ad0:	f000 8085 	beq.w	8007bde <__svfscanf_r+0x11a6>
 8007ad4:	f1b8 0f01 	cmp.w	r8, #1
 8007ad8:	d002      	beq.n	8007ae0 <__svfscanf_r+0x10a8>
 8007ada:	f1b8 0f04 	cmp.w	r8, #4
 8007ade:	d10f      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007ae0:	f108 0801 	add.w	r8, r8, #1
 8007ae4:	fa5f f888 	uxtb.w	r8, r8
 8007ae8:	e7dd      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007aea:	0529      	lsls	r1, r5, #20
 8007aec:	d505      	bpl.n	8007afa <__svfscanf_r+0x10c2>
 8007aee:	eb1b 0f08 	cmn.w	fp, r8
 8007af2:	d102      	bne.n	8007afa <__svfscanf_r+0x10c2>
 8007af4:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8007af8:	e7d5      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007afa:	f1bb 0f01 	cmp.w	fp, #1
 8007afe:	d071      	beq.n	8007be4 <__svfscanf_r+0x11ac>
 8007b00:	f1ba 0f00 	cmp.w	sl, #0
 8007b04:	d001      	beq.n	8007b0a <__svfscanf_r+0x10d2>
 8007b06:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b0e:	f1bb 0f01 	cmp.w	fp, #1
 8007b12:	d877      	bhi.n	8007c04 <__svfscanf_r+0x11cc>
 8007b14:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007b18:	45a9      	cmp	r9, r5
 8007b1a:	f67f a892 	bls.w	8006c42 <__svfscanf_r+0x20a>
 8007b1e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8007b22:	ee18 0a10 	vmov	r0, s16
 8007b26:	4622      	mov	r2, r4
 8007b28:	f005 f84f 	bl	800cbca <_ungetc_r>
 8007b2c:	e7f4      	b.n	8007b18 <__svfscanf_r+0x10e0>
 8007b2e:	f1b8 0f00 	cmp.w	r8, #0
 8007b32:	d10c      	bne.n	8007b4e <__svfscanf_r+0x1116>
 8007b34:	f1ba 0f00 	cmp.w	sl, #0
 8007b38:	d1e5      	bne.n	8007b06 <__svfscanf_r+0x10ce>
 8007b3a:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8007b3e:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8007b42:	d1e2      	bne.n	8007b0a <__svfscanf_r+0x10d2>
 8007b44:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007b48:	f04f 0801 	mov.w	r8, #1
 8007b4c:	e7ab      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007b4e:	f1b8 0f03 	cmp.w	r8, #3
 8007b52:	d0c5      	beq.n	8007ae0 <__svfscanf_r+0x10a8>
 8007b54:	f1b8 0f05 	cmp.w	r8, #5
 8007b58:	e7c1      	b.n	8007ade <__svfscanf_r+0x10a6>
 8007b5a:	0529      	lsls	r1, r5, #20
 8007b5c:	d502      	bpl.n	8007b64 <__svfscanf_r+0x112c>
 8007b5e:	eb1b 0f08 	cmn.w	fp, r8
 8007b62:	d0c7      	beq.n	8007af4 <__svfscanf_r+0x10bc>
 8007b64:	f1b8 0f02 	cmp.w	r8, #2
 8007b68:	d1ca      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007b6a:	f04f 0803 	mov.w	r8, #3
 8007b6e:	e79a      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007b70:	f1b8 0f06 	cmp.w	r8, #6
 8007b74:	d1c4      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007b76:	f04f 0807 	mov.w	r8, #7
 8007b7a:	e794      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007b7c:	f1b8 0f07 	cmp.w	r8, #7
 8007b80:	d1be      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007b82:	f04f 0808 	mov.w	r8, #8
 8007b86:	e78e      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007b88:	0800b665 	.word	0x0800b665
 8007b8c:	0800f16e 	.word	0x0800f16e
 8007b90:	0529      	lsls	r1, r5, #20
 8007b92:	d5b5      	bpl.n	8007b00 <__svfscanf_r+0x10c8>
 8007b94:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 8007b98:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007b9c:	d004      	beq.n	8007ba8 <__svfscanf_r+0x1170>
 8007b9e:	0569      	lsls	r1, r5, #21
 8007ba0:	d5ae      	bpl.n	8007b00 <__svfscanf_r+0x10c8>
 8007ba2:	f1ba 0f00 	cmp.w	sl, #0
 8007ba6:	d0b0      	beq.n	8007b0a <__svfscanf_r+0x10d2>
 8007ba8:	05a9      	lsls	r1, r5, #22
 8007baa:	bf58      	it	pl
 8007bac:	6a79      	ldrpl	r1, [r7, #36]	; 0x24
 8007bae:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 8007bb2:	bf5c      	itt	pl
 8007bb4:	ebaa 0101 	subpl.w	r1, sl, r1
 8007bb8:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 8007bbc:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8007bc0:	e76a      	b.n	8007a98 <__svfscanf_r+0x1060>
 8007bc2:	0529      	lsls	r1, r5, #20
 8007bc4:	d5e6      	bpl.n	8007b94 <__svfscanf_r+0x115c>
 8007bc6:	e752      	b.n	8007a6e <__svfscanf_r+0x1036>
 8007bc8:	f892 c000 	ldrb.w	ip, [r2]
 8007bcc:	4584      	cmp	ip, r0
 8007bce:	d197      	bne.n	8007b00 <__svfscanf_r+0x10c8>
 8007bd0:	05a9      	lsls	r1, r5, #22
 8007bd2:	d595      	bpl.n	8007b00 <__svfscanf_r+0x10c8>
 8007bd4:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8007bd8:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 8007bdc:	e763      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007bde:	f04f 0b03 	mov.w	fp, #3
 8007be2:	e760      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007be4:	f04f 0b02 	mov.w	fp, #2
 8007be8:	e75d      	b.n	8007aa6 <__svfscanf_r+0x106e>
 8007bea:	ee18 0a10 	vmov	r0, s16
 8007bee:	4621      	mov	r1, r4
 8007bf0:	e9c7 2301 	strd	r2, r3, [r7, #4]
 8007bf4:	f002 fcd6 	bl	800a5a4 <__srefill_r>
 8007bf8:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f af30 	beq.w	8007a62 <__svfscanf_r+0x102a>
 8007c02:	e77d      	b.n	8007b00 <__svfscanf_r+0x10c8>
 8007c04:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c08:	2b06      	cmp	r3, #6
 8007c0a:	d829      	bhi.n	8007c60 <__svfscanf_r+0x1228>
 8007c0c:	f1b8 0f02 	cmp.w	r8, #2
 8007c10:	d837      	bhi.n	8007c82 <__svfscanf_r+0x124a>
 8007c12:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007c16:	45a9      	cmp	r9, r5
 8007c18:	f67f a813 	bls.w	8006c42 <__svfscanf_r+0x20a>
 8007c1c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8007c20:	ee18 0a10 	vmov	r0, s16
 8007c24:	4622      	mov	r2, r4
 8007c26:	f004 ffd0 	bl	800cbca <_ungetc_r>
 8007c2a:	e7f4      	b.n	8007c16 <__svfscanf_r+0x11de>
 8007c2c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007c30:	633b      	str	r3, [r7, #48]	; 0x30
 8007c32:	ee18 0a10 	vmov	r0, s16
 8007c36:	4622      	mov	r2, r4
 8007c38:	f004 ffc7 	bl	800cbca <_ungetc_r>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c42:	fa5f fb8b 	uxtb.w	fp, fp
 8007c46:	f1bb 0f02 	cmp.w	fp, #2
 8007c4a:	d1ef      	bne.n	8007c2c <__svfscanf_r+0x11f4>
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	f1a8 0803 	sub.w	r8, r8, #3
 8007c52:	fa5f f888 	uxtb.w	r8, r8
 8007c56:	eba3 0308 	sub.w	r3, r3, r8
 8007c5a:	eba9 0908 	sub.w	r9, r9, r8
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c60:	05ea      	lsls	r2, r5, #23
 8007c62:	d530      	bpl.n	8007cc6 <__svfscanf_r+0x128e>
 8007c64:	056b      	lsls	r3, r5, #21
 8007c66:	d50f      	bpl.n	8007c88 <__svfscanf_r+0x1250>
 8007c68:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007c6c:	45a9      	cmp	r9, r5
 8007c6e:	f67e afe8 	bls.w	8006c42 <__svfscanf_r+0x20a>
 8007c72:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8007c76:	ee18 0a10 	vmov	r0, s16
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	f004 ffa5 	bl	800cbca <_ungetc_r>
 8007c80:	e7f4      	b.n	8007c6c <__svfscanf_r+0x1234>
 8007c82:	46c3      	mov	fp, r8
 8007c84:	464b      	mov	r3, r9
 8007c86:	e7da      	b.n	8007c3e <__svfscanf_r+0x1206>
 8007c88:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	2965      	cmp	r1, #101	; 0x65
 8007c90:	f109 38ff 	add.w	r8, r9, #4294967295
 8007c94:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c98:	d00d      	beq.n	8007cb6 <__svfscanf_r+0x127e>
 8007c9a:	2945      	cmp	r1, #69	; 0x45
 8007c9c:	d00b      	beq.n	8007cb6 <__svfscanf_r+0x127e>
 8007c9e:	ee18 0a10 	vmov	r0, s16
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	f004 ff91 	bl	800cbca <_ungetc_r>
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8007cae:	f1a9 0802 	sub.w	r8, r9, #2
 8007cb2:	f1a3 0b02 	sub.w	fp, r3, #2
 8007cb6:	ee18 0a10 	vmov	r0, s16
 8007cba:	4622      	mov	r2, r4
 8007cbc:	f004 ff85 	bl	800cbca <_ungetc_r>
 8007cc0:	46c1      	mov	r9, r8
 8007cc2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8007cc6:	f015 0210 	ands.w	r2, r5, #16
 8007cca:	f47e aedc 	bne.w	8006a86 <__svfscanf_r+0x4e>
 8007cce:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 8007cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd6:	f889 2000 	strb.w	r2, [r9]
 8007cda:	d114      	bne.n	8007d06 <__svfscanf_r+0x12ce>
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	4553      	cmp	r3, sl
 8007ce0:	eba3 020a 	sub.w	r2, r3, sl
 8007ce4:	d11d      	bne.n	8007d22 <__svfscanf_r+0x12ea>
 8007ce6:	ee18 0a10 	vmov	r0, s16
 8007cea:	2200      	movs	r2, #0
 8007cec:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007cf0:	f003 fba8 	bl	800b444 <_strtod_r>
 8007cf4:	07e8      	lsls	r0, r5, #31
 8007cf6:	f106 0804 	add.w	r8, r6, #4
 8007cfa:	d51d      	bpl.n	8007d38 <__svfscanf_r+0x1300>
 8007cfc:	6833      	ldr	r3, [r6, #0]
 8007cfe:	ed83 0b00 	vstr	d0, [r3]
 8007d02:	f7ff b9b8 	b.w	8007076 <__svfscanf_r+0x63e>
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0ec      	beq.n	8007ce6 <__svfscanf_r+0x12ae>
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	230a      	movs	r3, #10
 8007d10:	ee18 0a10 	vmov	r0, s16
 8007d14:	3101      	adds	r1, #1
 8007d16:	f7fd fbdd 	bl	80054d4 <_strtol_r>
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8007d20:	1ac2      	subs	r2, r0, r3
 8007d22:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 8007d26:	4599      	cmp	r9, r3
 8007d28:	bf28      	it	cs
 8007d2a:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 8007d2e:	4919      	ldr	r1, [pc, #100]	; (8007d94 <__svfscanf_r+0x135c>)
 8007d30:	4648      	mov	r0, r9
 8007d32:	f002 fd3f 	bl	800a7b4 <sprintf>
 8007d36:	e7d6      	b.n	8007ce6 <__svfscanf_r+0x12ae>
 8007d38:	07a9      	lsls	r1, r5, #30
 8007d3a:	6836      	ldr	r6, [r6, #0]
 8007d3c:	d503      	bpl.n	8007d46 <__svfscanf_r+0x130e>
 8007d3e:	ed86 0b00 	vstr	d0, [r6]
 8007d42:	f7ff b998 	b.w	8007076 <__svfscanf_r+0x63e>
 8007d46:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4e:	d706      	bvc.n	8007d5e <__svfscanf_r+0x1326>
 8007d50:	4811      	ldr	r0, [pc, #68]	; (8007d98 <__svfscanf_r+0x1360>)
 8007d52:	f002 fd29 	bl	800a7a8 <nanf>
 8007d56:	ed86 0a00 	vstr	s0, [r6]
 8007d5a:	f7ff b98c 	b.w	8007076 <__svfscanf_r+0x63e>
 8007d5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007d62:	e7f8      	b.n	8007d56 <__svfscanf_r+0x131e>
 8007d64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	f001 fb51 	bl	8009410 <free>
 8007d6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007d72:	3401      	adds	r4, #1
 8007d74:	601e      	str	r6, [r3, #0]
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	dcf1      	bgt.n	8007d64 <__svfscanf_r+0x132c>
 8007d80:	f7fe bf6e 	b.w	8006c60 <__svfscanf_r+0x228>
 8007d84:	2400      	movs	r4, #0
 8007d86:	4626      	mov	r6, r4
 8007d88:	e7f5      	b.n	8007d76 <__svfscanf_r+0x133e>
 8007d8a:	f001 fb41 	bl	8009410 <free>
 8007d8e:	f7fe bf6c 	b.w	8006c6a <__svfscanf_r+0x232>
 8007d92:	bf00      	nop
 8007d94:	0800f169 	.word	0x0800f169
 8007d98:	0800f53b 	.word	0x0800f53b

08007d9c <_vfscanf_r>:
 8007d9c:	b530      	push	{r4, r5, lr}
 8007d9e:	4604      	mov	r4, r0
 8007da0:	b085      	sub	sp, #20
 8007da2:	b148      	cbz	r0, 8007db8 <_vfscanf_r+0x1c>
 8007da4:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007da6:	b93d      	cbnz	r5, 8007db8 <_vfscanf_r+0x1c>
 8007da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dac:	9101      	str	r1, [sp, #4]
 8007dae:	f000 ff61 	bl	8008c74 <__sinit>
 8007db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db6:	9901      	ldr	r1, [sp, #4]
 8007db8:	4620      	mov	r0, r4
 8007dba:	b005      	add	sp, #20
 8007dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc0:	f7fe be3a 	b.w	8006a38 <__svfscanf_r>

08007dc4 <__swsetup_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4b2a      	ldr	r3, [pc, #168]	; (8007e70 <__swsetup_r+0xac>)
 8007dc8:	4605      	mov	r5, r0
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b118      	cbz	r0, 8007dd8 <__swsetup_r+0x14>
 8007dd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007dd2:	b90b      	cbnz	r3, 8007dd8 <__swsetup_r+0x14>
 8007dd4:	f000 ff4e 	bl	8008c74 <__sinit>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dde:	0718      	lsls	r0, r3, #28
 8007de0:	d422      	bmi.n	8007e28 <__swsetup_r+0x64>
 8007de2:	06d9      	lsls	r1, r3, #27
 8007de4:	d407      	bmi.n	8007df6 <__swsetup_r+0x32>
 8007de6:	2309      	movs	r3, #9
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e034      	b.n	8007e60 <__swsetup_r+0x9c>
 8007df6:	0758      	lsls	r0, r3, #29
 8007df8:	d512      	bpl.n	8007e20 <__swsetup_r+0x5c>
 8007dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007dfc:	b141      	cbz	r1, 8007e10 <__swsetup_r+0x4c>
 8007dfe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007e02:	4299      	cmp	r1, r3
 8007e04:	d002      	beq.n	8007e0c <__swsetup_r+0x48>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f001 f82c 	bl	8008e64 <_free_r>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f043 0308 	orr.w	r3, r3, #8
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b94b      	cbnz	r3, 8007e40 <__swsetup_r+0x7c>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e36:	d003      	beq.n	8007e40 <__swsetup_r+0x7c>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f001 faa0 	bl	8009380 <__smakebuf_r>
 8007e40:	89a0      	ldrh	r0, [r4, #12]
 8007e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e46:	f010 0301 	ands.w	r3, r0, #1
 8007e4a:	d00a      	beq.n	8007e62 <__swsetup_r+0x9e>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60a3      	str	r3, [r4, #8]
 8007e50:	6963      	ldr	r3, [r4, #20]
 8007e52:	425b      	negs	r3, r3
 8007e54:	61a3      	str	r3, [r4, #24]
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	b943      	cbnz	r3, 8007e6c <__swsetup_r+0xa8>
 8007e5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e5e:	d1c4      	bne.n	8007dea <__swsetup_r+0x26>
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	0781      	lsls	r1, r0, #30
 8007e64:	bf58      	it	pl
 8007e66:	6963      	ldrpl	r3, [r4, #20]
 8007e68:	60a3      	str	r3, [r4, #8]
 8007e6a:	e7f4      	b.n	8007e56 <__swsetup_r+0x92>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7f7      	b.n	8007e60 <__swsetup_r+0x9c>
 8007e70:	2000000c 	.word	0x2000000c

08007e74 <register_fini>:
 8007e74:	4b02      	ldr	r3, [pc, #8]	; (8007e80 <register_fini+0xc>)
 8007e76:	b113      	cbz	r3, 8007e7e <register_fini+0xa>
 8007e78:	4802      	ldr	r0, [pc, #8]	; (8007e84 <register_fini+0x10>)
 8007e7a:	f000 b805 	b.w	8007e88 <atexit>
 8007e7e:	4770      	bx	lr
 8007e80:	00000000 	.word	0x00000000
 8007e84:	08008cc5 	.word	0x08008cc5

08007e88 <atexit>:
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f005 bc52 	b.w	800d738 <__register_exitproc>

08007e94 <quorem>:
 8007e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	6903      	ldr	r3, [r0, #16]
 8007e9a:	690c      	ldr	r4, [r1, #16]
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	f2c0 8081 	blt.w	8007fa6 <quorem+0x112>
 8007ea4:	3c01      	subs	r4, #1
 8007ea6:	f101 0814 	add.w	r8, r1, #20
 8007eaa:	f100 0514 	add.w	r5, r0, #20
 8007eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ecc:	d331      	bcc.n	8007f32 <quorem+0x9e>
 8007ece:	f04f 0e00 	mov.w	lr, #0
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	46ac      	mov	ip, r5
 8007ed6:	46f2      	mov	sl, lr
 8007ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007edc:	b293      	uxth	r3, r2
 8007ede:	fb06 e303 	mla	r3, r6, r3, lr
 8007ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8007eec:	f8dc a000 	ldr.w	sl, [ip]
 8007ef0:	0c12      	lsrs	r2, r2, #16
 8007ef2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ef6:	fb06 e202 	mla	r2, r6, r2, lr
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f02:	b292      	uxth	r2, r2
 8007f04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f10:	4581      	cmp	r9, r0
 8007f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f16:	f84c 3b04 	str.w	r3, [ip], #4
 8007f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f1e:	d2db      	bcs.n	8007ed8 <quorem+0x44>
 8007f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f24:	b92b      	cbnz	r3, 8007f32 <quorem+0x9e>
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	429d      	cmp	r5, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	d32e      	bcc.n	8007f8e <quorem+0xfa>
 8007f30:	613c      	str	r4, [r7, #16]
 8007f32:	4638      	mov	r0, r7
 8007f34:	f001 ff8e 	bl	8009e54 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	db24      	blt.n	8007f86 <quorem+0xf2>
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f04f 0c00 	mov.w	ip, #0
 8007f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f48:	f8d0 e000 	ldr.w	lr, [r0]
 8007f4c:	b293      	uxth	r3, r2
 8007f4e:	ebac 0303 	sub.w	r3, ip, r3
 8007f52:	0c12      	lsrs	r2, r2, #16
 8007f54:	fa13 f38e 	uxtah	r3, r3, lr
 8007f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f66:	45c1      	cmp	r9, r8
 8007f68:	f840 3b04 	str.w	r3, [r0], #4
 8007f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f70:	d2e8      	bcs.n	8007f44 <quorem+0xb0>
 8007f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f7a:	b922      	cbnz	r2, 8007f86 <quorem+0xf2>
 8007f7c:	3b04      	subs	r3, #4
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	d30a      	bcc.n	8007f9a <quorem+0x106>
 8007f84:	613c      	str	r4, [r7, #16]
 8007f86:	4630      	mov	r0, r6
 8007f88:	b003      	add	sp, #12
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	3b04      	subs	r3, #4
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	d1cc      	bne.n	8007f30 <quorem+0x9c>
 8007f96:	3c01      	subs	r4, #1
 8007f98:	e7c7      	b.n	8007f2a <quorem+0x96>
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	d1f0      	bne.n	8007f84 <quorem+0xf0>
 8007fa2:	3c01      	subs	r4, #1
 8007fa4:	e7eb      	b.n	8007f7e <quorem+0xea>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e7ee      	b.n	8007f88 <quorem+0xf4>
 8007faa:	0000      	movs	r0, r0
 8007fac:	0000      	movs	r0, r0
	...

08007fb0 <_dtoa_r>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	ed2d 8b02 	vpush	{d8}
 8007fb8:	b091      	sub	sp, #68	; 0x44
 8007fba:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fbe:	9106      	str	r1, [sp, #24]
 8007fc0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007fc2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007fc4:	9208      	str	r2, [sp, #32]
 8007fc6:	ec59 8b10 	vmov	r8, r9, d0
 8007fca:	4606      	mov	r6, r0
 8007fcc:	930c      	str	r3, [sp, #48]	; 0x30
 8007fce:	b141      	cbz	r1, 8007fe2 <_dtoa_r+0x32>
 8007fd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fd2:	604a      	str	r2, [r1, #4]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4093      	lsls	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
 8007fda:	f001 fce2 	bl	80099a2 <_Bfree>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6433      	str	r3, [r6, #64]	; 0x40
 8007fe2:	f1b9 0300 	subs.w	r3, r9, #0
 8007fe6:	bfbb      	ittet	lt
 8007fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	9303      	strlt	r3, [sp, #12]
 8007fee:	2300      	movge	r3, #0
 8007ff0:	2201      	movlt	r2, #1
 8007ff2:	bfac      	ite	ge
 8007ff4:	6023      	strge	r3, [r4, #0]
 8007ff6:	6022      	strlt	r2, [r4, #0]
 8007ff8:	4b99      	ldr	r3, [pc, #612]	; (8008260 <_dtoa_r+0x2b0>)
 8007ffa:	9c03      	ldr	r4, [sp, #12]
 8007ffc:	43a3      	bics	r3, r4
 8007ffe:	d11c      	bne.n	800803a <_dtoa_r+0x8a>
 8008000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008002:	f242 730f 	movw	r3, #9999	; 0x270f
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800800c:	ea53 0308 	orrs.w	r3, r3, r8
 8008010:	f000 84f8 	beq.w	8008a04 <_dtoa_r+0xa54>
 8008014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008016:	b90b      	cbnz	r3, 800801c <_dtoa_r+0x6c>
 8008018:	4b92      	ldr	r3, [pc, #584]	; (8008264 <_dtoa_r+0x2b4>)
 800801a:	e01f      	b.n	800805c <_dtoa_r+0xac>
 800801c:	4b91      	ldr	r3, [pc, #580]	; (8008264 <_dtoa_r+0x2b4>)
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	3303      	adds	r3, #3
 8008022:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	9801      	ldr	r0, [sp, #4]
 8008028:	b011      	add	sp, #68	; 0x44
 800802a:	ecbd 8b02 	vpop	{d8}
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	4b8d      	ldr	r3, [pc, #564]	; (8008268 <_dtoa_r+0x2b8>)
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	3308      	adds	r3, #8
 8008038:	e7f3      	b.n	8008022 <_dtoa_r+0x72>
 800803a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800803e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008046:	d10b      	bne.n	8008060 <_dtoa_r+0xb0>
 8008048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800804a:	2301      	movs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 84d4 	beq.w	80089fe <_dtoa_r+0xa4e>
 8008056:	4885      	ldr	r0, [pc, #532]	; (800826c <_dtoa_r+0x2bc>)
 8008058:	6018      	str	r0, [r3, #0]
 800805a:	1e43      	subs	r3, r0, #1
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	e7e2      	b.n	8008026 <_dtoa_r+0x76>
 8008060:	a90f      	add	r1, sp, #60	; 0x3c
 8008062:	aa0e      	add	r2, sp, #56	; 0x38
 8008064:	4630      	mov	r0, r6
 8008066:	eeb0 0b48 	vmov.f64	d0, d8
 800806a:	f002 f815 	bl	800a098 <__d2b>
 800806e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008072:	4605      	mov	r5, r0
 8008074:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008076:	2900      	cmp	r1, #0
 8008078:	d046      	beq.n	8008108 <_dtoa_r+0x158>
 800807a:	ee18 4a90 	vmov	r4, s17
 800807e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008082:	ec53 2b18 	vmov	r2, r3, d8
 8008086:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800808a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800808e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008092:	2400      	movs	r4, #0
 8008094:	ec43 2b16 	vmov	d6, r2, r3
 8008098:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800809c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008248 <_dtoa_r+0x298>
 80080a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80080a4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008250 <_dtoa_r+0x2a0>
 80080a8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80080ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008258 <_dtoa_r+0x2a8>
 80080b0:	ee07 1a90 	vmov	s15, r1
 80080b4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80080b8:	eeb0 7b46 	vmov.f64	d7, d6
 80080bc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80080c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80080c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080cc:	ee16 ba90 	vmov	fp, s13
 80080d0:	940a      	str	r4, [sp, #40]	; 0x28
 80080d2:	d508      	bpl.n	80080e6 <_dtoa_r+0x136>
 80080d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	bf18      	it	ne
 80080e2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80080e6:	f1bb 0f16 	cmp.w	fp, #22
 80080ea:	d82f      	bhi.n	800814c <_dtoa_r+0x19c>
 80080ec:	4b60      	ldr	r3, [pc, #384]	; (8008270 <_dtoa_r+0x2c0>)
 80080ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080f2:	ed93 7b00 	vldr	d7, [r3]
 80080f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	d501      	bpl.n	8008104 <_dtoa_r+0x154>
 8008100:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008104:	2300      	movs	r3, #0
 8008106:	e022      	b.n	800814e <_dtoa_r+0x19e>
 8008108:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800810a:	4401      	add	r1, r0
 800810c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008110:	2b20      	cmp	r3, #32
 8008112:	bfc1      	itttt	gt
 8008114:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008118:	fa04 f303 	lslgt.w	r3, r4, r3
 800811c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008120:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008124:	bfd6      	itet	le
 8008126:	f1c3 0320 	rsble	r3, r3, #32
 800812a:	ea43 0808 	orrgt.w	r8, r3, r8
 800812e:	fa08 f803 	lslle.w	r8, r8, r3
 8008132:	ee07 8a90 	vmov	s15, r8
 8008136:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800813a:	3901      	subs	r1, #1
 800813c:	ee17 4a90 	vmov	r4, s15
 8008140:	ec53 2b17 	vmov	r2, r3, d7
 8008144:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008148:	2401      	movs	r4, #1
 800814a:	e7a3      	b.n	8008094 <_dtoa_r+0xe4>
 800814c:	2301      	movs	r3, #1
 800814e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008150:	1a43      	subs	r3, r0, r1
 8008152:	1e5a      	subs	r2, r3, #1
 8008154:	bf45      	ittet	mi
 8008156:	f1c3 0301 	rsbmi	r3, r3, #1
 800815a:	9304      	strmi	r3, [sp, #16]
 800815c:	2300      	movpl	r3, #0
 800815e:	2300      	movmi	r3, #0
 8008160:	9205      	str	r2, [sp, #20]
 8008162:	bf54      	ite	pl
 8008164:	9304      	strpl	r3, [sp, #16]
 8008166:	9305      	strmi	r3, [sp, #20]
 8008168:	f1bb 0f00 	cmp.w	fp, #0
 800816c:	db18      	blt.n	80081a0 <_dtoa_r+0x1f0>
 800816e:	9b05      	ldr	r3, [sp, #20]
 8008170:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008174:	445b      	add	r3, fp
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	2300      	movs	r3, #0
 800817a:	9a06      	ldr	r2, [sp, #24]
 800817c:	2a09      	cmp	r2, #9
 800817e:	d84a      	bhi.n	8008216 <_dtoa_r+0x266>
 8008180:	2a05      	cmp	r2, #5
 8008182:	bfc4      	itt	gt
 8008184:	3a04      	subgt	r2, #4
 8008186:	9206      	strgt	r2, [sp, #24]
 8008188:	9a06      	ldr	r2, [sp, #24]
 800818a:	f1a2 0202 	sub.w	r2, r2, #2
 800818e:	bfcc      	ite	gt
 8008190:	2400      	movgt	r4, #0
 8008192:	2401      	movle	r4, #1
 8008194:	2a03      	cmp	r2, #3
 8008196:	d849      	bhi.n	800822c <_dtoa_r+0x27c>
 8008198:	e8df f002 	tbb	[pc, r2]
 800819c:	3b2d2f0b 	.word	0x3b2d2f0b
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	2200      	movs	r2, #0
 80081a4:	eba3 030b 	sub.w	r3, r3, fp
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	9209      	str	r2, [sp, #36]	; 0x24
 80081ac:	f1cb 0300 	rsb	r3, fp, #0
 80081b0:	e7e3      	b.n	800817a <_dtoa_r+0x1ca>
 80081b2:	2200      	movs	r2, #0
 80081b4:	9207      	str	r2, [sp, #28]
 80081b6:	9a08      	ldr	r2, [sp, #32]
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	dc3a      	bgt.n	8008232 <_dtoa_r+0x282>
 80081bc:	f04f 0a01 	mov.w	sl, #1
 80081c0:	46d1      	mov	r9, sl
 80081c2:	4652      	mov	r2, sl
 80081c4:	f8cd a020 	str.w	sl, [sp, #32]
 80081c8:	2100      	movs	r1, #0
 80081ca:	6471      	str	r1, [r6, #68]	; 0x44
 80081cc:	2004      	movs	r0, #4
 80081ce:	f100 0714 	add.w	r7, r0, #20
 80081d2:	4297      	cmp	r7, r2
 80081d4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80081d6:	d931      	bls.n	800823c <_dtoa_r+0x28c>
 80081d8:	4630      	mov	r0, r6
 80081da:	930d      	str	r3, [sp, #52]	; 0x34
 80081dc:	f001 fbbc 	bl	8009958 <_Balloc>
 80081e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e2:	9001      	str	r0, [sp, #4]
 80081e4:	4602      	mov	r2, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d148      	bne.n	800827c <_dtoa_r+0x2cc>
 80081ea:	4b22      	ldr	r3, [pc, #136]	; (8008274 <_dtoa_r+0x2c4>)
 80081ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081f0:	4821      	ldr	r0, [pc, #132]	; (8008278 <_dtoa_r+0x2c8>)
 80081f2:	f005 fae3 	bl	800d7bc <__assert_func>
 80081f6:	2201      	movs	r2, #1
 80081f8:	e7dc      	b.n	80081b4 <_dtoa_r+0x204>
 80081fa:	2200      	movs	r2, #0
 80081fc:	9207      	str	r2, [sp, #28]
 80081fe:	9a08      	ldr	r2, [sp, #32]
 8008200:	eb0b 0a02 	add.w	sl, fp, r2
 8008204:	f10a 0901 	add.w	r9, sl, #1
 8008208:	464a      	mov	r2, r9
 800820a:	2a01      	cmp	r2, #1
 800820c:	bfb8      	it	lt
 800820e:	2201      	movlt	r2, #1
 8008210:	e7da      	b.n	80081c8 <_dtoa_r+0x218>
 8008212:	2201      	movs	r2, #1
 8008214:	e7f2      	b.n	80081fc <_dtoa_r+0x24c>
 8008216:	2401      	movs	r4, #1
 8008218:	2200      	movs	r2, #0
 800821a:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800821e:	f04f 3aff 	mov.w	sl, #4294967295
 8008222:	2100      	movs	r1, #0
 8008224:	46d1      	mov	r9, sl
 8008226:	2212      	movs	r2, #18
 8008228:	9108      	str	r1, [sp, #32]
 800822a:	e7cd      	b.n	80081c8 <_dtoa_r+0x218>
 800822c:	2201      	movs	r2, #1
 800822e:	9207      	str	r2, [sp, #28]
 8008230:	e7f5      	b.n	800821e <_dtoa_r+0x26e>
 8008232:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008236:	46d1      	mov	r9, sl
 8008238:	4652      	mov	r2, sl
 800823a:	e7c5      	b.n	80081c8 <_dtoa_r+0x218>
 800823c:	3101      	adds	r1, #1
 800823e:	6471      	str	r1, [r6, #68]	; 0x44
 8008240:	0040      	lsls	r0, r0, #1
 8008242:	e7c4      	b.n	80081ce <_dtoa_r+0x21e>
 8008244:	f3af 8000 	nop.w
 8008248:	636f4361 	.word	0x636f4361
 800824c:	3fd287a7 	.word	0x3fd287a7
 8008250:	8b60c8b3 	.word	0x8b60c8b3
 8008254:	3fc68a28 	.word	0x3fc68a28
 8008258:	509f79fb 	.word	0x509f79fb
 800825c:	3fd34413 	.word	0x3fd34413
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	0800f291 	.word	0x0800f291
 8008268:	0800f295 	.word	0x0800f295
 800826c:	0800f148 	.word	0x0800f148
 8008270:	0800f398 	.word	0x0800f398
 8008274:	0800f29e 	.word	0x0800f29e
 8008278:	0800f2af 	.word	0x0800f2af
 800827c:	9a01      	ldr	r2, [sp, #4]
 800827e:	6432      	str	r2, [r6, #64]	; 0x40
 8008280:	f1b9 0f0e 	cmp.w	r9, #14
 8008284:	d86c      	bhi.n	8008360 <_dtoa_r+0x3b0>
 8008286:	2c00      	cmp	r4, #0
 8008288:	d06a      	beq.n	8008360 <_dtoa_r+0x3b0>
 800828a:	f1bb 0f00 	cmp.w	fp, #0
 800828e:	f340 80a0 	ble.w	80083d2 <_dtoa_r+0x422>
 8008292:	49c1      	ldr	r1, [pc, #772]	; (8008598 <_dtoa_r+0x5e8>)
 8008294:	f00b 020f 	and.w	r2, fp, #15
 8008298:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800829c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80082a0:	ed92 7b00 	vldr	d7, [r2]
 80082a4:	ea4f 112b 	mov.w	r1, fp, asr #4
 80082a8:	f000 8087 	beq.w	80083ba <_dtoa_r+0x40a>
 80082ac:	4abb      	ldr	r2, [pc, #748]	; (800859c <_dtoa_r+0x5ec>)
 80082ae:	ed92 6b08 	vldr	d6, [r2, #32]
 80082b2:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80082b6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082ba:	f001 010f 	and.w	r1, r1, #15
 80082be:	2203      	movs	r2, #3
 80082c0:	48b6      	ldr	r0, [pc, #728]	; (800859c <_dtoa_r+0x5ec>)
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d17b      	bne.n	80083be <_dtoa_r+0x40e>
 80082c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082d4:	2900      	cmp	r1, #0
 80082d6:	f000 80a2 	beq.w	800841e <_dtoa_r+0x46e>
 80082da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80082de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ea:	f140 8098 	bpl.w	800841e <_dtoa_r+0x46e>
 80082ee:	f1b9 0f00 	cmp.w	r9, #0
 80082f2:	f000 8094 	beq.w	800841e <_dtoa_r+0x46e>
 80082f6:	f1ba 0f00 	cmp.w	sl, #0
 80082fa:	dd2f      	ble.n	800835c <_dtoa_r+0x3ac>
 80082fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008304:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008308:	f10b 37ff 	add.w	r7, fp, #4294967295
 800830c:	3201      	adds	r2, #1
 800830e:	4650      	mov	r0, sl
 8008310:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008314:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008318:	ee07 2a90 	vmov	s15, r2
 800831c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008320:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008324:	ee15 4a90 	vmov	r4, s11
 8008328:	ec52 1b15 	vmov	r1, r2, d5
 800832c:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008330:	2800      	cmp	r0, #0
 8008332:	d177      	bne.n	8008424 <_dtoa_r+0x474>
 8008334:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008338:	ee36 6b47 	vsub.f64	d6, d6, d7
 800833c:	ec42 1b17 	vmov	d7, r1, r2
 8008340:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008348:	f300 8262 	bgt.w	8008810 <_dtoa_r+0x860>
 800834c:	eeb1 7b47 	vneg.f64	d7, d7
 8008350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008358:	f100 8257 	bmi.w	800880a <_dtoa_r+0x85a>
 800835c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008362:	2a00      	cmp	r2, #0
 8008364:	f2c0 811c 	blt.w	80085a0 <_dtoa_r+0x5f0>
 8008368:	f1bb 0f0e 	cmp.w	fp, #14
 800836c:	f300 8118 	bgt.w	80085a0 <_dtoa_r+0x5f0>
 8008370:	4b89      	ldr	r3, [pc, #548]	; (8008598 <_dtoa_r+0x5e8>)
 8008372:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008376:	ed93 6b00 	vldr	d6, [r3]
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f280 80b7 	bge.w	80084f0 <_dtoa_r+0x540>
 8008382:	f1b9 0f00 	cmp.w	r9, #0
 8008386:	f300 80b3 	bgt.w	80084f0 <_dtoa_r+0x540>
 800838a:	f040 823e 	bne.w	800880a <_dtoa_r+0x85a>
 800838e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008392:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008396:	ed9d 7b02 	vldr	d7, [sp, #8]
 800839a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	464c      	mov	r4, r9
 80083a4:	464f      	mov	r7, r9
 80083a6:	f280 8214 	bge.w	80087d2 <_dtoa_r+0x822>
 80083aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083ae:	2331      	movs	r3, #49	; 0x31
 80083b0:	f808 3b01 	strb.w	r3, [r8], #1
 80083b4:	f10b 0b01 	add.w	fp, fp, #1
 80083b8:	e210      	b.n	80087dc <_dtoa_r+0x82c>
 80083ba:	2202      	movs	r2, #2
 80083bc:	e780      	b.n	80082c0 <_dtoa_r+0x310>
 80083be:	07cc      	lsls	r4, r1, #31
 80083c0:	d504      	bpl.n	80083cc <_dtoa_r+0x41c>
 80083c2:	ed90 6b00 	vldr	d6, [r0]
 80083c6:	3201      	adds	r2, #1
 80083c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083cc:	1049      	asrs	r1, r1, #1
 80083ce:	3008      	adds	r0, #8
 80083d0:	e777      	b.n	80082c2 <_dtoa_r+0x312>
 80083d2:	d022      	beq.n	800841a <_dtoa_r+0x46a>
 80083d4:	f1cb 0100 	rsb	r1, fp, #0
 80083d8:	4a6f      	ldr	r2, [pc, #444]	; (8008598 <_dtoa_r+0x5e8>)
 80083da:	f001 000f 	and.w	r0, r1, #15
 80083de:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80083e2:	ed92 7b00 	vldr	d7, [r2]
 80083e6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80083ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083ee:	486b      	ldr	r0, [pc, #428]	; (800859c <_dtoa_r+0x5ec>)
 80083f0:	1109      	asrs	r1, r1, #4
 80083f2:	2400      	movs	r4, #0
 80083f4:	2202      	movs	r2, #2
 80083f6:	b929      	cbnz	r1, 8008404 <_dtoa_r+0x454>
 80083f8:	2c00      	cmp	r4, #0
 80083fa:	f43f af6a 	beq.w	80082d2 <_dtoa_r+0x322>
 80083fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008402:	e766      	b.n	80082d2 <_dtoa_r+0x322>
 8008404:	07cf      	lsls	r7, r1, #31
 8008406:	d505      	bpl.n	8008414 <_dtoa_r+0x464>
 8008408:	ed90 6b00 	vldr	d6, [r0]
 800840c:	3201      	adds	r2, #1
 800840e:	2401      	movs	r4, #1
 8008410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008414:	1049      	asrs	r1, r1, #1
 8008416:	3008      	adds	r0, #8
 8008418:	e7ed      	b.n	80083f6 <_dtoa_r+0x446>
 800841a:	2202      	movs	r2, #2
 800841c:	e759      	b.n	80082d2 <_dtoa_r+0x322>
 800841e:	465f      	mov	r7, fp
 8008420:	4648      	mov	r0, r9
 8008422:	e775      	b.n	8008310 <_dtoa_r+0x360>
 8008424:	ec42 1b17 	vmov	d7, r1, r2
 8008428:	4a5b      	ldr	r2, [pc, #364]	; (8008598 <_dtoa_r+0x5e8>)
 800842a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800842e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008432:	9a01      	ldr	r2, [sp, #4]
 8008434:	1814      	adds	r4, r2, r0
 8008436:	9a07      	ldr	r2, [sp, #28]
 8008438:	b352      	cbz	r2, 8008490 <_dtoa_r+0x4e0>
 800843a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800843e:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008442:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008446:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800844a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800844e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008452:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008456:	ee14 2a90 	vmov	r2, s9
 800845a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800845e:	3230      	adds	r2, #48	; 0x30
 8008460:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	f808 2b01 	strb.w	r2, [r8], #1
 8008470:	d439      	bmi.n	80084e6 <_dtoa_r+0x536>
 8008472:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008476:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800847a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847e:	d472      	bmi.n	8008566 <_dtoa_r+0x5b6>
 8008480:	45a0      	cmp	r8, r4
 8008482:	f43f af6b 	beq.w	800835c <_dtoa_r+0x3ac>
 8008486:	ee27 7b03 	vmul.f64	d7, d7, d3
 800848a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800848e:	e7e0      	b.n	8008452 <_dtoa_r+0x4a2>
 8008490:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008494:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008498:	4621      	mov	r1, r4
 800849a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800849e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80084a2:	ee14 2a90 	vmov	r2, s9
 80084a6:	3230      	adds	r2, #48	; 0x30
 80084a8:	f808 2b01 	strb.w	r2, [r8], #1
 80084ac:	45a0      	cmp	r8, r4
 80084ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084b6:	d118      	bne.n	80084ea <_dtoa_r+0x53a>
 80084b8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80084bc:	ee37 4b05 	vadd.f64	d4, d7, d5
 80084c0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	dc4d      	bgt.n	8008566 <_dtoa_r+0x5b6>
 80084ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80084ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d6:	f57f af41 	bpl.w	800835c <_dtoa_r+0x3ac>
 80084da:	4688      	mov	r8, r1
 80084dc:	3901      	subs	r1, #1
 80084de:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80084e2:	2b30      	cmp	r3, #48	; 0x30
 80084e4:	d0f9      	beq.n	80084da <_dtoa_r+0x52a>
 80084e6:	46bb      	mov	fp, r7
 80084e8:	e02a      	b.n	8008540 <_dtoa_r+0x590>
 80084ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084ee:	e7d6      	b.n	800849e <_dtoa_r+0x4ee>
 80084f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084f4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80084f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084fc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008500:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008504:	ee15 3a10 	vmov	r3, s10
 8008508:	3330      	adds	r3, #48	; 0x30
 800850a:	f808 3b01 	strb.w	r3, [r8], #1
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	eba8 0303 	sub.w	r3, r8, r3
 8008514:	4599      	cmp	r9, r3
 8008516:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800851a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800851e:	d133      	bne.n	8008588 <_dtoa_r+0x5d8>
 8008520:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	dc1a      	bgt.n	8008564 <_dtoa_r+0x5b4>
 800852e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008536:	d103      	bne.n	8008540 <_dtoa_r+0x590>
 8008538:	ee15 3a10 	vmov	r3, s10
 800853c:	07d9      	lsls	r1, r3, #31
 800853e:	d411      	bmi.n	8008564 <_dtoa_r+0x5b4>
 8008540:	4629      	mov	r1, r5
 8008542:	4630      	mov	r0, r6
 8008544:	f001 fa2d 	bl	80099a2 <_Bfree>
 8008548:	2300      	movs	r3, #0
 800854a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800854c:	f888 3000 	strb.w	r3, [r8]
 8008550:	f10b 0301 	add.w	r3, fp, #1
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008558:	2b00      	cmp	r3, #0
 800855a:	f43f ad64 	beq.w	8008026 <_dtoa_r+0x76>
 800855e:	f8c3 8000 	str.w	r8, [r3]
 8008562:	e560      	b.n	8008026 <_dtoa_r+0x76>
 8008564:	465f      	mov	r7, fp
 8008566:	4643      	mov	r3, r8
 8008568:	4698      	mov	r8, r3
 800856a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800856e:	2a39      	cmp	r2, #57	; 0x39
 8008570:	d106      	bne.n	8008580 <_dtoa_r+0x5d0>
 8008572:	9a01      	ldr	r2, [sp, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d1f7      	bne.n	8008568 <_dtoa_r+0x5b8>
 8008578:	9901      	ldr	r1, [sp, #4]
 800857a:	2230      	movs	r2, #48	; 0x30
 800857c:	3701      	adds	r7, #1
 800857e:	700a      	strb	r2, [r1, #0]
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	3201      	adds	r2, #1
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	e7ae      	b.n	80084e6 <_dtoa_r+0x536>
 8008588:	ee27 7b04 	vmul.f64	d7, d7, d4
 800858c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008594:	d1b2      	bne.n	80084fc <_dtoa_r+0x54c>
 8008596:	e7d3      	b.n	8008540 <_dtoa_r+0x590>
 8008598:	0800f398 	.word	0x0800f398
 800859c:	0800f370 	.word	0x0800f370
 80085a0:	9907      	ldr	r1, [sp, #28]
 80085a2:	2900      	cmp	r1, #0
 80085a4:	f000 80d0 	beq.w	8008748 <_dtoa_r+0x798>
 80085a8:	9906      	ldr	r1, [sp, #24]
 80085aa:	2901      	cmp	r1, #1
 80085ac:	f300 80b4 	bgt.w	8008718 <_dtoa_r+0x768>
 80085b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085b2:	2900      	cmp	r1, #0
 80085b4:	f000 80ac 	beq.w	8008710 <_dtoa_r+0x760>
 80085b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085c0:	461c      	mov	r4, r3
 80085c2:	930a      	str	r3, [sp, #40]	; 0x28
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	9b05      	ldr	r3, [sp, #20]
 80085cc:	2101      	movs	r1, #1
 80085ce:	4413      	add	r3, r2
 80085d0:	4630      	mov	r0, r6
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f001 face 	bl	8009b74 <__i2b>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	4607      	mov	r7, r0
 80085dc:	f1b8 0f00 	cmp.w	r8, #0
 80085e0:	dd0d      	ble.n	80085fe <_dtoa_r+0x64e>
 80085e2:	9a05      	ldr	r2, [sp, #20]
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	dd0a      	ble.n	80085fe <_dtoa_r+0x64e>
 80085e8:	4542      	cmp	r2, r8
 80085ea:	9904      	ldr	r1, [sp, #16]
 80085ec:	bfa8      	it	ge
 80085ee:	4642      	movge	r2, r8
 80085f0:	1a89      	subs	r1, r1, r2
 80085f2:	9104      	str	r1, [sp, #16]
 80085f4:	9905      	ldr	r1, [sp, #20]
 80085f6:	eba8 0802 	sub.w	r8, r8, r2
 80085fa:	1a8a      	subs	r2, r1, r2
 80085fc:	9205      	str	r2, [sp, #20]
 80085fe:	b303      	cbz	r3, 8008642 <_dtoa_r+0x692>
 8008600:	9a07      	ldr	r2, [sp, #28]
 8008602:	2a00      	cmp	r2, #0
 8008604:	f000 80a5 	beq.w	8008752 <_dtoa_r+0x7a2>
 8008608:	2c00      	cmp	r4, #0
 800860a:	dd13      	ble.n	8008634 <_dtoa_r+0x684>
 800860c:	4639      	mov	r1, r7
 800860e:	4622      	mov	r2, r4
 8008610:	4630      	mov	r0, r6
 8008612:	930d      	str	r3, [sp, #52]	; 0x34
 8008614:	f001 fb6e 	bl	8009cf4 <__pow5mult>
 8008618:	462a      	mov	r2, r5
 800861a:	4601      	mov	r1, r0
 800861c:	4607      	mov	r7, r0
 800861e:	4630      	mov	r0, r6
 8008620:	f001 fabe 	bl	8009ba0 <__multiply>
 8008624:	4629      	mov	r1, r5
 8008626:	900a      	str	r0, [sp, #40]	; 0x28
 8008628:	4630      	mov	r0, r6
 800862a:	f001 f9ba 	bl	80099a2 <_Bfree>
 800862e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008632:	4615      	mov	r5, r2
 8008634:	1b1a      	subs	r2, r3, r4
 8008636:	d004      	beq.n	8008642 <_dtoa_r+0x692>
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f001 fb5a 	bl	8009cf4 <__pow5mult>
 8008640:	4605      	mov	r5, r0
 8008642:	2101      	movs	r1, #1
 8008644:	4630      	mov	r0, r6
 8008646:	f001 fa95 	bl	8009b74 <__i2b>
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	f340 8081 	ble.w	8008756 <_dtoa_r+0x7a6>
 8008654:	461a      	mov	r2, r3
 8008656:	4601      	mov	r1, r0
 8008658:	4630      	mov	r0, r6
 800865a:	f001 fb4b 	bl	8009cf4 <__pow5mult>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	2b01      	cmp	r3, #1
 8008662:	4604      	mov	r4, r0
 8008664:	dd7a      	ble.n	800875c <_dtoa_r+0x7ac>
 8008666:	2300      	movs	r3, #0
 8008668:	930a      	str	r3, [sp, #40]	; 0x28
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008670:	6910      	ldr	r0, [r2, #16]
 8008672:	f001 fa2f 	bl	8009ad4 <__hi0bits>
 8008676:	f1c0 0020 	rsb	r0, r0, #32
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	4418      	add	r0, r3
 800867e:	f010 001f 	ands.w	r0, r0, #31
 8008682:	f000 808c 	beq.w	800879e <_dtoa_r+0x7ee>
 8008686:	f1c0 0220 	rsb	r2, r0, #32
 800868a:	2a04      	cmp	r2, #4
 800868c:	f340 8085 	ble.w	800879a <_dtoa_r+0x7ea>
 8008690:	f1c0 001c 	rsb	r0, r0, #28
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	4403      	add	r3, r0
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	4403      	add	r3, r0
 800869e:	4480      	add	r8, r0
 80086a0:	9305      	str	r3, [sp, #20]
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd05      	ble.n	80086b4 <_dtoa_r+0x704>
 80086a8:	4629      	mov	r1, r5
 80086aa:	461a      	mov	r2, r3
 80086ac:	4630      	mov	r0, r6
 80086ae:	f001 fb61 	bl	8009d74 <__lshift>
 80086b2:	4605      	mov	r5, r0
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd05      	ble.n	80086c6 <_dtoa_r+0x716>
 80086ba:	4621      	mov	r1, r4
 80086bc:	461a      	mov	r2, r3
 80086be:	4630      	mov	r0, r6
 80086c0:	f001 fb58 	bl	8009d74 <__lshift>
 80086c4:	4604      	mov	r4, r0
 80086c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d06a      	beq.n	80087a2 <_dtoa_r+0x7f2>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f001 fbc0 	bl	8009e54 <__mcmp>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	da64      	bge.n	80087a2 <_dtoa_r+0x7f2>
 80086d8:	2300      	movs	r3, #0
 80086da:	4629      	mov	r1, r5
 80086dc:	220a      	movs	r2, #10
 80086de:	4630      	mov	r0, r6
 80086e0:	f001 f968 	bl	80099b4 <__multadd>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086ea:	4605      	mov	r5, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8190 	beq.w	8008a12 <_dtoa_r+0xa62>
 80086f2:	4639      	mov	r1, r7
 80086f4:	2300      	movs	r3, #0
 80086f6:	220a      	movs	r2, #10
 80086f8:	4630      	mov	r0, r6
 80086fa:	f001 f95b 	bl	80099b4 <__multadd>
 80086fe:	f1ba 0f00 	cmp.w	sl, #0
 8008702:	4607      	mov	r7, r0
 8008704:	f300 808d 	bgt.w	8008822 <_dtoa_r+0x872>
 8008708:	9b06      	ldr	r3, [sp, #24]
 800870a:	2b02      	cmp	r3, #2
 800870c:	dc50      	bgt.n	80087b0 <_dtoa_r+0x800>
 800870e:	e088      	b.n	8008822 <_dtoa_r+0x872>
 8008710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008712:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008716:	e751      	b.n	80085bc <_dtoa_r+0x60c>
 8008718:	f109 34ff 	add.w	r4, r9, #4294967295
 800871c:	42a3      	cmp	r3, r4
 800871e:	bfbf      	itttt	lt
 8008720:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008722:	1ae3      	sublt	r3, r4, r3
 8008724:	18d2      	addlt	r2, r2, r3
 8008726:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008728:	bfb6      	itet	lt
 800872a:	4623      	movlt	r3, r4
 800872c:	1b1c      	subge	r4, r3, r4
 800872e:	2400      	movlt	r4, #0
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	bfb5      	itete	lt
 8008736:	9a04      	ldrlt	r2, [sp, #16]
 8008738:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800873c:	eba2 0809 	sublt.w	r8, r2, r9
 8008740:	464a      	movge	r2, r9
 8008742:	bfb8      	it	lt
 8008744:	2200      	movlt	r2, #0
 8008746:	e73c      	b.n	80085c2 <_dtoa_r+0x612>
 8008748:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800874c:	9f07      	ldr	r7, [sp, #28]
 800874e:	461c      	mov	r4, r3
 8008750:	e744      	b.n	80085dc <_dtoa_r+0x62c>
 8008752:	461a      	mov	r2, r3
 8008754:	e770      	b.n	8008638 <_dtoa_r+0x688>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	2b01      	cmp	r3, #1
 800875a:	dc18      	bgt.n	800878e <_dtoa_r+0x7de>
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	b9b3      	cbnz	r3, 800878e <_dtoa_r+0x7de>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008766:	b9a2      	cbnz	r2, 8008792 <_dtoa_r+0x7e2>
 8008768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800876c:	0d12      	lsrs	r2, r2, #20
 800876e:	0512      	lsls	r2, r2, #20
 8008770:	b18a      	cbz	r2, 8008796 <_dtoa_r+0x7e6>
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	3301      	adds	r3, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	3301      	adds	r3, #1
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	2301      	movs	r3, #1
 8008780:	930a      	str	r3, [sp, #40]	; 0x28
 8008782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	f47f af70 	bne.w	800866a <_dtoa_r+0x6ba>
 800878a:	2001      	movs	r0, #1
 800878c:	e775      	b.n	800867a <_dtoa_r+0x6ca>
 800878e:	2300      	movs	r3, #0
 8008790:	e7f6      	b.n	8008780 <_dtoa_r+0x7d0>
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	e7f4      	b.n	8008780 <_dtoa_r+0x7d0>
 8008796:	920a      	str	r2, [sp, #40]	; 0x28
 8008798:	e7f3      	b.n	8008782 <_dtoa_r+0x7d2>
 800879a:	d082      	beq.n	80086a2 <_dtoa_r+0x6f2>
 800879c:	4610      	mov	r0, r2
 800879e:	301c      	adds	r0, #28
 80087a0:	e778      	b.n	8008694 <_dtoa_r+0x6e4>
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	dc37      	bgt.n	8008818 <_dtoa_r+0x868>
 80087a8:	9b06      	ldr	r3, [sp, #24]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	dd34      	ble.n	8008818 <_dtoa_r+0x868>
 80087ae:	46ca      	mov	sl, r9
 80087b0:	f1ba 0f00 	cmp.w	sl, #0
 80087b4:	d10d      	bne.n	80087d2 <_dtoa_r+0x822>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4653      	mov	r3, sl
 80087ba:	2205      	movs	r2, #5
 80087bc:	4630      	mov	r0, r6
 80087be:	f001 f8f9 	bl	80099b4 <__multadd>
 80087c2:	4601      	mov	r1, r0
 80087c4:	4604      	mov	r4, r0
 80087c6:	4628      	mov	r0, r5
 80087c8:	f001 fb44 	bl	8009e54 <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f73f adec 	bgt.w	80083aa <_dtoa_r+0x3fa>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087d8:	ea6f 0b03 	mvn.w	fp, r3
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	4621      	mov	r1, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f001 f8dd 	bl	80099a2 <_Bfree>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	f43f aea9 	beq.w	8008540 <_dtoa_r+0x590>
 80087ee:	f1b9 0f00 	cmp.w	r9, #0
 80087f2:	d005      	beq.n	8008800 <_dtoa_r+0x850>
 80087f4:	45b9      	cmp	r9, r7
 80087f6:	d003      	beq.n	8008800 <_dtoa_r+0x850>
 80087f8:	4649      	mov	r1, r9
 80087fa:	4630      	mov	r0, r6
 80087fc:	f001 f8d1 	bl	80099a2 <_Bfree>
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	f001 f8cd 	bl	80099a2 <_Bfree>
 8008808:	e69a      	b.n	8008540 <_dtoa_r+0x590>
 800880a:	2400      	movs	r4, #0
 800880c:	4627      	mov	r7, r4
 800880e:	e7e0      	b.n	80087d2 <_dtoa_r+0x822>
 8008810:	46bb      	mov	fp, r7
 8008812:	4604      	mov	r4, r0
 8008814:	4607      	mov	r7, r0
 8008816:	e5c8      	b.n	80083aa <_dtoa_r+0x3fa>
 8008818:	9b07      	ldr	r3, [sp, #28]
 800881a:	46ca      	mov	sl, r9
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80ff 	beq.w	8008a20 <_dtoa_r+0xa70>
 8008822:	f1b8 0f00 	cmp.w	r8, #0
 8008826:	dd05      	ble.n	8008834 <_dtoa_r+0x884>
 8008828:	4639      	mov	r1, r7
 800882a:	4642      	mov	r2, r8
 800882c:	4630      	mov	r0, r6
 800882e:	f001 faa1 	bl	8009d74 <__lshift>
 8008832:	4607      	mov	r7, r0
 8008834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05c      	beq.n	80088f4 <_dtoa_r+0x944>
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4630      	mov	r0, r6
 800883e:	f001 f88b 	bl	8009958 <_Balloc>
 8008842:	4680      	mov	r8, r0
 8008844:	b920      	cbnz	r0, 8008850 <_dtoa_r+0x8a0>
 8008846:	4b82      	ldr	r3, [pc, #520]	; (8008a50 <_dtoa_r+0xaa0>)
 8008848:	4602      	mov	r2, r0
 800884a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800884e:	e4cf      	b.n	80081f0 <_dtoa_r+0x240>
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	3202      	adds	r2, #2
 8008854:	0092      	lsls	r2, r2, #2
 8008856:	f107 010c 	add.w	r1, r7, #12
 800885a:	300c      	adds	r0, #12
 800885c:	f001 f848 	bl	80098f0 <memcpy>
 8008860:	2201      	movs	r2, #1
 8008862:	4641      	mov	r1, r8
 8008864:	4630      	mov	r0, r6
 8008866:	f001 fa85 	bl	8009d74 <__lshift>
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	3301      	adds	r3, #1
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	4453      	add	r3, sl
 8008874:	9308      	str	r3, [sp, #32]
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	46b9      	mov	r9, r7
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	4607      	mov	r7, r0
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	4621      	mov	r1, r4
 8008886:	3b01      	subs	r3, #1
 8008888:	4628      	mov	r0, r5
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	f7ff fb02 	bl	8007e94 <quorem>
 8008890:	4603      	mov	r3, r0
 8008892:	3330      	adds	r3, #48	; 0x30
 8008894:	9005      	str	r0, [sp, #20]
 8008896:	4649      	mov	r1, r9
 8008898:	4628      	mov	r0, r5
 800889a:	9309      	str	r3, [sp, #36]	; 0x24
 800889c:	f001 fada 	bl	8009e54 <__mcmp>
 80088a0:	463a      	mov	r2, r7
 80088a2:	4682      	mov	sl, r0
 80088a4:	4621      	mov	r1, r4
 80088a6:	4630      	mov	r0, r6
 80088a8:	f001 faf0 	bl	8009e8c <__mdiff>
 80088ac:	68c2      	ldr	r2, [r0, #12]
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	4680      	mov	r8, r0
 80088b2:	bb0a      	cbnz	r2, 80088f8 <_dtoa_r+0x948>
 80088b4:	4601      	mov	r1, r0
 80088b6:	4628      	mov	r0, r5
 80088b8:	f001 facc 	bl	8009e54 <__mcmp>
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	4602      	mov	r2, r0
 80088c0:	4641      	mov	r1, r8
 80088c2:	4630      	mov	r0, r6
 80088c4:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80088c8:	f001 f86b 	bl	80099a2 <_Bfree>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80088d4:	ea43 0102 	orr.w	r1, r3, r2
 80088d8:	9b07      	ldr	r3, [sp, #28]
 80088da:	430b      	orrs	r3, r1
 80088dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088de:	d10d      	bne.n	80088fc <_dtoa_r+0x94c>
 80088e0:	2b39      	cmp	r3, #57	; 0x39
 80088e2:	d029      	beq.n	8008938 <_dtoa_r+0x988>
 80088e4:	f1ba 0f00 	cmp.w	sl, #0
 80088e8:	dd01      	ble.n	80088ee <_dtoa_r+0x93e>
 80088ea:	9b05      	ldr	r3, [sp, #20]
 80088ec:	3331      	adds	r3, #49	; 0x31
 80088ee:	9a02      	ldr	r2, [sp, #8]
 80088f0:	7013      	strb	r3, [r2, #0]
 80088f2:	e775      	b.n	80087e0 <_dtoa_r+0x830>
 80088f4:	4638      	mov	r0, r7
 80088f6:	e7b8      	b.n	800886a <_dtoa_r+0x8ba>
 80088f8:	2201      	movs	r2, #1
 80088fa:	e7e1      	b.n	80088c0 <_dtoa_r+0x910>
 80088fc:	f1ba 0f00 	cmp.w	sl, #0
 8008900:	db06      	blt.n	8008910 <_dtoa_r+0x960>
 8008902:	9906      	ldr	r1, [sp, #24]
 8008904:	ea41 0a0a 	orr.w	sl, r1, sl
 8008908:	9907      	ldr	r1, [sp, #28]
 800890a:	ea5a 0101 	orrs.w	r1, sl, r1
 800890e:	d120      	bne.n	8008952 <_dtoa_r+0x9a2>
 8008910:	2a00      	cmp	r2, #0
 8008912:	ddec      	ble.n	80088ee <_dtoa_r+0x93e>
 8008914:	4629      	mov	r1, r5
 8008916:	2201      	movs	r2, #1
 8008918:	4630      	mov	r0, r6
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	f001 fa2a 	bl	8009d74 <__lshift>
 8008920:	4621      	mov	r1, r4
 8008922:	4605      	mov	r5, r0
 8008924:	f001 fa96 	bl	8009e54 <__mcmp>
 8008928:	2800      	cmp	r0, #0
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	dc02      	bgt.n	8008934 <_dtoa_r+0x984>
 800892e:	d1de      	bne.n	80088ee <_dtoa_r+0x93e>
 8008930:	07da      	lsls	r2, r3, #31
 8008932:	d5dc      	bpl.n	80088ee <_dtoa_r+0x93e>
 8008934:	2b39      	cmp	r3, #57	; 0x39
 8008936:	d1d8      	bne.n	80088ea <_dtoa_r+0x93a>
 8008938:	9a02      	ldr	r2, [sp, #8]
 800893a:	2339      	movs	r3, #57	; 0x39
 800893c:	7013      	strb	r3, [r2, #0]
 800893e:	4643      	mov	r3, r8
 8008940:	4698      	mov	r8, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008948:	2a39      	cmp	r2, #57	; 0x39
 800894a:	d051      	beq.n	80089f0 <_dtoa_r+0xa40>
 800894c:	3201      	adds	r2, #1
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	e746      	b.n	80087e0 <_dtoa_r+0x830>
 8008952:	2a00      	cmp	r2, #0
 8008954:	dd03      	ble.n	800895e <_dtoa_r+0x9ae>
 8008956:	2b39      	cmp	r3, #57	; 0x39
 8008958:	d0ee      	beq.n	8008938 <_dtoa_r+0x988>
 800895a:	3301      	adds	r3, #1
 800895c:	e7c7      	b.n	80088ee <_dtoa_r+0x93e>
 800895e:	9a04      	ldr	r2, [sp, #16]
 8008960:	9908      	ldr	r1, [sp, #32]
 8008962:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008966:	428a      	cmp	r2, r1
 8008968:	d02b      	beq.n	80089c2 <_dtoa_r+0xa12>
 800896a:	4629      	mov	r1, r5
 800896c:	2300      	movs	r3, #0
 800896e:	220a      	movs	r2, #10
 8008970:	4630      	mov	r0, r6
 8008972:	f001 f81f 	bl	80099b4 <__multadd>
 8008976:	45b9      	cmp	r9, r7
 8008978:	4605      	mov	r5, r0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	f04f 020a 	mov.w	r2, #10
 8008982:	4649      	mov	r1, r9
 8008984:	4630      	mov	r0, r6
 8008986:	d107      	bne.n	8008998 <_dtoa_r+0x9e8>
 8008988:	f001 f814 	bl	80099b4 <__multadd>
 800898c:	4681      	mov	r9, r0
 800898e:	4607      	mov	r7, r0
 8008990:	9b04      	ldr	r3, [sp, #16]
 8008992:	3301      	adds	r3, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	e774      	b.n	8008882 <_dtoa_r+0x8d2>
 8008998:	f001 f80c 	bl	80099b4 <__multadd>
 800899c:	4639      	mov	r1, r7
 800899e:	4681      	mov	r9, r0
 80089a0:	2300      	movs	r3, #0
 80089a2:	220a      	movs	r2, #10
 80089a4:	4630      	mov	r0, r6
 80089a6:	f001 f805 	bl	80099b4 <__multadd>
 80089aa:	4607      	mov	r7, r0
 80089ac:	e7f0      	b.n	8008990 <_dtoa_r+0x9e0>
 80089ae:	f1ba 0f00 	cmp.w	sl, #0
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	bfcc      	ite	gt
 80089b6:	46d0      	movgt	r8, sl
 80089b8:	f04f 0801 	movle.w	r8, #1
 80089bc:	4490      	add	r8, r2
 80089be:	f04f 0900 	mov.w	r9, #0
 80089c2:	4629      	mov	r1, r5
 80089c4:	2201      	movs	r2, #1
 80089c6:	4630      	mov	r0, r6
 80089c8:	9302      	str	r3, [sp, #8]
 80089ca:	f001 f9d3 	bl	8009d74 <__lshift>
 80089ce:	4621      	mov	r1, r4
 80089d0:	4605      	mov	r5, r0
 80089d2:	f001 fa3f 	bl	8009e54 <__mcmp>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	dcb1      	bgt.n	800893e <_dtoa_r+0x98e>
 80089da:	d102      	bne.n	80089e2 <_dtoa_r+0xa32>
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d4ad      	bmi.n	800893e <_dtoa_r+0x98e>
 80089e2:	4643      	mov	r3, r8
 80089e4:	4698      	mov	r8, r3
 80089e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ea:	2a30      	cmp	r2, #48	; 0x30
 80089ec:	d0fa      	beq.n	80089e4 <_dtoa_r+0xa34>
 80089ee:	e6f7      	b.n	80087e0 <_dtoa_r+0x830>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d1a4      	bne.n	8008940 <_dtoa_r+0x990>
 80089f6:	f10b 0b01 	add.w	fp, fp, #1
 80089fa:	2331      	movs	r3, #49	; 0x31
 80089fc:	e778      	b.n	80088f0 <_dtoa_r+0x940>
 80089fe:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <_dtoa_r+0xaa4>)
 8008a00:	f7ff bb2c 	b.w	800805c <_dtoa_r+0xac>
 8008a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f47f ab13 	bne.w	8008032 <_dtoa_r+0x82>
 8008a0c:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <_dtoa_r+0xaa8>)
 8008a0e:	f7ff bb25 	b.w	800805c <_dtoa_r+0xac>
 8008a12:	f1ba 0f00 	cmp.w	sl, #0
 8008a16:	dc03      	bgt.n	8008a20 <_dtoa_r+0xa70>
 8008a18:	9b06      	ldr	r3, [sp, #24]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	f73f aec8 	bgt.w	80087b0 <_dtoa_r+0x800>
 8008a20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a24:	4621      	mov	r1, r4
 8008a26:	4628      	mov	r0, r5
 8008a28:	f7ff fa34 	bl	8007e94 <quorem>
 8008a2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a30:	f808 3b01 	strb.w	r3, [r8], #1
 8008a34:	9a01      	ldr	r2, [sp, #4]
 8008a36:	eba8 0202 	sub.w	r2, r8, r2
 8008a3a:	4592      	cmp	sl, r2
 8008a3c:	ddb7      	ble.n	80089ae <_dtoa_r+0x9fe>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	2300      	movs	r3, #0
 8008a42:	220a      	movs	r2, #10
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 ffb5 	bl	80099b4 <__multadd>
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	e7ea      	b.n	8008a24 <_dtoa_r+0xa74>
 8008a4e:	bf00      	nop
 8008a50:	0800f29e 	.word	0x0800f29e
 8008a54:	0800f147 	.word	0x0800f147
 8008a58:	0800f295 	.word	0x0800f295

08008a5c <__sflush_r>:
 8008a5c:	898b      	ldrh	r3, [r1, #12]
 8008a5e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	4605      	mov	r5, r0
 8008a68:	0718      	lsls	r0, r3, #28
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	d45f      	bmi.n	8008b2e <__sflush_r+0xd2>
 8008a6e:	684b      	ldr	r3, [r1, #4]
 8008a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	818a      	strh	r2, [r1, #12]
 8008a78:	dc05      	bgt.n	8008a86 <__sflush_r+0x2a>
 8008a7a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc02      	bgt.n	8008a86 <__sflush_r+0x2a>
 8008a80:	2000      	movs	r0, #0
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	d0f9      	beq.n	8008a80 <__sflush_r+0x24>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a92:	682f      	ldr	r7, [r5, #0]
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	d036      	beq.n	8008b06 <__sflush_r+0xaa>
 8008a98:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	075a      	lsls	r2, r3, #29
 8008a9e:	d505      	bpl.n	8008aac <__sflush_r+0x50>
 8008aa0:	6863      	ldr	r3, [r4, #4]
 8008aa2:	1ac0      	subs	r0, r0, r3
 8008aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008aa6:	b10b      	cbz	r3, 8008aac <__sflush_r+0x50>
 8008aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008aaa:	1ac0      	subs	r0, r0, r3
 8008aac:	2300      	movs	r3, #0
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ab2:	69e1      	ldr	r1, [r4, #28]
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b0      	blx	r6
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	d106      	bne.n	8008acc <__sflush_r+0x70>
 8008abe:	6829      	ldr	r1, [r5, #0]
 8008ac0:	291d      	cmp	r1, #29
 8008ac2:	d830      	bhi.n	8008b26 <__sflush_r+0xca>
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	; (8008b74 <__sflush_r+0x118>)
 8008ac6:	40ca      	lsrs	r2, r1
 8008ac8:	07d6      	lsls	r6, r2, #31
 8008aca:	d52c      	bpl.n	8008b26 <__sflush_r+0xca>
 8008acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	6062      	str	r2, [r4, #4]
 8008ad6:	04d9      	lsls	r1, r3, #19
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	d504      	bpl.n	8008aea <__sflush_r+0x8e>
 8008ae0:	1c42      	adds	r2, r0, #1
 8008ae2:	d101      	bne.n	8008ae8 <__sflush_r+0x8c>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b903      	cbnz	r3, 8008aea <__sflush_r+0x8e>
 8008ae8:	6520      	str	r0, [r4, #80]	; 0x50
 8008aea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008aec:	602f      	str	r7, [r5, #0]
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d0c6      	beq.n	8008a80 <__sflush_r+0x24>
 8008af2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d002      	beq.n	8008b00 <__sflush_r+0xa4>
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 f9b2 	bl	8008e64 <_free_r>
 8008b00:	2000      	movs	r0, #0
 8008b02:	6320      	str	r0, [r4, #48]	; 0x30
 8008b04:	e7bd      	b.n	8008a82 <__sflush_r+0x26>
 8008b06:	69e1      	ldr	r1, [r4, #28]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b0      	blx	r6
 8008b0e:	1c41      	adds	r1, r0, #1
 8008b10:	d1c3      	bne.n	8008a9a <__sflush_r+0x3e>
 8008b12:	682b      	ldr	r3, [r5, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0c0      	beq.n	8008a9a <__sflush_r+0x3e>
 8008b18:	2b1d      	cmp	r3, #29
 8008b1a:	d001      	beq.n	8008b20 <__sflush_r+0xc4>
 8008b1c:	2b16      	cmp	r3, #22
 8008b1e:	d101      	bne.n	8008b24 <__sflush_r+0xc8>
 8008b20:	602f      	str	r7, [r5, #0]
 8008b22:	e7ad      	b.n	8008a80 <__sflush_r+0x24>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	e7a9      	b.n	8008a82 <__sflush_r+0x26>
 8008b2e:	690f      	ldr	r7, [r1, #16]
 8008b30:	2f00      	cmp	r7, #0
 8008b32:	d0a5      	beq.n	8008a80 <__sflush_r+0x24>
 8008b34:	079b      	lsls	r3, r3, #30
 8008b36:	680e      	ldr	r6, [r1, #0]
 8008b38:	bf08      	it	eq
 8008b3a:	694b      	ldreq	r3, [r1, #20]
 8008b3c:	600f      	str	r7, [r1, #0]
 8008b3e:	bf18      	it	ne
 8008b40:	2300      	movne	r3, #0
 8008b42:	eba6 0807 	sub.w	r8, r6, r7
 8008b46:	608b      	str	r3, [r1, #8]
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	dd98      	ble.n	8008a80 <__sflush_r+0x24>
 8008b4e:	69e1      	ldr	r1, [r4, #28]
 8008b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b52:	4643      	mov	r3, r8
 8008b54:	463a      	mov	r2, r7
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b0      	blx	r6
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	dc06      	bgt.n	8008b6c <__sflush_r+0x110>
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6a:	e78a      	b.n	8008a82 <__sflush_r+0x26>
 8008b6c:	4407      	add	r7, r0
 8008b6e:	eba8 0800 	sub.w	r8, r8, r0
 8008b72:	e7e9      	b.n	8008b48 <__sflush_r+0xec>
 8008b74:	20400001 	.word	0x20400001

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	b118      	cbz	r0, 8008b88 <_fflush_r+0x10>
 8008b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008b82:	b90b      	cbnz	r3, 8008b88 <_fflush_r+0x10>
 8008b84:	f000 f876 	bl	8008c74 <__sinit>
 8008b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b8c:	b1bb      	cbz	r3, 8008bbe <_fflush_r+0x46>
 8008b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b90:	07d0      	lsls	r0, r2, #31
 8008b92:	d404      	bmi.n	8008b9e <_fflush_r+0x26>
 8008b94:	0599      	lsls	r1, r3, #22
 8008b96:	d402      	bmi.n	8008b9e <_fflush_r+0x26>
 8008b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b9a:	f000 fbc3 	bl	8009324 <__retarget_lock_acquire_recursive>
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f7ff ff5b 	bl	8008a5c <__sflush_r>
 8008ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba8:	07da      	lsls	r2, r3, #31
 8008baa:	4605      	mov	r5, r0
 8008bac:	d405      	bmi.n	8008bba <_fflush_r+0x42>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	059b      	lsls	r3, r3, #22
 8008bb2:	d402      	bmi.n	8008bba <_fflush_r+0x42>
 8008bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb6:	f000 fbb6 	bl	8009326 <__retarget_lock_release_recursive>
 8008bba:	4628      	mov	r0, r5
 8008bbc:	bd38      	pop	{r3, r4, r5, pc}
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	e7fb      	b.n	8008bba <_fflush_r+0x42>
	...

08008bc4 <fflush>:
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	b920      	cbnz	r0, 8008bd2 <fflush+0xe>
 8008bc8:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <fflush+0x18>)
 8008bca:	4905      	ldr	r1, [pc, #20]	; (8008be0 <fflush+0x1c>)
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 bb70 	b.w	80092b2 <_fwalk_reent>
 8008bd2:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <fflush+0x20>)
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	f7ff bfcf 	b.w	8008b78 <_fflush_r>
 8008bda:	bf00      	nop
 8008bdc:	0800f0ec 	.word	0x0800f0ec
 8008be0:	08008b79 	.word	0x08008b79
 8008be4:	2000000c 	.word	0x2000000c

08008be8 <std>:
 8008be8:	2300      	movs	r3, #0
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bf6:	6083      	str	r3, [r0, #8]
 8008bf8:	8181      	strh	r1, [r0, #12]
 8008bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008bfc:	81c2      	strh	r2, [r0, #14]
 8008bfe:	6183      	str	r3, [r0, #24]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2208      	movs	r2, #8
 8008c04:	305c      	adds	r0, #92	; 0x5c
 8008c06:	f7fc fab3 	bl	8005170 <memset>
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <std+0x40>)
 8008c0c:	6223      	str	r3, [r4, #32]
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <std+0x44>)
 8008c10:	6263      	str	r3, [r4, #36]	; 0x24
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <std+0x48>)
 8008c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <std+0x4c>)
 8008c18:	61e4      	str	r4, [r4, #28]
 8008c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c24:	f000 bb7c 	b.w	8009320 <__retarget_lock_init_recursive>
 8008c28:	0800a7f5 	.word	0x0800a7f5
 8008c2c:	0800a817 	.word	0x0800a817
 8008c30:	0800a84f 	.word	0x0800a84f
 8008c34:	0800a873 	.word	0x0800a873

08008c38 <_cleanup_r>:
 8008c38:	4901      	ldr	r1, [pc, #4]	; (8008c40 <_cleanup_r+0x8>)
 8008c3a:	f000 bb3a 	b.w	80092b2 <_fwalk_reent>
 8008c3e:	bf00      	nop
 8008c40:	0800d885 	.word	0x0800d885

08008c44 <__sfp_lock_acquire>:
 8008c44:	4801      	ldr	r0, [pc, #4]	; (8008c4c <__sfp_lock_acquire+0x8>)
 8008c46:	f000 bb6d 	b.w	8009324 <__retarget_lock_acquire_recursive>
 8008c4a:	bf00      	nop
 8008c4c:	20000aba 	.word	0x20000aba

08008c50 <__sfp_lock_release>:
 8008c50:	4801      	ldr	r0, [pc, #4]	; (8008c58 <__sfp_lock_release+0x8>)
 8008c52:	f000 bb68 	b.w	8009326 <__retarget_lock_release_recursive>
 8008c56:	bf00      	nop
 8008c58:	20000aba 	.word	0x20000aba

08008c5c <__sinit_lock_acquire>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__sinit_lock_acquire+0x8>)
 8008c5e:	f000 bb61 	b.w	8009324 <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000abb 	.word	0x20000abb

08008c68 <__sinit_lock_release>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__sinit_lock_release+0x8>)
 8008c6a:	f000 bb5c 	b.w	8009326 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000abb 	.word	0x20000abb

08008c74 <__sinit>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	4604      	mov	r4, r0
 8008c78:	f7ff fff0 	bl	8008c5c <__sinit_lock_acquire>
 8008c7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c7e:	b11a      	cbz	r2, 8008c88 <__sinit+0x14>
 8008c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c84:	f7ff bff0 	b.w	8008c68 <__sinit_lock_release>
 8008c88:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <__sinit+0x4c>)
 8008c8a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8008c92:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8008c96:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8008c9a:	6860      	ldr	r0, [r4, #4]
 8008c9c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8008ca0:	2104      	movs	r1, #4
 8008ca2:	f7ff ffa1 	bl	8008be8 <std>
 8008ca6:	68a0      	ldr	r0, [r4, #8]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	2109      	movs	r1, #9
 8008cac:	f7ff ff9c 	bl	8008be8 <std>
 8008cb0:	68e0      	ldr	r0, [r4, #12]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	2112      	movs	r1, #18
 8008cb6:	f7ff ff97 	bl	8008be8 <std>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cbe:	e7df      	b.n	8008c80 <__sinit+0xc>
 8008cc0:	08008c39 	.word	0x08008c39

08008cc4 <__libc_fini_array>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	; (8008ce4 <__libc_fini_array+0x20>)
 8008cc8:	4c07      	ldr	r4, [pc, #28]	; (8008ce8 <__libc_fini_array+0x24>)
 8008cca:	1b64      	subs	r4, r4, r5
 8008ccc:	10a4      	asrs	r4, r4, #2
 8008cce:	b91c      	cbnz	r4, 8008cd8 <__libc_fini_array+0x14>
 8008cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd4:	f005 beb8 	b.w	800ea48 <_fini>
 8008cd8:	3c01      	subs	r4, #1
 8008cda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008cde:	4798      	blx	r3
 8008ce0:	e7f5      	b.n	8008cce <__libc_fini_array+0xa>
 8008ce2:	bf00      	nop
 8008ce4:	08010e78 	.word	0x08010e78
 8008ce8:	08010e7c 	.word	0x08010e7c

08008cec <_fread_r>:
 8008cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	461e      	mov	r6, r3
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	4373      	muls	r3, r6
 8008cf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008cf8:	4681      	mov	r9, r0
 8008cfa:	4688      	mov	r8, r1
 8008cfc:	4692      	mov	sl, r2
 8008cfe:	469b      	mov	fp, r3
 8008d00:	d05a      	beq.n	8008db8 <_fread_r+0xcc>
 8008d02:	b118      	cbz	r0, 8008d0c <_fread_r+0x20>
 8008d04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d06:	b90b      	cbnz	r3, 8008d0c <_fread_r+0x20>
 8008d08:	f7ff ffb4 	bl	8008c74 <__sinit>
 8008d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d0e:	07db      	lsls	r3, r3, #31
 8008d10:	d405      	bmi.n	8008d1e <_fread_r+0x32>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	059f      	lsls	r7, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_fread_r+0x32>
 8008d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1a:	f000 fb03 	bl	8009324 <__retarget_lock_acquire_recursive>
 8008d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d22:	049d      	lsls	r5, r3, #18
 8008d24:	d406      	bmi.n	8008d34 <_fread_r+0x48>
 8008d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d32:	6663      	str	r3, [r4, #100]	; 0x64
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da01      	bge.n	8008d3e <_fread_r+0x52>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	465f      	mov	r7, fp
 8008d40:	e9d4 1500 	ldrd	r1, r5, [r4]
 8008d44:	42af      	cmp	r7, r5
 8008d46:	d813      	bhi.n	8008d70 <_fread_r+0x84>
 8008d48:	463a      	mov	r2, r7
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f000 fdd0 	bl	80098f0 <memcpy>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	1bdb      	subs	r3, r3, r7
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	443b      	add	r3, r7
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d5e:	07da      	lsls	r2, r3, #31
 8008d60:	d424      	bmi.n	8008dac <_fread_r+0xc0>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	059b      	lsls	r3, r3, #22
 8008d66:	d421      	bmi.n	8008dac <_fread_r+0xc0>
 8008d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6a:	f000 fadc 	bl	8009326 <__retarget_lock_release_recursive>
 8008d6e:	e01d      	b.n	8008dac <_fread_r+0xc0>
 8008d70:	462a      	mov	r2, r5
 8008d72:	4640      	mov	r0, r8
 8008d74:	f000 fdbc 	bl	80098f0 <memcpy>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	442b      	add	r3, r5
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	4621      	mov	r1, r4
 8008d80:	1b7b      	subs	r3, r7, r5
 8008d82:	4648      	mov	r0, r9
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	f001 fc0d 	bl	800a5a4 <__srefill_r>
 8008d8a:	44a8      	add	r8, r5
 8008d8c:	9b01      	ldr	r3, [sp, #4]
 8008d8e:	b188      	cbz	r0, 8008db4 <_fread_r+0xc8>
 8008d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d92:	07d8      	lsls	r0, r3, #31
 8008d94:	d405      	bmi.n	8008da2 <_fread_r+0xb6>
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	0599      	lsls	r1, r3, #22
 8008d9a:	d402      	bmi.n	8008da2 <_fread_r+0xb6>
 8008d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d9e:	f000 fac2 	bl	8009326 <__retarget_lock_release_recursive>
 8008da2:	eb05 060b 	add.w	r6, r5, fp
 8008da6:	1bf6      	subs	r6, r6, r7
 8008da8:	fbb6 f6fa 	udiv	r6, r6, sl
 8008dac:	4630      	mov	r0, r6
 8008dae:	b003      	add	sp, #12
 8008db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	461f      	mov	r7, r3
 8008db6:	e7c3      	b.n	8008d40 <_fread_r+0x54>
 8008db8:	461e      	mov	r6, r3
 8008dba:	e7f7      	b.n	8008dac <_fread_r+0xc0>

08008dbc <_malloc_trim_r>:
 8008dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	2008      	movs	r0, #8
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	f003 feb9 	bl	800cb3c <sysconf>
 8008dca:	4f23      	ldr	r7, [pc, #140]	; (8008e58 <_malloc_trim_r+0x9c>)
 8008dcc:	4680      	mov	r8, r0
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 fdb6 	bl	8009940 <__malloc_lock>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	685d      	ldr	r5, [r3, #4]
 8008dd8:	f025 0503 	bic.w	r5, r5, #3
 8008ddc:	1b2c      	subs	r4, r5, r4
 8008dde:	3c11      	subs	r4, #17
 8008de0:	4444      	add	r4, r8
 8008de2:	fbb4 f4f8 	udiv	r4, r4, r8
 8008de6:	3c01      	subs	r4, #1
 8008de8:	fb08 f404 	mul.w	r4, r8, r4
 8008dec:	45a0      	cmp	r8, r4
 8008dee:	dd05      	ble.n	8008dfc <_malloc_trim_r+0x40>
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 fdab 	bl	800994c <__malloc_unlock>
 8008df6:	2000      	movs	r0, #0
 8008df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f001 fc8a 	bl	800a718 <_sbrk_r>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	442b      	add	r3, r5
 8008e08:	4298      	cmp	r0, r3
 8008e0a:	d1f1      	bne.n	8008df0 <_malloc_trim_r+0x34>
 8008e0c:	4261      	negs	r1, r4
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f001 fc82 	bl	800a718 <_sbrk_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d110      	bne.n	8008e3a <_malloc_trim_r+0x7e>
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f001 fc7c 	bl	800a718 <_sbrk_r>
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	1a83      	subs	r3, r0, r2
 8008e24:	2b0f      	cmp	r3, #15
 8008e26:	dde3      	ble.n	8008df0 <_malloc_trim_r+0x34>
 8008e28:	490c      	ldr	r1, [pc, #48]	; (8008e5c <_malloc_trim_r+0xa0>)
 8008e2a:	6809      	ldr	r1, [r1, #0]
 8008e2c:	1a40      	subs	r0, r0, r1
 8008e2e:	490c      	ldr	r1, [pc, #48]	; (8008e60 <_malloc_trim_r+0xa4>)
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	6008      	str	r0, [r1, #0]
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e7da      	b.n	8008df0 <_malloc_trim_r+0x34>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <_malloc_trim_r+0xa4>)
 8008e3e:	1b2d      	subs	r5, r5, r4
 8008e40:	f045 0501 	orr.w	r5, r5, #1
 8008e44:	605d      	str	r5, [r3, #4]
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	1b1b      	subs	r3, r3, r4
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	f000 fd7d 	bl	800994c <__malloc_unlock>
 8008e52:	2001      	movs	r0, #1
 8008e54:	e7d0      	b.n	8008df8 <_malloc_trim_r+0x3c>
 8008e56:	bf00      	nop
 8008e58:	200005a8 	.word	0x200005a8
 8008e5c:	200009b0 	.word	0x200009b0
 8008e60:	20000abc 	.word	0x20000abc

08008e64 <_free_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	4605      	mov	r5, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	2900      	cmp	r1, #0
 8008e6c:	f000 80b1 	beq.w	8008fd2 <_free_r+0x16e>
 8008e70:	f000 fd66 	bl	8009940 <__malloc_lock>
 8008e74:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008e78:	4856      	ldr	r0, [pc, #344]	; (8008fd4 <_free_r+0x170>)
 8008e7a:	f022 0401 	bic.w	r4, r2, #1
 8008e7e:	f1a7 0308 	sub.w	r3, r7, #8
 8008e82:	eb03 0c04 	add.w	ip, r3, r4
 8008e86:	6881      	ldr	r1, [r0, #8]
 8008e88:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008e8c:	4561      	cmp	r1, ip
 8008e8e:	f026 0603 	bic.w	r6, r6, #3
 8008e92:	f002 0201 	and.w	r2, r2, #1
 8008e96:	d11b      	bne.n	8008ed0 <_free_r+0x6c>
 8008e98:	4434      	add	r4, r6
 8008e9a:	b93a      	cbnz	r2, 8008eac <_free_r+0x48>
 8008e9c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	4414      	add	r4, r2
 8008ea4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008ea8:	60ca      	str	r2, [r1, #12]
 8008eaa:	6091      	str	r1, [r2, #8]
 8008eac:	f044 0201 	orr.w	r2, r4, #1
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	6083      	str	r3, [r0, #8]
 8008eb4:	4b48      	ldr	r3, [pc, #288]	; (8008fd8 <_free_r+0x174>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d804      	bhi.n	8008ec6 <_free_r+0x62>
 8008ebc:	4b47      	ldr	r3, [pc, #284]	; (8008fdc <_free_r+0x178>)
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	f7ff ff7b 	bl	8008dbc <_malloc_trim_r>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ecc:	f000 bd3e 	b.w	800994c <__malloc_unlock>
 8008ed0:	f8cc 6004 	str.w	r6, [ip, #4]
 8008ed4:	2a00      	cmp	r2, #0
 8008ed6:	d138      	bne.n	8008f4a <_free_r+0xe6>
 8008ed8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008edc:	1a5b      	subs	r3, r3, r1
 8008ede:	440c      	add	r4, r1
 8008ee0:	6899      	ldr	r1, [r3, #8]
 8008ee2:	f100 0708 	add.w	r7, r0, #8
 8008ee6:	42b9      	cmp	r1, r7
 8008ee8:	d031      	beq.n	8008f4e <_free_r+0xea>
 8008eea:	68df      	ldr	r7, [r3, #12]
 8008eec:	60cf      	str	r7, [r1, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	eb0c 0106 	add.w	r1, ip, r6
 8008ef4:	6849      	ldr	r1, [r1, #4]
 8008ef6:	07c9      	lsls	r1, r1, #31
 8008ef8:	d40b      	bmi.n	8008f12 <_free_r+0xae>
 8008efa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008efe:	4434      	add	r4, r6
 8008f00:	bb3a      	cbnz	r2, 8008f52 <_free_r+0xee>
 8008f02:	4e37      	ldr	r6, [pc, #220]	; (8008fe0 <_free_r+0x17c>)
 8008f04:	42b1      	cmp	r1, r6
 8008f06:	d124      	bne.n	8008f52 <_free_r+0xee>
 8008f08:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f0c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f044 0101 	orr.w	r1, r4, #1
 8008f16:	6059      	str	r1, [r3, #4]
 8008f18:	511c      	str	r4, [r3, r4]
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	d1d3      	bne.n	8008ec6 <_free_r+0x62>
 8008f1e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8008f22:	d21b      	bcs.n	8008f5c <_free_r+0xf8>
 8008f24:	0961      	lsrs	r1, r4, #5
 8008f26:	08e2      	lsrs	r2, r4, #3
 8008f28:	2401      	movs	r4, #1
 8008f2a:	408c      	lsls	r4, r1
 8008f2c:	6841      	ldr	r1, [r0, #4]
 8008f2e:	3201      	adds	r2, #1
 8008f30:	430c      	orrs	r4, r1
 8008f32:	6044      	str	r4, [r0, #4]
 8008f34:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008f38:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008f3c:	3908      	subs	r1, #8
 8008f3e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8008f42:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008f46:	60e3      	str	r3, [r4, #12]
 8008f48:	e7bd      	b.n	8008ec6 <_free_r+0x62>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	e7d0      	b.n	8008ef0 <_free_r+0x8c>
 8008f4e:	2201      	movs	r2, #1
 8008f50:	e7ce      	b.n	8008ef0 <_free_r+0x8c>
 8008f52:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008f56:	60ce      	str	r6, [r1, #12]
 8008f58:	60b1      	str	r1, [r6, #8]
 8008f5a:	e7da      	b.n	8008f12 <_free_r+0xae>
 8008f5c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008f60:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8008f64:	d214      	bcs.n	8008f90 <_free_r+0x12c>
 8008f66:	09a2      	lsrs	r2, r4, #6
 8008f68:	3238      	adds	r2, #56	; 0x38
 8008f6a:	1c51      	adds	r1, r2, #1
 8008f6c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008f70:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8008f74:	428e      	cmp	r6, r1
 8008f76:	d125      	bne.n	8008fc4 <_free_r+0x160>
 8008f78:	2401      	movs	r4, #1
 8008f7a:	1092      	asrs	r2, r2, #2
 8008f7c:	fa04 f202 	lsl.w	r2, r4, r2
 8008f80:	6844      	ldr	r4, [r0, #4]
 8008f82:	4322      	orrs	r2, r4
 8008f84:	6042      	str	r2, [r0, #4]
 8008f86:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8008f8a:	60b3      	str	r3, [r6, #8]
 8008f8c:	60cb      	str	r3, [r1, #12]
 8008f8e:	e79a      	b.n	8008ec6 <_free_r+0x62>
 8008f90:	2a14      	cmp	r2, #20
 8008f92:	d801      	bhi.n	8008f98 <_free_r+0x134>
 8008f94:	325b      	adds	r2, #91	; 0x5b
 8008f96:	e7e8      	b.n	8008f6a <_free_r+0x106>
 8008f98:	2a54      	cmp	r2, #84	; 0x54
 8008f9a:	d802      	bhi.n	8008fa2 <_free_r+0x13e>
 8008f9c:	0b22      	lsrs	r2, r4, #12
 8008f9e:	326e      	adds	r2, #110	; 0x6e
 8008fa0:	e7e3      	b.n	8008f6a <_free_r+0x106>
 8008fa2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008fa6:	d802      	bhi.n	8008fae <_free_r+0x14a>
 8008fa8:	0be2      	lsrs	r2, r4, #15
 8008faa:	3277      	adds	r2, #119	; 0x77
 8008fac:	e7dd      	b.n	8008f6a <_free_r+0x106>
 8008fae:	f240 5154 	movw	r1, #1364	; 0x554
 8008fb2:	428a      	cmp	r2, r1
 8008fb4:	bf9a      	itte	ls
 8008fb6:	0ca2      	lsrls	r2, r4, #18
 8008fb8:	327c      	addls	r2, #124	; 0x7c
 8008fba:	227e      	movhi	r2, #126	; 0x7e
 8008fbc:	e7d5      	b.n	8008f6a <_free_r+0x106>
 8008fbe:	6889      	ldr	r1, [r1, #8]
 8008fc0:	428e      	cmp	r6, r1
 8008fc2:	d004      	beq.n	8008fce <_free_r+0x16a>
 8008fc4:	684a      	ldr	r2, [r1, #4]
 8008fc6:	f022 0203 	bic.w	r2, r2, #3
 8008fca:	42a2      	cmp	r2, r4
 8008fcc:	d8f7      	bhi.n	8008fbe <_free_r+0x15a>
 8008fce:	68ce      	ldr	r6, [r1, #12]
 8008fd0:	e7d9      	b.n	8008f86 <_free_r+0x122>
 8008fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd4:	200005a8 	.word	0x200005a8
 8008fd8:	200009b4 	.word	0x200009b4
 8008fdc:	20000aec 	.word	0x20000aec
 8008fe0:	200005b0 	.word	0x200005b0

08008fe4 <__sfvwrite_r>:
 8008fe4:	6893      	ldr	r3, [r2, #8]
 8008fe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	4606      	mov	r6, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	4690      	mov	r8, r2
 8008ff0:	b91b      	cbnz	r3, 8008ffa <__sfvwrite_r+0x16>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	b003      	add	sp, #12
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	898b      	ldrh	r3, [r1, #12]
 8008ffc:	0718      	lsls	r0, r3, #28
 8008ffe:	d550      	bpl.n	80090a2 <__sfvwrite_r+0xbe>
 8009000:	690b      	ldr	r3, [r1, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d04d      	beq.n	80090a2 <__sfvwrite_r+0xbe>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f8d8 7000 	ldr.w	r7, [r8]
 800900c:	f013 0902 	ands.w	r9, r3, #2
 8009010:	d16c      	bne.n	80090ec <__sfvwrite_r+0x108>
 8009012:	f013 0301 	ands.w	r3, r3, #1
 8009016:	f000 809c 	beq.w	8009152 <__sfvwrite_r+0x16e>
 800901a:	4648      	mov	r0, r9
 800901c:	46ca      	mov	sl, r9
 800901e:	46cb      	mov	fp, r9
 8009020:	f1bb 0f00 	cmp.w	fp, #0
 8009024:	f000 8103 	beq.w	800922e <__sfvwrite_r+0x24a>
 8009028:	b950      	cbnz	r0, 8009040 <__sfvwrite_r+0x5c>
 800902a:	465a      	mov	r2, fp
 800902c:	210a      	movs	r1, #10
 800902e:	4650      	mov	r0, sl
 8009030:	f7f7 f90e 	bl	8000250 <memchr>
 8009034:	2800      	cmp	r0, #0
 8009036:	f000 80ff 	beq.w	8009238 <__sfvwrite_r+0x254>
 800903a:	3001      	adds	r0, #1
 800903c:	eba0 090a 	sub.w	r9, r0, sl
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	6921      	ldr	r1, [r4, #16]
 8009044:	6963      	ldr	r3, [r4, #20]
 8009046:	45d9      	cmp	r9, fp
 8009048:	464a      	mov	r2, r9
 800904a:	bf28      	it	cs
 800904c:	465a      	movcs	r2, fp
 800904e:	4288      	cmp	r0, r1
 8009050:	f240 80f5 	bls.w	800923e <__sfvwrite_r+0x25a>
 8009054:	68a5      	ldr	r5, [r4, #8]
 8009056:	441d      	add	r5, r3
 8009058:	42aa      	cmp	r2, r5
 800905a:	f340 80f0 	ble.w	800923e <__sfvwrite_r+0x25a>
 800905e:	4651      	mov	r1, sl
 8009060:	462a      	mov	r2, r5
 8009062:	f000 fc53 	bl	800990c <memmove>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	442b      	add	r3, r5
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	4621      	mov	r1, r4
 800906e:	4630      	mov	r0, r6
 8009070:	f7ff fd82 	bl	8008b78 <_fflush_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	d167      	bne.n	8009148 <__sfvwrite_r+0x164>
 8009078:	ebb9 0905 	subs.w	r9, r9, r5
 800907c:	f040 80f7 	bne.w	800926e <__sfvwrite_r+0x28a>
 8009080:	4621      	mov	r1, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff fd78 	bl	8008b78 <_fflush_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	d15d      	bne.n	8009148 <__sfvwrite_r+0x164>
 800908c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009090:	44aa      	add	sl, r5
 8009092:	ebab 0b05 	sub.w	fp, fp, r5
 8009096:	1b55      	subs	r5, r2, r5
 8009098:	f8c8 5008 	str.w	r5, [r8, #8]
 800909c:	2d00      	cmp	r5, #0
 800909e:	d1bf      	bne.n	8009020 <__sfvwrite_r+0x3c>
 80090a0:	e7a7      	b.n	8008ff2 <__sfvwrite_r+0xe>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7fe fe8d 	bl	8007dc4 <__swsetup_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0ab      	beq.n	8009006 <__sfvwrite_r+0x22>
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295
 80090b2:	e79f      	b.n	8008ff4 <__sfvwrite_r+0x10>
 80090b4:	e9d7 b900 	ldrd	fp, r9, [r7]
 80090b8:	3708      	adds	r7, #8
 80090ba:	f1b9 0f00 	cmp.w	r9, #0
 80090be:	d0f9      	beq.n	80090b4 <__sfvwrite_r+0xd0>
 80090c0:	45d1      	cmp	r9, sl
 80090c2:	464b      	mov	r3, r9
 80090c4:	69e1      	ldr	r1, [r4, #28]
 80090c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80090c8:	bf28      	it	cs
 80090ca:	4653      	movcs	r3, sl
 80090cc:	465a      	mov	r2, fp
 80090ce:	4630      	mov	r0, r6
 80090d0:	47a8      	blx	r5
 80090d2:	2800      	cmp	r0, #0
 80090d4:	dd38      	ble.n	8009148 <__sfvwrite_r+0x164>
 80090d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090da:	4483      	add	fp, r0
 80090dc:	eba9 0900 	sub.w	r9, r9, r0
 80090e0:	1a18      	subs	r0, r3, r0
 80090e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d1e7      	bne.n	80090ba <__sfvwrite_r+0xd6>
 80090ea:	e782      	b.n	8008ff2 <__sfvwrite_r+0xe>
 80090ec:	f04f 0b00 	mov.w	fp, #0
 80090f0:	f8df a180 	ldr.w	sl, [pc, #384]	; 8009274 <__sfvwrite_r+0x290>
 80090f4:	46d9      	mov	r9, fp
 80090f6:	e7e0      	b.n	80090ba <__sfvwrite_r+0xd6>
 80090f8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80090fc:	3708      	adds	r7, #8
 80090fe:	f1ba 0f00 	cmp.w	sl, #0
 8009102:	d0f9      	beq.n	80090f8 <__sfvwrite_r+0x114>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	68a2      	ldr	r2, [r4, #8]
 800910a:	0599      	lsls	r1, r3, #22
 800910c:	d563      	bpl.n	80091d6 <__sfvwrite_r+0x1f2>
 800910e:	4552      	cmp	r2, sl
 8009110:	d836      	bhi.n	8009180 <__sfvwrite_r+0x19c>
 8009112:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009116:	d033      	beq.n	8009180 <__sfvwrite_r+0x19c>
 8009118:	6921      	ldr	r1, [r4, #16]
 800911a:	6965      	ldr	r5, [r4, #20]
 800911c:	eba0 0b01 	sub.w	fp, r0, r1
 8009120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009128:	f10b 0201 	add.w	r2, fp, #1
 800912c:	106d      	asrs	r5, r5, #1
 800912e:	4452      	add	r2, sl
 8009130:	4295      	cmp	r5, r2
 8009132:	bf38      	it	cc
 8009134:	4615      	movcc	r5, r2
 8009136:	055b      	lsls	r3, r3, #21
 8009138:	d53d      	bpl.n	80091b6 <__sfvwrite_r+0x1d2>
 800913a:	4629      	mov	r1, r5
 800913c:	4630      	mov	r0, r6
 800913e:	f000 f96f 	bl	8009420 <_malloc_r>
 8009142:	b948      	cbnz	r0, 8009158 <__sfvwrite_r+0x174>
 8009144:	230c      	movs	r3, #12
 8009146:	6033      	str	r3, [r6, #0]
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	e7ad      	b.n	80090ae <__sfvwrite_r+0xca>
 8009152:	4699      	mov	r9, r3
 8009154:	469a      	mov	sl, r3
 8009156:	e7d2      	b.n	80090fe <__sfvwrite_r+0x11a>
 8009158:	465a      	mov	r2, fp
 800915a:	6921      	ldr	r1, [r4, #16]
 800915c:	9001      	str	r0, [sp, #4]
 800915e:	f000 fbc7 	bl	80098f0 <memcpy>
 8009162:	89a2      	ldrh	r2, [r4, #12]
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800916a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800916e:	81a2      	strh	r2, [r4, #12]
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	6165      	str	r5, [r4, #20]
 8009174:	445b      	add	r3, fp
 8009176:	eba5 050b 	sub.w	r5, r5, fp
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	4652      	mov	r2, sl
 800917e:	60a5      	str	r5, [r4, #8]
 8009180:	4552      	cmp	r2, sl
 8009182:	bf28      	it	cs
 8009184:	4652      	movcs	r2, sl
 8009186:	6820      	ldr	r0, [r4, #0]
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	4649      	mov	r1, r9
 800918c:	f000 fbbe 	bl	800990c <memmove>
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	9a01      	ldr	r2, [sp, #4]
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	60a3      	str	r3, [r4, #8]
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	441a      	add	r2, r3
 800919c:	4655      	mov	r5, sl
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80091a4:	44a9      	add	r9, r5
 80091a6:	ebaa 0a05 	sub.w	sl, sl, r5
 80091aa:	1b45      	subs	r5, r0, r5
 80091ac:	f8c8 5008 	str.w	r5, [r8, #8]
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	d1a4      	bne.n	80090fe <__sfvwrite_r+0x11a>
 80091b4:	e71d      	b.n	8008ff2 <__sfvwrite_r+0xe>
 80091b6:	462a      	mov	r2, r5
 80091b8:	4630      	mov	r0, r6
 80091ba:	f001 f845 	bl	800a248 <_realloc_r>
 80091be:	4603      	mov	r3, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d1d5      	bne.n	8009170 <__sfvwrite_r+0x18c>
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff fe4c 	bl	8008e64 <_free_r>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	e7b6      	b.n	8009144 <__sfvwrite_r+0x160>
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	4283      	cmp	r3, r0
 80091da:	d302      	bcc.n	80091e2 <__sfvwrite_r+0x1fe>
 80091dc:	6961      	ldr	r1, [r4, #20]
 80091de:	4551      	cmp	r1, sl
 80091e0:	d915      	bls.n	800920e <__sfvwrite_r+0x22a>
 80091e2:	4552      	cmp	r2, sl
 80091e4:	bf28      	it	cs
 80091e6:	4652      	movcs	r2, sl
 80091e8:	4649      	mov	r1, r9
 80091ea:	4615      	mov	r5, r2
 80091ec:	f000 fb8e 	bl	800990c <memmove>
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	1b5b      	subs	r3, r3, r5
 80091f6:	442a      	add	r2, r5
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	6022      	str	r2, [r4, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1cf      	bne.n	80091a0 <__sfvwrite_r+0x1bc>
 8009200:	4621      	mov	r1, r4
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff fcb8 	bl	8008b78 <_fflush_r>
 8009208:	2800      	cmp	r0, #0
 800920a:	d0c9      	beq.n	80091a0 <__sfvwrite_r+0x1bc>
 800920c:	e79c      	b.n	8009148 <__sfvwrite_r+0x164>
 800920e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009212:	459a      	cmp	sl, r3
 8009214:	bf38      	it	cc
 8009216:	4653      	movcc	r3, sl
 8009218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800921a:	fb93 f3f1 	sdiv	r3, r3, r1
 800921e:	464a      	mov	r2, r9
 8009220:	434b      	muls	r3, r1
 8009222:	4630      	mov	r0, r6
 8009224:	69e1      	ldr	r1, [r4, #28]
 8009226:	47a8      	blx	r5
 8009228:	1e05      	subs	r5, r0, #0
 800922a:	dcb9      	bgt.n	80091a0 <__sfvwrite_r+0x1bc>
 800922c:	e78c      	b.n	8009148 <__sfvwrite_r+0x164>
 800922e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009232:	2000      	movs	r0, #0
 8009234:	3708      	adds	r7, #8
 8009236:	e6f3      	b.n	8009020 <__sfvwrite_r+0x3c>
 8009238:	f10b 0901 	add.w	r9, fp, #1
 800923c:	e700      	b.n	8009040 <__sfvwrite_r+0x5c>
 800923e:	4293      	cmp	r3, r2
 8009240:	dc08      	bgt.n	8009254 <__sfvwrite_r+0x270>
 8009242:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009244:	69e1      	ldr	r1, [r4, #28]
 8009246:	4652      	mov	r2, sl
 8009248:	4630      	mov	r0, r6
 800924a:	47a8      	blx	r5
 800924c:	1e05      	subs	r5, r0, #0
 800924e:	f73f af13 	bgt.w	8009078 <__sfvwrite_r+0x94>
 8009252:	e779      	b.n	8009148 <__sfvwrite_r+0x164>
 8009254:	4651      	mov	r1, sl
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	f000 fb58 	bl	800990c <memmove>
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	60a3      	str	r3, [r4, #8]
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	4413      	add	r3, r2
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	4615      	mov	r5, r2
 800926c:	e704      	b.n	8009078 <__sfvwrite_r+0x94>
 800926e:	2001      	movs	r0, #1
 8009270:	e70c      	b.n	800908c <__sfvwrite_r+0xa8>
 8009272:	bf00      	nop
 8009274:	7ffffc00 	.word	0x7ffffc00

08009278 <_fwalk>:
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	460f      	mov	r7, r1
 800927e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8009282:	2600      	movs	r6, #0
 8009284:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8009288:	f1b8 0801 	subs.w	r8, r8, #1
 800928c:	d505      	bpl.n	800929a <_fwalk+0x22>
 800928e:	6824      	ldr	r4, [r4, #0]
 8009290:	2c00      	cmp	r4, #0
 8009292:	d1f7      	bne.n	8009284 <_fwalk+0xc>
 8009294:	4630      	mov	r0, r6
 8009296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d906      	bls.n	80092ae <_fwalk+0x36>
 80092a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092a4:	3301      	adds	r3, #1
 80092a6:	d002      	beq.n	80092ae <_fwalk+0x36>
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b8      	blx	r7
 80092ac:	4306      	orrs	r6, r0
 80092ae:	3568      	adds	r5, #104	; 0x68
 80092b0:	e7ea      	b.n	8009288 <_fwalk+0x10>

080092b2 <_fwalk_reent>:
 80092b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b6:	4606      	mov	r6, r0
 80092b8:	4688      	mov	r8, r1
 80092ba:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80092be:	2700      	movs	r7, #0
 80092c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092c4:	f1b9 0901 	subs.w	r9, r9, #1
 80092c8:	d505      	bpl.n	80092d6 <_fwalk_reent+0x24>
 80092ca:	6824      	ldr	r4, [r4, #0]
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d1f7      	bne.n	80092c0 <_fwalk_reent+0xe>
 80092d0:	4638      	mov	r0, r7
 80092d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d907      	bls.n	80092ec <_fwalk_reent+0x3a>
 80092dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e0:	3301      	adds	r3, #1
 80092e2:	d003      	beq.n	80092ec <_fwalk_reent+0x3a>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	47c0      	blx	r8
 80092ea:	4307      	orrs	r7, r0
 80092ec:	3568      	adds	r5, #104	; 0x68
 80092ee:	e7e9      	b.n	80092c4 <_fwalk_reent+0x12>

080092f0 <iswspace>:
 80092f0:	2100      	movs	r1, #0
 80092f2:	f000 b801 	b.w	80092f8 <iswspace_l>
	...

080092f8 <iswspace_l>:
 80092f8:	28ff      	cmp	r0, #255	; 0xff
 80092fa:	bf9d      	ittte	ls
 80092fc:	4b02      	ldrls	r3, [pc, #8]	; (8009308 <iswspace_l+0x10>)
 80092fe:	5cc0      	ldrbls	r0, [r0, r3]
 8009300:	f000 0008 	andls.w	r0, r0, #8
 8009304:	2000      	movhi	r0, #0
 8009306:	4770      	bx	lr
 8009308:	0800f191 	.word	0x0800f191

0800930c <__locale_mb_cur_max>:
 800930c:	4b01      	ldr	r3, [pc, #4]	; (8009314 <__locale_mb_cur_max+0x8>)
 800930e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009312:	4770      	bx	lr
 8009314:	2000043c 	.word	0x2000043c

08009318 <_localeconv_r>:
 8009318:	4800      	ldr	r0, [pc, #0]	; (800931c <_localeconv_r+0x4>)
 800931a:	4770      	bx	lr
 800931c:	2000052c 	.word	0x2000052c

08009320 <__retarget_lock_init_recursive>:
 8009320:	4770      	bx	lr

08009322 <__retarget_lock_close_recursive>:
 8009322:	4770      	bx	lr

08009324 <__retarget_lock_acquire_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_release_recursive>:
 8009326:	4770      	bx	lr

08009328 <__swhatbuf_r>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	460e      	mov	r6, r1
 800932c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009330:	2900      	cmp	r1, #0
 8009332:	b096      	sub	sp, #88	; 0x58
 8009334:	4614      	mov	r4, r2
 8009336:	461d      	mov	r5, r3
 8009338:	da0a      	bge.n	8009350 <__swhatbuf_r+0x28>
 800933a:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800933e:	2300      	movs	r3, #0
 8009340:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	d116      	bne.n	8009376 <__swhatbuf_r+0x4e>
 8009348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	e015      	b.n	800937c <__swhatbuf_r+0x54>
 8009350:	466a      	mov	r2, sp
 8009352:	f004 fb6d 	bl	800da30 <_fstat_r>
 8009356:	2800      	cmp	r0, #0
 8009358:	dbef      	blt.n	800933a <__swhatbuf_r+0x12>
 800935a:	9a01      	ldr	r2, [sp, #4]
 800935c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009364:	425a      	negs	r2, r3
 8009366:	415a      	adcs	r2, r3
 8009368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	e002      	b.n	800937c <__swhatbuf_r+0x54>
 8009376:	2240      	movs	r2, #64	; 0x40
 8009378:	6022      	str	r2, [r4, #0]
 800937a:	4618      	mov	r0, r3
 800937c:	b016      	add	sp, #88	; 0x58
 800937e:	bd70      	pop	{r4, r5, r6, pc}

08009380 <__smakebuf_r>:
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009384:	079d      	lsls	r5, r3, #30
 8009386:	4606      	mov	r6, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d507      	bpl.n	800939c <__smakebuf_r+0x1c>
 800938c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	2301      	movs	r3, #1
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	b002      	add	sp, #8
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	ab01      	add	r3, sp, #4
 800939e:	466a      	mov	r2, sp
 80093a0:	f7ff ffc2 	bl	8009328 <__swhatbuf_r>
 80093a4:	9900      	ldr	r1, [sp, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f839 	bl	8009420 <_malloc_r>
 80093ae:	b948      	cbnz	r0, 80093c4 <__smakebuf_r+0x44>
 80093b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b4:	059a      	lsls	r2, r3, #22
 80093b6:	d4ef      	bmi.n	8009398 <__smakebuf_r+0x18>
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	f043 0302 	orr.w	r3, r3, #2
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	e7e3      	b.n	800938c <__smakebuf_r+0xc>
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <__smakebuf_r+0x7c>)
 80093c6:	63f3      	str	r3, [r6, #60]	; 0x3c
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	6020      	str	r0, [r4, #0]
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	6163      	str	r3, [r4, #20]
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	6120      	str	r0, [r4, #16]
 80093da:	b15b      	cbz	r3, 80093f4 <__smakebuf_r+0x74>
 80093dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e0:	4630      	mov	r0, r6
 80093e2:	f004 fea7 	bl	800e134 <_isatty_r>
 80093e6:	b128      	cbz	r0, 80093f4 <__smakebuf_r+0x74>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	89a0      	ldrh	r0, [r4, #12]
 80093f6:	4305      	orrs	r5, r0
 80093f8:	81a5      	strh	r5, [r4, #12]
 80093fa:	e7cd      	b.n	8009398 <__smakebuf_r+0x18>
 80093fc:	08008c39 	.word	0x08008c39

08009400 <malloc>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <malloc+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f000 b80b 	b.w	8009420 <_malloc_r>
 800940a:	bf00      	nop
 800940c:	2000000c 	.word	0x2000000c

08009410 <free>:
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <free+0xc>)
 8009412:	4601      	mov	r1, r0
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f7ff bd25 	b.w	8008e64 <_free_r>
 800941a:	bf00      	nop
 800941c:	2000000c 	.word	0x2000000c

08009420 <_malloc_r>:
 8009420:	f101 030b 	add.w	r3, r1, #11
 8009424:	2b16      	cmp	r3, #22
 8009426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	4605      	mov	r5, r0
 800942c:	d906      	bls.n	800943c <_malloc_r+0x1c>
 800942e:	f033 0707 	bics.w	r7, r3, #7
 8009432:	d504      	bpl.n	800943e <_malloc_r+0x1e>
 8009434:	230c      	movs	r3, #12
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	2400      	movs	r4, #0
 800943a:	e1a5      	b.n	8009788 <_malloc_r+0x368>
 800943c:	2710      	movs	r7, #16
 800943e:	42b9      	cmp	r1, r7
 8009440:	d8f8      	bhi.n	8009434 <_malloc_r+0x14>
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fa7c 	bl	8009940 <__malloc_lock>
 8009448:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800944c:	4eb0      	ldr	r6, [pc, #704]	; (8009710 <_malloc_r+0x2f0>)
 800944e:	d237      	bcs.n	80094c0 <_malloc_r+0xa0>
 8009450:	f107 0208 	add.w	r2, r7, #8
 8009454:	4432      	add	r2, r6
 8009456:	f1a2 0108 	sub.w	r1, r2, #8
 800945a:	6854      	ldr	r4, [r2, #4]
 800945c:	428c      	cmp	r4, r1
 800945e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009462:	d102      	bne.n	800946a <_malloc_r+0x4a>
 8009464:	68d4      	ldr	r4, [r2, #12]
 8009466:	42a2      	cmp	r2, r4
 8009468:	d010      	beq.n	800948c <_malloc_r+0x6c>
 800946a:	6863      	ldr	r3, [r4, #4]
 800946c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	60ca      	str	r2, [r1, #12]
 8009476:	4423      	add	r3, r4
 8009478:	6091      	str	r1, [r2, #8]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	f042 0201 	orr.w	r2, r2, #1
 8009480:	605a      	str	r2, [r3, #4]
 8009482:	4628      	mov	r0, r5
 8009484:	f000 fa62 	bl	800994c <__malloc_unlock>
 8009488:	3408      	adds	r4, #8
 800948a:	e17d      	b.n	8009788 <_malloc_r+0x368>
 800948c:	3302      	adds	r3, #2
 800948e:	6934      	ldr	r4, [r6, #16]
 8009490:	49a0      	ldr	r1, [pc, #640]	; (8009714 <_malloc_r+0x2f4>)
 8009492:	428c      	cmp	r4, r1
 8009494:	d077      	beq.n	8009586 <_malloc_r+0x166>
 8009496:	6862      	ldr	r2, [r4, #4]
 8009498:	f022 0c03 	bic.w	ip, r2, #3
 800949c:	ebac 0007 	sub.w	r0, ip, r7
 80094a0:	280f      	cmp	r0, #15
 80094a2:	dd48      	ble.n	8009536 <_malloc_r+0x116>
 80094a4:	19e2      	adds	r2, r4, r7
 80094a6:	f040 0301 	orr.w	r3, r0, #1
 80094aa:	f047 0701 	orr.w	r7, r7, #1
 80094ae:	6067      	str	r7, [r4, #4]
 80094b0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80094b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80094b8:	6053      	str	r3, [r2, #4]
 80094ba:	f844 000c 	str.w	r0, [r4, ip]
 80094be:	e7e0      	b.n	8009482 <_malloc_r+0x62>
 80094c0:	0a7b      	lsrs	r3, r7, #9
 80094c2:	d02a      	beq.n	800951a <_malloc_r+0xfa>
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d812      	bhi.n	80094ee <_malloc_r+0xce>
 80094c8:	09bb      	lsrs	r3, r7, #6
 80094ca:	3338      	adds	r3, #56	; 0x38
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80094d2:	f1a2 0c08 	sub.w	ip, r2, #8
 80094d6:	6854      	ldr	r4, [r2, #4]
 80094d8:	4564      	cmp	r4, ip
 80094da:	d006      	beq.n	80094ea <_malloc_r+0xca>
 80094dc:	6862      	ldr	r2, [r4, #4]
 80094de:	f022 0203 	bic.w	r2, r2, #3
 80094e2:	1bd0      	subs	r0, r2, r7
 80094e4:	280f      	cmp	r0, #15
 80094e6:	dd1c      	ble.n	8009522 <_malloc_r+0x102>
 80094e8:	3b01      	subs	r3, #1
 80094ea:	3301      	adds	r3, #1
 80094ec:	e7cf      	b.n	800948e <_malloc_r+0x6e>
 80094ee:	2b14      	cmp	r3, #20
 80094f0:	d801      	bhi.n	80094f6 <_malloc_r+0xd6>
 80094f2:	335b      	adds	r3, #91	; 0x5b
 80094f4:	e7ea      	b.n	80094cc <_malloc_r+0xac>
 80094f6:	2b54      	cmp	r3, #84	; 0x54
 80094f8:	d802      	bhi.n	8009500 <_malloc_r+0xe0>
 80094fa:	0b3b      	lsrs	r3, r7, #12
 80094fc:	336e      	adds	r3, #110	; 0x6e
 80094fe:	e7e5      	b.n	80094cc <_malloc_r+0xac>
 8009500:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009504:	d802      	bhi.n	800950c <_malloc_r+0xec>
 8009506:	0bfb      	lsrs	r3, r7, #15
 8009508:	3377      	adds	r3, #119	; 0x77
 800950a:	e7df      	b.n	80094cc <_malloc_r+0xac>
 800950c:	f240 5254 	movw	r2, #1364	; 0x554
 8009510:	4293      	cmp	r3, r2
 8009512:	d804      	bhi.n	800951e <_malloc_r+0xfe>
 8009514:	0cbb      	lsrs	r3, r7, #18
 8009516:	337c      	adds	r3, #124	; 0x7c
 8009518:	e7d8      	b.n	80094cc <_malloc_r+0xac>
 800951a:	233f      	movs	r3, #63	; 0x3f
 800951c:	e7d6      	b.n	80094cc <_malloc_r+0xac>
 800951e:	237e      	movs	r3, #126	; 0x7e
 8009520:	e7d4      	b.n	80094cc <_malloc_r+0xac>
 8009522:	2800      	cmp	r0, #0
 8009524:	68e1      	ldr	r1, [r4, #12]
 8009526:	db04      	blt.n	8009532 <_malloc_r+0x112>
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	60d9      	str	r1, [r3, #12]
 800952c:	608b      	str	r3, [r1, #8]
 800952e:	18a3      	adds	r3, r4, r2
 8009530:	e7a3      	b.n	800947a <_malloc_r+0x5a>
 8009532:	460c      	mov	r4, r1
 8009534:	e7d0      	b.n	80094d8 <_malloc_r+0xb8>
 8009536:	2800      	cmp	r0, #0
 8009538:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800953c:	db07      	blt.n	800954e <_malloc_r+0x12e>
 800953e:	44a4      	add	ip, r4
 8009540:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	f8cc 3004 	str.w	r3, [ip, #4]
 800954c:	e799      	b.n	8009482 <_malloc_r+0x62>
 800954e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009552:	6870      	ldr	r0, [r6, #4]
 8009554:	f080 8096 	bcs.w	8009684 <_malloc_r+0x264>
 8009558:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800955c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009560:	f04f 0c01 	mov.w	ip, #1
 8009564:	3201      	adds	r2, #1
 8009566:	fa0c fc0e 	lsl.w	ip, ip, lr
 800956a:	ea4c 0000 	orr.w	r0, ip, r0
 800956e:	6070      	str	r0, [r6, #4]
 8009570:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009574:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009578:	3808      	subs	r0, #8
 800957a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800957e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009582:	f8cc 400c 	str.w	r4, [ip, #12]
 8009586:	2001      	movs	r0, #1
 8009588:	109a      	asrs	r2, r3, #2
 800958a:	fa00 f202 	lsl.w	r2, r0, r2
 800958e:	6870      	ldr	r0, [r6, #4]
 8009590:	4290      	cmp	r0, r2
 8009592:	d326      	bcc.n	80095e2 <_malloc_r+0x1c2>
 8009594:	4210      	tst	r0, r2
 8009596:	d106      	bne.n	80095a6 <_malloc_r+0x186>
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	0052      	lsls	r2, r2, #1
 800959e:	4210      	tst	r0, r2
 80095a0:	f103 0304 	add.w	r3, r3, #4
 80095a4:	d0fa      	beq.n	800959c <_malloc_r+0x17c>
 80095a6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80095aa:	46c1      	mov	r9, r8
 80095ac:	469e      	mov	lr, r3
 80095ae:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80095b2:	454c      	cmp	r4, r9
 80095b4:	f040 80ba 	bne.w	800972c <_malloc_r+0x30c>
 80095b8:	f10e 0e01 	add.w	lr, lr, #1
 80095bc:	f01e 0f03 	tst.w	lr, #3
 80095c0:	f109 0908 	add.w	r9, r9, #8
 80095c4:	d1f3      	bne.n	80095ae <_malloc_r+0x18e>
 80095c6:	0798      	lsls	r0, r3, #30
 80095c8:	f040 80e4 	bne.w	8009794 <_malloc_r+0x374>
 80095cc:	6873      	ldr	r3, [r6, #4]
 80095ce:	ea23 0302 	bic.w	r3, r3, r2
 80095d2:	6073      	str	r3, [r6, #4]
 80095d4:	6870      	ldr	r0, [r6, #4]
 80095d6:	0052      	lsls	r2, r2, #1
 80095d8:	4290      	cmp	r0, r2
 80095da:	d302      	bcc.n	80095e2 <_malloc_r+0x1c2>
 80095dc:	2a00      	cmp	r2, #0
 80095de:	f040 80e6 	bne.w	80097ae <_malloc_r+0x38e>
 80095e2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80095e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095ea:	f023 0903 	bic.w	r9, r3, #3
 80095ee:	45b9      	cmp	r9, r7
 80095f0:	d304      	bcc.n	80095fc <_malloc_r+0x1dc>
 80095f2:	eba9 0207 	sub.w	r2, r9, r7
 80095f6:	2a0f      	cmp	r2, #15
 80095f8:	f300 8142 	bgt.w	8009880 <_malloc_r+0x460>
 80095fc:	4b46      	ldr	r3, [pc, #280]	; (8009718 <_malloc_r+0x2f8>)
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	3110      	adds	r1, #16
 8009602:	4439      	add	r1, r7
 8009604:	2008      	movs	r0, #8
 8009606:	9101      	str	r1, [sp, #4]
 8009608:	f003 fa98 	bl	800cb3c <sysconf>
 800960c:	4a43      	ldr	r2, [pc, #268]	; (800971c <_malloc_r+0x2fc>)
 800960e:	9901      	ldr	r1, [sp, #4]
 8009610:	6813      	ldr	r3, [r2, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	bf1f      	itttt	ne
 8009616:	f101 31ff 	addne.w	r1, r1, #4294967295
 800961a:	1809      	addne	r1, r1, r0
 800961c:	4243      	negne	r3, r0
 800961e:	4019      	andne	r1, r3
 8009620:	4680      	mov	r8, r0
 8009622:	4628      	mov	r0, r5
 8009624:	9101      	str	r1, [sp, #4]
 8009626:	f001 f877 	bl	800a718 <_sbrk_r>
 800962a:	1c42      	adds	r2, r0, #1
 800962c:	eb0a 0b09 	add.w	fp, sl, r9
 8009630:	4604      	mov	r4, r0
 8009632:	f000 80f8 	beq.w	8009826 <_malloc_r+0x406>
 8009636:	4583      	cmp	fp, r0
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	4a38      	ldr	r2, [pc, #224]	; (800971c <_malloc_r+0x2fc>)
 800963c:	d902      	bls.n	8009644 <_malloc_r+0x224>
 800963e:	45b2      	cmp	sl, r6
 8009640:	f040 80f1 	bne.w	8009826 <_malloc_r+0x406>
 8009644:	4b36      	ldr	r3, [pc, #216]	; (8009720 <_malloc_r+0x300>)
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	45a3      	cmp	fp, r4
 800964a:	eb00 0e01 	add.w	lr, r0, r1
 800964e:	f8c3 e000 	str.w	lr, [r3]
 8009652:	f108 3cff 	add.w	ip, r8, #4294967295
 8009656:	f040 80ac 	bne.w	80097b2 <_malloc_r+0x392>
 800965a:	ea1b 0f0c 	tst.w	fp, ip
 800965e:	f040 80a8 	bne.w	80097b2 <_malloc_r+0x392>
 8009662:	68b2      	ldr	r2, [r6, #8]
 8009664:	4449      	add	r1, r9
 8009666:	f041 0101 	orr.w	r1, r1, #1
 800966a:	6051      	str	r1, [r2, #4]
 800966c:	4a2d      	ldr	r2, [pc, #180]	; (8009724 <_malloc_r+0x304>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6811      	ldr	r1, [r2, #0]
 8009672:	428b      	cmp	r3, r1
 8009674:	bf88      	it	hi
 8009676:	6013      	strhi	r3, [r2, #0]
 8009678:	4a2b      	ldr	r2, [pc, #172]	; (8009728 <_malloc_r+0x308>)
 800967a:	6811      	ldr	r1, [r2, #0]
 800967c:	428b      	cmp	r3, r1
 800967e:	bf88      	it	hi
 8009680:	6013      	strhi	r3, [r2, #0]
 8009682:	e0d0      	b.n	8009826 <_malloc_r+0x406>
 8009684:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009688:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800968c:	d218      	bcs.n	80096c0 <_malloc_r+0x2a0>
 800968e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009692:	3238      	adds	r2, #56	; 0x38
 8009694:	f102 0e01 	add.w	lr, r2, #1
 8009698:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800969c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80096a0:	45f0      	cmp	r8, lr
 80096a2:	d12b      	bne.n	80096fc <_malloc_r+0x2dc>
 80096a4:	1092      	asrs	r2, r2, #2
 80096a6:	f04f 0c01 	mov.w	ip, #1
 80096aa:	fa0c f202 	lsl.w	r2, ip, r2
 80096ae:	4310      	orrs	r0, r2
 80096b0:	6070      	str	r0, [r6, #4]
 80096b2:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80096b6:	f8c8 4008 	str.w	r4, [r8, #8]
 80096ba:	f8ce 400c 	str.w	r4, [lr, #12]
 80096be:	e762      	b.n	8009586 <_malloc_r+0x166>
 80096c0:	2a14      	cmp	r2, #20
 80096c2:	d801      	bhi.n	80096c8 <_malloc_r+0x2a8>
 80096c4:	325b      	adds	r2, #91	; 0x5b
 80096c6:	e7e5      	b.n	8009694 <_malloc_r+0x274>
 80096c8:	2a54      	cmp	r2, #84	; 0x54
 80096ca:	d803      	bhi.n	80096d4 <_malloc_r+0x2b4>
 80096cc:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80096d0:	326e      	adds	r2, #110	; 0x6e
 80096d2:	e7df      	b.n	8009694 <_malloc_r+0x274>
 80096d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80096d8:	d803      	bhi.n	80096e2 <_malloc_r+0x2c2>
 80096da:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80096de:	3277      	adds	r2, #119	; 0x77
 80096e0:	e7d8      	b.n	8009694 <_malloc_r+0x274>
 80096e2:	f240 5e54 	movw	lr, #1364	; 0x554
 80096e6:	4572      	cmp	r2, lr
 80096e8:	bf9a      	itte	ls
 80096ea:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80096ee:	327c      	addls	r2, #124	; 0x7c
 80096f0:	227e      	movhi	r2, #126	; 0x7e
 80096f2:	e7cf      	b.n	8009694 <_malloc_r+0x274>
 80096f4:	f8de e008 	ldr.w	lr, [lr, #8]
 80096f8:	45f0      	cmp	r8, lr
 80096fa:	d005      	beq.n	8009708 <_malloc_r+0x2e8>
 80096fc:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009700:	f022 0203 	bic.w	r2, r2, #3
 8009704:	4562      	cmp	r2, ip
 8009706:	d8f5      	bhi.n	80096f4 <_malloc_r+0x2d4>
 8009708:	f8de 800c 	ldr.w	r8, [lr, #12]
 800970c:	e7d1      	b.n	80096b2 <_malloc_r+0x292>
 800970e:	bf00      	nop
 8009710:	200005a8 	.word	0x200005a8
 8009714:	200005b0 	.word	0x200005b0
 8009718:	20000aec 	.word	0x20000aec
 800971c:	200009b0 	.word	0x200009b0
 8009720:	20000abc 	.word	0x20000abc
 8009724:	20000ae4 	.word	0x20000ae4
 8009728:	20000ae8 	.word	0x20000ae8
 800972c:	6860      	ldr	r0, [r4, #4]
 800972e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009732:	f020 0003 	bic.w	r0, r0, #3
 8009736:	eba0 0a07 	sub.w	sl, r0, r7
 800973a:	f1ba 0f0f 	cmp.w	sl, #15
 800973e:	dd12      	ble.n	8009766 <_malloc_r+0x346>
 8009740:	68a3      	ldr	r3, [r4, #8]
 8009742:	19e2      	adds	r2, r4, r7
 8009744:	f047 0701 	orr.w	r7, r7, #1
 8009748:	6067      	str	r7, [r4, #4]
 800974a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800974e:	f8cc 3008 	str.w	r3, [ip, #8]
 8009752:	f04a 0301 	orr.w	r3, sl, #1
 8009756:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800975a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800975e:	6053      	str	r3, [r2, #4]
 8009760:	f844 a000 	str.w	sl, [r4, r0]
 8009764:	e68d      	b.n	8009482 <_malloc_r+0x62>
 8009766:	f1ba 0f00 	cmp.w	sl, #0
 800976a:	db11      	blt.n	8009790 <_malloc_r+0x370>
 800976c:	4420      	add	r0, r4
 800976e:	6843      	ldr	r3, [r0, #4]
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	6043      	str	r3, [r0, #4]
 8009776:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800977a:	4628      	mov	r0, r5
 800977c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009780:	f8cc 3008 	str.w	r3, [ip, #8]
 8009784:	f000 f8e2 	bl	800994c <__malloc_unlock>
 8009788:	4620      	mov	r0, r4
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	4664      	mov	r4, ip
 8009792:	e70e      	b.n	80095b2 <_malloc_r+0x192>
 8009794:	f858 0908 	ldr.w	r0, [r8], #-8
 8009798:	4540      	cmp	r0, r8
 800979a:	f103 33ff 	add.w	r3, r3, #4294967295
 800979e:	f43f af12 	beq.w	80095c6 <_malloc_r+0x1a6>
 80097a2:	e717      	b.n	80095d4 <_malloc_r+0x1b4>
 80097a4:	3304      	adds	r3, #4
 80097a6:	0052      	lsls	r2, r2, #1
 80097a8:	4210      	tst	r0, r2
 80097aa:	d0fb      	beq.n	80097a4 <_malloc_r+0x384>
 80097ac:	e6fb      	b.n	80095a6 <_malloc_r+0x186>
 80097ae:	4673      	mov	r3, lr
 80097b0:	e7fa      	b.n	80097a8 <_malloc_r+0x388>
 80097b2:	6810      	ldr	r0, [r2, #0]
 80097b4:	3001      	adds	r0, #1
 80097b6:	bf1b      	ittet	ne
 80097b8:	eba4 0b0b 	subne.w	fp, r4, fp
 80097bc:	eb0b 020e 	addne.w	r2, fp, lr
 80097c0:	6014      	streq	r4, [r2, #0]
 80097c2:	601a      	strne	r2, [r3, #0]
 80097c4:	f014 0b07 	ands.w	fp, r4, #7
 80097c8:	bf1a      	itte	ne
 80097ca:	f1cb 0008 	rsbne	r0, fp, #8
 80097ce:	1824      	addne	r4, r4, r0
 80097d0:	4658      	moveq	r0, fp
 80097d2:	1862      	adds	r2, r4, r1
 80097d4:	ea02 010c 	and.w	r1, r2, ip
 80097d8:	4480      	add	r8, r0
 80097da:	eba8 0801 	sub.w	r8, r8, r1
 80097de:	ea08 080c 	and.w	r8, r8, ip
 80097e2:	4641      	mov	r1, r8
 80097e4:	4628      	mov	r0, r5
 80097e6:	9201      	str	r2, [sp, #4]
 80097e8:	f000 ff96 	bl	800a718 <_sbrk_r>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	9a01      	ldr	r2, [sp, #4]
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <_malloc_r+0x474>)
 80097f2:	d107      	bne.n	8009804 <_malloc_r+0x3e4>
 80097f4:	f1bb 0f00 	cmp.w	fp, #0
 80097f8:	d023      	beq.n	8009842 <_malloc_r+0x422>
 80097fa:	f1ab 0008 	sub.w	r0, fp, #8
 80097fe:	4410      	add	r0, r2
 8009800:	f04f 0800 	mov.w	r8, #0
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	60b4      	str	r4, [r6, #8]
 8009808:	1b00      	subs	r0, r0, r4
 800980a:	4440      	add	r0, r8
 800980c:	4442      	add	r2, r8
 800980e:	f040 0001 	orr.w	r0, r0, #1
 8009812:	45b2      	cmp	sl, r6
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	6060      	str	r0, [r4, #4]
 8009818:	f43f af28 	beq.w	800966c <_malloc_r+0x24c>
 800981c:	f1b9 0f0f 	cmp.w	r9, #15
 8009820:	d812      	bhi.n	8009848 <_malloc_r+0x428>
 8009822:	2301      	movs	r3, #1
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	68b3      	ldr	r3, [r6, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	42bb      	cmp	r3, r7
 8009830:	eba3 0207 	sub.w	r2, r3, r7
 8009834:	d301      	bcc.n	800983a <_malloc_r+0x41a>
 8009836:	2a0f      	cmp	r2, #15
 8009838:	dc22      	bgt.n	8009880 <_malloc_r+0x460>
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f886 	bl	800994c <__malloc_unlock>
 8009840:	e5fa      	b.n	8009438 <_malloc_r+0x18>
 8009842:	4610      	mov	r0, r2
 8009844:	46d8      	mov	r8, fp
 8009846:	e7dd      	b.n	8009804 <_malloc_r+0x3e4>
 8009848:	f8da 2004 	ldr.w	r2, [sl, #4]
 800984c:	f1a9 090c 	sub.w	r9, r9, #12
 8009850:	f029 0907 	bic.w	r9, r9, #7
 8009854:	f002 0201 	and.w	r2, r2, #1
 8009858:	ea42 0209 	orr.w	r2, r2, r9
 800985c:	f8ca 2004 	str.w	r2, [sl, #4]
 8009860:	2105      	movs	r1, #5
 8009862:	eb0a 0209 	add.w	r2, sl, r9
 8009866:	f1b9 0f0f 	cmp.w	r9, #15
 800986a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800986e:	f67f aefd 	bls.w	800966c <_malloc_r+0x24c>
 8009872:	f10a 0108 	add.w	r1, sl, #8
 8009876:	4628      	mov	r0, r5
 8009878:	f7ff faf4 	bl	8008e64 <_free_r>
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <_malloc_r+0x474>)
 800987e:	e6f5      	b.n	800966c <_malloc_r+0x24c>
 8009880:	68b4      	ldr	r4, [r6, #8]
 8009882:	f047 0301 	orr.w	r3, r7, #1
 8009886:	4427      	add	r7, r4
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	6063      	str	r3, [r4, #4]
 800988e:	60b7      	str	r7, [r6, #8]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	e5f6      	b.n	8009482 <_malloc_r+0x62>
 8009894:	20000abc 	.word	0x20000abc

08009898 <_mbrtowc_r>:
 8009898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800989a:	4c0a      	ldr	r4, [pc, #40]	; (80098c4 <_mbrtowc_r+0x2c>)
 800989c:	9e08      	ldr	r6, [sp, #32]
 800989e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 80098a2:	9600      	str	r6, [sp, #0]
 80098a4:	4605      	mov	r5, r0
 80098a6:	4614      	mov	r4, r2
 80098a8:	b912      	cbnz	r2, 80098b0 <_mbrtowc_r+0x18>
 80098aa:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <_mbrtowc_r+0x30>)
 80098ac:	2301      	movs	r3, #1
 80098ae:	4621      	mov	r1, r4
 80098b0:	47b8      	blx	r7
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	bf01      	itttt	eq
 80098b6:	2300      	moveq	r3, #0
 80098b8:	6033      	streq	r3, [r6, #0]
 80098ba:	238a      	moveq	r3, #138	; 0x8a
 80098bc:	602b      	streq	r3, [r5, #0]
 80098be:	b003      	add	sp, #12
 80098c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	2000043c 	.word	0x2000043c
 80098c8:	0800f53b 	.word	0x0800f53b

080098cc <__ascii_mbtowc>:
 80098cc:	b082      	sub	sp, #8
 80098ce:	b901      	cbnz	r1, 80098d2 <__ascii_mbtowc+0x6>
 80098d0:	a901      	add	r1, sp, #4
 80098d2:	b142      	cbz	r2, 80098e6 <__ascii_mbtowc+0x1a>
 80098d4:	b14b      	cbz	r3, 80098ea <__ascii_mbtowc+0x1e>
 80098d6:	7813      	ldrb	r3, [r2, #0]
 80098d8:	600b      	str	r3, [r1, #0]
 80098da:	7812      	ldrb	r2, [r2, #0]
 80098dc:	1e10      	subs	r0, r2, #0
 80098de:	bf18      	it	ne
 80098e0:	2001      	movne	r0, #1
 80098e2:	b002      	add	sp, #8
 80098e4:	4770      	bx	lr
 80098e6:	4610      	mov	r0, r2
 80098e8:	e7fb      	b.n	80098e2 <__ascii_mbtowc+0x16>
 80098ea:	f06f 0001 	mvn.w	r0, #1
 80098ee:	e7f8      	b.n	80098e2 <__ascii_mbtowc+0x16>

080098f0 <memcpy>:
 80098f0:	440a      	add	r2, r1
 80098f2:	4291      	cmp	r1, r2
 80098f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098f8:	d100      	bne.n	80098fc <memcpy+0xc>
 80098fa:	4770      	bx	lr
 80098fc:	b510      	push	{r4, lr}
 80098fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009906:	4291      	cmp	r1, r2
 8009908:	d1f9      	bne.n	80098fe <memcpy+0xe>
 800990a:	bd10      	pop	{r4, pc}

0800990c <memmove>:
 800990c:	4288      	cmp	r0, r1
 800990e:	b510      	push	{r4, lr}
 8009910:	eb01 0402 	add.w	r4, r1, r2
 8009914:	d902      	bls.n	800991c <memmove+0x10>
 8009916:	4284      	cmp	r4, r0
 8009918:	4623      	mov	r3, r4
 800991a:	d807      	bhi.n	800992c <memmove+0x20>
 800991c:	1e43      	subs	r3, r0, #1
 800991e:	42a1      	cmp	r1, r4
 8009920:	d008      	beq.n	8009934 <memmove+0x28>
 8009922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800992a:	e7f8      	b.n	800991e <memmove+0x12>
 800992c:	4402      	add	r2, r0
 800992e:	4601      	mov	r1, r0
 8009930:	428a      	cmp	r2, r1
 8009932:	d100      	bne.n	8009936 <memmove+0x2a>
 8009934:	bd10      	pop	{r4, pc}
 8009936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800993a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800993e:	e7f7      	b.n	8009930 <memmove+0x24>

08009940 <__malloc_lock>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__malloc_lock+0x8>)
 8009942:	f7ff bcef 	b.w	8009324 <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	20000ab9 	.word	0x20000ab9

0800994c <__malloc_unlock>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__malloc_unlock+0x8>)
 800994e:	f7ff bcea 	b.w	8009326 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	20000ab9 	.word	0x20000ab9

08009958 <_Balloc>:
 8009958:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800995a:	b570      	push	{r4, r5, r6, lr}
 800995c:	4605      	mov	r5, r0
 800995e:	460c      	mov	r4, r1
 8009960:	b17b      	cbz	r3, 8009982 <_Balloc+0x2a>
 8009962:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009964:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009968:	b9a0      	cbnz	r0, 8009994 <_Balloc+0x3c>
 800996a:	2101      	movs	r1, #1
 800996c:	fa01 f604 	lsl.w	r6, r1, r4
 8009970:	1d72      	adds	r2, r6, #5
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	4628      	mov	r0, r5
 8009976:	f003 ff3f 	bl	800d7f8 <_calloc_r>
 800997a:	b148      	cbz	r0, 8009990 <_Balloc+0x38>
 800997c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009980:	e00b      	b.n	800999a <_Balloc+0x42>
 8009982:	2221      	movs	r2, #33	; 0x21
 8009984:	2104      	movs	r1, #4
 8009986:	f003 ff37 	bl	800d7f8 <_calloc_r>
 800998a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800998c:	2800      	cmp	r0, #0
 800998e:	d1e8      	bne.n	8009962 <_Balloc+0xa>
 8009990:	2000      	movs	r0, #0
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	6802      	ldr	r2, [r0, #0]
 8009996:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800999a:	2300      	movs	r3, #0
 800999c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099a0:	e7f7      	b.n	8009992 <_Balloc+0x3a>

080099a2 <_Bfree>:
 80099a2:	b131      	cbz	r1, 80099b2 <_Bfree+0x10>
 80099a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80099a6:	684a      	ldr	r2, [r1, #4]
 80099a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099ac:	6008      	str	r0, [r1, #0]
 80099ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099b2:	4770      	bx	lr

080099b4 <__multadd>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	690d      	ldr	r5, [r1, #16]
 80099ba:	4607      	mov	r7, r0
 80099bc:	460c      	mov	r4, r1
 80099be:	461e      	mov	r6, r3
 80099c0:	f101 0c14 	add.w	ip, r1, #20
 80099c4:	2000      	movs	r0, #0
 80099c6:	f8dc 3000 	ldr.w	r3, [ip]
 80099ca:	b299      	uxth	r1, r3
 80099cc:	fb02 6101 	mla	r1, r2, r1, r6
 80099d0:	0c1e      	lsrs	r6, r3, #16
 80099d2:	0c0b      	lsrs	r3, r1, #16
 80099d4:	fb02 3306 	mla	r3, r2, r6, r3
 80099d8:	b289      	uxth	r1, r1
 80099da:	3001      	adds	r0, #1
 80099dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099e0:	4285      	cmp	r5, r0
 80099e2:	f84c 1b04 	str.w	r1, [ip], #4
 80099e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ea:	dcec      	bgt.n	80099c6 <__multadd+0x12>
 80099ec:	b30e      	cbz	r6, 8009a32 <__multadd+0x7e>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	dc19      	bgt.n	8009a28 <__multadd+0x74>
 80099f4:	6861      	ldr	r1, [r4, #4]
 80099f6:	4638      	mov	r0, r7
 80099f8:	3101      	adds	r1, #1
 80099fa:	f7ff ffad 	bl	8009958 <_Balloc>
 80099fe:	4680      	mov	r8, r0
 8009a00:	b928      	cbnz	r0, 8009a0e <__multadd+0x5a>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <__multadd+0x84>)
 8009a06:	480d      	ldr	r0, [pc, #52]	; (8009a3c <__multadd+0x88>)
 8009a08:	21b5      	movs	r1, #181	; 0xb5
 8009a0a:	f003 fed7 	bl	800d7bc <__assert_func>
 8009a0e:	6922      	ldr	r2, [r4, #16]
 8009a10:	3202      	adds	r2, #2
 8009a12:	f104 010c 	add.w	r1, r4, #12
 8009a16:	0092      	lsls	r2, r2, #2
 8009a18:	300c      	adds	r0, #12
 8009a1a:	f7ff ff69 	bl	80098f0 <memcpy>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ffbe 	bl	80099a2 <_Bfree>
 8009a26:	4644      	mov	r4, r8
 8009a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	615e      	str	r6, [r3, #20]
 8009a30:	6125      	str	r5, [r4, #16]
 8009a32:	4620      	mov	r0, r4
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	0800f29e 	.word	0x0800f29e
 8009a3c:	0800f314 	.word	0x0800f314

08009a40 <__s2b>:
 8009a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	4615      	mov	r5, r2
 8009a48:	461f      	mov	r7, r3
 8009a4a:	2209      	movs	r2, #9
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	4606      	mov	r6, r0
 8009a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a54:	2100      	movs	r1, #0
 8009a56:	2201      	movs	r2, #1
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	db09      	blt.n	8009a70 <__s2b+0x30>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff ff7b 	bl	8009958 <_Balloc>
 8009a62:	b940      	cbnz	r0, 8009a76 <__s2b+0x36>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b19      	ldr	r3, [pc, #100]	; (8009acc <__s2b+0x8c>)
 8009a68:	4819      	ldr	r0, [pc, #100]	; (8009ad0 <__s2b+0x90>)
 8009a6a:	21ce      	movs	r1, #206	; 0xce
 8009a6c:	f003 fea6 	bl	800d7bc <__assert_func>
 8009a70:	0052      	lsls	r2, r2, #1
 8009a72:	3101      	adds	r1, #1
 8009a74:	e7f0      	b.n	8009a58 <__s2b+0x18>
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	6143      	str	r3, [r0, #20]
 8009a7a:	2d09      	cmp	r5, #9
 8009a7c:	f04f 0301 	mov.w	r3, #1
 8009a80:	6103      	str	r3, [r0, #16]
 8009a82:	dd16      	ble.n	8009ab2 <__s2b+0x72>
 8009a84:	f104 0909 	add.w	r9, r4, #9
 8009a88:	46c8      	mov	r8, r9
 8009a8a:	442c      	add	r4, r5
 8009a8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a90:	4601      	mov	r1, r0
 8009a92:	3b30      	subs	r3, #48	; 0x30
 8009a94:	220a      	movs	r2, #10
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff8c 	bl	80099b4 <__multadd>
 8009a9c:	45a0      	cmp	r8, r4
 8009a9e:	d1f5      	bne.n	8009a8c <__s2b+0x4c>
 8009aa0:	f1a5 0408 	sub.w	r4, r5, #8
 8009aa4:	444c      	add	r4, r9
 8009aa6:	1b2d      	subs	r5, r5, r4
 8009aa8:	1963      	adds	r3, r4, r5
 8009aaa:	42bb      	cmp	r3, r7
 8009aac:	db04      	blt.n	8009ab8 <__s2b+0x78>
 8009aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab2:	340a      	adds	r4, #10
 8009ab4:	2509      	movs	r5, #9
 8009ab6:	e7f6      	b.n	8009aa6 <__s2b+0x66>
 8009ab8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009abc:	4601      	mov	r1, r0
 8009abe:	3b30      	subs	r3, #48	; 0x30
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff76 	bl	80099b4 <__multadd>
 8009ac8:	e7ee      	b.n	8009aa8 <__s2b+0x68>
 8009aca:	bf00      	nop
 8009acc:	0800f29e 	.word	0x0800f29e
 8009ad0:	0800f314 	.word	0x0800f314

08009ad4 <__hi0bits>:
 8009ad4:	0c03      	lsrs	r3, r0, #16
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	b9d3      	cbnz	r3, 8009b10 <__hi0bits+0x3c>
 8009ada:	0400      	lsls	r0, r0, #16
 8009adc:	2310      	movs	r3, #16
 8009ade:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ae2:	bf04      	itt	eq
 8009ae4:	0200      	lsleq	r0, r0, #8
 8009ae6:	3308      	addeq	r3, #8
 8009ae8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009aec:	bf04      	itt	eq
 8009aee:	0100      	lsleq	r0, r0, #4
 8009af0:	3304      	addeq	r3, #4
 8009af2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009af6:	bf04      	itt	eq
 8009af8:	0080      	lsleq	r0, r0, #2
 8009afa:	3302      	addeq	r3, #2
 8009afc:	2800      	cmp	r0, #0
 8009afe:	db05      	blt.n	8009b0c <__hi0bits+0x38>
 8009b00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b04:	f103 0301 	add.w	r3, r3, #1
 8009b08:	bf08      	it	eq
 8009b0a:	2320      	moveq	r3, #32
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	4770      	bx	lr
 8009b10:	2300      	movs	r3, #0
 8009b12:	e7e4      	b.n	8009ade <__hi0bits+0xa>

08009b14 <__lo0bits>:
 8009b14:	6803      	ldr	r3, [r0, #0]
 8009b16:	f013 0207 	ands.w	r2, r3, #7
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	d00b      	beq.n	8009b36 <__lo0bits+0x22>
 8009b1e:	07da      	lsls	r2, r3, #31
 8009b20:	d423      	bmi.n	8009b6a <__lo0bits+0x56>
 8009b22:	0798      	lsls	r0, r3, #30
 8009b24:	bf49      	itett	mi
 8009b26:	085b      	lsrmi	r3, r3, #1
 8009b28:	089b      	lsrpl	r3, r3, #2
 8009b2a:	2001      	movmi	r0, #1
 8009b2c:	600b      	strmi	r3, [r1, #0]
 8009b2e:	bf5c      	itt	pl
 8009b30:	600b      	strpl	r3, [r1, #0]
 8009b32:	2002      	movpl	r0, #2
 8009b34:	4770      	bx	lr
 8009b36:	b298      	uxth	r0, r3
 8009b38:	b9a8      	cbnz	r0, 8009b66 <__lo0bits+0x52>
 8009b3a:	0c1b      	lsrs	r3, r3, #16
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	b90a      	cbnz	r2, 8009b46 <__lo0bits+0x32>
 8009b42:	3008      	adds	r0, #8
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	071a      	lsls	r2, r3, #28
 8009b48:	bf04      	itt	eq
 8009b4a:	091b      	lsreq	r3, r3, #4
 8009b4c:	3004      	addeq	r0, #4
 8009b4e:	079a      	lsls	r2, r3, #30
 8009b50:	bf04      	itt	eq
 8009b52:	089b      	lsreq	r3, r3, #2
 8009b54:	3002      	addeq	r0, #2
 8009b56:	07da      	lsls	r2, r3, #31
 8009b58:	d403      	bmi.n	8009b62 <__lo0bits+0x4e>
 8009b5a:	085b      	lsrs	r3, r3, #1
 8009b5c:	f100 0001 	add.w	r0, r0, #1
 8009b60:	d005      	beq.n	8009b6e <__lo0bits+0x5a>
 8009b62:	600b      	str	r3, [r1, #0]
 8009b64:	4770      	bx	lr
 8009b66:	4610      	mov	r0, r2
 8009b68:	e7e9      	b.n	8009b3e <__lo0bits+0x2a>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	4770      	bx	lr
 8009b6e:	2020      	movs	r0, #32
 8009b70:	4770      	bx	lr
	...

08009b74 <__i2b>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	460c      	mov	r4, r1
 8009b78:	2101      	movs	r1, #1
 8009b7a:	f7ff feed 	bl	8009958 <_Balloc>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	b928      	cbnz	r0, 8009b8e <__i2b+0x1a>
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <__i2b+0x24>)
 8009b84:	4805      	ldr	r0, [pc, #20]	; (8009b9c <__i2b+0x28>)
 8009b86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b8a:	f003 fe17 	bl	800d7bc <__assert_func>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	6144      	str	r4, [r0, #20]
 8009b92:	6103      	str	r3, [r0, #16]
 8009b94:	bd10      	pop	{r4, pc}
 8009b96:	bf00      	nop
 8009b98:	0800f29e 	.word	0x0800f29e
 8009b9c:	0800f314 	.word	0x0800f314

08009ba0 <__multiply>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	4691      	mov	r9, r2
 8009ba6:	690a      	ldr	r2, [r1, #16]
 8009ba8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	bfb8      	it	lt
 8009bb0:	460b      	movlt	r3, r1
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	bfbc      	itt	lt
 8009bb6:	464c      	movlt	r4, r9
 8009bb8:	4699      	movlt	r9, r3
 8009bba:	6927      	ldr	r7, [r4, #16]
 8009bbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	6861      	ldr	r1, [r4, #4]
 8009bc4:	eb07 060a 	add.w	r6, r7, sl
 8009bc8:	42b3      	cmp	r3, r6
 8009bca:	b085      	sub	sp, #20
 8009bcc:	bfb8      	it	lt
 8009bce:	3101      	addlt	r1, #1
 8009bd0:	f7ff fec2 	bl	8009958 <_Balloc>
 8009bd4:	b930      	cbnz	r0, 8009be4 <__multiply+0x44>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	4b44      	ldr	r3, [pc, #272]	; (8009cec <__multiply+0x14c>)
 8009bda:	4845      	ldr	r0, [pc, #276]	; (8009cf0 <__multiply+0x150>)
 8009bdc:	f240 115d 	movw	r1, #349	; 0x15d
 8009be0:	f003 fdec 	bl	800d7bc <__assert_func>
 8009be4:	f100 0514 	add.w	r5, r0, #20
 8009be8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bec:	462b      	mov	r3, r5
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4543      	cmp	r3, r8
 8009bf2:	d321      	bcc.n	8009c38 <__multiply+0x98>
 8009bf4:	f104 0314 	add.w	r3, r4, #20
 8009bf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bfc:	f109 0314 	add.w	r3, r9, #20
 8009c00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c04:	9202      	str	r2, [sp, #8]
 8009c06:	1b3a      	subs	r2, r7, r4
 8009c08:	3a15      	subs	r2, #21
 8009c0a:	f022 0203 	bic.w	r2, r2, #3
 8009c0e:	3204      	adds	r2, #4
 8009c10:	f104 0115 	add.w	r1, r4, #21
 8009c14:	428f      	cmp	r7, r1
 8009c16:	bf38      	it	cc
 8009c18:	2204      	movcc	r2, #4
 8009c1a:	9201      	str	r2, [sp, #4]
 8009c1c:	9a02      	ldr	r2, [sp, #8]
 8009c1e:	9303      	str	r3, [sp, #12]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d80c      	bhi.n	8009c3e <__multiply+0x9e>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	dd03      	ble.n	8009c30 <__multiply+0x90>
 8009c28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d05a      	beq.n	8009ce6 <__multiply+0x146>
 8009c30:	6106      	str	r6, [r0, #16]
 8009c32:	b005      	add	sp, #20
 8009c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c38:	f843 2b04 	str.w	r2, [r3], #4
 8009c3c:	e7d8      	b.n	8009bf0 <__multiply+0x50>
 8009c3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c42:	f1ba 0f00 	cmp.w	sl, #0
 8009c46:	d024      	beq.n	8009c92 <__multiply+0xf2>
 8009c48:	f104 0e14 	add.w	lr, r4, #20
 8009c4c:	46a9      	mov	r9, r5
 8009c4e:	f04f 0c00 	mov.w	ip, #0
 8009c52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c56:	f8d9 1000 	ldr.w	r1, [r9]
 8009c5a:	fa1f fb82 	uxth.w	fp, r2
 8009c5e:	b289      	uxth	r1, r1
 8009c60:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c68:	f8d9 2000 	ldr.w	r2, [r9]
 8009c6c:	4461      	add	r1, ip
 8009c6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c72:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c7a:	b289      	uxth	r1, r1
 8009c7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c80:	4577      	cmp	r7, lr
 8009c82:	f849 1b04 	str.w	r1, [r9], #4
 8009c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c8a:	d8e2      	bhi.n	8009c52 <__multiply+0xb2>
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	f845 c002 	str.w	ip, [r5, r2]
 8009c92:	9a03      	ldr	r2, [sp, #12]
 8009c94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	f1b9 0f00 	cmp.w	r9, #0
 8009c9e:	d020      	beq.n	8009ce2 <__multiply+0x142>
 8009ca0:	6829      	ldr	r1, [r5, #0]
 8009ca2:	f104 0c14 	add.w	ip, r4, #20
 8009ca6:	46ae      	mov	lr, r5
 8009ca8:	f04f 0a00 	mov.w	sl, #0
 8009cac:	f8bc b000 	ldrh.w	fp, [ip]
 8009cb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cb4:	fb09 220b 	mla	r2, r9, fp, r2
 8009cb8:	4492      	add	sl, r2
 8009cba:	b289      	uxth	r1, r1
 8009cbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cc0:	f84e 1b04 	str.w	r1, [lr], #4
 8009cc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cc8:	f8be 1000 	ldrh.w	r1, [lr]
 8009ccc:	0c12      	lsrs	r2, r2, #16
 8009cce:	fb09 1102 	mla	r1, r9, r2, r1
 8009cd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cd6:	4567      	cmp	r7, ip
 8009cd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cdc:	d8e6      	bhi.n	8009cac <__multiply+0x10c>
 8009cde:	9a01      	ldr	r2, [sp, #4]
 8009ce0:	50a9      	str	r1, [r5, r2]
 8009ce2:	3504      	adds	r5, #4
 8009ce4:	e79a      	b.n	8009c1c <__multiply+0x7c>
 8009ce6:	3e01      	subs	r6, #1
 8009ce8:	e79c      	b.n	8009c24 <__multiply+0x84>
 8009cea:	bf00      	nop
 8009cec:	0800f29e 	.word	0x0800f29e
 8009cf0:	0800f314 	.word	0x0800f314

08009cf4 <__pow5mult>:
 8009cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	4615      	mov	r5, r2
 8009cfa:	f012 0203 	ands.w	r2, r2, #3
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	d007      	beq.n	8009d14 <__pow5mult+0x20>
 8009d04:	4c1a      	ldr	r4, [pc, #104]	; (8009d70 <__pow5mult+0x7c>)
 8009d06:	3a01      	subs	r2, #1
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d0e:	f7ff fe51 	bl	80099b4 <__multadd>
 8009d12:	4607      	mov	r7, r0
 8009d14:	10ad      	asrs	r5, r5, #2
 8009d16:	d027      	beq.n	8009d68 <__pow5mult+0x74>
 8009d18:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8009d1a:	b944      	cbnz	r4, 8009d2e <__pow5mult+0x3a>
 8009d1c:	f240 2171 	movw	r1, #625	; 0x271
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ff27 	bl	8009b74 <__i2b>
 8009d26:	2300      	movs	r3, #0
 8009d28:	64b0      	str	r0, [r6, #72]	; 0x48
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	f04f 0900 	mov.w	r9, #0
 8009d32:	07eb      	lsls	r3, r5, #31
 8009d34:	d50a      	bpl.n	8009d4c <__pow5mult+0x58>
 8009d36:	4639      	mov	r1, r7
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff30 	bl	8009ba0 <__multiply>
 8009d40:	4639      	mov	r1, r7
 8009d42:	4680      	mov	r8, r0
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff fe2c 	bl	80099a2 <_Bfree>
 8009d4a:	4647      	mov	r7, r8
 8009d4c:	106d      	asrs	r5, r5, #1
 8009d4e:	d00b      	beq.n	8009d68 <__pow5mult+0x74>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	b938      	cbnz	r0, 8009d64 <__pow5mult+0x70>
 8009d54:	4622      	mov	r2, r4
 8009d56:	4621      	mov	r1, r4
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff ff21 	bl	8009ba0 <__multiply>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	f8c0 9000 	str.w	r9, [r0]
 8009d64:	4604      	mov	r4, r0
 8009d66:	e7e4      	b.n	8009d32 <__pow5mult+0x3e>
 8009d68:	4638      	mov	r0, r7
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800f460 	.word	0x0800f460

08009d74 <__lshift>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	6849      	ldr	r1, [r1, #4]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d82:	68a3      	ldr	r3, [r4, #8]
 8009d84:	4607      	mov	r7, r0
 8009d86:	4691      	mov	r9, r2
 8009d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d8c:	f108 0601 	add.w	r6, r8, #1
 8009d90:	42b3      	cmp	r3, r6
 8009d92:	db0b      	blt.n	8009dac <__lshift+0x38>
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff fddf 	bl	8009958 <_Balloc>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	b948      	cbnz	r0, 8009db2 <__lshift+0x3e>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	4b2a      	ldr	r3, [pc, #168]	; (8009e4c <__lshift+0xd8>)
 8009da2:	482b      	ldr	r0, [pc, #172]	; (8009e50 <__lshift+0xdc>)
 8009da4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009da8:	f003 fd08 	bl	800d7bc <__assert_func>
 8009dac:	3101      	adds	r1, #1
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	e7ee      	b.n	8009d90 <__lshift+0x1c>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f100 0114 	add.w	r1, r0, #20
 8009db8:	f100 0210 	add.w	r2, r0, #16
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	4553      	cmp	r3, sl
 8009dc0:	db37      	blt.n	8009e32 <__lshift+0xbe>
 8009dc2:	6920      	ldr	r0, [r4, #16]
 8009dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dc8:	f104 0314 	add.w	r3, r4, #20
 8009dcc:	f019 091f 	ands.w	r9, r9, #31
 8009dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009dd8:	d02f      	beq.n	8009e3a <__lshift+0xc6>
 8009dda:	f1c9 0e20 	rsb	lr, r9, #32
 8009dde:	468a      	mov	sl, r1
 8009de0:	f04f 0c00 	mov.w	ip, #0
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	fa02 f209 	lsl.w	r2, r2, r9
 8009dea:	ea42 020c 	orr.w	r2, r2, ip
 8009dee:	f84a 2b04 	str.w	r2, [sl], #4
 8009df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009df6:	4298      	cmp	r0, r3
 8009df8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009dfc:	d8f2      	bhi.n	8009de4 <__lshift+0x70>
 8009dfe:	1b03      	subs	r3, r0, r4
 8009e00:	3b15      	subs	r3, #21
 8009e02:	f023 0303 	bic.w	r3, r3, #3
 8009e06:	3304      	adds	r3, #4
 8009e08:	f104 0215 	add.w	r2, r4, #21
 8009e0c:	4290      	cmp	r0, r2
 8009e0e:	bf38      	it	cc
 8009e10:	2304      	movcc	r3, #4
 8009e12:	f841 c003 	str.w	ip, [r1, r3]
 8009e16:	f1bc 0f00 	cmp.w	ip, #0
 8009e1a:	d001      	beq.n	8009e20 <__lshift+0xac>
 8009e1c:	f108 0602 	add.w	r6, r8, #2
 8009e20:	3e01      	subs	r6, #1
 8009e22:	4638      	mov	r0, r7
 8009e24:	612e      	str	r6, [r5, #16]
 8009e26:	4621      	mov	r1, r4
 8009e28:	f7ff fdbb 	bl	80099a2 <_Bfree>
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e36:	3301      	adds	r3, #1
 8009e38:	e7c1      	b.n	8009dbe <__lshift+0x4a>
 8009e3a:	3904      	subs	r1, #4
 8009e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e44:	4298      	cmp	r0, r3
 8009e46:	d8f9      	bhi.n	8009e3c <__lshift+0xc8>
 8009e48:	e7ea      	b.n	8009e20 <__lshift+0xac>
 8009e4a:	bf00      	nop
 8009e4c:	0800f29e 	.word	0x0800f29e
 8009e50:	0800f314 	.word	0x0800f314

08009e54 <__mcmp>:
 8009e54:	b530      	push	{r4, r5, lr}
 8009e56:	6902      	ldr	r2, [r0, #16]
 8009e58:	690c      	ldr	r4, [r1, #16]
 8009e5a:	1b12      	subs	r2, r2, r4
 8009e5c:	d10e      	bne.n	8009e7c <__mcmp+0x28>
 8009e5e:	f100 0314 	add.w	r3, r0, #20
 8009e62:	3114      	adds	r1, #20
 8009e64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e74:	42a5      	cmp	r5, r4
 8009e76:	d003      	beq.n	8009e80 <__mcmp+0x2c>
 8009e78:	d305      	bcc.n	8009e86 <__mcmp+0x32>
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	bd30      	pop	{r4, r5, pc}
 8009e80:	4283      	cmp	r3, r0
 8009e82:	d3f3      	bcc.n	8009e6c <__mcmp+0x18>
 8009e84:	e7fa      	b.n	8009e7c <__mcmp+0x28>
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8a:	e7f7      	b.n	8009e7c <__mcmp+0x28>

08009e8c <__mdiff>:
 8009e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	460c      	mov	r4, r1
 8009e92:	4606      	mov	r6, r0
 8009e94:	4611      	mov	r1, r2
 8009e96:	4620      	mov	r0, r4
 8009e98:	4690      	mov	r8, r2
 8009e9a:	f7ff ffdb 	bl	8009e54 <__mcmp>
 8009e9e:	1e05      	subs	r5, r0, #0
 8009ea0:	d110      	bne.n	8009ec4 <__mdiff+0x38>
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7ff fd57 	bl	8009958 <_Balloc>
 8009eaa:	b930      	cbnz	r0, 8009eba <__mdiff+0x2e>
 8009eac:	4b3a      	ldr	r3, [pc, #232]	; (8009f98 <__mdiff+0x10c>)
 8009eae:	4602      	mov	r2, r0
 8009eb0:	f240 2132 	movw	r1, #562	; 0x232
 8009eb4:	4839      	ldr	r0, [pc, #228]	; (8009f9c <__mdiff+0x110>)
 8009eb6:	f003 fc81 	bl	800d7bc <__assert_func>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	bfa4      	itt	ge
 8009ec6:	4643      	movge	r3, r8
 8009ec8:	46a0      	movge	r8, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ed0:	bfa6      	itte	ge
 8009ed2:	461c      	movge	r4, r3
 8009ed4:	2500      	movge	r5, #0
 8009ed6:	2501      	movlt	r5, #1
 8009ed8:	f7ff fd3e 	bl	8009958 <_Balloc>
 8009edc:	b920      	cbnz	r0, 8009ee8 <__mdiff+0x5c>
 8009ede:	4b2e      	ldr	r3, [pc, #184]	; (8009f98 <__mdiff+0x10c>)
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ee6:	e7e5      	b.n	8009eb4 <__mdiff+0x28>
 8009ee8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009eec:	6926      	ldr	r6, [r4, #16]
 8009eee:	60c5      	str	r5, [r0, #12]
 8009ef0:	f104 0914 	add.w	r9, r4, #20
 8009ef4:	f108 0514 	add.w	r5, r8, #20
 8009ef8:	f100 0e14 	add.w	lr, r0, #20
 8009efc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f04:	f108 0210 	add.w	r2, r8, #16
 8009f08:	46f2      	mov	sl, lr
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f14:	fa1f f883 	uxth.w	r8, r3
 8009f18:	fa11 f18b 	uxtah	r1, r1, fp
 8009f1c:	0c1b      	lsrs	r3, r3, #16
 8009f1e:	eba1 0808 	sub.w	r8, r1, r8
 8009f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f2a:	fa1f f888 	uxth.w	r8, r8
 8009f2e:	1419      	asrs	r1, r3, #16
 8009f30:	454e      	cmp	r6, r9
 8009f32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f36:	f84a 3b04 	str.w	r3, [sl], #4
 8009f3a:	d8e7      	bhi.n	8009f0c <__mdiff+0x80>
 8009f3c:	1b33      	subs	r3, r6, r4
 8009f3e:	3b15      	subs	r3, #21
 8009f40:	f023 0303 	bic.w	r3, r3, #3
 8009f44:	3304      	adds	r3, #4
 8009f46:	3415      	adds	r4, #21
 8009f48:	42a6      	cmp	r6, r4
 8009f4a:	bf38      	it	cc
 8009f4c:	2304      	movcc	r3, #4
 8009f4e:	441d      	add	r5, r3
 8009f50:	4473      	add	r3, lr
 8009f52:	469e      	mov	lr, r3
 8009f54:	462e      	mov	r6, r5
 8009f56:	4566      	cmp	r6, ip
 8009f58:	d30e      	bcc.n	8009f78 <__mdiff+0xec>
 8009f5a:	f10c 0203 	add.w	r2, ip, #3
 8009f5e:	1b52      	subs	r2, r2, r5
 8009f60:	f022 0203 	bic.w	r2, r2, #3
 8009f64:	3d03      	subs	r5, #3
 8009f66:	45ac      	cmp	ip, r5
 8009f68:	bf38      	it	cc
 8009f6a:	2200      	movcc	r2, #0
 8009f6c:	441a      	add	r2, r3
 8009f6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f72:	b17b      	cbz	r3, 8009f94 <__mdiff+0x108>
 8009f74:	6107      	str	r7, [r0, #16]
 8009f76:	e7a3      	b.n	8009ec0 <__mdiff+0x34>
 8009f78:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f7c:	fa11 f288 	uxtah	r2, r1, r8
 8009f80:	1414      	asrs	r4, r2, #16
 8009f82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f86:	b292      	uxth	r2, r2
 8009f88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f8c:	f84e 2b04 	str.w	r2, [lr], #4
 8009f90:	1421      	asrs	r1, r4, #16
 8009f92:	e7e0      	b.n	8009f56 <__mdiff+0xca>
 8009f94:	3f01      	subs	r7, #1
 8009f96:	e7ea      	b.n	8009f6e <__mdiff+0xe2>
 8009f98:	0800f29e 	.word	0x0800f29e
 8009f9c:	0800f314 	.word	0x0800f314

08009fa0 <__ulp>:
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	ed8d 0b00 	vstr	d0, [sp]
 8009fa6:	9b01      	ldr	r3, [sp, #4]
 8009fa8:	4912      	ldr	r1, [pc, #72]	; (8009ff4 <__ulp+0x54>)
 8009faa:	4019      	ands	r1, r3
 8009fac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	dd05      	ble.n	8009fc0 <__ulp+0x20>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	ec43 2b10 	vmov	d0, r2, r3
 8009fbc:	b002      	add	sp, #8
 8009fbe:	4770      	bx	lr
 8009fc0:	4249      	negs	r1, r1
 8009fc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009fc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	f04f 0300 	mov.w	r3, #0
 8009fd2:	da04      	bge.n	8009fde <__ulp+0x3e>
 8009fd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fd8:	fa41 f300 	asr.w	r3, r1, r0
 8009fdc:	e7ec      	b.n	8009fb8 <__ulp+0x18>
 8009fde:	f1a0 0114 	sub.w	r1, r0, #20
 8009fe2:	291e      	cmp	r1, #30
 8009fe4:	bfda      	itte	le
 8009fe6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009fea:	fa20 f101 	lsrle.w	r1, r0, r1
 8009fee:	2101      	movgt	r1, #1
 8009ff0:	460a      	mov	r2, r1
 8009ff2:	e7e1      	b.n	8009fb8 <__ulp+0x18>
 8009ff4:	7ff00000 	.word	0x7ff00000

08009ff8 <__b2d>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	6905      	ldr	r5, [r0, #16]
 8009ffc:	f100 0714 	add.w	r7, r0, #20
 800a000:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a004:	1f2e      	subs	r6, r5, #4
 800a006:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7ff fd62 	bl	8009ad4 <__hi0bits>
 800a010:	f1c0 0320 	rsb	r3, r0, #32
 800a014:	280a      	cmp	r0, #10
 800a016:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a094 <__b2d+0x9c>
 800a01a:	600b      	str	r3, [r1, #0]
 800a01c:	dc14      	bgt.n	800a048 <__b2d+0x50>
 800a01e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a022:	fa24 f10e 	lsr.w	r1, r4, lr
 800a026:	42b7      	cmp	r7, r6
 800a028:	ea41 030c 	orr.w	r3, r1, ip
 800a02c:	bf34      	ite	cc
 800a02e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a032:	2100      	movcs	r1, #0
 800a034:	3015      	adds	r0, #21
 800a036:	fa04 f000 	lsl.w	r0, r4, r0
 800a03a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a03e:	ea40 0201 	orr.w	r2, r0, r1
 800a042:	ec43 2b10 	vmov	d0, r2, r3
 800a046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a048:	42b7      	cmp	r7, r6
 800a04a:	bf3a      	itte	cc
 800a04c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a050:	f1a5 0608 	subcc.w	r6, r5, #8
 800a054:	2100      	movcs	r1, #0
 800a056:	380b      	subs	r0, #11
 800a058:	d017      	beq.n	800a08a <__b2d+0x92>
 800a05a:	f1c0 0c20 	rsb	ip, r0, #32
 800a05e:	fa04 f500 	lsl.w	r5, r4, r0
 800a062:	42be      	cmp	r6, r7
 800a064:	fa21 f40c 	lsr.w	r4, r1, ip
 800a068:	ea45 0504 	orr.w	r5, r5, r4
 800a06c:	bf8c      	ite	hi
 800a06e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a072:	2400      	movls	r4, #0
 800a074:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a078:	fa01 f000 	lsl.w	r0, r1, r0
 800a07c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a080:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a084:	ea40 0204 	orr.w	r2, r0, r4
 800a088:	e7db      	b.n	800a042 <__b2d+0x4a>
 800a08a:	ea44 030c 	orr.w	r3, r4, ip
 800a08e:	460a      	mov	r2, r1
 800a090:	e7d7      	b.n	800a042 <__b2d+0x4a>
 800a092:	bf00      	nop
 800a094:	3ff00000 	.word	0x3ff00000

0800a098 <__d2b>:
 800a098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4689      	mov	r9, r1
 800a09e:	2101      	movs	r1, #1
 800a0a0:	ec57 6b10 	vmov	r6, r7, d0
 800a0a4:	4690      	mov	r8, r2
 800a0a6:	f7ff fc57 	bl	8009958 <_Balloc>
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	b930      	cbnz	r0, 800a0bc <__d2b+0x24>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	4b25      	ldr	r3, [pc, #148]	; (800a148 <__d2b+0xb0>)
 800a0b2:	4826      	ldr	r0, [pc, #152]	; (800a14c <__d2b+0xb4>)
 800a0b4:	f240 310a 	movw	r1, #778	; 0x30a
 800a0b8:	f003 fb80 	bl	800d7bc <__assert_func>
 800a0bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0c4:	bb35      	cbnz	r5, 800a114 <__d2b+0x7c>
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	d028      	beq.n	800a11e <__d2b+0x86>
 800a0cc:	4668      	mov	r0, sp
 800a0ce:	9600      	str	r6, [sp, #0]
 800a0d0:	f7ff fd20 	bl	8009b14 <__lo0bits>
 800a0d4:	9900      	ldr	r1, [sp, #0]
 800a0d6:	b300      	cbz	r0, 800a11a <__d2b+0x82>
 800a0d8:	9a01      	ldr	r2, [sp, #4]
 800a0da:	f1c0 0320 	rsb	r3, r0, #32
 800a0de:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	40c2      	lsrs	r2, r0
 800a0e6:	6163      	str	r3, [r4, #20]
 800a0e8:	9201      	str	r2, [sp, #4]
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	61a3      	str	r3, [r4, #24]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bf14      	ite	ne
 800a0f2:	2202      	movne	r2, #2
 800a0f4:	2201      	moveq	r2, #1
 800a0f6:	6122      	str	r2, [r4, #16]
 800a0f8:	b1d5      	cbz	r5, 800a130 <__d2b+0x98>
 800a0fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0fe:	4405      	add	r5, r0
 800a100:	f8c9 5000 	str.w	r5, [r9]
 800a104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a108:	f8c8 0000 	str.w	r0, [r8]
 800a10c:	4620      	mov	r0, r4
 800a10e:	b003      	add	sp, #12
 800a110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a118:	e7d5      	b.n	800a0c6 <__d2b+0x2e>
 800a11a:	6161      	str	r1, [r4, #20]
 800a11c:	e7e5      	b.n	800a0ea <__d2b+0x52>
 800a11e:	a801      	add	r0, sp, #4
 800a120:	f7ff fcf8 	bl	8009b14 <__lo0bits>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	6163      	str	r3, [r4, #20]
 800a128:	2201      	movs	r2, #1
 800a12a:	6122      	str	r2, [r4, #16]
 800a12c:	3020      	adds	r0, #32
 800a12e:	e7e3      	b.n	800a0f8 <__d2b+0x60>
 800a130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a138:	f8c9 0000 	str.w	r0, [r9]
 800a13c:	6918      	ldr	r0, [r3, #16]
 800a13e:	f7ff fcc9 	bl	8009ad4 <__hi0bits>
 800a142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a146:	e7df      	b.n	800a108 <__d2b+0x70>
 800a148:	0800f29e 	.word	0x0800f29e
 800a14c:	0800f314 	.word	0x0800f314

0800a150 <__ratio>:
 800a150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4688      	mov	r8, r1
 800a156:	4669      	mov	r1, sp
 800a158:	4681      	mov	r9, r0
 800a15a:	f7ff ff4d 	bl	8009ff8 <__b2d>
 800a15e:	a901      	add	r1, sp, #4
 800a160:	4640      	mov	r0, r8
 800a162:	ec55 4b10 	vmov	r4, r5, d0
 800a166:	ee10 aa10 	vmov	sl, s0
 800a16a:	f7ff ff45 	bl	8009ff8 <__b2d>
 800a16e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a176:	1a59      	subs	r1, r3, r1
 800a178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a182:	ec57 6b10 	vmov	r6, r7, d0
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfd6      	itet	le
 800a18a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a18e:	462a      	movgt	r2, r5
 800a190:	463a      	movle	r2, r7
 800a192:	46ab      	mov	fp, r5
 800a194:	bfd6      	itet	le
 800a196:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a19a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a19e:	ee00 3a90 	vmovle	s1, r3
 800a1a2:	ec4b ab17 	vmov	d7, sl, fp
 800a1a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a1aa:	b003      	add	sp, #12
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1b0 <__copybits>:
 800a1b0:	3901      	subs	r1, #1
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	1149      	asrs	r1, r1, #5
 800a1b6:	6914      	ldr	r4, [r2, #16]
 800a1b8:	3101      	adds	r1, #1
 800a1ba:	f102 0314 	add.w	r3, r2, #20
 800a1be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1c6:	1f05      	subs	r5, r0, #4
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	d30c      	bcc.n	800a1e6 <__copybits+0x36>
 800a1cc:	1aa3      	subs	r3, r4, r2
 800a1ce:	3b11      	subs	r3, #17
 800a1d0:	f023 0303 	bic.w	r3, r3, #3
 800a1d4:	3211      	adds	r2, #17
 800a1d6:	42a2      	cmp	r2, r4
 800a1d8:	bf88      	it	hi
 800a1da:	2300      	movhi	r3, #0
 800a1dc:	4418      	add	r0, r3
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4288      	cmp	r0, r1
 800a1e2:	d305      	bcc.n	800a1f0 <__copybits+0x40>
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1ea:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ee:	e7eb      	b.n	800a1c8 <__copybits+0x18>
 800a1f0:	f840 3b04 	str.w	r3, [r0], #4
 800a1f4:	e7f4      	b.n	800a1e0 <__copybits+0x30>

0800a1f6 <__any_on>:
 800a1f6:	f100 0214 	add.w	r2, r0, #20
 800a1fa:	6900      	ldr	r0, [r0, #16]
 800a1fc:	114b      	asrs	r3, r1, #5
 800a1fe:	4298      	cmp	r0, r3
 800a200:	b510      	push	{r4, lr}
 800a202:	db11      	blt.n	800a228 <__any_on+0x32>
 800a204:	dd0a      	ble.n	800a21c <__any_on+0x26>
 800a206:	f011 011f 	ands.w	r1, r1, #31
 800a20a:	d007      	beq.n	800a21c <__any_on+0x26>
 800a20c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a210:	fa24 f001 	lsr.w	r0, r4, r1
 800a214:	fa00 f101 	lsl.w	r1, r0, r1
 800a218:	428c      	cmp	r4, r1
 800a21a:	d10b      	bne.n	800a234 <__any_on+0x3e>
 800a21c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a220:	4293      	cmp	r3, r2
 800a222:	d803      	bhi.n	800a22c <__any_on+0x36>
 800a224:	2000      	movs	r0, #0
 800a226:	bd10      	pop	{r4, pc}
 800a228:	4603      	mov	r3, r0
 800a22a:	e7f7      	b.n	800a21c <__any_on+0x26>
 800a22c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a230:	2900      	cmp	r1, #0
 800a232:	d0f5      	beq.n	800a220 <__any_on+0x2a>
 800a234:	2001      	movs	r0, #1
 800a236:	e7f6      	b.n	800a226 <__any_on+0x30>

0800a238 <realloc>:
 800a238:	4b02      	ldr	r3, [pc, #8]	; (800a244 <realloc+0xc>)
 800a23a:	460a      	mov	r2, r1
 800a23c:	4601      	mov	r1, r0
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	f000 b802 	b.w	800a248 <_realloc_r>
 800a244:	2000000c 	.word	0x2000000c

0800a248 <_realloc_r>:
 800a248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	4681      	mov	r9, r0
 800a24e:	460c      	mov	r4, r1
 800a250:	b929      	cbnz	r1, 800a25e <_realloc_r+0x16>
 800a252:	4611      	mov	r1, r2
 800a254:	b003      	add	sp, #12
 800a256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	f7ff b8e1 	b.w	8009420 <_malloc_r>
 800a25e:	9201      	str	r2, [sp, #4]
 800a260:	f7ff fb6e 	bl	8009940 <__malloc_lock>
 800a264:	9a01      	ldr	r2, [sp, #4]
 800a266:	f102 080b 	add.w	r8, r2, #11
 800a26a:	f1b8 0f16 	cmp.w	r8, #22
 800a26e:	d90b      	bls.n	800a288 <_realloc_r+0x40>
 800a270:	f038 0807 	bics.w	r8, r8, #7
 800a274:	d50a      	bpl.n	800a28c <_realloc_r+0x44>
 800a276:	230c      	movs	r3, #12
 800a278:	f8c9 3000 	str.w	r3, [r9]
 800a27c:	f04f 0b00 	mov.w	fp, #0
 800a280:	4658      	mov	r0, fp
 800a282:	b003      	add	sp, #12
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	f04f 0810 	mov.w	r8, #16
 800a28c:	4590      	cmp	r8, r2
 800a28e:	d3f2      	bcc.n	800a276 <_realloc_r+0x2e>
 800a290:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a294:	f025 0603 	bic.w	r6, r5, #3
 800a298:	45b0      	cmp	r8, r6
 800a29a:	f1a4 0a08 	sub.w	sl, r4, #8
 800a29e:	f340 816e 	ble.w	800a57e <_realloc_r+0x336>
 800a2a2:	499b      	ldr	r1, [pc, #620]	; (800a510 <_realloc_r+0x2c8>)
 800a2a4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a2a8:	eb0a 0306 	add.w	r3, sl, r6
 800a2ac:	459c      	cmp	ip, r3
 800a2ae:	6859      	ldr	r1, [r3, #4]
 800a2b0:	d005      	beq.n	800a2be <_realloc_r+0x76>
 800a2b2:	f021 0001 	bic.w	r0, r1, #1
 800a2b6:	4418      	add	r0, r3
 800a2b8:	6840      	ldr	r0, [r0, #4]
 800a2ba:	07c7      	lsls	r7, r0, #31
 800a2bc:	d427      	bmi.n	800a30e <_realloc_r+0xc6>
 800a2be:	f021 0103 	bic.w	r1, r1, #3
 800a2c2:	459c      	cmp	ip, r3
 800a2c4:	eb06 0701 	add.w	r7, r6, r1
 800a2c8:	d119      	bne.n	800a2fe <_realloc_r+0xb6>
 800a2ca:	f108 0010 	add.w	r0, r8, #16
 800a2ce:	42b8      	cmp	r0, r7
 800a2d0:	dc1f      	bgt.n	800a312 <_realloc_r+0xca>
 800a2d2:	eb0a 0308 	add.w	r3, sl, r8
 800a2d6:	4a8e      	ldr	r2, [pc, #568]	; (800a510 <_realloc_r+0x2c8>)
 800a2d8:	eba7 0708 	sub.w	r7, r7, r8
 800a2dc:	f047 0701 	orr.w	r7, r7, #1
 800a2e0:	6093      	str	r3, [r2, #8]
 800a2e2:	605f      	str	r7, [r3, #4]
 800a2e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	ea43 0308 	orr.w	r3, r3, r8
 800a2f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2f4:	4648      	mov	r0, r9
 800a2f6:	f7ff fb29 	bl	800994c <__malloc_unlock>
 800a2fa:	46a3      	mov	fp, r4
 800a2fc:	e7c0      	b.n	800a280 <_realloc_r+0x38>
 800a2fe:	45b8      	cmp	r8, r7
 800a300:	dc07      	bgt.n	800a312 <_realloc_r+0xca>
 800a302:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a306:	60da      	str	r2, [r3, #12]
 800a308:	6093      	str	r3, [r2, #8]
 800a30a:	4655      	mov	r5, sl
 800a30c:	e07f      	b.n	800a40e <_realloc_r+0x1c6>
 800a30e:	2100      	movs	r1, #0
 800a310:	460b      	mov	r3, r1
 800a312:	07e8      	lsls	r0, r5, #31
 800a314:	f100 80e5 	bmi.w	800a4e2 <_realloc_r+0x29a>
 800a318:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a31c:	ebaa 0505 	sub.w	r5, sl, r5
 800a320:	6868      	ldr	r0, [r5, #4]
 800a322:	f020 0003 	bic.w	r0, r0, #3
 800a326:	eb00 0b06 	add.w	fp, r0, r6
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 80a5 	beq.w	800a47a <_realloc_r+0x232>
 800a330:	459c      	cmp	ip, r3
 800a332:	eb01 070b 	add.w	r7, r1, fp
 800a336:	d14a      	bne.n	800a3ce <_realloc_r+0x186>
 800a338:	f108 0310 	add.w	r3, r8, #16
 800a33c:	42bb      	cmp	r3, r7
 800a33e:	f300 809c 	bgt.w	800a47a <_realloc_r+0x232>
 800a342:	46ab      	mov	fp, r5
 800a344:	68eb      	ldr	r3, [r5, #12]
 800a346:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a34a:	60d3      	str	r3, [r2, #12]
 800a34c:	609a      	str	r2, [r3, #8]
 800a34e:	1f32      	subs	r2, r6, #4
 800a350:	2a24      	cmp	r2, #36	; 0x24
 800a352:	d837      	bhi.n	800a3c4 <_realloc_r+0x17c>
 800a354:	2a13      	cmp	r2, #19
 800a356:	d933      	bls.n	800a3c0 <_realloc_r+0x178>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	60ab      	str	r3, [r5, #8]
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	60eb      	str	r3, [r5, #12]
 800a360:	2a1b      	cmp	r2, #27
 800a362:	d81b      	bhi.n	800a39c <_realloc_r+0x154>
 800a364:	3408      	adds	r4, #8
 800a366:	f105 0310 	add.w	r3, r5, #16
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	6862      	ldr	r2, [r4, #4]
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	68a2      	ldr	r2, [r4, #8]
 800a374:	609a      	str	r2, [r3, #8]
 800a376:	eb05 0308 	add.w	r3, r5, r8
 800a37a:	4a65      	ldr	r2, [pc, #404]	; (800a510 <_realloc_r+0x2c8>)
 800a37c:	eba7 0708 	sub.w	r7, r7, r8
 800a380:	f047 0701 	orr.w	r7, r7, #1
 800a384:	6093      	str	r3, [r2, #8]
 800a386:	605f      	str	r7, [r3, #4]
 800a388:	686b      	ldr	r3, [r5, #4]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	ea43 0308 	orr.w	r3, r3, r8
 800a392:	606b      	str	r3, [r5, #4]
 800a394:	4648      	mov	r0, r9
 800a396:	f7ff fad9 	bl	800994c <__malloc_unlock>
 800a39a:	e771      	b.n	800a280 <_realloc_r+0x38>
 800a39c:	68a3      	ldr	r3, [r4, #8]
 800a39e:	612b      	str	r3, [r5, #16]
 800a3a0:	68e3      	ldr	r3, [r4, #12]
 800a3a2:	616b      	str	r3, [r5, #20]
 800a3a4:	2a24      	cmp	r2, #36	; 0x24
 800a3a6:	bf01      	itttt	eq
 800a3a8:	6923      	ldreq	r3, [r4, #16]
 800a3aa:	61ab      	streq	r3, [r5, #24]
 800a3ac:	6962      	ldreq	r2, [r4, #20]
 800a3ae:	61ea      	streq	r2, [r5, #28]
 800a3b0:	bf19      	ittee	ne
 800a3b2:	3410      	addne	r4, #16
 800a3b4:	f105 0318 	addne.w	r3, r5, #24
 800a3b8:	f105 0320 	addeq.w	r3, r5, #32
 800a3bc:	3418      	addeq	r4, #24
 800a3be:	e7d4      	b.n	800a36a <_realloc_r+0x122>
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	e7d2      	b.n	800a36a <_realloc_r+0x122>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f7ff faa0 	bl	800990c <memmove>
 800a3cc:	e7d3      	b.n	800a376 <_realloc_r+0x12e>
 800a3ce:	45b8      	cmp	r8, r7
 800a3d0:	dc53      	bgt.n	800a47a <_realloc_r+0x232>
 800a3d2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	6093      	str	r3, [r2, #8]
 800a3dc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a3e0:	68eb      	ldr	r3, [r5, #12]
 800a3e2:	60d3      	str	r3, [r2, #12]
 800a3e4:	609a      	str	r2, [r3, #8]
 800a3e6:	1f32      	subs	r2, r6, #4
 800a3e8:	2a24      	cmp	r2, #36	; 0x24
 800a3ea:	d842      	bhi.n	800a472 <_realloc_r+0x22a>
 800a3ec:	2a13      	cmp	r2, #19
 800a3ee:	d908      	bls.n	800a402 <_realloc_r+0x1ba>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	60ab      	str	r3, [r5, #8]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	60eb      	str	r3, [r5, #12]
 800a3f8:	2a1b      	cmp	r2, #27
 800a3fa:	d828      	bhi.n	800a44e <_realloc_r+0x206>
 800a3fc:	3408      	adds	r4, #8
 800a3fe:	f105 0010 	add.w	r0, r5, #16
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	6003      	str	r3, [r0, #0]
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	6043      	str	r3, [r0, #4]
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	6083      	str	r3, [r0, #8]
 800a40e:	686b      	ldr	r3, [r5, #4]
 800a410:	eba7 0008 	sub.w	r0, r7, r8
 800a414:	280f      	cmp	r0, #15
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	eb05 0207 	add.w	r2, r5, r7
 800a41e:	f240 80b0 	bls.w	800a582 <_realloc_r+0x33a>
 800a422:	eb05 0108 	add.w	r1, r5, r8
 800a426:	ea48 0303 	orr.w	r3, r8, r3
 800a42a:	f040 0001 	orr.w	r0, r0, #1
 800a42e:	606b      	str	r3, [r5, #4]
 800a430:	6048      	str	r0, [r1, #4]
 800a432:	6853      	ldr	r3, [r2, #4]
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	6053      	str	r3, [r2, #4]
 800a43a:	3108      	adds	r1, #8
 800a43c:	4648      	mov	r0, r9
 800a43e:	f7fe fd11 	bl	8008e64 <_free_r>
 800a442:	4648      	mov	r0, r9
 800a444:	f7ff fa82 	bl	800994c <__malloc_unlock>
 800a448:	f105 0b08 	add.w	fp, r5, #8
 800a44c:	e718      	b.n	800a280 <_realloc_r+0x38>
 800a44e:	68a3      	ldr	r3, [r4, #8]
 800a450:	612b      	str	r3, [r5, #16]
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	616b      	str	r3, [r5, #20]
 800a456:	2a24      	cmp	r2, #36	; 0x24
 800a458:	bf01      	itttt	eq
 800a45a:	6923      	ldreq	r3, [r4, #16]
 800a45c:	61ab      	streq	r3, [r5, #24]
 800a45e:	6963      	ldreq	r3, [r4, #20]
 800a460:	61eb      	streq	r3, [r5, #28]
 800a462:	bf19      	ittee	ne
 800a464:	3410      	addne	r4, #16
 800a466:	f105 0018 	addne.w	r0, r5, #24
 800a46a:	f105 0020 	addeq.w	r0, r5, #32
 800a46e:	3418      	addeq	r4, #24
 800a470:	e7c7      	b.n	800a402 <_realloc_r+0x1ba>
 800a472:	4621      	mov	r1, r4
 800a474:	f7ff fa4a 	bl	800990c <memmove>
 800a478:	e7c9      	b.n	800a40e <_realloc_r+0x1c6>
 800a47a:	45d8      	cmp	r8, fp
 800a47c:	dc31      	bgt.n	800a4e2 <_realloc_r+0x29a>
 800a47e:	4628      	mov	r0, r5
 800a480:	68eb      	ldr	r3, [r5, #12]
 800a482:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a486:	60d3      	str	r3, [r2, #12]
 800a488:	609a      	str	r2, [r3, #8]
 800a48a:	1f32      	subs	r2, r6, #4
 800a48c:	2a24      	cmp	r2, #36	; 0x24
 800a48e:	d824      	bhi.n	800a4da <_realloc_r+0x292>
 800a490:	2a13      	cmp	r2, #19
 800a492:	d908      	bls.n	800a4a6 <_realloc_r+0x25e>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	60ab      	str	r3, [r5, #8]
 800a498:	6863      	ldr	r3, [r4, #4]
 800a49a:	60eb      	str	r3, [r5, #12]
 800a49c:	2a1b      	cmp	r2, #27
 800a49e:	d80a      	bhi.n	800a4b6 <_realloc_r+0x26e>
 800a4a0:	3408      	adds	r4, #8
 800a4a2:	f105 0010 	add.w	r0, r5, #16
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	6043      	str	r3, [r0, #4]
 800a4ae:	68a3      	ldr	r3, [r4, #8]
 800a4b0:	6083      	str	r3, [r0, #8]
 800a4b2:	465f      	mov	r7, fp
 800a4b4:	e7ab      	b.n	800a40e <_realloc_r+0x1c6>
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	612b      	str	r3, [r5, #16]
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	616b      	str	r3, [r5, #20]
 800a4be:	2a24      	cmp	r2, #36	; 0x24
 800a4c0:	bf01      	itttt	eq
 800a4c2:	6923      	ldreq	r3, [r4, #16]
 800a4c4:	61ab      	streq	r3, [r5, #24]
 800a4c6:	6963      	ldreq	r3, [r4, #20]
 800a4c8:	61eb      	streq	r3, [r5, #28]
 800a4ca:	bf19      	ittee	ne
 800a4cc:	3410      	addne	r4, #16
 800a4ce:	f105 0018 	addne.w	r0, r5, #24
 800a4d2:	f105 0020 	addeq.w	r0, r5, #32
 800a4d6:	3418      	addeq	r4, #24
 800a4d8:	e7e5      	b.n	800a4a6 <_realloc_r+0x25e>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	f7ff fa16 	bl	800990c <memmove>
 800a4e0:	e7e7      	b.n	800a4b2 <_realloc_r+0x26a>
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f7fe ff9b 	bl	8009420 <_malloc_r>
 800a4ea:	4683      	mov	fp, r0
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f43f af51 	beq.w	800a394 <_realloc_r+0x14c>
 800a4f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	4453      	add	r3, sl
 800a4fc:	f1a0 0208 	sub.w	r2, r0, #8
 800a500:	4293      	cmp	r3, r2
 800a502:	d107      	bne.n	800a514 <_realloc_r+0x2cc>
 800a504:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a508:	f027 0703 	bic.w	r7, r7, #3
 800a50c:	4437      	add	r7, r6
 800a50e:	e6fc      	b.n	800a30a <_realloc_r+0xc2>
 800a510:	200005a8 	.word	0x200005a8
 800a514:	1f32      	subs	r2, r6, #4
 800a516:	2a24      	cmp	r2, #36	; 0x24
 800a518:	d82d      	bhi.n	800a576 <_realloc_r+0x32e>
 800a51a:	2a13      	cmp	r2, #19
 800a51c:	d928      	bls.n	800a570 <_realloc_r+0x328>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	6863      	ldr	r3, [r4, #4]
 800a524:	6043      	str	r3, [r0, #4]
 800a526:	2a1b      	cmp	r2, #27
 800a528:	d80e      	bhi.n	800a548 <_realloc_r+0x300>
 800a52a:	f104 0208 	add.w	r2, r4, #8
 800a52e:	f100 0308 	add.w	r3, r0, #8
 800a532:	6811      	ldr	r1, [r2, #0]
 800a534:	6019      	str	r1, [r3, #0]
 800a536:	6851      	ldr	r1, [r2, #4]
 800a538:	6059      	str	r1, [r3, #4]
 800a53a:	6892      	ldr	r2, [r2, #8]
 800a53c:	609a      	str	r2, [r3, #8]
 800a53e:	4621      	mov	r1, r4
 800a540:	4648      	mov	r0, r9
 800a542:	f7fe fc8f 	bl	8008e64 <_free_r>
 800a546:	e725      	b.n	800a394 <_realloc_r+0x14c>
 800a548:	68a3      	ldr	r3, [r4, #8]
 800a54a:	6083      	str	r3, [r0, #8]
 800a54c:	68e3      	ldr	r3, [r4, #12]
 800a54e:	60c3      	str	r3, [r0, #12]
 800a550:	2a24      	cmp	r2, #36	; 0x24
 800a552:	bf01      	itttt	eq
 800a554:	6923      	ldreq	r3, [r4, #16]
 800a556:	6103      	streq	r3, [r0, #16]
 800a558:	6961      	ldreq	r1, [r4, #20]
 800a55a:	6141      	streq	r1, [r0, #20]
 800a55c:	bf19      	ittee	ne
 800a55e:	f104 0210 	addne.w	r2, r4, #16
 800a562:	f100 0310 	addne.w	r3, r0, #16
 800a566:	f104 0218 	addeq.w	r2, r4, #24
 800a56a:	f100 0318 	addeq.w	r3, r0, #24
 800a56e:	e7e0      	b.n	800a532 <_realloc_r+0x2ea>
 800a570:	4603      	mov	r3, r0
 800a572:	4622      	mov	r2, r4
 800a574:	e7dd      	b.n	800a532 <_realloc_r+0x2ea>
 800a576:	4621      	mov	r1, r4
 800a578:	f7ff f9c8 	bl	800990c <memmove>
 800a57c:	e7df      	b.n	800a53e <_realloc_r+0x2f6>
 800a57e:	4637      	mov	r7, r6
 800a580:	e6c3      	b.n	800a30a <_realloc_r+0xc2>
 800a582:	431f      	orrs	r7, r3
 800a584:	606f      	str	r7, [r5, #4]
 800a586:	6853      	ldr	r3, [r2, #4]
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	6053      	str	r3, [r2, #4]
 800a58e:	e758      	b.n	800a442 <_realloc_r+0x1fa>

0800a590 <lflush>:
 800a590:	8983      	ldrh	r3, [r0, #12]
 800a592:	f003 0309 	and.w	r3, r3, #9
 800a596:	2b09      	cmp	r3, #9
 800a598:	d101      	bne.n	800a59e <lflush+0xe>
 800a59a:	f7fe bb13 	b.w	8008bc4 <fflush>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <__srefill_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	b118      	cbz	r0, 800a5b4 <__srefill_r+0x10>
 800a5ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5ae:	b90b      	cbnz	r3, 800a5b4 <__srefill_r+0x10>
 800a5b0:	f7fe fb60 	bl	8008c74 <__sinit>
 800a5b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b8:	049f      	lsls	r7, r3, #18
 800a5ba:	d406      	bmi.n	800a5ca <__srefill_r+0x26>
 800a5bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5c8:	6663      	str	r3, [r4, #100]	; 0x64
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	069e      	lsls	r6, r3, #26
 800a5d6:	d502      	bpl.n	800a5de <__srefill_r+0x3a>
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5dc:	e05c      	b.n	800a698 <__srefill_r+0xf4>
 800a5de:	0758      	lsls	r0, r3, #29
 800a5e0:	d448      	bmi.n	800a674 <__srefill_r+0xd0>
 800a5e2:	06d9      	lsls	r1, r3, #27
 800a5e4:	d405      	bmi.n	800a5f2 <__srefill_r+0x4e>
 800a5e6:	2309      	movs	r3, #9
 800a5e8:	602b      	str	r3, [r5, #0]
 800a5ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5ee:	81a3      	strh	r3, [r4, #12]
 800a5f0:	e7f2      	b.n	800a5d8 <__srefill_r+0x34>
 800a5f2:	071a      	lsls	r2, r3, #28
 800a5f4:	d50b      	bpl.n	800a60e <__srefill_r+0x6a>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f7fe fabd 	bl	8008b78 <_fflush_r>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1ea      	bne.n	800a5d8 <__srefill_r+0x34>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	60a0      	str	r0, [r4, #8]
 800a606:	f023 0308 	bic.w	r3, r3, #8
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	61a0      	str	r0, [r4, #24]
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f043 0304 	orr.w	r3, r3, #4
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	b91b      	cbnz	r3, 800a622 <__srefill_r+0x7e>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	f7fe feaf 	bl	8009380 <__smakebuf_r>
 800a622:	89a6      	ldrh	r6, [r4, #12]
 800a624:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a628:	07b3      	lsls	r3, r6, #30
 800a62a:	d00f      	beq.n	800a64c <__srefill_r+0xa8>
 800a62c:	2301      	movs	r3, #1
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <__srefill_r+0xfc>)
 800a632:	491c      	ldr	r1, [pc, #112]	; (800a6a4 <__srefill_r+0x100>)
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	f006 0609 	and.w	r6, r6, #9
 800a63a:	f7fe fe1d 	bl	8009278 <_fwalk>
 800a63e:	2e09      	cmp	r6, #9
 800a640:	81a7      	strh	r7, [r4, #12]
 800a642:	d103      	bne.n	800a64c <__srefill_r+0xa8>
 800a644:	4621      	mov	r1, r4
 800a646:	4628      	mov	r0, r5
 800a648:	f7fe fa08 	bl	8008a5c <__sflush_r>
 800a64c:	6922      	ldr	r2, [r4, #16]
 800a64e:	6a26      	ldr	r6, [r4, #32]
 800a650:	6963      	ldr	r3, [r4, #20]
 800a652:	69e1      	ldr	r1, [r4, #28]
 800a654:	6022      	str	r2, [r4, #0]
 800a656:	4628      	mov	r0, r5
 800a658:	47b0      	blx	r6
 800a65a:	2800      	cmp	r0, #0
 800a65c:	6060      	str	r0, [r4, #4]
 800a65e:	dc1c      	bgt.n	800a69a <__srefill_r+0xf6>
 800a660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a664:	bf17      	itett	ne
 800a666:	2200      	movne	r2, #0
 800a668:	f043 0320 	orreq.w	r3, r3, #32
 800a66c:	6062      	strne	r2, [r4, #4]
 800a66e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a672:	e7bc      	b.n	800a5ee <__srefill_r+0x4a>
 800a674:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a676:	2900      	cmp	r1, #0
 800a678:	d0cd      	beq.n	800a616 <__srefill_r+0x72>
 800a67a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a67e:	4299      	cmp	r1, r3
 800a680:	d002      	beq.n	800a688 <__srefill_r+0xe4>
 800a682:	4628      	mov	r0, r5
 800a684:	f7fe fbee 	bl	8008e64 <_free_r>
 800a688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a68a:	6063      	str	r3, [r4, #4]
 800a68c:	2000      	movs	r0, #0
 800a68e:	6320      	str	r0, [r4, #48]	; 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0c0      	beq.n	800a616 <__srefill_r+0x72>
 800a694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a69a:	2000      	movs	r0, #0
 800a69c:	e7fc      	b.n	800a698 <__srefill_r+0xf4>
 800a69e:	bf00      	nop
 800a6a0:	0800f0ec 	.word	0x0800f0ec
 800a6a4:	0800a591 	.word	0x0800a591

0800a6a8 <frexp>:
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	ee10 1a90 	vmov	r1, s1
 800a6ae:	6002      	str	r2, [r0, #0]
 800a6b0:	4a17      	ldr	r2, [pc, #92]	; (800a710 <frexp+0x68>)
 800a6b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	dc23      	bgt.n	800a702 <frexp+0x5a>
 800a6ba:	ee10 2a10 	vmov	r2, s0
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	d01f      	beq.n	800a702 <frexp+0x5a>
 800a6c2:	4a14      	ldr	r2, [pc, #80]	; (800a714 <frexp+0x6c>)
 800a6c4:	400a      	ands	r2, r1
 800a6c6:	b952      	cbnz	r2, 800a6de <frexp+0x36>
 800a6c8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a708 <frexp+0x60>
 800a6cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a6d0:	ee10 1a90 	vmov	r1, s1
 800a6d4:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800a6d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6dc:	6002      	str	r2, [r0, #0]
 800a6de:	6802      	ldr	r2, [r0, #0]
 800a6e0:	151b      	asrs	r3, r3, #20
 800a6e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a6e6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800a6f0:	6003      	str	r3, [r0, #0]
 800a6f2:	ec53 2b10 	vmov	r2, r3, d0
 800a6f6:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800a6fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6fe:	ec43 2b10 	vmov	d0, r2, r3
 800a702:	4770      	bx	lr
 800a704:	f3af 8000 	nop.w
 800a708:	00000000 	.word	0x00000000
 800a70c:	43500000 	.word	0x43500000
 800a710:	7fefffff 	.word	0x7fefffff
 800a714:	7ff00000 	.word	0x7ff00000

0800a718 <_sbrk_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d06      	ldr	r5, [pc, #24]	; (800a734 <_sbrk_r+0x1c>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	f7f7 fa66 	bl	8001bf4 <_sbrk>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_sbrk_r+0x1a>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_sbrk_r+0x1a>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20000af0 	.word	0x20000af0

0800a738 <__sccl>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	780b      	ldrb	r3, [r1, #0]
 800a73c:	4604      	mov	r4, r0
 800a73e:	2b5e      	cmp	r3, #94	; 0x5e
 800a740:	bf0b      	itete	eq
 800a742:	784b      	ldrbeq	r3, [r1, #1]
 800a744:	1c48      	addne	r0, r1, #1
 800a746:	1c88      	addeq	r0, r1, #2
 800a748:	2200      	movne	r2, #0
 800a74a:	bf08      	it	eq
 800a74c:	2201      	moveq	r2, #1
 800a74e:	1e61      	subs	r1, r4, #1
 800a750:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a754:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a758:	42a9      	cmp	r1, r5
 800a75a:	d1fb      	bne.n	800a754 <__sccl+0x1c>
 800a75c:	b90b      	cbnz	r3, 800a762 <__sccl+0x2a>
 800a75e:	3801      	subs	r0, #1
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	f082 0201 	eor.w	r2, r2, #1
 800a766:	54e2      	strb	r2, [r4, r3]
 800a768:	4605      	mov	r5, r0
 800a76a:	4628      	mov	r0, r5
 800a76c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a770:	292d      	cmp	r1, #45	; 0x2d
 800a772:	d006      	beq.n	800a782 <__sccl+0x4a>
 800a774:	295d      	cmp	r1, #93	; 0x5d
 800a776:	d0f3      	beq.n	800a760 <__sccl+0x28>
 800a778:	b909      	cbnz	r1, 800a77e <__sccl+0x46>
 800a77a:	4628      	mov	r0, r5
 800a77c:	e7f0      	b.n	800a760 <__sccl+0x28>
 800a77e:	460b      	mov	r3, r1
 800a780:	e7f1      	b.n	800a766 <__sccl+0x2e>
 800a782:	786e      	ldrb	r6, [r5, #1]
 800a784:	2e5d      	cmp	r6, #93	; 0x5d
 800a786:	d0fa      	beq.n	800a77e <__sccl+0x46>
 800a788:	42b3      	cmp	r3, r6
 800a78a:	dcf8      	bgt.n	800a77e <__sccl+0x46>
 800a78c:	3502      	adds	r5, #2
 800a78e:	4619      	mov	r1, r3
 800a790:	3101      	adds	r1, #1
 800a792:	428e      	cmp	r6, r1
 800a794:	5462      	strb	r2, [r4, r1]
 800a796:	dcfb      	bgt.n	800a790 <__sccl+0x58>
 800a798:	1af1      	subs	r1, r6, r3
 800a79a:	3901      	subs	r1, #1
 800a79c:	1c58      	adds	r0, r3, #1
 800a79e:	42b3      	cmp	r3, r6
 800a7a0:	bfa8      	it	ge
 800a7a2:	2100      	movge	r1, #0
 800a7a4:	1843      	adds	r3, r0, r1
 800a7a6:	e7e0      	b.n	800a76a <__sccl+0x32>

0800a7a8 <nanf>:
 800a7a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7b0 <nanf+0x8>
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	7fc00000 	.word	0x7fc00000

0800a7b4 <sprintf>:
 800a7b4:	b40e      	push	{r1, r2, r3}
 800a7b6:	b500      	push	{lr}
 800a7b8:	b09c      	sub	sp, #112	; 0x70
 800a7ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a7bc:	9002      	str	r0, [sp, #8]
 800a7be:	9006      	str	r0, [sp, #24]
 800a7c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7c4:	4809      	ldr	r0, [pc, #36]	; (800a7ec <sprintf+0x38>)
 800a7c6:	9107      	str	r1, [sp, #28]
 800a7c8:	9104      	str	r1, [sp, #16]
 800a7ca:	4909      	ldr	r1, [pc, #36]	; (800a7f0 <sprintf+0x3c>)
 800a7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d0:	9105      	str	r1, [sp, #20]
 800a7d2:	6800      	ldr	r0, [r0, #0]
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	a902      	add	r1, sp, #8
 800a7d8:	f000 ffe2 	bl	800b7a0 <_svfprintf_r>
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	b01c      	add	sp, #112	; 0x70
 800a7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e8:	b003      	add	sp, #12
 800a7ea:	4770      	bx	lr
 800a7ec:	2000000c 	.word	0x2000000c
 800a7f0:	ffff0208 	.word	0xffff0208

0800a7f4 <__sread>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fc:	f003 fcbc 	bl	800e178 <_read_r>
 800a800:	2800      	cmp	r0, #0
 800a802:	bfab      	itete	ge
 800a804:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a806:	89a3      	ldrhlt	r3, [r4, #12]
 800a808:	181b      	addge	r3, r3, r0
 800a80a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a80e:	bfac      	ite	ge
 800a810:	6523      	strge	r3, [r4, #80]	; 0x50
 800a812:	81a3      	strhlt	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__swrite>:
 800a816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81a:	461f      	mov	r7, r3
 800a81c:	898b      	ldrh	r3, [r1, #12]
 800a81e:	05db      	lsls	r3, r3, #23
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	4616      	mov	r6, r2
 800a826:	d505      	bpl.n	800a834 <__swrite+0x1e>
 800a828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82c:	2302      	movs	r3, #2
 800a82e:	2200      	movs	r2, #0
 800a830:	f003 fc90 	bl	800e154 <_lseek_r>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	f002 bf63 	b.w	800d714 <_write_r>

0800a84e <__sseek>:
 800a84e:	b510      	push	{r4, lr}
 800a850:	460c      	mov	r4, r1
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f003 fc7d 	bl	800e154 <_lseek_r>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	bf15      	itete	ne
 800a860:	6520      	strne	r0, [r4, #80]	; 0x50
 800a862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a86a:	81a3      	strheq	r3, [r4, #12]
 800a86c:	bf18      	it	ne
 800a86e:	81a3      	strhne	r3, [r4, #12]
 800a870:	bd10      	pop	{r4, pc}

0800a872 <__sclose>:
 800a872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a876:	f002 bff5 	b.w	800d864 <_close_r>

0800a87a <strncpy>:
 800a87a:	b510      	push	{r4, lr}
 800a87c:	3901      	subs	r1, #1
 800a87e:	4603      	mov	r3, r0
 800a880:	b132      	cbz	r2, 800a890 <strncpy+0x16>
 800a882:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a886:	f803 4b01 	strb.w	r4, [r3], #1
 800a88a:	3a01      	subs	r2, #1
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	d1f7      	bne.n	800a880 <strncpy+0x6>
 800a890:	441a      	add	r2, r3
 800a892:	2100      	movs	r1, #0
 800a894:	4293      	cmp	r3, r2
 800a896:	d100      	bne.n	800a89a <strncpy+0x20>
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	f803 1b01 	strb.w	r1, [r3], #1
 800a89e:	e7f9      	b.n	800a894 <strncpy+0x1a>

0800a8a0 <sulp>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4616      	mov	r6, r2
 800a8a8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ac:	f7ff fb78 	bl	8009fa0 <__ulp>
 800a8b0:	b17e      	cbz	r6, 800a8d2 <sulp+0x32>
 800a8b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dd09      	ble.n	800a8d2 <sulp+0x32>
 800a8be:	051b      	lsls	r3, r3, #20
 800a8c0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a8ca:	ec41 0b17 	vmov	d7, r0, r1
 800a8ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	0000      	movs	r0, r0
	...

0800a8d8 <_strtod_l>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	ed2d 8b0e 	vpush	{d8-d14}
 800a8e0:	b097      	sub	sp, #92	; 0x5c
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9312      	str	r3, [sp, #72]	; 0x48
 800a8e8:	4ba1      	ldr	r3, [pc, #644]	; (800ab70 <_strtod_l+0x298>)
 800a8ea:	920d      	str	r2, [sp, #52]	; 0x34
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	f7f5 fca3 	bl	8000240 <strlen>
 800a8fa:	f04f 0800 	mov.w	r8, #0
 800a8fe:	4605      	mov	r5, r0
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a90a:	7813      	ldrb	r3, [r2, #0]
 800a90c:	2b2b      	cmp	r3, #43	; 0x2b
 800a90e:	d04d      	beq.n	800a9ac <_strtod_l+0xd4>
 800a910:	d83a      	bhi.n	800a988 <_strtod_l+0xb0>
 800a912:	2b0d      	cmp	r3, #13
 800a914:	d833      	bhi.n	800a97e <_strtod_l+0xa6>
 800a916:	2b08      	cmp	r3, #8
 800a918:	d833      	bhi.n	800a982 <_strtod_l+0xaa>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d03d      	beq.n	800a99a <_strtod_l+0xc2>
 800a91e:	2300      	movs	r3, #0
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a924:	7833      	ldrb	r3, [r6, #0]
 800a926:	2b30      	cmp	r3, #48	; 0x30
 800a928:	f040 80b0 	bne.w	800aa8c <_strtod_l+0x1b4>
 800a92c:	7873      	ldrb	r3, [r6, #1]
 800a92e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a932:	2b58      	cmp	r3, #88	; 0x58
 800a934:	d167      	bne.n	800aa06 <_strtod_l+0x12e>
 800a936:	9b08      	ldr	r3, [sp, #32]
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	ab12      	add	r3, sp, #72	; 0x48
 800a93c:	9702      	str	r7, [sp, #8]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	4a8c      	ldr	r2, [pc, #560]	; (800ab74 <_strtod_l+0x29c>)
 800a942:	ab13      	add	r3, sp, #76	; 0x4c
 800a944:	a911      	add	r1, sp, #68	; 0x44
 800a946:	4620      	mov	r0, r4
 800a948:	f003 f8ec 	bl	800db24 <__gethex>
 800a94c:	f010 0507 	ands.w	r5, r0, #7
 800a950:	4607      	mov	r7, r0
 800a952:	d005      	beq.n	800a960 <_strtod_l+0x88>
 800a954:	2d06      	cmp	r5, #6
 800a956:	d12b      	bne.n	800a9b0 <_strtod_l+0xd8>
 800a958:	3601      	adds	r6, #1
 800a95a:	2300      	movs	r3, #0
 800a95c:	9611      	str	r6, [sp, #68]	; 0x44
 800a95e:	9308      	str	r3, [sp, #32]
 800a960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a962:	2b00      	cmp	r3, #0
 800a964:	f040 854e 	bne.w	800b404 <_strtod_l+0xb2c>
 800a968:	9b08      	ldr	r3, [sp, #32]
 800a96a:	b1e3      	cbz	r3, 800a9a6 <_strtod_l+0xce>
 800a96c:	ec49 8b17 	vmov	d7, r8, r9
 800a970:	eeb1 0b47 	vneg.f64	d0, d7
 800a974:	b017      	add	sp, #92	; 0x5c
 800a976:	ecbd 8b0e 	vpop	{d8-d14}
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	2b20      	cmp	r3, #32
 800a980:	d1cd      	bne.n	800a91e <_strtod_l+0x46>
 800a982:	3201      	adds	r2, #1
 800a984:	9211      	str	r2, [sp, #68]	; 0x44
 800a986:	e7bf      	b.n	800a908 <_strtod_l+0x30>
 800a988:	2b2d      	cmp	r3, #45	; 0x2d
 800a98a:	d1c8      	bne.n	800a91e <_strtod_l+0x46>
 800a98c:	2301      	movs	r3, #1
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	1c53      	adds	r3, r2, #1
 800a992:	9311      	str	r3, [sp, #68]	; 0x44
 800a994:	7853      	ldrb	r3, [r2, #1]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1c3      	bne.n	800a922 <_strtod_l+0x4a>
 800a99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a99c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f040 852d 	bne.w	800b400 <_strtod_l+0xb28>
 800a9a6:	ec49 8b10 	vmov	d0, r8, r9
 800a9aa:	e7e3      	b.n	800a974 <_strtod_l+0x9c>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e7ee      	b.n	800a98e <_strtod_l+0xb6>
 800a9b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9b2:	b13a      	cbz	r2, 800a9c4 <_strtod_l+0xec>
 800a9b4:	2135      	movs	r1, #53	; 0x35
 800a9b6:	a814      	add	r0, sp, #80	; 0x50
 800a9b8:	f7ff fbfa 	bl	800a1b0 <__copybits>
 800a9bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7fe ffef 	bl	80099a2 <_Bfree>
 800a9c4:	3d01      	subs	r5, #1
 800a9c6:	2d04      	cmp	r5, #4
 800a9c8:	d806      	bhi.n	800a9d8 <_strtod_l+0x100>
 800a9ca:	e8df f005 	tbb	[pc, r5]
 800a9ce:	030a      	.short	0x030a
 800a9d0:	1714      	.short	0x1714
 800a9d2:	0a          	.byte	0x0a
 800a9d3:	00          	.byte	0x00
 800a9d4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a9d8:	073f      	lsls	r7, r7, #28
 800a9da:	d5c1      	bpl.n	800a960 <_strtod_l+0x88>
 800a9dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a9e0:	e7be      	b.n	800a960 <_strtod_l+0x88>
 800a9e2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a9e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a9e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a9f4:	e7f0      	b.n	800a9d8 <_strtod_l+0x100>
 800a9f6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800ab78 <_strtod_l+0x2a0>
 800a9fa:	e7ed      	b.n	800a9d8 <_strtod_l+0x100>
 800a9fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aa00:	f04f 38ff 	mov.w	r8, #4294967295
 800aa04:	e7e8      	b.n	800a9d8 <_strtod_l+0x100>
 800aa06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	9211      	str	r2, [sp, #68]	; 0x44
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b30      	cmp	r3, #48	; 0x30
 800aa10:	d0f9      	beq.n	800aa06 <_strtod_l+0x12e>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0a4      	beq.n	800a960 <_strtod_l+0x88>
 800aa16:	2301      	movs	r3, #1
 800aa18:	f04f 0a00 	mov.w	sl, #0
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa20:	930a      	str	r3, [sp, #40]	; 0x28
 800aa22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aa26:	f8cd a018 	str.w	sl, [sp, #24]
 800aa2a:	220a      	movs	r2, #10
 800aa2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800aa2e:	7807      	ldrb	r7, [r0, #0]
 800aa30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800aa34:	b2d9      	uxtb	r1, r3
 800aa36:	2909      	cmp	r1, #9
 800aa38:	d92a      	bls.n	800aa90 <_strtod_l+0x1b8>
 800aa3a:	9907      	ldr	r1, [sp, #28]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	f003 fbb7 	bl	800e1b0 <strncmp>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d033      	beq.n	800aaae <_strtod_l+0x1d6>
 800aa46:	2000      	movs	r0, #0
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	463a      	mov	r2, r7
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	4607      	mov	r7, r0
 800aa50:	2a65      	cmp	r2, #101	; 0x65
 800aa52:	d001      	beq.n	800aa58 <_strtod_l+0x180>
 800aa54:	2a45      	cmp	r2, #69	; 0x45
 800aa56:	d117      	bne.n	800aa88 <_strtod_l+0x1b0>
 800aa58:	b91b      	cbnz	r3, 800aa62 <_strtod_l+0x18a>
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	4303      	orrs	r3, r0
 800aa5e:	d09c      	beq.n	800a99a <_strtod_l+0xc2>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800aa66:	f10b 0201 	add.w	r2, fp, #1
 800aa6a:	9211      	str	r2, [sp, #68]	; 0x44
 800aa6c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800aa70:	2a2b      	cmp	r2, #43	; 0x2b
 800aa72:	d071      	beq.n	800ab58 <_strtod_l+0x280>
 800aa74:	2a2d      	cmp	r2, #45	; 0x2d
 800aa76:	d077      	beq.n	800ab68 <_strtod_l+0x290>
 800aa78:	f04f 0e00 	mov.w	lr, #0
 800aa7c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800aa80:	2d09      	cmp	r5, #9
 800aa82:	d97f      	bls.n	800ab84 <_strtod_l+0x2ac>
 800aa84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800aa88:	2500      	movs	r5, #0
 800aa8a:	e09b      	b.n	800abc4 <_strtod_l+0x2ec>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e7c3      	b.n	800aa18 <_strtod_l+0x140>
 800aa90:	9906      	ldr	r1, [sp, #24]
 800aa92:	2908      	cmp	r1, #8
 800aa94:	bfdd      	ittte	le
 800aa96:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aa98:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800aa9e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	9306      	str	r3, [sp, #24]
 800aaaa:	9011      	str	r0, [sp, #68]	; 0x44
 800aaac:	e7be      	b.n	800aa2c <_strtod_l+0x154>
 800aaae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aab0:	195a      	adds	r2, r3, r5
 800aab2:	9211      	str	r2, [sp, #68]	; 0x44
 800aab4:	5d5a      	ldrb	r2, [r3, r5]
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	b3a3      	cbz	r3, 800ab24 <_strtod_l+0x24c>
 800aaba:	4607      	mov	r7, r0
 800aabc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aac0:	2909      	cmp	r1, #9
 800aac2:	d912      	bls.n	800aaea <_strtod_l+0x212>
 800aac4:	2101      	movs	r1, #1
 800aac6:	e7c3      	b.n	800aa50 <_strtod_l+0x178>
 800aac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	9211      	str	r2, [sp, #68]	; 0x44
 800aace:	785a      	ldrb	r2, [r3, #1]
 800aad0:	3001      	adds	r0, #1
 800aad2:	2a30      	cmp	r2, #48	; 0x30
 800aad4:	d0f8      	beq.n	800aac8 <_strtod_l+0x1f0>
 800aad6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aada:	2b08      	cmp	r3, #8
 800aadc:	f200 8497 	bhi.w	800b40e <_strtod_l+0xb36>
 800aae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aae2:	930a      	str	r3, [sp, #40]	; 0x28
 800aae4:	4607      	mov	r7, r0
 800aae6:	2000      	movs	r0, #0
 800aae8:	4603      	mov	r3, r0
 800aaea:	3a30      	subs	r2, #48	; 0x30
 800aaec:	f100 0101 	add.w	r1, r0, #1
 800aaf0:	d012      	beq.n	800ab18 <_strtod_l+0x240>
 800aaf2:	440f      	add	r7, r1
 800aaf4:	eb00 0c03 	add.w	ip, r0, r3
 800aaf8:	4619      	mov	r1, r3
 800aafa:	250a      	movs	r5, #10
 800aafc:	4561      	cmp	r1, ip
 800aafe:	d113      	bne.n	800ab28 <_strtod_l+0x250>
 800ab00:	1819      	adds	r1, r3, r0
 800ab02:	2908      	cmp	r1, #8
 800ab04:	f103 0301 	add.w	r3, r3, #1
 800ab08:	4403      	add	r3, r0
 800ab0a:	dc1c      	bgt.n	800ab46 <_strtod_l+0x26e>
 800ab0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab0e:	210a      	movs	r1, #10
 800ab10:	fb01 2200 	mla	r2, r1, r0, r2
 800ab14:	9209      	str	r2, [sp, #36]	; 0x24
 800ab16:	2100      	movs	r1, #0
 800ab18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab1a:	1c50      	adds	r0, r2, #1
 800ab1c:	9011      	str	r0, [sp, #68]	; 0x44
 800ab1e:	7852      	ldrb	r2, [r2, #1]
 800ab20:	4608      	mov	r0, r1
 800ab22:	e7cb      	b.n	800aabc <_strtod_l+0x1e4>
 800ab24:	9806      	ldr	r0, [sp, #24]
 800ab26:	e7d4      	b.n	800aad2 <_strtod_l+0x1fa>
 800ab28:	2908      	cmp	r1, #8
 800ab2a:	dc04      	bgt.n	800ab36 <_strtod_l+0x25e>
 800ab2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab2e:	436e      	muls	r6, r5
 800ab30:	9609      	str	r6, [sp, #36]	; 0x24
 800ab32:	3101      	adds	r1, #1
 800ab34:	e7e2      	b.n	800aafc <_strtod_l+0x224>
 800ab36:	f101 0e01 	add.w	lr, r1, #1
 800ab3a:	f1be 0f10 	cmp.w	lr, #16
 800ab3e:	bfd8      	it	le
 800ab40:	fb05 fa0a 	mulle.w	sl, r5, sl
 800ab44:	e7f5      	b.n	800ab32 <_strtod_l+0x25a>
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	bfdc      	itt	le
 800ab4a:	210a      	movle	r1, #10
 800ab4c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800ab50:	e7e1      	b.n	800ab16 <_strtod_l+0x23e>
 800ab52:	2700      	movs	r7, #0
 800ab54:	2101      	movs	r1, #1
 800ab56:	e780      	b.n	800aa5a <_strtod_l+0x182>
 800ab58:	f04f 0e00 	mov.w	lr, #0
 800ab5c:	f10b 0202 	add.w	r2, fp, #2
 800ab60:	9211      	str	r2, [sp, #68]	; 0x44
 800ab62:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800ab66:	e789      	b.n	800aa7c <_strtod_l+0x1a4>
 800ab68:	f04f 0e01 	mov.w	lr, #1
 800ab6c:	e7f6      	b.n	800ab5c <_strtod_l+0x284>
 800ab6e:	bf00      	nop
 800ab70:	0800f5a0 	.word	0x0800f5a0
 800ab74:	0800f46c 	.word	0x0800f46c
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab7e:	1c55      	adds	r5, r2, #1
 800ab80:	9511      	str	r5, [sp, #68]	; 0x44
 800ab82:	7852      	ldrb	r2, [r2, #1]
 800ab84:	2a30      	cmp	r2, #48	; 0x30
 800ab86:	d0f9      	beq.n	800ab7c <_strtod_l+0x2a4>
 800ab88:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ab8c:	2d08      	cmp	r5, #8
 800ab8e:	f63f af7b 	bhi.w	800aa88 <_strtod_l+0x1b0>
 800ab92:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ab96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab98:	9207      	str	r2, [sp, #28]
 800ab9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab9c:	1c55      	adds	r5, r2, #1
 800ab9e:	9511      	str	r5, [sp, #68]	; 0x44
 800aba0:	7852      	ldrb	r2, [r2, #1]
 800aba2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aba6:	2e09      	cmp	r6, #9
 800aba8:	d937      	bls.n	800ac1a <_strtod_l+0x342>
 800abaa:	9e07      	ldr	r6, [sp, #28]
 800abac:	1bad      	subs	r5, r5, r6
 800abae:	2d08      	cmp	r5, #8
 800abb0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800abb4:	dc02      	bgt.n	800abbc <_strtod_l+0x2e4>
 800abb6:	4565      	cmp	r5, ip
 800abb8:	bfa8      	it	ge
 800abba:	4665      	movge	r5, ip
 800abbc:	f1be 0f00 	cmp.w	lr, #0
 800abc0:	d000      	beq.n	800abc4 <_strtod_l+0x2ec>
 800abc2:	426d      	negs	r5, r5
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d14d      	bne.n	800ac64 <_strtod_l+0x38c>
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	4303      	orrs	r3, r0
 800abcc:	f47f aec8 	bne.w	800a960 <_strtod_l+0x88>
 800abd0:	2900      	cmp	r1, #0
 800abd2:	f47f aee2 	bne.w	800a99a <_strtod_l+0xc2>
 800abd6:	2a69      	cmp	r2, #105	; 0x69
 800abd8:	d027      	beq.n	800ac2a <_strtod_l+0x352>
 800abda:	dc24      	bgt.n	800ac26 <_strtod_l+0x34e>
 800abdc:	2a49      	cmp	r2, #73	; 0x49
 800abde:	d024      	beq.n	800ac2a <_strtod_l+0x352>
 800abe0:	2a4e      	cmp	r2, #78	; 0x4e
 800abe2:	f47f aeda 	bne.w	800a99a <_strtod_l+0xc2>
 800abe6:	4996      	ldr	r1, [pc, #600]	; (800ae40 <_strtod_l+0x568>)
 800abe8:	a811      	add	r0, sp, #68	; 0x44
 800abea:	f003 f9f3 	bl	800dfd4 <__match>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f aed3 	beq.w	800a99a <_strtod_l+0xc2>
 800abf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b28      	cmp	r3, #40	; 0x28
 800abfa:	d12d      	bne.n	800ac58 <_strtod_l+0x380>
 800abfc:	4991      	ldr	r1, [pc, #580]	; (800ae44 <_strtod_l+0x56c>)
 800abfe:	aa14      	add	r2, sp, #80	; 0x50
 800ac00:	a811      	add	r0, sp, #68	; 0x44
 800ac02:	f003 f9fb 	bl	800dffc <__hexnan>
 800ac06:	2805      	cmp	r0, #5
 800ac08:	d126      	bne.n	800ac58 <_strtod_l+0x380>
 800ac0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac0c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ac10:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ac14:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ac18:	e6a2      	b.n	800a960 <_strtod_l+0x88>
 800ac1a:	250a      	movs	r5, #10
 800ac1c:	fb05 250c 	mla	r5, r5, ip, r2
 800ac20:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800ac24:	e7b9      	b.n	800ab9a <_strtod_l+0x2c2>
 800ac26:	2a6e      	cmp	r2, #110	; 0x6e
 800ac28:	e7db      	b.n	800abe2 <_strtod_l+0x30a>
 800ac2a:	4987      	ldr	r1, [pc, #540]	; (800ae48 <_strtod_l+0x570>)
 800ac2c:	a811      	add	r0, sp, #68	; 0x44
 800ac2e:	f003 f9d1 	bl	800dfd4 <__match>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f43f aeb1 	beq.w	800a99a <_strtod_l+0xc2>
 800ac38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac3a:	4984      	ldr	r1, [pc, #528]	; (800ae4c <_strtod_l+0x574>)
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	a811      	add	r0, sp, #68	; 0x44
 800ac40:	9311      	str	r3, [sp, #68]	; 0x44
 800ac42:	f003 f9c7 	bl	800dfd4 <__match>
 800ac46:	b910      	cbnz	r0, 800ac4e <_strtod_l+0x376>
 800ac48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	9311      	str	r3, [sp, #68]	; 0x44
 800ac4e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800ae60 <_strtod_l+0x588>
 800ac52:	f04f 0800 	mov.w	r8, #0
 800ac56:	e683      	b.n	800a960 <_strtod_l+0x88>
 800ac58:	487d      	ldr	r0, [pc, #500]	; (800ae50 <_strtod_l+0x578>)
 800ac5a:	f003 faa1 	bl	800e1a0 <nan>
 800ac5e:	ec59 8b10 	vmov	r8, r9, d0
 800ac62:	e67d      	b.n	800a960 <_strtod_l+0x88>
 800ac64:	1bea      	subs	r2, r5, r7
 800ac66:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ac6a:	9207      	str	r2, [sp, #28]
 800ac6c:	9a06      	ldr	r2, [sp, #24]
 800ac6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	bf08      	it	eq
 800ac76:	461a      	moveq	r2, r3
 800ac78:	2b10      	cmp	r3, #16
 800ac7a:	9206      	str	r2, [sp, #24]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	bfa8      	it	ge
 800ac80:	2210      	movge	r2, #16
 800ac82:	2b09      	cmp	r3, #9
 800ac84:	ec59 8b17 	vmov	r8, r9, d7
 800ac88:	dd0c      	ble.n	800aca4 <_strtod_l+0x3cc>
 800ac8a:	4972      	ldr	r1, [pc, #456]	; (800ae54 <_strtod_l+0x57c>)
 800ac8c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ac90:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800ac94:	ee06 aa90 	vmov	s13, sl
 800ac98:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ac9c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aca0:	ec59 8b16 	vmov	r8, r9, d6
 800aca4:	2b0f      	cmp	r3, #15
 800aca6:	dc36      	bgt.n	800ad16 <_strtod_l+0x43e>
 800aca8:	9907      	ldr	r1, [sp, #28]
 800acaa:	2900      	cmp	r1, #0
 800acac:	f43f ae58 	beq.w	800a960 <_strtod_l+0x88>
 800acb0:	dd23      	ble.n	800acfa <_strtod_l+0x422>
 800acb2:	2916      	cmp	r1, #22
 800acb4:	dc0b      	bgt.n	800acce <_strtod_l+0x3f6>
 800acb6:	4b67      	ldr	r3, [pc, #412]	; (800ae54 <_strtod_l+0x57c>)
 800acb8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800acbc:	ed93 7b00 	vldr	d7, [r3]
 800acc0:	ec49 8b16 	vmov	d6, r8, r9
 800acc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acc8:	ec59 8b17 	vmov	r8, r9, d7
 800accc:	e648      	b.n	800a960 <_strtod_l+0x88>
 800acce:	9807      	ldr	r0, [sp, #28]
 800acd0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800acd4:	4281      	cmp	r1, r0
 800acd6:	db1e      	blt.n	800ad16 <_strtod_l+0x43e>
 800acd8:	4a5e      	ldr	r2, [pc, #376]	; (800ae54 <_strtod_l+0x57c>)
 800acda:	f1c3 030f 	rsb	r3, r3, #15
 800acde:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ace2:	ed91 7b00 	vldr	d7, [r1]
 800ace6:	ec49 8b16 	vmov	d6, r8, r9
 800acea:	1ac3      	subs	r3, r0, r3
 800acec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800acf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acf4:	ed92 6b00 	vldr	d6, [r2]
 800acf8:	e7e4      	b.n	800acc4 <_strtod_l+0x3ec>
 800acfa:	9907      	ldr	r1, [sp, #28]
 800acfc:	3116      	adds	r1, #22
 800acfe:	db0a      	blt.n	800ad16 <_strtod_l+0x43e>
 800ad00:	4b54      	ldr	r3, [pc, #336]	; (800ae54 <_strtod_l+0x57c>)
 800ad02:	1b7d      	subs	r5, r7, r5
 800ad04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad08:	ed95 7b00 	vldr	d7, [r5]
 800ad0c:	ec49 8b16 	vmov	d6, r8, r9
 800ad10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ad14:	e7d8      	b.n	800acc8 <_strtod_l+0x3f0>
 800ad16:	9907      	ldr	r1, [sp, #28]
 800ad18:	1a9a      	subs	r2, r3, r2
 800ad1a:	440a      	add	r2, r1
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	dd6f      	ble.n	800ae00 <_strtod_l+0x528>
 800ad20:	f012 000f 	ands.w	r0, r2, #15
 800ad24:	d00a      	beq.n	800ad3c <_strtod_l+0x464>
 800ad26:	494b      	ldr	r1, [pc, #300]	; (800ae54 <_strtod_l+0x57c>)
 800ad28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ad2c:	ed91 7b00 	vldr	d7, [r1]
 800ad30:	ec49 8b16 	vmov	d6, r8, r9
 800ad34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad38:	ec59 8b17 	vmov	r8, r9, d7
 800ad3c:	f032 020f 	bics.w	r2, r2, #15
 800ad40:	d04f      	beq.n	800ade2 <_strtod_l+0x50a>
 800ad42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ad46:	dd22      	ble.n	800ad8e <_strtod_l+0x4b6>
 800ad48:	2500      	movs	r5, #0
 800ad4a:	462e      	mov	r6, r5
 800ad4c:	9506      	str	r5, [sp, #24]
 800ad4e:	462f      	mov	r7, r5
 800ad50:	2322      	movs	r3, #34	; 0x22
 800ad52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ae60 <_strtod_l+0x588>
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	f04f 0800 	mov.w	r8, #0
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f43f adfe 	beq.w	800a960 <_strtod_l+0x88>
 800ad64:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7fe fe1b 	bl	80099a2 <_Bfree>
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7fe fe17 	bl	80099a2 <_Bfree>
 800ad74:	4631      	mov	r1, r6
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7fe fe13 	bl	80099a2 <_Bfree>
 800ad7c:	9906      	ldr	r1, [sp, #24]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7fe fe0f 	bl	80099a2 <_Bfree>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7fe fe0b 	bl	80099a2 <_Bfree>
 800ad8c:	e5e8      	b.n	800a960 <_strtod_l+0x88>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	ec49 8b17 	vmov	d7, r8, r9
 800ad94:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800ae58 <_strtod_l+0x580>
 800ad98:	1112      	asrs	r2, r2, #4
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	2a01      	cmp	r2, #1
 800ad9e:	dc23      	bgt.n	800ade8 <_strtod_l+0x510>
 800ada0:	b108      	cbz	r0, 800ada6 <_strtod_l+0x4ce>
 800ada2:	ec59 8b17 	vmov	r8, r9, d7
 800ada6:	4a2c      	ldr	r2, [pc, #176]	; (800ae58 <_strtod_l+0x580>)
 800ada8:	482c      	ldr	r0, [pc, #176]	; (800ae5c <_strtod_l+0x584>)
 800adaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800adae:	ed92 7b00 	vldr	d7, [r2]
 800adb2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800adb6:	ec49 8b16 	vmov	d6, r8, r9
 800adba:	4a29      	ldr	r2, [pc, #164]	; (800ae60 <_strtod_l+0x588>)
 800adbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adc0:	ee17 1a90 	vmov	r1, s15
 800adc4:	400a      	ands	r2, r1
 800adc6:	4282      	cmp	r2, r0
 800adc8:	ec59 8b17 	vmov	r8, r9, d7
 800adcc:	d8bc      	bhi.n	800ad48 <_strtod_l+0x470>
 800adce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800add2:	4282      	cmp	r2, r0
 800add4:	bf86      	itte	hi
 800add6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ae64 <_strtod_l+0x58c>
 800adda:	f04f 38ff 	movhi.w	r8, #4294967295
 800adde:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ade2:	2200      	movs	r2, #0
 800ade4:	9204      	str	r2, [sp, #16]
 800ade6:	e078      	b.n	800aeda <_strtod_l+0x602>
 800ade8:	07d6      	lsls	r6, r2, #31
 800adea:	d504      	bpl.n	800adf6 <_strtod_l+0x51e>
 800adec:	ed9c 6b00 	vldr	d6, [ip]
 800adf0:	2001      	movs	r0, #1
 800adf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adf6:	3101      	adds	r1, #1
 800adf8:	1052      	asrs	r2, r2, #1
 800adfa:	f10c 0c08 	add.w	ip, ip, #8
 800adfe:	e7cd      	b.n	800ad9c <_strtod_l+0x4c4>
 800ae00:	d0ef      	beq.n	800ade2 <_strtod_l+0x50a>
 800ae02:	4252      	negs	r2, r2
 800ae04:	f012 000f 	ands.w	r0, r2, #15
 800ae08:	d00a      	beq.n	800ae20 <_strtod_l+0x548>
 800ae0a:	4912      	ldr	r1, [pc, #72]	; (800ae54 <_strtod_l+0x57c>)
 800ae0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ae10:	ed91 7b00 	vldr	d7, [r1]
 800ae14:	ec49 8b16 	vmov	d6, r8, r9
 800ae18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae1c:	ec59 8b17 	vmov	r8, r9, d7
 800ae20:	1112      	asrs	r2, r2, #4
 800ae22:	d0de      	beq.n	800ade2 <_strtod_l+0x50a>
 800ae24:	2a1f      	cmp	r2, #31
 800ae26:	dd1f      	ble.n	800ae68 <_strtod_l+0x590>
 800ae28:	2500      	movs	r5, #0
 800ae2a:	462e      	mov	r6, r5
 800ae2c:	9506      	str	r5, [sp, #24]
 800ae2e:	462f      	mov	r7, r5
 800ae30:	2322      	movs	r3, #34	; 0x22
 800ae32:	f04f 0800 	mov.w	r8, #0
 800ae36:	f04f 0900 	mov.w	r9, #0
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	e78e      	b.n	800ad5c <_strtod_l+0x484>
 800ae3e:	bf00      	nop
 800ae40:	0800f122 	.word	0x0800f122
 800ae44:	0800f480 	.word	0x0800f480
 800ae48:	0800f11a 	.word	0x0800f11a
 800ae4c:	0800f298 	.word	0x0800f298
 800ae50:	0800f53b 	.word	0x0800f53b
 800ae54:	0800f398 	.word	0x0800f398
 800ae58:	0800f370 	.word	0x0800f370
 800ae5c:	7ca00000 	.word	0x7ca00000
 800ae60:	7ff00000 	.word	0x7ff00000
 800ae64:	7fefffff 	.word	0x7fefffff
 800ae68:	f012 0110 	ands.w	r1, r2, #16
 800ae6c:	bf18      	it	ne
 800ae6e:	216a      	movne	r1, #106	; 0x6a
 800ae70:	9104      	str	r1, [sp, #16]
 800ae72:	ec49 8b17 	vmov	d7, r8, r9
 800ae76:	49be      	ldr	r1, [pc, #760]	; (800b170 <_strtod_l+0x898>)
 800ae78:	2000      	movs	r0, #0
 800ae7a:	07d6      	lsls	r6, r2, #31
 800ae7c:	d504      	bpl.n	800ae88 <_strtod_l+0x5b0>
 800ae7e:	ed91 6b00 	vldr	d6, [r1]
 800ae82:	2001      	movs	r0, #1
 800ae84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae88:	1052      	asrs	r2, r2, #1
 800ae8a:	f101 0108 	add.w	r1, r1, #8
 800ae8e:	d1f4      	bne.n	800ae7a <_strtod_l+0x5a2>
 800ae90:	b108      	cbz	r0, 800ae96 <_strtod_l+0x5be>
 800ae92:	ec59 8b17 	vmov	r8, r9, d7
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	b1c2      	cbz	r2, 800aecc <_strtod_l+0x5f4>
 800ae9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ae9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	4648      	mov	r0, r9
 800aea6:	dd11      	ble.n	800aecc <_strtod_l+0x5f4>
 800aea8:	2a1f      	cmp	r2, #31
 800aeaa:	f340 812e 	ble.w	800b10a <_strtod_l+0x832>
 800aeae:	2a34      	cmp	r2, #52	; 0x34
 800aeb0:	bfde      	ittt	le
 800aeb2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800aeb6:	f04f 32ff 	movle.w	r2, #4294967295
 800aeba:	fa02 f101 	lslle.w	r1, r2, r1
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	bfcc      	ite	gt
 800aec4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aec8:	ea01 0900 	andle.w	r9, r1, r0
 800aecc:	ec49 8b17 	vmov	d7, r8, r9
 800aed0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed8:	d0a6      	beq.n	800ae28 <_strtod_l+0x550>
 800aeda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aedc:	9200      	str	r2, [sp, #0]
 800aede:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aee0:	9a06      	ldr	r2, [sp, #24]
 800aee2:	4620      	mov	r0, r4
 800aee4:	f7fe fdac 	bl	8009a40 <__s2b>
 800aee8:	9006      	str	r0, [sp, #24]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f af2c 	beq.w	800ad48 <_strtod_l+0x470>
 800aef0:	9b07      	ldr	r3, [sp, #28]
 800aef2:	1b7d      	subs	r5, r7, r5
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfb4      	ite	lt
 800aef8:	462b      	movlt	r3, r5
 800aefa:	2300      	movge	r3, #0
 800aefc:	9309      	str	r3, [sp, #36]	; 0x24
 800aefe:	9b07      	ldr	r3, [sp, #28]
 800af00:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b150 <_strtod_l+0x878>
 800af04:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b158 <_strtod_l+0x880>
 800af08:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b160 <_strtod_l+0x888>
 800af0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af10:	2500      	movs	r5, #0
 800af12:	930c      	str	r3, [sp, #48]	; 0x30
 800af14:	462e      	mov	r6, r5
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	4620      	mov	r0, r4
 800af1a:	6859      	ldr	r1, [r3, #4]
 800af1c:	f7fe fd1c 	bl	8009958 <_Balloc>
 800af20:	4607      	mov	r7, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	f43f af14 	beq.w	800ad50 <_strtod_l+0x478>
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	691a      	ldr	r2, [r3, #16]
 800af2c:	3202      	adds	r2, #2
 800af2e:	f103 010c 	add.w	r1, r3, #12
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	300c      	adds	r0, #12
 800af36:	f7fe fcdb 	bl	80098f0 <memcpy>
 800af3a:	ec49 8b10 	vmov	d0, r8, r9
 800af3e:	aa14      	add	r2, sp, #80	; 0x50
 800af40:	a913      	add	r1, sp, #76	; 0x4c
 800af42:	4620      	mov	r0, r4
 800af44:	f7ff f8a8 	bl	800a098 <__d2b>
 800af48:	ec49 8b18 	vmov	d8, r8, r9
 800af4c:	9012      	str	r0, [sp, #72]	; 0x48
 800af4e:	2800      	cmp	r0, #0
 800af50:	f43f aefe 	beq.w	800ad50 <_strtod_l+0x478>
 800af54:	2101      	movs	r1, #1
 800af56:	4620      	mov	r0, r4
 800af58:	f7fe fe0c 	bl	8009b74 <__i2b>
 800af5c:	4606      	mov	r6, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f aef6 	beq.w	800ad50 <_strtod_l+0x478>
 800af64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af66:	9914      	ldr	r1, [sp, #80]	; 0x50
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bfab      	itete	ge
 800af6c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800af6e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800af70:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800af74:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800af78:	bfac      	ite	ge
 800af7a:	eb03 0b02 	addge.w	fp, r3, r2
 800af7e:	eba2 0a03 	sublt.w	sl, r2, r3
 800af82:	9a04      	ldr	r2, [sp, #16]
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	440b      	add	r3, r1
 800af88:	4a7a      	ldr	r2, [pc, #488]	; (800b174 <_strtod_l+0x89c>)
 800af8a:	3b01      	subs	r3, #1
 800af8c:	4293      	cmp	r3, r2
 800af8e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800af92:	f280 80cd 	bge.w	800b130 <_strtod_l+0x858>
 800af96:	1ad2      	subs	r2, r2, r3
 800af98:	2a1f      	cmp	r2, #31
 800af9a:	eba1 0102 	sub.w	r1, r1, r2
 800af9e:	f04f 0001 	mov.w	r0, #1
 800afa2:	f300 80b9 	bgt.w	800b118 <_strtod_l+0x840>
 800afa6:	fa00 f302 	lsl.w	r3, r0, r2
 800afaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800afac:	2300      	movs	r3, #0
 800afae:	930a      	str	r3, [sp, #40]	; 0x28
 800afb0:	eb0b 0301 	add.w	r3, fp, r1
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	459b      	cmp	fp, r3
 800afb8:	448a      	add	sl, r1
 800afba:	4492      	add	sl, r2
 800afbc:	465a      	mov	r2, fp
 800afbe:	bfa8      	it	ge
 800afc0:	461a      	movge	r2, r3
 800afc2:	4552      	cmp	r2, sl
 800afc4:	bfa8      	it	ge
 800afc6:	4652      	movge	r2, sl
 800afc8:	2a00      	cmp	r2, #0
 800afca:	bfc2      	ittt	gt
 800afcc:	1a9b      	subgt	r3, r3, r2
 800afce:	ebaa 0a02 	subgt.w	sl, sl, r2
 800afd2:	ebab 0b02 	subgt.w	fp, fp, r2
 800afd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd8:	2a00      	cmp	r2, #0
 800afda:	dd18      	ble.n	800b00e <_strtod_l+0x736>
 800afdc:	4631      	mov	r1, r6
 800afde:	4620      	mov	r0, r4
 800afe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800afe2:	f7fe fe87 	bl	8009cf4 <__pow5mult>
 800afe6:	4606      	mov	r6, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f aeb1 	beq.w	800ad50 <_strtod_l+0x478>
 800afee:	4601      	mov	r1, r0
 800aff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7fe fdd4 	bl	8009ba0 <__multiply>
 800aff8:	900e      	str	r0, [sp, #56]	; 0x38
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f aea8 	beq.w	800ad50 <_strtod_l+0x478>
 800b000:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b002:	4620      	mov	r0, r4
 800b004:	f7fe fccd 	bl	80099a2 <_Bfree>
 800b008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b00c:	9212      	str	r2, [sp, #72]	; 0x48
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f300 8093 	bgt.w	800b13a <_strtod_l+0x862>
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	2b00      	cmp	r3, #0
 800b018:	dd08      	ble.n	800b02c <_strtod_l+0x754>
 800b01a:	4639      	mov	r1, r7
 800b01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01e:	4620      	mov	r0, r4
 800b020:	f7fe fe68 	bl	8009cf4 <__pow5mult>
 800b024:	4607      	mov	r7, r0
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f ae92 	beq.w	800ad50 <_strtod_l+0x478>
 800b02c:	f1ba 0f00 	cmp.w	sl, #0
 800b030:	dd08      	ble.n	800b044 <_strtod_l+0x76c>
 800b032:	4639      	mov	r1, r7
 800b034:	4652      	mov	r2, sl
 800b036:	4620      	mov	r0, r4
 800b038:	f7fe fe9c 	bl	8009d74 <__lshift>
 800b03c:	4607      	mov	r7, r0
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f ae86 	beq.w	800ad50 <_strtod_l+0x478>
 800b044:	f1bb 0f00 	cmp.w	fp, #0
 800b048:	dd08      	ble.n	800b05c <_strtod_l+0x784>
 800b04a:	4631      	mov	r1, r6
 800b04c:	465a      	mov	r2, fp
 800b04e:	4620      	mov	r0, r4
 800b050:	f7fe fe90 	bl	8009d74 <__lshift>
 800b054:	4606      	mov	r6, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f ae7a 	beq.w	800ad50 <_strtod_l+0x478>
 800b05c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b05e:	463a      	mov	r2, r7
 800b060:	4620      	mov	r0, r4
 800b062:	f7fe ff13 	bl	8009e8c <__mdiff>
 800b066:	4605      	mov	r5, r0
 800b068:	2800      	cmp	r0, #0
 800b06a:	f43f ae71 	beq.w	800ad50 <_strtod_l+0x478>
 800b06e:	2300      	movs	r3, #0
 800b070:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b074:	60c3      	str	r3, [r0, #12]
 800b076:	4631      	mov	r1, r6
 800b078:	f7fe feec 	bl	8009e54 <__mcmp>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	da7d      	bge.n	800b17c <_strtod_l+0x8a4>
 800b080:	ea5a 0308 	orrs.w	r3, sl, r8
 800b084:	f040 80a3 	bne.w	800b1ce <_strtod_l+0x8f6>
 800b088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 809e 	bne.w	800b1ce <_strtod_l+0x8f6>
 800b092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b096:	0d1b      	lsrs	r3, r3, #20
 800b098:	051b      	lsls	r3, r3, #20
 800b09a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b09e:	f240 8096 	bls.w	800b1ce <_strtod_l+0x8f6>
 800b0a2:	696b      	ldr	r3, [r5, #20]
 800b0a4:	b91b      	cbnz	r3, 800b0ae <_strtod_l+0x7d6>
 800b0a6:	692b      	ldr	r3, [r5, #16]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f340 8090 	ble.w	800b1ce <_strtod_l+0x8f6>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7fe fe5e 	bl	8009d74 <__lshift>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	f7fe feca 	bl	8009e54 <__mcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f340 8084 	ble.w	800b1ce <_strtod_l+0x8f6>
 800b0c6:	9904      	ldr	r1, [sp, #16]
 800b0c8:	4a2b      	ldr	r2, [pc, #172]	; (800b178 <_strtod_l+0x8a0>)
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	f000 809d 	beq.w	800b20c <_strtod_l+0x934>
 800b0d2:	ea02 0109 	and.w	r1, r2, r9
 800b0d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b0da:	f300 8097 	bgt.w	800b20c <_strtod_l+0x934>
 800b0de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b0e2:	f77f aea5 	ble.w	800ae30 <_strtod_l+0x558>
 800b0e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b168 <_strtod_l+0x890>
 800b0ea:	ec49 8b16 	vmov	d6, r8, r9
 800b0ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b0f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0f6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	bf08      	it	eq
 800b0fe:	2322      	moveq	r3, #34	; 0x22
 800b100:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b104:	bf08      	it	eq
 800b106:	6023      	streq	r3, [r4, #0]
 800b108:	e62c      	b.n	800ad64 <_strtod_l+0x48c>
 800b10a:	f04f 31ff 	mov.w	r1, #4294967295
 800b10e:	fa01 f202 	lsl.w	r2, r1, r2
 800b112:	ea02 0808 	and.w	r8, r2, r8
 800b116:	e6d9      	b.n	800aecc <_strtod_l+0x5f4>
 800b118:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b11c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b120:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b124:	33e2      	adds	r3, #226	; 0xe2
 800b126:	fa00 f303 	lsl.w	r3, r0, r3
 800b12a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b12e:	e73f      	b.n	800afb0 <_strtod_l+0x6d8>
 800b130:	2200      	movs	r2, #0
 800b132:	2301      	movs	r3, #1
 800b134:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b138:	e73a      	b.n	800afb0 <_strtod_l+0x6d8>
 800b13a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b13c:	461a      	mov	r2, r3
 800b13e:	4620      	mov	r0, r4
 800b140:	f7fe fe18 	bl	8009d74 <__lshift>
 800b144:	9012      	str	r0, [sp, #72]	; 0x48
 800b146:	2800      	cmp	r0, #0
 800b148:	f47f af64 	bne.w	800b014 <_strtod_l+0x73c>
 800b14c:	e600      	b.n	800ad50 <_strtod_l+0x478>
 800b14e:	bf00      	nop
 800b150:	94a03595 	.word	0x94a03595
 800b154:	3fcfffff 	.word	0x3fcfffff
 800b158:	94a03595 	.word	0x94a03595
 800b15c:	3fdfffff 	.word	0x3fdfffff
 800b160:	35afe535 	.word	0x35afe535
 800b164:	3fe00000 	.word	0x3fe00000
 800b168:	00000000 	.word	0x00000000
 800b16c:	39500000 	.word	0x39500000
 800b170:	0800f498 	.word	0x0800f498
 800b174:	fffffc02 	.word	0xfffffc02
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	46cb      	mov	fp, r9
 800b17e:	d15f      	bne.n	800b240 <_strtod_l+0x968>
 800b180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b184:	f1ba 0f00 	cmp.w	sl, #0
 800b188:	d02a      	beq.n	800b1e0 <_strtod_l+0x908>
 800b18a:	4aa7      	ldr	r2, [pc, #668]	; (800b428 <_strtod_l+0xb50>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d12b      	bne.n	800b1e8 <_strtod_l+0x910>
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	4642      	mov	r2, r8
 800b194:	b1fb      	cbz	r3, 800b1d6 <_strtod_l+0x8fe>
 800b196:	4ba5      	ldr	r3, [pc, #660]	; (800b42c <_strtod_l+0xb54>)
 800b198:	ea09 0303 	and.w	r3, r9, r3
 800b19c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1a0:	f04f 31ff 	mov.w	r1, #4294967295
 800b1a4:	d81a      	bhi.n	800b1dc <_strtod_l+0x904>
 800b1a6:	0d1b      	lsrs	r3, r3, #20
 800b1a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d119      	bne.n	800b1e8 <_strtod_l+0x910>
 800b1b4:	4b9e      	ldr	r3, [pc, #632]	; (800b430 <_strtod_l+0xb58>)
 800b1b6:	459b      	cmp	fp, r3
 800b1b8:	d102      	bne.n	800b1c0 <_strtod_l+0x8e8>
 800b1ba:	3201      	adds	r2, #1
 800b1bc:	f43f adc8 	beq.w	800ad50 <_strtod_l+0x478>
 800b1c0:	4b9a      	ldr	r3, [pc, #616]	; (800b42c <_strtod_l+0xb54>)
 800b1c2:	ea0b 0303 	and.w	r3, fp, r3
 800b1c6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b1ca:	f04f 0800 	mov.w	r8, #0
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d188      	bne.n	800b0e6 <_strtod_l+0x80e>
 800b1d4:	e5c6      	b.n	800ad64 <_strtod_l+0x48c>
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	e7e9      	b.n	800b1b0 <_strtod_l+0x8d8>
 800b1dc:	460b      	mov	r3, r1
 800b1de:	e7e7      	b.n	800b1b0 <_strtod_l+0x8d8>
 800b1e0:	ea53 0308 	orrs.w	r3, r3, r8
 800b1e4:	f43f af6f 	beq.w	800b0c6 <_strtod_l+0x7ee>
 800b1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ea:	b1cb      	cbz	r3, 800b220 <_strtod_l+0x948>
 800b1ec:	ea13 0f0b 	tst.w	r3, fp
 800b1f0:	d0ed      	beq.n	800b1ce <_strtod_l+0x8f6>
 800b1f2:	9a04      	ldr	r2, [sp, #16]
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	d014      	beq.n	800b228 <_strtod_l+0x950>
 800b1fe:	f7ff fb4f 	bl	800a8a0 <sulp>
 800b202:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b206:	ec59 8b17 	vmov	r8, r9, d7
 800b20a:	e7e0      	b.n	800b1ce <_strtod_l+0x8f6>
 800b20c:	4013      	ands	r3, r2
 800b20e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b212:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b216:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b21a:	f04f 38ff 	mov.w	r8, #4294967295
 800b21e:	e7d6      	b.n	800b1ce <_strtod_l+0x8f6>
 800b220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b222:	ea13 0f08 	tst.w	r3, r8
 800b226:	e7e3      	b.n	800b1f0 <_strtod_l+0x918>
 800b228:	f7ff fb3a 	bl	800a8a0 <sulp>
 800b22c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b230:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	ec59 8b10 	vmov	r8, r9, d0
 800b23c:	d1c7      	bne.n	800b1ce <_strtod_l+0x8f6>
 800b23e:	e5f7      	b.n	800ae30 <_strtod_l+0x558>
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	f7fe ff84 	bl	800a150 <__ratio>
 800b248:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b24c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b254:	d865      	bhi.n	800b322 <_strtod_l+0xa4a>
 800b256:	f1ba 0f00 	cmp.w	sl, #0
 800b25a:	d042      	beq.n	800b2e2 <_strtod_l+0xa0a>
 800b25c:	4b75      	ldr	r3, [pc, #468]	; (800b434 <_strtod_l+0xb5c>)
 800b25e:	2200      	movs	r2, #0
 800b260:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b264:	4871      	ldr	r0, [pc, #452]	; (800b42c <_strtod_l+0xb54>)
 800b266:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b440 <_strtod_l+0xb68>
 800b26a:	ea0b 0100 	and.w	r1, fp, r0
 800b26e:	4561      	cmp	r1, ip
 800b270:	f040 808e 	bne.w	800b390 <_strtod_l+0xab8>
 800b274:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b278:	ec49 8b10 	vmov	d0, r8, r9
 800b27c:	ec43 2b1c 	vmov	d12, r2, r3
 800b280:	910a      	str	r1, [sp, #40]	; 0x28
 800b282:	f7fe fe8d 	bl	8009fa0 <__ulp>
 800b286:	ec49 8b1e 	vmov	d14, r8, r9
 800b28a:	4868      	ldr	r0, [pc, #416]	; (800b42c <_strtod_l+0xb54>)
 800b28c:	eeac eb00 	vfma.f64	d14, d12, d0
 800b290:	ee1e 3a90 	vmov	r3, s29
 800b294:	4a68      	ldr	r2, [pc, #416]	; (800b438 <_strtod_l+0xb60>)
 800b296:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b298:	4018      	ands	r0, r3
 800b29a:	4290      	cmp	r0, r2
 800b29c:	ec59 8b1e 	vmov	r8, r9, d14
 800b2a0:	d94e      	bls.n	800b340 <_strtod_l+0xa68>
 800b2a2:	ee18 3a90 	vmov	r3, s17
 800b2a6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d104      	bne.n	800b2b8 <_strtod_l+0x9e0>
 800b2ae:	ee18 3a10 	vmov	r3, s16
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	f43f ad4c 	beq.w	800ad50 <_strtod_l+0x478>
 800b2b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b430 <_strtod_l+0xb58>
 800b2bc:	f04f 38ff 	mov.w	r8, #4294967295
 800b2c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7fe fb6d 	bl	80099a2 <_Bfree>
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7fe fb69 	bl	80099a2 <_Bfree>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7fe fb65 	bl	80099a2 <_Bfree>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7fe fb61 	bl	80099a2 <_Bfree>
 800b2e0:	e619      	b.n	800af16 <_strtod_l+0x63e>
 800b2e2:	f1b8 0f00 	cmp.w	r8, #0
 800b2e6:	d112      	bne.n	800b30e <_strtod_l+0xa36>
 800b2e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2ec:	b9b3      	cbnz	r3, 800b31c <_strtod_l+0xa44>
 800b2ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b2f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b2fe:	bf58      	it	pl
 800b300:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b304:	eeb1 7b4d 	vneg.f64	d7, d13
 800b308:	ec53 2b17 	vmov	r2, r3, d7
 800b30c:	e7aa      	b.n	800b264 <_strtod_l+0x98c>
 800b30e:	f1b8 0f01 	cmp.w	r8, #1
 800b312:	d103      	bne.n	800b31c <_strtod_l+0xa44>
 800b314:	f1b9 0f00 	cmp.w	r9, #0
 800b318:	f43f ad8a 	beq.w	800ae30 <_strtod_l+0x558>
 800b31c:	4b47      	ldr	r3, [pc, #284]	; (800b43c <_strtod_l+0xb64>)
 800b31e:	2200      	movs	r2, #0
 800b320:	e79e      	b.n	800b260 <_strtod_l+0x988>
 800b322:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b326:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b32a:	f1ba 0f00 	cmp.w	sl, #0
 800b32e:	d104      	bne.n	800b33a <_strtod_l+0xa62>
 800b330:	eeb1 7b4d 	vneg.f64	d7, d13
 800b334:	ec53 2b17 	vmov	r2, r3, d7
 800b338:	e794      	b.n	800b264 <_strtod_l+0x98c>
 800b33a:	eeb0 7b4d 	vmov.f64	d7, d13
 800b33e:	e7f9      	b.n	800b334 <_strtod_l+0xa5c>
 800b340:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1ba      	bne.n	800b2c0 <_strtod_l+0x9e8>
 800b34a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b34e:	0d1b      	lsrs	r3, r3, #20
 800b350:	051b      	lsls	r3, r3, #20
 800b352:	4299      	cmp	r1, r3
 800b354:	d1b4      	bne.n	800b2c0 <_strtod_l+0x9e8>
 800b356:	ec51 0b1d 	vmov	r0, r1, d13
 800b35a:	f7f5 f99d 	bl	8000698 <__aeabi_d2lz>
 800b35e:	f7f5 f955 	bl	800060c <__aeabi_l2d>
 800b362:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b366:	ec41 0b17 	vmov	d7, r0, r1
 800b36a:	ea43 0308 	orr.w	r3, r3, r8
 800b36e:	ea53 030a 	orrs.w	r3, r3, sl
 800b372:	ee3d db47 	vsub.f64	d13, d13, d7
 800b376:	d03c      	beq.n	800b3f2 <_strtod_l+0xb1a>
 800b378:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b380:	f53f acf0 	bmi.w	800ad64 <_strtod_l+0x48c>
 800b384:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38c:	dd98      	ble.n	800b2c0 <_strtod_l+0x9e8>
 800b38e:	e4e9      	b.n	800ad64 <_strtod_l+0x48c>
 800b390:	9804      	ldr	r0, [sp, #16]
 800b392:	b1f0      	cbz	r0, 800b3d2 <_strtod_l+0xafa>
 800b394:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b398:	d81b      	bhi.n	800b3d2 <_strtod_l+0xafa>
 800b39a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b420 <_strtod_l+0xb48>
 800b39e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a6:	d811      	bhi.n	800b3cc <_strtod_l+0xaf4>
 800b3a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b3ac:	ee1d 3a10 	vmov	r3, s26
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	bf38      	it	cc
 800b3b4:	2301      	movcc	r3, #1
 800b3b6:	ee0d 3a10 	vmov	s26, r3
 800b3ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b3be:	f1ba 0f00 	cmp.w	sl, #0
 800b3c2:	d113      	bne.n	800b3ec <_strtod_l+0xb14>
 800b3c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800b3c8:	ec53 2b17 	vmov	r2, r3, d7
 800b3cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b3d0:	1a43      	subs	r3, r0, r1
 800b3d2:	eeb0 0b48 	vmov.f64	d0, d8
 800b3d6:	ec43 2b1c 	vmov	d12, r2, r3
 800b3da:	910a      	str	r1, [sp, #40]	; 0x28
 800b3dc:	f7fe fde0 	bl	8009fa0 <__ulp>
 800b3e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b3e6:	ec59 8b18 	vmov	r8, r9, d8
 800b3ea:	e7ab      	b.n	800b344 <_strtod_l+0xa6c>
 800b3ec:	eeb0 7b4d 	vmov.f64	d7, d13
 800b3f0:	e7ea      	b.n	800b3c8 <_strtod_l+0xaf0>
 800b3f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fa:	f57f af61 	bpl.w	800b2c0 <_strtod_l+0x9e8>
 800b3fe:	e4b1      	b.n	800ad64 <_strtod_l+0x48c>
 800b400:	2300      	movs	r3, #0
 800b402:	9308      	str	r3, [sp, #32]
 800b404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	f7ff baad 	b.w	800a968 <_strtod_l+0x90>
 800b40e:	2a65      	cmp	r2, #101	; 0x65
 800b410:	f43f ab9f 	beq.w	800ab52 <_strtod_l+0x27a>
 800b414:	2a45      	cmp	r2, #69	; 0x45
 800b416:	f43f ab9c 	beq.w	800ab52 <_strtod_l+0x27a>
 800b41a:	2101      	movs	r1, #1
 800b41c:	f7ff bbd4 	b.w	800abc8 <_strtod_l+0x2f0>
 800b420:	ffc00000 	.word	0xffc00000
 800b424:	41dfffff 	.word	0x41dfffff
 800b428:	000fffff 	.word	0x000fffff
 800b42c:	7ff00000 	.word	0x7ff00000
 800b430:	7fefffff 	.word	0x7fefffff
 800b434:	3ff00000 	.word	0x3ff00000
 800b438:	7c9fffff 	.word	0x7c9fffff
 800b43c:	bff00000 	.word	0xbff00000
 800b440:	7fe00000 	.word	0x7fe00000

0800b444 <_strtod_r>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <_strtod_r+0x8>)
 800b446:	f7ff ba47 	b.w	800a8d8 <_strtod_l>
 800b44a:	bf00      	nop
 800b44c:	2000043c 	.word	0x2000043c

0800b450 <_strtoll_l.constprop.0>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b085      	sub	sp, #20
 800b456:	4688      	mov	r8, r1
 800b458:	9201      	str	r2, [sp, #4]
 800b45a:	4a47      	ldr	r2, [pc, #284]	; (800b578 <_strtoll_l.constprop.0+0x128>)
 800b45c:	9003      	str	r0, [sp, #12]
 800b45e:	461e      	mov	r6, r3
 800b460:	460d      	mov	r5, r1
 800b462:	462b      	mov	r3, r5
 800b464:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b468:	5ca7      	ldrb	r7, [r4, r2]
 800b46a:	f017 0708 	ands.w	r7, r7, #8
 800b46e:	d1f8      	bne.n	800b462 <_strtoll_l.constprop.0+0x12>
 800b470:	2c2d      	cmp	r4, #45	; 0x2d
 800b472:	d147      	bne.n	800b504 <_strtoll_l.constprop.0+0xb4>
 800b474:	782c      	ldrb	r4, [r5, #0]
 800b476:	2701      	movs	r7, #1
 800b478:	1c9d      	adds	r5, r3, #2
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	d077      	beq.n	800b56e <_strtoll_l.constprop.0+0x11e>
 800b47e:	2e10      	cmp	r6, #16
 800b480:	d109      	bne.n	800b496 <_strtoll_l.constprop.0+0x46>
 800b482:	2c30      	cmp	r4, #48	; 0x30
 800b484:	d107      	bne.n	800b496 <_strtoll_l.constprop.0+0x46>
 800b486:	782b      	ldrb	r3, [r5, #0]
 800b488:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b48c:	2b58      	cmp	r3, #88	; 0x58
 800b48e:	d169      	bne.n	800b564 <_strtoll_l.constprop.0+0x114>
 800b490:	786c      	ldrb	r4, [r5, #1]
 800b492:	2610      	movs	r6, #16
 800b494:	3502      	adds	r5, #2
 800b496:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800b49a:	f107 3bff 	add.w	fp, r7, #4294967295
 800b49e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4a2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b4a6:	4632      	mov	r2, r6
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	4651      	mov	r1, sl
 800b4ae:	f7f5 f8db 	bl	8000668 <__aeabi_uldivmod>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9202      	str	r2, [sp, #8]
 800b4b6:	468c      	mov	ip, r1
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b4c2:	f1be 0f09 	cmp.w	lr, #9
 800b4c6:	d822      	bhi.n	800b50e <_strtoll_l.constprop.0+0xbe>
 800b4c8:	4674      	mov	r4, lr
 800b4ca:	42a6      	cmp	r6, r4
 800b4cc:	dd30      	ble.n	800b530 <_strtoll_l.constprop.0+0xe0>
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d2:	d014      	beq.n	800b4fe <_strtoll_l.constprop.0+0xae>
 800b4d4:	4282      	cmp	r2, r0
 800b4d6:	eb7c 0301 	sbcs.w	r3, ip, r1
 800b4da:	d326      	bcc.n	800b52a <_strtoll_l.constprop.0+0xda>
 800b4dc:	458c      	cmp	ip, r1
 800b4de:	bf08      	it	eq
 800b4e0:	4282      	cmpeq	r2, r0
 800b4e2:	d102      	bne.n	800b4ea <_strtoll_l.constprop.0+0x9a>
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	42a3      	cmp	r3, r4
 800b4e8:	db1f      	blt.n	800b52a <_strtoll_l.constprop.0+0xda>
 800b4ea:	4371      	muls	r1, r6
 800b4ec:	fb00 1109 	mla	r1, r0, r9, r1
 800b4f0:	fba6 0300 	umull	r0, r3, r6, r0
 800b4f4:	4419      	add	r1, r3
 800b4f6:	1820      	adds	r0, r4, r0
 800b4f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b502:	e7dc      	b.n	800b4be <_strtoll_l.constprop.0+0x6e>
 800b504:	2c2b      	cmp	r4, #43	; 0x2b
 800b506:	bf04      	itt	eq
 800b508:	782c      	ldrbeq	r4, [r5, #0]
 800b50a:	1c9d      	addeq	r5, r3, #2
 800b50c:	e7b5      	b.n	800b47a <_strtoll_l.constprop.0+0x2a>
 800b50e:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b512:	f1be 0f19 	cmp.w	lr, #25
 800b516:	d801      	bhi.n	800b51c <_strtoll_l.constprop.0+0xcc>
 800b518:	3c37      	subs	r4, #55	; 0x37
 800b51a:	e7d6      	b.n	800b4ca <_strtoll_l.constprop.0+0x7a>
 800b51c:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b520:	f1be 0f19 	cmp.w	lr, #25
 800b524:	d804      	bhi.n	800b530 <_strtoll_l.constprop.0+0xe0>
 800b526:	3c57      	subs	r4, #87	; 0x57
 800b528:	e7cf      	b.n	800b4ca <_strtoll_l.constprop.0+0x7a>
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	e7e6      	b.n	800b4fe <_strtoll_l.constprop.0+0xae>
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	d109      	bne.n	800b548 <_strtoll_l.constprop.0+0xf8>
 800b534:	9a03      	ldr	r2, [sp, #12]
 800b536:	2322      	movs	r3, #34	; 0x22
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	4658      	mov	r0, fp
 800b53e:	4651      	mov	r1, sl
 800b540:	b953      	cbnz	r3, 800b558 <_strtoll_l.constprop.0+0x108>
 800b542:	b005      	add	sp, #20
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	b117      	cbz	r7, 800b550 <_strtoll_l.constprop.0+0x100>
 800b54a:	4240      	negs	r0, r0
 800b54c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	2a00      	cmp	r2, #0
 800b554:	d0f5      	beq.n	800b542 <_strtoll_l.constprop.0+0xf2>
 800b556:	b10b      	cbz	r3, 800b55c <_strtoll_l.constprop.0+0x10c>
 800b558:	f105 38ff 	add.w	r8, r5, #4294967295
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	f8c3 8000 	str.w	r8, [r3]
 800b562:	e7ee      	b.n	800b542 <_strtoll_l.constprop.0+0xf2>
 800b564:	2430      	movs	r4, #48	; 0x30
 800b566:	2e00      	cmp	r6, #0
 800b568:	d195      	bne.n	800b496 <_strtoll_l.constprop.0+0x46>
 800b56a:	2608      	movs	r6, #8
 800b56c:	e793      	b.n	800b496 <_strtoll_l.constprop.0+0x46>
 800b56e:	2c30      	cmp	r4, #48	; 0x30
 800b570:	d089      	beq.n	800b486 <_strtoll_l.constprop.0+0x36>
 800b572:	260a      	movs	r6, #10
 800b574:	e78f      	b.n	800b496 <_strtoll_l.constprop.0+0x46>
 800b576:	bf00      	nop
 800b578:	0800f191 	.word	0x0800f191

0800b57c <_strtoll_r>:
 800b57c:	f7ff bf68 	b.w	800b450 <_strtoll_l.constprop.0>

0800b580 <_strtoul_l.constprop.0>:
 800b580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b584:	4f36      	ldr	r7, [pc, #216]	; (800b660 <_strtoul_l.constprop.0+0xe0>)
 800b586:	4686      	mov	lr, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	4628      	mov	r0, r5
 800b58c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b590:	5de6      	ldrb	r6, [r4, r7]
 800b592:	f016 0608 	ands.w	r6, r6, #8
 800b596:	d1f8      	bne.n	800b58a <_strtoul_l.constprop.0+0xa>
 800b598:	2c2d      	cmp	r4, #45	; 0x2d
 800b59a:	d12f      	bne.n	800b5fc <_strtoul_l.constprop.0+0x7c>
 800b59c:	782c      	ldrb	r4, [r5, #0]
 800b59e:	2601      	movs	r6, #1
 800b5a0:	1c85      	adds	r5, r0, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d057      	beq.n	800b656 <_strtoul_l.constprop.0+0xd6>
 800b5a6:	2b10      	cmp	r3, #16
 800b5a8:	d109      	bne.n	800b5be <_strtoul_l.constprop.0+0x3e>
 800b5aa:	2c30      	cmp	r4, #48	; 0x30
 800b5ac:	d107      	bne.n	800b5be <_strtoul_l.constprop.0+0x3e>
 800b5ae:	7828      	ldrb	r0, [r5, #0]
 800b5b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b5b4:	2858      	cmp	r0, #88	; 0x58
 800b5b6:	d149      	bne.n	800b64c <_strtoul_l.constprop.0+0xcc>
 800b5b8:	786c      	ldrb	r4, [r5, #1]
 800b5ba:	2310      	movs	r3, #16
 800b5bc:	3502      	adds	r5, #2
 800b5be:	f04f 38ff 	mov.w	r8, #4294967295
 800b5c2:	2700      	movs	r7, #0
 800b5c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b5c8:	fb03 f908 	mul.w	r9, r3, r8
 800b5cc:	ea6f 0909 	mvn.w	r9, r9
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b5d6:	f1bc 0f09 	cmp.w	ip, #9
 800b5da:	d814      	bhi.n	800b606 <_strtoul_l.constprop.0+0x86>
 800b5dc:	4664      	mov	r4, ip
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	dd22      	ble.n	800b628 <_strtoul_l.constprop.0+0xa8>
 800b5e2:	2f00      	cmp	r7, #0
 800b5e4:	db1d      	blt.n	800b622 <_strtoul_l.constprop.0+0xa2>
 800b5e6:	4580      	cmp	r8, r0
 800b5e8:	d31b      	bcc.n	800b622 <_strtoul_l.constprop.0+0xa2>
 800b5ea:	d101      	bne.n	800b5f0 <_strtoul_l.constprop.0+0x70>
 800b5ec:	45a1      	cmp	r9, r4
 800b5ee:	db18      	blt.n	800b622 <_strtoul_l.constprop.0+0xa2>
 800b5f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5f4:	2701      	movs	r7, #1
 800b5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5fa:	e7ea      	b.n	800b5d2 <_strtoul_l.constprop.0+0x52>
 800b5fc:	2c2b      	cmp	r4, #43	; 0x2b
 800b5fe:	bf04      	itt	eq
 800b600:	782c      	ldrbeq	r4, [r5, #0]
 800b602:	1c85      	addeq	r5, r0, #2
 800b604:	e7cd      	b.n	800b5a2 <_strtoul_l.constprop.0+0x22>
 800b606:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b60a:	f1bc 0f19 	cmp.w	ip, #25
 800b60e:	d801      	bhi.n	800b614 <_strtoul_l.constprop.0+0x94>
 800b610:	3c37      	subs	r4, #55	; 0x37
 800b612:	e7e4      	b.n	800b5de <_strtoul_l.constprop.0+0x5e>
 800b614:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b618:	f1bc 0f19 	cmp.w	ip, #25
 800b61c:	d804      	bhi.n	800b628 <_strtoul_l.constprop.0+0xa8>
 800b61e:	3c57      	subs	r4, #87	; 0x57
 800b620:	e7dd      	b.n	800b5de <_strtoul_l.constprop.0+0x5e>
 800b622:	f04f 37ff 	mov.w	r7, #4294967295
 800b626:	e7e6      	b.n	800b5f6 <_strtoul_l.constprop.0+0x76>
 800b628:	2f00      	cmp	r7, #0
 800b62a:	da07      	bge.n	800b63c <_strtoul_l.constprop.0+0xbc>
 800b62c:	2322      	movs	r3, #34	; 0x22
 800b62e:	f8ce 3000 	str.w	r3, [lr]
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	b932      	cbnz	r2, 800b646 <_strtoul_l.constprop.0+0xc6>
 800b638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b63c:	b106      	cbz	r6, 800b640 <_strtoul_l.constprop.0+0xc0>
 800b63e:	4240      	negs	r0, r0
 800b640:	2a00      	cmp	r2, #0
 800b642:	d0f9      	beq.n	800b638 <_strtoul_l.constprop.0+0xb8>
 800b644:	b107      	cbz	r7, 800b648 <_strtoul_l.constprop.0+0xc8>
 800b646:	1e69      	subs	r1, r5, #1
 800b648:	6011      	str	r1, [r2, #0]
 800b64a:	e7f5      	b.n	800b638 <_strtoul_l.constprop.0+0xb8>
 800b64c:	2430      	movs	r4, #48	; 0x30
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1b5      	bne.n	800b5be <_strtoul_l.constprop.0+0x3e>
 800b652:	2308      	movs	r3, #8
 800b654:	e7b3      	b.n	800b5be <_strtoul_l.constprop.0+0x3e>
 800b656:	2c30      	cmp	r4, #48	; 0x30
 800b658:	d0a9      	beq.n	800b5ae <_strtoul_l.constprop.0+0x2e>
 800b65a:	230a      	movs	r3, #10
 800b65c:	e7af      	b.n	800b5be <_strtoul_l.constprop.0+0x3e>
 800b65e:	bf00      	nop
 800b660:	0800f191 	.word	0x0800f191

0800b664 <_strtoul_r>:
 800b664:	f7ff bf8c 	b.w	800b580 <_strtoul_l.constprop.0>

0800b668 <_strtoull_l.constprop.0>:
 800b668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4692      	mov	sl, r2
 800b66e:	4a49      	ldr	r2, [pc, #292]	; (800b794 <_strtoull_l.constprop.0+0x12c>)
 800b670:	9001      	str	r0, [sp, #4]
 800b672:	4689      	mov	r9, r1
 800b674:	461d      	mov	r5, r3
 800b676:	460e      	mov	r6, r1
 800b678:	4633      	mov	r3, r6
 800b67a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800b67e:	5ca7      	ldrb	r7, [r4, r2]
 800b680:	f017 0708 	ands.w	r7, r7, #8
 800b684:	d1f8      	bne.n	800b678 <_strtoull_l.constprop.0+0x10>
 800b686:	2c2d      	cmp	r4, #45	; 0x2d
 800b688:	d14a      	bne.n	800b720 <_strtoull_l.constprop.0+0xb8>
 800b68a:	7834      	ldrb	r4, [r6, #0]
 800b68c:	2701      	movs	r7, #1
 800b68e:	1c9e      	adds	r6, r3, #2
 800b690:	2d00      	cmp	r5, #0
 800b692:	d07b      	beq.n	800b78c <_strtoull_l.constprop.0+0x124>
 800b694:	2d10      	cmp	r5, #16
 800b696:	d109      	bne.n	800b6ac <_strtoull_l.constprop.0+0x44>
 800b698:	2c30      	cmp	r4, #48	; 0x30
 800b69a:	d107      	bne.n	800b6ac <_strtoull_l.constprop.0+0x44>
 800b69c:	7833      	ldrb	r3, [r6, #0]
 800b69e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6a2:	2b58      	cmp	r3, #88	; 0x58
 800b6a4:	d16d      	bne.n	800b782 <_strtoull_l.constprop.0+0x11a>
 800b6a6:	7874      	ldrb	r4, [r6, #1]
 800b6a8:	2510      	movs	r5, #16
 800b6aa:	3602      	adds	r6, #2
 800b6ac:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	465b      	mov	r3, fp
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6bc:	f7f4 ffd4 	bl	8000668 <__aeabi_uldivmod>
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	9000      	str	r0, [sp, #0]
 800b6c4:	4688      	mov	r8, r1
 800b6c6:	465b      	mov	r3, fp
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	f04f 31ff 	mov.w	r1, #4294967295
 800b6d0:	f7f4 ffca 	bl	8000668 <__aeabi_uldivmod>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b6de:	f1bc 0f09 	cmp.w	ip, #9
 800b6e2:	d822      	bhi.n	800b72a <_strtoull_l.constprop.0+0xc2>
 800b6e4:	4664      	mov	r4, ip
 800b6e6:	42a5      	cmp	r5, r4
 800b6e8:	dd30      	ble.n	800b74c <_strtoull_l.constprop.0+0xe4>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	db2b      	blt.n	800b746 <_strtoull_l.constprop.0+0xde>
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	4283      	cmp	r3, r0
 800b6f2:	eb78 0301 	sbcs.w	r3, r8, r1
 800b6f6:	d326      	bcc.n	800b746 <_strtoull_l.constprop.0+0xde>
 800b6f8:	9b00      	ldr	r3, [sp, #0]
 800b6fa:	4588      	cmp	r8, r1
 800b6fc:	bf08      	it	eq
 800b6fe:	4283      	cmpeq	r3, r0
 800b700:	d101      	bne.n	800b706 <_strtoull_l.constprop.0+0x9e>
 800b702:	42a2      	cmp	r2, r4
 800b704:	db1f      	blt.n	800b746 <_strtoull_l.constprop.0+0xde>
 800b706:	4369      	muls	r1, r5
 800b708:	fb00 110b 	mla	r1, r0, fp, r1
 800b70c:	fba5 0300 	umull	r0, r3, r5, r0
 800b710:	4419      	add	r1, r3
 800b712:	1820      	adds	r0, r4, r0
 800b714:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b718:	2301      	movs	r3, #1
 800b71a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800b71e:	e7dc      	b.n	800b6da <_strtoull_l.constprop.0+0x72>
 800b720:	2c2b      	cmp	r4, #43	; 0x2b
 800b722:	bf04      	itt	eq
 800b724:	7834      	ldrbeq	r4, [r6, #0]
 800b726:	1c9e      	addeq	r6, r3, #2
 800b728:	e7b2      	b.n	800b690 <_strtoull_l.constprop.0+0x28>
 800b72a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b72e:	f1bc 0f19 	cmp.w	ip, #25
 800b732:	d801      	bhi.n	800b738 <_strtoull_l.constprop.0+0xd0>
 800b734:	3c37      	subs	r4, #55	; 0x37
 800b736:	e7d6      	b.n	800b6e6 <_strtoull_l.constprop.0+0x7e>
 800b738:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b73c:	f1bc 0f19 	cmp.w	ip, #25
 800b740:	d804      	bhi.n	800b74c <_strtoull_l.constprop.0+0xe4>
 800b742:	3c57      	subs	r4, #87	; 0x57
 800b744:	e7cf      	b.n	800b6e6 <_strtoull_l.constprop.0+0x7e>
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	e7e6      	b.n	800b71a <_strtoull_l.constprop.0+0xb2>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da0b      	bge.n	800b768 <_strtoull_l.constprop.0+0x100>
 800b750:	9a01      	ldr	r2, [sp, #4]
 800b752:	2322      	movs	r3, #34	; 0x22
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	4601      	mov	r1, r0
 800b75c:	f1ba 0f00 	cmp.w	sl, #0
 800b760:	d10a      	bne.n	800b778 <_strtoull_l.constprop.0+0x110>
 800b762:	b003      	add	sp, #12
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b768:	b117      	cbz	r7, 800b770 <_strtoull_l.constprop.0+0x108>
 800b76a:	4240      	negs	r0, r0
 800b76c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b770:	f1ba 0f00 	cmp.w	sl, #0
 800b774:	d0f5      	beq.n	800b762 <_strtoull_l.constprop.0+0xfa>
 800b776:	b10b      	cbz	r3, 800b77c <_strtoull_l.constprop.0+0x114>
 800b778:	f106 39ff 	add.w	r9, r6, #4294967295
 800b77c:	f8ca 9000 	str.w	r9, [sl]
 800b780:	e7ef      	b.n	800b762 <_strtoull_l.constprop.0+0xfa>
 800b782:	2430      	movs	r4, #48	; 0x30
 800b784:	2d00      	cmp	r5, #0
 800b786:	d191      	bne.n	800b6ac <_strtoull_l.constprop.0+0x44>
 800b788:	2508      	movs	r5, #8
 800b78a:	e78f      	b.n	800b6ac <_strtoull_l.constprop.0+0x44>
 800b78c:	2c30      	cmp	r4, #48	; 0x30
 800b78e:	d085      	beq.n	800b69c <_strtoull_l.constprop.0+0x34>
 800b790:	250a      	movs	r5, #10
 800b792:	e78b      	b.n	800b6ac <_strtoull_l.constprop.0+0x44>
 800b794:	0800f191 	.word	0x0800f191

0800b798 <_strtoull_r>:
 800b798:	f7ff bf66 	b.w	800b668 <_strtoull_l.constprop.0>
 800b79c:	0000      	movs	r0, r0
	...

0800b7a0 <_svfprintf_r>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	ed2d 8b04 	vpush	{d8-d9}
 800b7a8:	b0cb      	sub	sp, #300	; 0x12c
 800b7aa:	468b      	mov	fp, r1
 800b7ac:	4692      	mov	sl, r2
 800b7ae:	4698      	mov	r8, r3
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	f7fd fdb1 	bl	8009318 <_localeconv_r>
 800b7b6:	6803      	ldr	r3, [r0, #0]
 800b7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f4 fd40 	bl	8000240 <strlen>
 800b7c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b7c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7c6:	061a      	lsls	r2, r3, #24
 800b7c8:	d519      	bpl.n	800b7fe <_svfprintf_r+0x5e>
 800b7ca:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b7ce:	b9b3      	cbnz	r3, 800b7fe <_svfprintf_r+0x5e>
 800b7d0:	2140      	movs	r1, #64	; 0x40
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f7fd fe24 	bl	8009420 <_malloc_r>
 800b7d8:	f8cb 0000 	str.w	r0, [fp]
 800b7dc:	f8cb 0010 	str.w	r0, [fp, #16]
 800b7e0:	b950      	cbnz	r0, 800b7f8 <_svfprintf_r+0x58>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	603b      	str	r3, [r7, #0]
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b7ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7ee:	b04b      	add	sp, #300	; 0x12c
 800b7f0:	ecbd 8b04 	vpop	{d8-d9}
 800b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	2340      	movs	r3, #64	; 0x40
 800b7fa:	f8cb 3014 	str.w	r3, [fp, #20]
 800b7fe:	2300      	movs	r3, #0
 800b800:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 800b804:	ed9f 8b96 	vldr	d8, [pc, #600]	; 800ba60 <_svfprintf_r+0x2c0>
 800b808:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800b80c:	ac21      	add	r4, sp, #132	; 0x84
 800b80e:	941e      	str	r4, [sp, #120]	; 0x78
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	9308      	str	r3, [sp, #32]
 800b814:	930e      	str	r3, [sp, #56]	; 0x38
 800b816:	9310      	str	r3, [sp, #64]	; 0x40
 800b818:	930a      	str	r3, [sp, #40]	; 0x28
 800b81a:	4653      	mov	r3, sl
 800b81c:	461d      	mov	r5, r3
 800b81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b822:	b10a      	cbz	r2, 800b828 <_svfprintf_r+0x88>
 800b824:	2a25      	cmp	r2, #37	; 0x25
 800b826:	d1f9      	bne.n	800b81c <_svfprintf_r+0x7c>
 800b828:	ebb5 060a 	subs.w	r6, r5, sl
 800b82c:	d00d      	beq.n	800b84a <_svfprintf_r+0xaa>
 800b82e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b830:	4433      	add	r3, r6
 800b832:	9320      	str	r3, [sp, #128]	; 0x80
 800b834:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b836:	3301      	adds	r3, #1
 800b838:	2b07      	cmp	r3, #7
 800b83a:	e9c4 a600 	strd	sl, r6, [r4]
 800b83e:	931f      	str	r3, [sp, #124]	; 0x7c
 800b840:	dc77      	bgt.n	800b932 <_svfprintf_r+0x192>
 800b842:	3408      	adds	r4, #8
 800b844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b846:	4433      	add	r3, r6
 800b848:	930a      	str	r3, [sp, #40]	; 0x28
 800b84a:	782b      	ldrb	r3, [r5, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f001 8135 	beq.w	800cabc <_svfprintf_r+0x131c>
 800b852:	2200      	movs	r2, #0
 800b854:	1c6b      	adds	r3, r5, #1
 800b856:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800b85a:	f04f 36ff 	mov.w	r6, #4294967295
 800b85e:	920c      	str	r2, [sp, #48]	; 0x30
 800b860:	4615      	mov	r5, r2
 800b862:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800b866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86a:	9204      	str	r2, [sp, #16]
 800b86c:	9309      	str	r3, [sp, #36]	; 0x24
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	3b20      	subs	r3, #32
 800b872:	2b5a      	cmp	r3, #90	; 0x5a
 800b874:	f200 8590 	bhi.w	800c398 <_svfprintf_r+0xbf8>
 800b878:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b87c:	058e007d 	.word	0x058e007d
 800b880:	0085058e 	.word	0x0085058e
 800b884:	058e058e 	.word	0x058e058e
 800b888:	0065058e 	.word	0x0065058e
 800b88c:	058e058e 	.word	0x058e058e
 800b890:	00920088 	.word	0x00920088
 800b894:	008f058e 	.word	0x008f058e
 800b898:	058e0095 	.word	0x058e0095
 800b89c:	00b200af 	.word	0x00b200af
 800b8a0:	00b200b2 	.word	0x00b200b2
 800b8a4:	00b200b2 	.word	0x00b200b2
 800b8a8:	00b200b2 	.word	0x00b200b2
 800b8ac:	00b200b2 	.word	0x00b200b2
 800b8b0:	058e058e 	.word	0x058e058e
 800b8b4:	058e058e 	.word	0x058e058e
 800b8b8:	058e058e 	.word	0x058e058e
 800b8bc:	012d058e 	.word	0x012d058e
 800b8c0:	00e0058e 	.word	0x00e0058e
 800b8c4:	012d00fa 	.word	0x012d00fa
 800b8c8:	012d012d 	.word	0x012d012d
 800b8cc:	058e058e 	.word	0x058e058e
 800b8d0:	058e058e 	.word	0x058e058e
 800b8d4:	058e00c3 	.word	0x058e00c3
 800b8d8:	0455058e 	.word	0x0455058e
 800b8dc:	058e058e 	.word	0x058e058e
 800b8e0:	04a3058e 	.word	0x04a3058e
 800b8e4:	04c7058e 	.word	0x04c7058e
 800b8e8:	058e058e 	.word	0x058e058e
 800b8ec:	058e04ed 	.word	0x058e04ed
 800b8f0:	058e058e 	.word	0x058e058e
 800b8f4:	058e058e 	.word	0x058e058e
 800b8f8:	058e058e 	.word	0x058e058e
 800b8fc:	012d058e 	.word	0x012d058e
 800b900:	00e0058e 	.word	0x00e0058e
 800b904:	012d00fc 	.word	0x012d00fc
 800b908:	012d012d 	.word	0x012d012d
 800b90c:	00fc00c6 	.word	0x00fc00c6
 800b910:	058e00da 	.word	0x058e00da
 800b914:	058e00d3 	.word	0x058e00d3
 800b918:	0457042e 	.word	0x0457042e
 800b91c:	00da0490 	.word	0x00da0490
 800b920:	04a3058e 	.word	0x04a3058e
 800b924:	04c9007b 	.word	0x04c9007b
 800b928:	058e058e 	.word	0x058e058e
 800b92c:	058e050d 	.word	0x058e050d
 800b930:	007b      	.short	0x007b
 800b932:	aa1e      	add	r2, sp, #120	; 0x78
 800b934:	4659      	mov	r1, fp
 800b936:	4638      	mov	r0, r7
 800b938:	f002 fc4e 	bl	800e1d8 <__ssprint_r>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f040 8126 	bne.w	800bb8e <_svfprintf_r+0x3ee>
 800b942:	ac21      	add	r4, sp, #132	; 0x84
 800b944:	e77e      	b.n	800b844 <_svfprintf_r+0xa4>
 800b946:	4638      	mov	r0, r7
 800b948:	f7fd fce6 	bl	8009318 <_localeconv_r>
 800b94c:	6843      	ldr	r3, [r0, #4]
 800b94e:	9310      	str	r3, [sp, #64]	; 0x40
 800b950:	4618      	mov	r0, r3
 800b952:	f7f4 fc75 	bl	8000240 <strlen>
 800b956:	900e      	str	r0, [sp, #56]	; 0x38
 800b958:	4638      	mov	r0, r7
 800b95a:	f7fd fcdd 	bl	8009318 <_localeconv_r>
 800b95e:	6883      	ldr	r3, [r0, #8]
 800b960:	9308      	str	r3, [sp, #32]
 800b962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b964:	b12b      	cbz	r3, 800b972 <_svfprintf_r+0x1d2>
 800b966:	9b08      	ldr	r3, [sp, #32]
 800b968:	b11b      	cbz	r3, 800b972 <_svfprintf_r+0x1d2>
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b10b      	cbz	r3, 800b972 <_svfprintf_r+0x1d2>
 800b96e:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	e777      	b.n	800b866 <_svfprintf_r+0xc6>
 800b976:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1f9      	bne.n	800b972 <_svfprintf_r+0x1d2>
 800b97e:	2320      	movs	r3, #32
 800b980:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800b984:	e7f5      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b986:	f045 0501 	orr.w	r5, r5, #1
 800b98a:	e7f2      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b98c:	f858 3b04 	ldr.w	r3, [r8], #4
 800b990:	930c      	str	r3, [sp, #48]	; 0x30
 800b992:	2b00      	cmp	r3, #0
 800b994:	daed      	bge.n	800b972 <_svfprintf_r+0x1d2>
 800b996:	425b      	negs	r3, r3
 800b998:	930c      	str	r3, [sp, #48]	; 0x30
 800b99a:	f045 0504 	orr.w	r5, r5, #4
 800b99e:	e7e8      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b9a0:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 800b9a4:	e7e5      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b0:	d111      	bne.n	800b9d6 <_svfprintf_r+0x236>
 800b9b2:	f858 6b04 	ldr.w	r6, [r8], #4
 800b9b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b8:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800b9bc:	e7d9      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b9be:	210a      	movs	r1, #10
 800b9c0:	fb01 3606 	mla	r6, r1, r6, r3
 800b9c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	3b30      	subs	r3, #48	; 0x30
 800b9ce:	2b09      	cmp	r3, #9
 800b9d0:	d9f5      	bls.n	800b9be <_svfprintf_r+0x21e>
 800b9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d4:	e74b      	b.n	800b86e <_svfprintf_r+0xce>
 800b9d6:	2600      	movs	r6, #0
 800b9d8:	e7f7      	b.n	800b9ca <_svfprintf_r+0x22a>
 800b9da:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800b9de:	e7c8      	b.n	800b972 <_svfprintf_r+0x1d2>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9ea:	3b30      	subs	r3, #48	; 0x30
 800b9ec:	200a      	movs	r0, #10
 800b9ee:	fb00 3301 	mla	r3, r0, r1, r3
 800b9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	3b30      	subs	r3, #48	; 0x30
 800b9fc:	2b09      	cmp	r3, #9
 800b9fe:	d9f2      	bls.n	800b9e6 <_svfprintf_r+0x246>
 800ba00:	e7e7      	b.n	800b9d2 <_svfprintf_r+0x232>
 800ba02:	f045 0508 	orr.w	r5, r5, #8
 800ba06:	e7b4      	b.n	800b972 <_svfprintf_r+0x1d2>
 800ba08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b68      	cmp	r3, #104	; 0x68
 800ba0e:	bf01      	itttt	eq
 800ba10:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800ba12:	3301      	addeq	r3, #1
 800ba14:	9309      	streq	r3, [sp, #36]	; 0x24
 800ba16:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800ba1a:	bf18      	it	ne
 800ba1c:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800ba20:	e7a7      	b.n	800b972 <_svfprintf_r+0x1d2>
 800ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b6c      	cmp	r3, #108	; 0x6c
 800ba28:	d105      	bne.n	800ba36 <_svfprintf_r+0x296>
 800ba2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba30:	f045 0520 	orr.w	r5, r5, #32
 800ba34:	e79d      	b.n	800b972 <_svfprintf_r+0x1d2>
 800ba36:	f045 0510 	orr.w	r5, r5, #16
 800ba3a:	e79a      	b.n	800b972 <_svfprintf_r+0x1d2>
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	2000      	movs	r0, #0
 800ba40:	f852 3b04 	ldr.w	r3, [r2], #4
 800ba44:	9205      	str	r2, [sp, #20]
 800ba46:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800ba4a:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800ba4e:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800ba52:	9002      	str	r0, [sp, #8]
 800ba54:	2601      	movs	r6, #1
 800ba56:	4681      	mov	r9, r0
 800ba58:	4680      	mov	r8, r0
 800ba5a:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800ba5e:	e18e      	b.n	800bd7e <_svfprintf_r+0x5de>
	...
 800ba68:	ffffffff 	.word	0xffffffff
 800ba6c:	7fefffff 	.word	0x7fefffff
 800ba70:	f045 0510 	orr.w	r5, r5, #16
 800ba74:	06ab      	lsls	r3, r5, #26
 800ba76:	d516      	bpl.n	800baa6 <_svfprintf_r+0x306>
 800ba78:	f108 0307 	add.w	r3, r8, #7
 800ba7c:	f023 0307 	bic.w	r3, r3, #7
 800ba80:	461a      	mov	r2, r3
 800ba82:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ba86:	f852 8b08 	ldr.w	r8, [r2], #8
 800ba8a:	9205      	str	r2, [sp, #20]
 800ba8c:	f1b9 0f00 	cmp.w	r9, #0
 800ba90:	da07      	bge.n	800baa2 <_svfprintf_r+0x302>
 800ba92:	f1d8 0800 	rsbs	r8, r8, #0
 800ba96:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ba9a:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 800ba9e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800baa2:	2301      	movs	r3, #1
 800baa4:	e354      	b.n	800c150 <_svfprintf_r+0x9b0>
 800baa6:	4642      	mov	r2, r8
 800baa8:	06e8      	lsls	r0, r5, #27
 800baaa:	f852 3b04 	ldr.w	r3, [r2], #4
 800baae:	9205      	str	r2, [sp, #20]
 800bab0:	d503      	bpl.n	800baba <_svfprintf_r+0x31a>
 800bab2:	4698      	mov	r8, r3
 800bab4:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800bab8:	e7e8      	b.n	800ba8c <_svfprintf_r+0x2ec>
 800baba:	0669      	lsls	r1, r5, #25
 800babc:	d504      	bpl.n	800bac8 <_svfprintf_r+0x328>
 800babe:	fa0f f883 	sxth.w	r8, r3
 800bac2:	f343 39c0 	sbfx	r9, r3, #15, #1
 800bac6:	e7e1      	b.n	800ba8c <_svfprintf_r+0x2ec>
 800bac8:	05aa      	lsls	r2, r5, #22
 800baca:	d5f2      	bpl.n	800bab2 <_svfprintf_r+0x312>
 800bacc:	fa4f f883 	sxtb.w	r8, r3
 800bad0:	f343 19c0 	sbfx	r9, r3, #7, #1
 800bad4:	e7da      	b.n	800ba8c <_svfprintf_r+0x2ec>
 800bad6:	f108 0807 	add.w	r8, r8, #7
 800bada:	f028 0307 	bic.w	r3, r8, #7
 800bade:	ecb3 8b02 	vldmia	r3!, {d8}
 800bae2:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 800ba68 <_svfprintf_r+0x2c8>
 800bae6:	eeb0 6bc8 	vabs.f64	d6, d8
 800baea:	eeb4 6b47 	vcmp.f64	d6, d7
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	9305      	str	r3, [sp, #20]
 800baf4:	dd18      	ble.n	800bb28 <_svfprintf_r+0x388>
 800baf6:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800bafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafe:	d502      	bpl.n	800bb06 <_svfprintf_r+0x366>
 800bb00:	232d      	movs	r3, #45	; 0x2d
 800bb02:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800bb06:	4a26      	ldr	r2, [pc, #152]	; (800bba0 <_svfprintf_r+0x400>)
 800bb08:	4826      	ldr	r0, [pc, #152]	; (800bba4 <_svfprintf_r+0x404>)
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	2b47      	cmp	r3, #71	; 0x47
 800bb0e:	bfd4      	ite	le
 800bb10:	4692      	movle	sl, r2
 800bb12:	4682      	movgt	sl, r0
 800bb14:	2300      	movs	r3, #0
 800bb16:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800bb1a:	9302      	str	r3, [sp, #8]
 800bb1c:	2603      	movs	r6, #3
 800bb1e:	4699      	mov	r9, r3
 800bb20:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800bb24:	4698      	mov	r8, r3
 800bb26:	e12a      	b.n	800bd7e <_svfprintf_r+0x5de>
 800bb28:	eeb4 8b48 	vcmp.f64	d8, d8
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	d70a      	bvc.n	800bb48 <_svfprintf_r+0x3a8>
 800bb32:	ee18 3a90 	vmov	r3, s17
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	bfb8      	it	lt
 800bb3a:	232d      	movlt	r3, #45	; 0x2d
 800bb3c:	4a1a      	ldr	r2, [pc, #104]	; (800bba8 <_svfprintf_r+0x408>)
 800bb3e:	481b      	ldr	r0, [pc, #108]	; (800bbac <_svfprintf_r+0x40c>)
 800bb40:	bfb8      	it	lt
 800bb42:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800bb46:	e7e0      	b.n	800bb0a <_svfprintf_r+0x36a>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	f023 0920 	bic.w	r9, r3, #32
 800bb4e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800bb52:	d12d      	bne.n	800bbb0 <_svfprintf_r+0x410>
 800bb54:	2330      	movs	r3, #48	; 0x30
 800bb56:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800bb5a:	9b04      	ldr	r3, [sp, #16]
 800bb5c:	2b61      	cmp	r3, #97	; 0x61
 800bb5e:	bf0c      	ite	eq
 800bb60:	2378      	moveq	r3, #120	; 0x78
 800bb62:	2358      	movne	r3, #88	; 0x58
 800bb64:	2e63      	cmp	r6, #99	; 0x63
 800bb66:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800bb6a:	f045 0502 	orr.w	r5, r5, #2
 800bb6e:	f340 81db 	ble.w	800bf28 <_svfprintf_r+0x788>
 800bb72:	1c71      	adds	r1, r6, #1
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7fd fc53 	bl	8009420 <_malloc_r>
 800bb7a:	4682      	mov	sl, r0
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	f040 81d8 	bne.w	800bf32 <_svfprintf_r+0x792>
 800bb82:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8a:	f8ab 300c 	strh.w	r3, [fp, #12]
 800bb8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800bb92:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb98:	bf18      	it	ne
 800bb9a:	f04f 33ff 	movne.w	r3, #4294967295
 800bb9e:	e624      	b.n	800b7ea <_svfprintf_r+0x4a>
 800bba0:	0800f115 	.word	0x0800f115
 800bba4:	0800f119 	.word	0x0800f119
 800bba8:	0800f11d 	.word	0x0800f11d
 800bbac:	0800f121 	.word	0x0800f121
 800bbb0:	1c73      	adds	r3, r6, #1
 800bbb2:	f000 81c0 	beq.w	800bf36 <_svfprintf_r+0x796>
 800bbb6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bbba:	f040 81c0 	bne.w	800bf3e <_svfprintf_r+0x79e>
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	f040 81bd 	bne.w	800bf3e <_svfprintf_r+0x79e>
 800bbc4:	9602      	str	r6, [sp, #8]
 800bbc6:	2601      	movs	r6, #1
 800bbc8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800bbcc:	930d      	str	r3, [sp, #52]	; 0x34
 800bbce:	ee18 3a90 	vmov	r3, s17
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f280 81b6 	bge.w	800bf44 <_svfprintf_r+0x7a4>
 800bbd8:	eeb1 9b48 	vneg.f64	d9, d8
 800bbdc:	232d      	movs	r3, #45	; 0x2d
 800bbde:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800bbe2:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbe4:	f040 81c7 	bne.w	800bf76 <_svfprintf_r+0x7d6>
 800bbe8:	eeb0 0b49 	vmov.f64	d0, d9
 800bbec:	a818      	add	r0, sp, #96	; 0x60
 800bbee:	f7fe fd5b 	bl	800a6a8 <frexp>
 800bbf2:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 800bbf6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bbfa:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc02:	bf08      	it	eq
 800bc04:	2301      	moveq	r3, #1
 800bc06:	9a04      	ldr	r2, [sp, #16]
 800bc08:	bf08      	it	eq
 800bc0a:	9318      	streq	r3, [sp, #96]	; 0x60
 800bc0c:	49b5      	ldr	r1, [pc, #724]	; (800bee4 <_svfprintf_r+0x744>)
 800bc0e:	4bb6      	ldr	r3, [pc, #728]	; (800bee8 <_svfprintf_r+0x748>)
 800bc10:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 800bc14:	2a61      	cmp	r2, #97	; 0x61
 800bc16:	bf18      	it	ne
 800bc18:	4619      	movne	r1, r3
 800bc1a:	1e72      	subs	r2, r6, #1
 800bc1c:	4653      	mov	r3, sl
 800bc1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bc22:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800bc26:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc2a:	ee16 ca90 	vmov	ip, s13
 800bc2e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800bc32:	f803 0b01 	strb.w	r0, [r3], #1
 800bc36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bc40:	d006      	beq.n	800bc50 <_svfprintf_r+0x4b0>
 800bc42:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc4e:	d1e6      	bne.n	800bc1e <_svfprintf_r+0x47e>
 800bc50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bc54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	dc09      	bgt.n	800bc72 <_svfprintf_r+0x4d2>
 800bc5e:	eeb4 0b47 	vcmp.f64	d0, d7
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	f040 8180 	bne.w	800bf6a <_svfprintf_r+0x7ca>
 800bc6a:	f01c 0f01 	tst.w	ip, #1
 800bc6e:	f000 817c 	beq.w	800bf6a <_svfprintf_r+0x7ca>
 800bc72:	f891 c00f 	ldrb.w	ip, [r1, #15]
 800bc76:	931c      	str	r3, [sp, #112]	; 0x70
 800bc78:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800bc7c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800bc7e:	1e42      	subs	r2, r0, #1
 800bc80:	921c      	str	r2, [sp, #112]	; 0x70
 800bc82:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800bc86:	4562      	cmp	r2, ip
 800bc88:	f000 8160 	beq.w	800bf4c <_svfprintf_r+0x7ac>
 800bc8c:	2a39      	cmp	r2, #57	; 0x39
 800bc8e:	bf16      	itet	ne
 800bc90:	3201      	addne	r2, #1
 800bc92:	7a8a      	ldrbeq	r2, [r1, #10]
 800bc94:	b2d2      	uxtbne	r2, r2
 800bc96:	f800 2c01 	strb.w	r2, [r0, #-1]
 800bc9a:	eba3 030a 	sub.w	r3, r3, sl
 800bc9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bca2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	f040 81a7 	bne.w	800bffa <_svfprintf_r+0x85a>
 800bcac:	f118 0f03 	cmn.w	r8, #3
 800bcb0:	db02      	blt.n	800bcb8 <_svfprintf_r+0x518>
 800bcb2:	4546      	cmp	r6, r8
 800bcb4:	f280 81c9 	bge.w	800c04a <_svfprintf_r+0x8aa>
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	3b02      	subs	r3, #2
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	9904      	ldr	r1, [sp, #16]
 800bcc0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800bcc4:	f021 0120 	bic.w	r1, r1, #32
 800bcc8:	2941      	cmp	r1, #65	; 0x41
 800bcca:	bf08      	it	eq
 800bccc:	320f      	addeq	r2, #15
 800bcce:	f108 33ff 	add.w	r3, r8, #4294967295
 800bcd2:	bf06      	itte	eq
 800bcd4:	b2d2      	uxtbeq	r2, r2
 800bcd6:	2101      	moveq	r1, #1
 800bcd8:	2100      	movne	r1, #0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	9318      	str	r3, [sp, #96]	; 0x60
 800bcde:	bfb8      	it	lt
 800bce0:	f1c8 0301 	rsblt	r3, r8, #1
 800bce4:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800bce8:	bfb4      	ite	lt
 800bcea:	222d      	movlt	r2, #45	; 0x2d
 800bcec:	222b      	movge	r2, #43	; 0x2b
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800bcf4:	f340 8198 	ble.w	800c028 <_svfprintf_r+0x888>
 800bcf8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800bcfc:	200a      	movs	r0, #10
 800bcfe:	4611      	mov	r1, r2
 800bd00:	fb93 f6f0 	sdiv	r6, r3, r0
 800bd04:	fb00 3016 	mls	r0, r0, r6, r3
 800bd08:	3030      	adds	r0, #48	; 0x30
 800bd0a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	2863      	cmp	r0, #99	; 0x63
 800bd12:	f102 32ff 	add.w	r2, r2, #4294967295
 800bd16:	4633      	mov	r3, r6
 800bd18:	dcf0      	bgt.n	800bcfc <_svfprintf_r+0x55c>
 800bd1a:	3330      	adds	r3, #48	; 0x30
 800bd1c:	1e88      	subs	r0, r1, #2
 800bd1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd22:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 800bd26:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	42b3      	cmp	r3, r6
 800bd2e:	f0c0 8176 	bcc.w	800c01e <_svfprintf_r+0x87e>
 800bd32:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 800bd36:	1a52      	subs	r2, r2, r1
 800bd38:	42b0      	cmp	r0, r6
 800bd3a:	bf88      	it	hi
 800bd3c:	2200      	movhi	r2, #0
 800bd3e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 800bd42:	441a      	add	r2, r3
 800bd44:	ab1a      	add	r3, sp, #104	; 0x68
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	9a03      	ldr	r2, [sp, #12]
 800bd4a:	9311      	str	r3, [sp, #68]	; 0x44
 800bd4c:	2a01      	cmp	r2, #1
 800bd4e:	eb03 0602 	add.w	r6, r3, r2
 800bd52:	dc01      	bgt.n	800bd58 <_svfprintf_r+0x5b8>
 800bd54:	07e8      	lsls	r0, r5, #31
 800bd56:	d501      	bpl.n	800bd5c <_svfprintf_r+0x5bc>
 800bd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5a:	441e      	add	r6, r3
 800bd5c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800bd60:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800bd64:	930d      	str	r3, [sp, #52]	; 0x34
 800bd66:	2300      	movs	r3, #0
 800bd68:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800bd6c:	4698      	mov	r8, r3
 800bd6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd70:	b113      	cbz	r3, 800bd78 <_svfprintf_r+0x5d8>
 800bd72:	232d      	movs	r3, #45	; 0x2d
 800bd74:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800bd78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd7a:	f04f 0900 	mov.w	r9, #0
 800bd7e:	45b1      	cmp	r9, r6
 800bd80:	464b      	mov	r3, r9
 800bd82:	bfb8      	it	lt
 800bd84:	4633      	movlt	r3, r6
 800bd86:	930d      	str	r3, [sp, #52]	; 0x34
 800bd88:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800bd8c:	b113      	cbz	r3, 800bd94 <_svfprintf_r+0x5f4>
 800bd8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd90:	3301      	adds	r3, #1
 800bd92:	930d      	str	r3, [sp, #52]	; 0x34
 800bd94:	f015 0302 	ands.w	r3, r5, #2
 800bd98:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd9a:	bf1e      	ittt	ne
 800bd9c:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800bd9e:	3302      	addne	r3, #2
 800bda0:	930d      	strne	r3, [sp, #52]	; 0x34
 800bda2:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800bda6:	9314      	str	r3, [sp, #80]	; 0x50
 800bda8:	d120      	bne.n	800bdec <_svfprintf_r+0x64c>
 800bdaa:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800bdae:	1a9b      	subs	r3, r3, r2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dd1b      	ble.n	800bdec <_svfprintf_r+0x64c>
 800bdb4:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800bdb8:	494c      	ldr	r1, [pc, #304]	; (800beec <_svfprintf_r+0x74c>)
 800bdba:	6021      	str	r1, [r4, #0]
 800bdbc:	2b10      	cmp	r3, #16
 800bdbe:	f102 0201 	add.w	r2, r2, #1
 800bdc2:	f104 0008 	add.w	r0, r4, #8
 800bdc6:	f300 82f7 	bgt.w	800c3b8 <_svfprintf_r+0xc18>
 800bdca:	eb0c 0103 	add.w	r1, ip, r3
 800bdce:	2a07      	cmp	r2, #7
 800bdd0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800bdd4:	6063      	str	r3, [r4, #4]
 800bdd6:	f340 8304 	ble.w	800c3e2 <_svfprintf_r+0xc42>
 800bdda:	aa1e      	add	r2, sp, #120	; 0x78
 800bddc:	4659      	mov	r1, fp
 800bdde:	4638      	mov	r0, r7
 800bde0:	f002 f9fa 	bl	800e1d8 <__ssprint_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f040 8646 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800bdea:	ac21      	add	r4, sp, #132	; 0x84
 800bdec:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800bdf0:	b173      	cbz	r3, 800be10 <_svfprintf_r+0x670>
 800bdf2:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	6063      	str	r3, [r4, #4]
 800bdfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bdfe:	3301      	adds	r3, #1
 800be00:	9320      	str	r3, [sp, #128]	; 0x80
 800be02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be04:	3301      	adds	r3, #1
 800be06:	2b07      	cmp	r3, #7
 800be08:	931f      	str	r3, [sp, #124]	; 0x7c
 800be0a:	f300 82ec 	bgt.w	800c3e6 <_svfprintf_r+0xc46>
 800be0e:	3408      	adds	r4, #8
 800be10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be12:	b16b      	cbz	r3, 800be30 <_svfprintf_r+0x690>
 800be14:	ab17      	add	r3, sp, #92	; 0x5c
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	2302      	movs	r3, #2
 800be1a:	6063      	str	r3, [r4, #4]
 800be1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be1e:	3302      	adds	r3, #2
 800be20:	9320      	str	r3, [sp, #128]	; 0x80
 800be22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be24:	3301      	adds	r3, #1
 800be26:	2b07      	cmp	r3, #7
 800be28:	931f      	str	r3, [sp, #124]	; 0x7c
 800be2a:	f300 82e6 	bgt.w	800c3fa <_svfprintf_r+0xc5a>
 800be2e:	3408      	adds	r4, #8
 800be30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be32:	2b80      	cmp	r3, #128	; 0x80
 800be34:	d120      	bne.n	800be78 <_svfprintf_r+0x6d8>
 800be36:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd1b      	ble.n	800be78 <_svfprintf_r+0x6d8>
 800be40:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800be44:	492a      	ldr	r1, [pc, #168]	; (800bef0 <_svfprintf_r+0x750>)
 800be46:	6021      	str	r1, [r4, #0]
 800be48:	2b10      	cmp	r3, #16
 800be4a:	f102 0201 	add.w	r2, r2, #1
 800be4e:	f104 0008 	add.w	r0, r4, #8
 800be52:	f300 82dc 	bgt.w	800c40e <_svfprintf_r+0xc6e>
 800be56:	eb0c 0103 	add.w	r1, ip, r3
 800be5a:	2a07      	cmp	r2, #7
 800be5c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800be60:	6063      	str	r3, [r4, #4]
 800be62:	f340 82e9 	ble.w	800c438 <_svfprintf_r+0xc98>
 800be66:	aa1e      	add	r2, sp, #120	; 0x78
 800be68:	4659      	mov	r1, fp
 800be6a:	4638      	mov	r0, r7
 800be6c:	f002 f9b4 	bl	800e1d8 <__ssprint_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	f040 8600 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800be76:	ac21      	add	r4, sp, #132	; 0x84
 800be78:	eba9 0906 	sub.w	r9, r9, r6
 800be7c:	f1b9 0f00 	cmp.w	r9, #0
 800be80:	dd1c      	ble.n	800bebc <_svfprintf_r+0x71c>
 800be82:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800be86:	481a      	ldr	r0, [pc, #104]	; (800bef0 <_svfprintf_r+0x750>)
 800be88:	6020      	str	r0, [r4, #0]
 800be8a:	f1b9 0f10 	cmp.w	r9, #16
 800be8e:	f102 0201 	add.w	r2, r2, #1
 800be92:	f104 0108 	add.w	r1, r4, #8
 800be96:	f300 82d1 	bgt.w	800c43c <_svfprintf_r+0xc9c>
 800be9a:	444b      	add	r3, r9
 800be9c:	2a07      	cmp	r2, #7
 800be9e:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800bea2:	f8c4 9004 	str.w	r9, [r4, #4]
 800bea6:	f340 82dd 	ble.w	800c464 <_svfprintf_r+0xcc4>
 800beaa:	aa1e      	add	r2, sp, #120	; 0x78
 800beac:	4659      	mov	r1, fp
 800beae:	4638      	mov	r0, r7
 800beb0:	f002 f992 	bl	800e1d8 <__ssprint_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f040 85de 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800beba:	ac21      	add	r4, sp, #132	; 0x84
 800bebc:	05e9      	lsls	r1, r5, #23
 800bebe:	9820      	ldr	r0, [sp, #128]	; 0x80
 800bec0:	f100 82d6 	bmi.w	800c470 <_svfprintf_r+0xcd0>
 800bec4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bec6:	3301      	adds	r3, #1
 800bec8:	4430      	add	r0, r6
 800beca:	2b07      	cmp	r3, #7
 800becc:	e9c4 a600 	strd	sl, r6, [r4]
 800bed0:	9020      	str	r0, [sp, #128]	; 0x80
 800bed2:	931f      	str	r3, [sp, #124]	; 0x7c
 800bed4:	f300 8310 	bgt.w	800c4f8 <_svfprintf_r+0xd58>
 800bed8:	3408      	adds	r4, #8
 800beda:	076b      	lsls	r3, r5, #29
 800bedc:	f100 85ac 	bmi.w	800ca38 <_svfprintf_r+0x1298>
 800bee0:	e008      	b.n	800bef4 <_svfprintf_r+0x754>
 800bee2:	bf00      	nop
 800bee4:	0800f125 	.word	0x0800f125
 800bee8:	0800f136 	.word	0x0800f136
 800beec:	0800f4c0 	.word	0x0800f4c0
 800bef0:	0800f4d0 	.word	0x0800f4d0
 800bef4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800bef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800befa:	428a      	cmp	r2, r1
 800befc:	bfac      	ite	ge
 800befe:	189b      	addge	r3, r3, r2
 800bf00:	185b      	addlt	r3, r3, r1
 800bf02:	930a      	str	r3, [sp, #40]	; 0x28
 800bf04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf06:	b13b      	cbz	r3, 800bf18 <_svfprintf_r+0x778>
 800bf08:	aa1e      	add	r2, sp, #120	; 0x78
 800bf0a:	4659      	mov	r1, fp
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f002 f963 	bl	800e1d8 <__ssprint_r>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	f040 85af 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	931f      	str	r3, [sp, #124]	; 0x7c
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f040 85c6 	bne.w	800cab0 <_svfprintf_r+0x1310>
 800bf24:	ac21      	add	r4, sp, #132	; 0x84
 800bf26:	e0e3      	b.n	800c0f0 <_svfprintf_r+0x950>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	9302      	str	r3, [sp, #8]
 800bf2c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800bf30:	e64a      	b.n	800bbc8 <_svfprintf_r+0x428>
 800bf32:	9002      	str	r0, [sp, #8]
 800bf34:	e648      	b.n	800bbc8 <_svfprintf_r+0x428>
 800bf36:	2300      	movs	r3, #0
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	2606      	movs	r6, #6
 800bf3c:	e644      	b.n	800bbc8 <_svfprintf_r+0x428>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	e641      	b.n	800bbc8 <_svfprintf_r+0x428>
 800bf44:	2300      	movs	r3, #0
 800bf46:	eeb0 9b48 	vmov.f64	d9, d8
 800bf4a:	e648      	b.n	800bbde <_svfprintf_r+0x43e>
 800bf4c:	f800 ec01 	strb.w	lr, [r0, #-1]
 800bf50:	e694      	b.n	800bc7c <_svfprintf_r+0x4dc>
 800bf52:	f802 eb01 	strb.w	lr, [r2], #1
 800bf56:	ebac 0102 	sub.w	r1, ip, r2
 800bf5a:	2900      	cmp	r1, #0
 800bf5c:	daf9      	bge.n	800bf52 <_svfprintf_r+0x7b2>
 800bf5e:	1c42      	adds	r2, r0, #1
 800bf60:	3001      	adds	r0, #1
 800bf62:	bfb8      	it	lt
 800bf64:	2200      	movlt	r2, #0
 800bf66:	4413      	add	r3, r2
 800bf68:	e697      	b.n	800bc9a <_svfprintf_r+0x4fa>
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	eb03 0c00 	add.w	ip, r3, r0
 800bf70:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800bf74:	e7ef      	b.n	800bf56 <_svfprintf_r+0x7b6>
 800bf76:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800bf7a:	d006      	beq.n	800bf8a <_svfprintf_r+0x7ea>
 800bf7c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 800bf80:	d118      	bne.n	800bfb4 <_svfprintf_r+0x814>
 800bf82:	f106 0801 	add.w	r8, r6, #1
 800bf86:	2102      	movs	r1, #2
 800bf88:	e001      	b.n	800bf8e <_svfprintf_r+0x7ee>
 800bf8a:	46b0      	mov	r8, r6
 800bf8c:	2103      	movs	r1, #3
 800bf8e:	ab1c      	add	r3, sp, #112	; 0x70
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	ab19      	add	r3, sp, #100	; 0x64
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	4642      	mov	r2, r8
 800bf98:	ab18      	add	r3, sp, #96	; 0x60
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	eeb0 0b49 	vmov.f64	d0, d9
 800bfa0:	f7fc f806 	bl	8007fb0 <_dtoa_r>
 800bfa4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bfa8:	4682      	mov	sl, r0
 800bfaa:	d105      	bne.n	800bfb8 <_svfprintf_r+0x818>
 800bfac:	07eb      	lsls	r3, r5, #31
 800bfae:	d403      	bmi.n	800bfb8 <_svfprintf_r+0x818>
 800bfb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bfb2:	e672      	b.n	800bc9a <_svfprintf_r+0x4fa>
 800bfb4:	46b0      	mov	r8, r6
 800bfb6:	e7e6      	b.n	800bf86 <_svfprintf_r+0x7e6>
 800bfb8:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800bfbc:	eb0a 0308 	add.w	r3, sl, r8
 800bfc0:	d10d      	bne.n	800bfde <_svfprintf_r+0x83e>
 800bfc2:	f89a 2000 	ldrb.w	r2, [sl]
 800bfc6:	2a30      	cmp	r2, #48	; 0x30
 800bfc8:	d107      	bne.n	800bfda <_svfprintf_r+0x83a>
 800bfca:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800bfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd2:	bf1c      	itt	ne
 800bfd4:	f1c8 0201 	rsbne	r2, r8, #1
 800bfd8:	9218      	strne	r2, [sp, #96]	; 0x60
 800bfda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfdc:	4413      	add	r3, r2
 800bfde:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	bf08      	it	eq
 800bfe8:	931c      	streq	r3, [sp, #112]	; 0x70
 800bfea:	2130      	movs	r1, #48	; 0x30
 800bfec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d9de      	bls.n	800bfb0 <_svfprintf_r+0x810>
 800bff2:	1c50      	adds	r0, r2, #1
 800bff4:	901c      	str	r0, [sp, #112]	; 0x70
 800bff6:	7011      	strb	r1, [r2, #0]
 800bff8:	e7f8      	b.n	800bfec <_svfprintf_r+0x84c>
 800bffa:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800bffe:	f47f ae5e 	bne.w	800bcbe <_svfprintf_r+0x51e>
 800c002:	f005 0301 	and.w	r3, r5, #1
 800c006:	f1b8 0f00 	cmp.w	r8, #0
 800c00a:	ea43 0306 	orr.w	r3, r3, r6
 800c00e:	dd18      	ble.n	800c042 <_svfprintf_r+0x8a2>
 800c010:	b383      	cbz	r3, 800c074 <_svfprintf_r+0x8d4>
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	4443      	add	r3, r8
 800c016:	441e      	add	r6, r3
 800c018:	2366      	movs	r3, #102	; 0x66
 800c01a:	9304      	str	r3, [sp, #16]
 800c01c:	e02f      	b.n	800c07e <_svfprintf_r+0x8de>
 800c01e:	f813 cb01 	ldrb.w	ip, [r3], #1
 800c022:	f802 cb01 	strb.w	ip, [r2], #1
 800c026:	e681      	b.n	800bd2c <_svfprintf_r+0x58c>
 800c028:	b941      	cbnz	r1, 800c03c <_svfprintf_r+0x89c>
 800c02a:	2230      	movs	r2, #48	; 0x30
 800c02c:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800c030:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800c034:	3330      	adds	r3, #48	; 0x30
 800c036:	f802 3b01 	strb.w	r3, [r2], #1
 800c03a:	e683      	b.n	800bd44 <_svfprintf_r+0x5a4>
 800c03c:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800c040:	e7f8      	b.n	800c034 <_svfprintf_r+0x894>
 800c042:	b1cb      	cbz	r3, 800c078 <_svfprintf_r+0x8d8>
 800c044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c046:	3301      	adds	r3, #1
 800c048:	e7e5      	b.n	800c016 <_svfprintf_r+0x876>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	4598      	cmp	r8, r3
 800c04e:	db06      	blt.n	800c05e <_svfprintf_r+0x8be>
 800c050:	07e9      	lsls	r1, r5, #31
 800c052:	d52a      	bpl.n	800c0aa <_svfprintf_r+0x90a>
 800c054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c056:	eb08 0603 	add.w	r6, r8, r3
 800c05a:	2367      	movs	r3, #103	; 0x67
 800c05c:	e7dd      	b.n	800c01a <_svfprintf_r+0x87a>
 800c05e:	9b03      	ldr	r3, [sp, #12]
 800c060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c062:	f1b8 0f00 	cmp.w	r8, #0
 800c066:	eb03 0602 	add.w	r6, r3, r2
 800c06a:	dcf6      	bgt.n	800c05a <_svfprintf_r+0x8ba>
 800c06c:	f1c8 0301 	rsb	r3, r8, #1
 800c070:	441e      	add	r6, r3
 800c072:	e7f2      	b.n	800c05a <_svfprintf_r+0x8ba>
 800c074:	4646      	mov	r6, r8
 800c076:	e7cf      	b.n	800c018 <_svfprintf_r+0x878>
 800c078:	2366      	movs	r3, #102	; 0x66
 800c07a:	9304      	str	r3, [sp, #16]
 800c07c:	2601      	movs	r6, #1
 800c07e:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 800c082:	9307      	str	r3, [sp, #28]
 800c084:	d025      	beq.n	800c0d2 <_svfprintf_r+0x932>
 800c086:	2300      	movs	r3, #0
 800c088:	f1b8 0f00 	cmp.w	r8, #0
 800c08c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800c090:	f77f ae6d 	ble.w	800bd6e <_svfprintf_r+0x5ce>
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2bff      	cmp	r3, #255	; 0xff
 800c09a:	d108      	bne.n	800c0ae <_svfprintf_r+0x90e>
 800c09c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0a4:	fb02 6603 	mla	r6, r2, r3, r6
 800c0a8:	e661      	b.n	800bd6e <_svfprintf_r+0x5ce>
 800c0aa:	4646      	mov	r6, r8
 800c0ac:	e7d5      	b.n	800c05a <_svfprintf_r+0x8ba>
 800c0ae:	4543      	cmp	r3, r8
 800c0b0:	daf4      	bge.n	800c09c <_svfprintf_r+0x8fc>
 800c0b2:	eba8 0803 	sub.w	r8, r8, r3
 800c0b6:	9b08      	ldr	r3, [sp, #32]
 800c0b8:	785b      	ldrb	r3, [r3, #1]
 800c0ba:	b133      	cbz	r3, 800c0ca <_svfprintf_r+0x92a>
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	9b08      	ldr	r3, [sp, #32]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	9308      	str	r3, [sp, #32]
 800c0c8:	e7e4      	b.n	800c094 <_svfprintf_r+0x8f4>
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	9306      	str	r3, [sp, #24]
 800c0d0:	e7e0      	b.n	800c094 <_svfprintf_r+0x8f4>
 800c0d2:	9b07      	ldr	r3, [sp, #28]
 800c0d4:	9306      	str	r3, [sp, #24]
 800c0d6:	e64a      	b.n	800bd6e <_svfprintf_r+0x5ce>
 800c0d8:	f108 0304 	add.w	r3, r8, #4
 800c0dc:	06aa      	lsls	r2, r5, #26
 800c0de:	9305      	str	r3, [sp, #20]
 800c0e0:	d50c      	bpl.n	800c0fc <_svfprintf_r+0x95c>
 800c0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c0ea:	17d2      	asrs	r2, r2, #31
 800c0ec:	e9c3 1200 	strd	r1, r2, [r3]
 800c0f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c0f4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c0f8:	f7ff bb8f 	b.w	800b81a <_svfprintf_r+0x7a>
 800c0fc:	06eb      	lsls	r3, r5, #27
 800c0fe:	d504      	bpl.n	800c10a <_svfprintf_r+0x96a>
 800c100:	f8d8 3000 	ldr.w	r3, [r8]
 800c104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	e7f2      	b.n	800c0f0 <_svfprintf_r+0x950>
 800c10a:	066e      	lsls	r6, r5, #25
 800c10c:	d504      	bpl.n	800c118 <_svfprintf_r+0x978>
 800c10e:	f8d8 3000 	ldr.w	r3, [r8]
 800c112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c114:	801a      	strh	r2, [r3, #0]
 800c116:	e7eb      	b.n	800c0f0 <_svfprintf_r+0x950>
 800c118:	05ad      	lsls	r5, r5, #22
 800c11a:	d5f1      	bpl.n	800c100 <_svfprintf_r+0x960>
 800c11c:	f8d8 3000 	ldr.w	r3, [r8]
 800c120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	e7e4      	b.n	800c0f0 <_svfprintf_r+0x950>
 800c126:	f045 0510 	orr.w	r5, r5, #16
 800c12a:	f015 0320 	ands.w	r3, r5, #32
 800c12e:	d020      	beq.n	800c172 <_svfprintf_r+0x9d2>
 800c130:	f108 0307 	add.w	r3, r8, #7
 800c134:	f023 0307 	bic.w	r3, r3, #7
 800c138:	461a      	mov	r2, r3
 800c13a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c13e:	f852 8b08 	ldr.w	r8, [r2], #8
 800c142:	9205      	str	r2, [sp, #20]
 800c144:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800c148:	2300      	movs	r3, #0
 800c14a:	2200      	movs	r2, #0
 800c14c:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800c150:	1c72      	adds	r2, r6, #1
 800c152:	f000 84c3 	beq.w	800cadc <_svfprintf_r+0x133c>
 800c156:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800c15a:	9202      	str	r2, [sp, #8]
 800c15c:	ea58 0209 	orrs.w	r2, r8, r9
 800c160:	f040 84c1 	bne.w	800cae6 <_svfprintf_r+0x1346>
 800c164:	2e00      	cmp	r6, #0
 800c166:	f000 810d 	beq.w	800c384 <_svfprintf_r+0xbe4>
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	f040 84be 	bne.w	800caec <_svfprintf_r+0x134c>
 800c170:	e0ad      	b.n	800c2ce <_svfprintf_r+0xb2e>
 800c172:	4642      	mov	r2, r8
 800c174:	f015 0910 	ands.w	r9, r5, #16
 800c178:	f852 8b04 	ldr.w	r8, [r2], #4
 800c17c:	9205      	str	r2, [sp, #20]
 800c17e:	d001      	beq.n	800c184 <_svfprintf_r+0x9e4>
 800c180:	4699      	mov	r9, r3
 800c182:	e7df      	b.n	800c144 <_svfprintf_r+0x9a4>
 800c184:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800c188:	d002      	beq.n	800c190 <_svfprintf_r+0x9f0>
 800c18a:	fa1f f888 	uxth.w	r8, r8
 800c18e:	e7d9      	b.n	800c144 <_svfprintf_r+0x9a4>
 800c190:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800c194:	d0d6      	beq.n	800c144 <_svfprintf_r+0x9a4>
 800c196:	fa5f f888 	uxtb.w	r8, r8
 800c19a:	e7f1      	b.n	800c180 <_svfprintf_r+0x9e0>
 800c19c:	4643      	mov	r3, r8
 800c19e:	2278      	movs	r2, #120	; 0x78
 800c1a0:	f853 8b04 	ldr.w	r8, [r3], #4
 800c1a4:	9305      	str	r3, [sp, #20]
 800c1a6:	2330      	movs	r3, #48	; 0x30
 800c1a8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800c1ac:	4bae      	ldr	r3, [pc, #696]	; (800c468 <_svfprintf_r+0xcc8>)
 800c1ae:	9312      	str	r3, [sp, #72]	; 0x48
 800c1b0:	f04f 0900 	mov.w	r9, #0
 800c1b4:	f045 0502 	orr.w	r5, r5, #2
 800c1b8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 800c1bc:	2302      	movs	r3, #2
 800c1be:	9204      	str	r2, [sp, #16]
 800c1c0:	e7c3      	b.n	800c14a <_svfprintf_r+0x9aa>
 800c1c2:	4643      	mov	r3, r8
 800c1c4:	1c70      	adds	r0, r6, #1
 800c1c6:	f853 ab04 	ldr.w	sl, [r3], #4
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	f04f 0800 	mov.w	r8, #0
 800c1d0:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 800c1d4:	d010      	beq.n	800c1f8 <_svfprintf_r+0xa58>
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4641      	mov	r1, r8
 800c1da:	4650      	mov	r0, sl
 800c1dc:	f7f4 f838 	bl	8000250 <memchr>
 800c1e0:	9002      	str	r0, [sp, #8]
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f000 80e5 	beq.w	800c3b2 <_svfprintf_r+0xc12>
 800c1e8:	e9cd 8806 	strd	r8, r8, [sp, #24]
 800c1ec:	eba0 060a 	sub.w	r6, r0, sl
 800c1f0:	f8cd 8008 	str.w	r8, [sp, #8]
 800c1f4:	46c1      	mov	r9, r8
 800c1f6:	e5c2      	b.n	800bd7e <_svfprintf_r+0x5de>
 800c1f8:	4650      	mov	r0, sl
 800c1fa:	f7f4 f821 	bl	8000240 <strlen>
 800c1fe:	46c1      	mov	r9, r8
 800c200:	4606      	mov	r6, r0
 800c202:	f8cd 8008 	str.w	r8, [sp, #8]
 800c206:	464b      	mov	r3, r9
 800c208:	e48a      	b.n	800bb20 <_svfprintf_r+0x380>
 800c20a:	f045 0510 	orr.w	r5, r5, #16
 800c20e:	f015 0320 	ands.w	r3, r5, #32
 800c212:	d00b      	beq.n	800c22c <_svfprintf_r+0xa8c>
 800c214:	f108 0307 	add.w	r3, r8, #7
 800c218:	f023 0307 	bic.w	r3, r3, #7
 800c21c:	461a      	mov	r2, r3
 800c21e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c222:	f852 8b08 	ldr.w	r8, [r2], #8
 800c226:	9205      	str	r2, [sp, #20]
 800c228:	2301      	movs	r3, #1
 800c22a:	e78e      	b.n	800c14a <_svfprintf_r+0x9aa>
 800c22c:	4642      	mov	r2, r8
 800c22e:	f015 0910 	ands.w	r9, r5, #16
 800c232:	f852 8b04 	ldr.w	r8, [r2], #4
 800c236:	9205      	str	r2, [sp, #20]
 800c238:	d001      	beq.n	800c23e <_svfprintf_r+0xa9e>
 800c23a:	4699      	mov	r9, r3
 800c23c:	e7f4      	b.n	800c228 <_svfprintf_r+0xa88>
 800c23e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800c242:	d002      	beq.n	800c24a <_svfprintf_r+0xaaa>
 800c244:	fa1f f888 	uxth.w	r8, r8
 800c248:	e7ee      	b.n	800c228 <_svfprintf_r+0xa88>
 800c24a:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800c24e:	d0eb      	beq.n	800c228 <_svfprintf_r+0xa88>
 800c250:	fa5f f888 	uxtb.w	r8, r8
 800c254:	e7f1      	b.n	800c23a <_svfprintf_r+0xa9a>
 800c256:	4b85      	ldr	r3, [pc, #532]	; (800c46c <_svfprintf_r+0xccc>)
 800c258:	9312      	str	r3, [sp, #72]	; 0x48
 800c25a:	f015 0320 	ands.w	r3, r5, #32
 800c25e:	d01c      	beq.n	800c29a <_svfprintf_r+0xafa>
 800c260:	f108 0307 	add.w	r3, r8, #7
 800c264:	f023 0307 	bic.w	r3, r3, #7
 800c268:	461a      	mov	r2, r3
 800c26a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c26e:	f852 8b08 	ldr.w	r8, [r2], #8
 800c272:	9205      	str	r2, [sp, #20]
 800c274:	07e9      	lsls	r1, r5, #31
 800c276:	d50a      	bpl.n	800c28e <_svfprintf_r+0xaee>
 800c278:	ea58 0309 	orrs.w	r3, r8, r9
 800c27c:	d007      	beq.n	800c28e <_svfprintf_r+0xaee>
 800c27e:	2330      	movs	r3, #48	; 0x30
 800c280:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800c284:	9b04      	ldr	r3, [sp, #16]
 800c286:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800c28a:	f045 0502 	orr.w	r5, r5, #2
 800c28e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800c292:	2302      	movs	r3, #2
 800c294:	e759      	b.n	800c14a <_svfprintf_r+0x9aa>
 800c296:	4b74      	ldr	r3, [pc, #464]	; (800c468 <_svfprintf_r+0xcc8>)
 800c298:	e7de      	b.n	800c258 <_svfprintf_r+0xab8>
 800c29a:	4642      	mov	r2, r8
 800c29c:	f015 0910 	ands.w	r9, r5, #16
 800c2a0:	f852 8b04 	ldr.w	r8, [r2], #4
 800c2a4:	9205      	str	r2, [sp, #20]
 800c2a6:	d001      	beq.n	800c2ac <_svfprintf_r+0xb0c>
 800c2a8:	4699      	mov	r9, r3
 800c2aa:	e7e3      	b.n	800c274 <_svfprintf_r+0xad4>
 800c2ac:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800c2b0:	d002      	beq.n	800c2b8 <_svfprintf_r+0xb18>
 800c2b2:	fa1f f888 	uxth.w	r8, r8
 800c2b6:	e7dd      	b.n	800c274 <_svfprintf_r+0xad4>
 800c2b8:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800c2bc:	d0da      	beq.n	800c274 <_svfprintf_r+0xad4>
 800c2be:	fa5f f888 	uxtb.w	r8, r8
 800c2c2:	e7f1      	b.n	800c2a8 <_svfprintf_r+0xb08>
 800c2c4:	f1b8 0f0a 	cmp.w	r8, #10
 800c2c8:	f179 0300 	sbcs.w	r3, r9, #0
 800c2cc:	d207      	bcs.n	800c2de <_svfprintf_r+0xb3e>
 800c2ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c2d2:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 800c2d6:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 800c2da:	f000 bc25 	b.w	800cb28 <_svfprintf_r+0x1388>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	9b02      	ldr	r3, [sp, #8]
 800c2e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2e8:	ad4a      	add	r5, sp, #296	; 0x128
 800c2ea:	9306      	str	r3, [sp, #24]
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f4 f9b8 	bl	8000668 <__aeabi_uldivmod>
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	9b06      	ldr	r3, [sp, #24]
 800c300:	3230      	adds	r2, #48	; 0x30
 800c302:	f105 3aff 	add.w	sl, r5, #4294967295
 800c306:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c30a:	b1db      	cbz	r3, 800c344 <_svfprintf_r+0xba4>
 800c30c:	9b08      	ldr	r3, [sp, #32]
 800c30e:	9a03      	ldr	r2, [sp, #12]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d116      	bne.n	800c344 <_svfprintf_r+0xba4>
 800c316:	2aff      	cmp	r2, #255	; 0xff
 800c318:	d014      	beq.n	800c344 <_svfprintf_r+0xba4>
 800c31a:	f1b8 0f0a 	cmp.w	r8, #10
 800c31e:	f179 0300 	sbcs.w	r3, r9, #0
 800c322:	d30f      	bcc.n	800c344 <_svfprintf_r+0xba4>
 800c324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c326:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c328:	ebaa 0a03 	sub.w	sl, sl, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	4650      	mov	r0, sl
 800c330:	f7fe faa3 	bl	800a87a <strncpy>
 800c334:	9b08      	ldr	r3, [sp, #32]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	b11b      	cbz	r3, 800c342 <_svfprintf_r+0xba2>
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	3301      	adds	r3, #1
 800c33e:	9308      	str	r3, [sp, #32]
 800c340:	2300      	movs	r3, #0
 800c342:	9303      	str	r3, [sp, #12]
 800c344:	2300      	movs	r3, #0
 800c346:	220a      	movs	r2, #10
 800c348:	4640      	mov	r0, r8
 800c34a:	4649      	mov	r1, r9
 800c34c:	f7f4 f98c 	bl	8000668 <__aeabi_uldivmod>
 800c350:	f1b8 0f0a 	cmp.w	r8, #10
 800c354:	f179 0300 	sbcs.w	r3, r9, #0
 800c358:	f0c0 83e6 	bcc.w	800cb28 <_svfprintf_r+0x1388>
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	4655      	mov	r5, sl
 800c362:	e7c3      	b.n	800c2ec <_svfprintf_r+0xb4c>
 800c364:	f008 030f 	and.w	r3, r8, #15
 800c368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c36a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c36e:	5cd3      	ldrb	r3, [r2, r3]
 800c370:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800c374:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 800c378:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800c37c:	ea58 0309 	orrs.w	r3, r8, r9
 800c380:	d1f0      	bne.n	800c364 <_svfprintf_r+0xbc4>
 800c382:	e3d1      	b.n	800cb28 <_svfprintf_r+0x1388>
 800c384:	b92b      	cbnz	r3, 800c392 <_svfprintf_r+0xbf2>
 800c386:	07e8      	lsls	r0, r5, #31
 800c388:	d503      	bpl.n	800c392 <_svfprintf_r+0xbf2>
 800c38a:	2330      	movs	r3, #48	; 0x30
 800c38c:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 800c390:	e7a1      	b.n	800c2d6 <_svfprintf_r+0xb36>
 800c392:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800c396:	e3c7      	b.n	800cb28 <_svfprintf_r+0x1388>
 800c398:	9b04      	ldr	r3, [sp, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 838e 	beq.w	800cabc <_svfprintf_r+0x131c>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800c3a6:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800c3aa:	f8cd 8014 	str.w	r8, [sp, #20]
 800c3ae:	f7ff bb4e 	b.w	800ba4e <_svfprintf_r+0x2ae>
 800c3b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c3b6:	e726      	b.n	800c206 <_svfprintf_r+0xa66>
 800c3b8:	2110      	movs	r1, #16
 800c3ba:	6061      	str	r1, [r4, #4]
 800c3bc:	2a07      	cmp	r2, #7
 800c3be:	4461      	add	r1, ip
 800c3c0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800c3c4:	dd0a      	ble.n	800c3dc <_svfprintf_r+0xc3c>
 800c3c6:	aa1e      	add	r2, sp, #120	; 0x78
 800c3c8:	4659      	mov	r1, fp
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	9315      	str	r3, [sp, #84]	; 0x54
 800c3ce:	f001 ff03 	bl	800e1d8 <__ssprint_r>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	f040 834f 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3da:	a821      	add	r0, sp, #132	; 0x84
 800c3dc:	3b10      	subs	r3, #16
 800c3de:	4604      	mov	r4, r0
 800c3e0:	e4e8      	b.n	800bdb4 <_svfprintf_r+0x614>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	e502      	b.n	800bdec <_svfprintf_r+0x64c>
 800c3e6:	aa1e      	add	r2, sp, #120	; 0x78
 800c3e8:	4659      	mov	r1, fp
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f001 fef4 	bl	800e1d8 <__ssprint_r>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f040 8340 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c3f6:	ac21      	add	r4, sp, #132	; 0x84
 800c3f8:	e50a      	b.n	800be10 <_svfprintf_r+0x670>
 800c3fa:	aa1e      	add	r2, sp, #120	; 0x78
 800c3fc:	4659      	mov	r1, fp
 800c3fe:	4638      	mov	r0, r7
 800c400:	f001 feea 	bl	800e1d8 <__ssprint_r>
 800c404:	2800      	cmp	r0, #0
 800c406:	f040 8336 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c40a:	ac21      	add	r4, sp, #132	; 0x84
 800c40c:	e510      	b.n	800be30 <_svfprintf_r+0x690>
 800c40e:	2110      	movs	r1, #16
 800c410:	6061      	str	r1, [r4, #4]
 800c412:	2a07      	cmp	r2, #7
 800c414:	4461      	add	r1, ip
 800c416:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800c41a:	dd0a      	ble.n	800c432 <_svfprintf_r+0xc92>
 800c41c:	aa1e      	add	r2, sp, #120	; 0x78
 800c41e:	4659      	mov	r1, fp
 800c420:	4638      	mov	r0, r7
 800c422:	9313      	str	r3, [sp, #76]	; 0x4c
 800c424:	f001 fed8 	bl	800e1d8 <__ssprint_r>
 800c428:	2800      	cmp	r0, #0
 800c42a:	f040 8324 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c42e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c430:	a821      	add	r0, sp, #132	; 0x84
 800c432:	3b10      	subs	r3, #16
 800c434:	4604      	mov	r4, r0
 800c436:	e503      	b.n	800be40 <_svfprintf_r+0x6a0>
 800c438:	4604      	mov	r4, r0
 800c43a:	e51d      	b.n	800be78 <_svfprintf_r+0x6d8>
 800c43c:	2010      	movs	r0, #16
 800c43e:	4403      	add	r3, r0
 800c440:	2a07      	cmp	r2, #7
 800c442:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800c446:	6060      	str	r0, [r4, #4]
 800c448:	dd08      	ble.n	800c45c <_svfprintf_r+0xcbc>
 800c44a:	aa1e      	add	r2, sp, #120	; 0x78
 800c44c:	4659      	mov	r1, fp
 800c44e:	4638      	mov	r0, r7
 800c450:	f001 fec2 	bl	800e1d8 <__ssprint_r>
 800c454:	2800      	cmp	r0, #0
 800c456:	f040 830e 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c45a:	a921      	add	r1, sp, #132	; 0x84
 800c45c:	f1a9 0910 	sub.w	r9, r9, #16
 800c460:	460c      	mov	r4, r1
 800c462:	e50e      	b.n	800be82 <_svfprintf_r+0x6e2>
 800c464:	460c      	mov	r4, r1
 800c466:	e529      	b.n	800bebc <_svfprintf_r+0x71c>
 800c468:	0800f125 	.word	0x0800f125
 800c46c:	0800f136 	.word	0x0800f136
 800c470:	9b04      	ldr	r3, [sp, #16]
 800c472:	2b65      	cmp	r3, #101	; 0x65
 800c474:	f340 8252 	ble.w	800c91c <_svfprintf_r+0x117c>
 800c478:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c480:	d16b      	bne.n	800c55a <_svfprintf_r+0xdba>
 800c482:	4b74      	ldr	r3, [pc, #464]	; (800c654 <_svfprintf_r+0xeb4>)
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	2301      	movs	r3, #1
 800c488:	4418      	add	r0, r3
 800c48a:	6063      	str	r3, [r4, #4]
 800c48c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c48e:	9020      	str	r0, [sp, #128]	; 0x80
 800c490:	3301      	adds	r3, #1
 800c492:	2b07      	cmp	r3, #7
 800c494:	931f      	str	r3, [sp, #124]	; 0x7c
 800c496:	dc39      	bgt.n	800c50c <_svfprintf_r+0xd6c>
 800c498:	3408      	adds	r4, #8
 800c49a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c49c:	9a03      	ldr	r2, [sp, #12]
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	db02      	blt.n	800c4a8 <_svfprintf_r+0xd08>
 800c4a2:	07ea      	lsls	r2, r5, #31
 800c4a4:	f57f ad19 	bpl.w	800beda <_svfprintf_r+0x73a>
 800c4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4b0:	6063      	str	r3, [r4, #4]
 800c4b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4b4:	4413      	add	r3, r2
 800c4b6:	9320      	str	r3, [sp, #128]	; 0x80
 800c4b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	2b07      	cmp	r3, #7
 800c4be:	931f      	str	r3, [sp, #124]	; 0x7c
 800c4c0:	dc2e      	bgt.n	800c520 <_svfprintf_r+0xd80>
 800c4c2:	3408      	adds	r4, #8
 800c4c4:	9b03      	ldr	r3, [sp, #12]
 800c4c6:	1e5e      	subs	r6, r3, #1
 800c4c8:	2e00      	cmp	r6, #0
 800c4ca:	f77f ad06 	ble.w	800beda <_svfprintf_r+0x73a>
 800c4ce:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800c658 <_svfprintf_r+0xeb8>
 800c4d2:	f04f 0910 	mov.w	r9, #16
 800c4d6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800c4da:	2e10      	cmp	r6, #16
 800c4dc:	f103 0301 	add.w	r3, r3, #1
 800c4e0:	f104 0108 	add.w	r1, r4, #8
 800c4e4:	f8c4 8000 	str.w	r8, [r4]
 800c4e8:	dc24      	bgt.n	800c534 <_svfprintf_r+0xd94>
 800c4ea:	6066      	str	r6, [r4, #4]
 800c4ec:	2b07      	cmp	r3, #7
 800c4ee:	4416      	add	r6, r2
 800c4f0:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800c4f4:	f340 829d 	ble.w	800ca32 <_svfprintf_r+0x1292>
 800c4f8:	aa1e      	add	r2, sp, #120	; 0x78
 800c4fa:	4659      	mov	r1, fp
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f001 fe6b 	bl	800e1d8 <__ssprint_r>
 800c502:	2800      	cmp	r0, #0
 800c504:	f040 82b7 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c508:	ac21      	add	r4, sp, #132	; 0x84
 800c50a:	e4e6      	b.n	800beda <_svfprintf_r+0x73a>
 800c50c:	aa1e      	add	r2, sp, #120	; 0x78
 800c50e:	4659      	mov	r1, fp
 800c510:	4638      	mov	r0, r7
 800c512:	f001 fe61 	bl	800e1d8 <__ssprint_r>
 800c516:	2800      	cmp	r0, #0
 800c518:	f040 82ad 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c51c:	ac21      	add	r4, sp, #132	; 0x84
 800c51e:	e7bc      	b.n	800c49a <_svfprintf_r+0xcfa>
 800c520:	aa1e      	add	r2, sp, #120	; 0x78
 800c522:	4659      	mov	r1, fp
 800c524:	4638      	mov	r0, r7
 800c526:	f001 fe57 	bl	800e1d8 <__ssprint_r>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	f040 82a3 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c530:	ac21      	add	r4, sp, #132	; 0x84
 800c532:	e7c7      	b.n	800c4c4 <_svfprintf_r+0xd24>
 800c534:	3210      	adds	r2, #16
 800c536:	2b07      	cmp	r3, #7
 800c538:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800c53c:	f8c4 9004 	str.w	r9, [r4, #4]
 800c540:	dd08      	ble.n	800c554 <_svfprintf_r+0xdb4>
 800c542:	aa1e      	add	r2, sp, #120	; 0x78
 800c544:	4659      	mov	r1, fp
 800c546:	4638      	mov	r0, r7
 800c548:	f001 fe46 	bl	800e1d8 <__ssprint_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f040 8292 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c552:	a921      	add	r1, sp, #132	; 0x84
 800c554:	3e10      	subs	r6, #16
 800c556:	460c      	mov	r4, r1
 800c558:	e7bd      	b.n	800c4d6 <_svfprintf_r+0xd36>
 800c55a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dc7d      	bgt.n	800c65c <_svfprintf_r+0xebc>
 800c560:	4b3c      	ldr	r3, [pc, #240]	; (800c654 <_svfprintf_r+0xeb4>)
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	2301      	movs	r3, #1
 800c566:	4418      	add	r0, r3
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c56c:	9020      	str	r0, [sp, #128]	; 0x80
 800c56e:	3301      	adds	r3, #1
 800c570:	2b07      	cmp	r3, #7
 800c572:	931f      	str	r3, [sp, #124]	; 0x7c
 800c574:	dc47      	bgt.n	800c606 <_svfprintf_r+0xe66>
 800c576:	3408      	adds	r4, #8
 800c578:	9903      	ldr	r1, [sp, #12]
 800c57a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c57c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c57e:	430a      	orrs	r2, r1
 800c580:	f005 0101 	and.w	r1, r5, #1
 800c584:	430a      	orrs	r2, r1
 800c586:	f43f aca8 	beq.w	800beda <_svfprintf_r+0x73a>
 800c58a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c58c:	6022      	str	r2, [r4, #0]
 800c58e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c590:	6062      	str	r2, [r4, #4]
 800c592:	4413      	add	r3, r2
 800c594:	9320      	str	r3, [sp, #128]	; 0x80
 800c596:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c598:	3301      	adds	r3, #1
 800c59a:	2b07      	cmp	r3, #7
 800c59c:	931f      	str	r3, [sp, #124]	; 0x7c
 800c59e:	dc3c      	bgt.n	800c61a <_svfprintf_r+0xe7a>
 800c5a0:	f104 0308 	add.w	r3, r4, #8
 800c5a4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	da1c      	bge.n	800c5e4 <_svfprintf_r+0xe44>
 800c5aa:	4c2b      	ldr	r4, [pc, #172]	; (800c658 <_svfprintf_r+0xeb8>)
 800c5ac:	4276      	negs	r6, r6
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f04f 0810 	mov.w	r8, #16
 800c5b4:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800c5b8:	2e10      	cmp	r6, #16
 800c5ba:	f101 0101 	add.w	r1, r1, #1
 800c5be:	f103 0308 	add.w	r3, r3, #8
 800c5c2:	6014      	str	r4, [r2, #0]
 800c5c4:	dc33      	bgt.n	800c62e <_svfprintf_r+0xe8e>
 800c5c6:	6056      	str	r6, [r2, #4]
 800c5c8:	2907      	cmp	r1, #7
 800c5ca:	4406      	add	r6, r0
 800c5cc:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 800c5d0:	dd08      	ble.n	800c5e4 <_svfprintf_r+0xe44>
 800c5d2:	aa1e      	add	r2, sp, #120	; 0x78
 800c5d4:	4659      	mov	r1, fp
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	f001 fdfe 	bl	800e1d8 <__ssprint_r>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f040 824a 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c5e2:	ab21      	add	r3, sp, #132	; 0x84
 800c5e4:	9a03      	ldr	r2, [sp, #12]
 800c5e6:	605a      	str	r2, [r3, #4]
 800c5e8:	9903      	ldr	r1, [sp, #12]
 800c5ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5ec:	f8c3 a000 	str.w	sl, [r3]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	9220      	str	r2, [sp, #128]	; 0x80
 800c5f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c5f6:	3201      	adds	r2, #1
 800c5f8:	2a07      	cmp	r2, #7
 800c5fa:	921f      	str	r2, [sp, #124]	; 0x7c
 800c5fc:	f73f af7c 	bgt.w	800c4f8 <_svfprintf_r+0xd58>
 800c600:	f103 0408 	add.w	r4, r3, #8
 800c604:	e469      	b.n	800beda <_svfprintf_r+0x73a>
 800c606:	aa1e      	add	r2, sp, #120	; 0x78
 800c608:	4659      	mov	r1, fp
 800c60a:	4638      	mov	r0, r7
 800c60c:	f001 fde4 	bl	800e1d8 <__ssprint_r>
 800c610:	2800      	cmp	r0, #0
 800c612:	f040 8230 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c616:	ac21      	add	r4, sp, #132	; 0x84
 800c618:	e7ae      	b.n	800c578 <_svfprintf_r+0xdd8>
 800c61a:	aa1e      	add	r2, sp, #120	; 0x78
 800c61c:	4659      	mov	r1, fp
 800c61e:	4638      	mov	r0, r7
 800c620:	f001 fdda 	bl	800e1d8 <__ssprint_r>
 800c624:	2800      	cmp	r0, #0
 800c626:	f040 8226 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c62a:	ab21      	add	r3, sp, #132	; 0x84
 800c62c:	e7ba      	b.n	800c5a4 <_svfprintf_r+0xe04>
 800c62e:	3010      	adds	r0, #16
 800c630:	2907      	cmp	r1, #7
 800c632:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800c636:	f8c2 8004 	str.w	r8, [r2, #4]
 800c63a:	dd08      	ble.n	800c64e <_svfprintf_r+0xeae>
 800c63c:	aa1e      	add	r2, sp, #120	; 0x78
 800c63e:	4659      	mov	r1, fp
 800c640:	4638      	mov	r0, r7
 800c642:	f001 fdc9 	bl	800e1d8 <__ssprint_r>
 800c646:	2800      	cmp	r0, #0
 800c648:	f040 8215 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c64c:	ab21      	add	r3, sp, #132	; 0x84
 800c64e:	3e10      	subs	r6, #16
 800c650:	461a      	mov	r2, r3
 800c652:	e7af      	b.n	800c5b4 <_svfprintf_r+0xe14>
 800c654:	0800f147 	.word	0x0800f147
 800c658:	0800f4d0 	.word	0x0800f4d0
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	4543      	cmp	r3, r8
 800c660:	bfa8      	it	ge
 800c662:	4643      	movge	r3, r8
 800c664:	2b00      	cmp	r3, #0
 800c666:	4699      	mov	r9, r3
 800c668:	dd0a      	ble.n	800c680 <_svfprintf_r+0xee0>
 800c66a:	4418      	add	r0, r3
 800c66c:	e9c4 a300 	strd	sl, r3, [r4]
 800c670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c672:	9020      	str	r0, [sp, #128]	; 0x80
 800c674:	3301      	adds	r3, #1
 800c676:	2b07      	cmp	r3, #7
 800c678:	931f      	str	r3, [sp, #124]	; 0x7c
 800c67a:	f300 8094 	bgt.w	800c7a6 <_svfprintf_r+0x1006>
 800c67e:	3408      	adds	r4, #8
 800c680:	f1b9 0f00 	cmp.w	r9, #0
 800c684:	bfac      	ite	ge
 800c686:	eba8 0609 	subge.w	r6, r8, r9
 800c68a:	4646      	movlt	r6, r8
 800c68c:	2e00      	cmp	r6, #0
 800c68e:	dd1c      	ble.n	800c6ca <_svfprintf_r+0xf2a>
 800c690:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 800cad4 <_svfprintf_r+0x1334>
 800c694:	f8c4 9000 	str.w	r9, [r4]
 800c698:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800c69c:	2e10      	cmp	r6, #16
 800c69e:	f103 0301 	add.w	r3, r3, #1
 800c6a2:	f104 0108 	add.w	r1, r4, #8
 800c6a6:	f300 8088 	bgt.w	800c7ba <_svfprintf_r+0x101a>
 800c6aa:	6066      	str	r6, [r4, #4]
 800c6ac:	2b07      	cmp	r3, #7
 800c6ae:	4416      	add	r6, r2
 800c6b0:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800c6b4:	f340 8094 	ble.w	800c7e0 <_svfprintf_r+0x1040>
 800c6b8:	aa1e      	add	r2, sp, #120	; 0x78
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f001 fd8b 	bl	800e1d8 <__ssprint_r>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f040 81d7 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c6c8:	ac21      	add	r4, sp, #132	; 0x84
 800c6ca:	056b      	lsls	r3, r5, #21
 800c6cc:	eb0a 0608 	add.w	r6, sl, r8
 800c6d0:	d50c      	bpl.n	800c6ec <_svfprintf_r+0xf4c>
 800c6d2:	9b07      	ldr	r3, [sp, #28]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 8085 	bne.w	800c7e4 <_svfprintf_r+0x1044>
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f040 8084 	bne.w	800c7ea <_svfprintf_r+0x104a>
 800c6e2:	9b03      	ldr	r3, [sp, #12]
 800c6e4:	4453      	add	r3, sl
 800c6e6:	429e      	cmp	r6, r3
 800c6e8:	bf28      	it	cs
 800c6ea:	461e      	movcs	r6, r3
 800c6ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c6ee:	9a03      	ldr	r2, [sp, #12]
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	db01      	blt.n	800c6f8 <_svfprintf_r+0xf58>
 800c6f4:	07e8      	lsls	r0, r5, #31
 800c6f6:	d50e      	bpl.n	800c716 <_svfprintf_r+0xf76>
 800c6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6fa:	6023      	str	r3, [r4, #0]
 800c6fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c700:	6063      	str	r3, [r4, #4]
 800c702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c704:	4413      	add	r3, r2
 800c706:	9320      	str	r3, [sp, #128]	; 0x80
 800c708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c70a:	3301      	adds	r3, #1
 800c70c:	2b07      	cmp	r3, #7
 800c70e:	931f      	str	r3, [sp, #124]	; 0x7c
 800c710:	f300 80f0 	bgt.w	800c8f4 <_svfprintf_r+0x1154>
 800c714:	3408      	adds	r4, #8
 800c716:	9b03      	ldr	r3, [sp, #12]
 800c718:	9903      	ldr	r1, [sp, #12]
 800c71a:	eb0a 0203 	add.w	r2, sl, r3
 800c71e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c720:	1b92      	subs	r2, r2, r6
 800c722:	eba1 0803 	sub.w	r8, r1, r3
 800c726:	4590      	cmp	r8, r2
 800c728:	bfa8      	it	ge
 800c72a:	4690      	movge	r8, r2
 800c72c:	f1b8 0f00 	cmp.w	r8, #0
 800c730:	dd0b      	ble.n	800c74a <_svfprintf_r+0xfaa>
 800c732:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c734:	4443      	add	r3, r8
 800c736:	9320      	str	r3, [sp, #128]	; 0x80
 800c738:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c73a:	3301      	adds	r3, #1
 800c73c:	2b07      	cmp	r3, #7
 800c73e:	e9c4 6800 	strd	r6, r8, [r4]
 800c742:	931f      	str	r3, [sp, #124]	; 0x7c
 800c744:	f300 80e0 	bgt.w	800c908 <_svfprintf_r+0x1168>
 800c748:	3408      	adds	r4, #8
 800c74a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	f1b8 0f00 	cmp.w	r8, #0
 800c752:	eba3 0606 	sub.w	r6, r3, r6
 800c756:	bfa8      	it	ge
 800c758:	eba6 0608 	subge.w	r6, r6, r8
 800c75c:	2e00      	cmp	r6, #0
 800c75e:	f77f abbc 	ble.w	800beda <_svfprintf_r+0x73a>
 800c762:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800cad4 <_svfprintf_r+0x1334>
 800c766:	f04f 0910 	mov.w	r9, #16
 800c76a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800c76e:	2e10      	cmp	r6, #16
 800c770:	f103 0301 	add.w	r3, r3, #1
 800c774:	f104 0108 	add.w	r1, r4, #8
 800c778:	f8c4 8000 	str.w	r8, [r4]
 800c77c:	f77f aeb5 	ble.w	800c4ea <_svfprintf_r+0xd4a>
 800c780:	3210      	adds	r2, #16
 800c782:	2b07      	cmp	r3, #7
 800c784:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800c788:	f8c4 9004 	str.w	r9, [r4, #4]
 800c78c:	dd08      	ble.n	800c7a0 <_svfprintf_r+0x1000>
 800c78e:	aa1e      	add	r2, sp, #120	; 0x78
 800c790:	4659      	mov	r1, fp
 800c792:	4638      	mov	r0, r7
 800c794:	f001 fd20 	bl	800e1d8 <__ssprint_r>
 800c798:	2800      	cmp	r0, #0
 800c79a:	f040 816c 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c79e:	a921      	add	r1, sp, #132	; 0x84
 800c7a0:	3e10      	subs	r6, #16
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	e7e1      	b.n	800c76a <_svfprintf_r+0xfca>
 800c7a6:	aa1e      	add	r2, sp, #120	; 0x78
 800c7a8:	4659      	mov	r1, fp
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f001 fd14 	bl	800e1d8 <__ssprint_r>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	f040 8160 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c7b6:	ac21      	add	r4, sp, #132	; 0x84
 800c7b8:	e762      	b.n	800c680 <_svfprintf_r+0xee0>
 800c7ba:	2010      	movs	r0, #16
 800c7bc:	4402      	add	r2, r0
 800c7be:	2b07      	cmp	r3, #7
 800c7c0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800c7c4:	6060      	str	r0, [r4, #4]
 800c7c6:	dd08      	ble.n	800c7da <_svfprintf_r+0x103a>
 800c7c8:	aa1e      	add	r2, sp, #120	; 0x78
 800c7ca:	4659      	mov	r1, fp
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f001 fd03 	bl	800e1d8 <__ssprint_r>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 814f 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c7d8:	a921      	add	r1, sp, #132	; 0x84
 800c7da:	3e10      	subs	r6, #16
 800c7dc:	460c      	mov	r4, r1
 800c7de:	e759      	b.n	800c694 <_svfprintf_r+0xef4>
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	e772      	b.n	800c6ca <_svfprintf_r+0xf2a>
 800c7e4:	9b06      	ldr	r3, [sp, #24]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d053      	beq.n	800c892 <_svfprintf_r+0x10f2>
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	9306      	str	r3, [sp, #24]
 800c7f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7f8:	6063      	str	r3, [r4, #4]
 800c7fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c7fc:	4413      	add	r3, r2
 800c7fe:	9320      	str	r3, [sp, #128]	; 0x80
 800c800:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c802:	3301      	adds	r3, #1
 800c804:	2b07      	cmp	r3, #7
 800c806:	931f      	str	r3, [sp, #124]	; 0x7c
 800c808:	dc4a      	bgt.n	800c8a0 <_svfprintf_r+0x1100>
 800c80a:	3408      	adds	r4, #8
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	9a08      	ldr	r2, [sp, #32]
 800c810:	eb0a 0903 	add.w	r9, sl, r3
 800c814:	eba9 0306 	sub.w	r3, r9, r6
 800c818:	f892 9000 	ldrb.w	r9, [r2]
 800c81c:	4599      	cmp	r9, r3
 800c81e:	bfa8      	it	ge
 800c820:	4699      	movge	r9, r3
 800c822:	f1b9 0f00 	cmp.w	r9, #0
 800c826:	dd0a      	ble.n	800c83e <_svfprintf_r+0x109e>
 800c828:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c82a:	444b      	add	r3, r9
 800c82c:	9320      	str	r3, [sp, #128]	; 0x80
 800c82e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c830:	3301      	adds	r3, #1
 800c832:	2b07      	cmp	r3, #7
 800c834:	e9c4 6900 	strd	r6, r9, [r4]
 800c838:	931f      	str	r3, [sp, #124]	; 0x7c
 800c83a:	dc3b      	bgt.n	800c8b4 <_svfprintf_r+0x1114>
 800c83c:	3408      	adds	r4, #8
 800c83e:	9b08      	ldr	r3, [sp, #32]
 800c840:	f893 8000 	ldrb.w	r8, [r3]
 800c844:	f1b9 0f00 	cmp.w	r9, #0
 800c848:	bfa8      	it	ge
 800c84a:	eba8 0809 	subge.w	r8, r8, r9
 800c84e:	f1b8 0f00 	cmp.w	r8, #0
 800c852:	dd1a      	ble.n	800c88a <_svfprintf_r+0x10ea>
 800c854:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800c858:	489e      	ldr	r0, [pc, #632]	; (800cad4 <_svfprintf_r+0x1334>)
 800c85a:	6020      	str	r0, [r4, #0]
 800c85c:	f1b8 0f10 	cmp.w	r8, #16
 800c860:	f103 0301 	add.w	r3, r3, #1
 800c864:	f104 0108 	add.w	r1, r4, #8
 800c868:	dc2e      	bgt.n	800c8c8 <_svfprintf_r+0x1128>
 800c86a:	4442      	add	r2, r8
 800c86c:	2b07      	cmp	r3, #7
 800c86e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800c872:	f8c4 8004 	str.w	r8, [r4, #4]
 800c876:	dd3b      	ble.n	800c8f0 <_svfprintf_r+0x1150>
 800c878:	aa1e      	add	r2, sp, #120	; 0x78
 800c87a:	4659      	mov	r1, fp
 800c87c:	4638      	mov	r0, r7
 800c87e:	f001 fcab 	bl	800e1d8 <__ssprint_r>
 800c882:	2800      	cmp	r0, #0
 800c884:	f040 80f7 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c888:	ac21      	add	r4, sp, #132	; 0x84
 800c88a:	9b08      	ldr	r3, [sp, #32]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	441e      	add	r6, r3
 800c890:	e71f      	b.n	800c6d2 <_svfprintf_r+0xf32>
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	3b01      	subs	r3, #1
 800c896:	9308      	str	r3, [sp, #32]
 800c898:	9b07      	ldr	r3, [sp, #28]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	9307      	str	r3, [sp, #28]
 800c89e:	e7a7      	b.n	800c7f0 <_svfprintf_r+0x1050>
 800c8a0:	aa1e      	add	r2, sp, #120	; 0x78
 800c8a2:	4659      	mov	r1, fp
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	f001 fc97 	bl	800e1d8 <__ssprint_r>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	f040 80e3 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c8b0:	ac21      	add	r4, sp, #132	; 0x84
 800c8b2:	e7ab      	b.n	800c80c <_svfprintf_r+0x106c>
 800c8b4:	aa1e      	add	r2, sp, #120	; 0x78
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f001 fc8d 	bl	800e1d8 <__ssprint_r>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f040 80d9 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c8c4:	ac21      	add	r4, sp, #132	; 0x84
 800c8c6:	e7ba      	b.n	800c83e <_svfprintf_r+0x109e>
 800c8c8:	2010      	movs	r0, #16
 800c8ca:	4402      	add	r2, r0
 800c8cc:	2b07      	cmp	r3, #7
 800c8ce:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800c8d2:	6060      	str	r0, [r4, #4]
 800c8d4:	dd08      	ble.n	800c8e8 <_svfprintf_r+0x1148>
 800c8d6:	aa1e      	add	r2, sp, #120	; 0x78
 800c8d8:	4659      	mov	r1, fp
 800c8da:	4638      	mov	r0, r7
 800c8dc:	f001 fc7c 	bl	800e1d8 <__ssprint_r>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	f040 80c8 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c8e6:	a921      	add	r1, sp, #132	; 0x84
 800c8e8:	f1a8 0810 	sub.w	r8, r8, #16
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	e7b1      	b.n	800c854 <_svfprintf_r+0x10b4>
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	e7ca      	b.n	800c88a <_svfprintf_r+0x10ea>
 800c8f4:	aa1e      	add	r2, sp, #120	; 0x78
 800c8f6:	4659      	mov	r1, fp
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f001 fc6d 	bl	800e1d8 <__ssprint_r>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f040 80b9 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c904:	ac21      	add	r4, sp, #132	; 0x84
 800c906:	e706      	b.n	800c716 <_svfprintf_r+0xf76>
 800c908:	aa1e      	add	r2, sp, #120	; 0x78
 800c90a:	4659      	mov	r1, fp
 800c90c:	4638      	mov	r0, r7
 800c90e:	f001 fc63 	bl	800e1d8 <__ssprint_r>
 800c912:	2800      	cmp	r0, #0
 800c914:	f040 80af 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c918:	ac21      	add	r4, sp, #132	; 0x84
 800c91a:	e716      	b.n	800c74a <_svfprintf_r+0xfaa>
 800c91c:	9903      	ldr	r1, [sp, #12]
 800c91e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c920:	2901      	cmp	r1, #1
 800c922:	f100 0001 	add.w	r0, r0, #1
 800c926:	f102 0201 	add.w	r2, r2, #1
 800c92a:	f104 0308 	add.w	r3, r4, #8
 800c92e:	dc01      	bgt.n	800c934 <_svfprintf_r+0x1194>
 800c930:	07e9      	lsls	r1, r5, #31
 800c932:	d573      	bpl.n	800ca1c <_svfprintf_r+0x127c>
 800c934:	2101      	movs	r1, #1
 800c936:	2a07      	cmp	r2, #7
 800c938:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800c93c:	f8c4 a000 	str.w	sl, [r4]
 800c940:	6061      	str	r1, [r4, #4]
 800c942:	dd08      	ble.n	800c956 <_svfprintf_r+0x11b6>
 800c944:	aa1e      	add	r2, sp, #120	; 0x78
 800c946:	4659      	mov	r1, fp
 800c948:	4638      	mov	r0, r7
 800c94a:	f001 fc45 	bl	800e1d8 <__ssprint_r>
 800c94e:	2800      	cmp	r0, #0
 800c950:	f040 8091 	bne.w	800ca76 <_svfprintf_r+0x12d6>
 800c954:	ab21      	add	r3, sp, #132	; 0x84
 800c956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c95c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c95e:	605a      	str	r2, [r3, #4]
 800c960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c962:	440a      	add	r2, r1
 800c964:	9220      	str	r2, [sp, #128]	; 0x80
 800c966:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c968:	3201      	adds	r2, #1
 800c96a:	2a07      	cmp	r2, #7
 800c96c:	921f      	str	r2, [sp, #124]	; 0x7c
 800c96e:	dc25      	bgt.n	800c9bc <_svfprintf_r+0x121c>
 800c970:	3308      	adds	r3, #8
 800c972:	9a03      	ldr	r2, [sp, #12]
 800c974:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97c:	f102 34ff 	add.w	r4, r2, #4294967295
 800c980:	d025      	beq.n	800c9ce <_svfprintf_r+0x122e>
 800c982:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800c984:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c986:	f10a 0001 	add.w	r0, sl, #1
 800c98a:	e9c3 0400 	strd	r0, r4, [r3]
 800c98e:	9803      	ldr	r0, [sp, #12]
 800c990:	3101      	adds	r1, #1
 800c992:	3a01      	subs	r2, #1
 800c994:	4402      	add	r2, r0
 800c996:	2907      	cmp	r1, #7
 800c998:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800c99c:	dd47      	ble.n	800ca2e <_svfprintf_r+0x128e>
 800c99e:	aa1e      	add	r2, sp, #120	; 0x78
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f001 fc18 	bl	800e1d8 <__ssprint_r>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d164      	bne.n	800ca76 <_svfprintf_r+0x12d6>
 800c9ac:	ab21      	add	r3, sp, #132	; 0x84
 800c9ae:	aa1a      	add	r2, sp, #104	; 0x68
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c9b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c9ba:	e619      	b.n	800c5f0 <_svfprintf_r+0xe50>
 800c9bc:	aa1e      	add	r2, sp, #120	; 0x78
 800c9be:	4659      	mov	r1, fp
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f001 fc09 	bl	800e1d8 <__ssprint_r>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d155      	bne.n	800ca76 <_svfprintf_r+0x12d6>
 800c9ca:	ab21      	add	r3, sp, #132	; 0x84
 800c9cc:	e7d1      	b.n	800c972 <_svfprintf_r+0x11d2>
 800c9ce:	2c00      	cmp	r4, #0
 800c9d0:	dded      	ble.n	800c9ae <_svfprintf_r+0x120e>
 800c9d2:	4e40      	ldr	r6, [pc, #256]	; (800cad4 <_svfprintf_r+0x1334>)
 800c9d4:	f04f 0810 	mov.w	r8, #16
 800c9d8:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800c9dc:	2c10      	cmp	r4, #16
 800c9de:	f102 0201 	add.w	r2, r2, #1
 800c9e2:	f103 0008 	add.w	r0, r3, #8
 800c9e6:	601e      	str	r6, [r3, #0]
 800c9e8:	dc07      	bgt.n	800c9fa <_svfprintf_r+0x125a>
 800c9ea:	605c      	str	r4, [r3, #4]
 800c9ec:	2a07      	cmp	r2, #7
 800c9ee:	440c      	add	r4, r1
 800c9f0:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800c9f4:	dcd3      	bgt.n	800c99e <_svfprintf_r+0x11fe>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	e7d9      	b.n	800c9ae <_svfprintf_r+0x120e>
 800c9fa:	3110      	adds	r1, #16
 800c9fc:	2a07      	cmp	r2, #7
 800c9fe:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800ca02:	f8c3 8004 	str.w	r8, [r3, #4]
 800ca06:	dd06      	ble.n	800ca16 <_svfprintf_r+0x1276>
 800ca08:	aa1e      	add	r2, sp, #120	; 0x78
 800ca0a:	4659      	mov	r1, fp
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f001 fbe3 	bl	800e1d8 <__ssprint_r>
 800ca12:	bb80      	cbnz	r0, 800ca76 <_svfprintf_r+0x12d6>
 800ca14:	a821      	add	r0, sp, #132	; 0x84
 800ca16:	3c10      	subs	r4, #16
 800ca18:	4603      	mov	r3, r0
 800ca1a:	e7dd      	b.n	800c9d8 <_svfprintf_r+0x1238>
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	2a07      	cmp	r2, #7
 800ca20:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800ca24:	f8c4 a000 	str.w	sl, [r4]
 800ca28:	6061      	str	r1, [r4, #4]
 800ca2a:	ddc0      	ble.n	800c9ae <_svfprintf_r+0x120e>
 800ca2c:	e7b7      	b.n	800c99e <_svfprintf_r+0x11fe>
 800ca2e:	3308      	adds	r3, #8
 800ca30:	e7bd      	b.n	800c9ae <_svfprintf_r+0x120e>
 800ca32:	460c      	mov	r4, r1
 800ca34:	f7ff ba51 	b.w	800beda <_svfprintf_r+0x73a>
 800ca38:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800ca3c:	1a9d      	subs	r5, r3, r2
 800ca3e:	2d00      	cmp	r5, #0
 800ca40:	f77f aa58 	ble.w	800bef4 <_svfprintf_r+0x754>
 800ca44:	4e24      	ldr	r6, [pc, #144]	; (800cad8 <_svfprintf_r+0x1338>)
 800ca46:	f04f 0810 	mov.w	r8, #16
 800ca4a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800ca4e:	2d10      	cmp	r5, #16
 800ca50:	f103 0301 	add.w	r3, r3, #1
 800ca54:	6026      	str	r6, [r4, #0]
 800ca56:	dc18      	bgt.n	800ca8a <_svfprintf_r+0x12ea>
 800ca58:	6065      	str	r5, [r4, #4]
 800ca5a:	2b07      	cmp	r3, #7
 800ca5c:	4415      	add	r5, r2
 800ca5e:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 800ca62:	f77f aa47 	ble.w	800bef4 <_svfprintf_r+0x754>
 800ca66:	aa1e      	add	r2, sp, #120	; 0x78
 800ca68:	4659      	mov	r1, fp
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	f001 fbb4 	bl	800e1d8 <__ssprint_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f43f aa3f 	beq.w	800bef4 <_svfprintf_r+0x754>
 800ca76:	9b02      	ldr	r3, [sp, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f43f a888 	beq.w	800bb8e <_svfprintf_r+0x3ee>
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4638      	mov	r0, r7
 800ca82:	f7fc f9ef 	bl	8008e64 <_free_r>
 800ca86:	f7ff b882 	b.w	800bb8e <_svfprintf_r+0x3ee>
 800ca8a:	3210      	adds	r2, #16
 800ca8c:	2b07      	cmp	r3, #7
 800ca8e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ca92:	f8c4 8004 	str.w	r8, [r4, #4]
 800ca96:	dc02      	bgt.n	800ca9e <_svfprintf_r+0x12fe>
 800ca98:	3408      	adds	r4, #8
 800ca9a:	3d10      	subs	r5, #16
 800ca9c:	e7d5      	b.n	800ca4a <_svfprintf_r+0x12aa>
 800ca9e:	aa1e      	add	r2, sp, #120	; 0x78
 800caa0:	4659      	mov	r1, fp
 800caa2:	4638      	mov	r0, r7
 800caa4:	f001 fb98 	bl	800e1d8 <__ssprint_r>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d1e4      	bne.n	800ca76 <_svfprintf_r+0x12d6>
 800caac:	ac21      	add	r4, sp, #132	; 0x84
 800caae:	e7f4      	b.n	800ca9a <_svfprintf_r+0x12fa>
 800cab0:	9902      	ldr	r1, [sp, #8]
 800cab2:	4638      	mov	r0, r7
 800cab4:	f7fc f9d6 	bl	8008e64 <_free_r>
 800cab8:	f7ff ba34 	b.w	800bf24 <_svfprintf_r+0x784>
 800cabc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f43f a865 	beq.w	800bb8e <_svfprintf_r+0x3ee>
 800cac4:	aa1e      	add	r2, sp, #120	; 0x78
 800cac6:	4659      	mov	r1, fp
 800cac8:	4638      	mov	r0, r7
 800caca:	f001 fb85 	bl	800e1d8 <__ssprint_r>
 800cace:	f7ff b85e 	b.w	800bb8e <_svfprintf_r+0x3ee>
 800cad2:	bf00      	nop
 800cad4:	0800f4d0 	.word	0x0800f4d0
 800cad8:	0800f4c0 	.word	0x0800f4c0
 800cadc:	ea58 0209 	orrs.w	r2, r8, r9
 800cae0:	9502      	str	r5, [sp, #8]
 800cae2:	f43f ab42 	beq.w	800c16a <_svfprintf_r+0x9ca>
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	f43f abec 	beq.w	800c2c4 <_svfprintf_r+0xb24>
 800caec:	2b02      	cmp	r3, #2
 800caee:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800caf2:	f43f ac37 	beq.w	800c364 <_svfprintf_r+0xbc4>
 800caf6:	f008 0307 	and.w	r3, r8, #7
 800cafa:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800cafe:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800cb02:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800cb06:	3330      	adds	r3, #48	; 0x30
 800cb08:	ea58 0109 	orrs.w	r1, r8, r9
 800cb0c:	4652      	mov	r2, sl
 800cb0e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800cb12:	d1f0      	bne.n	800caf6 <_svfprintf_r+0x1356>
 800cb14:	9902      	ldr	r1, [sp, #8]
 800cb16:	07cd      	lsls	r5, r1, #31
 800cb18:	d506      	bpl.n	800cb28 <_svfprintf_r+0x1388>
 800cb1a:	2b30      	cmp	r3, #48	; 0x30
 800cb1c:	d004      	beq.n	800cb28 <_svfprintf_r+0x1388>
 800cb1e:	2330      	movs	r3, #48	; 0x30
 800cb20:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800cb24:	f1a2 0a02 	sub.w	sl, r2, #2
 800cb28:	ab4a      	add	r3, sp, #296	; 0x128
 800cb2a:	46b1      	mov	r9, r6
 800cb2c:	eba3 060a 	sub.w	r6, r3, sl
 800cb30:	2300      	movs	r3, #0
 800cb32:	9d02      	ldr	r5, [sp, #8]
 800cb34:	9302      	str	r3, [sp, #8]
 800cb36:	f7fe bff3 	b.w	800bb20 <_svfprintf_r+0x380>
 800cb3a:	bf00      	nop

0800cb3c <sysconf>:
 800cb3c:	2808      	cmp	r0, #8
 800cb3e:	b508      	push	{r3, lr}
 800cb40:	d006      	beq.n	800cb50 <sysconf+0x14>
 800cb42:	f7f8 fad1 	bl	80050e8 <__errno>
 800cb46:	2316      	movs	r3, #22
 800cb48:	6003      	str	r3, [r0, #0]
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4e:	bd08      	pop	{r3, pc}
 800cb50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cb54:	e7fb      	b.n	800cb4e <sysconf+0x12>

0800cb56 <__submore>:
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800cb5e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cb62:	4299      	cmp	r1, r3
 800cb64:	d11d      	bne.n	800cba2 <__submore+0x4c>
 800cb66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb6a:	f7fc fc59 	bl	8009420 <_malloc_r>
 800cb6e:	b918      	cbnz	r0, 800cb78 <__submore+0x22>
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb7c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb7e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800cb82:	6320      	str	r0, [r4, #48]	; 0x30
 800cb84:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cb88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800cb8c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cb90:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800cb94:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cb98:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cb9c:	6020      	str	r0, [r4, #0]
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e7e8      	b.n	800cb74 <__submore+0x1e>
 800cba2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800cba4:	0077      	lsls	r7, r6, #1
 800cba6:	463a      	mov	r2, r7
 800cba8:	f7fd fb4e 	bl	800a248 <_realloc_r>
 800cbac:	4605      	mov	r5, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d0de      	beq.n	800cb70 <__submore+0x1a>
 800cbb2:	eb00 0806 	add.w	r8, r0, r6
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	4632      	mov	r2, r6
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f7fc fe98 	bl	80098f0 <memcpy>
 800cbc0:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800cbc4:	f8c4 8000 	str.w	r8, [r4]
 800cbc8:	e7e9      	b.n	800cb9e <__submore+0x48>

0800cbca <_ungetc_r>:
 800cbca:	b570      	push	{r4, r5, r6, lr}
 800cbcc:	460d      	mov	r5, r1
 800cbce:	1c69      	adds	r1, r5, #1
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	4614      	mov	r4, r2
 800cbd4:	d103      	bne.n	800cbde <_ungetc_r+0x14>
 800cbd6:	f04f 35ff 	mov.w	r5, #4294967295
 800cbda:	4628      	mov	r0, r5
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	b118      	cbz	r0, 800cbe8 <_ungetc_r+0x1e>
 800cbe0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cbe2:	b90b      	cbnz	r3, 800cbe8 <_ungetc_r+0x1e>
 800cbe4:	f7fc f846 	bl	8008c74 <__sinit>
 800cbe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbea:	07da      	lsls	r2, r3, #31
 800cbec:	d405      	bmi.n	800cbfa <_ungetc_r+0x30>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	059b      	lsls	r3, r3, #22
 800cbf2:	d402      	bmi.n	800cbfa <_ungetc_r+0x30>
 800cbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbf6:	f7fc fb95 	bl	8009324 <__retarget_lock_acquire_recursive>
 800cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfe:	0498      	lsls	r0, r3, #18
 800cc00:	d406      	bmi.n	800cc10 <_ungetc_r+0x46>
 800cc02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc0e:	6663      	str	r3, [r4, #100]	; 0x64
 800cc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc14:	f023 0320 	bic.w	r3, r3, #32
 800cc18:	0759      	lsls	r1, r3, #29
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	d423      	bmi.n	800cc68 <_ungetc_r+0x9e>
 800cc20:	06d3      	lsls	r3, r2, #27
 800cc22:	d409      	bmi.n	800cc38 <_ungetc_r+0x6e>
 800cc24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc26:	07dd      	lsls	r5, r3, #31
 800cc28:	d4d5      	bmi.n	800cbd6 <_ungetc_r+0xc>
 800cc2a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800cc2e:	d1d2      	bne.n	800cbd6 <_ungetc_r+0xc>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f7fc fb78 	bl	8009326 <__retarget_lock_release_recursive>
 800cc36:	e7ce      	b.n	800cbd6 <_ungetc_r+0xc>
 800cc38:	0710      	lsls	r0, r2, #28
 800cc3a:	d511      	bpl.n	800cc60 <_ungetc_r+0x96>
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f7fb ff9a 	bl	8008b78 <_fflush_r>
 800cc44:	b130      	cbz	r0, 800cc54 <_ungetc_r+0x8a>
 800cc46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc48:	07d9      	lsls	r1, r3, #31
 800cc4a:	d4c4      	bmi.n	800cbd6 <_ungetc_r+0xc>
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800cc52:	e7ec      	b.n	800cc2e <_ungetc_r+0x64>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	60a0      	str	r0, [r4, #8]
 800cc58:	f023 0308 	bic.w	r3, r3, #8
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	61a0      	str	r0, [r4, #24]
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	f043 0304 	orr.w	r3, r3, #4
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc6a:	6862      	ldr	r2, [r4, #4]
 800cc6c:	b2ed      	uxtb	r5, r5
 800cc6e:	b1d3      	cbz	r3, 800cca6 <_ungetc_r+0xdc>
 800cc70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc72:	4293      	cmp	r3, r2
 800cc74:	dc05      	bgt.n	800cc82 <_ungetc_r+0xb8>
 800cc76:	4621      	mov	r1, r4
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ff6c 	bl	800cb56 <__submore>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1e1      	bne.n	800cc46 <_ungetc_r+0x7c>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	1e5a      	subs	r2, r3, #1
 800cc86:	6022      	str	r2, [r4, #0]
 800cc88:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cc8c:	6863      	ldr	r3, [r4, #4]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	6063      	str	r3, [r4, #4]
 800cc92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc94:	07da      	lsls	r2, r3, #31
 800cc96:	d4a0      	bmi.n	800cbda <_ungetc_r+0x10>
 800cc98:	89a3      	ldrh	r3, [r4, #12]
 800cc9a:	059b      	lsls	r3, r3, #22
 800cc9c:	d49d      	bmi.n	800cbda <_ungetc_r+0x10>
 800cc9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cca0:	f7fc fb41 	bl	8009326 <__retarget_lock_release_recursive>
 800cca4:	e799      	b.n	800cbda <_ungetc_r+0x10>
 800cca6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cca8:	6920      	ldr	r0, [r4, #16]
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	f001 0101 	and.w	r1, r1, #1
 800ccb0:	b160      	cbz	r0, 800cccc <_ungetc_r+0x102>
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	d20a      	bcs.n	800cccc <_ungetc_r+0x102>
 800ccb6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ccba:	4285      	cmp	r5, r0
 800ccbc:	d106      	bne.n	800cccc <_ungetc_r+0x102>
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	6062      	str	r2, [r4, #4]
 800ccc6:	2900      	cmp	r1, #0
 800ccc8:	d187      	bne.n	800cbda <_ungetc_r+0x10>
 800ccca:	e7e5      	b.n	800cc98 <_ungetc_r+0xce>
 800cccc:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800ccd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ccd4:	6323      	str	r3, [r4, #48]	; 0x30
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccda:	4623      	mov	r3, r4
 800ccdc:	f803 5f42 	strb.w	r5, [r3, #66]!
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	2301      	movs	r3, #1
 800cce4:	6063      	str	r3, [r4, #4]
 800cce6:	e7ee      	b.n	800ccc6 <_ungetc_r+0xfc>

0800cce8 <__sprint_r>:
 800cce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	6893      	ldr	r3, [r2, #8]
 800ccee:	4680      	mov	r8, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	4614      	mov	r4, r2
 800ccf4:	b91b      	cbnz	r3, 800ccfe <__sprint_r+0x16>
 800ccf6:	6053      	str	r3, [r2, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cd00:	049d      	lsls	r5, r3, #18
 800cd02:	d520      	bpl.n	800cd46 <__sprint_r+0x5e>
 800cd04:	6815      	ldr	r5, [r2, #0]
 800cd06:	3508      	adds	r5, #8
 800cd08:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800cd0c:	f04f 0900 	mov.w	r9, #0
 800cd10:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800cd14:	45ca      	cmp	sl, r9
 800cd16:	dc0b      	bgt.n	800cd30 <__sprint_r+0x48>
 800cd18:	68a3      	ldr	r3, [r4, #8]
 800cd1a:	f026 0003 	bic.w	r0, r6, #3
 800cd1e:	1a18      	subs	r0, r3, r0
 800cd20:	60a0      	str	r0, [r4, #8]
 800cd22:	3508      	adds	r5, #8
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d1ef      	bne.n	800cd08 <__sprint_r+0x20>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800cd2e:	e7e4      	b.n	800ccfa <__sprint_r+0x12>
 800cd30:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800cd34:	463a      	mov	r2, r7
 800cd36:	4640      	mov	r0, r8
 800cd38:	f000 fe4f 	bl	800d9da <_fputwc_r>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	d0f3      	beq.n	800cd28 <__sprint_r+0x40>
 800cd40:	f109 0901 	add.w	r9, r9, #1
 800cd44:	e7e6      	b.n	800cd14 <__sprint_r+0x2c>
 800cd46:	f7fc f94d 	bl	8008fe4 <__sfvwrite_r>
 800cd4a:	e7ed      	b.n	800cd28 <__sprint_r+0x40>

0800cd4c <_vfiprintf_r>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	ed2d 8b02 	vpush	{d8}
 800cd54:	b0b9      	sub	sp, #228	; 0xe4
 800cd56:	460f      	mov	r7, r1
 800cd58:	9201      	str	r2, [sp, #4]
 800cd5a:	461d      	mov	r5, r3
 800cd5c:	461c      	mov	r4, r3
 800cd5e:	4681      	mov	r9, r0
 800cd60:	b118      	cbz	r0, 800cd6a <_vfiprintf_r+0x1e>
 800cd62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd64:	b90b      	cbnz	r3, 800cd6a <_vfiprintf_r+0x1e>
 800cd66:	f7fb ff85 	bl	8008c74 <__sinit>
 800cd6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd6c:	07d8      	lsls	r0, r3, #31
 800cd6e:	d405      	bmi.n	800cd7c <_vfiprintf_r+0x30>
 800cd70:	89bb      	ldrh	r3, [r7, #12]
 800cd72:	0599      	lsls	r1, r3, #22
 800cd74:	d402      	bmi.n	800cd7c <_vfiprintf_r+0x30>
 800cd76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd78:	f7fc fad4 	bl	8009324 <__retarget_lock_acquire_recursive>
 800cd7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd80:	049a      	lsls	r2, r3, #18
 800cd82:	d406      	bmi.n	800cd92 <_vfiprintf_r+0x46>
 800cd84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd88:	81bb      	strh	r3, [r7, #12]
 800cd8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd90:	667b      	str	r3, [r7, #100]	; 0x64
 800cd92:	89bb      	ldrh	r3, [r7, #12]
 800cd94:	071e      	lsls	r6, r3, #28
 800cd96:	d501      	bpl.n	800cd9c <_vfiprintf_r+0x50>
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	b9bb      	cbnz	r3, 800cdcc <_vfiprintf_r+0x80>
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	4648      	mov	r0, r9
 800cda0:	f7fb f810 	bl	8007dc4 <__swsetup_r>
 800cda4:	b190      	cbz	r0, 800cdcc <_vfiprintf_r+0x80>
 800cda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cda8:	07d8      	lsls	r0, r3, #31
 800cdaa:	d508      	bpl.n	800cdbe <_vfiprintf_r+0x72>
 800cdac:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	9802      	ldr	r0, [sp, #8]
 800cdb4:	b039      	add	sp, #228	; 0xe4
 800cdb6:	ecbd 8b02 	vpop	{d8}
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	89bb      	ldrh	r3, [r7, #12]
 800cdc0:	0599      	lsls	r1, r3, #22
 800cdc2:	d4f3      	bmi.n	800cdac <_vfiprintf_r+0x60>
 800cdc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cdc6:	f7fc faae 	bl	8009326 <__retarget_lock_release_recursive>
 800cdca:	e7ef      	b.n	800cdac <_vfiprintf_r+0x60>
 800cdcc:	89bb      	ldrh	r3, [r7, #12]
 800cdce:	f003 021a 	and.w	r2, r3, #26
 800cdd2:	2a0a      	cmp	r2, #10
 800cdd4:	d116      	bne.n	800ce04 <_vfiprintf_r+0xb8>
 800cdd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	db12      	blt.n	800ce04 <_vfiprintf_r+0xb8>
 800cdde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cde0:	07d2      	lsls	r2, r2, #31
 800cde2:	d404      	bmi.n	800cdee <_vfiprintf_r+0xa2>
 800cde4:	059e      	lsls	r6, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_vfiprintf_r+0xa2>
 800cde8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cdea:	f7fc fa9c 	bl	8009326 <__retarget_lock_release_recursive>
 800cdee:	9a01      	ldr	r2, [sp, #4]
 800cdf0:	462b      	mov	r3, r5
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	4648      	mov	r0, r9
 800cdf6:	b039      	add	sp, #228	; 0xe4
 800cdf8:	ecbd 8b02 	vpop	{d8}
 800cdfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce00:	f000 bc3a 	b.w	800d678 <__sbprintf>
 800ce04:	2300      	movs	r3, #0
 800ce06:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800ce0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ce0e:	ae0f      	add	r6, sp, #60	; 0x3c
 800ce10:	ee08 3a10 	vmov	s16, r3
 800ce14:	960c      	str	r6, [sp, #48]	; 0x30
 800ce16:	9307      	str	r3, [sp, #28]
 800ce18:	9302      	str	r3, [sp, #8]
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	461d      	mov	r5, r3
 800ce1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce22:	b10a      	cbz	r2, 800ce28 <_vfiprintf_r+0xdc>
 800ce24:	2a25      	cmp	r2, #37	; 0x25
 800ce26:	d1f9      	bne.n	800ce1c <_vfiprintf_r+0xd0>
 800ce28:	9b01      	ldr	r3, [sp, #4]
 800ce2a:	ebb5 0803 	subs.w	r8, r5, r3
 800ce2e:	d00d      	beq.n	800ce4c <_vfiprintf_r+0x100>
 800ce30:	e9c6 3800 	strd	r3, r8, [r6]
 800ce34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce36:	4443      	add	r3, r8
 800ce38:	930e      	str	r3, [sp, #56]	; 0x38
 800ce3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	2b07      	cmp	r3, #7
 800ce40:	930d      	str	r3, [sp, #52]	; 0x34
 800ce42:	dc75      	bgt.n	800cf30 <_vfiprintf_r+0x1e4>
 800ce44:	3608      	adds	r6, #8
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	4443      	add	r3, r8
 800ce4a:	9302      	str	r3, [sp, #8]
 800ce4c:	782b      	ldrb	r3, [r5, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 83d6 	beq.w	800d600 <_vfiprintf_r+0x8b4>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f04f 31ff 	mov.w	r1, #4294967295
 800ce5a:	1c6a      	adds	r2, r5, #1
 800ce5c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ce60:	9100      	str	r1, [sp, #0]
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	469a      	mov	sl, r3
 800ce66:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ce6a:	9201      	str	r2, [sp, #4]
 800ce6c:	f1a3 0220 	sub.w	r2, r3, #32
 800ce70:	2a5a      	cmp	r2, #90	; 0x5a
 800ce72:	f200 831f 	bhi.w	800d4b4 <_vfiprintf_r+0x768>
 800ce76:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ce7a:	009b      	.short	0x009b
 800ce7c:	031d031d 	.word	0x031d031d
 800ce80:	031d00a3 	.word	0x031d00a3
 800ce84:	031d031d 	.word	0x031d031d
 800ce88:	031d0082 	.word	0x031d0082
 800ce8c:	00a6031d 	.word	0x00a6031d
 800ce90:	031d00b0 	.word	0x031d00b0
 800ce94:	00b200ad 	.word	0x00b200ad
 800ce98:	00cd031d 	.word	0x00cd031d
 800ce9c:	00d000d0 	.word	0x00d000d0
 800cea0:	00d000d0 	.word	0x00d000d0
 800cea4:	00d000d0 	.word	0x00d000d0
 800cea8:	00d000d0 	.word	0x00d000d0
 800ceac:	031d00d0 	.word	0x031d00d0
 800ceb0:	031d031d 	.word	0x031d031d
 800ceb4:	031d031d 	.word	0x031d031d
 800ceb8:	031d031d 	.word	0x031d031d
 800cebc:	031d031d 	.word	0x031d031d
 800cec0:	010800fa 	.word	0x010800fa
 800cec4:	031d031d 	.word	0x031d031d
 800cec8:	031d031d 	.word	0x031d031d
 800cecc:	031d031d 	.word	0x031d031d
 800ced0:	031d031d 	.word	0x031d031d
 800ced4:	031d031d 	.word	0x031d031d
 800ced8:	031d0158 	.word	0x031d0158
 800cedc:	031d031d 	.word	0x031d031d
 800cee0:	031d01a1 	.word	0x031d01a1
 800cee4:	031d027e 	.word	0x031d027e
 800cee8:	029e031d 	.word	0x029e031d
 800ceec:	031d031d 	.word	0x031d031d
 800cef0:	031d031d 	.word	0x031d031d
 800cef4:	031d031d 	.word	0x031d031d
 800cef8:	031d031d 	.word	0x031d031d
 800cefc:	031d031d 	.word	0x031d031d
 800cf00:	010a00fa 	.word	0x010a00fa
 800cf04:	031d031d 	.word	0x031d031d
 800cf08:	00e0031d 	.word	0x00e0031d
 800cf0c:	00f4010a 	.word	0x00f4010a
 800cf10:	00ed031d 	.word	0x00ed031d
 800cf14:	0136031d 	.word	0x0136031d
 800cf18:	018f015a 	.word	0x018f015a
 800cf1c:	031d00f4 	.word	0x031d00f4
 800cf20:	009901a1 	.word	0x009901a1
 800cf24:	031d0280 	.word	0x031d0280
 800cf28:	0065031d 	.word	0x0065031d
 800cf2c:	0099031d 	.word	0x0099031d
 800cf30:	aa0c      	add	r2, sp, #48	; 0x30
 800cf32:	4639      	mov	r1, r7
 800cf34:	4648      	mov	r0, r9
 800cf36:	f7ff fed7 	bl	800cce8 <__sprint_r>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f040 833f 	bne.w	800d5be <_vfiprintf_r+0x872>
 800cf40:	ae0f      	add	r6, sp, #60	; 0x3c
 800cf42:	e780      	b.n	800ce46 <_vfiprintf_r+0xfa>
 800cf44:	4a9c      	ldr	r2, [pc, #624]	; (800d1b8 <_vfiprintf_r+0x46c>)
 800cf46:	9205      	str	r2, [sp, #20]
 800cf48:	f01a 0220 	ands.w	r2, sl, #32
 800cf4c:	f000 8235 	beq.w	800d3ba <_vfiprintf_r+0x66e>
 800cf50:	3407      	adds	r4, #7
 800cf52:	f024 0207 	bic.w	r2, r4, #7
 800cf56:	4693      	mov	fp, r2
 800cf58:	6855      	ldr	r5, [r2, #4]
 800cf5a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800cf5e:	f01a 0f01 	tst.w	sl, #1
 800cf62:	d009      	beq.n	800cf78 <_vfiprintf_r+0x22c>
 800cf64:	ea54 0205 	orrs.w	r2, r4, r5
 800cf68:	bf1f      	itttt	ne
 800cf6a:	2230      	movne	r2, #48	; 0x30
 800cf6c:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800cf70:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800cf74:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf78:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800cf7c:	e11a      	b.n	800d1b4 <_vfiprintf_r+0x468>
 800cf7e:	4648      	mov	r0, r9
 800cf80:	f7fc f9ca 	bl	8009318 <_localeconv_r>
 800cf84:	6843      	ldr	r3, [r0, #4]
 800cf86:	4618      	mov	r0, r3
 800cf88:	ee08 3a10 	vmov	s16, r3
 800cf8c:	f7f3 f958 	bl	8000240 <strlen>
 800cf90:	9007      	str	r0, [sp, #28]
 800cf92:	4648      	mov	r0, r9
 800cf94:	f7fc f9c0 	bl	8009318 <_localeconv_r>
 800cf98:	6883      	ldr	r3, [r0, #8]
 800cf9a:	9306      	str	r3, [sp, #24]
 800cf9c:	9b07      	ldr	r3, [sp, #28]
 800cf9e:	b12b      	cbz	r3, 800cfac <_vfiprintf_r+0x260>
 800cfa0:	9b06      	ldr	r3, [sp, #24]
 800cfa2:	b11b      	cbz	r3, 800cfac <_vfiprintf_r+0x260>
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	b10b      	cbz	r3, 800cfac <_vfiprintf_r+0x260>
 800cfa8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800cfac:	9a01      	ldr	r2, [sp, #4]
 800cfae:	e75a      	b.n	800ce66 <_vfiprintf_r+0x11a>
 800cfb0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1f9      	bne.n	800cfac <_vfiprintf_r+0x260>
 800cfb8:	2320      	movs	r3, #32
 800cfba:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800cfbe:	e7f5      	b.n	800cfac <_vfiprintf_r+0x260>
 800cfc0:	f04a 0a01 	orr.w	sl, sl, #1
 800cfc4:	e7f2      	b.n	800cfac <_vfiprintf_r+0x260>
 800cfc6:	f854 3b04 	ldr.w	r3, [r4], #4
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	daed      	bge.n	800cfac <_vfiprintf_r+0x260>
 800cfd0:	425b      	negs	r3, r3
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	f04a 0a04 	orr.w	sl, sl, #4
 800cfd8:	e7e8      	b.n	800cfac <_vfiprintf_r+0x260>
 800cfda:	232b      	movs	r3, #43	; 0x2b
 800cfdc:	e7ed      	b.n	800cfba <_vfiprintf_r+0x26e>
 800cfde:	9a01      	ldr	r2, [sp, #4]
 800cfe0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe6:	d112      	bne.n	800d00e <_vfiprintf_r+0x2c2>
 800cfe8:	f854 0b04 	ldr.w	r0, [r4], #4
 800cfec:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800cff0:	e9cd 3200 	strd	r3, r2, [sp]
 800cff4:	e7da      	b.n	800cfac <_vfiprintf_r+0x260>
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	200a      	movs	r0, #10
 800cffa:	fb00 1303 	mla	r3, r0, r3, r1
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d004:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d008:	2909      	cmp	r1, #9
 800d00a:	d9f4      	bls.n	800cff6 <_vfiprintf_r+0x2aa>
 800d00c:	e72d      	b.n	800ce6a <_vfiprintf_r+0x11e>
 800d00e:	2100      	movs	r1, #0
 800d010:	9100      	str	r1, [sp, #0]
 800d012:	e7f7      	b.n	800d004 <_vfiprintf_r+0x2b8>
 800d014:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800d018:	e7c8      	b.n	800cfac <_vfiprintf_r+0x260>
 800d01a:	2100      	movs	r1, #0
 800d01c:	9a01      	ldr	r2, [sp, #4]
 800d01e:	9103      	str	r1, [sp, #12]
 800d020:	9903      	ldr	r1, [sp, #12]
 800d022:	3b30      	subs	r3, #48	; 0x30
 800d024:	200a      	movs	r0, #10
 800d026:	fb00 3301 	mla	r3, r0, r1, r3
 800d02a:	9303      	str	r3, [sp, #12]
 800d02c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d030:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d034:	2909      	cmp	r1, #9
 800d036:	d9f3      	bls.n	800d020 <_vfiprintf_r+0x2d4>
 800d038:	e717      	b.n	800ce6a <_vfiprintf_r+0x11e>
 800d03a:	9b01      	ldr	r3, [sp, #4]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b68      	cmp	r3, #104	; 0x68
 800d040:	bf01      	itttt	eq
 800d042:	9b01      	ldreq	r3, [sp, #4]
 800d044:	3301      	addeq	r3, #1
 800d046:	9301      	streq	r3, [sp, #4]
 800d048:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800d04c:	bf18      	it	ne
 800d04e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800d052:	e7ab      	b.n	800cfac <_vfiprintf_r+0x260>
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b6c      	cmp	r3, #108	; 0x6c
 800d05a:	d105      	bne.n	800d068 <_vfiprintf_r+0x31c>
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	3301      	adds	r3, #1
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	f04a 0a20 	orr.w	sl, sl, #32
 800d066:	e7a1      	b.n	800cfac <_vfiprintf_r+0x260>
 800d068:	f04a 0a10 	orr.w	sl, sl, #16
 800d06c:	e79e      	b.n	800cfac <_vfiprintf_r+0x260>
 800d06e:	46a3      	mov	fp, r4
 800d070:	2100      	movs	r1, #0
 800d072:	f85b 3b04 	ldr.w	r3, [fp], #4
 800d076:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800d07a:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800d07e:	2301      	movs	r3, #1
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	460d      	mov	r5, r1
 800d084:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800d088:	e0ad      	b.n	800d1e6 <_vfiprintf_r+0x49a>
 800d08a:	f04a 0a10 	orr.w	sl, sl, #16
 800d08e:	f01a 0f20 	tst.w	sl, #32
 800d092:	d011      	beq.n	800d0b8 <_vfiprintf_r+0x36c>
 800d094:	3407      	adds	r4, #7
 800d096:	f024 0307 	bic.w	r3, r4, #7
 800d09a:	469b      	mov	fp, r3
 800d09c:	685d      	ldr	r5, [r3, #4]
 800d09e:	f85b 4b08 	ldr.w	r4, [fp], #8
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	da06      	bge.n	800d0b4 <_vfiprintf_r+0x368>
 800d0a6:	4264      	negs	r4, r4
 800d0a8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d0ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800d0b0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e04a      	b.n	800d14e <_vfiprintf_r+0x402>
 800d0b8:	46a3      	mov	fp, r4
 800d0ba:	f01a 0f10 	tst.w	sl, #16
 800d0be:	f85b 5b04 	ldr.w	r5, [fp], #4
 800d0c2:	d002      	beq.n	800d0ca <_vfiprintf_r+0x37e>
 800d0c4:	462c      	mov	r4, r5
 800d0c6:	17ed      	asrs	r5, r5, #31
 800d0c8:	e7eb      	b.n	800d0a2 <_vfiprintf_r+0x356>
 800d0ca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d0ce:	d003      	beq.n	800d0d8 <_vfiprintf_r+0x38c>
 800d0d0:	b22c      	sxth	r4, r5
 800d0d2:	f345 35c0 	sbfx	r5, r5, #15, #1
 800d0d6:	e7e4      	b.n	800d0a2 <_vfiprintf_r+0x356>
 800d0d8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d0dc:	d0f2      	beq.n	800d0c4 <_vfiprintf_r+0x378>
 800d0de:	b26c      	sxtb	r4, r5
 800d0e0:	f345 15c0 	sbfx	r5, r5, #7, #1
 800d0e4:	e7dd      	b.n	800d0a2 <_vfiprintf_r+0x356>
 800d0e6:	f01a 0f20 	tst.w	sl, #32
 800d0ea:	f104 0b04 	add.w	fp, r4, #4
 800d0ee:	d007      	beq.n	800d100 <_vfiprintf_r+0x3b4>
 800d0f0:	9a02      	ldr	r2, [sp, #8]
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	9902      	ldr	r1, [sp, #8]
 800d0f6:	17d2      	asrs	r2, r2, #31
 800d0f8:	e9c3 1200 	strd	r1, r2, [r3]
 800d0fc:	465c      	mov	r4, fp
 800d0fe:	e68c      	b.n	800ce1a <_vfiprintf_r+0xce>
 800d100:	f01a 0f10 	tst.w	sl, #16
 800d104:	d003      	beq.n	800d10e <_vfiprintf_r+0x3c2>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	9a02      	ldr	r2, [sp, #8]
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	e7f6      	b.n	800d0fc <_vfiprintf_r+0x3b0>
 800d10e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d112:	d003      	beq.n	800d11c <_vfiprintf_r+0x3d0>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	9a02      	ldr	r2, [sp, #8]
 800d118:	801a      	strh	r2, [r3, #0]
 800d11a:	e7ef      	b.n	800d0fc <_vfiprintf_r+0x3b0>
 800d11c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d120:	d0f1      	beq.n	800d106 <_vfiprintf_r+0x3ba>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	9a02      	ldr	r2, [sp, #8]
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	e7e8      	b.n	800d0fc <_vfiprintf_r+0x3b0>
 800d12a:	f04a 0a10 	orr.w	sl, sl, #16
 800d12e:	f01a 0320 	ands.w	r3, sl, #32
 800d132:	d01f      	beq.n	800d174 <_vfiprintf_r+0x428>
 800d134:	3407      	adds	r4, #7
 800d136:	f024 0307 	bic.w	r3, r4, #7
 800d13a:	469b      	mov	fp, r3
 800d13c:	685d      	ldr	r5, [r3, #4]
 800d13e:	f85b 4b08 	ldr.w	r4, [fp], #8
 800d142:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d146:	2300      	movs	r3, #0
 800d148:	2200      	movs	r2, #0
 800d14a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800d14e:	9a00      	ldr	r2, [sp, #0]
 800d150:	3201      	adds	r2, #1
 800d152:	f000 8262 	beq.w	800d61a <_vfiprintf_r+0x8ce>
 800d156:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800d15a:	9204      	str	r2, [sp, #16]
 800d15c:	ea54 0205 	orrs.w	r2, r4, r5
 800d160:	f040 8261 	bne.w	800d626 <_vfiprintf_r+0x8da>
 800d164:	9a00      	ldr	r2, [sp, #0]
 800d166:	2a00      	cmp	r2, #0
 800d168:	f000 8199 	beq.w	800d49e <_vfiprintf_r+0x752>
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	f040 825d 	bne.w	800d62c <_vfiprintf_r+0x8e0>
 800d172:	e139      	b.n	800d3e8 <_vfiprintf_r+0x69c>
 800d174:	46a3      	mov	fp, r4
 800d176:	f01a 0510 	ands.w	r5, sl, #16
 800d17a:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d17e:	d001      	beq.n	800d184 <_vfiprintf_r+0x438>
 800d180:	461d      	mov	r5, r3
 800d182:	e7de      	b.n	800d142 <_vfiprintf_r+0x3f6>
 800d184:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d188:	d001      	beq.n	800d18e <_vfiprintf_r+0x442>
 800d18a:	b2a4      	uxth	r4, r4
 800d18c:	e7d9      	b.n	800d142 <_vfiprintf_r+0x3f6>
 800d18e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d192:	d0d6      	beq.n	800d142 <_vfiprintf_r+0x3f6>
 800d194:	b2e4      	uxtb	r4, r4
 800d196:	e7f3      	b.n	800d180 <_vfiprintf_r+0x434>
 800d198:	2330      	movs	r3, #48	; 0x30
 800d19a:	46a3      	mov	fp, r4
 800d19c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d1a0:	2378      	movs	r3, #120	; 0x78
 800d1a2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800d1a6:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d1aa:	4b03      	ldr	r3, [pc, #12]	; (800d1b8 <_vfiprintf_r+0x46c>)
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	2500      	movs	r5, #0
 800d1b0:	f04a 0a02 	orr.w	sl, sl, #2
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	e7c7      	b.n	800d148 <_vfiprintf_r+0x3fc>
 800d1b8:	0800f125 	.word	0x0800f125
 800d1bc:	9b00      	ldr	r3, [sp, #0]
 800d1be:	46a3      	mov	fp, r4
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	1c5c      	adds	r4, r3, #1
 800d1c4:	f85b 8b04 	ldr.w	r8, [fp], #4
 800d1c8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d1cc:	f000 80ce 	beq.w	800d36c <_vfiprintf_r+0x620>
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	f7f3 f83b 	bl	8000250 <memchr>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	f000 8174 	beq.w	800d4c8 <_vfiprintf_r+0x77c>
 800d1e0:	eba0 0308 	sub.w	r3, r0, r8
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	42ab      	cmp	r3, r5
 800d1ea:	bfb8      	it	lt
 800d1ec:	462b      	movlt	r3, r5
 800d1ee:	9304      	str	r3, [sp, #16]
 800d1f0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800d1f4:	b113      	cbz	r3, 800d1fc <_vfiprintf_r+0x4b0>
 800d1f6:	9b04      	ldr	r3, [sp, #16]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	9304      	str	r3, [sp, #16]
 800d1fc:	f01a 0302 	ands.w	r3, sl, #2
 800d200:	9308      	str	r3, [sp, #32]
 800d202:	bf1e      	ittt	ne
 800d204:	9b04      	ldrne	r3, [sp, #16]
 800d206:	3302      	addne	r3, #2
 800d208:	9304      	strne	r3, [sp, #16]
 800d20a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800d20e:	9309      	str	r3, [sp, #36]	; 0x24
 800d210:	d11f      	bne.n	800d252 <_vfiprintf_r+0x506>
 800d212:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d216:	1a9c      	subs	r4, r3, r2
 800d218:	2c00      	cmp	r4, #0
 800d21a:	dd1a      	ble.n	800d252 <_vfiprintf_r+0x506>
 800d21c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d220:	48aa      	ldr	r0, [pc, #680]	; (800d4cc <_vfiprintf_r+0x780>)
 800d222:	6030      	str	r0, [r6, #0]
 800d224:	2c10      	cmp	r4, #16
 800d226:	f103 0301 	add.w	r3, r3, #1
 800d22a:	f106 0108 	add.w	r1, r6, #8
 800d22e:	f300 8153 	bgt.w	800d4d8 <_vfiprintf_r+0x78c>
 800d232:	6074      	str	r4, [r6, #4]
 800d234:	2b07      	cmp	r3, #7
 800d236:	4414      	add	r4, r2
 800d238:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800d23c:	f340 815e 	ble.w	800d4fc <_vfiprintf_r+0x7b0>
 800d240:	aa0c      	add	r2, sp, #48	; 0x30
 800d242:	4639      	mov	r1, r7
 800d244:	4648      	mov	r0, r9
 800d246:	f7ff fd4f 	bl	800cce8 <__sprint_r>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	f040 81b7 	bne.w	800d5be <_vfiprintf_r+0x872>
 800d250:	ae0f      	add	r6, sp, #60	; 0x3c
 800d252:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800d256:	b173      	cbz	r3, 800d276 <_vfiprintf_r+0x52a>
 800d258:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800d25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d25e:	6032      	str	r2, [r6, #0]
 800d260:	2201      	movs	r2, #1
 800d262:	6072      	str	r2, [r6, #4]
 800d264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d266:	3301      	adds	r3, #1
 800d268:	3201      	adds	r2, #1
 800d26a:	2b07      	cmp	r3, #7
 800d26c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800d270:	f300 8146 	bgt.w	800d500 <_vfiprintf_r+0x7b4>
 800d274:	3608      	adds	r6, #8
 800d276:	9b08      	ldr	r3, [sp, #32]
 800d278:	b16b      	cbz	r3, 800d296 <_vfiprintf_r+0x54a>
 800d27a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d27e:	6032      	str	r2, [r6, #0]
 800d280:	2202      	movs	r2, #2
 800d282:	6072      	str	r2, [r6, #4]
 800d284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d286:	3301      	adds	r3, #1
 800d288:	3202      	adds	r2, #2
 800d28a:	2b07      	cmp	r3, #7
 800d28c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800d290:	f300 813f 	bgt.w	800d512 <_vfiprintf_r+0x7c6>
 800d294:	3608      	adds	r6, #8
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	2b80      	cmp	r3, #128	; 0x80
 800d29a:	d11f      	bne.n	800d2dc <_vfiprintf_r+0x590>
 800d29c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d2a0:	1a9c      	subs	r4, r3, r2
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	dd1a      	ble.n	800d2dc <_vfiprintf_r+0x590>
 800d2a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d2aa:	4889      	ldr	r0, [pc, #548]	; (800d4d0 <_vfiprintf_r+0x784>)
 800d2ac:	6030      	str	r0, [r6, #0]
 800d2ae:	2c10      	cmp	r4, #16
 800d2b0:	f103 0301 	add.w	r3, r3, #1
 800d2b4:	f106 0108 	add.w	r1, r6, #8
 800d2b8:	f300 8134 	bgt.w	800d524 <_vfiprintf_r+0x7d8>
 800d2bc:	6074      	str	r4, [r6, #4]
 800d2be:	2b07      	cmp	r3, #7
 800d2c0:	4414      	add	r4, r2
 800d2c2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800d2c6:	f340 813f 	ble.w	800d548 <_vfiprintf_r+0x7fc>
 800d2ca:	aa0c      	add	r2, sp, #48	; 0x30
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	4648      	mov	r0, r9
 800d2d0:	f7ff fd0a 	bl	800cce8 <__sprint_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f040 8172 	bne.w	800d5be <_vfiprintf_r+0x872>
 800d2da:	ae0f      	add	r6, sp, #60	; 0x3c
 800d2dc:	9b00      	ldr	r3, [sp, #0]
 800d2de:	1aec      	subs	r4, r5, r3
 800d2e0:	2c00      	cmp	r4, #0
 800d2e2:	dd1a      	ble.n	800d31a <_vfiprintf_r+0x5ce>
 800d2e4:	4d7a      	ldr	r5, [pc, #488]	; (800d4d0 <_vfiprintf_r+0x784>)
 800d2e6:	6035      	str	r5, [r6, #0]
 800d2e8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800d2ec:	2c10      	cmp	r4, #16
 800d2ee:	f103 0301 	add.w	r3, r3, #1
 800d2f2:	f106 0208 	add.w	r2, r6, #8
 800d2f6:	f300 8129 	bgt.w	800d54c <_vfiprintf_r+0x800>
 800d2fa:	6074      	str	r4, [r6, #4]
 800d2fc:	2b07      	cmp	r3, #7
 800d2fe:	440c      	add	r4, r1
 800d300:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800d304:	f340 8133 	ble.w	800d56e <_vfiprintf_r+0x822>
 800d308:	aa0c      	add	r2, sp, #48	; 0x30
 800d30a:	4639      	mov	r1, r7
 800d30c:	4648      	mov	r0, r9
 800d30e:	f7ff fceb 	bl	800cce8 <__sprint_r>
 800d312:	2800      	cmp	r0, #0
 800d314:	f040 8153 	bne.w	800d5be <_vfiprintf_r+0x872>
 800d318:	ae0f      	add	r6, sp, #60	; 0x3c
 800d31a:	9b00      	ldr	r3, [sp, #0]
 800d31c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d31e:	6073      	str	r3, [r6, #4]
 800d320:	4418      	add	r0, r3
 800d322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d324:	f8c6 8000 	str.w	r8, [r6]
 800d328:	3301      	adds	r3, #1
 800d32a:	2b07      	cmp	r3, #7
 800d32c:	900e      	str	r0, [sp, #56]	; 0x38
 800d32e:	930d      	str	r3, [sp, #52]	; 0x34
 800d330:	f300 811f 	bgt.w	800d572 <_vfiprintf_r+0x826>
 800d334:	f106 0308 	add.w	r3, r6, #8
 800d338:	f01a 0f04 	tst.w	sl, #4
 800d33c:	f040 8121 	bne.w	800d582 <_vfiprintf_r+0x836>
 800d340:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d344:	9904      	ldr	r1, [sp, #16]
 800d346:	428a      	cmp	r2, r1
 800d348:	bfac      	ite	ge
 800d34a:	189b      	addge	r3, r3, r2
 800d34c:	185b      	addlt	r3, r3, r1
 800d34e:	9302      	str	r3, [sp, #8]
 800d350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d352:	b13b      	cbz	r3, 800d364 <_vfiprintf_r+0x618>
 800d354:	aa0c      	add	r2, sp, #48	; 0x30
 800d356:	4639      	mov	r1, r7
 800d358:	4648      	mov	r0, r9
 800d35a:	f7ff fcc5 	bl	800cce8 <__sprint_r>
 800d35e:	2800      	cmp	r0, #0
 800d360:	f040 812d 	bne.w	800d5be <_vfiprintf_r+0x872>
 800d364:	2300      	movs	r3, #0
 800d366:	930d      	str	r3, [sp, #52]	; 0x34
 800d368:	ae0f      	add	r6, sp, #60	; 0x3c
 800d36a:	e6c7      	b.n	800d0fc <_vfiprintf_r+0x3b0>
 800d36c:	4640      	mov	r0, r8
 800d36e:	f7f2 ff67 	bl	8000240 <strlen>
 800d372:	9000      	str	r0, [sp, #0]
 800d374:	e737      	b.n	800d1e6 <_vfiprintf_r+0x49a>
 800d376:	f04a 0a10 	orr.w	sl, sl, #16
 800d37a:	f01a 0320 	ands.w	r3, sl, #32
 800d37e:	d008      	beq.n	800d392 <_vfiprintf_r+0x646>
 800d380:	3407      	adds	r4, #7
 800d382:	f024 0307 	bic.w	r3, r4, #7
 800d386:	469b      	mov	fp, r3
 800d388:	685d      	ldr	r5, [r3, #4]
 800d38a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800d38e:	2301      	movs	r3, #1
 800d390:	e6da      	b.n	800d148 <_vfiprintf_r+0x3fc>
 800d392:	46a3      	mov	fp, r4
 800d394:	f01a 0510 	ands.w	r5, sl, #16
 800d398:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d39c:	d001      	beq.n	800d3a2 <_vfiprintf_r+0x656>
 800d39e:	461d      	mov	r5, r3
 800d3a0:	e7f5      	b.n	800d38e <_vfiprintf_r+0x642>
 800d3a2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d3a6:	d001      	beq.n	800d3ac <_vfiprintf_r+0x660>
 800d3a8:	b2a4      	uxth	r4, r4
 800d3aa:	e7f0      	b.n	800d38e <_vfiprintf_r+0x642>
 800d3ac:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d3b0:	d0ed      	beq.n	800d38e <_vfiprintf_r+0x642>
 800d3b2:	b2e4      	uxtb	r4, r4
 800d3b4:	e7f3      	b.n	800d39e <_vfiprintf_r+0x652>
 800d3b6:	4a47      	ldr	r2, [pc, #284]	; (800d4d4 <_vfiprintf_r+0x788>)
 800d3b8:	e5c5      	b.n	800cf46 <_vfiprintf_r+0x1fa>
 800d3ba:	46a3      	mov	fp, r4
 800d3bc:	f01a 0510 	ands.w	r5, sl, #16
 800d3c0:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d3c4:	d001      	beq.n	800d3ca <_vfiprintf_r+0x67e>
 800d3c6:	4615      	mov	r5, r2
 800d3c8:	e5c9      	b.n	800cf5e <_vfiprintf_r+0x212>
 800d3ca:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800d3ce:	d001      	beq.n	800d3d4 <_vfiprintf_r+0x688>
 800d3d0:	b2a4      	uxth	r4, r4
 800d3d2:	e5c4      	b.n	800cf5e <_vfiprintf_r+0x212>
 800d3d4:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d3d8:	f43f adc1 	beq.w	800cf5e <_vfiprintf_r+0x212>
 800d3dc:	b2e4      	uxtb	r4, r4
 800d3de:	e7f2      	b.n	800d3c6 <_vfiprintf_r+0x67a>
 800d3e0:	2c0a      	cmp	r4, #10
 800d3e2:	f175 0300 	sbcs.w	r3, r5, #0
 800d3e6:	d205      	bcs.n	800d3f4 <_vfiprintf_r+0x6a8>
 800d3e8:	3430      	adds	r4, #48	; 0x30
 800d3ea:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800d3ee:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800d3f2:	e137      	b.n	800d664 <_vfiprintf_r+0x918>
 800d3f4:	ab38      	add	r3, sp, #224	; 0xe0
 800d3f6:	9308      	str	r3, [sp, #32]
 800d3f8:	9b04      	ldr	r3, [sp, #16]
 800d3fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3fe:	f04f 0a00 	mov.w	sl, #0
 800d402:	9309      	str	r3, [sp, #36]	; 0x24
 800d404:	9b08      	ldr	r3, [sp, #32]
 800d406:	220a      	movs	r2, #10
 800d408:	f103 38ff 	add.w	r8, r3, #4294967295
 800d40c:	4620      	mov	r0, r4
 800d40e:	2300      	movs	r3, #0
 800d410:	4629      	mov	r1, r5
 800d412:	f7f3 f929 	bl	8000668 <__aeabi_uldivmod>
 800d416:	9b08      	ldr	r3, [sp, #32]
 800d418:	3230      	adds	r2, #48	; 0x30
 800d41a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d420:	f10a 0a01 	add.w	sl, sl, #1
 800d424:	b1db      	cbz	r3, 800d45e <_vfiprintf_r+0x712>
 800d426:	9b06      	ldr	r3, [sp, #24]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	4553      	cmp	r3, sl
 800d42c:	d117      	bne.n	800d45e <_vfiprintf_r+0x712>
 800d42e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d432:	d014      	beq.n	800d45e <_vfiprintf_r+0x712>
 800d434:	2c0a      	cmp	r4, #10
 800d436:	f175 0300 	sbcs.w	r3, r5, #0
 800d43a:	d310      	bcc.n	800d45e <_vfiprintf_r+0x712>
 800d43c:	9b07      	ldr	r3, [sp, #28]
 800d43e:	eba8 0803 	sub.w	r8, r8, r3
 800d442:	461a      	mov	r2, r3
 800d444:	ee18 1a10 	vmov	r1, s16
 800d448:	4640      	mov	r0, r8
 800d44a:	f7fd fa16 	bl	800a87a <strncpy>
 800d44e:	9b06      	ldr	r3, [sp, #24]
 800d450:	785b      	ldrb	r3, [r3, #1]
 800d452:	b1a3      	cbz	r3, 800d47e <_vfiprintf_r+0x732>
 800d454:	9b06      	ldr	r3, [sp, #24]
 800d456:	3301      	adds	r3, #1
 800d458:	9306      	str	r3, [sp, #24]
 800d45a:	f04f 0a00 	mov.w	sl, #0
 800d45e:	2300      	movs	r3, #0
 800d460:	220a      	movs	r2, #10
 800d462:	4620      	mov	r0, r4
 800d464:	4629      	mov	r1, r5
 800d466:	f7f3 f8ff 	bl	8000668 <__aeabi_uldivmod>
 800d46a:	2c0a      	cmp	r4, #10
 800d46c:	f175 0300 	sbcs.w	r3, r5, #0
 800d470:	f0c0 80f8 	bcc.w	800d664 <_vfiprintf_r+0x918>
 800d474:	4604      	mov	r4, r0
 800d476:	460d      	mov	r5, r1
 800d478:	f8cd 8020 	str.w	r8, [sp, #32]
 800d47c:	e7c2      	b.n	800d404 <_vfiprintf_r+0x6b8>
 800d47e:	469a      	mov	sl, r3
 800d480:	e7ed      	b.n	800d45e <_vfiprintf_r+0x712>
 800d482:	f004 030f 	and.w	r3, r4, #15
 800d486:	9a05      	ldr	r2, [sp, #20]
 800d488:	0924      	lsrs	r4, r4, #4
 800d48a:	5cd3      	ldrb	r3, [r2, r3]
 800d48c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800d490:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d494:	092d      	lsrs	r5, r5, #4
 800d496:	ea54 0305 	orrs.w	r3, r4, r5
 800d49a:	d1f2      	bne.n	800d482 <_vfiprintf_r+0x736>
 800d49c:	e0e2      	b.n	800d664 <_vfiprintf_r+0x918>
 800d49e:	b933      	cbnz	r3, 800d4ae <_vfiprintf_r+0x762>
 800d4a0:	f01a 0f01 	tst.w	sl, #1
 800d4a4:	d003      	beq.n	800d4ae <_vfiprintf_r+0x762>
 800d4a6:	2330      	movs	r3, #48	; 0x30
 800d4a8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800d4ac:	e79f      	b.n	800d3ee <_vfiprintf_r+0x6a2>
 800d4ae:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800d4b2:	e0d7      	b.n	800d664 <_vfiprintf_r+0x918>
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 80a3 	beq.w	800d600 <_vfiprintf_r+0x8b4>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800d4c0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800d4c4:	46a3      	mov	fp, r4
 800d4c6:	e5da      	b.n	800d07e <_vfiprintf_r+0x332>
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	e68c      	b.n	800d1e6 <_vfiprintf_r+0x49a>
 800d4cc:	0800f4e0 	.word	0x0800f4e0
 800d4d0:	0800f4f0 	.word	0x0800f4f0
 800d4d4:	0800f136 	.word	0x0800f136
 800d4d8:	2010      	movs	r0, #16
 800d4da:	4402      	add	r2, r0
 800d4dc:	2b07      	cmp	r3, #7
 800d4de:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800d4e2:	6070      	str	r0, [r6, #4]
 800d4e4:	dd07      	ble.n	800d4f6 <_vfiprintf_r+0x7aa>
 800d4e6:	aa0c      	add	r2, sp, #48	; 0x30
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	4648      	mov	r0, r9
 800d4ec:	f7ff fbfc 	bl	800cce8 <__sprint_r>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d164      	bne.n	800d5be <_vfiprintf_r+0x872>
 800d4f4:	a90f      	add	r1, sp, #60	; 0x3c
 800d4f6:	3c10      	subs	r4, #16
 800d4f8:	460e      	mov	r6, r1
 800d4fa:	e68f      	b.n	800d21c <_vfiprintf_r+0x4d0>
 800d4fc:	460e      	mov	r6, r1
 800d4fe:	e6a8      	b.n	800d252 <_vfiprintf_r+0x506>
 800d500:	aa0c      	add	r2, sp, #48	; 0x30
 800d502:	4639      	mov	r1, r7
 800d504:	4648      	mov	r0, r9
 800d506:	f7ff fbef 	bl	800cce8 <__sprint_r>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d157      	bne.n	800d5be <_vfiprintf_r+0x872>
 800d50e:	ae0f      	add	r6, sp, #60	; 0x3c
 800d510:	e6b1      	b.n	800d276 <_vfiprintf_r+0x52a>
 800d512:	aa0c      	add	r2, sp, #48	; 0x30
 800d514:	4639      	mov	r1, r7
 800d516:	4648      	mov	r0, r9
 800d518:	f7ff fbe6 	bl	800cce8 <__sprint_r>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d14e      	bne.n	800d5be <_vfiprintf_r+0x872>
 800d520:	ae0f      	add	r6, sp, #60	; 0x3c
 800d522:	e6b8      	b.n	800d296 <_vfiprintf_r+0x54a>
 800d524:	2010      	movs	r0, #16
 800d526:	4402      	add	r2, r0
 800d528:	2b07      	cmp	r3, #7
 800d52a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800d52e:	6070      	str	r0, [r6, #4]
 800d530:	dd07      	ble.n	800d542 <_vfiprintf_r+0x7f6>
 800d532:	aa0c      	add	r2, sp, #48	; 0x30
 800d534:	4639      	mov	r1, r7
 800d536:	4648      	mov	r0, r9
 800d538:	f7ff fbd6 	bl	800cce8 <__sprint_r>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d13e      	bne.n	800d5be <_vfiprintf_r+0x872>
 800d540:	a90f      	add	r1, sp, #60	; 0x3c
 800d542:	3c10      	subs	r4, #16
 800d544:	460e      	mov	r6, r1
 800d546:	e6ae      	b.n	800d2a6 <_vfiprintf_r+0x55a>
 800d548:	460e      	mov	r6, r1
 800d54a:	e6c7      	b.n	800d2dc <_vfiprintf_r+0x590>
 800d54c:	2010      	movs	r0, #16
 800d54e:	4401      	add	r1, r0
 800d550:	2b07      	cmp	r3, #7
 800d552:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d556:	6070      	str	r0, [r6, #4]
 800d558:	dd06      	ble.n	800d568 <_vfiprintf_r+0x81c>
 800d55a:	aa0c      	add	r2, sp, #48	; 0x30
 800d55c:	4639      	mov	r1, r7
 800d55e:	4648      	mov	r0, r9
 800d560:	f7ff fbc2 	bl	800cce8 <__sprint_r>
 800d564:	bb58      	cbnz	r0, 800d5be <_vfiprintf_r+0x872>
 800d566:	aa0f      	add	r2, sp, #60	; 0x3c
 800d568:	3c10      	subs	r4, #16
 800d56a:	4616      	mov	r6, r2
 800d56c:	e6bb      	b.n	800d2e6 <_vfiprintf_r+0x59a>
 800d56e:	4616      	mov	r6, r2
 800d570:	e6d3      	b.n	800d31a <_vfiprintf_r+0x5ce>
 800d572:	aa0c      	add	r2, sp, #48	; 0x30
 800d574:	4639      	mov	r1, r7
 800d576:	4648      	mov	r0, r9
 800d578:	f7ff fbb6 	bl	800cce8 <__sprint_r>
 800d57c:	b9f8      	cbnz	r0, 800d5be <_vfiprintf_r+0x872>
 800d57e:	ab0f      	add	r3, sp, #60	; 0x3c
 800d580:	e6da      	b.n	800d338 <_vfiprintf_r+0x5ec>
 800d582:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800d586:	1a54      	subs	r4, r2, r1
 800d588:	2c00      	cmp	r4, #0
 800d58a:	f77f aed9 	ble.w	800d340 <_vfiprintf_r+0x5f4>
 800d58e:	4d39      	ldr	r5, [pc, #228]	; (800d674 <_vfiprintf_r+0x928>)
 800d590:	2610      	movs	r6, #16
 800d592:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800d596:	2c10      	cmp	r4, #16
 800d598:	f102 0201 	add.w	r2, r2, #1
 800d59c:	601d      	str	r5, [r3, #0]
 800d59e:	dc1d      	bgt.n	800d5dc <_vfiprintf_r+0x890>
 800d5a0:	605c      	str	r4, [r3, #4]
 800d5a2:	2a07      	cmp	r2, #7
 800d5a4:	440c      	add	r4, r1
 800d5a6:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800d5aa:	f77f aec9 	ble.w	800d340 <_vfiprintf_r+0x5f4>
 800d5ae:	aa0c      	add	r2, sp, #48	; 0x30
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	f7ff fb98 	bl	800cce8 <__sprint_r>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	f43f aec1 	beq.w	800d340 <_vfiprintf_r+0x5f4>
 800d5be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c0:	07d9      	lsls	r1, r3, #31
 800d5c2:	d405      	bmi.n	800d5d0 <_vfiprintf_r+0x884>
 800d5c4:	89bb      	ldrh	r3, [r7, #12]
 800d5c6:	059a      	lsls	r2, r3, #22
 800d5c8:	d402      	bmi.n	800d5d0 <_vfiprintf_r+0x884>
 800d5ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d5cc:	f7fb feab 	bl	8009326 <__retarget_lock_release_recursive>
 800d5d0:	89bb      	ldrh	r3, [r7, #12]
 800d5d2:	065b      	lsls	r3, r3, #25
 800d5d4:	f57f abed 	bpl.w	800cdb2 <_vfiprintf_r+0x66>
 800d5d8:	f7ff bbe8 	b.w	800cdac <_vfiprintf_r+0x60>
 800d5dc:	3110      	adds	r1, #16
 800d5de:	2a07      	cmp	r2, #7
 800d5e0:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800d5e4:	605e      	str	r6, [r3, #4]
 800d5e6:	dc02      	bgt.n	800d5ee <_vfiprintf_r+0x8a2>
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	3c10      	subs	r4, #16
 800d5ec:	e7d1      	b.n	800d592 <_vfiprintf_r+0x846>
 800d5ee:	aa0c      	add	r2, sp, #48	; 0x30
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	4648      	mov	r0, r9
 800d5f4:	f7ff fb78 	bl	800cce8 <__sprint_r>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d1e0      	bne.n	800d5be <_vfiprintf_r+0x872>
 800d5fc:	ab0f      	add	r3, sp, #60	; 0x3c
 800d5fe:	e7f4      	b.n	800d5ea <_vfiprintf_r+0x89e>
 800d600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d602:	b913      	cbnz	r3, 800d60a <_vfiprintf_r+0x8be>
 800d604:	2300      	movs	r3, #0
 800d606:	930d      	str	r3, [sp, #52]	; 0x34
 800d608:	e7d9      	b.n	800d5be <_vfiprintf_r+0x872>
 800d60a:	aa0c      	add	r2, sp, #48	; 0x30
 800d60c:	4639      	mov	r1, r7
 800d60e:	4648      	mov	r0, r9
 800d610:	f7ff fb6a 	bl	800cce8 <__sprint_r>
 800d614:	2800      	cmp	r0, #0
 800d616:	d0f5      	beq.n	800d604 <_vfiprintf_r+0x8b8>
 800d618:	e7d1      	b.n	800d5be <_vfiprintf_r+0x872>
 800d61a:	ea54 0205 	orrs.w	r2, r4, r5
 800d61e:	f8cd a010 	str.w	sl, [sp, #16]
 800d622:	f43f ada3 	beq.w	800d16c <_vfiprintf_r+0x420>
 800d626:	2b01      	cmp	r3, #1
 800d628:	f43f aeda 	beq.w	800d3e0 <_vfiprintf_r+0x694>
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800d632:	f43f af26 	beq.w	800d482 <_vfiprintf_r+0x736>
 800d636:	f004 0307 	and.w	r3, r4, #7
 800d63a:	08e4      	lsrs	r4, r4, #3
 800d63c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d640:	08ed      	lsrs	r5, r5, #3
 800d642:	3330      	adds	r3, #48	; 0x30
 800d644:	ea54 0105 	orrs.w	r1, r4, r5
 800d648:	4642      	mov	r2, r8
 800d64a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800d64e:	d1f2      	bne.n	800d636 <_vfiprintf_r+0x8ea>
 800d650:	9904      	ldr	r1, [sp, #16]
 800d652:	07c8      	lsls	r0, r1, #31
 800d654:	d506      	bpl.n	800d664 <_vfiprintf_r+0x918>
 800d656:	2b30      	cmp	r3, #48	; 0x30
 800d658:	d004      	beq.n	800d664 <_vfiprintf_r+0x918>
 800d65a:	2330      	movs	r3, #48	; 0x30
 800d65c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800d660:	f1a2 0802 	sub.w	r8, r2, #2
 800d664:	ab38      	add	r3, sp, #224	; 0xe0
 800d666:	eba3 0308 	sub.w	r3, r3, r8
 800d66a:	9d00      	ldr	r5, [sp, #0]
 800d66c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	e5b8      	b.n	800d1e6 <_vfiprintf_r+0x49a>
 800d674:	0800f4e0 	.word	0x0800f4e0

0800d678 <__sbprintf>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	460c      	mov	r4, r1
 800d67c:	8989      	ldrh	r1, [r1, #12]
 800d67e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800d682:	f021 0102 	bic.w	r1, r1, #2
 800d686:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d68a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d68c:	911b      	str	r1, [sp, #108]	; 0x6c
 800d68e:	89e1      	ldrh	r1, [r4, #14]
 800d690:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d694:	69e1      	ldr	r1, [r4, #28]
 800d696:	9109      	str	r1, [sp, #36]	; 0x24
 800d698:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d69a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d69c:	a91c      	add	r1, sp, #112	; 0x70
 800d69e:	9102      	str	r1, [sp, #8]
 800d6a0:	9106      	str	r1, [sp, #24]
 800d6a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	9104      	str	r1, [sp, #16]
 800d6aa:	9107      	str	r1, [sp, #28]
 800d6ac:	a818      	add	r0, sp, #96	; 0x60
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	e9cd 3200 	strd	r3, r2, [sp]
 800d6b4:	9108      	str	r1, [sp, #32]
 800d6b6:	f7fb fe33 	bl	8009320 <__retarget_lock_init_recursive>
 800d6ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6be:	a902      	add	r1, sp, #8
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f7ff fb43 	bl	800cd4c <_vfiprintf_r>
 800d6c6:	1e05      	subs	r5, r0, #0
 800d6c8:	db07      	blt.n	800d6da <__sbprintf+0x62>
 800d6ca:	a902      	add	r1, sp, #8
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7fb fa53 	bl	8008b78 <_fflush_r>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	bf18      	it	ne
 800d6d6:	f04f 35ff 	movne.w	r5, #4294967295
 800d6da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d6de:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d6e0:	065b      	lsls	r3, r3, #25
 800d6e2:	bf42      	ittt	mi
 800d6e4:	89a3      	ldrhmi	r3, [r4, #12]
 800d6e6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800d6ea:	81a3      	strhmi	r3, [r4, #12]
 800d6ec:	f7fb fe19 	bl	8009322 <__retarget_lock_close_recursive>
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <__ascii_wctomb>:
 800d6f8:	b149      	cbz	r1, 800d70e <__ascii_wctomb+0x16>
 800d6fa:	2aff      	cmp	r2, #255	; 0xff
 800d6fc:	bf85      	ittet	hi
 800d6fe:	238a      	movhi	r3, #138	; 0x8a
 800d700:	6003      	strhi	r3, [r0, #0]
 800d702:	700a      	strbls	r2, [r1, #0]
 800d704:	f04f 30ff 	movhi.w	r0, #4294967295
 800d708:	bf98      	it	ls
 800d70a:	2001      	movls	r0, #1
 800d70c:	4770      	bx	lr
 800d70e:	4608      	mov	r0, r1
 800d710:	4770      	bx	lr
	...

0800d714 <_write_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4d07      	ldr	r5, [pc, #28]	; (800d734 <_write_r+0x20>)
 800d718:	4604      	mov	r4, r0
 800d71a:	4608      	mov	r0, r1
 800d71c:	4611      	mov	r1, r2
 800d71e:	2200      	movs	r2, #0
 800d720:	602a      	str	r2, [r5, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f7f4 f8f0 	bl	8001908 <_write>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_write_r+0x1e>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_write_r+0x1e>
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	20000af0 	.word	0x20000af0

0800d738 <__register_exitproc>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800d7b8 <__register_exitproc+0x80>
 800d740:	4606      	mov	r6, r0
 800d742:	f8da 0000 	ldr.w	r0, [sl]
 800d746:	4698      	mov	r8, r3
 800d748:	460f      	mov	r7, r1
 800d74a:	4691      	mov	r9, r2
 800d74c:	f7fb fdea 	bl	8009324 <__retarget_lock_acquire_recursive>
 800d750:	4b18      	ldr	r3, [pc, #96]	; (800d7b4 <__register_exitproc+0x7c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800d758:	b91c      	cbnz	r4, 800d762 <__register_exitproc+0x2a>
 800d75a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800d75e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800d762:	6865      	ldr	r5, [r4, #4]
 800d764:	f8da 0000 	ldr.w	r0, [sl]
 800d768:	2d1f      	cmp	r5, #31
 800d76a:	dd05      	ble.n	800d778 <__register_exitproc+0x40>
 800d76c:	f7fb fddb 	bl	8009326 <__retarget_lock_release_recursive>
 800d770:	f04f 30ff 	mov.w	r0, #4294967295
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	b19e      	cbz	r6, 800d7a2 <__register_exitproc+0x6a>
 800d77a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800d77e:	2201      	movs	r2, #1
 800d780:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800d784:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800d788:	40aa      	lsls	r2, r5
 800d78a:	4313      	orrs	r3, r2
 800d78c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800d790:	2e02      	cmp	r6, #2
 800d792:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800d796:	bf02      	ittt	eq
 800d798:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800d79c:	4313      	orreq	r3, r2
 800d79e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800d7a2:	1c6b      	adds	r3, r5, #1
 800d7a4:	3502      	adds	r5, #2
 800d7a6:	6063      	str	r3, [r4, #4]
 800d7a8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800d7ac:	f7fb fdbb 	bl	8009326 <__retarget_lock_release_recursive>
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e7df      	b.n	800d774 <__register_exitproc+0x3c>
 800d7b4:	0800f0ec 	.word	0x0800f0ec
 800d7b8:	20000438 	.word	0x20000438

0800d7bc <__assert_func>:
 800d7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7be:	4614      	mov	r4, r2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	4b09      	ldr	r3, [pc, #36]	; (800d7e8 <__assert_func+0x2c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	68d8      	ldr	r0, [r3, #12]
 800d7ca:	b14c      	cbz	r4, 800d7e0 <__assert_func+0x24>
 800d7cc:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <__assert_func+0x30>)
 800d7ce:	9100      	str	r1, [sp, #0]
 800d7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7d4:	4906      	ldr	r1, [pc, #24]	; (800d7f0 <__assert_func+0x34>)
 800d7d6:	462b      	mov	r3, r5
 800d7d8:	f000 f8ac 	bl	800d934 <fiprintf>
 800d7dc:	f000 fdd6 	bl	800e38c <abort>
 800d7e0:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <__assert_func+0x38>)
 800d7e2:	461c      	mov	r4, r3
 800d7e4:	e7f3      	b.n	800d7ce <__assert_func+0x12>
 800d7e6:	bf00      	nop
 800d7e8:	2000000c 	.word	0x2000000c
 800d7ec:	0800f500 	.word	0x0800f500
 800d7f0:	0800f50d 	.word	0x0800f50d
 800d7f4:	0800f53b 	.word	0x0800f53b

0800d7f8 <_calloc_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	fba1 1502 	umull	r1, r5, r1, r2
 800d7fe:	b92d      	cbnz	r5, 800d80c <_calloc_r+0x14>
 800d800:	f7fb fe0e 	bl	8009420 <_malloc_r>
 800d804:	4604      	mov	r4, r0
 800d806:	b938      	cbnz	r0, 800d818 <_calloc_r+0x20>
 800d808:	4620      	mov	r0, r4
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	f7f7 fc6c 	bl	80050e8 <__errno>
 800d810:	230c      	movs	r3, #12
 800d812:	6003      	str	r3, [r0, #0]
 800d814:	2400      	movs	r4, #0
 800d816:	e7f7      	b.n	800d808 <_calloc_r+0x10>
 800d818:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d81c:	f022 0203 	bic.w	r2, r2, #3
 800d820:	3a04      	subs	r2, #4
 800d822:	2a24      	cmp	r2, #36	; 0x24
 800d824:	d819      	bhi.n	800d85a <_calloc_r+0x62>
 800d826:	2a13      	cmp	r2, #19
 800d828:	d915      	bls.n	800d856 <_calloc_r+0x5e>
 800d82a:	2a1b      	cmp	r2, #27
 800d82c:	e9c0 5500 	strd	r5, r5, [r0]
 800d830:	d806      	bhi.n	800d840 <_calloc_r+0x48>
 800d832:	f100 0308 	add.w	r3, r0, #8
 800d836:	2200      	movs	r2, #0
 800d838:	e9c3 2200 	strd	r2, r2, [r3]
 800d83c:	609a      	str	r2, [r3, #8]
 800d83e:	e7e3      	b.n	800d808 <_calloc_r+0x10>
 800d840:	2a24      	cmp	r2, #36	; 0x24
 800d842:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800d846:	bf11      	iteee	ne
 800d848:	f100 0310 	addne.w	r3, r0, #16
 800d84c:	6105      	streq	r5, [r0, #16]
 800d84e:	f100 0318 	addeq.w	r3, r0, #24
 800d852:	6145      	streq	r5, [r0, #20]
 800d854:	e7ef      	b.n	800d836 <_calloc_r+0x3e>
 800d856:	4603      	mov	r3, r0
 800d858:	e7ed      	b.n	800d836 <_calloc_r+0x3e>
 800d85a:	4629      	mov	r1, r5
 800d85c:	f7f7 fc88 	bl	8005170 <memset>
 800d860:	e7d2      	b.n	800d808 <_calloc_r+0x10>
	...

0800d864 <_close_r>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4d06      	ldr	r5, [pc, #24]	; (800d880 <_close_r+0x1c>)
 800d868:	2300      	movs	r3, #0
 800d86a:	4604      	mov	r4, r0
 800d86c:	4608      	mov	r0, r1
 800d86e:	602b      	str	r3, [r5, #0]
 800d870:	f7f4 f876 	bl	8001960 <_close>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_close_r+0x1a>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_close_r+0x1a>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	20000af0 	.word	0x20000af0

0800d884 <_fclose_r>:
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	4606      	mov	r6, r0
 800d888:	460c      	mov	r4, r1
 800d88a:	b911      	cbnz	r1, 800d892 <_fclose_r+0xe>
 800d88c:	2500      	movs	r5, #0
 800d88e:	4628      	mov	r0, r5
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	b118      	cbz	r0, 800d89c <_fclose_r+0x18>
 800d894:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d896:	b90b      	cbnz	r3, 800d89c <_fclose_r+0x18>
 800d898:	f7fb f9ec 	bl	8008c74 <__sinit>
 800d89c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d89e:	07d8      	lsls	r0, r3, #31
 800d8a0:	d405      	bmi.n	800d8ae <_fclose_r+0x2a>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	0599      	lsls	r1, r3, #22
 800d8a6:	d402      	bmi.n	800d8ae <_fclose_r+0x2a>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	f7fb fd3b 	bl	8009324 <__retarget_lock_acquire_recursive>
 800d8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b2:	b93b      	cbnz	r3, 800d8c4 <_fclose_r+0x40>
 800d8b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d8b6:	f015 0501 	ands.w	r5, r5, #1
 800d8ba:	d1e7      	bne.n	800d88c <_fclose_r+0x8>
 800d8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8be:	f7fb fd32 	bl	8009326 <__retarget_lock_release_recursive>
 800d8c2:	e7e4      	b.n	800d88e <_fclose_r+0xa>
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7fb f8c8 	bl	8008a5c <__sflush_r>
 800d8cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8ce:	4605      	mov	r5, r0
 800d8d0:	b133      	cbz	r3, 800d8e0 <_fclose_r+0x5c>
 800d8d2:	69e1      	ldr	r1, [r4, #28]
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	4798      	blx	r3
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	bfb8      	it	lt
 800d8dc:	f04f 35ff 	movlt.w	r5, #4294967295
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	061a      	lsls	r2, r3, #24
 800d8e4:	d503      	bpl.n	800d8ee <_fclose_r+0x6a>
 800d8e6:	6921      	ldr	r1, [r4, #16]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7fb fabb 	bl	8008e64 <_free_r>
 800d8ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d8f0:	b141      	cbz	r1, 800d904 <_fclose_r+0x80>
 800d8f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d8f6:	4299      	cmp	r1, r3
 800d8f8:	d002      	beq.n	800d900 <_fclose_r+0x7c>
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7fb fab2 	bl	8008e64 <_free_r>
 800d900:	2300      	movs	r3, #0
 800d902:	6323      	str	r3, [r4, #48]	; 0x30
 800d904:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d906:	b121      	cbz	r1, 800d912 <_fclose_r+0x8e>
 800d908:	4630      	mov	r0, r6
 800d90a:	f7fb faab 	bl	8008e64 <_free_r>
 800d90e:	2300      	movs	r3, #0
 800d910:	6463      	str	r3, [r4, #68]	; 0x44
 800d912:	f7fb f997 	bl	8008c44 <__sfp_lock_acquire>
 800d916:	2300      	movs	r3, #0
 800d918:	81a3      	strh	r3, [r4, #12]
 800d91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d91c:	07db      	lsls	r3, r3, #31
 800d91e:	d402      	bmi.n	800d926 <_fclose_r+0xa2>
 800d920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d922:	f7fb fd00 	bl	8009326 <__retarget_lock_release_recursive>
 800d926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d928:	f7fb fcfb 	bl	8009322 <__retarget_lock_close_recursive>
 800d92c:	f7fb f990 	bl	8008c50 <__sfp_lock_release>
 800d930:	e7ad      	b.n	800d88e <_fclose_r+0xa>
	...

0800d934 <fiprintf>:
 800d934:	b40e      	push	{r1, r2, r3}
 800d936:	b503      	push	{r0, r1, lr}
 800d938:	4601      	mov	r1, r0
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	4805      	ldr	r0, [pc, #20]	; (800d954 <fiprintf+0x20>)
 800d93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d942:	6800      	ldr	r0, [r0, #0]
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	f7ff fa01 	bl	800cd4c <_vfiprintf_r>
 800d94a:	b002      	add	sp, #8
 800d94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d950:	b003      	add	sp, #12
 800d952:	4770      	bx	lr
 800d954:	2000000c 	.word	0x2000000c

0800d958 <__fputwc>:
 800d958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	4680      	mov	r8, r0
 800d95e:	460e      	mov	r6, r1
 800d960:	4615      	mov	r5, r2
 800d962:	f7fb fcd3 	bl	800930c <__locale_mb_cur_max>
 800d966:	2801      	cmp	r0, #1
 800d968:	d11c      	bne.n	800d9a4 <__fputwc+0x4c>
 800d96a:	1e73      	subs	r3, r6, #1
 800d96c:	2bfe      	cmp	r3, #254	; 0xfe
 800d96e:	d819      	bhi.n	800d9a4 <__fputwc+0x4c>
 800d970:	f88d 6004 	strb.w	r6, [sp, #4]
 800d974:	4604      	mov	r4, r0
 800d976:	2700      	movs	r7, #0
 800d978:	f10d 0904 	add.w	r9, sp, #4
 800d97c:	42a7      	cmp	r7, r4
 800d97e:	d020      	beq.n	800d9c2 <__fputwc+0x6a>
 800d980:	68ab      	ldr	r3, [r5, #8]
 800d982:	f817 1009 	ldrb.w	r1, [r7, r9]
 800d986:	3b01      	subs	r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	60ab      	str	r3, [r5, #8]
 800d98c:	da04      	bge.n	800d998 <__fputwc+0x40>
 800d98e:	69aa      	ldr	r2, [r5, #24]
 800d990:	4293      	cmp	r3, r2
 800d992:	db1a      	blt.n	800d9ca <__fputwc+0x72>
 800d994:	290a      	cmp	r1, #10
 800d996:	d018      	beq.n	800d9ca <__fputwc+0x72>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	1c5a      	adds	r2, r3, #1
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	7019      	strb	r1, [r3, #0]
 800d9a0:	3701      	adds	r7, #1
 800d9a2:	e7eb      	b.n	800d97c <__fputwc+0x24>
 800d9a4:	a901      	add	r1, sp, #4
 800d9a6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	f000 fcd7 	bl	800e360 <_wcrtomb_r>
 800d9b2:	1c41      	adds	r1, r0, #1
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	d1de      	bne.n	800d976 <__fputwc+0x1e>
 800d9b8:	89ab      	ldrh	r3, [r5, #12]
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	81ab      	strh	r3, [r5, #12]
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	b003      	add	sp, #12
 800d9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	462a      	mov	r2, r5
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	f000 fc7e 	bl	800e2ce <__swbuf_r>
 800d9d2:	1c42      	adds	r2, r0, #1
 800d9d4:	d1e4      	bne.n	800d9a0 <__fputwc+0x48>
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	e7f3      	b.n	800d9c2 <__fputwc+0x6a>

0800d9da <_fputwc_r>:
 800d9da:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9de:	4614      	mov	r4, r2
 800d9e0:	07da      	lsls	r2, r3, #31
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	d407      	bmi.n	800d9f6 <_fputwc_r+0x1c>
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	059b      	lsls	r3, r3, #22
 800d9ea:	d404      	bmi.n	800d9f6 <_fputwc_r+0x1c>
 800d9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9ee:	9101      	str	r1, [sp, #4]
 800d9f0:	f7fb fc98 	bl	8009324 <__retarget_lock_acquire_recursive>
 800d9f4:	9901      	ldr	r1, [sp, #4]
 800d9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fa:	0498      	lsls	r0, r3, #18
 800d9fc:	d406      	bmi.n	800da0c <_fputwc_r+0x32>
 800d9fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da0a:	6663      	str	r3, [r4, #100]	; 0x64
 800da0c:	4622      	mov	r2, r4
 800da0e:	4628      	mov	r0, r5
 800da10:	f7ff ffa2 	bl	800d958 <__fputwc>
 800da14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da16:	07da      	lsls	r2, r3, #31
 800da18:	4605      	mov	r5, r0
 800da1a:	d405      	bmi.n	800da28 <_fputwc_r+0x4e>
 800da1c:	89a3      	ldrh	r3, [r4, #12]
 800da1e:	059b      	lsls	r3, r3, #22
 800da20:	d402      	bmi.n	800da28 <_fputwc_r+0x4e>
 800da22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da24:	f7fb fc7f 	bl	8009326 <__retarget_lock_release_recursive>
 800da28:	4628      	mov	r0, r5
 800da2a:	b003      	add	sp, #12
 800da2c:	bd30      	pop	{r4, r5, pc}
	...

0800da30 <_fstat_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d07      	ldr	r5, [pc, #28]	; (800da50 <_fstat_r+0x20>)
 800da34:	2300      	movs	r3, #0
 800da36:	4604      	mov	r4, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	4611      	mov	r1, r2
 800da3c:	602b      	str	r3, [r5, #0]
 800da3e:	f7f3 ffdf 	bl	8001a00 <_fstat>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	d102      	bne.n	800da4c <_fstat_r+0x1c>
 800da46:	682b      	ldr	r3, [r5, #0]
 800da48:	b103      	cbz	r3, 800da4c <_fstat_r+0x1c>
 800da4a:	6023      	str	r3, [r4, #0]
 800da4c:	bd38      	pop	{r3, r4, r5, pc}
 800da4e:	bf00      	nop
 800da50:	20000af0 	.word	0x20000af0

0800da54 <rshift>:
 800da54:	6903      	ldr	r3, [r0, #16]
 800da56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da62:	f100 0414 	add.w	r4, r0, #20
 800da66:	dd45      	ble.n	800daf4 <rshift+0xa0>
 800da68:	f011 011f 	ands.w	r1, r1, #31
 800da6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da74:	d10c      	bne.n	800da90 <rshift+0x3c>
 800da76:	f100 0710 	add.w	r7, r0, #16
 800da7a:	4629      	mov	r1, r5
 800da7c:	42b1      	cmp	r1, r6
 800da7e:	d334      	bcc.n	800daea <rshift+0x96>
 800da80:	1a9b      	subs	r3, r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	1eea      	subs	r2, r5, #3
 800da86:	4296      	cmp	r6, r2
 800da88:	bf38      	it	cc
 800da8a:	2300      	movcc	r3, #0
 800da8c:	4423      	add	r3, r4
 800da8e:	e015      	b.n	800dabc <rshift+0x68>
 800da90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da94:	f1c1 0820 	rsb	r8, r1, #32
 800da98:	40cf      	lsrs	r7, r1
 800da9a:	f105 0e04 	add.w	lr, r5, #4
 800da9e:	46a1      	mov	r9, r4
 800daa0:	4576      	cmp	r6, lr
 800daa2:	46f4      	mov	ip, lr
 800daa4:	d815      	bhi.n	800dad2 <rshift+0x7e>
 800daa6:	1a9a      	subs	r2, r3, r2
 800daa8:	0092      	lsls	r2, r2, #2
 800daaa:	3a04      	subs	r2, #4
 800daac:	3501      	adds	r5, #1
 800daae:	42ae      	cmp	r6, r5
 800dab0:	bf38      	it	cc
 800dab2:	2200      	movcc	r2, #0
 800dab4:	18a3      	adds	r3, r4, r2
 800dab6:	50a7      	str	r7, [r4, r2]
 800dab8:	b107      	cbz	r7, 800dabc <rshift+0x68>
 800daba:	3304      	adds	r3, #4
 800dabc:	1b1a      	subs	r2, r3, r4
 800dabe:	42a3      	cmp	r3, r4
 800dac0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dac4:	bf08      	it	eq
 800dac6:	2300      	moveq	r3, #0
 800dac8:	6102      	str	r2, [r0, #16]
 800daca:	bf08      	it	eq
 800dacc:	6143      	streq	r3, [r0, #20]
 800dace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dad2:	f8dc c000 	ldr.w	ip, [ip]
 800dad6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dada:	ea4c 0707 	orr.w	r7, ip, r7
 800dade:	f849 7b04 	str.w	r7, [r9], #4
 800dae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dae6:	40cf      	lsrs	r7, r1
 800dae8:	e7da      	b.n	800daa0 <rshift+0x4c>
 800daea:	f851 cb04 	ldr.w	ip, [r1], #4
 800daee:	f847 cf04 	str.w	ip, [r7, #4]!
 800daf2:	e7c3      	b.n	800da7c <rshift+0x28>
 800daf4:	4623      	mov	r3, r4
 800daf6:	e7e1      	b.n	800dabc <rshift+0x68>

0800daf8 <__hexdig_fun>:
 800daf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dafc:	2b09      	cmp	r3, #9
 800dafe:	d802      	bhi.n	800db06 <__hexdig_fun+0xe>
 800db00:	3820      	subs	r0, #32
 800db02:	b2c0      	uxtb	r0, r0
 800db04:	4770      	bx	lr
 800db06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800db0a:	2b05      	cmp	r3, #5
 800db0c:	d801      	bhi.n	800db12 <__hexdig_fun+0x1a>
 800db0e:	3847      	subs	r0, #71	; 0x47
 800db10:	e7f7      	b.n	800db02 <__hexdig_fun+0xa>
 800db12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800db16:	2b05      	cmp	r3, #5
 800db18:	d801      	bhi.n	800db1e <__hexdig_fun+0x26>
 800db1a:	3827      	subs	r0, #39	; 0x27
 800db1c:	e7f1      	b.n	800db02 <__hexdig_fun+0xa>
 800db1e:	2000      	movs	r0, #0
 800db20:	4770      	bx	lr
	...

0800db24 <__gethex>:
 800db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	ed2d 8b02 	vpush	{d8}
 800db2c:	b089      	sub	sp, #36	; 0x24
 800db2e:	ee08 0a10 	vmov	s16, r0
 800db32:	9304      	str	r3, [sp, #16]
 800db34:	4bb4      	ldr	r3, [pc, #720]	; (800de08 <__gethex+0x2e4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	4618      	mov	r0, r3
 800db3c:	468b      	mov	fp, r1
 800db3e:	4690      	mov	r8, r2
 800db40:	f7f2 fb7e 	bl	8000240 <strlen>
 800db44:	9b01      	ldr	r3, [sp, #4]
 800db46:	f8db 2000 	ldr.w	r2, [fp]
 800db4a:	4403      	add	r3, r0
 800db4c:	4682      	mov	sl, r0
 800db4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db52:	9305      	str	r3, [sp, #20]
 800db54:	1c93      	adds	r3, r2, #2
 800db56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db5e:	32fe      	adds	r2, #254	; 0xfe
 800db60:	18d1      	adds	r1, r2, r3
 800db62:	461f      	mov	r7, r3
 800db64:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db68:	9100      	str	r1, [sp, #0]
 800db6a:	2830      	cmp	r0, #48	; 0x30
 800db6c:	d0f8      	beq.n	800db60 <__gethex+0x3c>
 800db6e:	f7ff ffc3 	bl	800daf8 <__hexdig_fun>
 800db72:	4604      	mov	r4, r0
 800db74:	2800      	cmp	r0, #0
 800db76:	d13a      	bne.n	800dbee <__gethex+0xca>
 800db78:	9901      	ldr	r1, [sp, #4]
 800db7a:	4652      	mov	r2, sl
 800db7c:	4638      	mov	r0, r7
 800db7e:	f000 fb17 	bl	800e1b0 <strncmp>
 800db82:	4605      	mov	r5, r0
 800db84:	2800      	cmp	r0, #0
 800db86:	d168      	bne.n	800dc5a <__gethex+0x136>
 800db88:	f817 000a 	ldrb.w	r0, [r7, sl]
 800db8c:	eb07 060a 	add.w	r6, r7, sl
 800db90:	f7ff ffb2 	bl	800daf8 <__hexdig_fun>
 800db94:	2800      	cmp	r0, #0
 800db96:	d062      	beq.n	800dc5e <__gethex+0x13a>
 800db98:	4633      	mov	r3, r6
 800db9a:	7818      	ldrb	r0, [r3, #0]
 800db9c:	2830      	cmp	r0, #48	; 0x30
 800db9e:	461f      	mov	r7, r3
 800dba0:	f103 0301 	add.w	r3, r3, #1
 800dba4:	d0f9      	beq.n	800db9a <__gethex+0x76>
 800dba6:	f7ff ffa7 	bl	800daf8 <__hexdig_fun>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	fab0 f480 	clz	r4, r0
 800dbb0:	0964      	lsrs	r4, r4, #5
 800dbb2:	4635      	mov	r5, r6
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	463a      	mov	r2, r7
 800dbb8:	4616      	mov	r6, r2
 800dbba:	3201      	adds	r2, #1
 800dbbc:	7830      	ldrb	r0, [r6, #0]
 800dbbe:	f7ff ff9b 	bl	800daf8 <__hexdig_fun>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d1f8      	bne.n	800dbb8 <__gethex+0x94>
 800dbc6:	9901      	ldr	r1, [sp, #4]
 800dbc8:	4652      	mov	r2, sl
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f000 faf0 	bl	800e1b0 <strncmp>
 800dbd0:	b980      	cbnz	r0, 800dbf4 <__gethex+0xd0>
 800dbd2:	b94d      	cbnz	r5, 800dbe8 <__gethex+0xc4>
 800dbd4:	eb06 050a 	add.w	r5, r6, sl
 800dbd8:	462a      	mov	r2, r5
 800dbda:	4616      	mov	r6, r2
 800dbdc:	3201      	adds	r2, #1
 800dbde:	7830      	ldrb	r0, [r6, #0]
 800dbe0:	f7ff ff8a 	bl	800daf8 <__hexdig_fun>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d1f8      	bne.n	800dbda <__gethex+0xb6>
 800dbe8:	1bad      	subs	r5, r5, r6
 800dbea:	00ad      	lsls	r5, r5, #2
 800dbec:	e004      	b.n	800dbf8 <__gethex+0xd4>
 800dbee:	2400      	movs	r4, #0
 800dbf0:	4625      	mov	r5, r4
 800dbf2:	e7e0      	b.n	800dbb6 <__gethex+0x92>
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	d1f7      	bne.n	800dbe8 <__gethex+0xc4>
 800dbf8:	7833      	ldrb	r3, [r6, #0]
 800dbfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dbfe:	2b50      	cmp	r3, #80	; 0x50
 800dc00:	d13b      	bne.n	800dc7a <__gethex+0x156>
 800dc02:	7873      	ldrb	r3, [r6, #1]
 800dc04:	2b2b      	cmp	r3, #43	; 0x2b
 800dc06:	d02c      	beq.n	800dc62 <__gethex+0x13e>
 800dc08:	2b2d      	cmp	r3, #45	; 0x2d
 800dc0a:	d02e      	beq.n	800dc6a <__gethex+0x146>
 800dc0c:	1c71      	adds	r1, r6, #1
 800dc0e:	f04f 0900 	mov.w	r9, #0
 800dc12:	7808      	ldrb	r0, [r1, #0]
 800dc14:	f7ff ff70 	bl	800daf8 <__hexdig_fun>
 800dc18:	1e43      	subs	r3, r0, #1
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b18      	cmp	r3, #24
 800dc1e:	d82c      	bhi.n	800dc7a <__gethex+0x156>
 800dc20:	f1a0 0210 	sub.w	r2, r0, #16
 800dc24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc28:	f7ff ff66 	bl	800daf8 <__hexdig_fun>
 800dc2c:	1e43      	subs	r3, r0, #1
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b18      	cmp	r3, #24
 800dc32:	d91d      	bls.n	800dc70 <__gethex+0x14c>
 800dc34:	f1b9 0f00 	cmp.w	r9, #0
 800dc38:	d000      	beq.n	800dc3c <__gethex+0x118>
 800dc3a:	4252      	negs	r2, r2
 800dc3c:	4415      	add	r5, r2
 800dc3e:	f8cb 1000 	str.w	r1, [fp]
 800dc42:	b1e4      	cbz	r4, 800dc7e <__gethex+0x15a>
 800dc44:	9b00      	ldr	r3, [sp, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	bf14      	ite	ne
 800dc4a:	2700      	movne	r7, #0
 800dc4c:	2706      	moveq	r7, #6
 800dc4e:	4638      	mov	r0, r7
 800dc50:	b009      	add	sp, #36	; 0x24
 800dc52:	ecbd 8b02 	vpop	{d8}
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	463e      	mov	r6, r7
 800dc5c:	4625      	mov	r5, r4
 800dc5e:	2401      	movs	r4, #1
 800dc60:	e7ca      	b.n	800dbf8 <__gethex+0xd4>
 800dc62:	f04f 0900 	mov.w	r9, #0
 800dc66:	1cb1      	adds	r1, r6, #2
 800dc68:	e7d3      	b.n	800dc12 <__gethex+0xee>
 800dc6a:	f04f 0901 	mov.w	r9, #1
 800dc6e:	e7fa      	b.n	800dc66 <__gethex+0x142>
 800dc70:	230a      	movs	r3, #10
 800dc72:	fb03 0202 	mla	r2, r3, r2, r0
 800dc76:	3a10      	subs	r2, #16
 800dc78:	e7d4      	b.n	800dc24 <__gethex+0x100>
 800dc7a:	4631      	mov	r1, r6
 800dc7c:	e7df      	b.n	800dc3e <__gethex+0x11a>
 800dc7e:	1bf3      	subs	r3, r6, r7
 800dc80:	3b01      	subs	r3, #1
 800dc82:	4621      	mov	r1, r4
 800dc84:	2b07      	cmp	r3, #7
 800dc86:	dc0b      	bgt.n	800dca0 <__gethex+0x17c>
 800dc88:	ee18 0a10 	vmov	r0, s16
 800dc8c:	f7fb fe64 	bl	8009958 <_Balloc>
 800dc90:	4604      	mov	r4, r0
 800dc92:	b940      	cbnz	r0, 800dca6 <__gethex+0x182>
 800dc94:	4b5d      	ldr	r3, [pc, #372]	; (800de0c <__gethex+0x2e8>)
 800dc96:	4602      	mov	r2, r0
 800dc98:	21de      	movs	r1, #222	; 0xde
 800dc9a:	485d      	ldr	r0, [pc, #372]	; (800de10 <__gethex+0x2ec>)
 800dc9c:	f7ff fd8e 	bl	800d7bc <__assert_func>
 800dca0:	3101      	adds	r1, #1
 800dca2:	105b      	asrs	r3, r3, #1
 800dca4:	e7ee      	b.n	800dc84 <__gethex+0x160>
 800dca6:	f100 0914 	add.w	r9, r0, #20
 800dcaa:	f04f 0b00 	mov.w	fp, #0
 800dcae:	f1ca 0301 	rsb	r3, sl, #1
 800dcb2:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcb6:	f8cd b000 	str.w	fp, [sp]
 800dcba:	9306      	str	r3, [sp, #24]
 800dcbc:	42b7      	cmp	r7, r6
 800dcbe:	d340      	bcc.n	800dd42 <__gethex+0x21e>
 800dcc0:	9802      	ldr	r0, [sp, #8]
 800dcc2:	9b00      	ldr	r3, [sp, #0]
 800dcc4:	f840 3b04 	str.w	r3, [r0], #4
 800dcc8:	eba0 0009 	sub.w	r0, r0, r9
 800dccc:	1080      	asrs	r0, r0, #2
 800dcce:	0146      	lsls	r6, r0, #5
 800dcd0:	6120      	str	r0, [r4, #16]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fb fefe 	bl	8009ad4 <__hi0bits>
 800dcd8:	1a30      	subs	r0, r6, r0
 800dcda:	f8d8 6000 	ldr.w	r6, [r8]
 800dcde:	42b0      	cmp	r0, r6
 800dce0:	dd63      	ble.n	800ddaa <__gethex+0x286>
 800dce2:	1b87      	subs	r7, r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7fc fa85 	bl	800a1f6 <__any_on>
 800dcec:	4682      	mov	sl, r0
 800dcee:	b1a8      	cbz	r0, 800dd1c <__gethex+0x1f8>
 800dcf0:	1e7b      	subs	r3, r7, #1
 800dcf2:	1159      	asrs	r1, r3, #5
 800dcf4:	f003 021f 	and.w	r2, r3, #31
 800dcf8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dcfc:	f04f 0a01 	mov.w	sl, #1
 800dd00:	fa0a f202 	lsl.w	r2, sl, r2
 800dd04:	420a      	tst	r2, r1
 800dd06:	d009      	beq.n	800dd1c <__gethex+0x1f8>
 800dd08:	4553      	cmp	r3, sl
 800dd0a:	dd05      	ble.n	800dd18 <__gethex+0x1f4>
 800dd0c:	1eb9      	subs	r1, r7, #2
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f7fc fa71 	bl	800a1f6 <__any_on>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d145      	bne.n	800dda4 <__gethex+0x280>
 800dd18:	f04f 0a02 	mov.w	sl, #2
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f7ff fe98 	bl	800da54 <rshift>
 800dd24:	443d      	add	r5, r7
 800dd26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd2a:	42ab      	cmp	r3, r5
 800dd2c:	da4c      	bge.n	800ddc8 <__gethex+0x2a4>
 800dd2e:	ee18 0a10 	vmov	r0, s16
 800dd32:	4621      	mov	r1, r4
 800dd34:	f7fb fe35 	bl	80099a2 <_Bfree>
 800dd38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	27a3      	movs	r7, #163	; 0xa3
 800dd40:	e785      	b.n	800dc4e <__gethex+0x12a>
 800dd42:	1e73      	subs	r3, r6, #1
 800dd44:	9a05      	ldr	r2, [sp, #20]
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d019      	beq.n	800dd84 <__gethex+0x260>
 800dd50:	f1bb 0f20 	cmp.w	fp, #32
 800dd54:	d107      	bne.n	800dd66 <__gethex+0x242>
 800dd56:	9b02      	ldr	r3, [sp, #8]
 800dd58:	9a00      	ldr	r2, [sp, #0]
 800dd5a:	f843 2b04 	str.w	r2, [r3], #4
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	469b      	mov	fp, r3
 800dd66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd6a:	f7ff fec5 	bl	800daf8 <__hexdig_fun>
 800dd6e:	9b00      	ldr	r3, [sp, #0]
 800dd70:	f000 000f 	and.w	r0, r0, #15
 800dd74:	fa00 f00b 	lsl.w	r0, r0, fp
 800dd78:	4303      	orrs	r3, r0
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	f10b 0b04 	add.w	fp, fp, #4
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	e00d      	b.n	800dda0 <__gethex+0x27c>
 800dd84:	9b03      	ldr	r3, [sp, #12]
 800dd86:	9a06      	ldr	r2, [sp, #24]
 800dd88:	4413      	add	r3, r2
 800dd8a:	42bb      	cmp	r3, r7
 800dd8c:	d3e0      	bcc.n	800dd50 <__gethex+0x22c>
 800dd8e:	4618      	mov	r0, r3
 800dd90:	9901      	ldr	r1, [sp, #4]
 800dd92:	9307      	str	r3, [sp, #28]
 800dd94:	4652      	mov	r2, sl
 800dd96:	f000 fa0b 	bl	800e1b0 <strncmp>
 800dd9a:	9b07      	ldr	r3, [sp, #28]
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d1d7      	bne.n	800dd50 <__gethex+0x22c>
 800dda0:	461e      	mov	r6, r3
 800dda2:	e78b      	b.n	800dcbc <__gethex+0x198>
 800dda4:	f04f 0a03 	mov.w	sl, #3
 800dda8:	e7b8      	b.n	800dd1c <__gethex+0x1f8>
 800ddaa:	da0a      	bge.n	800ddc2 <__gethex+0x29e>
 800ddac:	1a37      	subs	r7, r6, r0
 800ddae:	4621      	mov	r1, r4
 800ddb0:	ee18 0a10 	vmov	r0, s16
 800ddb4:	463a      	mov	r2, r7
 800ddb6:	f7fb ffdd 	bl	8009d74 <__lshift>
 800ddba:	1bed      	subs	r5, r5, r7
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	f100 0914 	add.w	r9, r0, #20
 800ddc2:	f04f 0a00 	mov.w	sl, #0
 800ddc6:	e7ae      	b.n	800dd26 <__gethex+0x202>
 800ddc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ddcc:	42a8      	cmp	r0, r5
 800ddce:	dd72      	ble.n	800deb6 <__gethex+0x392>
 800ddd0:	1b45      	subs	r5, r0, r5
 800ddd2:	42ae      	cmp	r6, r5
 800ddd4:	dc36      	bgt.n	800de44 <__gethex+0x320>
 800ddd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d02a      	beq.n	800de34 <__gethex+0x310>
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d02c      	beq.n	800de3c <__gethex+0x318>
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d11c      	bne.n	800de20 <__gethex+0x2fc>
 800dde6:	42ae      	cmp	r6, r5
 800dde8:	d11a      	bne.n	800de20 <__gethex+0x2fc>
 800ddea:	2e01      	cmp	r6, #1
 800ddec:	d112      	bne.n	800de14 <__gethex+0x2f0>
 800ddee:	9a04      	ldr	r2, [sp, #16]
 800ddf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	6123      	str	r3, [r4, #16]
 800ddfa:	f8c9 3000 	str.w	r3, [r9]
 800ddfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de00:	2762      	movs	r7, #98	; 0x62
 800de02:	601c      	str	r4, [r3, #0]
 800de04:	e723      	b.n	800dc4e <__gethex+0x12a>
 800de06:	bf00      	nop
 800de08:	0800f5a0 	.word	0x0800f5a0
 800de0c:	0800f29e 	.word	0x0800f29e
 800de10:	0800f53c 	.word	0x0800f53c
 800de14:	1e71      	subs	r1, r6, #1
 800de16:	4620      	mov	r0, r4
 800de18:	f7fc f9ed 	bl	800a1f6 <__any_on>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1e6      	bne.n	800ddee <__gethex+0x2ca>
 800de20:	ee18 0a10 	vmov	r0, s16
 800de24:	4621      	mov	r1, r4
 800de26:	f7fb fdbc 	bl	80099a2 <_Bfree>
 800de2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de2c:	2300      	movs	r3, #0
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	2750      	movs	r7, #80	; 0x50
 800de32:	e70c      	b.n	800dc4e <__gethex+0x12a>
 800de34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1f2      	bne.n	800de20 <__gethex+0x2fc>
 800de3a:	e7d8      	b.n	800ddee <__gethex+0x2ca>
 800de3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1d5      	bne.n	800ddee <__gethex+0x2ca>
 800de42:	e7ed      	b.n	800de20 <__gethex+0x2fc>
 800de44:	1e6f      	subs	r7, r5, #1
 800de46:	f1ba 0f00 	cmp.w	sl, #0
 800de4a:	d131      	bne.n	800deb0 <__gethex+0x38c>
 800de4c:	b127      	cbz	r7, 800de58 <__gethex+0x334>
 800de4e:	4639      	mov	r1, r7
 800de50:	4620      	mov	r0, r4
 800de52:	f7fc f9d0 	bl	800a1f6 <__any_on>
 800de56:	4682      	mov	sl, r0
 800de58:	117b      	asrs	r3, r7, #5
 800de5a:	2101      	movs	r1, #1
 800de5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de60:	f007 071f 	and.w	r7, r7, #31
 800de64:	fa01 f707 	lsl.w	r7, r1, r7
 800de68:	421f      	tst	r7, r3
 800de6a:	4629      	mov	r1, r5
 800de6c:	4620      	mov	r0, r4
 800de6e:	bf18      	it	ne
 800de70:	f04a 0a02 	orrne.w	sl, sl, #2
 800de74:	1b76      	subs	r6, r6, r5
 800de76:	f7ff fded 	bl	800da54 <rshift>
 800de7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de7e:	2702      	movs	r7, #2
 800de80:	f1ba 0f00 	cmp.w	sl, #0
 800de84:	d048      	beq.n	800df18 <__gethex+0x3f4>
 800de86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d015      	beq.n	800deba <__gethex+0x396>
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d017      	beq.n	800dec2 <__gethex+0x39e>
 800de92:	2b01      	cmp	r3, #1
 800de94:	d109      	bne.n	800deaa <__gethex+0x386>
 800de96:	f01a 0f02 	tst.w	sl, #2
 800de9a:	d006      	beq.n	800deaa <__gethex+0x386>
 800de9c:	f8d9 0000 	ldr.w	r0, [r9]
 800dea0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dea4:	f01a 0f01 	tst.w	sl, #1
 800dea8:	d10e      	bne.n	800dec8 <__gethex+0x3a4>
 800deaa:	f047 0710 	orr.w	r7, r7, #16
 800deae:	e033      	b.n	800df18 <__gethex+0x3f4>
 800deb0:	f04f 0a01 	mov.w	sl, #1
 800deb4:	e7d0      	b.n	800de58 <__gethex+0x334>
 800deb6:	2701      	movs	r7, #1
 800deb8:	e7e2      	b.n	800de80 <__gethex+0x35c>
 800deba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800debc:	f1c3 0301 	rsb	r3, r3, #1
 800dec0:	9315      	str	r3, [sp, #84]	; 0x54
 800dec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d0f0      	beq.n	800deaa <__gethex+0x386>
 800dec8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800decc:	f104 0314 	add.w	r3, r4, #20
 800ded0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ded4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ded8:	f04f 0c00 	mov.w	ip, #0
 800dedc:	4618      	mov	r0, r3
 800dede:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dee6:	d01c      	beq.n	800df22 <__gethex+0x3fe>
 800dee8:	3201      	adds	r2, #1
 800deea:	6002      	str	r2, [r0, #0]
 800deec:	2f02      	cmp	r7, #2
 800deee:	f104 0314 	add.w	r3, r4, #20
 800def2:	d13f      	bne.n	800df74 <__gethex+0x450>
 800def4:	f8d8 2000 	ldr.w	r2, [r8]
 800def8:	3a01      	subs	r2, #1
 800defa:	42b2      	cmp	r2, r6
 800defc:	d10a      	bne.n	800df14 <__gethex+0x3f0>
 800defe:	1171      	asrs	r1, r6, #5
 800df00:	2201      	movs	r2, #1
 800df02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df06:	f006 061f 	and.w	r6, r6, #31
 800df0a:	fa02 f606 	lsl.w	r6, r2, r6
 800df0e:	421e      	tst	r6, r3
 800df10:	bf18      	it	ne
 800df12:	4617      	movne	r7, r2
 800df14:	f047 0720 	orr.w	r7, r7, #32
 800df18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df1a:	601c      	str	r4, [r3, #0]
 800df1c:	9b04      	ldr	r3, [sp, #16]
 800df1e:	601d      	str	r5, [r3, #0]
 800df20:	e695      	b.n	800dc4e <__gethex+0x12a>
 800df22:	4299      	cmp	r1, r3
 800df24:	f843 cc04 	str.w	ip, [r3, #-4]
 800df28:	d8d8      	bhi.n	800dedc <__gethex+0x3b8>
 800df2a:	68a3      	ldr	r3, [r4, #8]
 800df2c:	459b      	cmp	fp, r3
 800df2e:	db19      	blt.n	800df64 <__gethex+0x440>
 800df30:	6861      	ldr	r1, [r4, #4]
 800df32:	ee18 0a10 	vmov	r0, s16
 800df36:	3101      	adds	r1, #1
 800df38:	f7fb fd0e 	bl	8009958 <_Balloc>
 800df3c:	4681      	mov	r9, r0
 800df3e:	b918      	cbnz	r0, 800df48 <__gethex+0x424>
 800df40:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <__gethex+0x488>)
 800df42:	4602      	mov	r2, r0
 800df44:	2184      	movs	r1, #132	; 0x84
 800df46:	e6a8      	b.n	800dc9a <__gethex+0x176>
 800df48:	6922      	ldr	r2, [r4, #16]
 800df4a:	3202      	adds	r2, #2
 800df4c:	f104 010c 	add.w	r1, r4, #12
 800df50:	0092      	lsls	r2, r2, #2
 800df52:	300c      	adds	r0, #12
 800df54:	f7fb fccc 	bl	80098f0 <memcpy>
 800df58:	4621      	mov	r1, r4
 800df5a:	ee18 0a10 	vmov	r0, s16
 800df5e:	f7fb fd20 	bl	80099a2 <_Bfree>
 800df62:	464c      	mov	r4, r9
 800df64:	6923      	ldr	r3, [r4, #16]
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df6c:	6122      	str	r2, [r4, #16]
 800df6e:	2201      	movs	r2, #1
 800df70:	615a      	str	r2, [r3, #20]
 800df72:	e7bb      	b.n	800deec <__gethex+0x3c8>
 800df74:	6922      	ldr	r2, [r4, #16]
 800df76:	455a      	cmp	r2, fp
 800df78:	dd0b      	ble.n	800df92 <__gethex+0x46e>
 800df7a:	2101      	movs	r1, #1
 800df7c:	4620      	mov	r0, r4
 800df7e:	f7ff fd69 	bl	800da54 <rshift>
 800df82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df86:	3501      	adds	r5, #1
 800df88:	42ab      	cmp	r3, r5
 800df8a:	f6ff aed0 	blt.w	800dd2e <__gethex+0x20a>
 800df8e:	2701      	movs	r7, #1
 800df90:	e7c0      	b.n	800df14 <__gethex+0x3f0>
 800df92:	f016 061f 	ands.w	r6, r6, #31
 800df96:	d0fa      	beq.n	800df8e <__gethex+0x46a>
 800df98:	4453      	add	r3, sl
 800df9a:	f1c6 0620 	rsb	r6, r6, #32
 800df9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfa2:	f7fb fd97 	bl	8009ad4 <__hi0bits>
 800dfa6:	42b0      	cmp	r0, r6
 800dfa8:	dbe7      	blt.n	800df7a <__gethex+0x456>
 800dfaa:	e7f0      	b.n	800df8e <__gethex+0x46a>
 800dfac:	0800f29e 	.word	0x0800f29e

0800dfb0 <L_shift>:
 800dfb0:	f1c2 0208 	rsb	r2, r2, #8
 800dfb4:	0092      	lsls	r2, r2, #2
 800dfb6:	b570      	push	{r4, r5, r6, lr}
 800dfb8:	f1c2 0620 	rsb	r6, r2, #32
 800dfbc:	6843      	ldr	r3, [r0, #4]
 800dfbe:	6804      	ldr	r4, [r0, #0]
 800dfc0:	fa03 f506 	lsl.w	r5, r3, r6
 800dfc4:	432c      	orrs	r4, r5
 800dfc6:	40d3      	lsrs	r3, r2
 800dfc8:	6004      	str	r4, [r0, #0]
 800dfca:	f840 3f04 	str.w	r3, [r0, #4]!
 800dfce:	4288      	cmp	r0, r1
 800dfd0:	d3f4      	bcc.n	800dfbc <L_shift+0xc>
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}

0800dfd4 <__match>:
 800dfd4:	b530      	push	{r4, r5, lr}
 800dfd6:	6803      	ldr	r3, [r0, #0]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfde:	b914      	cbnz	r4, 800dfe6 <__match+0x12>
 800dfe0:	6003      	str	r3, [r0, #0]
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	bd30      	pop	{r4, r5, pc}
 800dfe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dfee:	2d19      	cmp	r5, #25
 800dff0:	bf98      	it	ls
 800dff2:	3220      	addls	r2, #32
 800dff4:	42a2      	cmp	r2, r4
 800dff6:	d0f0      	beq.n	800dfda <__match+0x6>
 800dff8:	2000      	movs	r0, #0
 800dffa:	e7f3      	b.n	800dfe4 <__match+0x10>

0800dffc <__hexnan>:
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	680b      	ldr	r3, [r1, #0]
 800e002:	115e      	asrs	r6, r3, #5
 800e004:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e008:	f013 031f 	ands.w	r3, r3, #31
 800e00c:	b087      	sub	sp, #28
 800e00e:	bf18      	it	ne
 800e010:	3604      	addne	r6, #4
 800e012:	2500      	movs	r5, #0
 800e014:	1f37      	subs	r7, r6, #4
 800e016:	4690      	mov	r8, r2
 800e018:	6802      	ldr	r2, [r0, #0]
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	4682      	mov	sl, r0
 800e01e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e022:	46b9      	mov	r9, r7
 800e024:	463c      	mov	r4, r7
 800e026:	9502      	str	r5, [sp, #8]
 800e028:	46ab      	mov	fp, r5
 800e02a:	7851      	ldrb	r1, [r2, #1]
 800e02c:	1c53      	adds	r3, r2, #1
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	b341      	cbz	r1, 800e084 <__hexnan+0x88>
 800e032:	4608      	mov	r0, r1
 800e034:	9205      	str	r2, [sp, #20]
 800e036:	9104      	str	r1, [sp, #16]
 800e038:	f7ff fd5e 	bl	800daf8 <__hexdig_fun>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d14f      	bne.n	800e0e0 <__hexnan+0xe4>
 800e040:	9904      	ldr	r1, [sp, #16]
 800e042:	9a05      	ldr	r2, [sp, #20]
 800e044:	2920      	cmp	r1, #32
 800e046:	d818      	bhi.n	800e07a <__hexnan+0x7e>
 800e048:	9b02      	ldr	r3, [sp, #8]
 800e04a:	459b      	cmp	fp, r3
 800e04c:	dd13      	ble.n	800e076 <__hexnan+0x7a>
 800e04e:	454c      	cmp	r4, r9
 800e050:	d206      	bcs.n	800e060 <__hexnan+0x64>
 800e052:	2d07      	cmp	r5, #7
 800e054:	dc04      	bgt.n	800e060 <__hexnan+0x64>
 800e056:	462a      	mov	r2, r5
 800e058:	4649      	mov	r1, r9
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7ff ffa8 	bl	800dfb0 <L_shift>
 800e060:	4544      	cmp	r4, r8
 800e062:	d950      	bls.n	800e106 <__hexnan+0x10a>
 800e064:	2300      	movs	r3, #0
 800e066:	f1a4 0904 	sub.w	r9, r4, #4
 800e06a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e06e:	f8cd b008 	str.w	fp, [sp, #8]
 800e072:	464c      	mov	r4, r9
 800e074:	461d      	mov	r5, r3
 800e076:	9a03      	ldr	r2, [sp, #12]
 800e078:	e7d7      	b.n	800e02a <__hexnan+0x2e>
 800e07a:	2929      	cmp	r1, #41	; 0x29
 800e07c:	d156      	bne.n	800e12c <__hexnan+0x130>
 800e07e:	3202      	adds	r2, #2
 800e080:	f8ca 2000 	str.w	r2, [sl]
 800e084:	f1bb 0f00 	cmp.w	fp, #0
 800e088:	d050      	beq.n	800e12c <__hexnan+0x130>
 800e08a:	454c      	cmp	r4, r9
 800e08c:	d206      	bcs.n	800e09c <__hexnan+0xa0>
 800e08e:	2d07      	cmp	r5, #7
 800e090:	dc04      	bgt.n	800e09c <__hexnan+0xa0>
 800e092:	462a      	mov	r2, r5
 800e094:	4649      	mov	r1, r9
 800e096:	4620      	mov	r0, r4
 800e098:	f7ff ff8a 	bl	800dfb0 <L_shift>
 800e09c:	4544      	cmp	r4, r8
 800e09e:	d934      	bls.n	800e10a <__hexnan+0x10e>
 800e0a0:	f1a8 0204 	sub.w	r2, r8, #4
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0aa:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0ae:	429f      	cmp	r7, r3
 800e0b0:	d2f9      	bcs.n	800e0a6 <__hexnan+0xaa>
 800e0b2:	1b3b      	subs	r3, r7, r4
 800e0b4:	f023 0303 	bic.w	r3, r3, #3
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	3401      	adds	r4, #1
 800e0bc:	3e03      	subs	r6, #3
 800e0be:	42b4      	cmp	r4, r6
 800e0c0:	bf88      	it	hi
 800e0c2:	2304      	movhi	r3, #4
 800e0c4:	4443      	add	r3, r8
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f843 2b04 	str.w	r2, [r3], #4
 800e0cc:	429f      	cmp	r7, r3
 800e0ce:	d2fb      	bcs.n	800e0c8 <__hexnan+0xcc>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	b91b      	cbnz	r3, 800e0dc <__hexnan+0xe0>
 800e0d4:	4547      	cmp	r7, r8
 800e0d6:	d127      	bne.n	800e128 <__hexnan+0x12c>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	2005      	movs	r0, #5
 800e0de:	e026      	b.n	800e12e <__hexnan+0x132>
 800e0e0:	3501      	adds	r5, #1
 800e0e2:	2d08      	cmp	r5, #8
 800e0e4:	f10b 0b01 	add.w	fp, fp, #1
 800e0e8:	dd06      	ble.n	800e0f8 <__hexnan+0xfc>
 800e0ea:	4544      	cmp	r4, r8
 800e0ec:	d9c3      	bls.n	800e076 <__hexnan+0x7a>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0f4:	2501      	movs	r5, #1
 800e0f6:	3c04      	subs	r4, #4
 800e0f8:	6822      	ldr	r2, [r4, #0]
 800e0fa:	f000 000f 	and.w	r0, r0, #15
 800e0fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e102:	6022      	str	r2, [r4, #0]
 800e104:	e7b7      	b.n	800e076 <__hexnan+0x7a>
 800e106:	2508      	movs	r5, #8
 800e108:	e7b5      	b.n	800e076 <__hexnan+0x7a>
 800e10a:	9b01      	ldr	r3, [sp, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d0df      	beq.n	800e0d0 <__hexnan+0xd4>
 800e110:	f04f 32ff 	mov.w	r2, #4294967295
 800e114:	f1c3 0320 	rsb	r3, r3, #32
 800e118:	fa22 f303 	lsr.w	r3, r2, r3
 800e11c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e120:	401a      	ands	r2, r3
 800e122:	f846 2c04 	str.w	r2, [r6, #-4]
 800e126:	e7d3      	b.n	800e0d0 <__hexnan+0xd4>
 800e128:	3f04      	subs	r7, #4
 800e12a:	e7d1      	b.n	800e0d0 <__hexnan+0xd4>
 800e12c:	2004      	movs	r0, #4
 800e12e:	b007      	add	sp, #28
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e134 <_isatty_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4d06      	ldr	r5, [pc, #24]	; (800e150 <_isatty_r+0x1c>)
 800e138:	2300      	movs	r3, #0
 800e13a:	4604      	mov	r4, r0
 800e13c:	4608      	mov	r0, r1
 800e13e:	602b      	str	r3, [r5, #0]
 800e140:	f7f3 fbcc 	bl	80018dc <_isatty>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d102      	bne.n	800e14e <_isatty_r+0x1a>
 800e148:	682b      	ldr	r3, [r5, #0]
 800e14a:	b103      	cbz	r3, 800e14e <_isatty_r+0x1a>
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	20000af0 	.word	0x20000af0

0800e154 <_lseek_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4d07      	ldr	r5, [pc, #28]	; (800e174 <_lseek_r+0x20>)
 800e158:	4604      	mov	r4, r0
 800e15a:	4608      	mov	r0, r1
 800e15c:	4611      	mov	r1, r2
 800e15e:	2200      	movs	r2, #0
 800e160:	602a      	str	r2, [r5, #0]
 800e162:	461a      	mov	r2, r3
 800e164:	f7f3 fc13 	bl	800198e <_lseek>
 800e168:	1c43      	adds	r3, r0, #1
 800e16a:	d102      	bne.n	800e172 <_lseek_r+0x1e>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	b103      	cbz	r3, 800e172 <_lseek_r+0x1e>
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	bd38      	pop	{r3, r4, r5, pc}
 800e174:	20000af0 	.word	0x20000af0

0800e178 <_read_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d07      	ldr	r5, [pc, #28]	; (800e198 <_read_r+0x20>)
 800e17c:	4604      	mov	r4, r0
 800e17e:	4608      	mov	r0, r1
 800e180:	4611      	mov	r1, r2
 800e182:	2200      	movs	r2, #0
 800e184:	602a      	str	r2, [r5, #0]
 800e186:	461a      	mov	r2, r3
 800e188:	f7f3 fc12 	bl	80019b0 <_read>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	d102      	bne.n	800e196 <_read_r+0x1e>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	b103      	cbz	r3, 800e196 <_read_r+0x1e>
 800e194:	6023      	str	r3, [r4, #0]
 800e196:	bd38      	pop	{r3, r4, r5, pc}
 800e198:	20000af0 	.word	0x20000af0
 800e19c:	00000000 	.word	0x00000000

0800e1a0 <nan>:
 800e1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1a8 <nan+0x8>
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	00000000 	.word	0x00000000
 800e1ac:	7ff80000 	.word	0x7ff80000

0800e1b0 <strncmp>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	b17a      	cbz	r2, 800e1d4 <strncmp+0x24>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	3901      	subs	r1, #1
 800e1b8:	1884      	adds	r4, r0, r2
 800e1ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1c2:	4290      	cmp	r0, r2
 800e1c4:	d101      	bne.n	800e1ca <strncmp+0x1a>
 800e1c6:	42a3      	cmp	r3, r4
 800e1c8:	d101      	bne.n	800e1ce <strncmp+0x1e>
 800e1ca:	1a80      	subs	r0, r0, r2
 800e1cc:	bd10      	pop	{r4, pc}
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d1f3      	bne.n	800e1ba <strncmp+0xa>
 800e1d2:	e7fa      	b.n	800e1ca <strncmp+0x1a>
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	e7f9      	b.n	800e1cc <strncmp+0x1c>

0800e1d8 <__ssprint_r>:
 800e1d8:	6893      	ldr	r3, [r2, #8]
 800e1da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1de:	4680      	mov	r8, r0
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	4617      	mov	r7, r2
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d061      	beq.n	800e2ac <__ssprint_r+0xd4>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f8d2 a000 	ldr.w	sl, [r2]
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	469b      	mov	fp, r3
 800e1f2:	f1bb 0f00 	cmp.w	fp, #0
 800e1f6:	d02b      	beq.n	800e250 <__ssprint_r+0x78>
 800e1f8:	68a6      	ldr	r6, [r4, #8]
 800e1fa:	455e      	cmp	r6, fp
 800e1fc:	d844      	bhi.n	800e288 <__ssprint_r+0xb0>
 800e1fe:	89a2      	ldrh	r2, [r4, #12]
 800e200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e204:	d03e      	beq.n	800e284 <__ssprint_r+0xac>
 800e206:	6820      	ldr	r0, [r4, #0]
 800e208:	6921      	ldr	r1, [r4, #16]
 800e20a:	6965      	ldr	r5, [r4, #20]
 800e20c:	eba0 0901 	sub.w	r9, r0, r1
 800e210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e218:	f109 0001 	add.w	r0, r9, #1
 800e21c:	106d      	asrs	r5, r5, #1
 800e21e:	4458      	add	r0, fp
 800e220:	4285      	cmp	r5, r0
 800e222:	bf38      	it	cc
 800e224:	4605      	movcc	r5, r0
 800e226:	0553      	lsls	r3, r2, #21
 800e228:	d545      	bpl.n	800e2b6 <__ssprint_r+0xde>
 800e22a:	4629      	mov	r1, r5
 800e22c:	4640      	mov	r0, r8
 800e22e:	f7fb f8f7 	bl	8009420 <_malloc_r>
 800e232:	4606      	mov	r6, r0
 800e234:	b9a0      	cbnz	r0, 800e260 <__ssprint_r+0x88>
 800e236:	230c      	movs	r3, #12
 800e238:	f8c8 3000 	str.w	r3, [r8]
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e242:	81a3      	strh	r3, [r4, #12]
 800e244:	2300      	movs	r3, #0
 800e246:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800e24a:	f04f 30ff 	mov.w	r0, #4294967295
 800e24e:	e02f      	b.n	800e2b0 <__ssprint_r+0xd8>
 800e250:	f8da 3000 	ldr.w	r3, [sl]
 800e254:	f8da b004 	ldr.w	fp, [sl, #4]
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	f10a 0a08 	add.w	sl, sl, #8
 800e25e:	e7c8      	b.n	800e1f2 <__ssprint_r+0x1a>
 800e260:	464a      	mov	r2, r9
 800e262:	6921      	ldr	r1, [r4, #16]
 800e264:	f7fb fb44 	bl	80098f0 <memcpy>
 800e268:	89a2      	ldrh	r2, [r4, #12]
 800e26a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e26e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e272:	81a2      	strh	r2, [r4, #12]
 800e274:	6126      	str	r6, [r4, #16]
 800e276:	6165      	str	r5, [r4, #20]
 800e278:	444e      	add	r6, r9
 800e27a:	eba5 0509 	sub.w	r5, r5, r9
 800e27e:	6026      	str	r6, [r4, #0]
 800e280:	60a5      	str	r5, [r4, #8]
 800e282:	465e      	mov	r6, fp
 800e284:	455e      	cmp	r6, fp
 800e286:	d900      	bls.n	800e28a <__ssprint_r+0xb2>
 800e288:	465e      	mov	r6, fp
 800e28a:	4632      	mov	r2, r6
 800e28c:	9901      	ldr	r1, [sp, #4]
 800e28e:	6820      	ldr	r0, [r4, #0]
 800e290:	f7fb fb3c 	bl	800990c <memmove>
 800e294:	68a2      	ldr	r2, [r4, #8]
 800e296:	1b92      	subs	r2, r2, r6
 800e298:	60a2      	str	r2, [r4, #8]
 800e29a:	6822      	ldr	r2, [r4, #0]
 800e29c:	4432      	add	r2, r6
 800e29e:	6022      	str	r2, [r4, #0]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	eba2 030b 	sub.w	r3, r2, fp
 800e2a6:	60bb      	str	r3, [r7, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1d1      	bne.n	800e250 <__ssprint_r+0x78>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	b003      	add	sp, #12
 800e2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	f7fb ffc5 	bl	800a248 <_realloc_r>
 800e2be:	4606      	mov	r6, r0
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d1d7      	bne.n	800e274 <__ssprint_r+0x9c>
 800e2c4:	6921      	ldr	r1, [r4, #16]
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	f7fa fdcc 	bl	8008e64 <_free_r>
 800e2cc:	e7b3      	b.n	800e236 <__ssprint_r+0x5e>

0800e2ce <__swbuf_r>:
 800e2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d0:	460e      	mov	r6, r1
 800e2d2:	4614      	mov	r4, r2
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	b118      	cbz	r0, 800e2e0 <__swbuf_r+0x12>
 800e2d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e2da:	b90b      	cbnz	r3, 800e2e0 <__swbuf_r+0x12>
 800e2dc:	f7fa fcca 	bl	8008c74 <__sinit>
 800e2e0:	69a3      	ldr	r3, [r4, #24]
 800e2e2:	60a3      	str	r3, [r4, #8]
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	0719      	lsls	r1, r3, #28
 800e2e8:	d529      	bpl.n	800e33e <__swbuf_r+0x70>
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	b33b      	cbz	r3, 800e33e <__swbuf_r+0x70>
 800e2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f2:	b2f6      	uxtb	r6, r6
 800e2f4:	049a      	lsls	r2, r3, #18
 800e2f6:	4637      	mov	r7, r6
 800e2f8:	d52a      	bpl.n	800e350 <__swbuf_r+0x82>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	6920      	ldr	r0, [r4, #16]
 800e2fe:	1a18      	subs	r0, r3, r0
 800e300:	6963      	ldr	r3, [r4, #20]
 800e302:	4283      	cmp	r3, r0
 800e304:	dc04      	bgt.n	800e310 <__swbuf_r+0x42>
 800e306:	4621      	mov	r1, r4
 800e308:	4628      	mov	r0, r5
 800e30a:	f7fa fc35 	bl	8008b78 <_fflush_r>
 800e30e:	b9e0      	cbnz	r0, 800e34a <__swbuf_r+0x7c>
 800e310:	68a3      	ldr	r3, [r4, #8]
 800e312:	3b01      	subs	r3, #1
 800e314:	60a3      	str	r3, [r4, #8]
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	1c5a      	adds	r2, r3, #1
 800e31a:	6022      	str	r2, [r4, #0]
 800e31c:	701e      	strb	r6, [r3, #0]
 800e31e:	6962      	ldr	r2, [r4, #20]
 800e320:	1c43      	adds	r3, r0, #1
 800e322:	429a      	cmp	r2, r3
 800e324:	d004      	beq.n	800e330 <__swbuf_r+0x62>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	07db      	lsls	r3, r3, #31
 800e32a:	d506      	bpl.n	800e33a <__swbuf_r+0x6c>
 800e32c:	2e0a      	cmp	r6, #10
 800e32e:	d104      	bne.n	800e33a <__swbuf_r+0x6c>
 800e330:	4621      	mov	r1, r4
 800e332:	4628      	mov	r0, r5
 800e334:	f7fa fc20 	bl	8008b78 <_fflush_r>
 800e338:	b938      	cbnz	r0, 800e34a <__swbuf_r+0x7c>
 800e33a:	4638      	mov	r0, r7
 800e33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e33e:	4621      	mov	r1, r4
 800e340:	4628      	mov	r0, r5
 800e342:	f7f9 fd3f 	bl	8007dc4 <__swsetup_r>
 800e346:	2800      	cmp	r0, #0
 800e348:	d0d1      	beq.n	800e2ee <__swbuf_r+0x20>
 800e34a:	f04f 37ff 	mov.w	r7, #4294967295
 800e34e:	e7f4      	b.n	800e33a <__swbuf_r+0x6c>
 800e350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e354:	81a3      	strh	r3, [r4, #12]
 800e356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e35c:	6663      	str	r3, [r4, #100]	; 0x64
 800e35e:	e7cc      	b.n	800e2fa <__swbuf_r+0x2c>

0800e360 <_wcrtomb_r>:
 800e360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e362:	4c09      	ldr	r4, [pc, #36]	; (800e388 <_wcrtomb_r+0x28>)
 800e364:	b085      	sub	sp, #20
 800e366:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800e36a:	4605      	mov	r5, r0
 800e36c:	461e      	mov	r6, r3
 800e36e:	b909      	cbnz	r1, 800e374 <_wcrtomb_r+0x14>
 800e370:	460a      	mov	r2, r1
 800e372:	a901      	add	r1, sp, #4
 800e374:	47b8      	blx	r7
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	bf01      	itttt	eq
 800e37a:	2300      	moveq	r3, #0
 800e37c:	6033      	streq	r3, [r6, #0]
 800e37e:	238a      	moveq	r3, #138	; 0x8a
 800e380:	602b      	streq	r3, [r5, #0]
 800e382:	b005      	add	sp, #20
 800e384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e386:	bf00      	nop
 800e388:	2000043c 	.word	0x2000043c

0800e38c <abort>:
 800e38c:	b508      	push	{r3, lr}
 800e38e:	2006      	movs	r0, #6
 800e390:	f000 f82c 	bl	800e3ec <raise>
 800e394:	2001      	movs	r0, #1
 800e396:	f000 fb4f 	bl	800ea38 <_exit>

0800e39a <_raise_r>:
 800e39a:	291f      	cmp	r1, #31
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	4604      	mov	r4, r0
 800e3a0:	460d      	mov	r5, r1
 800e3a2:	d904      	bls.n	800e3ae <_raise_r+0x14>
 800e3a4:	2316      	movs	r3, #22
 800e3a6:	6003      	str	r3, [r0, #0]
 800e3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800e3b2:	b112      	cbz	r2, 800e3ba <_raise_r+0x20>
 800e3b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3b8:	b94b      	cbnz	r3, 800e3ce <_raise_r+0x34>
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 f830 	bl	800e420 <_getpid_r>
 800e3c0:	462a      	mov	r2, r5
 800e3c2:	4601      	mov	r1, r0
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3ca:	f000 b817 	b.w	800e3fc <_kill_r>
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d00a      	beq.n	800e3e8 <_raise_r+0x4e>
 800e3d2:	1c59      	adds	r1, r3, #1
 800e3d4:	d103      	bne.n	800e3de <_raise_r+0x44>
 800e3d6:	2316      	movs	r3, #22
 800e3d8:	6003      	str	r3, [r0, #0]
 800e3da:	2001      	movs	r0, #1
 800e3dc:	e7e6      	b.n	800e3ac <_raise_r+0x12>
 800e3de:	2400      	movs	r4, #0
 800e3e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	4798      	blx	r3
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	e7df      	b.n	800e3ac <_raise_r+0x12>

0800e3ec <raise>:
 800e3ec:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <raise+0xc>)
 800e3ee:	4601      	mov	r1, r0
 800e3f0:	6818      	ldr	r0, [r3, #0]
 800e3f2:	f7ff bfd2 	b.w	800e39a <_raise_r>
 800e3f6:	bf00      	nop
 800e3f8:	2000000c 	.word	0x2000000c

0800e3fc <_kill_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4d07      	ldr	r5, [pc, #28]	; (800e41c <_kill_r+0x20>)
 800e400:	2300      	movs	r3, #0
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	4611      	mov	r1, r2
 800e408:	602b      	str	r3, [r5, #0]
 800e40a:	f000 fb0d 	bl	800ea28 <_kill>
 800e40e:	1c43      	adds	r3, r0, #1
 800e410:	d102      	bne.n	800e418 <_kill_r+0x1c>
 800e412:	682b      	ldr	r3, [r5, #0]
 800e414:	b103      	cbz	r3, 800e418 <_kill_r+0x1c>
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	bd38      	pop	{r3, r4, r5, pc}
 800e41a:	bf00      	nop
 800e41c:	20000af0 	.word	0x20000af0

0800e420 <_getpid_r>:
 800e420:	f000 bafa 	b.w	800ea18 <_getpid>

0800e424 <checkint>:
 800e424:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e428:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800e42c:	429a      	cmp	r2, r3
 800e42e:	b570      	push	{r4, r5, r6, lr}
 800e430:	dd2a      	ble.n	800e488 <checkint+0x64>
 800e432:	f240 4333 	movw	r3, #1075	; 0x433
 800e436:	429a      	cmp	r2, r3
 800e438:	dc24      	bgt.n	800e484 <checkint+0x60>
 800e43a:	1a9b      	subs	r3, r3, r2
 800e43c:	f1a3 0620 	sub.w	r6, r3, #32
 800e440:	f04f 32ff 	mov.w	r2, #4294967295
 800e444:	fa02 f403 	lsl.w	r4, r2, r3
 800e448:	fa02 f606 	lsl.w	r6, r2, r6
 800e44c:	f1c3 0520 	rsb	r5, r3, #32
 800e450:	fa22 f505 	lsr.w	r5, r2, r5
 800e454:	4334      	orrs	r4, r6
 800e456:	432c      	orrs	r4, r5
 800e458:	409a      	lsls	r2, r3
 800e45a:	ea20 0202 	bic.w	r2, r0, r2
 800e45e:	ea21 0404 	bic.w	r4, r1, r4
 800e462:	4322      	orrs	r2, r4
 800e464:	f1a3 0420 	sub.w	r4, r3, #32
 800e468:	f1c3 0220 	rsb	r2, r3, #32
 800e46c:	d10c      	bne.n	800e488 <checkint+0x64>
 800e46e:	40d8      	lsrs	r0, r3
 800e470:	fa01 f302 	lsl.w	r3, r1, r2
 800e474:	4318      	orrs	r0, r3
 800e476:	40e1      	lsrs	r1, r4
 800e478:	4308      	orrs	r0, r1
 800e47a:	f000 0001 	and.w	r0, r0, #1
 800e47e:	f1d0 0002 	rsbs	r0, r0, #2
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	2002      	movs	r0, #2
 800e486:	e7fc      	b.n	800e482 <checkint+0x5e>
 800e488:	2000      	movs	r0, #0
 800e48a:	e7fa      	b.n	800e482 <checkint+0x5e>
 800e48c:	0000      	movs	r0, r0
	...

0800e490 <pow>:
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e494:	ee10 4a90 	vmov	r4, s1
 800e498:	ed2d 8b0a 	vpush	{d8-d12}
 800e49c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800e4a0:	ee11 7a90 	vmov	r7, s3
 800e4a4:	f10a 32ff 	add.w	r2, sl, #4294967295
 800e4a8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	ee10 6a10 	vmov	r6, s0
 800e4b2:	ee11 0a10 	vmov	r0, s2
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	46d4      	mov	ip, sl
 800e4ba:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800e4be:	d806      	bhi.n	800e4ce <pow+0x3e>
 800e4c0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800e4c4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800e4c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e4ca:	f240 8156 	bls.w	800e77a <pow+0x2ea>
 800e4ce:	1802      	adds	r2, r0, r0
 800e4d0:	eb47 0107 	adc.w	r1, r7, r7
 800e4d4:	f06f 0e01 	mvn.w	lr, #1
 800e4d8:	f112 39ff 	adds.w	r9, r2, #4294967295
 800e4dc:	f141 38ff 	adc.w	r8, r1, #4294967295
 800e4e0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800e4e4:	45ce      	cmp	lr, r9
 800e4e6:	eb73 0808 	sbcs.w	r8, r3, r8
 800e4ea:	d23f      	bcs.n	800e56c <pow+0xdc>
 800e4ec:	ea52 0301 	orrs.w	r3, r2, r1
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	d10c      	bne.n	800e510 <pow+0x80>
 800e4f6:	19b6      	adds	r6, r6, r6
 800e4f8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800e4fc:	4164      	adcs	r4, r4
 800e4fe:	42b3      	cmp	r3, r6
 800e500:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e504:	41a3      	sbcs	r3, r4
 800e506:	f0c0 808c 	bcc.w	800e622 <pow+0x192>
 800e50a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e50e:	e028      	b.n	800e562 <pow+0xd2>
 800e510:	4da3      	ldr	r5, [pc, #652]	; (800e7a0 <pow+0x310>)
 800e512:	42ac      	cmp	r4, r5
 800e514:	bf08      	it	eq
 800e516:	429e      	cmpeq	r6, r3
 800e518:	d107      	bne.n	800e52a <pow+0x9a>
 800e51a:	1800      	adds	r0, r0, r0
 800e51c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800e520:	417f      	adcs	r7, r7
 800e522:	4283      	cmp	r3, r0
 800e524:	4b9f      	ldr	r3, [pc, #636]	; (800e7a4 <pow+0x314>)
 800e526:	41bb      	sbcs	r3, r7
 800e528:	e7ed      	b.n	800e506 <pow+0x76>
 800e52a:	19b6      	adds	r6, r6, r6
 800e52c:	489e      	ldr	r0, [pc, #632]	; (800e7a8 <pow+0x318>)
 800e52e:	4164      	adcs	r4, r4
 800e530:	42b3      	cmp	r3, r6
 800e532:	eb70 0504 	sbcs.w	r5, r0, r4
 800e536:	d374      	bcc.n	800e622 <pow+0x192>
 800e538:	4281      	cmp	r1, r0
 800e53a:	bf08      	it	eq
 800e53c:	429a      	cmpeq	r2, r3
 800e53e:	d170      	bne.n	800e622 <pow+0x192>
 800e540:	4a9a      	ldr	r2, [pc, #616]	; (800e7ac <pow+0x31c>)
 800e542:	4294      	cmp	r4, r2
 800e544:	bf08      	it	eq
 800e546:	429e      	cmpeq	r6, r3
 800e548:	d0df      	beq.n	800e50a <pow+0x7a>
 800e54a:	4294      	cmp	r4, r2
 800e54c:	ea6f 0707 	mvn.w	r7, r7
 800e550:	bf34      	ite	cc
 800e552:	2400      	movcc	r4, #0
 800e554:	2401      	movcs	r4, #1
 800e556:	0fff      	lsrs	r7, r7, #31
 800e558:	42bc      	cmp	r4, r7
 800e55a:	f040 81d9 	bne.w	800e910 <pow+0x480>
 800e55e:	ee21 0b01 	vmul.f64	d0, d1, d1
 800e562:	b006      	add	sp, #24
 800e564:	ecbd 8b0a 	vpop	{d8-d12}
 800e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56c:	eb16 0806 	adds.w	r8, r6, r6
 800e570:	eb44 0904 	adc.w	r9, r4, r4
 800e574:	f118 31ff 	adds.w	r1, r8, #4294967295
 800e578:	f169 0200 	sbc.w	r2, r9, #0
 800e57c:	458e      	cmp	lr, r1
 800e57e:	4193      	sbcs	r3, r2
 800e580:	d223      	bcs.n	800e5ca <pow+0x13a>
 800e582:	ee20 0b00 	vmul.f64	d0, d0, d0
 800e586:	2c00      	cmp	r4, #0
 800e588:	da12      	bge.n	800e5b0 <pow+0x120>
 800e58a:	4639      	mov	r1, r7
 800e58c:	f7ff ff4a 	bl	800e424 <checkint>
 800e590:	2801      	cmp	r0, #1
 800e592:	d10d      	bne.n	800e5b0 <pow+0x120>
 800e594:	eeb1 0b40 	vneg.f64	d0, d0
 800e598:	ea58 0309 	orrs.w	r3, r8, r9
 800e59c:	d10a      	bne.n	800e5b4 <pow+0x124>
 800e59e:	2f00      	cmp	r7, #0
 800e5a0:	dadf      	bge.n	800e562 <pow+0xd2>
 800e5a2:	b006      	add	sp, #24
 800e5a4:	ecbd 8b0a 	vpop	{d8-d12}
 800e5a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ac:	f000 b9f0 	b.w	800e990 <__math_divzero>
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	e7f1      	b.n	800e598 <pow+0x108>
 800e5b4:	2f00      	cmp	r7, #0
 800e5b6:	dad4      	bge.n	800e562 <pow+0xd2>
 800e5b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e5bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e5c0:	ed8d 7b00 	vstr	d7, [sp]
 800e5c4:	ed9d 0b00 	vldr	d0, [sp]
 800e5c8:	e7cb      	b.n	800e562 <pow+0xd2>
 800e5ca:	2c00      	cmp	r4, #0
 800e5cc:	da2c      	bge.n	800e628 <pow+0x198>
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	f7ff ff28 	bl	800e424 <checkint>
 800e5d4:	b930      	cbnz	r0, 800e5e4 <pow+0x154>
 800e5d6:	b006      	add	sp, #24
 800e5d8:	ecbd 8b0a 	vpop	{d8-d12}
 800e5dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e0:	f000 b9ee 	b.w	800e9c0 <__math_invalid>
 800e5e4:	2801      	cmp	r0, #1
 800e5e6:	bf14      	ite	ne
 800e5e8:	2000      	movne	r0, #0
 800e5ea:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e5ee:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e5f2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800e5f6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800e5fa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800e5fe:	2b7f      	cmp	r3, #127	; 0x7f
 800e600:	d92d      	bls.n	800e65e <pow+0x1ce>
 800e602:	4b67      	ldr	r3, [pc, #412]	; (800e7a0 <pow+0x310>)
 800e604:	2000      	movs	r0, #0
 800e606:	429c      	cmp	r4, r3
 800e608:	bf08      	it	eq
 800e60a:	4286      	cmpeq	r6, r0
 800e60c:	f43f af7d 	beq.w	800e50a <pow+0x7a>
 800e610:	f240 31bd 	movw	r1, #957	; 0x3bd
 800e614:	428a      	cmp	r2, r1
 800e616:	d80c      	bhi.n	800e632 <pow+0x1a2>
 800e618:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e61c:	42b0      	cmp	r0, r6
 800e61e:	41a3      	sbcs	r3, r4
 800e620:	d204      	bcs.n	800e62c <pow+0x19c>
 800e622:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e626:	e79c      	b.n	800e562 <pow+0xd2>
 800e628:	2000      	movs	r0, #0
 800e62a:	e7e4      	b.n	800e5f6 <pow+0x166>
 800e62c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e630:	e797      	b.n	800e562 <pow+0xd2>
 800e632:	2e01      	cmp	r6, #1
 800e634:	eb74 0303 	sbcs.w	r3, r4, r3
 800e638:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e63c:	bf34      	ite	cc
 800e63e:	2301      	movcc	r3, #1
 800e640:	2300      	movcs	r3, #0
 800e642:	4295      	cmp	r5, r2
 800e644:	bf8c      	ite	hi
 800e646:	2500      	movhi	r5, #0
 800e648:	2501      	movls	r5, #1
 800e64a:	42ab      	cmp	r3, r5
 800e64c:	f000 809d 	beq.w	800e78a <pow+0x2fa>
 800e650:	b006      	add	sp, #24
 800e652:	ecbd 8b0a 	vpop	{d8-d12}
 800e656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65a:	f000 b991 	b.w	800e980 <__math_oflow>
 800e65e:	f1bc 0f00 	cmp.w	ip, #0
 800e662:	d10b      	bne.n	800e67c <pow+0x1ec>
 800e664:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e798 <pow+0x308>
 800e668:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e66c:	ec53 2b17 	vmov	r2, r3, d7
 800e670:	ee17 6a10 	vmov	r6, s14
 800e674:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e678:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800e67c:	4b4c      	ldr	r3, [pc, #304]	; (800e7b0 <pow+0x320>)
 800e67e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e682:	4423      	add	r3, r4
 800e684:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e688:	1519      	asrs	r1, r3, #20
 800e68a:	0d1b      	lsrs	r3, r3, #20
 800e68c:	051b      	lsls	r3, r3, #20
 800e68e:	eba4 0903 	sub.w	r9, r4, r3
 800e692:	4b48      	ldr	r3, [pc, #288]	; (800e7b4 <pow+0x324>)
 800e694:	ee04 1a10 	vmov	s8, r1
 800e698:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800e69c:	f1b6 0800 	subs.w	r8, r6, #0
 800e6a0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800e6a4:	ec49 8b15 	vmov	d5, r8, r9
 800e6a8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800e6ac:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e6b0:	ed93 7b00 	vldr	d7, [r3]
 800e6b4:	ed93 5b02 	vldr	d5, [r3, #8]
 800e6b8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800e6bc:	eea4 2b07 	vfma.f64	d2, d4, d7
 800e6c0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800e6c4:	ee36 ab02 	vadd.f64	d10, d6, d2
 800e6c8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800e6cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e6d0:	ed93 5b04 	vldr	d5, [r3, #16]
 800e6d4:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e6d8:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e6dc:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e6e0:	ed93 4b08 	vldr	d4, [r3, #32]
 800e6e4:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e6e8:	eeb0 9b40 	vmov.f64	d9, d0
 800e6ec:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800e6f0:	ed93 5b06 	vldr	d5, [r3, #24]
 800e6f4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800e6f8:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e6fc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e700:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e704:	ee3a ab48 	vsub.f64	d10, d10, d8
 800e708:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800e70c:	ee37 9b09 	vadd.f64	d9, d7, d9
 800e710:	ee3a ab00 	vadd.f64	d10, d10, d0
 800e714:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e718:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e71c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800e720:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e724:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e728:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e72c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e730:	eeab ab05 	vfma.f64	d10, d11, d5
 800e734:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800e738:	ee21 7b06 	vmul.f64	d7, d1, d6
 800e73c:	ee17 3a90 	vmov	r3, s15
 800e740:	eeb0 5b47 	vmov.f64	d5, d7
 800e744:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e748:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800e74c:	18b2      	adds	r2, r6, r2
 800e74e:	2a3e      	cmp	r2, #62	; 0x3e
 800e750:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800e754:	ee38 8b46 	vsub.f64	d8, d8, d6
 800e758:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800e75c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800e760:	d92b      	bls.n	800e7ba <pow+0x32a>
 800e762:	2a00      	cmp	r2, #0
 800e764:	da0b      	bge.n	800e77e <pow+0x2ee>
 800e766:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e76a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e76e:	2800      	cmp	r0, #0
 800e770:	f43f aef7 	beq.w	800e562 <pow+0xd2>
 800e774:	eeb1 0b40 	vneg.f64	d0, d0
 800e778:	e6f3      	b.n	800e562 <pow+0xd2>
 800e77a:	2000      	movs	r0, #0
 800e77c:	e77e      	b.n	800e67c <pow+0x1ec>
 800e77e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800e782:	d919      	bls.n	800e7b8 <pow+0x328>
 800e784:	2b00      	cmp	r3, #0
 800e786:	f6bf af63 	bge.w	800e650 <pow+0x1c0>
 800e78a:	b006      	add	sp, #24
 800e78c:	ecbd 8b0a 	vpop	{d8-d12}
 800e790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	f000 b8ec 	b.w	800e970 <__math_uflow>
 800e798:	00000000 	.word	0x00000000
 800e79c:	43300000 	.word	0x43300000
 800e7a0:	3ff00000 	.word	0x3ff00000
 800e7a4:	fff00000 	.word	0xfff00000
 800e7a8:	ffe00000 	.word	0xffe00000
 800e7ac:	7fe00000 	.word	0x7fe00000
 800e7b0:	c0196aab 	.word	0xc0196aab
 800e7b4:	0800f5b0 	.word	0x0800f5b0
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	495d      	ldr	r1, [pc, #372]	; (800e930 <pow+0x4a0>)
 800e7bc:	ed91 4b02 	vldr	d4, [r1, #8]
 800e7c0:	ed91 3b00 	vldr	d3, [r1]
 800e7c4:	eeb0 6b44 	vmov.f64	d6, d4
 800e7c8:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e7cc:	ee16 5a10 	vmov	r5, s12
 800e7d0:	ee36 6b44 	vsub.f64	d6, d6, d4
 800e7d4:	ed91 4b04 	vldr	d4, [r1, #16]
 800e7d8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800e7dc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e7e0:	eeb0 0b47 	vmov.f64	d0, d7
 800e7e4:	ed91 7b06 	vldr	d7, [r1, #24]
 800e7e8:	18dc      	adds	r4, r3, r3
 800e7ea:	f104 030f 	add.w	r3, r4, #15
 800e7ee:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e7f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e7f6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800e7fa:	ee35 0b00 	vadd.f64	d0, d5, d0
 800e7fe:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e802:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800e806:	ed91 5b08 	vldr	d5, [r1, #32]
 800e80a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e80e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e812:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e816:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800e81a:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e81e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e822:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800e826:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e82a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e82e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e832:	1940      	adds	r0, r0, r5
 800e834:	2700      	movs	r7, #0
 800e836:	eb17 020c 	adds.w	r2, r7, ip
 800e83a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e83e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e842:	2e00      	cmp	r6, #0
 800e844:	d15f      	bne.n	800e906 <pow+0x476>
 800e846:	42bd      	cmp	r5, r7
 800e848:	db13      	blt.n	800e872 <pow+0x3e2>
 800e84a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800e84e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800e852:	4610      	mov	r0, r2
 800e854:	ec41 0b10 	vmov	d0, r0, r1
 800e858:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e85c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e918 <pow+0x488>
 800e860:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e864:	b006      	add	sp, #24
 800e866:	ecbd 8b0a 	vpop	{d8-d12}
 800e86a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e86e:	f000 b8bf 	b.w	800e9f0 <__math_check_oflow>
 800e872:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e876:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e87a:	4610      	mov	r0, r2
 800e87c:	ec41 0b15 	vmov	d5, r0, r1
 800e880:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e884:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e888:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e88c:	eeb0 3bc7 	vabs.f64	d3, d7
 800e890:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e898:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e920 <pow+0x490>
 800e89c:	d52a      	bpl.n	800e8f4 <pow+0x464>
 800e89e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e8a2:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e8ae:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e8b2:	bf48      	it	mi
 800e8b4:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e8b8:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e8bc:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e8c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e8c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e8c8:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e8cc:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e8d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d8:	d104      	bne.n	800e8e4 <pow+0x454>
 800e8da:	4632      	mov	r2, r6
 800e8dc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e8e0:	ec43 2b17 	vmov	d7, r2, r3
 800e8e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e8e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e8ec:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e8f0:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e8f4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e8f8:	b006      	add	sp, #24
 800e8fa:	ecbd 8b0a 	vpop	{d8-d12}
 800e8fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e902:	f000 b86c 	b.w	800e9de <__math_check_uflow>
 800e906:	ec43 2b10 	vmov	d0, r2, r3
 800e90a:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e90e:	e628      	b.n	800e562 <pow+0xd2>
 800e910:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e928 <pow+0x498>
 800e914:	e625      	b.n	800e562 <pow+0xd2>
 800e916:	bf00      	nop
 800e918:	00000000 	.word	0x00000000
 800e91c:	7f000000 	.word	0x7f000000
 800e920:	00000000 	.word	0x00000000
 800e924:	00100000 	.word	0x00100000
	...
 800e930:	080105f8 	.word	0x080105f8

0800e934 <with_errno>:
 800e934:	b513      	push	{r0, r1, r4, lr}
 800e936:	4604      	mov	r4, r0
 800e938:	ed8d 0b00 	vstr	d0, [sp]
 800e93c:	f7f6 fbd4 	bl	80050e8 <__errno>
 800e940:	ed9d 0b00 	vldr	d0, [sp]
 800e944:	6004      	str	r4, [r0, #0]
 800e946:	b002      	add	sp, #8
 800e948:	bd10      	pop	{r4, pc}

0800e94a <xflow>:
 800e94a:	b082      	sub	sp, #8
 800e94c:	b158      	cbz	r0, 800e966 <xflow+0x1c>
 800e94e:	eeb1 7b40 	vneg.f64	d7, d0
 800e952:	ed8d 7b00 	vstr	d7, [sp]
 800e956:	ed9d 7b00 	vldr	d7, [sp]
 800e95a:	2022      	movs	r0, #34	; 0x22
 800e95c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e960:	b002      	add	sp, #8
 800e962:	f7ff bfe7 	b.w	800e934 <with_errno>
 800e966:	eeb0 7b40 	vmov.f64	d7, d0
 800e96a:	e7f2      	b.n	800e952 <xflow+0x8>
 800e96c:	0000      	movs	r0, r0
	...

0800e970 <__math_uflow>:
 800e970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e978 <__math_uflow+0x8>
 800e974:	f7ff bfe9 	b.w	800e94a <xflow>
 800e978:	00000000 	.word	0x00000000
 800e97c:	10000000 	.word	0x10000000

0800e980 <__math_oflow>:
 800e980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e988 <__math_oflow+0x8>
 800e984:	f7ff bfe1 	b.w	800e94a <xflow>
 800e988:	00000000 	.word	0x00000000
 800e98c:	70000000 	.word	0x70000000

0800e990 <__math_divzero>:
 800e990:	b082      	sub	sp, #8
 800e992:	2800      	cmp	r0, #0
 800e994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e998:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e99c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e9a0:	ed8d 7b00 	vstr	d7, [sp]
 800e9a4:	ed9d 0b00 	vldr	d0, [sp]
 800e9a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e9b8 <__math_divzero+0x28>
 800e9ac:	2022      	movs	r0, #34	; 0x22
 800e9ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e9b2:	b002      	add	sp, #8
 800e9b4:	f7ff bfbe 	b.w	800e934 <with_errno>
	...

0800e9c0 <__math_invalid>:
 800e9c0:	eeb0 7b40 	vmov.f64	d7, d0
 800e9c4:	eeb4 7b47 	vcmp.f64	d7, d7
 800e9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e9d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e9d4:	d602      	bvs.n	800e9dc <__math_invalid+0x1c>
 800e9d6:	2021      	movs	r0, #33	; 0x21
 800e9d8:	f7ff bfac 	b.w	800e934 <with_errno>
 800e9dc:	4770      	bx	lr

0800e9de <__math_check_uflow>:
 800e9de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e6:	d102      	bne.n	800e9ee <__math_check_uflow+0x10>
 800e9e8:	2022      	movs	r0, #34	; 0x22
 800e9ea:	f7ff bfa3 	b.w	800e934 <with_errno>
 800e9ee:	4770      	bx	lr

0800e9f0 <__math_check_oflow>:
 800e9f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ea10 <__math_check_oflow+0x20>
 800e9f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e9f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea00:	dd02      	ble.n	800ea08 <__math_check_oflow+0x18>
 800ea02:	2022      	movs	r0, #34	; 0x22
 800ea04:	f7ff bf96 	b.w	800e934 <with_errno>
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	f3af 8000 	nop.w
 800ea10:	ffffffff 	.word	0xffffffff
 800ea14:	7fefffff 	.word	0x7fefffff

0800ea18 <_getpid>:
 800ea18:	4b02      	ldr	r3, [pc, #8]	; (800ea24 <_getpid+0xc>)
 800ea1a:	2258      	movs	r2, #88	; 0x58
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea22:	4770      	bx	lr
 800ea24:	20000af0 	.word	0x20000af0

0800ea28 <_kill>:
 800ea28:	4b02      	ldr	r3, [pc, #8]	; (800ea34 <_kill+0xc>)
 800ea2a:	2258      	movs	r2, #88	; 0x58
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea32:	4770      	bx	lr
 800ea34:	20000af0 	.word	0x20000af0

0800ea38 <_exit>:
 800ea38:	e7fe      	b.n	800ea38 <_exit>
	...

0800ea3c <_init>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	bf00      	nop
 800ea40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea42:	bc08      	pop	{r3}
 800ea44:	469e      	mov	lr, r3
 800ea46:	4770      	bx	lr

0800ea48 <_fini>:
 800ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4a:	bf00      	nop
 800ea4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4e:	bc08      	pop	{r3}
 800ea50:	469e      	mov	lr, r3
 800ea52:	4770      	bx	lr
