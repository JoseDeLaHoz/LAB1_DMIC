
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054cc  080054cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08005544  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08005544  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1cd  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f9  00000000  00000000  0002b26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264f6  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8f0  00000000  00000000  00053ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d9a  00000000  00000000  0005e7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  001515c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080050e4 	.word	0x080050e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080050e4 	.word	0x080050e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fbca 	bl	8000d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f919 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f9b7 	bl	8000964 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f985 	bl	8000904 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80005fa:	487d      	ldr	r0, [pc, #500]	; (80007f0 <main+0x20c>)
 80005fc:	f000 f9dc 	bl	80009b8 <RetargetInit>

  uint8_t receive[16] = {0};
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
 8000604:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
  uint8_t seed[16] = {0};
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
  uint8_t pol[] = {0,1,1,1};
 8000620:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <main+0x210>)
 8000622:	61fb      	str	r3, [r7, #28]
  uint8_t xor[16] = {0};
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
  uint8_t buff[4];
  uint8_t sp[]="\n\r";
 8000634:	4a70      	ldr	r2, [pc, #448]	; (80007f8 <main+0x214>)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	4611      	mov	r1, r2
 800063c:	8019      	strh	r1, [r3, #0]
 800063e:	3302      	adds	r3, #2
 8000640:	0c12      	lsrs	r2, r2, #16
 8000642:	701a      	strb	r2, [r3, #0]

  printf("\x1b[2J"); //Clear the screen
 8000644:	486d      	ldr	r0, [pc, #436]	; (80007fc <main+0x218>)
 8000646:	f002 fdf7 	bl	8003238 <iprintf>
  printf("\n\r***************************************************************");
 800064a:	486d      	ldr	r0, [pc, #436]	; (8000800 <main+0x21c>)
 800064c:	f002 fdf4 	bl	8003238 <iprintf>
  printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 8000650:	486c      	ldr	r0, [pc, #432]	; (8000804 <main+0x220>)
 8000652:	f002 fdf1 	bl	8003238 <iprintf>
  printf("\n\r* DMIC - Jose De La Hoz - 2022                                *");
 8000656:	486c      	ldr	r0, [pc, #432]	; (8000808 <main+0x224>)
 8000658:	f002 fdee 	bl	8003238 <iprintf>
  printf("\n\r* Juego 'GENERADOR SEUDO SBPA'                          *");
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <main+0x228>)
 800065e:	f002 fdeb 	bl	8003238 <iprintf>
  printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000662:	486b      	ldr	r0, [pc, #428]	; (8000810 <main+0x22c>)
 8000664:	f002 fde8 	bl	8003238 <iprintf>
  printf("\n\r***************************************************************");
 8000668:	4865      	ldr	r0, [pc, #404]	; (8000800 <main+0x21c>)
 800066a:	f002 fde5 	bl	8003238 <iprintf>
  printf("\r\n");
 800066e:	4869      	ldr	r0, [pc, #420]	; (8000814 <main+0x230>)
 8000670:	f002 fe68 	bl	8003344 <puts>
  printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000674:	4868      	ldr	r0, [pc, #416]	; (8000818 <main+0x234>)
 8000676:	f002 fddf 	bl	8003238 <iprintf>
  printf("\r\n");
 800067a:	4866      	ldr	r0, [pc, #408]	; (8000814 <main+0x230>)
 800067c:	f002 fe62 	bl	8003344 <puts>
  printf("\r\nIngrese su nombre: ");
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <main+0x238>)
 8000682:	f002 fdd9 	bl	8003238 <iprintf>
  scanf("%s", nombre);
 8000686:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800068a:	4619      	mov	r1, r3
 800068c:	4864      	ldr	r0, [pc, #400]	; (8000820 <main+0x23c>)
 800068e:	f002 fe61 	bl	8003354 <iscanf>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if(!HAL_UART_Receive(&huart3, (uint8_t*)receive,4, HAL_MAX_DELAY)){
 8000692:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2204      	movs	r2, #4
 800069c:	4854      	ldr	r0, [pc, #336]	; (80007f0 <main+0x20c>)
 800069e:	f002 f8a0 	bl	80027e2 <HAL_UART_Receive>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d115      	bne.n	80006d4 <main+0xf0>

		  for(int i=0;(i<=15);i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	677b      	str	r3, [r7, #116]	; 0x74
 80006ac:	e00f      	b.n	80006ce <main+0xea>
			  seed[i]=(receive[i]-48);
 80006ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3b30      	subs	r3, #48	; 0x30
 80006ba:	b2d9      	uxtb	r1, r3
 80006bc:	f107 0220 	add.w	r2, r7, #32
 80006c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006c2:	4413      	add	r3, r2
 80006c4:	460a      	mov	r2, r1
 80006c6:	701a      	strb	r2, [r3, #0]
		  for(int i=0;(i<=15);i++){
 80006c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ca:	3301      	adds	r3, #1
 80006cc:	677b      	str	r3, [r7, #116]	; 0x74
 80006ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	ddec      	ble.n	80006ae <main+0xca>
		  //HAL_UART_Transmit(&huart3, seed, sizeof(seed), HAL_MAX_DELAY);
		  //HAL_UART_Transmit(&huart3, seed, 4, HAL_MAX_DELAY);

	  }
  //////////////////////////////////////////////////////
int k=0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	673b      	str	r3, [r7, #112]	; 0x70
while(k<16){
 80006d8:	e085      	b.n	80007e6 <main+0x202>
	  for(int i=0;(i<4);i++){
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80006de:	e01b      	b.n	8000718 <main+0x134>
		  if(pol[i]==1){xor[i]=seed[i];}
 80006e0:	f107 021c 	add.w	r2, r7, #28
 80006e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10b      	bne.n	8000706 <main+0x122>
 80006ee:	f107 0220 	add.w	r2, r7, #32
 80006f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f4:	4413      	add	r3, r2
 80006f6:	7819      	ldrb	r1, [r3, #0]
 80006f8:	f107 020c 	add.w	r2, r7, #12
 80006fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e005      	b.n	8000712 <main+0x12e>
		  else{xor[i]=0;}
 8000706:	f107 020c 	add.w	r2, r7, #12
 800070a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800070c:	4413      	add	r3, r2
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	  for(int i=0;(i<4);i++){
 8000712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000714:	3301      	adds	r3, #1
 8000716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800071a:	2b03      	cmp	r3, #3
 800071c:	dde0      	ble.n	80006e0 <main+0xfc>
	  }
	  ////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
	  uint8_t res=0;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	  for(int i = 0;(i<4);i++){
 8000724:	2300      	movs	r3, #0
 8000726:	667b      	str	r3, [r7, #100]	; 0x64
 8000728:	e00c      	b.n	8000744 <main+0x160>
		  res=res+xor[i];
 800072a:	f107 020c 	add.w	r2, r7, #12
 800072e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000730:	4413      	add	r3, r2
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000738:	4413      	add	r3, r2
 800073a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	  for(int i = 0;(i<4);i++){
 800073e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000740:	3301      	adds	r3, #1
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
 8000744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000746:	2b03      	cmp	r3, #3
 8000748:	ddef      	ble.n	800072a <main+0x146>

	 // HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

	////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

	  if(res % 2 == 0){res = 0;}
 800074a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <main+0x17c>
 8000758:	2300      	movs	r3, #0
 800075a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800075e:	e002      	b.n	8000766 <main+0x182>
	  else{res = 1;}
 8000760:	2301      	movs	r3, #1
 8000762:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  ///////////////////////////////////////////////
	 // HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);
	  ///mover y poner el valor xor en la cabeza

	  seed[3]=seed[2];
 8000766:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800076a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  seed[2]=seed[1];
 800076e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000772:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  seed[1]=seed[0];
 8000776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800077a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  seed[0]=res;
 800077e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000782:	f887 3020 	strb.w	r3, [r7, #32]


	  uint8_t usr =8*seed[0]+4*seed[1]+2*seed[2]+seed[3];
 8000786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000798:	4413      	add	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007a4:	4413      	add	r3, r2
 80007a6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	  itoa(usr,(char*)buff,10);
 80007aa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80007ae:	f107 0108 	add.w	r1, r7, #8
 80007b2:	220a      	movs	r2, #10
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fd35 	bl	8003224 <itoa>


	  HAL_UART_Transmit(&huart3, buff, sizeof(buff), HAL_MAX_DELAY);
 80007ba:	f107 0108 	add.w	r1, r7, #8
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2204      	movs	r2, #4
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <main+0x20c>)
 80007c6:	f001 ff89 	bl	80026dc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, sp, sizeof(sp), HAL_MAX_DELAY);
 80007ca:	1d39      	adds	r1, r7, #4
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	2203      	movs	r2, #3
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <main+0x20c>)
 80007d4:	f001 ff82 	bl	80026dc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80007d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007dc:	f000 fb2e 	bl	8000e3c <HAL_Delay>


k++;
 80007e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007e2:	3301      	adds	r3, #1
 80007e4:	673b      	str	r3, [r7, #112]	; 0x70
while(k<16){
 80007e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	f77f af76 	ble.w	80006da <main+0xf6>
  {
 80007ee:	e750      	b.n	8000692 <main+0xae>
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	01010100 	.word	0x01010100
 80007f8:	080052c0 	.word	0x080052c0
 80007fc:	080050fc 	.word	0x080050fc
 8000800:	08005104 	.word	0x08005104
 8000804:	08005148 	.word	0x08005148
 8000808:	0800518c 	.word	0x0800518c
 800080c:	080051d0 	.word	0x080051d0
 8000810:	0800520c 	.word	0x0800520c
 8000814:	08005250 	.word	0x08005250
 8000818:	08005254 	.word	0x08005254
 800081c:	080052a4 	.word	0x080052a4
 8000820:	080052bc 	.word	0x080052bc

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fcf8 	bl	8003228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <SystemClock_Config+0xd8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <SystemClock_Config+0xd8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xd8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <SystemClock_Config+0xdc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <SystemClock_Config+0xdc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <SystemClock_Config+0xdc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000894:	2360      	movs	r3, #96	; 0x60
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fdcd 	bl	8001448 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f87a 	bl	80009ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b8:	f000 fd76 	bl	80013a8 <HAL_PWREx_EnableOverDrive>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008c2:	f000 f873 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2103      	movs	r1, #3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f85e 	bl	80019a4 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008ee:	f000 f85d 	bl	80009ac <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	; 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART3_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_USART3_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART3_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000948:	f001 fe7a 	bl	8002640 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f82b 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000008c 	.word	0x2000008c
 8000960:	40004800 	.word	0x40004800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x44>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x44>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_GPIO_Init+0x44>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x44>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x44>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x44>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <RetargetInit+0x28>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <RetargetInit+0x2c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2202      	movs	r2, #2
 80009d0:	2100      	movs	r1, #0
 80009d2:	f002 fcd7 	bl	8003384 <setvbuf>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000114 	.word	0x20000114
 80009e4:	2000000c 	.word	0x2000000c

080009e8 <_isatty>:

int _isatty(int fd) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db04      	blt.n	8000a00 <_isatty+0x18>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	dc01      	bgt.n	8000a00 <_isatty+0x18>
    return 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e005      	b.n	8000a0c <_isatty+0x24>

  errno = EBADF;
 8000a00:	f002 fbce 	bl	80031a0 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2209      	movs	r2, #9
 8000a08:	601a      	str	r2, [r3, #0]
  return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_write>:

int _write(int fd, char* ptr, int len) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d002      	beq.n	8000a2c <_write+0x18>
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d111      	bne.n	8000a50 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <_write+0x54>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	f001 fe4f 	bl	80026dc <HAL_UART_Transmit>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <_write+0x38>
      return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	e008      	b.n	8000a5e <_write+0x4a>
    else
      return EIO;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	e006      	b.n	8000a5e <_write+0x4a>
  }
  errno = EBADF;
 8000a50:	f002 fba6 	bl	80031a0 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2209      	movs	r2, #9
 8000a58:	601a      	str	r2, [r3, #0]
  return -1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000114 	.word	0x20000114

08000a6c <_close>:

int _close(int fd) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db04      	blt.n	8000a84 <_close+0x18>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	dc01      	bgt.n	8000a84 <_close+0x18>
    return 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e006      	b.n	8000a92 <_close+0x26>

  errno = EBADF;
 8000a84:	f002 fb8c 	bl	80031a0 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2209      	movs	r2, #9
 8000a8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000aa6:	f002 fb7b 	bl	80031a0 <__errno>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2209      	movs	r2, #9
 8000aae:	601a      	str	r2, [r3, #0]
  return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_read>:

int _read(int fd, char* ptr, int len) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d110      	bne.n	8000af0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <_read+0x4c>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	f001 fe82 	bl	80027e2 <HAL_UART_Receive>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d101      	bne.n	8000aec <_read+0x30>
      return 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e008      	b.n	8000afe <_read+0x42>
    else
      return EIO;
 8000aec:	2305      	movs	r3, #5
 8000aee:	e006      	b.n	8000afe <_read+0x42>
  }
  errno = EBADF;
 8000af0:	f002 fb56 	bl	80031a0 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2209      	movs	r2, #9
 8000af8:	601a      	str	r2, [r3, #0]
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000114 	.word	0x20000114

08000b0c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db08      	blt.n	8000b2e <_fstat+0x22>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	dc05      	bgt.n	8000b2e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b28:	605a      	str	r2, [r3, #4]
    return 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e005      	b.n	8000b3a <_fstat+0x2e>
  }

  errno = EBADF;
 8000b2e:	f002 fb37 	bl	80031a0 <__errno>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2209      	movs	r2, #9
 8000b36:	601a      	str	r2, [r3, #0]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ae      	sub	sp, #184	; 0xb8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2290      	movs	r2, #144	; 0x90
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fb3b 	bl	8003228 <memset>
  if(huart->Instance==USART3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <HAL_UART_MspInit+0xb4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13c      	bne.n	8000c36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f910 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bd6:	f7ff fee9 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c24:	2307      	movs	r3, #7
 8000c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_UART_MspInit+0xbc>)
 8000c32:	f000 fa0d 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	37b8      	adds	r7, #184	; 0xb8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004800 	.word	0x40004800
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f8b0 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f002 fa66 	bl	80031a0 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20080000 	.word	0x20080000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	20000118 	.word	0x20000118
 8000d08:	20000130 	.word	0x20000130

08000d0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f002 fa25 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc3f 	bl	80005e4 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d74:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d7c:	20000130 	.word	0x20000130

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>

08000d82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f92e 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f805 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d92:	f7ff fed7 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f93b 	bl	8001036 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f911 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	2000011c 	.word	0x2000011c

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000011c 	.word	0x2000011c

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	05fa0000 	.word	0x05fa0000

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff47 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5c 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb0 	bl	8000fa4 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e175      	b.n	800135c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8164 	bne.w	8001356 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x56>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80be 	beq.w	8001356 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <HAL_GPIO_Init+0x324>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a65      	ldr	r2, [pc, #404]	; (8001374 <HAL_GPIO_Init+0x324>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_GPIO_Init+0x324>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011f2:	4a61      	ldr	r2, [pc, #388]	; (8001378 <HAL_GPIO_Init+0x328>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_GPIO_Init+0x32c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d037      	beq.n	800128e <HAL_GPIO_Init+0x23e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d031      	beq.n	800128a <HAL_GPIO_Init+0x23a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a56      	ldr	r2, [pc, #344]	; (8001384 <HAL_GPIO_Init+0x334>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d02b      	beq.n	8001286 <HAL_GPIO_Init+0x236>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a55      	ldr	r2, [pc, #340]	; (8001388 <HAL_GPIO_Init+0x338>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x232>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <HAL_GPIO_Init+0x33c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x22e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a53      	ldr	r2, [pc, #332]	; (8001390 <HAL_GPIO_Init+0x340>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x22a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x344>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a51      	ldr	r2, [pc, #324]	; (8001398 <HAL_GPIO_Init+0x348>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_GPIO_Init+0x34c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_GPIO_Init+0x350>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x21a>
 8001266:	2309      	movs	r3, #9
 8001268:	e012      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800126a:	230a      	movs	r3, #10
 800126c:	e010      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800126e:	2308      	movs	r3, #8
 8001270:	e00e      	b.n	8001290 <HAL_GPIO_Init+0x240>
 8001272:	2307      	movs	r3, #7
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x240>
 8001276:	2306      	movs	r3, #6
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x240>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x240>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x240>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x328>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_GPIO_Init+0x354>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <HAL_GPIO_Init+0x354>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_GPIO_Init+0x354>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <HAL_GPIO_Init+0x354>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <HAL_GPIO_Init+0x354>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_GPIO_Init+0x354>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_GPIO_Init+0x354>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_GPIO_Init+0x354>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae86 	bls.w	8001070 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40021c00 	.word	0x40021c00
 800139c:	40022000 	.word	0x40022000
 80013a0:	40022400 	.word	0x40022400
 80013a4:	40013c00 	.word	0x40013c00

080013a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_PWREx_EnableOverDrive+0x98>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <HAL_PWREx_EnableOverDrive+0x98>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d6:	f7ff fd25 	bl	8000e24 <HAL_GetTick>
 80013da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013dc:	e009      	b.n	80013f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013de:	f7ff fd21 	bl	8000e24 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ec:	d901      	bls.n	80013f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e022      	b.n	8001438 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d1ee      	bne.n	80013de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800140c:	f7ff fd0a 	bl	8000e24 <HAL_GetTick>
 8001410:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001412:	e009      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001414:	f7ff fd06 	bl	8000e24 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001422:	d901      	bls.n	8001428 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e007      	b.n	8001438 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_PWREx_EnableOverDrive+0x9c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001434:	d1ee      	bne.n	8001414 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e29b      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8087 	beq.w	800157a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00c      	beq.n	8001492 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001478:	4b93      	ldr	r3, [pc, #588]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d112      	bne.n	80014aa <HAL_RCC_OscConfig+0x62>
 8001484:	4b90      	ldr	r3, [pc, #576]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001490:	d10b      	bne.n	80014aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <HAL_RCC_OscConfig+0x130>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d168      	bne.n	8001578 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e275      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x7a>
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e02e      	b.n	8001520 <HAL_RCC_OscConfig+0xd8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x9c>
 80014ca:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7e      	ldr	r2, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7b      	ldr	r2, [pc, #492]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xd8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0xc0>
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a75      	ldr	r2, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a72      	ldr	r2, [pc, #456]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xd8>
 8001508:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a6b      	ldr	r2, [pc, #428]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fc7c 	bl	8000e24 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fc78 	bl	8000e24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e229      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xe8>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc68 	bl	8000e24 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc64 	bl	8000e24 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e215      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x110>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d069      	beq.n	800165a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x190>
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x17a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1e9      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	493d      	ldr	r1, [pc, #244]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e040      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d023      	beq.n	8001628 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a38      	ldr	r2, [pc, #224]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc1a 	bl	8000e24 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc16 	bl	8000e24 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4929      	ldr	r1, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fbf6 	bl	8000e24 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fbf2 	bl	8000e24 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1a3      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d038      	beq.n	80016d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d019      	beq.n	80016a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fbd3 	bl	8000e24 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fbcf 	bl	8000e24 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e180      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 8001696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x23a>
 80016a0:	e01a      	b.n	80016d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fbb9 	bl	8000e24 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fbb5 	bl	8000e24 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d903      	bls.n	80016cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e166      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
 80016c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b92      	ldr	r3, [pc, #584]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a4 	beq.w	800182e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a88      	ldr	r2, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b86      	ldr	r3, [pc, #536]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <HAL_RCC_OscConfig+0x4d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800171a:	4b80      	ldr	r3, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x4d4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7f      	ldr	r2, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x4d4>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb7d 	bl	8000e24 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fb79 	bl	8000e24 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e12a      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x4d4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x31a>
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a6f      	ldr	r2, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
 8001760:	e02d      	b.n	80017be <HAL_RCC_OscConfig+0x376>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x33c>
 800176a:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
 8001776:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a67      	ldr	r2, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x376>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x35e>
 800178c:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x376>
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb2d 	bl	8000e24 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb29 	bl	8000e24 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0d8      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x386>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb17 	bl	8000e24 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb13 	bl	8000e24 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0c2      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a3c      	ldr	r2, [pc, #240]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80ae 	beq.w	8001994 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d06d      	beq.n	8001920 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d14b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fae4 	bl	8000e24 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fae0 	bl	8000e24 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e091      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	071b      	lsls	r3, r3, #28
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fab2 	bl	8000e24 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff faae 	bl	8000e24 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e05f      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x47c>
 80018e2:	e057      	b.n	8001994 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa98 	bl	8000e24 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fa94 	bl	8000e24 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4b0>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x54c>
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_RCC_OscConfig+0x558>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d030      	beq.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d129      	bne.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d122      	bne.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001956:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001958:	4293      	cmp	r3, r2
 800195a:	d119      	bne.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d10f      	bne.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a98:	f7ff f9c4 	bl	8000e24 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f9c0 	bl	8000e24 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1cc>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1d0>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f920 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	080052d0 	.word	0x080052d0
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b80:	b094      	sub	sp, #80	; 0x50
 8001b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
 8001b88:	2300      	movs	r3, #0
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b94:	4b79      	ldr	r3, [pc, #484]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	f200 80e1 	bhi.w	8001d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bae:	e0db      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb4:	e0db      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bba:	e0d8      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bee:	4622      	mov	r2, r4
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4621      	mov	r1, r4
 8001c08:	1a51      	subs	r1, r2, r1
 8001c0a:	6139      	str	r1, [r7, #16]
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c20:	4659      	mov	r1, fp
 8001c22:	018b      	lsls	r3, r1, #6
 8001c24:	4651      	mov	r1, sl
 8001c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	018a      	lsls	r2, r1, #6
 8001c2e:	4651      	mov	r1, sl
 8001c30:	ebb2 0801 	subs.w	r8, r2, r1
 8001c34:	4659      	mov	r1, fp
 8001c36:	eb63 0901 	sbc.w	r9, r3, r1
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4e:	4690      	mov	r8, r2
 8001c50:	4699      	mov	r9, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	eb18 0303 	adds.w	r3, r8, r3
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	eb49 0303 	adc.w	r3, r9, r3
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	024b      	lsls	r3, r1, #9
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c78:	4621      	mov	r1, r4
 8001c7a:	024a      	lsls	r2, r1, #9
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c82:	2200      	movs	r2, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c8c:	f7fe fb28 	bl	80002e0 <__aeabi_uldivmod>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4613      	mov	r3, r2
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c98:	e058      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	f04f 0000 	mov.w	r0, #0
 8001cbc:	f04f 0100 	mov.w	r1, #0
 8001cc0:	0159      	lsls	r1, r3, #5
 8001cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc6:	0150      	lsls	r0, r2, #5
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4641      	mov	r1, r8
 8001cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cec:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	00eb      	lsls	r3, r5, #3
 8001cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d02:	00e2      	lsls	r2, r4, #3
 8001d04:	4614      	mov	r4, r2
 8001d06:	461d      	mov	r5, r3
 8001d08:	4643      	mov	r3, r8
 8001d0a:	18e3      	adds	r3, r4, r3
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	464b      	mov	r3, r9
 8001d10:	eb45 0303 	adc.w	r3, r5, r3
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d22:	4629      	mov	r1, r5
 8001d24:	028b      	lsls	r3, r1, #10
 8001d26:	4621      	mov	r1, r4
 8001d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	028a      	lsls	r2, r1, #10
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d36:	2200      	movs	r2, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	61fa      	str	r2, [r7, #28]
 8001d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d40:	f7fe face 	bl	80002e0 <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3750      	adds	r7, #80	; 0x50
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	080052e0 	.word	0x080052e0

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffdc 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	080052e0 	.word	0x080052e0

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e22:	6093      	str	r3, [r2, #8]
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	4964      	ldr	r1, [pc, #400]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d017      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	4959      	ldr	r1, [pc, #356]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e68:	d101      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d017      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	494a      	ldr	r1, [pc, #296]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 808b 	beq.w	8001fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a39      	ldr	r2, [pc, #228]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a34      	ldr	r2, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef8:	f7fe ff94 	bl	8000e24 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7fe ff90 	bl	8000e24 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e38f      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d035      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d02e      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d114      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff58 	bl	8000e24 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7fe ff54 	bl	8000e24 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e351      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ee      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fa6:	d111      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	4901      	ldr	r1, [pc, #4]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	0ffffcff 	.word	0x0ffffcff
 8001fcc:	4bac      	ldr	r3, [pc, #688]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4aab      	ldr	r2, [pc, #684]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fd6:	6093      	str	r3, [r2, #8]
 8001fd8:	4ba9      	ldr	r3, [pc, #676]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	49a6      	ldr	r1, [pc, #664]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ff6:	4ba2      	ldr	r3, [pc, #648]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffc:	4aa0      	ldr	r2, [pc, #640]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002006:	4b9e      	ldr	r3, [pc, #632]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002008:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	499b      	ldr	r1, [pc, #620]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002024:	4b96      	ldr	r3, [pc, #600]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002032:	4993      	ldr	r1, [pc, #588]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002046:	4b8e      	ldr	r3, [pc, #568]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002054:	498a      	ldr	r1, [pc, #552]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002068:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002076:	4982      	ldr	r1, [pc, #520]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	4979      	ldr	r1, [pc, #484]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ac:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4971      	ldr	r1, [pc, #452]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f023 020c 	bic.w	r2, r3, #12
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020dc:	4968      	ldr	r1, [pc, #416]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f0:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4960      	ldr	r1, [pc, #384]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002120:	4957      	ldr	r1, [pc, #348]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002134:	4b52      	ldr	r3, [pc, #328]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	494f      	ldr	r1, [pc, #316]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	4946      	ldr	r1, [pc, #280]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	493e      	ldr	r1, [pc, #248]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a8:	4935      	ldr	r1, [pc, #212]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ca:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ec:	4924      	ldr	r1, [pc, #144]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fc:	d101      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800220e:	2301      	movs	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	4914      	ldr	r1, [pc, #80]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002250:	490b      	ldr	r1, [pc, #44]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00f      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002274:	4902      	ldr	r1, [pc, #8]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227c:	e002      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002296:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	4986      	ldr	r1, [pc, #536]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c4:	497d      	ldr	r1, [pc, #500]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d006      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80d6 	beq.w	800248c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022e0:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ec:	f7fe fd9a 	bl	8000e24 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f4:	f7fe fd96 	bl	8000e24 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e195      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d021      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233a:	0e1b      	lsrs	r3, r3, #24
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	019a      	lsls	r2, r3, #6
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	4958      	ldr	r1, [pc, #352]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02e      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d129      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800238e:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a2:	0f1b      	lsrs	r3, r3, #28
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	019a      	lsls	r2, r3, #6
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	061b      	lsls	r3, r3, #24
 80023bc:	431a      	orrs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	071b      	lsls	r3, r3, #28
 80023c2:	493e      	ldr	r1, [pc, #248]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023ca:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d0:	f023 021f 	bic.w	r2, r3, #31
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	3b01      	subs	r3, #1
 80023da:	4938      	ldr	r1, [pc, #224]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01d      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f4:	0e1b      	lsrs	r3, r3, #24
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023fc:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002402:	0f1b      	lsrs	r3, r3, #28
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	019a      	lsls	r2, r3, #6
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	071b      	lsls	r3, r3, #28
 8002422:	4926      	ldr	r1, [pc, #152]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d011      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	019a      	lsls	r2, r3, #6
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	071b      	lsls	r3, r3, #28
 8002452:	491a      	ldr	r1, [pc, #104]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002466:	f7fe fcdd 	bl	8000e24 <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800246e:	f7fe fcd9 	bl	8000e24 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0d8      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 80ce 	bne.w	8002630 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fcc0 	bl	8000e24 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a6:	e00b      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024a8:	f7fe fcbc 	bl	8000e24 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d904      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0bb      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d0ec      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d12a      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002504:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	0f1b      	lsrs	r3, r3, #28
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	4944      	ldr	r1, [pc, #272]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	493d      	ldr	r1, [pc, #244]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d022      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002560:	d11d      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	0e1b      	lsrs	r3, r3, #24
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	0f1b      	lsrs	r3, r3, #28
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	019a      	lsls	r2, r3, #6
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	071b      	lsls	r3, r3, #28
 8002596:	4929      	ldr	r1, [pc, #164]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	0e1b      	lsrs	r3, r3, #24
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	019a      	lsls	r2, r3, #6
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	4917      	ldr	r1, [pc, #92]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002608:	f7fe fc0c 	bl	8000e24 <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002610:	f7fe fc08 	bl	8000e24 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e007      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262e:	d1ef      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e040      	b.n	80026d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fa92 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f974 	bl	800296c <UART_SetConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fbcc 	bl	8002e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fc53 	bl	8002f78 <UART_CheckIdleState>
 80026d2:	4603      	mov	r3, r0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d171      	bne.n	80027d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_UART_Transmit+0x24>
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e06a      	b.n	80027da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2221      	movs	r2, #33	; 0x21
 8002710:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002712:	f7fe fb87 	bl	8000e24 <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002730:	d108      	bne.n	8002744 <HAL_UART_Transmit+0x68>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e003      	b.n	800274c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800274c:	e02c      	b.n	80027a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fc5a 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e038      	b.n	80027da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10b      	bne.n	8002786 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3302      	adds	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e007      	b.n	8002796 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3301      	adds	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1cc      	bne.n	800274e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fc27 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e005      	b.n	80027da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b08a      	sub	sp, #40	; 0x28
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80b1 	bne.w	8002960 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_UART_Receive+0x28>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0a9      	b.n	8002962 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2222      	movs	r2, #34	; 0x22
 800281a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002824:	f7fe fafe 	bl	8000e24 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	d10e      	bne.n	8002862 <HAL_UART_Receive+0x80>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_UART_Receive+0x76>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002856:	e02d      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	22ff      	movs	r2, #255	; 0xff
 800285c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002860:	e028      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_UART_Receive+0xa4>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Receive+0x9a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	22ff      	movs	r2, #255	; 0xff
 8002876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800287a:	e01b      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	227f      	movs	r2, #127	; 0x7f
 8002880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002884:	e016      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288e:	d10d      	bne.n	80028ac <HAL_UART_Receive+0xca>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_UART_Receive+0xc0>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	227f      	movs	r2, #127	; 0x7f
 800289c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028a0:	e008      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	223f      	movs	r2, #63	; 0x3f
 80028a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028aa:	e003      	b.n	80028b4 <HAL_UART_Receive+0xd2>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028ba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d108      	bne.n	80028d8 <HAL_UART_Receive+0xf6>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e003      	b.n	80028e0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028e0:	e032      	b.n	8002948 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2120      	movs	r1, #32
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fb90 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e032      	b.n	8002962 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	b29a      	uxth	r2, r3
 800290a:	8a7b      	ldrh	r3, [r7, #18]
 800290c:	4013      	ands	r3, r2
 800290e:	b29a      	uxth	r2, r3
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	3302      	adds	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	e00c      	b.n	8002936 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	b2da      	uxtb	r2, r3
 8002924:	8a7b      	ldrh	r3, [r7, #18]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4013      	ands	r3, r2
 800292a:	b2da      	uxtb	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3301      	adds	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1c6      	bne.n	80028e2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4ba6      	ldr	r3, [pc, #664]	; (8002c30 <UART_SetConfig+0x2c4>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6979      	ldr	r1, [r7, #20]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a94      	ldr	r2, [pc, #592]	; (8002c34 <UART_SetConfig+0x2c8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d120      	bne.n	8002a2a <UART_SetConfig+0xbe>
 80029e8:	4b93      	ldr	r3, [pc, #588]	; (8002c38 <UART_SetConfig+0x2cc>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d816      	bhi.n	8002a24 <UART_SetConfig+0xb8>
 80029f6:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <UART_SetConfig+0x90>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a13 	.word	0x08002a13
 8002a08:	08002a1f 	.word	0x08002a1f
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e150      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a12:	2302      	movs	r3, #2
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e14d      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e14a      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e147      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a24:	2310      	movs	r3, #16
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e144      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a83      	ldr	r2, [pc, #524]	; (8002c3c <UART_SetConfig+0x2d0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d132      	bne.n	8002a9a <UART_SetConfig+0x12e>
 8002a34:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d828      	bhi.n	8002a94 <UART_SetConfig+0x128>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0xdc>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002a95 	.word	0x08002a95
 8002a50:	08002a95 	.word	0x08002a95
 8002a54:	08002a95 	.word	0x08002a95
 8002a58:	08002a89 	.word	0x08002a89
 8002a5c:	08002a95 	.word	0x08002a95
 8002a60:	08002a95 	.word	0x08002a95
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002a83 	.word	0x08002a83
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a95 	.word	0x08002a95
 8002a74:	08002a95 	.word	0x08002a95
 8002a78:	08002a8f 	.word	0x08002a8f
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	e118      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a82:	2302      	movs	r3, #2
 8002a84:	77fb      	strb	r3, [r7, #31]
 8002a86:	e115      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e112      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	e10f      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a94:	2310      	movs	r3, #16
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e10c      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <UART_SetConfig+0x2d4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d120      	bne.n	8002ae6 <UART_SetConfig+0x17a>
 8002aa4:	4b64      	ldr	r3, [pc, #400]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002aae:	2b30      	cmp	r3, #48	; 0x30
 8002ab0:	d013      	beq.n	8002ada <UART_SetConfig+0x16e>
 8002ab2:	2b30      	cmp	r3, #48	; 0x30
 8002ab4:	d814      	bhi.n	8002ae0 <UART_SetConfig+0x174>
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d009      	beq.n	8002ace <UART_SetConfig+0x162>
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d810      	bhi.n	8002ae0 <UART_SetConfig+0x174>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x15c>
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d006      	beq.n	8002ad4 <UART_SetConfig+0x168>
 8002ac6:	e00b      	b.n	8002ae0 <UART_SetConfig+0x174>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e0f2      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	e0ef      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e0ec      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ada:	2308      	movs	r3, #8
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e0e9      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e0e6      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <UART_SetConfig+0x2d8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d120      	bne.n	8002b32 <UART_SetConfig+0x1c6>
 8002af0:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002afa:	2bc0      	cmp	r3, #192	; 0xc0
 8002afc:	d013      	beq.n	8002b26 <UART_SetConfig+0x1ba>
 8002afe:	2bc0      	cmp	r3, #192	; 0xc0
 8002b00:	d814      	bhi.n	8002b2c <UART_SetConfig+0x1c0>
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d009      	beq.n	8002b1a <UART_SetConfig+0x1ae>
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d810      	bhi.n	8002b2c <UART_SetConfig+0x1c0>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <UART_SetConfig+0x1a8>
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d006      	beq.n	8002b20 <UART_SetConfig+0x1b4>
 8002b12:	e00b      	b.n	8002b2c <UART_SetConfig+0x1c0>
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e0cc      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e0c9      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b20:	2304      	movs	r3, #4
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e0c6      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b26:	2308      	movs	r3, #8
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e0c3      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e0c0      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a44      	ldr	r2, [pc, #272]	; (8002c48 <UART_SetConfig+0x2dc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d125      	bne.n	8002b88 <UART_SetConfig+0x21c>
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4a:	d017      	beq.n	8002b7c <UART_SetConfig+0x210>
 8002b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b50:	d817      	bhi.n	8002b82 <UART_SetConfig+0x216>
 8002b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b56:	d00b      	beq.n	8002b70 <UART_SetConfig+0x204>
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d811      	bhi.n	8002b82 <UART_SetConfig+0x216>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <UART_SetConfig+0x1fe>
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d006      	beq.n	8002b76 <UART_SetConfig+0x20a>
 8002b68:	e00b      	b.n	8002b82 <UART_SetConfig+0x216>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e0a1      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b70:	2302      	movs	r3, #2
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e09e      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b76:	2304      	movs	r3, #4
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e09b      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e098      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b82:	2310      	movs	r3, #16
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e095      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <UART_SetConfig+0x2e0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d125      	bne.n	8002bde <UART_SetConfig+0x272>
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ba0:	d017      	beq.n	8002bd2 <UART_SetConfig+0x266>
 8002ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ba6:	d817      	bhi.n	8002bd8 <UART_SetConfig+0x26c>
 8002ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bac:	d00b      	beq.n	8002bc6 <UART_SetConfig+0x25a>
 8002bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb2:	d811      	bhi.n	8002bd8 <UART_SetConfig+0x26c>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <UART_SetConfig+0x254>
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d006      	beq.n	8002bcc <UART_SetConfig+0x260>
 8002bbe:	e00b      	b.n	8002bd8 <UART_SetConfig+0x26c>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e076      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e073      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e070      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e06d      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e06a      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <UART_SetConfig+0x2e4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d138      	bne.n	8002c5a <UART_SetConfig+0x2ee>
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <UART_SetConfig+0x2cc>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bf6:	d017      	beq.n	8002c28 <UART_SetConfig+0x2bc>
 8002bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bfc:	d82a      	bhi.n	8002c54 <UART_SetConfig+0x2e8>
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d00b      	beq.n	8002c1c <UART_SetConfig+0x2b0>
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d824      	bhi.n	8002c54 <UART_SetConfig+0x2e8>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <UART_SetConfig+0x2aa>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d006      	beq.n	8002c22 <UART_SetConfig+0x2b6>
 8002c14:	e01e      	b.n	8002c54 <UART_SetConfig+0x2e8>
 8002c16:	2300      	movs	r3, #0
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e04b      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e048      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c22:	2304      	movs	r3, #4
 8002c24:	77fb      	strb	r3, [r7, #31]
 8002c26:	e045      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	77fb      	strb	r3, [r7, #31]
 8002c2c:	e042      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c2e:	bf00      	nop
 8002c30:	efff69f3 	.word	0xefff69f3
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40004800 	.word	0x40004800
 8002c44:	40004c00 	.word	0x40004c00
 8002c48:	40005000 	.word	0x40005000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	40007800 	.word	0x40007800
 8002c54:	2310      	movs	r3, #16
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e02c      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <UART_SetConfig+0x4bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d125      	bne.n	8002cb0 <UART_SetConfig+0x344>
 8002c64:	4b71      	ldr	r3, [pc, #452]	; (8002e2c <UART_SetConfig+0x4c0>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c72:	d017      	beq.n	8002ca4 <UART_SetConfig+0x338>
 8002c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c78:	d817      	bhi.n	8002caa <UART_SetConfig+0x33e>
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7e:	d00b      	beq.n	8002c98 <UART_SetConfig+0x32c>
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d811      	bhi.n	8002caa <UART_SetConfig+0x33e>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <UART_SetConfig+0x326>
 8002c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c8e:	d006      	beq.n	8002c9e <UART_SetConfig+0x332>
 8002c90:	e00b      	b.n	8002caa <UART_SetConfig+0x33e>
 8002c92:	2300      	movs	r3, #0
 8002c94:	77fb      	strb	r3, [r7, #31]
 8002c96:	e00d      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e00a      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	77fb      	strb	r3, [r7, #31]
 8002ca2:	e007      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e004      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002caa:	2310      	movs	r3, #16
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e001      	b.n	8002cb4 <UART_SetConfig+0x348>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d15b      	bne.n	8002d76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d828      	bhi.n	8002d16 <UART_SetConfig+0x3aa>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x360>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d17 	.word	0x08002d17
 8002cdc:	08002d07 	.word	0x08002d07
 8002ce0:	08002d17 	.word	0x08002d17
 8002ce4:	08002d17 	.word	0x08002d17
 8002ce8:	08002d17 	.word	0x08002d17
 8002cec:	08002d0f 	.word	0x08002d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7ff f856 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61b8      	str	r0, [r7, #24]
        break;
 8002cf6:	e013      	b.n	8002d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7ff f866 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	61b8      	str	r0, [r7, #24]
        break;
 8002cfe:	e00f      	b.n	8002d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <UART_SetConfig+0x4c4>)
 8002d02:	61bb      	str	r3, [r7, #24]
        break;
 8002d04:	e00c      	b.n	8002d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d06:	f7fe ff39 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002d0a:	61b8      	str	r0, [r7, #24]
        break;
 8002d0c:	e008      	b.n	8002d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	61bb      	str	r3, [r7, #24]
        break;
 8002d14:	e004      	b.n	8002d20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d074      	beq.n	8002e10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	005a      	lsls	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d916      	bls.n	8002d70 <UART_SetConfig+0x404>
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d212      	bcs.n	8002d70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f023 030f 	bic.w	r3, r3, #15
 8002d52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	89fb      	ldrh	r3, [r7, #14]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	89fa      	ldrh	r2, [r7, #14]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e04f      	b.n	8002e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77bb      	strb	r3, [r7, #30]
 8002d74:	e04c      	b.n	8002e10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d828      	bhi.n	8002dce <UART_SetConfig+0x462>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0x418>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002db1 	.word	0x08002db1
 8002d8c:	08002db9 	.word	0x08002db9
 8002d90:	08002dcf 	.word	0x08002dcf
 8002d94:	08002dbf 	.word	0x08002dbf
 8002d98:	08002dcf 	.word	0x08002dcf
 8002d9c:	08002dcf 	.word	0x08002dcf
 8002da0:	08002dcf 	.word	0x08002dcf
 8002da4:	08002dc7 	.word	0x08002dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da8:	f7fe fffa 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002dac:	61b8      	str	r0, [r7, #24]
        break;
 8002dae:	e013      	b.n	8002dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db0:	f7ff f80a 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002db4:	61b8      	str	r0, [r7, #24]
        break;
 8002db6:	e00f      	b.n	8002dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <UART_SetConfig+0x4c4>)
 8002dba:	61bb      	str	r3, [r7, #24]
        break;
 8002dbc:	e00c      	b.n	8002dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dbe:	f7fe fedd 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002dc2:	61b8      	str	r0, [r7, #24]
        break;
 8002dc4:	e008      	b.n	8002dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dca:	61bb      	str	r3, [r7, #24]
        break;
 8002dcc:	e004      	b.n	8002dd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8002dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d018      	beq.n	8002e10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	085a      	lsrs	r2, r3, #1
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d909      	bls.n	8002e0c <UART_SetConfig+0x4a0>
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d205      	bcs.n	8002e0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	e001      	b.n	8002e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40007c00 	.word	0x40007c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400

08002e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01a      	beq.n	8002f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f32:	d10a      	bne.n	8002f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f88:	f7fd ff4c 	bl	8000e24 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d10e      	bne.n	8002fba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f831 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e027      	b.n	800300a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d10e      	bne.n	8002fe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f81b 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e011      	b.n	800300a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b09c      	sub	sp, #112	; 0x70
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	e0a7      	b.n	8003174 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	f000 80a3 	beq.w	8003174 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fd fef9 	bl	8000e24 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <UART_WaitOnFlagUntilTimeout+0x32>
 800303e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003040:	2b00      	cmp	r3, #0
 8003042:	d13f      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003058:	667b      	str	r3, [r7, #100]	; 0x64
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003064:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e6      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3308      	adds	r3, #8
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	663b      	str	r3, [r7, #96]	; 0x60
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3308      	adds	r3, #8
 8003094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003096:	64ba      	str	r2, [r7, #72]	; 0x48
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800309c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e068      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d050      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e0:	d148      	bne.n	8003174 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
 800310c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e6      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	613b      	str	r3, [r7, #16]
   return(result);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3308      	adds	r3, #8
 800313c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800313e:	623a      	str	r2, [r7, #32]
 8003140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	61bb      	str	r3, [r7, #24]
   return(result);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e010      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	f43f af48 	beq.w	8003024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3770      	adds	r7, #112	; 0x70
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <__errno>:
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <__errno+0x8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4d0d      	ldr	r5, [pc, #52]	; (80031e4 <__libc_init_array+0x38>)
 80031b0:	4c0d      	ldr	r4, [pc, #52]	; (80031e8 <__libc_init_array+0x3c>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	2600      	movs	r6, #0
 80031b8:	42a6      	cmp	r6, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	4d0b      	ldr	r5, [pc, #44]	; (80031ec <__libc_init_array+0x40>)
 80031be:	4c0c      	ldr	r4, [pc, #48]	; (80031f0 <__libc_init_array+0x44>)
 80031c0:	f001 ff90 	bl	80050e4 <_init>
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	10a4      	asrs	r4, r4, #2
 80031c8:	2600      	movs	r6, #0
 80031ca:	42a6      	cmp	r6, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d4:	4798      	blx	r3
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f855 3b04 	ldr.w	r3, [r5], #4
 80031de:	4798      	blx	r3
 80031e0:	3601      	adds	r6, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	080054cc 	.word	0x080054cc
 80031e8:	080054cc 	.word	0x080054cc
 80031ec:	080054cc 	.word	0x080054cc
 80031f0:	080054d0 	.word	0x080054d0

080031f4 <__itoa>:
 80031f4:	1e93      	subs	r3, r2, #2
 80031f6:	2b22      	cmp	r3, #34	; 0x22
 80031f8:	b510      	push	{r4, lr}
 80031fa:	460c      	mov	r4, r1
 80031fc:	d904      	bls.n	8003208 <__itoa+0x14>
 80031fe:	2300      	movs	r3, #0
 8003200:	700b      	strb	r3, [r1, #0]
 8003202:	461c      	mov	r4, r3
 8003204:	4620      	mov	r0, r4
 8003206:	bd10      	pop	{r4, pc}
 8003208:	2a0a      	cmp	r2, #10
 800320a:	d109      	bne.n	8003220 <__itoa+0x2c>
 800320c:	2800      	cmp	r0, #0
 800320e:	da07      	bge.n	8003220 <__itoa+0x2c>
 8003210:	232d      	movs	r3, #45	; 0x2d
 8003212:	700b      	strb	r3, [r1, #0]
 8003214:	4240      	negs	r0, r0
 8003216:	2101      	movs	r1, #1
 8003218:	4421      	add	r1, r4
 800321a:	f000 f979 	bl	8003510 <__utoa>
 800321e:	e7f1      	b.n	8003204 <__itoa+0x10>
 8003220:	2100      	movs	r1, #0
 8003222:	e7f9      	b.n	8003218 <__itoa+0x24>

08003224 <itoa>:
 8003224:	f7ff bfe6 	b.w	80031f4 <__itoa>

08003228 <memset>:
 8003228:	4402      	add	r2, r0
 800322a:	4603      	mov	r3, r0
 800322c:	4293      	cmp	r3, r2
 800322e:	d100      	bne.n	8003232 <memset+0xa>
 8003230:	4770      	bx	lr
 8003232:	f803 1b01 	strb.w	r1, [r3], #1
 8003236:	e7f9      	b.n	800322c <memset+0x4>

08003238 <iprintf>:
 8003238:	b40f      	push	{r0, r1, r2, r3}
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <iprintf+0x2c>)
 800323c:	b513      	push	{r0, r1, r4, lr}
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	b124      	cbz	r4, 800324c <iprintf+0x14>
 8003242:	69a3      	ldr	r3, [r4, #24]
 8003244:	b913      	cbnz	r3, 800324c <iprintf+0x14>
 8003246:	4620      	mov	r0, r4
 8003248:	f000 fb90 	bl	800396c <__sinit>
 800324c:	ab05      	add	r3, sp, #20
 800324e:	9a04      	ldr	r2, [sp, #16]
 8003250:	68a1      	ldr	r1, [r4, #8]
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	4620      	mov	r0, r4
 8003256:	f000 fdbd 	bl	8003dd4 <_vfiprintf_r>
 800325a:	b002      	add	sp, #8
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	b004      	add	sp, #16
 8003262:	4770      	bx	lr
 8003264:	2000000c 	.word	0x2000000c

08003268 <_puts_r>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	460e      	mov	r6, r1
 800326c:	4605      	mov	r5, r0
 800326e:	b118      	cbz	r0, 8003278 <_puts_r+0x10>
 8003270:	6983      	ldr	r3, [r0, #24]
 8003272:	b90b      	cbnz	r3, 8003278 <_puts_r+0x10>
 8003274:	f000 fb7a 	bl	800396c <__sinit>
 8003278:	69ab      	ldr	r3, [r5, #24]
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	b913      	cbnz	r3, 8003284 <_puts_r+0x1c>
 800327e:	4628      	mov	r0, r5
 8003280:	f000 fb74 	bl	800396c <__sinit>
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <_puts_r+0xd0>)
 8003286:	429c      	cmp	r4, r3
 8003288:	d120      	bne.n	80032cc <_puts_r+0x64>
 800328a:	686c      	ldr	r4, [r5, #4]
 800328c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800328e:	07db      	lsls	r3, r3, #31
 8003290:	d405      	bmi.n	800329e <_puts_r+0x36>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	0598      	lsls	r0, r3, #22
 8003296:	d402      	bmi.n	800329e <_puts_r+0x36>
 8003298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329a:	f000 fc22 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	0719      	lsls	r1, r3, #28
 80032a2:	d51d      	bpl.n	80032e0 <_puts_r+0x78>
 80032a4:	6923      	ldr	r3, [r4, #16]
 80032a6:	b1db      	cbz	r3, 80032e0 <_puts_r+0x78>
 80032a8:	3e01      	subs	r6, #1
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60a3      	str	r3, [r4, #8]
 80032b4:	bb39      	cbnz	r1, 8003306 <_puts_r+0x9e>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da38      	bge.n	800332c <_puts_r+0xc4>
 80032ba:	4622      	mov	r2, r4
 80032bc:	210a      	movs	r1, #10
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f968 	bl	8003594 <__swbuf_r>
 80032c4:	3001      	adds	r0, #1
 80032c6:	d011      	beq.n	80032ec <_puts_r+0x84>
 80032c8:	250a      	movs	r5, #10
 80032ca:	e011      	b.n	80032f0 <_puts_r+0x88>
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <_puts_r+0xd4>)
 80032ce:	429c      	cmp	r4, r3
 80032d0:	d101      	bne.n	80032d6 <_puts_r+0x6e>
 80032d2:	68ac      	ldr	r4, [r5, #8]
 80032d4:	e7da      	b.n	800328c <_puts_r+0x24>
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <_puts_r+0xd8>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	bf08      	it	eq
 80032dc:	68ec      	ldreq	r4, [r5, #12]
 80032de:	e7d5      	b.n	800328c <_puts_r+0x24>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 f9a8 	bl	8003638 <__swsetup_r>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d0dd      	beq.n	80032a8 <_puts_r+0x40>
 80032ec:	f04f 35ff 	mov.w	r5, #4294967295
 80032f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f2:	07da      	lsls	r2, r3, #31
 80032f4:	d405      	bmi.n	8003302 <_puts_r+0x9a>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	059b      	lsls	r3, r3, #22
 80032fa:	d402      	bmi.n	8003302 <_puts_r+0x9a>
 80032fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032fe:	f000 fbf1 	bl	8003ae4 <__retarget_lock_release_recursive>
 8003302:	4628      	mov	r0, r5
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	2b00      	cmp	r3, #0
 8003308:	da04      	bge.n	8003314 <_puts_r+0xac>
 800330a:	69a2      	ldr	r2, [r4, #24]
 800330c:	429a      	cmp	r2, r3
 800330e:	dc06      	bgt.n	800331e <_puts_r+0xb6>
 8003310:	290a      	cmp	r1, #10
 8003312:	d004      	beq.n	800331e <_puts_r+0xb6>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	7019      	strb	r1, [r3, #0]
 800331c:	e7c5      	b.n	80032aa <_puts_r+0x42>
 800331e:	4622      	mov	r2, r4
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f937 	bl	8003594 <__swbuf_r>
 8003326:	3001      	adds	r0, #1
 8003328:	d1bf      	bne.n	80032aa <_puts_r+0x42>
 800332a:	e7df      	b.n	80032ec <_puts_r+0x84>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	250a      	movs	r5, #10
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	701d      	strb	r5, [r3, #0]
 8003336:	e7db      	b.n	80032f0 <_puts_r+0x88>
 8003338:	08005334 	.word	0x08005334
 800333c:	08005354 	.word	0x08005354
 8003340:	08005314 	.word	0x08005314

08003344 <puts>:
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <puts+0xc>)
 8003346:	4601      	mov	r1, r0
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	f7ff bf8d 	b.w	8003268 <_puts_r>
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c

08003354 <iscanf>:
 8003354:	b40f      	push	{r0, r1, r2, r3}
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <iscanf+0x2c>)
 8003358:	b513      	push	{r0, r1, r4, lr}
 800335a:	681c      	ldr	r4, [r3, #0]
 800335c:	b124      	cbz	r4, 8003368 <iscanf+0x14>
 800335e:	69a3      	ldr	r3, [r4, #24]
 8003360:	b913      	cbnz	r3, 8003368 <iscanf+0x14>
 8003362:	4620      	mov	r0, r4
 8003364:	f000 fb02 	bl	800396c <__sinit>
 8003368:	ab05      	add	r3, sp, #20
 800336a:	9a04      	ldr	r2, [sp, #16]
 800336c:	6861      	ldr	r1, [r4, #4]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	4620      	mov	r0, r4
 8003372:	f001 f999 	bl	80046a8 <_vfiscanf_r>
 8003376:	b002      	add	sp, #8
 8003378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800337c:	b004      	add	sp, #16
 800337e:	4770      	bx	lr
 8003380:	2000000c 	.word	0x2000000c

08003384 <setvbuf>:
 8003384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003388:	461d      	mov	r5, r3
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <setvbuf+0x17c>)
 800338c:	681f      	ldr	r7, [r3, #0]
 800338e:	4604      	mov	r4, r0
 8003390:	460e      	mov	r6, r1
 8003392:	4690      	mov	r8, r2
 8003394:	b127      	cbz	r7, 80033a0 <setvbuf+0x1c>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	b913      	cbnz	r3, 80033a0 <setvbuf+0x1c>
 800339a:	4638      	mov	r0, r7
 800339c:	f000 fae6 	bl	800396c <__sinit>
 80033a0:	4b58      	ldr	r3, [pc, #352]	; (8003504 <setvbuf+0x180>)
 80033a2:	429c      	cmp	r4, r3
 80033a4:	d167      	bne.n	8003476 <setvbuf+0xf2>
 80033a6:	687c      	ldr	r4, [r7, #4]
 80033a8:	f1b8 0f02 	cmp.w	r8, #2
 80033ac:	d006      	beq.n	80033bc <setvbuf+0x38>
 80033ae:	f1b8 0f01 	cmp.w	r8, #1
 80033b2:	f200 809f 	bhi.w	80034f4 <setvbuf+0x170>
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	f2c0 809c 	blt.w	80034f4 <setvbuf+0x170>
 80033bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033be:	07db      	lsls	r3, r3, #31
 80033c0:	d405      	bmi.n	80033ce <setvbuf+0x4a>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	0598      	lsls	r0, r3, #22
 80033c6:	d402      	bmi.n	80033ce <setvbuf+0x4a>
 80033c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ca:	f000 fb8a 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 80033ce:	4621      	mov	r1, r4
 80033d0:	4638      	mov	r0, r7
 80033d2:	f000 fa25 	bl	8003820 <_fflush_r>
 80033d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033d8:	b141      	cbz	r1, 80033ec <setvbuf+0x68>
 80033da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033de:	4299      	cmp	r1, r3
 80033e0:	d002      	beq.n	80033e8 <setvbuf+0x64>
 80033e2:	4638      	mov	r0, r7
 80033e4:	f000 fbec 	bl	8003bc0 <_free_r>
 80033e8:	2300      	movs	r3, #0
 80033ea:	6363      	str	r3, [r4, #52]	; 0x34
 80033ec:	2300      	movs	r3, #0
 80033ee:	61a3      	str	r3, [r4, #24]
 80033f0:	6063      	str	r3, [r4, #4]
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	0619      	lsls	r1, r3, #24
 80033f6:	d503      	bpl.n	8003400 <setvbuf+0x7c>
 80033f8:	6921      	ldr	r1, [r4, #16]
 80033fa:	4638      	mov	r0, r7
 80033fc:	f000 fbe0 	bl	8003bc0 <_free_r>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	f1b8 0f02 	cmp.w	r8, #2
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	d06c      	beq.n	80034ec <setvbuf+0x168>
 8003412:	ab01      	add	r3, sp, #4
 8003414:	466a      	mov	r2, sp
 8003416:	4621      	mov	r1, r4
 8003418:	4638      	mov	r0, r7
 800341a:	f000 fb64 	bl	8003ae6 <__swhatbuf_r>
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	4318      	orrs	r0, r3
 8003422:	81a0      	strh	r0, [r4, #12]
 8003424:	2d00      	cmp	r5, #0
 8003426:	d130      	bne.n	800348a <setvbuf+0x106>
 8003428:	9d00      	ldr	r5, [sp, #0]
 800342a:	4628      	mov	r0, r5
 800342c:	f000 fbc0 	bl	8003bb0 <malloc>
 8003430:	4606      	mov	r6, r0
 8003432:	2800      	cmp	r0, #0
 8003434:	d155      	bne.n	80034e2 <setvbuf+0x15e>
 8003436:	f8dd 9000 	ldr.w	r9, [sp]
 800343a:	45a9      	cmp	r9, r5
 800343c:	d14a      	bne.n	80034d4 <setvbuf+0x150>
 800343e:	f04f 35ff 	mov.w	r5, #4294967295
 8003442:	2200      	movs	r2, #0
 8003444:	60a2      	str	r2, [r4, #8]
 8003446:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800344a:	6022      	str	r2, [r4, #0]
 800344c:	6122      	str	r2, [r4, #16]
 800344e:	2201      	movs	r2, #1
 8003450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003454:	6162      	str	r2, [r4, #20]
 8003456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	07d2      	lsls	r2, r2, #31
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	d405      	bmi.n	800346e <setvbuf+0xea>
 8003462:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003466:	d102      	bne.n	800346e <setvbuf+0xea>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 fb3b 	bl	8003ae4 <__retarget_lock_release_recursive>
 800346e:	4628      	mov	r0, r5
 8003470:	b003      	add	sp, #12
 8003472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <setvbuf+0x184>)
 8003478:	429c      	cmp	r4, r3
 800347a:	d101      	bne.n	8003480 <setvbuf+0xfc>
 800347c:	68bc      	ldr	r4, [r7, #8]
 800347e:	e793      	b.n	80033a8 <setvbuf+0x24>
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <setvbuf+0x188>)
 8003482:	429c      	cmp	r4, r3
 8003484:	bf08      	it	eq
 8003486:	68fc      	ldreq	r4, [r7, #12]
 8003488:	e78e      	b.n	80033a8 <setvbuf+0x24>
 800348a:	2e00      	cmp	r6, #0
 800348c:	d0cd      	beq.n	800342a <setvbuf+0xa6>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	b913      	cbnz	r3, 8003498 <setvbuf+0x114>
 8003492:	4638      	mov	r0, r7
 8003494:	f000 fa6a 	bl	800396c <__sinit>
 8003498:	f1b8 0f01 	cmp.w	r8, #1
 800349c:	bf08      	it	eq
 800349e:	89a3      	ldrheq	r3, [r4, #12]
 80034a0:	6026      	str	r6, [r4, #0]
 80034a2:	bf04      	itt	eq
 80034a4:	f043 0301 	orreq.w	r3, r3, #1
 80034a8:	81a3      	strheq	r3, [r4, #12]
 80034aa:	89a2      	ldrh	r2, [r4, #12]
 80034ac:	f012 0308 	ands.w	r3, r2, #8
 80034b0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80034b4:	d01c      	beq.n	80034f0 <setvbuf+0x16c>
 80034b6:	07d3      	lsls	r3, r2, #31
 80034b8:	bf41      	itttt	mi
 80034ba:	2300      	movmi	r3, #0
 80034bc:	426d      	negmi	r5, r5
 80034be:	60a3      	strmi	r3, [r4, #8]
 80034c0:	61a5      	strmi	r5, [r4, #24]
 80034c2:	bf58      	it	pl
 80034c4:	60a5      	strpl	r5, [r4, #8]
 80034c6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80034c8:	f015 0501 	ands.w	r5, r5, #1
 80034cc:	d115      	bne.n	80034fa <setvbuf+0x176>
 80034ce:	f412 7f00 	tst.w	r2, #512	; 0x200
 80034d2:	e7c8      	b.n	8003466 <setvbuf+0xe2>
 80034d4:	4648      	mov	r0, r9
 80034d6:	f000 fb6b 	bl	8003bb0 <malloc>
 80034da:	4606      	mov	r6, r0
 80034dc:	2800      	cmp	r0, #0
 80034de:	d0ae      	beq.n	800343e <setvbuf+0xba>
 80034e0:	464d      	mov	r5, r9
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	e7d0      	b.n	800348e <setvbuf+0x10a>
 80034ec:	2500      	movs	r5, #0
 80034ee:	e7a8      	b.n	8003442 <setvbuf+0xbe>
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	e7e8      	b.n	80034c6 <setvbuf+0x142>
 80034f4:	f04f 35ff 	mov.w	r5, #4294967295
 80034f8:	e7b9      	b.n	800346e <setvbuf+0xea>
 80034fa:	2500      	movs	r5, #0
 80034fc:	e7b7      	b.n	800346e <setvbuf+0xea>
 80034fe:	bf00      	nop
 8003500:	2000000c 	.word	0x2000000c
 8003504:	08005334 	.word	0x08005334
 8003508:	08005354 	.word	0x08005354
 800350c:	08005314 	.word	0x08005314

08003510 <__utoa>:
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	4c1f      	ldr	r4, [pc, #124]	; (8003590 <__utoa+0x80>)
 8003514:	b08b      	sub	sp, #44	; 0x2c
 8003516:	4605      	mov	r5, r0
 8003518:	460b      	mov	r3, r1
 800351a:	466e      	mov	r6, sp
 800351c:	f104 0c20 	add.w	ip, r4, #32
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	6861      	ldr	r1, [r4, #4]
 8003524:	4637      	mov	r7, r6
 8003526:	c703      	stmia	r7!, {r0, r1}
 8003528:	3408      	adds	r4, #8
 800352a:	4564      	cmp	r4, ip
 800352c:	463e      	mov	r6, r7
 800352e:	d1f7      	bne.n	8003520 <__utoa+0x10>
 8003530:	7921      	ldrb	r1, [r4, #4]
 8003532:	7139      	strb	r1, [r7, #4]
 8003534:	1e91      	subs	r1, r2, #2
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	6038      	str	r0, [r7, #0]
 800353a:	2922      	cmp	r1, #34	; 0x22
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	d904      	bls.n	800354c <__utoa+0x3c>
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	460b      	mov	r3, r1
 8003546:	4618      	mov	r0, r3
 8003548:	b00b      	add	sp, #44	; 0x2c
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354c:	1e58      	subs	r0, r3, #1
 800354e:	4684      	mov	ip, r0
 8003550:	fbb5 f7f2 	udiv	r7, r5, r2
 8003554:	fb02 5617 	mls	r6, r2, r7, r5
 8003558:	3628      	adds	r6, #40	; 0x28
 800355a:	446e      	add	r6, sp
 800355c:	460c      	mov	r4, r1
 800355e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003562:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003566:	462e      	mov	r6, r5
 8003568:	42b2      	cmp	r2, r6
 800356a:	f101 0101 	add.w	r1, r1, #1
 800356e:	463d      	mov	r5, r7
 8003570:	d9ee      	bls.n	8003550 <__utoa+0x40>
 8003572:	2200      	movs	r2, #0
 8003574:	545a      	strb	r2, [r3, r1]
 8003576:	1919      	adds	r1, r3, r4
 8003578:	1aa5      	subs	r5, r4, r2
 800357a:	42aa      	cmp	r2, r5
 800357c:	dae3      	bge.n	8003546 <__utoa+0x36>
 800357e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003582:	780e      	ldrb	r6, [r1, #0]
 8003584:	7006      	strb	r6, [r0, #0]
 8003586:	3201      	adds	r2, #1
 8003588:	f801 5901 	strb.w	r5, [r1], #-1
 800358c:	e7f4      	b.n	8003578 <__utoa+0x68>
 800358e:	bf00      	nop
 8003590:	080052ec 	.word	0x080052ec

08003594 <__swbuf_r>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	4614      	mov	r4, r2
 800359a:	4605      	mov	r5, r0
 800359c:	b118      	cbz	r0, 80035a6 <__swbuf_r+0x12>
 800359e:	6983      	ldr	r3, [r0, #24]
 80035a0:	b90b      	cbnz	r3, 80035a6 <__swbuf_r+0x12>
 80035a2:	f000 f9e3 	bl	800396c <__sinit>
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <__swbuf_r+0x98>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	d12b      	bne.n	8003604 <__swbuf_r+0x70>
 80035ac:	686c      	ldr	r4, [r5, #4]
 80035ae:	69a3      	ldr	r3, [r4, #24]
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	071a      	lsls	r2, r3, #28
 80035b6:	d52f      	bpl.n	8003618 <__swbuf_r+0x84>
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	b36b      	cbz	r3, 8003618 <__swbuf_r+0x84>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	1ac0      	subs	r0, r0, r3
 80035c2:	6963      	ldr	r3, [r4, #20]
 80035c4:	b2f6      	uxtb	r6, r6
 80035c6:	4283      	cmp	r3, r0
 80035c8:	4637      	mov	r7, r6
 80035ca:	dc04      	bgt.n	80035d6 <__swbuf_r+0x42>
 80035cc:	4621      	mov	r1, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 f926 	bl	8003820 <_fflush_r>
 80035d4:	bb30      	cbnz	r0, 8003624 <__swbuf_r+0x90>
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60a3      	str	r3, [r4, #8]
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	701e      	strb	r6, [r3, #0]
 80035e4:	6963      	ldr	r3, [r4, #20]
 80035e6:	3001      	adds	r0, #1
 80035e8:	4283      	cmp	r3, r0
 80035ea:	d004      	beq.n	80035f6 <__swbuf_r+0x62>
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	07db      	lsls	r3, r3, #31
 80035f0:	d506      	bpl.n	8003600 <__swbuf_r+0x6c>
 80035f2:	2e0a      	cmp	r6, #10
 80035f4:	d104      	bne.n	8003600 <__swbuf_r+0x6c>
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f911 	bl	8003820 <_fflush_r>
 80035fe:	b988      	cbnz	r0, 8003624 <__swbuf_r+0x90>
 8003600:	4638      	mov	r0, r7
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <__swbuf_r+0x9c>)
 8003606:	429c      	cmp	r4, r3
 8003608:	d101      	bne.n	800360e <__swbuf_r+0x7a>
 800360a:	68ac      	ldr	r4, [r5, #8]
 800360c:	e7cf      	b.n	80035ae <__swbuf_r+0x1a>
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <__swbuf_r+0xa0>)
 8003610:	429c      	cmp	r4, r3
 8003612:	bf08      	it	eq
 8003614:	68ec      	ldreq	r4, [r5, #12]
 8003616:	e7ca      	b.n	80035ae <__swbuf_r+0x1a>
 8003618:	4621      	mov	r1, r4
 800361a:	4628      	mov	r0, r5
 800361c:	f000 f80c 	bl	8003638 <__swsetup_r>
 8003620:	2800      	cmp	r0, #0
 8003622:	d0cb      	beq.n	80035bc <__swbuf_r+0x28>
 8003624:	f04f 37ff 	mov.w	r7, #4294967295
 8003628:	e7ea      	b.n	8003600 <__swbuf_r+0x6c>
 800362a:	bf00      	nop
 800362c:	08005334 	.word	0x08005334
 8003630:	08005354 	.word	0x08005354
 8003634:	08005314 	.word	0x08005314

08003638 <__swsetup_r>:
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <__swsetup_r+0xcc>)
 800363a:	b570      	push	{r4, r5, r6, lr}
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	4606      	mov	r6, r0
 8003640:	460c      	mov	r4, r1
 8003642:	b125      	cbz	r5, 800364e <__swsetup_r+0x16>
 8003644:	69ab      	ldr	r3, [r5, #24]
 8003646:	b913      	cbnz	r3, 800364e <__swsetup_r+0x16>
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f98f 	bl	800396c <__sinit>
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <__swsetup_r+0xd0>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d10f      	bne.n	8003674 <__swsetup_r+0x3c>
 8003654:	686c      	ldr	r4, [r5, #4]
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800365c:	0719      	lsls	r1, r3, #28
 800365e:	d42c      	bmi.n	80036ba <__swsetup_r+0x82>
 8003660:	06dd      	lsls	r5, r3, #27
 8003662:	d411      	bmi.n	8003688 <__swsetup_r+0x50>
 8003664:	2309      	movs	r3, #9
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	e03e      	b.n	80036f2 <__swsetup_r+0xba>
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <__swsetup_r+0xd4>)
 8003676:	429c      	cmp	r4, r3
 8003678:	d101      	bne.n	800367e <__swsetup_r+0x46>
 800367a:	68ac      	ldr	r4, [r5, #8]
 800367c:	e7eb      	b.n	8003656 <__swsetup_r+0x1e>
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <__swsetup_r+0xd8>)
 8003680:	429c      	cmp	r4, r3
 8003682:	bf08      	it	eq
 8003684:	68ec      	ldreq	r4, [r5, #12]
 8003686:	e7e6      	b.n	8003656 <__swsetup_r+0x1e>
 8003688:	0758      	lsls	r0, r3, #29
 800368a:	d512      	bpl.n	80036b2 <__swsetup_r+0x7a>
 800368c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800368e:	b141      	cbz	r1, 80036a2 <__swsetup_r+0x6a>
 8003690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003694:	4299      	cmp	r1, r3
 8003696:	d002      	beq.n	800369e <__swsetup_r+0x66>
 8003698:	4630      	mov	r0, r6
 800369a:	f000 fa91 	bl	8003bc0 <_free_r>
 800369e:	2300      	movs	r3, #0
 80036a0:	6363      	str	r3, [r4, #52]	; 0x34
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b94b      	cbnz	r3, 80036d2 <__swsetup_r+0x9a>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d003      	beq.n	80036d2 <__swsetup_r+0x9a>
 80036ca:	4621      	mov	r1, r4
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 fa2f 	bl	8003b30 <__smakebuf_r>
 80036d2:	89a0      	ldrh	r0, [r4, #12]
 80036d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d8:	f010 0301 	ands.w	r3, r0, #1
 80036dc:	d00a      	beq.n	80036f4 <__swsetup_r+0xbc>
 80036de:	2300      	movs	r3, #0
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6963      	ldr	r3, [r4, #20]
 80036e4:	425b      	negs	r3, r3
 80036e6:	61a3      	str	r3, [r4, #24]
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	b943      	cbnz	r3, 80036fe <__swsetup_r+0xc6>
 80036ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036f0:	d1ba      	bne.n	8003668 <__swsetup_r+0x30>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	0781      	lsls	r1, r0, #30
 80036f6:	bf58      	it	pl
 80036f8:	6963      	ldrpl	r3, [r4, #20]
 80036fa:	60a3      	str	r3, [r4, #8]
 80036fc:	e7f4      	b.n	80036e8 <__swsetup_r+0xb0>
 80036fe:	2000      	movs	r0, #0
 8003700:	e7f7      	b.n	80036f2 <__swsetup_r+0xba>
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c
 8003708:	08005334 	.word	0x08005334
 800370c:	08005354 	.word	0x08005354
 8003710:	08005314 	.word	0x08005314

08003714 <__sflush_r>:
 8003714:	898a      	ldrh	r2, [r1, #12]
 8003716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371a:	4605      	mov	r5, r0
 800371c:	0710      	lsls	r0, r2, #28
 800371e:	460c      	mov	r4, r1
 8003720:	d458      	bmi.n	80037d4 <__sflush_r+0xc0>
 8003722:	684b      	ldr	r3, [r1, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	dc05      	bgt.n	8003734 <__sflush_r+0x20>
 8003728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc02      	bgt.n	8003734 <__sflush_r+0x20>
 800372e:	2000      	movs	r0, #0
 8003730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003736:	2e00      	cmp	r6, #0
 8003738:	d0f9      	beq.n	800372e <__sflush_r+0x1a>
 800373a:	2300      	movs	r3, #0
 800373c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003740:	682f      	ldr	r7, [r5, #0]
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	d032      	beq.n	80037ac <__sflush_r+0x98>
 8003746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	075a      	lsls	r2, r3, #29
 800374c:	d505      	bpl.n	800375a <__sflush_r+0x46>
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	1ac0      	subs	r0, r0, r3
 8003752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003754:	b10b      	cbz	r3, 800375a <__sflush_r+0x46>
 8003756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003758:	1ac0      	subs	r0, r0, r3
 800375a:	2300      	movs	r3, #0
 800375c:	4602      	mov	r2, r0
 800375e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003760:	6a21      	ldr	r1, [r4, #32]
 8003762:	4628      	mov	r0, r5
 8003764:	47b0      	blx	r6
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	d106      	bne.n	800377a <__sflush_r+0x66>
 800376c:	6829      	ldr	r1, [r5, #0]
 800376e:	291d      	cmp	r1, #29
 8003770:	d82c      	bhi.n	80037cc <__sflush_r+0xb8>
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <__sflush_r+0x108>)
 8003774:	40ca      	lsrs	r2, r1
 8003776:	07d6      	lsls	r6, r2, #31
 8003778:	d528      	bpl.n	80037cc <__sflush_r+0xb8>
 800377a:	2200      	movs	r2, #0
 800377c:	6062      	str	r2, [r4, #4]
 800377e:	04d9      	lsls	r1, r3, #19
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	6022      	str	r2, [r4, #0]
 8003784:	d504      	bpl.n	8003790 <__sflush_r+0x7c>
 8003786:	1c42      	adds	r2, r0, #1
 8003788:	d101      	bne.n	800378e <__sflush_r+0x7a>
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	b903      	cbnz	r3, 8003790 <__sflush_r+0x7c>
 800378e:	6560      	str	r0, [r4, #84]	; 0x54
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	602f      	str	r7, [r5, #0]
 8003794:	2900      	cmp	r1, #0
 8003796:	d0ca      	beq.n	800372e <__sflush_r+0x1a>
 8003798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800379c:	4299      	cmp	r1, r3
 800379e:	d002      	beq.n	80037a6 <__sflush_r+0x92>
 80037a0:	4628      	mov	r0, r5
 80037a2:	f000 fa0d 	bl	8003bc0 <_free_r>
 80037a6:	2000      	movs	r0, #0
 80037a8:	6360      	str	r0, [r4, #52]	; 0x34
 80037aa:	e7c1      	b.n	8003730 <__sflush_r+0x1c>
 80037ac:	6a21      	ldr	r1, [r4, #32]
 80037ae:	2301      	movs	r3, #1
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b0      	blx	r6
 80037b4:	1c41      	adds	r1, r0, #1
 80037b6:	d1c7      	bne.n	8003748 <__sflush_r+0x34>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0c4      	beq.n	8003748 <__sflush_r+0x34>
 80037be:	2b1d      	cmp	r3, #29
 80037c0:	d001      	beq.n	80037c6 <__sflush_r+0xb2>
 80037c2:	2b16      	cmp	r3, #22
 80037c4:	d101      	bne.n	80037ca <__sflush_r+0xb6>
 80037c6:	602f      	str	r7, [r5, #0]
 80037c8:	e7b1      	b.n	800372e <__sflush_r+0x1a>
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	e7ad      	b.n	8003730 <__sflush_r+0x1c>
 80037d4:	690f      	ldr	r7, [r1, #16]
 80037d6:	2f00      	cmp	r7, #0
 80037d8:	d0a9      	beq.n	800372e <__sflush_r+0x1a>
 80037da:	0793      	lsls	r3, r2, #30
 80037dc:	680e      	ldr	r6, [r1, #0]
 80037de:	bf08      	it	eq
 80037e0:	694b      	ldreq	r3, [r1, #20]
 80037e2:	600f      	str	r7, [r1, #0]
 80037e4:	bf18      	it	ne
 80037e6:	2300      	movne	r3, #0
 80037e8:	eba6 0807 	sub.w	r8, r6, r7
 80037ec:	608b      	str	r3, [r1, #8]
 80037ee:	f1b8 0f00 	cmp.w	r8, #0
 80037f2:	dd9c      	ble.n	800372e <__sflush_r+0x1a>
 80037f4:	6a21      	ldr	r1, [r4, #32]
 80037f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037f8:	4643      	mov	r3, r8
 80037fa:	463a      	mov	r2, r7
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b0      	blx	r6
 8003800:	2800      	cmp	r0, #0
 8003802:	dc06      	bgt.n	8003812 <__sflush_r+0xfe>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	e78e      	b.n	8003730 <__sflush_r+0x1c>
 8003812:	4407      	add	r7, r0
 8003814:	eba8 0800 	sub.w	r8, r8, r0
 8003818:	e7e9      	b.n	80037ee <__sflush_r+0xda>
 800381a:	bf00      	nop
 800381c:	20400001 	.word	0x20400001

08003820 <_fflush_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	690b      	ldr	r3, [r1, #16]
 8003824:	4605      	mov	r5, r0
 8003826:	460c      	mov	r4, r1
 8003828:	b913      	cbnz	r3, 8003830 <_fflush_r+0x10>
 800382a:	2500      	movs	r5, #0
 800382c:	4628      	mov	r0, r5
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	b118      	cbz	r0, 800383a <_fflush_r+0x1a>
 8003832:	6983      	ldr	r3, [r0, #24]
 8003834:	b90b      	cbnz	r3, 800383a <_fflush_r+0x1a>
 8003836:	f000 f899 	bl	800396c <__sinit>
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <_fflush_r+0x6c>)
 800383c:	429c      	cmp	r4, r3
 800383e:	d11b      	bne.n	8003878 <_fflush_r+0x58>
 8003840:	686c      	ldr	r4, [r5, #4]
 8003842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ef      	beq.n	800382a <_fflush_r+0xa>
 800384a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800384c:	07d0      	lsls	r0, r2, #31
 800384e:	d404      	bmi.n	800385a <_fflush_r+0x3a>
 8003850:	0599      	lsls	r1, r3, #22
 8003852:	d402      	bmi.n	800385a <_fflush_r+0x3a>
 8003854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003856:	f000 f944 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 800385a:	4628      	mov	r0, r5
 800385c:	4621      	mov	r1, r4
 800385e:	f7ff ff59 	bl	8003714 <__sflush_r>
 8003862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003864:	07da      	lsls	r2, r3, #31
 8003866:	4605      	mov	r5, r0
 8003868:	d4e0      	bmi.n	800382c <_fflush_r+0xc>
 800386a:	89a3      	ldrh	r3, [r4, #12]
 800386c:	059b      	lsls	r3, r3, #22
 800386e:	d4dd      	bmi.n	800382c <_fflush_r+0xc>
 8003870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003872:	f000 f937 	bl	8003ae4 <__retarget_lock_release_recursive>
 8003876:	e7d9      	b.n	800382c <_fflush_r+0xc>
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <_fflush_r+0x70>)
 800387a:	429c      	cmp	r4, r3
 800387c:	d101      	bne.n	8003882 <_fflush_r+0x62>
 800387e:	68ac      	ldr	r4, [r5, #8]
 8003880:	e7df      	b.n	8003842 <_fflush_r+0x22>
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <_fflush_r+0x74>)
 8003884:	429c      	cmp	r4, r3
 8003886:	bf08      	it	eq
 8003888:	68ec      	ldreq	r4, [r5, #12]
 800388a:	e7da      	b.n	8003842 <_fflush_r+0x22>
 800388c:	08005334 	.word	0x08005334
 8003890:	08005354 	.word	0x08005354
 8003894:	08005314 	.word	0x08005314

08003898 <fflush>:
 8003898:	4601      	mov	r1, r0
 800389a:	b920      	cbnz	r0, 80038a6 <fflush+0xe>
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <fflush+0x18>)
 800389e:	4905      	ldr	r1, [pc, #20]	; (80038b4 <fflush+0x1c>)
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	f000 b8fe 	b.w	8003aa2 <_fwalk_reent>
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <fflush+0x20>)
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f7ff bfb9 	b.w	8003820 <_fflush_r>
 80038ae:	bf00      	nop
 80038b0:	080052e8 	.word	0x080052e8
 80038b4:	08003821 	.word	0x08003821
 80038b8:	2000000c 	.word	0x2000000c

080038bc <std>:
 80038bc:	2300      	movs	r3, #0
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
 80038c2:	e9c0 3300 	strd	r3, r3, [r0]
 80038c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ca:	6083      	str	r3, [r0, #8]
 80038cc:	8181      	strh	r1, [r0, #12]
 80038ce:	6643      	str	r3, [r0, #100]	; 0x64
 80038d0:	81c2      	strh	r2, [r0, #14]
 80038d2:	6183      	str	r3, [r0, #24]
 80038d4:	4619      	mov	r1, r3
 80038d6:	2208      	movs	r2, #8
 80038d8:	305c      	adds	r0, #92	; 0x5c
 80038da:	f7ff fca5 	bl	8003228 <memset>
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <std+0x38>)
 80038e0:	6263      	str	r3, [r4, #36]	; 0x24
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <std+0x3c>)
 80038e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <std+0x40>)
 80038e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <std+0x44>)
 80038ec:	6224      	str	r4, [r4, #32]
 80038ee:	6323      	str	r3, [r4, #48]	; 0x30
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	bf00      	nop
 80038f4:	08004b55 	.word	0x08004b55
 80038f8:	08004b77 	.word	0x08004b77
 80038fc:	08004baf 	.word	0x08004baf
 8003900:	08004bd3 	.word	0x08004bd3

08003904 <_cleanup_r>:
 8003904:	4901      	ldr	r1, [pc, #4]	; (800390c <_cleanup_r+0x8>)
 8003906:	f000 b8cc 	b.w	8003aa2 <_fwalk_reent>
 800390a:	bf00      	nop
 800390c:	08003821 	.word	0x08003821

08003910 <__sfmoreglue>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	2268      	movs	r2, #104	; 0x68
 8003914:	1e4d      	subs	r5, r1, #1
 8003916:	4355      	muls	r5, r2
 8003918:	460e      	mov	r6, r1
 800391a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800391e:	f000 f9bb 	bl	8003c98 <_malloc_r>
 8003922:	4604      	mov	r4, r0
 8003924:	b140      	cbz	r0, 8003938 <__sfmoreglue+0x28>
 8003926:	2100      	movs	r1, #0
 8003928:	e9c0 1600 	strd	r1, r6, [r0]
 800392c:	300c      	adds	r0, #12
 800392e:	60a0      	str	r0, [r4, #8]
 8003930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003934:	f7ff fc78 	bl	8003228 <memset>
 8003938:	4620      	mov	r0, r4
 800393a:	bd70      	pop	{r4, r5, r6, pc}

0800393c <__sfp_lock_acquire>:
 800393c:	4801      	ldr	r0, [pc, #4]	; (8003944 <__sfp_lock_acquire+0x8>)
 800393e:	f000 b8d0 	b.w	8003ae2 <__retarget_lock_acquire_recursive>
 8003942:	bf00      	nop
 8003944:	20000121 	.word	0x20000121

08003948 <__sfp_lock_release>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__sfp_lock_release+0x8>)
 800394a:	f000 b8cb 	b.w	8003ae4 <__retarget_lock_release_recursive>
 800394e:	bf00      	nop
 8003950:	20000121 	.word	0x20000121

08003954 <__sinit_lock_acquire>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__sinit_lock_acquire+0x8>)
 8003956:	f000 b8c4 	b.w	8003ae2 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	20000122 	.word	0x20000122

08003960 <__sinit_lock_release>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__sinit_lock_release+0x8>)
 8003962:	f000 b8bf 	b.w	8003ae4 <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	20000122 	.word	0x20000122

0800396c <__sinit>:
 800396c:	b510      	push	{r4, lr}
 800396e:	4604      	mov	r4, r0
 8003970:	f7ff fff0 	bl	8003954 <__sinit_lock_acquire>
 8003974:	69a3      	ldr	r3, [r4, #24]
 8003976:	b11b      	cbz	r3, 8003980 <__sinit+0x14>
 8003978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397c:	f7ff bff0 	b.w	8003960 <__sinit_lock_release>
 8003980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003984:	6523      	str	r3, [r4, #80]	; 0x50
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <__sinit+0x68>)
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <__sinit+0x6c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	62a2      	str	r2, [r4, #40]	; 0x28
 800398e:	42a3      	cmp	r3, r4
 8003990:	bf04      	itt	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	61a3      	streq	r3, [r4, #24]
 8003996:	4620      	mov	r0, r4
 8003998:	f000 f820 	bl	80039dc <__sfp>
 800399c:	6060      	str	r0, [r4, #4]
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 f81c 	bl	80039dc <__sfp>
 80039a4:	60a0      	str	r0, [r4, #8]
 80039a6:	4620      	mov	r0, r4
 80039a8:	f000 f818 	bl	80039dc <__sfp>
 80039ac:	2200      	movs	r2, #0
 80039ae:	60e0      	str	r0, [r4, #12]
 80039b0:	2104      	movs	r1, #4
 80039b2:	6860      	ldr	r0, [r4, #4]
 80039b4:	f7ff ff82 	bl	80038bc <std>
 80039b8:	68a0      	ldr	r0, [r4, #8]
 80039ba:	2201      	movs	r2, #1
 80039bc:	2109      	movs	r1, #9
 80039be:	f7ff ff7d 	bl	80038bc <std>
 80039c2:	68e0      	ldr	r0, [r4, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	2112      	movs	r1, #18
 80039c8:	f7ff ff78 	bl	80038bc <std>
 80039cc:	2301      	movs	r3, #1
 80039ce:	61a3      	str	r3, [r4, #24]
 80039d0:	e7d2      	b.n	8003978 <__sinit+0xc>
 80039d2:	bf00      	nop
 80039d4:	080052e8 	.word	0x080052e8
 80039d8:	08003905 	.word	0x08003905

080039dc <__sfp>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	4607      	mov	r7, r0
 80039e0:	f7ff ffac 	bl	800393c <__sfp_lock_acquire>
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <__sfp+0x84>)
 80039e6:	681e      	ldr	r6, [r3, #0]
 80039e8:	69b3      	ldr	r3, [r6, #24]
 80039ea:	b913      	cbnz	r3, 80039f2 <__sfp+0x16>
 80039ec:	4630      	mov	r0, r6
 80039ee:	f7ff ffbd 	bl	800396c <__sinit>
 80039f2:	3648      	adds	r6, #72	; 0x48
 80039f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	d503      	bpl.n	8003a04 <__sfp+0x28>
 80039fc:	6833      	ldr	r3, [r6, #0]
 80039fe:	b30b      	cbz	r3, 8003a44 <__sfp+0x68>
 8003a00:	6836      	ldr	r6, [r6, #0]
 8003a02:	e7f7      	b.n	80039f4 <__sfp+0x18>
 8003a04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a08:	b9d5      	cbnz	r5, 8003a40 <__sfp+0x64>
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <__sfp+0x88>)
 8003a0c:	60e3      	str	r3, [r4, #12]
 8003a0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a12:	6665      	str	r5, [r4, #100]	; 0x64
 8003a14:	f000 f864 	bl	8003ae0 <__retarget_lock_init_recursive>
 8003a18:	f7ff ff96 	bl	8003948 <__sfp_lock_release>
 8003a1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a24:	6025      	str	r5, [r4, #0]
 8003a26:	61a5      	str	r5, [r4, #24]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a30:	f7ff fbfa 	bl	8003228 <memset>
 8003a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a40:	3468      	adds	r4, #104	; 0x68
 8003a42:	e7d9      	b.n	80039f8 <__sfp+0x1c>
 8003a44:	2104      	movs	r1, #4
 8003a46:	4638      	mov	r0, r7
 8003a48:	f7ff ff62 	bl	8003910 <__sfmoreglue>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	6030      	str	r0, [r6, #0]
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d1d5      	bne.n	8003a00 <__sfp+0x24>
 8003a54:	f7ff ff78 	bl	8003948 <__sfp_lock_release>
 8003a58:	230c      	movs	r3, #12
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	e7ee      	b.n	8003a3c <__sfp+0x60>
 8003a5e:	bf00      	nop
 8003a60:	080052e8 	.word	0x080052e8
 8003a64:	ffff0001 	.word	0xffff0001

08003a68 <_fwalk>:
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a72:	2600      	movs	r6, #0
 8003a74:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003a78:	f1b8 0801 	subs.w	r8, r8, #1
 8003a7c:	d505      	bpl.n	8003a8a <_fwalk+0x22>
 8003a7e:	6824      	ldr	r4, [r4, #0]
 8003a80:	2c00      	cmp	r4, #0
 8003a82:	d1f7      	bne.n	8003a74 <_fwalk+0xc>
 8003a84:	4630      	mov	r0, r6
 8003a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a8a:	89ab      	ldrh	r3, [r5, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d906      	bls.n	8003a9e <_fwalk+0x36>
 8003a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a94:	3301      	adds	r3, #1
 8003a96:	d002      	beq.n	8003a9e <_fwalk+0x36>
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b8      	blx	r7
 8003a9c:	4306      	orrs	r6, r0
 8003a9e:	3568      	adds	r5, #104	; 0x68
 8003aa0:	e7ea      	b.n	8003a78 <_fwalk+0x10>

08003aa2 <_fwalk_reent>:
 8003aa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	4688      	mov	r8, r1
 8003aaa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aae:	2700      	movs	r7, #0
 8003ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ab8:	d505      	bpl.n	8003ac6 <_fwalk_reent+0x24>
 8003aba:	6824      	ldr	r4, [r4, #0]
 8003abc:	2c00      	cmp	r4, #0
 8003abe:	d1f7      	bne.n	8003ab0 <_fwalk_reent+0xe>
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d907      	bls.n	8003adc <_fwalk_reent+0x3a>
 8003acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	d003      	beq.n	8003adc <_fwalk_reent+0x3a>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	47c0      	blx	r8
 8003ada:	4307      	orrs	r7, r0
 8003adc:	3568      	adds	r5, #104	; 0x68
 8003ade:	e7e9      	b.n	8003ab4 <_fwalk_reent+0x12>

08003ae0 <__retarget_lock_init_recursive>:
 8003ae0:	4770      	bx	lr

08003ae2 <__retarget_lock_acquire_recursive>:
 8003ae2:	4770      	bx	lr

08003ae4 <__retarget_lock_release_recursive>:
 8003ae4:	4770      	bx	lr

08003ae6 <__swhatbuf_r>:
 8003ae6:	b570      	push	{r4, r5, r6, lr}
 8003ae8:	460e      	mov	r6, r1
 8003aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aee:	2900      	cmp	r1, #0
 8003af0:	b096      	sub	sp, #88	; 0x58
 8003af2:	4614      	mov	r4, r2
 8003af4:	461d      	mov	r5, r3
 8003af6:	da08      	bge.n	8003b0a <__swhatbuf_r+0x24>
 8003af8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	602a      	str	r2, [r5, #0]
 8003b00:	061a      	lsls	r2, r3, #24
 8003b02:	d410      	bmi.n	8003b26 <__swhatbuf_r+0x40>
 8003b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b08:	e00e      	b.n	8003b28 <__swhatbuf_r+0x42>
 8003b0a:	466a      	mov	r2, sp
 8003b0c:	f001 fa52 	bl	8004fb4 <_fstat_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dbf1      	blt.n	8003af8 <__swhatbuf_r+0x12>
 8003b14:	9a01      	ldr	r2, [sp, #4]
 8003b16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b1e:	425a      	negs	r2, r3
 8003b20:	415a      	adcs	r2, r3
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	e7ee      	b.n	8003b04 <__swhatbuf_r+0x1e>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	b016      	add	sp, #88	; 0x58
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}

08003b30 <__smakebuf_r>:
 8003b30:	898b      	ldrh	r3, [r1, #12]
 8003b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b34:	079d      	lsls	r5, r3, #30
 8003b36:	4606      	mov	r6, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	d507      	bpl.n	8003b4c <__smakebuf_r+0x1c>
 8003b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	6123      	str	r3, [r4, #16]
 8003b44:	2301      	movs	r3, #1
 8003b46:	6163      	str	r3, [r4, #20]
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	ab01      	add	r3, sp, #4
 8003b4e:	466a      	mov	r2, sp
 8003b50:	f7ff ffc9 	bl	8003ae6 <__swhatbuf_r>
 8003b54:	9900      	ldr	r1, [sp, #0]
 8003b56:	4605      	mov	r5, r0
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f000 f89d 	bl	8003c98 <_malloc_r>
 8003b5e:	b948      	cbnz	r0, 8003b74 <__smakebuf_r+0x44>
 8003b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b64:	059a      	lsls	r2, r3, #22
 8003b66:	d4ef      	bmi.n	8003b48 <__smakebuf_r+0x18>
 8003b68:	f023 0303 	bic.w	r3, r3, #3
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	e7e3      	b.n	8003b3c <__smakebuf_r+0xc>
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <__smakebuf_r+0x7c>)
 8003b76:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	6020      	str	r0, [r4, #0]
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	9b00      	ldr	r3, [sp, #0]
 8003b84:	6163      	str	r3, [r4, #20]
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	6120      	str	r0, [r4, #16]
 8003b8a:	b15b      	cbz	r3, 8003ba4 <__smakebuf_r+0x74>
 8003b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b90:	4630      	mov	r0, r6
 8003b92:	f001 fa21 	bl	8004fd8 <_isatty_r>
 8003b96:	b128      	cbz	r0, 8003ba4 <__smakebuf_r+0x74>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	89a0      	ldrh	r0, [r4, #12]
 8003ba6:	4305      	orrs	r5, r0
 8003ba8:	81a5      	strh	r5, [r4, #12]
 8003baa:	e7cd      	b.n	8003b48 <__smakebuf_r+0x18>
 8003bac:	08003905 	.word	0x08003905

08003bb0 <malloc>:
 8003bb0:	4b02      	ldr	r3, [pc, #8]	; (8003bbc <malloc+0xc>)
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	f000 b86f 	b.w	8003c98 <_malloc_r>
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <_free_r>:
 8003bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bc2:	2900      	cmp	r1, #0
 8003bc4:	d044      	beq.n	8003c50 <_free_r+0x90>
 8003bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bca:	9001      	str	r0, [sp, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f1a1 0404 	sub.w	r4, r1, #4
 8003bd2:	bfb8      	it	lt
 8003bd4:	18e4      	addlt	r4, r4, r3
 8003bd6:	f001 fa2f 	bl	8005038 <__malloc_lock>
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <_free_r+0x94>)
 8003bdc:	9801      	ldr	r0, [sp, #4]
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	b933      	cbnz	r3, 8003bf0 <_free_r+0x30>
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	6014      	str	r4, [r2, #0]
 8003be6:	b003      	add	sp, #12
 8003be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bec:	f001 ba2a 	b.w	8005044 <__malloc_unlock>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d908      	bls.n	8003c06 <_free_r+0x46>
 8003bf4:	6825      	ldr	r5, [r4, #0]
 8003bf6:	1961      	adds	r1, r4, r5
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	bf01      	itttt	eq
 8003bfc:	6819      	ldreq	r1, [r3, #0]
 8003bfe:	685b      	ldreq	r3, [r3, #4]
 8003c00:	1949      	addeq	r1, r1, r5
 8003c02:	6021      	streq	r1, [r4, #0]
 8003c04:	e7ed      	b.n	8003be2 <_free_r+0x22>
 8003c06:	461a      	mov	r2, r3
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b10b      	cbz	r3, 8003c10 <_free_r+0x50>
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d9fa      	bls.n	8003c06 <_free_r+0x46>
 8003c10:	6811      	ldr	r1, [r2, #0]
 8003c12:	1855      	adds	r5, r2, r1
 8003c14:	42a5      	cmp	r5, r4
 8003c16:	d10b      	bne.n	8003c30 <_free_r+0x70>
 8003c18:	6824      	ldr	r4, [r4, #0]
 8003c1a:	4421      	add	r1, r4
 8003c1c:	1854      	adds	r4, r2, r1
 8003c1e:	42a3      	cmp	r3, r4
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	d1e0      	bne.n	8003be6 <_free_r+0x26>
 8003c24:	681c      	ldr	r4, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6053      	str	r3, [r2, #4]
 8003c2a:	4421      	add	r1, r4
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	e7da      	b.n	8003be6 <_free_r+0x26>
 8003c30:	d902      	bls.n	8003c38 <_free_r+0x78>
 8003c32:	230c      	movs	r3, #12
 8003c34:	6003      	str	r3, [r0, #0]
 8003c36:	e7d6      	b.n	8003be6 <_free_r+0x26>
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	1961      	adds	r1, r4, r5
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf04      	itt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	bf04      	itt	eq
 8003c48:	1949      	addeq	r1, r1, r5
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	6054      	str	r4, [r2, #4]
 8003c4e:	e7ca      	b.n	8003be6 <_free_r+0x26>
 8003c50:	b003      	add	sp, #12
 8003c52:	bd30      	pop	{r4, r5, pc}
 8003c54:	20000124 	.word	0x20000124

08003c58 <sbrk_aligned>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	4e0e      	ldr	r6, [pc, #56]	; (8003c94 <sbrk_aligned+0x3c>)
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	6831      	ldr	r1, [r6, #0]
 8003c60:	4605      	mov	r5, r0
 8003c62:	b911      	cbnz	r1, 8003c6a <sbrk_aligned+0x12>
 8003c64:	f000 ff2e 	bl	8004ac4 <_sbrk_r>
 8003c68:	6030      	str	r0, [r6, #0]
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 ff29 	bl	8004ac4 <_sbrk_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d00a      	beq.n	8003c8c <sbrk_aligned+0x34>
 8003c76:	1cc4      	adds	r4, r0, #3
 8003c78:	f024 0403 	bic.w	r4, r4, #3
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d007      	beq.n	8003c90 <sbrk_aligned+0x38>
 8003c80:	1a21      	subs	r1, r4, r0
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 ff1e 	bl	8004ac4 <_sbrk_r>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d101      	bne.n	8003c90 <sbrk_aligned+0x38>
 8003c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c90:	4620      	mov	r0, r4
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	20000128 	.word	0x20000128

08003c98 <_malloc_r>:
 8003c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9c:	1ccd      	adds	r5, r1, #3
 8003c9e:	f025 0503 	bic.w	r5, r5, #3
 8003ca2:	3508      	adds	r5, #8
 8003ca4:	2d0c      	cmp	r5, #12
 8003ca6:	bf38      	it	cc
 8003ca8:	250c      	movcc	r5, #12
 8003caa:	2d00      	cmp	r5, #0
 8003cac:	4607      	mov	r7, r0
 8003cae:	db01      	blt.n	8003cb4 <_malloc_r+0x1c>
 8003cb0:	42a9      	cmp	r1, r5
 8003cb2:	d905      	bls.n	8003cc0 <_malloc_r+0x28>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	2600      	movs	r6, #0
 8003cba:	4630      	mov	r0, r6
 8003cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc0:	4e2e      	ldr	r6, [pc, #184]	; (8003d7c <_malloc_r+0xe4>)
 8003cc2:	f001 f9b9 	bl	8005038 <__malloc_lock>
 8003cc6:	6833      	ldr	r3, [r6, #0]
 8003cc8:	461c      	mov	r4, r3
 8003cca:	bb34      	cbnz	r4, 8003d1a <_malloc_r+0x82>
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f7ff ffc2 	bl	8003c58 <sbrk_aligned>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	d14d      	bne.n	8003d76 <_malloc_r+0xde>
 8003cda:	6834      	ldr	r4, [r6, #0]
 8003cdc:	4626      	mov	r6, r4
 8003cde:	2e00      	cmp	r6, #0
 8003ce0:	d140      	bne.n	8003d64 <_malloc_r+0xcc>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	eb04 0803 	add.w	r8, r4, r3
 8003cec:	f000 feea 	bl	8004ac4 <_sbrk_r>
 8003cf0:	4580      	cmp	r8, r0
 8003cf2:	d13a      	bne.n	8003d6a <_malloc_r+0xd2>
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	3503      	adds	r5, #3
 8003cf8:	1a6d      	subs	r5, r5, r1
 8003cfa:	f025 0503 	bic.w	r5, r5, #3
 8003cfe:	3508      	adds	r5, #8
 8003d00:	2d0c      	cmp	r5, #12
 8003d02:	bf38      	it	cc
 8003d04:	250c      	movcc	r5, #12
 8003d06:	4629      	mov	r1, r5
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f7ff ffa5 	bl	8003c58 <sbrk_aligned>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d02b      	beq.n	8003d6a <_malloc_r+0xd2>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	442b      	add	r3, r5
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	e00e      	b.n	8003d38 <_malloc_r+0xa0>
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	1b52      	subs	r2, r2, r5
 8003d1e:	d41e      	bmi.n	8003d5e <_malloc_r+0xc6>
 8003d20:	2a0b      	cmp	r2, #11
 8003d22:	d916      	bls.n	8003d52 <_malloc_r+0xba>
 8003d24:	1961      	adds	r1, r4, r5
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	6025      	str	r5, [r4, #0]
 8003d2a:	bf18      	it	ne
 8003d2c:	6059      	strne	r1, [r3, #4]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	bf08      	it	eq
 8003d32:	6031      	streq	r1, [r6, #0]
 8003d34:	5162      	str	r2, [r4, r5]
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	4638      	mov	r0, r7
 8003d3a:	f104 060b 	add.w	r6, r4, #11
 8003d3e:	f001 f981 	bl	8005044 <__malloc_unlock>
 8003d42:	f026 0607 	bic.w	r6, r6, #7
 8003d46:	1d23      	adds	r3, r4, #4
 8003d48:	1af2      	subs	r2, r6, r3
 8003d4a:	d0b6      	beq.n	8003cba <_malloc_r+0x22>
 8003d4c:	1b9b      	subs	r3, r3, r6
 8003d4e:	50a3      	str	r3, [r4, r2]
 8003d50:	e7b3      	b.n	8003cba <_malloc_r+0x22>
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	bf0c      	ite	eq
 8003d58:	6032      	streq	r2, [r6, #0]
 8003d5a:	605a      	strne	r2, [r3, #4]
 8003d5c:	e7ec      	b.n	8003d38 <_malloc_r+0xa0>
 8003d5e:	4623      	mov	r3, r4
 8003d60:	6864      	ldr	r4, [r4, #4]
 8003d62:	e7b2      	b.n	8003cca <_malloc_r+0x32>
 8003d64:	4634      	mov	r4, r6
 8003d66:	6876      	ldr	r6, [r6, #4]
 8003d68:	e7b9      	b.n	8003cde <_malloc_r+0x46>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4638      	mov	r0, r7
 8003d70:	f001 f968 	bl	8005044 <__malloc_unlock>
 8003d74:	e7a1      	b.n	8003cba <_malloc_r+0x22>
 8003d76:	6025      	str	r5, [r4, #0]
 8003d78:	e7de      	b.n	8003d38 <_malloc_r+0xa0>
 8003d7a:	bf00      	nop
 8003d7c:	20000124 	.word	0x20000124

08003d80 <__sfputc_r>:
 8003d80:	6893      	ldr	r3, [r2, #8]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	b410      	push	{r4}
 8003d88:	6093      	str	r3, [r2, #8]
 8003d8a:	da08      	bge.n	8003d9e <__sfputc_r+0x1e>
 8003d8c:	6994      	ldr	r4, [r2, #24]
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	db01      	blt.n	8003d96 <__sfputc_r+0x16>
 8003d92:	290a      	cmp	r1, #10
 8003d94:	d103      	bne.n	8003d9e <__sfputc_r+0x1e>
 8003d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d9a:	f7ff bbfb 	b.w	8003594 <__swbuf_r>
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	1c58      	adds	r0, r3, #1
 8003da2:	6010      	str	r0, [r2, #0]
 8003da4:	7019      	strb	r1, [r3, #0]
 8003da6:	4608      	mov	r0, r1
 8003da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <__sfputs_r>:
 8003dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db0:	4606      	mov	r6, r0
 8003db2:	460f      	mov	r7, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	18d5      	adds	r5, r2, r3
 8003db8:	42ac      	cmp	r4, r5
 8003dba:	d101      	bne.n	8003dc0 <__sfputs_r+0x12>
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	e007      	b.n	8003dd0 <__sfputs_r+0x22>
 8003dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc4:	463a      	mov	r2, r7
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7ff ffda 	bl	8003d80 <__sfputc_r>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d1f3      	bne.n	8003db8 <__sfputs_r+0xa>
 8003dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dd4 <_vfiprintf_r>:
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	460d      	mov	r5, r1
 8003dda:	b09d      	sub	sp, #116	; 0x74
 8003ddc:	4614      	mov	r4, r2
 8003dde:	4698      	mov	r8, r3
 8003de0:	4606      	mov	r6, r0
 8003de2:	b118      	cbz	r0, 8003dec <_vfiprintf_r+0x18>
 8003de4:	6983      	ldr	r3, [r0, #24]
 8003de6:	b90b      	cbnz	r3, 8003dec <_vfiprintf_r+0x18>
 8003de8:	f7ff fdc0 	bl	800396c <__sinit>
 8003dec:	4b89      	ldr	r3, [pc, #548]	; (8004014 <_vfiprintf_r+0x240>)
 8003dee:	429d      	cmp	r5, r3
 8003df0:	d11b      	bne.n	8003e2a <_vfiprintf_r+0x56>
 8003df2:	6875      	ldr	r5, [r6, #4]
 8003df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003df6:	07d9      	lsls	r1, r3, #31
 8003df8:	d405      	bmi.n	8003e06 <_vfiprintf_r+0x32>
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	059a      	lsls	r2, r3, #22
 8003dfe:	d402      	bmi.n	8003e06 <_vfiprintf_r+0x32>
 8003e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e02:	f7ff fe6e 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	d501      	bpl.n	8003e10 <_vfiprintf_r+0x3c>
 8003e0c:	692b      	ldr	r3, [r5, #16]
 8003e0e:	b9eb      	cbnz	r3, 8003e4c <_vfiprintf_r+0x78>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7ff fc10 	bl	8003638 <__swsetup_r>
 8003e18:	b1c0      	cbz	r0, 8003e4c <_vfiprintf_r+0x78>
 8003e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e1c:	07dc      	lsls	r4, r3, #31
 8003e1e:	d50e      	bpl.n	8003e3e <_vfiprintf_r+0x6a>
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	b01d      	add	sp, #116	; 0x74
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <_vfiprintf_r+0x244>)
 8003e2c:	429d      	cmp	r5, r3
 8003e2e:	d101      	bne.n	8003e34 <_vfiprintf_r+0x60>
 8003e30:	68b5      	ldr	r5, [r6, #8]
 8003e32:	e7df      	b.n	8003df4 <_vfiprintf_r+0x20>
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <_vfiprintf_r+0x248>)
 8003e36:	429d      	cmp	r5, r3
 8003e38:	bf08      	it	eq
 8003e3a:	68f5      	ldreq	r5, [r6, #12]
 8003e3c:	e7da      	b.n	8003df4 <_vfiprintf_r+0x20>
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	0598      	lsls	r0, r3, #22
 8003e42:	d4ed      	bmi.n	8003e20 <_vfiprintf_r+0x4c>
 8003e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e46:	f7ff fe4d 	bl	8003ae4 <__retarget_lock_release_recursive>
 8003e4a:	e7e9      	b.n	8003e20 <_vfiprintf_r+0x4c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e50:	2320      	movs	r3, #32
 8003e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e5a:	2330      	movs	r3, #48	; 0x30
 8003e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004020 <_vfiprintf_r+0x24c>
 8003e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e64:	f04f 0901 	mov.w	r9, #1
 8003e68:	4623      	mov	r3, r4
 8003e6a:	469a      	mov	sl, r3
 8003e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e70:	b10a      	cbz	r2, 8003e76 <_vfiprintf_r+0xa2>
 8003e72:	2a25      	cmp	r2, #37	; 0x25
 8003e74:	d1f9      	bne.n	8003e6a <_vfiprintf_r+0x96>
 8003e76:	ebba 0b04 	subs.w	fp, sl, r4
 8003e7a:	d00b      	beq.n	8003e94 <_vfiprintf_r+0xc0>
 8003e7c:	465b      	mov	r3, fp
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff ff93 	bl	8003dae <__sfputs_r>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f000 80aa 	beq.w	8003fe2 <_vfiprintf_r+0x20e>
 8003e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e90:	445a      	add	r2, fp
 8003e92:	9209      	str	r2, [sp, #36]	; 0x24
 8003e94:	f89a 3000 	ldrb.w	r3, [sl]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a2 	beq.w	8003fe2 <_vfiprintf_r+0x20e>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ea8:	f10a 0a01 	add.w	sl, sl, #1
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	9307      	str	r3, [sp, #28]
 8003eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8003eb6:	4654      	mov	r4, sl
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebe:	4858      	ldr	r0, [pc, #352]	; (8004020 <_vfiprintf_r+0x24c>)
 8003ec0:	f7fc f9be 	bl	8000240 <memchr>
 8003ec4:	9a04      	ldr	r2, [sp, #16]
 8003ec6:	b9d8      	cbnz	r0, 8003f00 <_vfiprintf_r+0x12c>
 8003ec8:	06d1      	lsls	r1, r2, #27
 8003eca:	bf44      	itt	mi
 8003ecc:	2320      	movmi	r3, #32
 8003ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed2:	0713      	lsls	r3, r2, #28
 8003ed4:	bf44      	itt	mi
 8003ed6:	232b      	movmi	r3, #43	; 0x2b
 8003ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003edc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee2:	d015      	beq.n	8003f10 <_vfiprintf_r+0x13c>
 8003ee4:	9a07      	ldr	r2, [sp, #28]
 8003ee6:	4654      	mov	r4, sl
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f04f 0c0a 	mov.w	ip, #10
 8003eee:	4621      	mov	r1, r4
 8003ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef4:	3b30      	subs	r3, #48	; 0x30
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d94e      	bls.n	8003f98 <_vfiprintf_r+0x1c4>
 8003efa:	b1b0      	cbz	r0, 8003f2a <_vfiprintf_r+0x156>
 8003efc:	9207      	str	r2, [sp, #28]
 8003efe:	e014      	b.n	8003f2a <_vfiprintf_r+0x156>
 8003f00:	eba0 0308 	sub.w	r3, r0, r8
 8003f04:	fa09 f303 	lsl.w	r3, r9, r3
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	46a2      	mov	sl, r4
 8003f0e:	e7d2      	b.n	8003eb6 <_vfiprintf_r+0xe2>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d19      	adds	r1, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9103      	str	r1, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfbb      	ittet	lt
 8003f1c:	425b      	neglt	r3, r3
 8003f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f22:	9307      	strge	r3, [sp, #28]
 8003f24:	9307      	strlt	r3, [sp, #28]
 8003f26:	bfb8      	it	lt
 8003f28:	9204      	strlt	r2, [sp, #16]
 8003f2a:	7823      	ldrb	r3, [r4, #0]
 8003f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f2e:	d10c      	bne.n	8003f4a <_vfiprintf_r+0x176>
 8003f30:	7863      	ldrb	r3, [r4, #1]
 8003f32:	2b2a      	cmp	r3, #42	; 0x2a
 8003f34:	d135      	bne.n	8003fa2 <_vfiprintf_r+0x1ce>
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	9203      	str	r2, [sp, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfb8      	it	lt
 8003f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f46:	3402      	adds	r4, #2
 8003f48:	9305      	str	r3, [sp, #20]
 8003f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004030 <_vfiprintf_r+0x25c>
 8003f4e:	7821      	ldrb	r1, [r4, #0]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4650      	mov	r0, sl
 8003f54:	f7fc f974 	bl	8000240 <memchr>
 8003f58:	b140      	cbz	r0, 8003f6c <_vfiprintf_r+0x198>
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	eba0 000a 	sub.w	r0, r0, sl
 8003f60:	fa03 f000 	lsl.w	r0, r3, r0
 8003f64:	9b04      	ldr	r3, [sp, #16]
 8003f66:	4303      	orrs	r3, r0
 8003f68:	3401      	adds	r4, #1
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f70:	482c      	ldr	r0, [pc, #176]	; (8004024 <_vfiprintf_r+0x250>)
 8003f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f76:	2206      	movs	r2, #6
 8003f78:	f7fc f962 	bl	8000240 <memchr>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d03f      	beq.n	8004000 <_vfiprintf_r+0x22c>
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <_vfiprintf_r+0x254>)
 8003f82:	bb1b      	cbnz	r3, 8003fcc <_vfiprintf_r+0x1f8>
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	3307      	adds	r3, #7
 8003f88:	f023 0307 	bic.w	r3, r3, #7
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f92:	443b      	add	r3, r7
 8003f94:	9309      	str	r3, [sp, #36]	; 0x24
 8003f96:	e767      	b.n	8003e68 <_vfiprintf_r+0x94>
 8003f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	e7a5      	b.n	8003eee <_vfiprintf_r+0x11a>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	3401      	adds	r4, #1
 8003fa6:	9305      	str	r3, [sp, #20]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f04f 0c0a 	mov.w	ip, #10
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb4:	3a30      	subs	r2, #48	; 0x30
 8003fb6:	2a09      	cmp	r2, #9
 8003fb8:	d903      	bls.n	8003fc2 <_vfiprintf_r+0x1ee>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0c5      	beq.n	8003f4a <_vfiprintf_r+0x176>
 8003fbe:	9105      	str	r1, [sp, #20]
 8003fc0:	e7c3      	b.n	8003f4a <_vfiprintf_r+0x176>
 8003fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e7f0      	b.n	8003fae <_vfiprintf_r+0x1da>
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <_vfiprintf_r+0x258>)
 8003fd4:	a904      	add	r1, sp, #16
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	4607      	mov	r7, r0
 8003fde:	1c78      	adds	r0, r7, #1
 8003fe0:	d1d6      	bne.n	8003f90 <_vfiprintf_r+0x1bc>
 8003fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fe4:	07d9      	lsls	r1, r3, #31
 8003fe6:	d405      	bmi.n	8003ff4 <_vfiprintf_r+0x220>
 8003fe8:	89ab      	ldrh	r3, [r5, #12]
 8003fea:	059a      	lsls	r2, r3, #22
 8003fec:	d402      	bmi.n	8003ff4 <_vfiprintf_r+0x220>
 8003fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ff0:	f7ff fd78 	bl	8003ae4 <__retarget_lock_release_recursive>
 8003ff4:	89ab      	ldrh	r3, [r5, #12]
 8003ff6:	065b      	lsls	r3, r3, #25
 8003ff8:	f53f af12 	bmi.w	8003e20 <_vfiprintf_r+0x4c>
 8003ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ffe:	e711      	b.n	8003e24 <_vfiprintf_r+0x50>
 8004000:	ab03      	add	r3, sp, #12
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	462a      	mov	r2, r5
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <_vfiprintf_r+0x258>)
 8004008:	a904      	add	r1, sp, #16
 800400a:	4630      	mov	r0, r6
 800400c:	f000 f880 	bl	8004110 <_printf_i>
 8004010:	e7e4      	b.n	8003fdc <_vfiprintf_r+0x208>
 8004012:	bf00      	nop
 8004014:	08005334 	.word	0x08005334
 8004018:	08005354 	.word	0x08005354
 800401c:	08005314 	.word	0x08005314
 8004020:	08005374 	.word	0x08005374
 8004024:	0800537e 	.word	0x0800537e
 8004028:	00000000 	.word	0x00000000
 800402c:	08003daf 	.word	0x08003daf
 8004030:	0800537a 	.word	0x0800537a

08004034 <_printf_common>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4616      	mov	r6, r2
 800403a:	4699      	mov	r9, r3
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004044:	4293      	cmp	r3, r2
 8004046:	bfb8      	it	lt
 8004048:	4613      	movlt	r3, r2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004050:	4607      	mov	r7, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b10a      	cbz	r2, 800405a <_printf_common+0x26>
 8004056:	3301      	adds	r3, #1
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	6833      	ldrmi	r3, [r6, #0]
 8004062:	3302      	addmi	r3, #2
 8004064:	6033      	strmi	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	f015 0506 	ands.w	r5, r5, #6
 800406c:	d106      	bne.n	800407c <_printf_common+0x48>
 800406e:	f104 0a19 	add.w	sl, r4, #25
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	42ab      	cmp	r3, r5
 800407a:	dc26      	bgt.n	80040ca <_printf_common+0x96>
 800407c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004080:	1e13      	subs	r3, r2, #0
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	bf18      	it	ne
 8004086:	2301      	movne	r3, #1
 8004088:	0692      	lsls	r2, r2, #26
 800408a:	d42b      	bmi.n	80040e4 <_printf_common+0xb0>
 800408c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004090:	4649      	mov	r1, r9
 8004092:	4638      	mov	r0, r7
 8004094:	47c0      	blx	r8
 8004096:	3001      	adds	r0, #1
 8004098:	d01e      	beq.n	80040d8 <_printf_common+0xa4>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	68e5      	ldr	r5, [r4, #12]
 800409e:	6832      	ldr	r2, [r6, #0]
 80040a0:	f003 0306 	and.w	r3, r3, #6
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	bf08      	it	eq
 80040a8:	1aad      	subeq	r5, r5, r2
 80040aa:	68a3      	ldr	r3, [r4, #8]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	bf0c      	ite	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	2500      	movne	r5, #0
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bfc4      	itt	gt
 80040ba:	1a9b      	subgt	r3, r3, r2
 80040bc:	18ed      	addgt	r5, r5, r3
 80040be:	2600      	movs	r6, #0
 80040c0:	341a      	adds	r4, #26
 80040c2:	42b5      	cmp	r5, r6
 80040c4:	d11a      	bne.n	80040fc <_printf_common+0xc8>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e008      	b.n	80040dc <_printf_common+0xa8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4649      	mov	r1, r9
 80040d0:	4638      	mov	r0, r7
 80040d2:	47c0      	blx	r8
 80040d4:	3001      	adds	r0, #1
 80040d6:	d103      	bne.n	80040e0 <_printf_common+0xac>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	3501      	adds	r5, #1
 80040e2:	e7c6      	b.n	8004072 <_printf_common+0x3e>
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	2030      	movs	r0, #48	; 0x30
 80040ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ee:	4422      	add	r2, r4
 80040f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7c7      	b.n	800408c <_printf_common+0x58>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4622      	mov	r2, r4
 8004100:	4649      	mov	r1, r9
 8004102:	4638      	mov	r0, r7
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d0e6      	beq.n	80040d8 <_printf_common+0xa4>
 800410a:	3601      	adds	r6, #1
 800410c:	e7d9      	b.n	80040c2 <_printf_common+0x8e>
	...

08004110 <_printf_i>:
 8004110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	7e0f      	ldrb	r7, [r1, #24]
 8004116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004118:	2f78      	cmp	r7, #120	; 0x78
 800411a:	4691      	mov	r9, r2
 800411c:	4680      	mov	r8, r0
 800411e:	460c      	mov	r4, r1
 8004120:	469a      	mov	sl, r3
 8004122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004126:	d807      	bhi.n	8004138 <_printf_i+0x28>
 8004128:	2f62      	cmp	r7, #98	; 0x62
 800412a:	d80a      	bhi.n	8004142 <_printf_i+0x32>
 800412c:	2f00      	cmp	r7, #0
 800412e:	f000 80d8 	beq.w	80042e2 <_printf_i+0x1d2>
 8004132:	2f58      	cmp	r7, #88	; 0x58
 8004134:	f000 80a3 	beq.w	800427e <_printf_i+0x16e>
 8004138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800413c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004140:	e03a      	b.n	80041b8 <_printf_i+0xa8>
 8004142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004146:	2b15      	cmp	r3, #21
 8004148:	d8f6      	bhi.n	8004138 <_printf_i+0x28>
 800414a:	a101      	add	r1, pc, #4	; (adr r1, 8004150 <_printf_i+0x40>)
 800414c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004139 	.word	0x08004139
 800415c:	08004139 	.word	0x08004139
 8004160:	08004139 	.word	0x08004139
 8004164:	08004139 	.word	0x08004139
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004139 	.word	0x08004139
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	080042c9 	.word	0x080042c9
 8004180:	080041ed 	.word	0x080041ed
 8004184:	080042ab 	.word	0x080042ab
 8004188:	08004139 	.word	0x08004139
 800418c:	08004139 	.word	0x08004139
 8004190:	080042eb 	.word	0x080042eb
 8004194:	08004139 	.word	0x08004139
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004139 	.word	0x08004139
 80041a0:	08004139 	.word	0x08004139
 80041a4:	080042b3 	.word	0x080042b3
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	602a      	str	r2, [r5, #0]
 80041b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0a3      	b.n	8004304 <_printf_i+0x1f4>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	6829      	ldr	r1, [r5, #0]
 80041c0:	0606      	lsls	r6, r0, #24
 80041c2:	f101 0304 	add.w	r3, r1, #4
 80041c6:	d50a      	bpl.n	80041de <_printf_i+0xce>
 80041c8:	680e      	ldr	r6, [r1, #0]
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	2e00      	cmp	r6, #0
 80041ce:	da03      	bge.n	80041d8 <_printf_i+0xc8>
 80041d0:	232d      	movs	r3, #45	; 0x2d
 80041d2:	4276      	negs	r6, r6
 80041d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d8:	485e      	ldr	r0, [pc, #376]	; (8004354 <_printf_i+0x244>)
 80041da:	230a      	movs	r3, #10
 80041dc:	e019      	b.n	8004212 <_printf_i+0x102>
 80041de:	680e      	ldr	r6, [r1, #0]
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041e6:	bf18      	it	ne
 80041e8:	b236      	sxthne	r6, r6
 80041ea:	e7ef      	b.n	80041cc <_printf_i+0xbc>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6029      	str	r1, [r5, #0]
 80041f4:	0601      	lsls	r1, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xec>
 80041f8:	681e      	ldr	r6, [r3, #0]
 80041fa:	e002      	b.n	8004202 <_printf_i+0xf2>
 80041fc:	0646      	lsls	r6, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xe8>
 8004200:	881e      	ldrh	r6, [r3, #0]
 8004202:	4854      	ldr	r0, [pc, #336]	; (8004354 <_printf_i+0x244>)
 8004204:	2f6f      	cmp	r7, #111	; 0x6f
 8004206:	bf0c      	ite	eq
 8004208:	2308      	moveq	r3, #8
 800420a:	230a      	movne	r3, #10
 800420c:	2100      	movs	r1, #0
 800420e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004212:	6865      	ldr	r5, [r4, #4]
 8004214:	60a5      	str	r5, [r4, #8]
 8004216:	2d00      	cmp	r5, #0
 8004218:	bfa2      	ittt	ge
 800421a:	6821      	ldrge	r1, [r4, #0]
 800421c:	f021 0104 	bicge.w	r1, r1, #4
 8004220:	6021      	strge	r1, [r4, #0]
 8004222:	b90e      	cbnz	r6, 8004228 <_printf_i+0x118>
 8004224:	2d00      	cmp	r5, #0
 8004226:	d04d      	beq.n	80042c4 <_printf_i+0x1b4>
 8004228:	4615      	mov	r5, r2
 800422a:	fbb6 f1f3 	udiv	r1, r6, r3
 800422e:	fb03 6711 	mls	r7, r3, r1, r6
 8004232:	5dc7      	ldrb	r7, [r0, r7]
 8004234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004238:	4637      	mov	r7, r6
 800423a:	42bb      	cmp	r3, r7
 800423c:	460e      	mov	r6, r1
 800423e:	d9f4      	bls.n	800422a <_printf_i+0x11a>
 8004240:	2b08      	cmp	r3, #8
 8004242:	d10b      	bne.n	800425c <_printf_i+0x14c>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	07de      	lsls	r6, r3, #31
 8004248:	d508      	bpl.n	800425c <_printf_i+0x14c>
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	6861      	ldr	r1, [r4, #4]
 800424e:	4299      	cmp	r1, r3
 8004250:	bfde      	ittt	le
 8004252:	2330      	movle	r3, #48	; 0x30
 8004254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800425c:	1b52      	subs	r2, r2, r5
 800425e:	6122      	str	r2, [r4, #16]
 8004260:	f8cd a000 	str.w	sl, [sp]
 8004264:	464b      	mov	r3, r9
 8004266:	aa03      	add	r2, sp, #12
 8004268:	4621      	mov	r1, r4
 800426a:	4640      	mov	r0, r8
 800426c:	f7ff fee2 	bl	8004034 <_printf_common>
 8004270:	3001      	adds	r0, #1
 8004272:	d14c      	bne.n	800430e <_printf_i+0x1fe>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b004      	add	sp, #16
 800427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427e:	4835      	ldr	r0, [pc, #212]	; (8004354 <_printf_i+0x244>)
 8004280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004284:	6829      	ldr	r1, [r5, #0]
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	f851 6b04 	ldr.w	r6, [r1], #4
 800428c:	6029      	str	r1, [r5, #0]
 800428e:	061d      	lsls	r5, r3, #24
 8004290:	d514      	bpl.n	80042bc <_printf_i+0x1ac>
 8004292:	07df      	lsls	r7, r3, #31
 8004294:	bf44      	itt	mi
 8004296:	f043 0320 	orrmi.w	r3, r3, #32
 800429a:	6023      	strmi	r3, [r4, #0]
 800429c:	b91e      	cbnz	r6, 80042a6 <_printf_i+0x196>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	f023 0320 	bic.w	r3, r3, #32
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2310      	movs	r3, #16
 80042a8:	e7b0      	b.n	800420c <_printf_i+0xfc>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	2378      	movs	r3, #120	; 0x78
 80042b4:	4828      	ldr	r0, [pc, #160]	; (8004358 <_printf_i+0x248>)
 80042b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ba:	e7e3      	b.n	8004284 <_printf_i+0x174>
 80042bc:	0659      	lsls	r1, r3, #25
 80042be:	bf48      	it	mi
 80042c0:	b2b6      	uxthmi	r6, r6
 80042c2:	e7e6      	b.n	8004292 <_printf_i+0x182>
 80042c4:	4615      	mov	r5, r2
 80042c6:	e7bb      	b.n	8004240 <_printf_i+0x130>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	6826      	ldr	r6, [r4, #0]
 80042cc:	6961      	ldr	r1, [r4, #20]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	6028      	str	r0, [r5, #0]
 80042d2:	0635      	lsls	r5, r6, #24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	d501      	bpl.n	80042dc <_printf_i+0x1cc>
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	e002      	b.n	80042e2 <_printf_i+0x1d2>
 80042dc:	0670      	lsls	r0, r6, #25
 80042de:	d5fb      	bpl.n	80042d8 <_printf_i+0x1c8>
 80042e0:	8019      	strh	r1, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	4615      	mov	r5, r2
 80042e8:	e7ba      	b.n	8004260 <_printf_i+0x150>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	602a      	str	r2, [r5, #0]
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7fb ffa2 	bl	8000240 <memchr>
 80042fc:	b108      	cbz	r0, 8004302 <_printf_i+0x1f2>
 80042fe:	1b40      	subs	r0, r0, r5
 8004300:	6060      	str	r0, [r4, #4]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	2300      	movs	r3, #0
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430c:	e7a8      	b.n	8004260 <_printf_i+0x150>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	462a      	mov	r2, r5
 8004312:	4649      	mov	r1, r9
 8004314:	4640      	mov	r0, r8
 8004316:	47d0      	blx	sl
 8004318:	3001      	adds	r0, #1
 800431a:	d0ab      	beq.n	8004274 <_printf_i+0x164>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	079b      	lsls	r3, r3, #30
 8004320:	d413      	bmi.n	800434a <_printf_i+0x23a>
 8004322:	68e0      	ldr	r0, [r4, #12]
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	4298      	cmp	r0, r3
 8004328:	bfb8      	it	lt
 800432a:	4618      	movlt	r0, r3
 800432c:	e7a4      	b.n	8004278 <_printf_i+0x168>
 800432e:	2301      	movs	r3, #1
 8004330:	4632      	mov	r2, r6
 8004332:	4649      	mov	r1, r9
 8004334:	4640      	mov	r0, r8
 8004336:	47d0      	blx	sl
 8004338:	3001      	adds	r0, #1
 800433a:	d09b      	beq.n	8004274 <_printf_i+0x164>
 800433c:	3501      	adds	r5, #1
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	9903      	ldr	r1, [sp, #12]
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	42ab      	cmp	r3, r5
 8004346:	dcf2      	bgt.n	800432e <_printf_i+0x21e>
 8004348:	e7eb      	b.n	8004322 <_printf_i+0x212>
 800434a:	2500      	movs	r5, #0
 800434c:	f104 0619 	add.w	r6, r4, #25
 8004350:	e7f5      	b.n	800433e <_printf_i+0x22e>
 8004352:	bf00      	nop
 8004354:	08005385 	.word	0x08005385
 8004358:	08005396 	.word	0x08005396

0800435c <__svfiscanf_r>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	461d      	mov	r5, r3
 8004362:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004364:	07df      	lsls	r7, r3, #31
 8004366:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800436a:	4606      	mov	r6, r0
 800436c:	460c      	mov	r4, r1
 800436e:	4692      	mov	sl, r2
 8004370:	d405      	bmi.n	800437e <__svfiscanf_r+0x22>
 8004372:	898b      	ldrh	r3, [r1, #12]
 8004374:	0598      	lsls	r0, r3, #22
 8004376:	d402      	bmi.n	800437e <__svfiscanf_r+0x22>
 8004378:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800437a:	f7ff fbb2 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 800437e:	2300      	movs	r3, #0
 8004380:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004384:	4ba6      	ldr	r3, [pc, #664]	; (8004620 <__svfiscanf_r+0x2c4>)
 8004386:	93a0      	str	r3, [sp, #640]	; 0x280
 8004388:	f10d 0804 	add.w	r8, sp, #4
 800438c:	4ba5      	ldr	r3, [pc, #660]	; (8004624 <__svfiscanf_r+0x2c8>)
 800438e:	4fa6      	ldr	r7, [pc, #664]	; (8004628 <__svfiscanf_r+0x2cc>)
 8004390:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800462c <__svfiscanf_r+0x2d0>
 8004394:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004398:	93a1      	str	r3, [sp, #644]	; 0x284
 800439a:	9500      	str	r5, [sp, #0]
 800439c:	f89a 3000 	ldrb.w	r3, [sl]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8173 	beq.w	800468c <__svfiscanf_r+0x330>
 80043a6:	5dd9      	ldrb	r1, [r3, r7]
 80043a8:	f011 0108 	ands.w	r1, r1, #8
 80043ac:	f10a 0501 	add.w	r5, sl, #1
 80043b0:	d019      	beq.n	80043e6 <__svfiscanf_r+0x8a>
 80043b2:	6863      	ldr	r3, [r4, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dd0f      	ble.n	80043d8 <__svfiscanf_r+0x7c>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	5cba      	ldrb	r2, [r7, r2]
 80043be:	0711      	lsls	r1, r2, #28
 80043c0:	d401      	bmi.n	80043c6 <__svfiscanf_r+0x6a>
 80043c2:	46aa      	mov	sl, r5
 80043c4:	e7ea      	b.n	800439c <__svfiscanf_r+0x40>
 80043c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043c8:	3201      	adds	r2, #1
 80043ca:	9245      	str	r2, [sp, #276]	; 0x114
 80043cc:	6862      	ldr	r2, [r4, #4]
 80043ce:	3301      	adds	r3, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	6062      	str	r2, [r4, #4]
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	e7ec      	b.n	80043b2 <__svfiscanf_r+0x56>
 80043d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043da:	4621      	mov	r1, r4
 80043dc:	4630      	mov	r0, r6
 80043de:	4798      	blx	r3
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d0e9      	beq.n	80043b8 <__svfiscanf_r+0x5c>
 80043e4:	e7ed      	b.n	80043c2 <__svfiscanf_r+0x66>
 80043e6:	2b25      	cmp	r3, #37	; 0x25
 80043e8:	d012      	beq.n	8004410 <__svfiscanf_r+0xb4>
 80043ea:	469a      	mov	sl, r3
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f340 8095 	ble.w	800451e <__svfiscanf_r+0x1c2>
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	7813      	ldrb	r3, [r2, #0]
 80043f8:	4553      	cmp	r3, sl
 80043fa:	f040 8147 	bne.w	800468c <__svfiscanf_r+0x330>
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	3b01      	subs	r3, #1
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004406:	3201      	adds	r2, #1
 8004408:	3301      	adds	r3, #1
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	9345      	str	r3, [sp, #276]	; 0x114
 800440e:	e7d8      	b.n	80043c2 <__svfiscanf_r+0x66>
 8004410:	9141      	str	r1, [sp, #260]	; 0x104
 8004412:	9143      	str	r1, [sp, #268]	; 0x10c
 8004414:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004418:	2b2a      	cmp	r3, #42	; 0x2a
 800441a:	bf02      	ittt	eq
 800441c:	2310      	moveq	r3, #16
 800441e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004420:	f10a 0502 	addeq.w	r5, sl, #2
 8004424:	220a      	movs	r2, #10
 8004426:	46aa      	mov	sl, r5
 8004428:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800442c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004430:	2b09      	cmp	r3, #9
 8004432:	d91e      	bls.n	8004472 <__svfiscanf_r+0x116>
 8004434:	487d      	ldr	r0, [pc, #500]	; (800462c <__svfiscanf_r+0x2d0>)
 8004436:	2203      	movs	r2, #3
 8004438:	f7fb ff02 	bl	8000240 <memchr>
 800443c:	b140      	cbz	r0, 8004450 <__svfiscanf_r+0xf4>
 800443e:	2301      	movs	r3, #1
 8004440:	eba0 0009 	sub.w	r0, r0, r9
 8004444:	fa03 f000 	lsl.w	r0, r3, r0
 8004448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800444a:	4318      	orrs	r0, r3
 800444c:	9041      	str	r0, [sp, #260]	; 0x104
 800444e:	4655      	mov	r5, sl
 8004450:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004454:	2b78      	cmp	r3, #120	; 0x78
 8004456:	d807      	bhi.n	8004468 <__svfiscanf_r+0x10c>
 8004458:	2b57      	cmp	r3, #87	; 0x57
 800445a:	d811      	bhi.n	8004480 <__svfiscanf_r+0x124>
 800445c:	2b25      	cmp	r3, #37	; 0x25
 800445e:	d0c4      	beq.n	80043ea <__svfiscanf_r+0x8e>
 8004460:	d858      	bhi.n	8004514 <__svfiscanf_r+0x1b8>
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80c8 	beq.w	80045f8 <__svfiscanf_r+0x29c>
 8004468:	2303      	movs	r3, #3
 800446a:	9347      	str	r3, [sp, #284]	; 0x11c
 800446c:	230a      	movs	r3, #10
 800446e:	9342      	str	r3, [sp, #264]	; 0x108
 8004470:	e07c      	b.n	800456c <__svfiscanf_r+0x210>
 8004472:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004474:	fb02 1103 	mla	r1, r2, r3, r1
 8004478:	3930      	subs	r1, #48	; 0x30
 800447a:	9143      	str	r1, [sp, #268]	; 0x10c
 800447c:	4655      	mov	r5, sl
 800447e:	e7d2      	b.n	8004426 <__svfiscanf_r+0xca>
 8004480:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004484:	2a20      	cmp	r2, #32
 8004486:	d8ef      	bhi.n	8004468 <__svfiscanf_r+0x10c>
 8004488:	a101      	add	r1, pc, #4	; (adr r1, 8004490 <__svfiscanf_r+0x134>)
 800448a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800448e:	bf00      	nop
 8004490:	08004557 	.word	0x08004557
 8004494:	08004469 	.word	0x08004469
 8004498:	08004469 	.word	0x08004469
 800449c:	080045b5 	.word	0x080045b5
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	08004469 	.word	0x08004469
 80044b0:	08004469 	.word	0x08004469
 80044b4:	08004469 	.word	0x08004469
 80044b8:	08004469 	.word	0x08004469
 80044bc:	080045cb 	.word	0x080045cb
 80044c0:	080045a1 	.word	0x080045a1
 80044c4:	0800451b 	.word	0x0800451b
 80044c8:	0800451b 	.word	0x0800451b
 80044cc:	0800451b 	.word	0x0800451b
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045a5 	.word	0x080045a5
 80044d8:	08004469 	.word	0x08004469
 80044dc:	08004469 	.word	0x08004469
 80044e0:	08004469 	.word	0x08004469
 80044e4:	08004469 	.word	0x08004469
 80044e8:	080045db 	.word	0x080045db
 80044ec:	080045ad 	.word	0x080045ad
 80044f0:	0800454f 	.word	0x0800454f
 80044f4:	08004469 	.word	0x08004469
 80044f8:	08004469 	.word	0x08004469
 80044fc:	080045d7 	.word	0x080045d7
 8004500:	08004469 	.word	0x08004469
 8004504:	080045a1 	.word	0x080045a1
 8004508:	08004469 	.word	0x08004469
 800450c:	08004469 	.word	0x08004469
 8004510:	08004557 	.word	0x08004557
 8004514:	3b45      	subs	r3, #69	; 0x45
 8004516:	2b02      	cmp	r3, #2
 8004518:	d8a6      	bhi.n	8004468 <__svfiscanf_r+0x10c>
 800451a:	2305      	movs	r3, #5
 800451c:	e025      	b.n	800456a <__svfiscanf_r+0x20e>
 800451e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004520:	4621      	mov	r1, r4
 8004522:	4630      	mov	r0, r6
 8004524:	4798      	blx	r3
 8004526:	2800      	cmp	r0, #0
 8004528:	f43f af64 	beq.w	80043f4 <__svfiscanf_r+0x98>
 800452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452e:	07da      	lsls	r2, r3, #31
 8004530:	f140 80a4 	bpl.w	800467c <__svfiscanf_r+0x320>
 8004534:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004536:	2800      	cmp	r0, #0
 8004538:	d067      	beq.n	800460a <__svfiscanf_r+0x2ae>
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004540:	bf18      	it	ne
 8004542:	f04f 30ff 	movne.w	r0, #4294967295
 8004546:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004550:	f042 0220 	orr.w	r2, r2, #32
 8004554:	9241      	str	r2, [sp, #260]	; 0x104
 8004556:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455c:	9241      	str	r2, [sp, #260]	; 0x104
 800455e:	2210      	movs	r2, #16
 8004560:	2b6f      	cmp	r3, #111	; 0x6f
 8004562:	9242      	str	r2, [sp, #264]	; 0x108
 8004564:	bf34      	ite	cc
 8004566:	2303      	movcc	r3, #3
 8004568:	2304      	movcs	r3, #4
 800456a:	9347      	str	r3, [sp, #284]	; 0x11c
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	dd4e      	ble.n	8004610 <__svfiscanf_r+0x2b4>
 8004572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004574:	065b      	lsls	r3, r3, #25
 8004576:	d404      	bmi.n	8004582 <__svfiscanf_r+0x226>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	5cba      	ldrb	r2, [r7, r2]
 800457e:	0710      	lsls	r0, r2, #28
 8004580:	d456      	bmi.n	8004630 <__svfiscanf_r+0x2d4>
 8004582:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004584:	2b02      	cmp	r3, #2
 8004586:	dc65      	bgt.n	8004654 <__svfiscanf_r+0x2f8>
 8004588:	466b      	mov	r3, sp
 800458a:	4622      	mov	r2, r4
 800458c:	a941      	add	r1, sp, #260	; 0x104
 800458e:	4630      	mov	r0, r6
 8004590:	f000 f8b2 	bl	80046f8 <_scanf_chars>
 8004594:	2801      	cmp	r0, #1
 8004596:	d079      	beq.n	800468c <__svfiscanf_r+0x330>
 8004598:	2802      	cmp	r0, #2
 800459a:	f47f af12 	bne.w	80043c2 <__svfiscanf_r+0x66>
 800459e:	e7c5      	b.n	800452c <__svfiscanf_r+0x1d0>
 80045a0:	220a      	movs	r2, #10
 80045a2:	e7dd      	b.n	8004560 <__svfiscanf_r+0x204>
 80045a4:	2300      	movs	r3, #0
 80045a6:	9342      	str	r3, [sp, #264]	; 0x108
 80045a8:	2303      	movs	r3, #3
 80045aa:	e7de      	b.n	800456a <__svfiscanf_r+0x20e>
 80045ac:	2308      	movs	r3, #8
 80045ae:	9342      	str	r3, [sp, #264]	; 0x108
 80045b0:	2304      	movs	r3, #4
 80045b2:	e7da      	b.n	800456a <__svfiscanf_r+0x20e>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4640      	mov	r0, r8
 80045b8:	f000 fa94 	bl	8004ae4 <__sccl>
 80045bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c2:	9341      	str	r3, [sp, #260]	; 0x104
 80045c4:	4605      	mov	r5, r0
 80045c6:	2301      	movs	r3, #1
 80045c8:	e7cf      	b.n	800456a <__svfiscanf_r+0x20e>
 80045ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d0:	9341      	str	r3, [sp, #260]	; 0x104
 80045d2:	2300      	movs	r3, #0
 80045d4:	e7c9      	b.n	800456a <__svfiscanf_r+0x20e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e7c7      	b.n	800456a <__svfiscanf_r+0x20e>
 80045da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80045dc:	06c3      	lsls	r3, r0, #27
 80045de:	f53f aef0 	bmi.w	80043c2 <__svfiscanf_r+0x66>
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045e6:	1d19      	adds	r1, r3, #4
 80045e8:	9100      	str	r1, [sp, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f010 0f01 	tst.w	r0, #1
 80045f0:	bf14      	ite	ne
 80045f2:	801a      	strhne	r2, [r3, #0]
 80045f4:	601a      	streq	r2, [r3, #0]
 80045f6:	e6e4      	b.n	80043c2 <__svfiscanf_r+0x66>
 80045f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045fa:	07d8      	lsls	r0, r3, #31
 80045fc:	d405      	bmi.n	800460a <__svfiscanf_r+0x2ae>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	0599      	lsls	r1, r3, #22
 8004602:	d402      	bmi.n	800460a <__svfiscanf_r+0x2ae>
 8004604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004606:	f7ff fa6d 	bl	8003ae4 <__retarget_lock_release_recursive>
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	e79a      	b.n	8004546 <__svfiscanf_r+0x1ea>
 8004610:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004612:	4621      	mov	r1, r4
 8004614:	4630      	mov	r0, r6
 8004616:	4798      	blx	r3
 8004618:	2800      	cmp	r0, #0
 800461a:	d0aa      	beq.n	8004572 <__svfiscanf_r+0x216>
 800461c:	e786      	b.n	800452c <__svfiscanf_r+0x1d0>
 800461e:	bf00      	nop
 8004620:	08004e41 	.word	0x08004e41
 8004624:	080049b1 	.word	0x080049b1
 8004628:	080053c3 	.word	0x080053c3
 800462c:	0800537a 	.word	0x0800537a
 8004630:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004632:	3201      	adds	r2, #1
 8004634:	9245      	str	r2, [sp, #276]	; 0x114
 8004636:	6862      	ldr	r2, [r4, #4]
 8004638:	3a01      	subs	r2, #1
 800463a:	2a00      	cmp	r2, #0
 800463c:	6062      	str	r2, [r4, #4]
 800463e:	dd02      	ble.n	8004646 <__svfiscanf_r+0x2ea>
 8004640:	3301      	adds	r3, #1
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	e798      	b.n	8004578 <__svfiscanf_r+0x21c>
 8004646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004648:	4621      	mov	r1, r4
 800464a:	4630      	mov	r0, r6
 800464c:	4798      	blx	r3
 800464e:	2800      	cmp	r0, #0
 8004650:	d092      	beq.n	8004578 <__svfiscanf_r+0x21c>
 8004652:	e76b      	b.n	800452c <__svfiscanf_r+0x1d0>
 8004654:	2b04      	cmp	r3, #4
 8004656:	dc06      	bgt.n	8004666 <__svfiscanf_r+0x30a>
 8004658:	466b      	mov	r3, sp
 800465a:	4622      	mov	r2, r4
 800465c:	a941      	add	r1, sp, #260	; 0x104
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f8a4 	bl	80047ac <_scanf_i>
 8004664:	e796      	b.n	8004594 <__svfiscanf_r+0x238>
 8004666:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <__svfiscanf_r+0x348>)
 8004668:	2b00      	cmp	r3, #0
 800466a:	f43f aeaa 	beq.w	80043c2 <__svfiscanf_r+0x66>
 800466e:	466b      	mov	r3, sp
 8004670:	4622      	mov	r2, r4
 8004672:	a941      	add	r1, sp, #260	; 0x104
 8004674:	4630      	mov	r0, r6
 8004676:	f3af 8000 	nop.w
 800467a:	e78b      	b.n	8004594 <__svfiscanf_r+0x238>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	0599      	lsls	r1, r3, #22
 8004680:	f53f af58 	bmi.w	8004534 <__svfiscanf_r+0x1d8>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f7ff fa2d 	bl	8003ae4 <__retarget_lock_release_recursive>
 800468a:	e753      	b.n	8004534 <__svfiscanf_r+0x1d8>
 800468c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	d405      	bmi.n	800469e <__svfiscanf_r+0x342>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	059b      	lsls	r3, r3, #22
 8004696:	d402      	bmi.n	800469e <__svfiscanf_r+0x342>
 8004698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800469a:	f7ff fa23 	bl	8003ae4 <__retarget_lock_release_recursive>
 800469e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80046a0:	e751      	b.n	8004546 <__svfiscanf_r+0x1ea>
 80046a2:	bf00      	nop
 80046a4:	00000000 	.word	0x00000000

080046a8 <_vfiscanf_r>:
 80046a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046aa:	460c      	mov	r4, r1
 80046ac:	4605      	mov	r5, r0
 80046ae:	b138      	cbz	r0, 80046c0 <_vfiscanf_r+0x18>
 80046b0:	6981      	ldr	r1, [r0, #24]
 80046b2:	b929      	cbnz	r1, 80046c0 <_vfiscanf_r+0x18>
 80046b4:	e9cd 2300 	strd	r2, r3, [sp]
 80046b8:	f7ff f958 	bl	800396c <__sinit>
 80046bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046c0:	490a      	ldr	r1, [pc, #40]	; (80046ec <_vfiscanf_r+0x44>)
 80046c2:	428c      	cmp	r4, r1
 80046c4:	d107      	bne.n	80046d6 <_vfiscanf_r+0x2e>
 80046c6:	686c      	ldr	r4, [r5, #4]
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	b003      	add	sp, #12
 80046ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d2:	f7ff be43 	b.w	800435c <__svfiscanf_r>
 80046d6:	4906      	ldr	r1, [pc, #24]	; (80046f0 <_vfiscanf_r+0x48>)
 80046d8:	428c      	cmp	r4, r1
 80046da:	d101      	bne.n	80046e0 <_vfiscanf_r+0x38>
 80046dc:	68ac      	ldr	r4, [r5, #8]
 80046de:	e7f3      	b.n	80046c8 <_vfiscanf_r+0x20>
 80046e0:	4904      	ldr	r1, [pc, #16]	; (80046f4 <_vfiscanf_r+0x4c>)
 80046e2:	428c      	cmp	r4, r1
 80046e4:	bf08      	it	eq
 80046e6:	68ec      	ldreq	r4, [r5, #12]
 80046e8:	e7ee      	b.n	80046c8 <_vfiscanf_r+0x20>
 80046ea:	bf00      	nop
 80046ec:	08005334 	.word	0x08005334
 80046f0:	08005354 	.word	0x08005354
 80046f4:	08005314 	.word	0x08005314

080046f8 <_scanf_chars>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	4615      	mov	r5, r2
 80046fe:	688a      	ldr	r2, [r1, #8]
 8004700:	4680      	mov	r8, r0
 8004702:	460c      	mov	r4, r1
 8004704:	b932      	cbnz	r2, 8004714 <_scanf_chars+0x1c>
 8004706:	698a      	ldr	r2, [r1, #24]
 8004708:	2a00      	cmp	r2, #0
 800470a:	bf0c      	ite	eq
 800470c:	2201      	moveq	r2, #1
 800470e:	f04f 32ff 	movne.w	r2, #4294967295
 8004712:	608a      	str	r2, [r1, #8]
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80047a8 <_scanf_chars+0xb0>
 800471a:	06d1      	lsls	r1, r2, #27
 800471c:	bf5f      	itttt	pl
 800471e:	681a      	ldrpl	r2, [r3, #0]
 8004720:	1d11      	addpl	r1, r2, #4
 8004722:	6019      	strpl	r1, [r3, #0]
 8004724:	6816      	ldrpl	r6, [r2, #0]
 8004726:	2700      	movs	r7, #0
 8004728:	69a0      	ldr	r0, [r4, #24]
 800472a:	b188      	cbz	r0, 8004750 <_scanf_chars+0x58>
 800472c:	2801      	cmp	r0, #1
 800472e:	d107      	bne.n	8004740 <_scanf_chars+0x48>
 8004730:	682a      	ldr	r2, [r5, #0]
 8004732:	7811      	ldrb	r1, [r2, #0]
 8004734:	6962      	ldr	r2, [r4, #20]
 8004736:	5c52      	ldrb	r2, [r2, r1]
 8004738:	b952      	cbnz	r2, 8004750 <_scanf_chars+0x58>
 800473a:	2f00      	cmp	r7, #0
 800473c:	d031      	beq.n	80047a2 <_scanf_chars+0xaa>
 800473e:	e022      	b.n	8004786 <_scanf_chars+0x8e>
 8004740:	2802      	cmp	r0, #2
 8004742:	d120      	bne.n	8004786 <_scanf_chars+0x8e>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f813 3009 	ldrb.w	r3, [r3, r9]
 800474c:	071b      	lsls	r3, r3, #28
 800474e:	d41a      	bmi.n	8004786 <_scanf_chars+0x8e>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	06da      	lsls	r2, r3, #27
 8004754:	bf5e      	ittt	pl
 8004756:	682b      	ldrpl	r3, [r5, #0]
 8004758:	781b      	ldrbpl	r3, [r3, #0]
 800475a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800475e:	682a      	ldr	r2, [r5, #0]
 8004760:	686b      	ldr	r3, [r5, #4]
 8004762:	3201      	adds	r2, #1
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	68a2      	ldr	r2, [r4, #8]
 8004768:	3b01      	subs	r3, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	606b      	str	r3, [r5, #4]
 800476e:	3701      	adds	r7, #1
 8004770:	60a2      	str	r2, [r4, #8]
 8004772:	b142      	cbz	r2, 8004786 <_scanf_chars+0x8e>
 8004774:	2b00      	cmp	r3, #0
 8004776:	dcd7      	bgt.n	8004728 <_scanf_chars+0x30>
 8004778:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800477c:	4629      	mov	r1, r5
 800477e:	4640      	mov	r0, r8
 8004780:	4798      	blx	r3
 8004782:	2800      	cmp	r0, #0
 8004784:	d0d0      	beq.n	8004728 <_scanf_chars+0x30>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f013 0310 	ands.w	r3, r3, #16
 800478c:	d105      	bne.n	800479a <_scanf_chars+0xa2>
 800478e:	68e2      	ldr	r2, [r4, #12]
 8004790:	3201      	adds	r2, #1
 8004792:	60e2      	str	r2, [r4, #12]
 8004794:	69a2      	ldr	r2, [r4, #24]
 8004796:	b102      	cbz	r2, 800479a <_scanf_chars+0xa2>
 8004798:	7033      	strb	r3, [r6, #0]
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	443b      	add	r3, r7
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	2000      	movs	r0, #0
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	bf00      	nop
 80047a8:	080053c3 	.word	0x080053c3

080047ac <_scanf_i>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	4698      	mov	r8, r3
 80047b2:	4b76      	ldr	r3, [pc, #472]	; (800498c <_scanf_i+0x1e0>)
 80047b4:	460c      	mov	r4, r1
 80047b6:	4682      	mov	sl, r0
 80047b8:	4616      	mov	r6, r2
 80047ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047be:	b087      	sub	sp, #28
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <_scanf_i+0x1e4>)
 80047c8:	69a1      	ldr	r1, [r4, #24]
 80047ca:	4a72      	ldr	r2, [pc, #456]	; (8004994 <_scanf_i+0x1e8>)
 80047cc:	2903      	cmp	r1, #3
 80047ce:	bf18      	it	ne
 80047d0:	461a      	movne	r2, r3
 80047d2:	68a3      	ldr	r3, [r4, #8]
 80047d4:	9201      	str	r2, [sp, #4]
 80047d6:	1e5a      	subs	r2, r3, #1
 80047d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047dc:	bf88      	it	hi
 80047de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047e2:	4627      	mov	r7, r4
 80047e4:	bf82      	ittt	hi
 80047e6:	eb03 0905 	addhi.w	r9, r3, r5
 80047ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047ee:	60a3      	strhi	r3, [r4, #8]
 80047f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80047f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80047f8:	bf98      	it	ls
 80047fa:	f04f 0900 	movls.w	r9, #0
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	463d      	mov	r5, r7
 8004802:	f04f 0b00 	mov.w	fp, #0
 8004806:	6831      	ldr	r1, [r6, #0]
 8004808:	ab03      	add	r3, sp, #12
 800480a:	7809      	ldrb	r1, [r1, #0]
 800480c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004810:	2202      	movs	r2, #2
 8004812:	f7fb fd15 	bl	8000240 <memchr>
 8004816:	b328      	cbz	r0, 8004864 <_scanf_i+0xb8>
 8004818:	f1bb 0f01 	cmp.w	fp, #1
 800481c:	d159      	bne.n	80048d2 <_scanf_i+0x126>
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	b92a      	cbnz	r2, 800482e <_scanf_i+0x82>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	2308      	movs	r3, #8
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	6063      	str	r3, [r4, #4]
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	68a2      	ldr	r2, [r4, #8]
 8004838:	1e51      	subs	r1, r2, #1
 800483a:	60a1      	str	r1, [r4, #8]
 800483c:	b192      	cbz	r2, 8004864 <_scanf_i+0xb8>
 800483e:	6832      	ldr	r2, [r6, #0]
 8004840:	1c51      	adds	r1, r2, #1
 8004842:	6031      	str	r1, [r6, #0]
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	f805 2b01 	strb.w	r2, [r5], #1
 800484a:	6872      	ldr	r2, [r6, #4]
 800484c:	3a01      	subs	r2, #1
 800484e:	2a00      	cmp	r2, #0
 8004850:	6072      	str	r2, [r6, #4]
 8004852:	dc07      	bgt.n	8004864 <_scanf_i+0xb8>
 8004854:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004858:	4631      	mov	r1, r6
 800485a:	4650      	mov	r0, sl
 800485c:	4790      	blx	r2
 800485e:	2800      	cmp	r0, #0
 8004860:	f040 8085 	bne.w	800496e <_scanf_i+0x1c2>
 8004864:	f10b 0b01 	add.w	fp, fp, #1
 8004868:	f1bb 0f03 	cmp.w	fp, #3
 800486c:	d1cb      	bne.n	8004806 <_scanf_i+0x5a>
 800486e:	6863      	ldr	r3, [r4, #4]
 8004870:	b90b      	cbnz	r3, 8004876 <_scanf_i+0xca>
 8004872:	230a      	movs	r3, #10
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	4947      	ldr	r1, [pc, #284]	; (8004998 <_scanf_i+0x1ec>)
 800487a:	6960      	ldr	r0, [r4, #20]
 800487c:	1ac9      	subs	r1, r1, r3
 800487e:	f000 f931 	bl	8004ae4 <__sccl>
 8004882:	f04f 0b00 	mov.w	fp, #0
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03d      	beq.n	800490a <_scanf_i+0x15e>
 800488e:	6831      	ldr	r1, [r6, #0]
 8004890:	6960      	ldr	r0, [r4, #20]
 8004892:	f891 c000 	ldrb.w	ip, [r1]
 8004896:	f810 000c 	ldrb.w	r0, [r0, ip]
 800489a:	2800      	cmp	r0, #0
 800489c:	d035      	beq.n	800490a <_scanf_i+0x15e>
 800489e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80048a2:	d124      	bne.n	80048ee <_scanf_i+0x142>
 80048a4:	0510      	lsls	r0, r2, #20
 80048a6:	d522      	bpl.n	80048ee <_scanf_i+0x142>
 80048a8:	f10b 0b01 	add.w	fp, fp, #1
 80048ac:	f1b9 0f00 	cmp.w	r9, #0
 80048b0:	d003      	beq.n	80048ba <_scanf_i+0x10e>
 80048b2:	3301      	adds	r3, #1
 80048b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	6873      	ldr	r3, [r6, #4]
 80048bc:	3b01      	subs	r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	6073      	str	r3, [r6, #4]
 80048c2:	dd1b      	ble.n	80048fc <_scanf_i+0x150>
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	68a3      	ldr	r3, [r4, #8]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60a3      	str	r3, [r4, #8]
 80048d0:	e7d9      	b.n	8004886 <_scanf_i+0xda>
 80048d2:	f1bb 0f02 	cmp.w	fp, #2
 80048d6:	d1ae      	bne.n	8004836 <_scanf_i+0x8a>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80048de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80048e2:	d1bf      	bne.n	8004864 <_scanf_i+0xb8>
 80048e4:	2310      	movs	r3, #16
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ec:	e7a2      	b.n	8004834 <_scanf_i+0x88>
 80048ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80048f2:	6022      	str	r2, [r4, #0]
 80048f4:	780b      	ldrb	r3, [r1, #0]
 80048f6:	f805 3b01 	strb.w	r3, [r5], #1
 80048fa:	e7de      	b.n	80048ba <_scanf_i+0x10e>
 80048fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004900:	4631      	mov	r1, r6
 8004902:	4650      	mov	r0, sl
 8004904:	4798      	blx	r3
 8004906:	2800      	cmp	r0, #0
 8004908:	d0df      	beq.n	80048ca <_scanf_i+0x11e>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	05db      	lsls	r3, r3, #23
 800490e:	d50d      	bpl.n	800492c <_scanf_i+0x180>
 8004910:	42bd      	cmp	r5, r7
 8004912:	d909      	bls.n	8004928 <_scanf_i+0x17c>
 8004914:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004918:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800491c:	4632      	mov	r2, r6
 800491e:	4650      	mov	r0, sl
 8004920:	4798      	blx	r3
 8004922:	f105 39ff 	add.w	r9, r5, #4294967295
 8004926:	464d      	mov	r5, r9
 8004928:	42bd      	cmp	r5, r7
 800492a:	d02d      	beq.n	8004988 <_scanf_i+0x1dc>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	f012 0210 	ands.w	r2, r2, #16
 8004932:	d113      	bne.n	800495c <_scanf_i+0x1b0>
 8004934:	702a      	strb	r2, [r5, #0]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	9e01      	ldr	r6, [sp, #4]
 800493a:	4639      	mov	r1, r7
 800493c:	4650      	mov	r0, sl
 800493e:	47b0      	blx	r6
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	f011 0f20 	tst.w	r1, #32
 800494a:	d013      	beq.n	8004974 <_scanf_i+0x1c8>
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	f8c8 2000 	str.w	r2, [r8]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6018      	str	r0, [r3, #0]
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60e3      	str	r3, [r4, #12]
 800495c:	1bed      	subs	r5, r5, r7
 800495e:	44ab      	add	fp, r5
 8004960:	6925      	ldr	r5, [r4, #16]
 8004962:	445d      	add	r5, fp
 8004964:	6125      	str	r5, [r4, #16]
 8004966:	2000      	movs	r0, #0
 8004968:	b007      	add	sp, #28
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	f04f 0b00 	mov.w	fp, #0
 8004972:	e7ca      	b.n	800490a <_scanf_i+0x15e>
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	f8c8 2000 	str.w	r2, [r8]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f011 0f01 	tst.w	r1, #1
 8004980:	bf14      	ite	ne
 8004982:	8018      	strhne	r0, [r3, #0]
 8004984:	6018      	streq	r0, [r3, #0]
 8004986:	e7e6      	b.n	8004956 <_scanf_i+0x1aa>
 8004988:	2001      	movs	r0, #1
 800498a:	e7ed      	b.n	8004968 <_scanf_i+0x1bc>
 800498c:	080052c4 	.word	0x080052c4
 8004990:	08004dc9 	.word	0x08004dc9
 8004994:	08004ce1 	.word	0x08004ce1
 8004998:	080053c0 	.word	0x080053c0

0800499c <lflush>:
 800499c:	8983      	ldrh	r3, [r0, #12]
 800499e:	f003 0309 	and.w	r3, r3, #9
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	d101      	bne.n	80049aa <lflush+0xe>
 80049a6:	f7fe bf77 	b.w	8003898 <fflush>
 80049aa:	2000      	movs	r0, #0
 80049ac:	4770      	bx	lr
	...

080049b0 <__srefill_r>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	460c      	mov	r4, r1
 80049b4:	4605      	mov	r5, r0
 80049b6:	b118      	cbz	r0, 80049c0 <__srefill_r+0x10>
 80049b8:	6983      	ldr	r3, [r0, #24]
 80049ba:	b90b      	cbnz	r3, 80049c0 <__srefill_r+0x10>
 80049bc:	f7fe ffd6 	bl	800396c <__sinit>
 80049c0:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <__srefill_r+0x100>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	d10a      	bne.n	80049dc <__srefill_r+0x2c>
 80049c6:	686c      	ldr	r4, [r5, #4]
 80049c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049cc:	2300      	movs	r3, #0
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	069e      	lsls	r6, r3, #26
 80049d4:	d50c      	bpl.n	80049f0 <__srefill_r+0x40>
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	e066      	b.n	8004aaa <__srefill_r+0xfa>
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <__srefill_r+0x104>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <__srefill_r+0x36>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7f0      	b.n	80049c8 <__srefill_r+0x18>
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <__srefill_r+0x108>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7eb      	b.n	80049c8 <__srefill_r+0x18>
 80049f0:	0758      	lsls	r0, r3, #29
 80049f2:	d448      	bmi.n	8004a86 <__srefill_r+0xd6>
 80049f4:	06d9      	lsls	r1, r3, #27
 80049f6:	d405      	bmi.n	8004a04 <__srefill_r+0x54>
 80049f8:	2309      	movs	r3, #9
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	e7e8      	b.n	80049d6 <__srefill_r+0x26>
 8004a04:	071a      	lsls	r2, r3, #28
 8004a06:	d50b      	bpl.n	8004a20 <__srefill_r+0x70>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f7fe ff08 	bl	8003820 <_fflush_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d1e0      	bne.n	80049d6 <__srefill_r+0x26>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	60a0      	str	r0, [r4, #8]
 8004a18:	f023 0308 	bic.w	r3, r3, #8
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	61a0      	str	r0, [r4, #24]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b91b      	cbnz	r3, 8004a34 <__srefill_r+0x84>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f7ff f87e 	bl	8003b30 <__smakebuf_r>
 8004a34:	89a6      	ldrh	r6, [r4, #12]
 8004a36:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004a3a:	07b3      	lsls	r3, r6, #30
 8004a3c:	d00f      	beq.n	8004a5e <__srefill_r+0xae>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <__srefill_r+0x10c>)
 8004a44:	491e      	ldr	r1, [pc, #120]	; (8004ac0 <__srefill_r+0x110>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	f006 0609 	and.w	r6, r6, #9
 8004a4c:	f7ff f80c 	bl	8003a68 <_fwalk>
 8004a50:	2e09      	cmp	r6, #9
 8004a52:	81a7      	strh	r7, [r4, #12]
 8004a54:	d103      	bne.n	8004a5e <__srefill_r+0xae>
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f7fe fe5b 	bl	8003714 <__sflush_r>
 8004a5e:	6922      	ldr	r2, [r4, #16]
 8004a60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a62:	6963      	ldr	r3, [r4, #20]
 8004a64:	6a21      	ldr	r1, [r4, #32]
 8004a66:	6022      	str	r2, [r4, #0]
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b0      	blx	r6
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	6060      	str	r0, [r4, #4]
 8004a70:	dc1c      	bgt.n	8004aac <__srefill_r+0xfc>
 8004a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a76:	bf17      	itett	ne
 8004a78:	2200      	movne	r2, #0
 8004a7a:	f043 0320 	orreq.w	r3, r3, #32
 8004a7e:	6062      	strne	r2, [r4, #4]
 8004a80:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004a84:	e7bc      	b.n	8004a00 <__srefill_r+0x50>
 8004a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d0cd      	beq.n	8004a28 <__srefill_r+0x78>
 8004a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a90:	4299      	cmp	r1, r3
 8004a92:	d002      	beq.n	8004a9a <__srefill_r+0xea>
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7ff f893 	bl	8003bc0 <_free_r>
 8004a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0c0      	beq.n	8004a28 <__srefill_r+0x78>
 8004aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aac:	2000      	movs	r0, #0
 8004aae:	e7fc      	b.n	8004aaa <__srefill_r+0xfa>
 8004ab0:	08005334 	.word	0x08005334
 8004ab4:	08005354 	.word	0x08005354
 8004ab8:	08005314 	.word	0x08005314
 8004abc:	080052e8 	.word	0x080052e8
 8004ac0:	0800499d 	.word	0x0800499d

08004ac4 <_sbrk_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d06      	ldr	r5, [pc, #24]	; (8004ae0 <_sbrk_r+0x1c>)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	f7fc f8e6 	bl	8000ca0 <_sbrk>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_sbrk_r+0x1a>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_sbrk_r+0x1a>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	2000012c 	.word	0x2000012c

08004ae4 <__sccl>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	780b      	ldrb	r3, [r1, #0]
 8004ae8:	4604      	mov	r4, r0
 8004aea:	2b5e      	cmp	r3, #94	; 0x5e
 8004aec:	bf0b      	itete	eq
 8004aee:	784b      	ldrbeq	r3, [r1, #1]
 8004af0:	1c48      	addne	r0, r1, #1
 8004af2:	1c88      	addeq	r0, r1, #2
 8004af4:	2200      	movne	r2, #0
 8004af6:	bf08      	it	eq
 8004af8:	2201      	moveq	r2, #1
 8004afa:	1e61      	subs	r1, r4, #1
 8004afc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004b00:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004b04:	42a9      	cmp	r1, r5
 8004b06:	d1fb      	bne.n	8004b00 <__sccl+0x1c>
 8004b08:	b90b      	cbnz	r3, 8004b0e <__sccl+0x2a>
 8004b0a:	3801      	subs	r0, #1
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	f082 0201 	eor.w	r2, r2, #1
 8004b12:	54e2      	strb	r2, [r4, r3]
 8004b14:	4605      	mov	r5, r0
 8004b16:	4628      	mov	r0, r5
 8004b18:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004b1c:	292d      	cmp	r1, #45	; 0x2d
 8004b1e:	d006      	beq.n	8004b2e <__sccl+0x4a>
 8004b20:	295d      	cmp	r1, #93	; 0x5d
 8004b22:	d0f3      	beq.n	8004b0c <__sccl+0x28>
 8004b24:	b909      	cbnz	r1, 8004b2a <__sccl+0x46>
 8004b26:	4628      	mov	r0, r5
 8004b28:	e7f0      	b.n	8004b0c <__sccl+0x28>
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	e7f1      	b.n	8004b12 <__sccl+0x2e>
 8004b2e:	786e      	ldrb	r6, [r5, #1]
 8004b30:	2e5d      	cmp	r6, #93	; 0x5d
 8004b32:	d0fa      	beq.n	8004b2a <__sccl+0x46>
 8004b34:	42b3      	cmp	r3, r6
 8004b36:	dcf8      	bgt.n	8004b2a <__sccl+0x46>
 8004b38:	3502      	adds	r5, #2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	428e      	cmp	r6, r1
 8004b40:	5462      	strb	r2, [r4, r1]
 8004b42:	dcfb      	bgt.n	8004b3c <__sccl+0x58>
 8004b44:	1af1      	subs	r1, r6, r3
 8004b46:	3901      	subs	r1, #1
 8004b48:	1c58      	adds	r0, r3, #1
 8004b4a:	42b3      	cmp	r3, r6
 8004b4c:	bfa8      	it	ge
 8004b4e:	2100      	movge	r1, #0
 8004b50:	1843      	adds	r3, r0, r1
 8004b52:	e7e0      	b.n	8004b16 <__sccl+0x32>

08004b54 <__sread>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	460c      	mov	r4, r1
 8004b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5c:	f000 faa8 	bl	80050b0 <_read_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	bfab      	itete	ge
 8004b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b66:	89a3      	ldrhlt	r3, [r4, #12]
 8004b68:	181b      	addge	r3, r3, r0
 8004b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b6e:	bfac      	ite	ge
 8004b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b72:	81a3      	strhlt	r3, [r4, #12]
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <__swrite>:
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	461f      	mov	r7, r3
 8004b7c:	898b      	ldrh	r3, [r1, #12]
 8004b7e:	05db      	lsls	r3, r3, #23
 8004b80:	4605      	mov	r5, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	4616      	mov	r6, r2
 8004b86:	d505      	bpl.n	8004b94 <__swrite+0x1e>
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f000 fa32 	bl	8004ff8 <_lseek_r>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	f000 b9e1 	b.w	8004f70 <_write_r>

08004bae <__sseek>:
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 fa1f 	bl	8004ff8 <_lseek_r>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	bf15      	itete	ne
 8004bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bca:	81a3      	strheq	r3, [r4, #12]
 8004bcc:	bf18      	it	ne
 8004bce:	81a3      	strhne	r3, [r4, #12]
 8004bd0:	bd10      	pop	{r4, pc}

08004bd2 <__sclose>:
 8004bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd6:	f000 b9dd 	b.w	8004f94 <_close_r>
	...

08004bdc <_strtol_l.constprop.0>:
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be2:	d001      	beq.n	8004be8 <_strtol_l.constprop.0+0xc>
 8004be4:	2b24      	cmp	r3, #36	; 0x24
 8004be6:	d906      	bls.n	8004bf6 <_strtol_l.constprop.0+0x1a>
 8004be8:	f7fe fada 	bl	80031a0 <__errno>
 8004bec:	2316      	movs	r3, #22
 8004bee:	6003      	str	r3, [r0, #0]
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004cdc <_strtol_l.constprop.0+0x100>
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	462e      	mov	r6, r5
 8004bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c02:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004c06:	f017 0708 	ands.w	r7, r7, #8
 8004c0a:	d1f7      	bne.n	8004bfc <_strtol_l.constprop.0+0x20>
 8004c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8004c0e:	d132      	bne.n	8004c76 <_strtol_l.constprop.0+0x9a>
 8004c10:	782c      	ldrb	r4, [r5, #0]
 8004c12:	2701      	movs	r7, #1
 8004c14:	1cb5      	adds	r5, r6, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d05b      	beq.n	8004cd2 <_strtol_l.constprop.0+0xf6>
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d109      	bne.n	8004c32 <_strtol_l.constprop.0+0x56>
 8004c1e:	2c30      	cmp	r4, #48	; 0x30
 8004c20:	d107      	bne.n	8004c32 <_strtol_l.constprop.0+0x56>
 8004c22:	782c      	ldrb	r4, [r5, #0]
 8004c24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c28:	2c58      	cmp	r4, #88	; 0x58
 8004c2a:	d14d      	bne.n	8004cc8 <_strtol_l.constprop.0+0xec>
 8004c2c:	786c      	ldrb	r4, [r5, #1]
 8004c2e:	2310      	movs	r3, #16
 8004c30:	3502      	adds	r5, #2
 8004c32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c36:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c3a:	f04f 0c00 	mov.w	ip, #0
 8004c3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c42:	4666      	mov	r6, ip
 8004c44:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004c4c:	f1be 0f09 	cmp.w	lr, #9
 8004c50:	d816      	bhi.n	8004c80 <_strtol_l.constprop.0+0xa4>
 8004c52:	4674      	mov	r4, lr
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	dd24      	ble.n	8004ca2 <_strtol_l.constprop.0+0xc6>
 8004c58:	f1bc 0f00 	cmp.w	ip, #0
 8004c5c:	db1e      	blt.n	8004c9c <_strtol_l.constprop.0+0xc0>
 8004c5e:	45b1      	cmp	r9, r6
 8004c60:	d31c      	bcc.n	8004c9c <_strtol_l.constprop.0+0xc0>
 8004c62:	d101      	bne.n	8004c68 <_strtol_l.constprop.0+0x8c>
 8004c64:	45a2      	cmp	sl, r4
 8004c66:	db19      	blt.n	8004c9c <_strtol_l.constprop.0+0xc0>
 8004c68:	fb06 4603 	mla	r6, r6, r3, r4
 8004c6c:	f04f 0c01 	mov.w	ip, #1
 8004c70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c74:	e7e8      	b.n	8004c48 <_strtol_l.constprop.0+0x6c>
 8004c76:	2c2b      	cmp	r4, #43	; 0x2b
 8004c78:	bf04      	itt	eq
 8004c7a:	782c      	ldrbeq	r4, [r5, #0]
 8004c7c:	1cb5      	addeq	r5, r6, #2
 8004c7e:	e7ca      	b.n	8004c16 <_strtol_l.constprop.0+0x3a>
 8004c80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004c84:	f1be 0f19 	cmp.w	lr, #25
 8004c88:	d801      	bhi.n	8004c8e <_strtol_l.constprop.0+0xb2>
 8004c8a:	3c37      	subs	r4, #55	; 0x37
 8004c8c:	e7e2      	b.n	8004c54 <_strtol_l.constprop.0+0x78>
 8004c8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004c92:	f1be 0f19 	cmp.w	lr, #25
 8004c96:	d804      	bhi.n	8004ca2 <_strtol_l.constprop.0+0xc6>
 8004c98:	3c57      	subs	r4, #87	; 0x57
 8004c9a:	e7db      	b.n	8004c54 <_strtol_l.constprop.0+0x78>
 8004c9c:	f04f 3cff 	mov.w	ip, #4294967295
 8004ca0:	e7e6      	b.n	8004c70 <_strtol_l.constprop.0+0x94>
 8004ca2:	f1bc 0f00 	cmp.w	ip, #0
 8004ca6:	da05      	bge.n	8004cb4 <_strtol_l.constprop.0+0xd8>
 8004ca8:	2322      	movs	r3, #34	; 0x22
 8004caa:	6003      	str	r3, [r0, #0]
 8004cac:	4646      	mov	r6, r8
 8004cae:	b942      	cbnz	r2, 8004cc2 <_strtol_l.constprop.0+0xe6>
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	e79e      	b.n	8004bf2 <_strtol_l.constprop.0+0x16>
 8004cb4:	b107      	cbz	r7, 8004cb8 <_strtol_l.constprop.0+0xdc>
 8004cb6:	4276      	negs	r6, r6
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	d0f9      	beq.n	8004cb0 <_strtol_l.constprop.0+0xd4>
 8004cbc:	f1bc 0f00 	cmp.w	ip, #0
 8004cc0:	d000      	beq.n	8004cc4 <_strtol_l.constprop.0+0xe8>
 8004cc2:	1e69      	subs	r1, r5, #1
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	e7f3      	b.n	8004cb0 <_strtol_l.constprop.0+0xd4>
 8004cc8:	2430      	movs	r4, #48	; 0x30
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1b1      	bne.n	8004c32 <_strtol_l.constprop.0+0x56>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	e7af      	b.n	8004c32 <_strtol_l.constprop.0+0x56>
 8004cd2:	2c30      	cmp	r4, #48	; 0x30
 8004cd4:	d0a5      	beq.n	8004c22 <_strtol_l.constprop.0+0x46>
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e7ab      	b.n	8004c32 <_strtol_l.constprop.0+0x56>
 8004cda:	bf00      	nop
 8004cdc:	080053c3 	.word	0x080053c3

08004ce0 <_strtol_r>:
 8004ce0:	f7ff bf7c 	b.w	8004bdc <_strtol_l.constprop.0>

08004ce4 <_strtoul_l.constprop.0>:
 8004ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	4f36      	ldr	r7, [pc, #216]	; (8004dc4 <_strtoul_l.constprop.0+0xe0>)
 8004cea:	4686      	mov	lr, r0
 8004cec:	460d      	mov	r5, r1
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cf4:	5de6      	ldrb	r6, [r4, r7]
 8004cf6:	f016 0608 	ands.w	r6, r6, #8
 8004cfa:	d1f8      	bne.n	8004cee <_strtoul_l.constprop.0+0xa>
 8004cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8004cfe:	d12f      	bne.n	8004d60 <_strtoul_l.constprop.0+0x7c>
 8004d00:	782c      	ldrb	r4, [r5, #0]
 8004d02:	2601      	movs	r6, #1
 8004d04:	1c85      	adds	r5, r0, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d057      	beq.n	8004dba <_strtoul_l.constprop.0+0xd6>
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d109      	bne.n	8004d22 <_strtoul_l.constprop.0+0x3e>
 8004d0e:	2c30      	cmp	r4, #48	; 0x30
 8004d10:	d107      	bne.n	8004d22 <_strtoul_l.constprop.0+0x3e>
 8004d12:	7828      	ldrb	r0, [r5, #0]
 8004d14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004d18:	2858      	cmp	r0, #88	; 0x58
 8004d1a:	d149      	bne.n	8004db0 <_strtoul_l.constprop.0+0xcc>
 8004d1c:	786c      	ldrb	r4, [r5, #1]
 8004d1e:	2310      	movs	r3, #16
 8004d20:	3502      	adds	r5, #2
 8004d22:	f04f 38ff 	mov.w	r8, #4294967295
 8004d26:	2700      	movs	r7, #0
 8004d28:	fbb8 f8f3 	udiv	r8, r8, r3
 8004d2c:	fb03 f908 	mul.w	r9, r3, r8
 8004d30:	ea6f 0909 	mvn.w	r9, r9
 8004d34:	4638      	mov	r0, r7
 8004d36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d3a:	f1bc 0f09 	cmp.w	ip, #9
 8004d3e:	d814      	bhi.n	8004d6a <_strtoul_l.constprop.0+0x86>
 8004d40:	4664      	mov	r4, ip
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	dd22      	ble.n	8004d8c <_strtoul_l.constprop.0+0xa8>
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	db1d      	blt.n	8004d86 <_strtoul_l.constprop.0+0xa2>
 8004d4a:	4580      	cmp	r8, r0
 8004d4c:	d31b      	bcc.n	8004d86 <_strtoul_l.constprop.0+0xa2>
 8004d4e:	d101      	bne.n	8004d54 <_strtoul_l.constprop.0+0x70>
 8004d50:	45a1      	cmp	r9, r4
 8004d52:	db18      	blt.n	8004d86 <_strtoul_l.constprop.0+0xa2>
 8004d54:	fb00 4003 	mla	r0, r0, r3, r4
 8004d58:	2701      	movs	r7, #1
 8004d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d5e:	e7ea      	b.n	8004d36 <_strtoul_l.constprop.0+0x52>
 8004d60:	2c2b      	cmp	r4, #43	; 0x2b
 8004d62:	bf04      	itt	eq
 8004d64:	782c      	ldrbeq	r4, [r5, #0]
 8004d66:	1c85      	addeq	r5, r0, #2
 8004d68:	e7cd      	b.n	8004d06 <_strtoul_l.constprop.0+0x22>
 8004d6a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004d6e:	f1bc 0f19 	cmp.w	ip, #25
 8004d72:	d801      	bhi.n	8004d78 <_strtoul_l.constprop.0+0x94>
 8004d74:	3c37      	subs	r4, #55	; 0x37
 8004d76:	e7e4      	b.n	8004d42 <_strtoul_l.constprop.0+0x5e>
 8004d78:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004d7c:	f1bc 0f19 	cmp.w	ip, #25
 8004d80:	d804      	bhi.n	8004d8c <_strtoul_l.constprop.0+0xa8>
 8004d82:	3c57      	subs	r4, #87	; 0x57
 8004d84:	e7dd      	b.n	8004d42 <_strtoul_l.constprop.0+0x5e>
 8004d86:	f04f 37ff 	mov.w	r7, #4294967295
 8004d8a:	e7e6      	b.n	8004d5a <_strtoul_l.constprop.0+0x76>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	da07      	bge.n	8004da0 <_strtoul_l.constprop.0+0xbc>
 8004d90:	2322      	movs	r3, #34	; 0x22
 8004d92:	f8ce 3000 	str.w	r3, [lr]
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	b932      	cbnz	r2, 8004daa <_strtoul_l.constprop.0+0xc6>
 8004d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da0:	b106      	cbz	r6, 8004da4 <_strtoul_l.constprop.0+0xc0>
 8004da2:	4240      	negs	r0, r0
 8004da4:	2a00      	cmp	r2, #0
 8004da6:	d0f9      	beq.n	8004d9c <_strtoul_l.constprop.0+0xb8>
 8004da8:	b107      	cbz	r7, 8004dac <_strtoul_l.constprop.0+0xc8>
 8004daa:	1e69      	subs	r1, r5, #1
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	e7f5      	b.n	8004d9c <_strtoul_l.constprop.0+0xb8>
 8004db0:	2430      	movs	r4, #48	; 0x30
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1b5      	bne.n	8004d22 <_strtoul_l.constprop.0+0x3e>
 8004db6:	2308      	movs	r3, #8
 8004db8:	e7b3      	b.n	8004d22 <_strtoul_l.constprop.0+0x3e>
 8004dba:	2c30      	cmp	r4, #48	; 0x30
 8004dbc:	d0a9      	beq.n	8004d12 <_strtoul_l.constprop.0+0x2e>
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	e7af      	b.n	8004d22 <_strtoul_l.constprop.0+0x3e>
 8004dc2:	bf00      	nop
 8004dc4:	080053c3 	.word	0x080053c3

08004dc8 <_strtoul_r>:
 8004dc8:	f7ff bf8c 	b.w	8004ce4 <_strtoul_l.constprop.0>

08004dcc <__submore>:
 8004dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd8:	4299      	cmp	r1, r3
 8004dda:	d11d      	bne.n	8004e18 <__submore+0x4c>
 8004ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004de0:	f7fe ff5a 	bl	8003c98 <_malloc_r>
 8004de4:	b918      	cbnz	r0, 8004dee <__submore+0x22>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004df4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004df8:	6360      	str	r0, [r4, #52]	; 0x34
 8004dfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004dfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004e06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004e0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e7e8      	b.n	8004dea <__submore+0x1e>
 8004e18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e1a:	0077      	lsls	r7, r6, #1
 8004e1c:	463a      	mov	r2, r7
 8004e1e:	f000 f917 	bl	8005050 <_realloc_r>
 8004e22:	4605      	mov	r5, r0
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d0de      	beq.n	8004de6 <__submore+0x1a>
 8004e28:	eb00 0806 	add.w	r8, r0, r6
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4632      	mov	r2, r6
 8004e30:	4640      	mov	r0, r8
 8004e32:	f000 f8f3 	bl	800501c <memcpy>
 8004e36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004e3a:	f8c4 8000 	str.w	r8, [r4]
 8004e3e:	e7e9      	b.n	8004e14 <__submore+0x48>

08004e40 <_ungetc_r>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4614      	mov	r4, r2
 8004e44:	1c4a      	adds	r2, r1, #1
 8004e46:	4606      	mov	r6, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	d103      	bne.n	8004e54 <_ungetc_r+0x14>
 8004e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e50:	4628      	mov	r0, r5
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	b118      	cbz	r0, 8004e5e <_ungetc_r+0x1e>
 8004e56:	6983      	ldr	r3, [r0, #24]
 8004e58:	b90b      	cbnz	r3, 8004e5e <_ungetc_r+0x1e>
 8004e5a:	f7fe fd87 	bl	800396c <__sinit>
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <_ungetc_r+0x124>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d11d      	bne.n	8004ea0 <_ungetc_r+0x60>
 8004e64:	6874      	ldr	r4, [r6, #4]
 8004e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d405      	bmi.n	8004e78 <_ungetc_r+0x38>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	0598      	lsls	r0, r3, #22
 8004e70:	d402      	bmi.n	8004e78 <_ungetc_r+0x38>
 8004e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e74:	f7fe fe35 	bl	8003ae2 <__retarget_lock_acquire_recursive>
 8004e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7c:	f023 0320 	bic.w	r3, r3, #32
 8004e80:	0759      	lsls	r1, r3, #29
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	d42d      	bmi.n	8004ee4 <_ungetc_r+0xa4>
 8004e88:	06d3      	lsls	r3, r2, #27
 8004e8a:	d413      	bmi.n	8004eb4 <_ungetc_r+0x74>
 8004e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e8e:	07dd      	lsls	r5, r3, #31
 8004e90:	d4dc      	bmi.n	8004e4c <_ungetc_r+0xc>
 8004e92:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004e96:	d1d9      	bne.n	8004e4c <_ungetc_r+0xc>
 8004e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9a:	f7fe fe23 	bl	8003ae4 <__retarget_lock_release_recursive>
 8004e9e:	e7d5      	b.n	8004e4c <_ungetc_r+0xc>
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <_ungetc_r+0x128>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d101      	bne.n	8004eaa <_ungetc_r+0x6a>
 8004ea6:	68b4      	ldr	r4, [r6, #8]
 8004ea8:	e7dd      	b.n	8004e66 <_ungetc_r+0x26>
 8004eaa:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <_ungetc_r+0x12c>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	bf08      	it	eq
 8004eb0:	68f4      	ldreq	r4, [r6, #12]
 8004eb2:	e7d8      	b.n	8004e66 <_ungetc_r+0x26>
 8004eb4:	0710      	lsls	r0, r2, #28
 8004eb6:	d511      	bpl.n	8004edc <_ungetc_r+0x9c>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7fe fcb0 	bl	8003820 <_fflush_r>
 8004ec0:	b130      	cbz	r0, 8004ed0 <_ungetc_r+0x90>
 8004ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ec4:	07d9      	lsls	r1, r3, #31
 8004ec6:	d4c1      	bmi.n	8004e4c <_ungetc_r+0xc>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004ece:	e7e2      	b.n	8004e96 <_ungetc_r+0x56>
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	60a0      	str	r0, [r4, #8]
 8004ed4:	f023 0308 	bic.w	r3, r3, #8
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	61a0      	str	r0, [r4, #24]
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	b2ed      	uxtb	r5, r5
 8004eea:	b1d3      	cbz	r3, 8004f22 <_ungetc_r+0xe2>
 8004eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	dc05      	bgt.n	8004efe <_ungetc_r+0xbe>
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f7ff ff69 	bl	8004dcc <__submore>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d1e1      	bne.n	8004ec2 <_ungetc_r+0x82>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f10:	07da      	lsls	r2, r3, #31
 8004f12:	d49d      	bmi.n	8004e50 <_ungetc_r+0x10>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	059b      	lsls	r3, r3, #22
 8004f18:	d49a      	bmi.n	8004e50 <_ungetc_r+0x10>
 8004f1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1c:	f7fe fde2 	bl	8003ae4 <__retarget_lock_release_recursive>
 8004f20:	e796      	b.n	8004e50 <_ungetc_r+0x10>
 8004f22:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f24:	6920      	ldr	r0, [r4, #16]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f001 0101 	and.w	r1, r1, #1
 8004f2c:	b160      	cbz	r0, 8004f48 <_ungetc_r+0x108>
 8004f2e:	4298      	cmp	r0, r3
 8004f30:	d20a      	bcs.n	8004f48 <_ungetc_r+0x108>
 8004f32:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004f36:	42a8      	cmp	r0, r5
 8004f38:	d106      	bne.n	8004f48 <_ungetc_r+0x108>
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	3201      	adds	r2, #1
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	6062      	str	r2, [r4, #4]
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d184      	bne.n	8004e50 <_ungetc_r+0x10>
 8004f46:	e7e5      	b.n	8004f14 <_ungetc_r+0xd4>
 8004f48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f50:	6363      	str	r3, [r4, #52]	; 0x34
 8004f52:	2303      	movs	r3, #3
 8004f54:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f56:	4623      	mov	r3, r4
 8004f58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	e7ee      	b.n	8004f42 <_ungetc_r+0x102>
 8004f64:	08005334 	.word	0x08005334
 8004f68:	08005354 	.word	0x08005354
 8004f6c:	08005314 	.word	0x08005314

08004f70 <_write_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_write_r+0x20>)
 8004f74:	4604      	mov	r4, r0
 8004f76:	4608      	mov	r0, r1
 8004f78:	4611      	mov	r1, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fb fd48 	bl	8000a14 <_write>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_write_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_write_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	2000012c 	.word	0x2000012c

08004f94 <_close_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d06      	ldr	r5, [pc, #24]	; (8004fb0 <_close_r+0x1c>)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fb fd64 	bl	8000a6c <_close>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_close_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_close_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	2000012c 	.word	0x2000012c

08004fb4 <_fstat_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_fstat_r+0x20>)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	f7fb fda3 	bl	8000b0c <_fstat>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d102      	bne.n	8004fd0 <_fstat_r+0x1c>
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	b103      	cbz	r3, 8004fd0 <_fstat_r+0x1c>
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	bd38      	pop	{r3, r4, r5, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000012c 	.word	0x2000012c

08004fd8 <_isatty_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d06      	ldr	r5, [pc, #24]	; (8004ff4 <_isatty_r+0x1c>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fb fd00 	bl	80009e8 <_isatty>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_isatty_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_isatty_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	2000012c 	.word	0x2000012c

08004ff8 <_lseek_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_lseek_r+0x20>)
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4608      	mov	r0, r1
 8005000:	4611      	mov	r1, r2
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fb fd47 	bl	8000a9a <_lseek>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_lseek_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_lseek_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	2000012c 	.word	0x2000012c

0800501c <memcpy>:
 800501c:	440a      	add	r2, r1
 800501e:	4291      	cmp	r1, r2
 8005020:	f100 33ff 	add.w	r3, r0, #4294967295
 8005024:	d100      	bne.n	8005028 <memcpy+0xc>
 8005026:	4770      	bx	lr
 8005028:	b510      	push	{r4, lr}
 800502a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005032:	4291      	cmp	r1, r2
 8005034:	d1f9      	bne.n	800502a <memcpy+0xe>
 8005036:	bd10      	pop	{r4, pc}

08005038 <__malloc_lock>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__malloc_lock+0x8>)
 800503a:	f7fe bd52 	b.w	8003ae2 <__retarget_lock_acquire_recursive>
 800503e:	bf00      	nop
 8005040:	20000120 	.word	0x20000120

08005044 <__malloc_unlock>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__malloc_unlock+0x8>)
 8005046:	f7fe bd4d 	b.w	8003ae4 <__retarget_lock_release_recursive>
 800504a:	bf00      	nop
 800504c:	20000120 	.word	0x20000120

08005050 <_realloc_r>:
 8005050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	4680      	mov	r8, r0
 8005056:	4614      	mov	r4, r2
 8005058:	460e      	mov	r6, r1
 800505a:	b921      	cbnz	r1, 8005066 <_realloc_r+0x16>
 800505c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005060:	4611      	mov	r1, r2
 8005062:	f7fe be19 	b.w	8003c98 <_malloc_r>
 8005066:	b92a      	cbnz	r2, 8005074 <_realloc_r+0x24>
 8005068:	f7fe fdaa 	bl	8003bc0 <_free_r>
 800506c:	4625      	mov	r5, r4
 800506e:	4628      	mov	r0, r5
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	f000 f82e 	bl	80050d4 <_malloc_usable_size_r>
 8005078:	4284      	cmp	r4, r0
 800507a:	4607      	mov	r7, r0
 800507c:	d802      	bhi.n	8005084 <_realloc_r+0x34>
 800507e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005082:	d812      	bhi.n	80050aa <_realloc_r+0x5a>
 8005084:	4621      	mov	r1, r4
 8005086:	4640      	mov	r0, r8
 8005088:	f7fe fe06 	bl	8003c98 <_malloc_r>
 800508c:	4605      	mov	r5, r0
 800508e:	2800      	cmp	r0, #0
 8005090:	d0ed      	beq.n	800506e <_realloc_r+0x1e>
 8005092:	42bc      	cmp	r4, r7
 8005094:	4622      	mov	r2, r4
 8005096:	4631      	mov	r1, r6
 8005098:	bf28      	it	cs
 800509a:	463a      	movcs	r2, r7
 800509c:	f7ff ffbe 	bl	800501c <memcpy>
 80050a0:	4631      	mov	r1, r6
 80050a2:	4640      	mov	r0, r8
 80050a4:	f7fe fd8c 	bl	8003bc0 <_free_r>
 80050a8:	e7e1      	b.n	800506e <_realloc_r+0x1e>
 80050aa:	4635      	mov	r5, r6
 80050ac:	e7df      	b.n	800506e <_realloc_r+0x1e>
	...

080050b0 <_read_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	; (80050d0 <_read_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fb fcfc 	bl	8000abc <_read>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_read_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_read_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	2000012c 	.word	0x2000012c

080050d4 <_malloc_usable_size_r>:
 80050d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d8:	1f18      	subs	r0, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfbc      	itt	lt
 80050de:	580b      	ldrlt	r3, [r1, r0]
 80050e0:	18c0      	addlt	r0, r0, r3
 80050e2:	4770      	bx	lr

080050e4 <_init>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr

080050f0 <_fini>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr
