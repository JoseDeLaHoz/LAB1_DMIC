
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08006078  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08006078  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b309  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b3  00000000  00000000  0002b3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ea7  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af1e  00000000  00000000  00055aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2dfe  00000000  00000000  00060a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015380b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a84  00000000  00000000  0015385c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080051c4 	.word	0x080051c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080051c4 	.word	0x080051c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Saludo>:

/**
 *
 */

void Saludo(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	printf("\x1b[2J"); //Clear the screen
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <Saludo+0x58>)
 80005ea:	f002 fe8b 	bl	8003304 <iprintf>
	printf("\n\r***************************************************************");
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <Saludo+0x5c>)
 80005f0:	f002 fe88 	bl	8003304 <iprintf>
	printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <Saludo+0x60>)
 80005f6:	f002 fe85 	bl	8003304 <iprintf>
	printf("\n\r*                    DMIC - B - 2022                          *");
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <Saludo+0x64>)
 80005fc:	f002 fe82 	bl	8003304 <iprintf>
	printf("\n\r*\t Jose De La Hoz                                       *");
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <Saludo+0x68>)
 8000602:	f002 fe7f 	bl	8003304 <iprintf>
	printf("\n\r*\t Jhan Carlos Reyes                                    *");
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <Saludo+0x6c>)
 8000608:	f002 fe7c 	bl	8003304 <iprintf>
	printf("\n\r*\t Esneider Silva                                       *");
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <Saludo+0x70>)
 800060e:	f002 fe79 	bl	8003304 <iprintf>
	printf("\n\r*\t\t'GENERADOR DE NUMEROS PSEUDOALEATORIO'        *");
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <Saludo+0x74>)
 8000614:	f002 fe76 	bl	8003304 <iprintf>
	printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <Saludo+0x78>)
 800061a:	f002 fe73 	bl	8003304 <iprintf>
	printf("\n\r***************************************************************");
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <Saludo+0x5c>)
 8000620:	f002 fe70 	bl	8003304 <iprintf>
	printf("\r\n");
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <Saludo+0x7c>)
 8000626:	f002 fef3 	bl	8003410 <puts>
	printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <Saludo+0x80>)
 800062c:	f002 fe6a 	bl	8003304 <iprintf>
	printf("\r\n");
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <Saludo+0x7c>)
 8000632:	f002 feed 	bl	8003410 <puts>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	080051dc 	.word	0x080051dc
 8000640:	080051e4 	.word	0x080051e4
 8000644:	08005228 	.word	0x08005228
 8000648:	0800526c 	.word	0x0800526c
 800064c:	080052b0 	.word	0x080052b0
 8000650:	080052ec 	.word	0x080052ec
 8000654:	08005328 	.word	0x08005328
 8000658:	08005364 	.word	0x08005364
 800065c:	0800539c 	.word	0x0800539c
 8000660:	080053e0 	.word	0x080053e0
 8000664:	080053e4 	.word	0x080053e4

08000668 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b09e      	sub	sp, #120	; 0x78
 800066c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800066e:	f000 fbea 	bl	8000e46 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000672:	f000 f939 	bl	80008e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000676:	f000 f9d7 	bl	8000a28 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800067a:	f000 f9a5 	bl	80009c8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart3);
 800067e:	4891      	ldr	r0, [pc, #580]	; (80008c4 <main+0x25c>)
 8000680:	f000 f9fc 	bl	8000a7c <RetargetInit>
	//char nombre[20];
	char buf[10];
	uint8_t receive[16] = { 0 };
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
 8000688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
	uint8_t seed[16] = { 0 };
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
	uint8_t pol[] = { 1, 0, 1, 0, 0 };
 80006a4:	4a88      	ldr	r2, [pc, #544]	; (80008c8 <main+0x260>)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	3304      	adds	r3, #4
 80006b2:	7019      	strb	r1, [r3, #0]
	uint8_t aux[] = { 0, 0, 0, 0, 0 };
 80006b4:	4a85      	ldr	r2, [pc, #532]	; (80008cc <main+0x264>)
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	7019      	strb	r1, [r3, #0]
	uint8_t xor[16] = { 0 };
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
	uint8_t buff[4];
	//uint8_t sp[] = {"\n\r"};

	Saludo();
 80006d4:	f7ff ff86 	bl	80005e4 <Saludo>

	printf("\n\rNumero de bits termino de realimentacion\n\r");
 80006d8:	487d      	ldr	r0, [pc, #500]	; (80008d0 <main+0x268>)
 80006da:	f002 fe13 	bl	8003304 <iprintf>
	scanf("%s", buf);
 80006de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e2:	4619      	mov	r1, r3
 80006e4:	487b      	ldr	r0, [pc, #492]	; (80008d4 <main+0x26c>)
 80006e6:	f002 fe9b 	bl	8003420 <iscanf>
	//printf("\n\rUART_Transmit ");
	//HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
	int numbits = atoi(buf);
 80006ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fdb7 	bl	8003262 <atoi>
 80006f4:	6578      	str	r0, [r7, #84]	; 0x54
	printf("\n\rNumero de bits - Decimals: %d\n\r", numbits);
 80006f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006f8:	4877      	ldr	r0, [pc, #476]	; (80008d8 <main+0x270>)
 80006fa:	f002 fe03 	bl	8003304 <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	for (int w = 0; w < numbits ; w++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	677b      	str	r3, [r7, #116]	; 0x74
 8000702:	e010      	b.n	8000726 <main+0xbe>
		aux[w] = pol[numbits - 1 - w];
 8000704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	3378      	adds	r3, #120	; 0x78
 800070e:	443b      	add	r3, r7
 8000710:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8000714:	f107 0214 	add.w	r2, r7, #20
 8000718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071a:	4413      	add	r3, r2
 800071c:	460a      	mov	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
	for (int w = 0; w < numbits ; w++) {
 8000720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000722:	3301      	adds	r3, #1
 8000724:	677b      	str	r3, [r7, #116]	; 0x74
 8000726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800072a:	429a      	cmp	r2, r3
 800072c:	dbea      	blt.n	8000704 <main+0x9c>
	}

	for (int w = 0; w < numbits ; w++) {
 800072e:	2300      	movs	r3, #0
 8000730:	673b      	str	r3, [r7, #112]	; 0x70
 8000732:	e00d      	b.n	8000750 <main+0xe8>
		pol[w] = aux[w];
 8000734:	f107 0214 	add.w	r2, r7, #20
 8000738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800073a:	4413      	add	r3, r2
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	f107 021c 	add.w	r2, r7, #28
 8000742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
	for (int w = 0; w < numbits ; w++) {
 800074a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800074c:	3301      	adds	r3, #1
 800074e:	673b      	str	r3, [r7, #112]	; 0x70
 8000750:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000754:	429a      	cmp	r2, r3
 8000756:	dbed      	blt.n	8000734 <main+0xcc>
	}

	while (1) {

		printf("\n\rIngrese el numero de la semilla de %d bits en binario\n\r", numbits);
 8000758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800075a:	4860      	ldr	r0, [pc, #384]	; (80008dc <main+0x274>)
 800075c:	f002 fdd2 	bl	8003304 <iprintf>
		if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits, HAL_MAX_DELAY)) {
 8000760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000762:	b29a      	uxth	r2, r3
 8000764:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	4855      	ldr	r0, [pc, #340]	; (80008c4 <main+0x25c>)
 800076e:	f002 f89a 	bl	80028a6 <HAL_UART_Receive>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d115      	bne.n	80007a4 <main+0x13c>

			for (int i = 0; (i <= 15); i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800077c:	e00f      	b.n	800079e <main+0x136>
				seed[i] = (receive[i] - 48);
 800077e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3b30      	subs	r3, #48	; 0x30
 800078a:	b2d9      	uxtb	r1, r3
 800078c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000792:	4413      	add	r3, r2
 8000794:	460a      	mov	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
			for (int i = 0; (i <= 15); i++) {
 8000798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800079a:	3301      	adds	r3, #1
 800079c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800079e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	ddec      	ble.n	800077e <main+0x116>
			}
		}

		printf("\n\r");
 80007a4:	484e      	ldr	r0, [pc, #312]	; (80008e0 <main+0x278>)
 80007a6:	f002 fdad 	bl	8003304 <iprintf>
		//////////////////////////////////////////////////////
		int k = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	66bb      	str	r3, [r7, #104]	; 0x68
		while (k < 32) {
 80007ae:	e083      	b.n	80008b8 <main+0x250>
			for (int i = 0; (i < numbits); i++) {
 80007b0:	2300      	movs	r3, #0
 80007b2:	667b      	str	r3, [r7, #100]	; 0x64
 80007b4:	e019      	b.n	80007ea <main+0x182>
				if (pol[i] == 1) {
 80007b6:	f107 021c 	add.w	r2, r7, #28
 80007ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10a      	bne.n	80007da <main+0x172>
					xor[i] = seed[i];
 80007c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ca:	4413      	add	r3, r2
 80007cc:	7819      	ldrb	r1, [r3, #0]
 80007ce:	1d3a      	adds	r2, r7, #4
 80007d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007d2:	4413      	add	r3, r2
 80007d4:	460a      	mov	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e004      	b.n	80007e4 <main+0x17c>
				} else {
					xor[i] = 0;
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007de:	4413      	add	r3, r2
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; (i < numbits); i++) {
 80007e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007e6:	3301      	adds	r3, #1
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
 80007ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbe1      	blt.n	80007b6 <main+0x14e>
				//printf("\n\r%d",xor[i]);
			}
			////////////////////////////////////////////////////////

			/////////////////////////////////////////////////////////////////////////////////
			uint8_t res = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			for (int i = 0; (i < numbits); i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007fc:	e00b      	b.n	8000816 <main+0x1ae>
				res = res + xor[i];
 80007fe:	1d3a      	adds	r2, r7, #4
 8000800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000802:	4413      	add	r3, r2
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800080a:	4413      	add	r3, r2
 800080c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			for (int i = 0; (i < numbits); i++) {
 8000810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000812:	3301      	adds	r3, #1
 8000814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800081a:	429a      	cmp	r2, r3
 800081c:	dbef      	blt.n	80007fe <main+0x196>

			// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

			////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

			if (res % 2 == 0) {
 800081e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <main+0x1cc>
				res = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8000832:	e002      	b.n	800083a <main+0x1d2>
			} else {
				res = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			//printf("\n\r%d",res);
			///////////////////////////////////////////////
			// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);
			///mover y poner el valor xor en la cabeza

			for (int i = numbits-1; i > 0; i--) {
 800083a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800083c:	3b01      	subs	r3, #1
 800083e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000840:	e00e      	b.n	8000860 <main+0x1f8>
				seed[i] = seed[i-1];
 8000842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000844:	3b01      	subs	r3, #1
 8000846:	3378      	adds	r3, #120	; 0x78
 8000848:	443b      	add	r3, r7
 800084a:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 800084e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000854:	4413      	add	r3, r2
 8000856:	460a      	mov	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
			for (int i = numbits-1; i > 0; i--) {
 800085a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800085c:	3b01      	subs	r3, #1
 800085e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000862:	2b00      	cmp	r3, #0
 8000864:	dced      	bgt.n	8000842 <main+0x1da>

			//seed[4] = seed[3];
			//seed[3] = seed[2];
			//seed[2] = seed[1];
			//seed[1] = seed[0];
			seed[0] = res;
 8000866:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800086a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			//uint8_t usr = 16 * seed[0] + 8 * seed[1] + 4 * seed[2] + 2 * seed[3]+ seed[4];

			int usr = 16 * seed[0] + 8 * seed[1] + 4 * seed[2] + 2 * seed[3] + seed[4];
 800086e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000890:	4413      	add	r3, r2
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
			itoa(usr, (char*) buff, 16);
 8000894:	463b      	mov	r3, r7
 8000896:	2210      	movs	r2, #16
 8000898:	4619      	mov	r1, r3
 800089a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800089c:	f002 fd28 	bl	80032f0 <itoa>
			printf("\n\r%s",buff);
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0x27c>)
 80008a6:	f002 fd2d 	bl	8003304 <iprintf>
			//HAL_UART_Transmit(&huart3, buff, sizeof(buff), HAL_MAX_DELAY);
			//HAL_UART_Transmit(&huart3, sp, sizeof(sp), HAL_MAX_DELAY);
			HAL_Delay(1000);
 80008aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ae:	f000 fb27 	bl	8000f00 <HAL_Delay>

			k++;
 80008b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b4:	3301      	adds	r3, #1
 80008b6:	66bb      	str	r3, [r7, #104]	; 0x68
		while (k < 32) {
 80008b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008ba:	2b1f      	cmp	r3, #31
 80008bc:	f77f af78 	ble.w	80007b0 <main+0x148>
	while (1) {
 80008c0:	e74a      	b.n	8000758 <main+0xf0>
 80008c2:	bf00      	nop
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	08005de8 	.word	0x08005de8
 80008cc:	08005df0 	.word	0x08005df0
 80008d0:	08005d48 	.word	0x08005d48
 80008d4:	08005d78 	.word	0x08005d78
 80008d8:	08005d7c 	.word	0x08005d7c
 80008dc:	08005da0 	.word	0x08005da0
 80008e0:	08005ddc 	.word	0x08005ddc
 80008e4:	08005de0 	.word	0x08005de0

080008e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2234      	movs	r2, #52	; 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fcfc 	bl	80032f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <SystemClock_Config+0xd8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a2b      	ldr	r2, [pc, #172]	; (80009c0 <SystemClock_Config+0xd8>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <SystemClock_Config+0xd8>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <SystemClock_Config+0xdc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <SystemClock_Config+0xdc>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xdc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000948:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fdcd 	bl	800150c <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
		Error_Handler();
 8000978:	f000 f87a 	bl	8000a70 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800097c:	f000 fd76 	bl	800146c <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xa2>
		Error_Handler();
 8000986:	f000 f873 	bl	8000a70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2103      	movs	r1, #3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f85e 	bl	8001a68 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xce>
		Error_Handler();
 80009b2:	f000 f85d 	bl	8000a70 <Error_Handler>
	}
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART3_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f001 fe7a 	bl	8002704 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000a16:	f000 f82b 	bl	8000a70 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x44>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <RetargetInit+0x28>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <RetargetInit+0x2c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6898      	ldr	r0, [r3, #8]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2202      	movs	r2, #2
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 fcdb 	bl	8003450 <setvbuf>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000114 	.word	0x20000114
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <_isatty>:

int _isatty(int fd) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db04      	blt.n	8000ac4 <_isatty+0x18>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	dc01      	bgt.n	8000ac4 <_isatty+0x18>
    return 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e005      	b.n	8000ad0 <_isatty+0x24>

  errno = EBADF;
 8000ac4:	f002 fbd2 	bl	800326c <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2209      	movs	r2, #9
 8000acc:	601a      	str	r2, [r3, #0]
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d002      	beq.n	8000af0 <_write+0x18>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d111      	bne.n	8000b14 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <_write+0x54>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	f001 fe4f 	bl	80027a0 <HAL_UART_Transmit>
 8000b02:	4603      	mov	r3, r0
 8000b04:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <_write+0x38>
      return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	e008      	b.n	8000b22 <_write+0x4a>
    else
      return EIO;
 8000b10:	2305      	movs	r3, #5
 8000b12:	e006      	b.n	8000b22 <_write+0x4a>
  }
  errno = EBADF;
 8000b14:	f002 fbaa 	bl	800326c <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000114 	.word	0x20000114

08000b30 <_close>:

int _close(int fd) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db04      	blt.n	8000b48 <_close+0x18>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	dc01      	bgt.n	8000b48 <_close+0x18>
    return 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e006      	b.n	8000b56 <_close+0x26>

  errno = EBADF;
 8000b48:	f002 fb90 	bl	800326c <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2209      	movs	r2, #9
 8000b50:	601a      	str	r2, [r3, #0]
  return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b6a:	f002 fb7f 	bl	800326c <__errno>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2209      	movs	r2, #9
 8000b72:	601a      	str	r2, [r3, #0]
  return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <_read+0x4c>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	f001 fe82 	bl	80028a6 <HAL_UART_Receive>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <_read+0x30>
      return 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e008      	b.n	8000bc2 <_read+0x42>
    else
      return EIO;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	e006      	b.n	8000bc2 <_read+0x42>
  }
  errno = EBADF;
 8000bb4:	f002 fb5a 	bl	800326c <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2209      	movs	r2, #9
 8000bbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000114 	.word	0x20000114

08000bd0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db08      	blt.n	8000bf2 <_fstat+0x22>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc05      	bgt.n	8000bf2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bec:	605a      	str	r2, [r3, #4]
    return 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e005      	b.n	8000bfe <_fstat+0x2e>
  }

  errno = EBADF;
 8000bf2:	f002 fb3b 	bl	800326c <__errno>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2209      	movs	r2, #9
 8000bfa:	601a      	str	r2, [r3, #0]
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x44>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ae      	sub	sp, #184	; 0xb8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2290      	movs	r2, #144	; 0x90
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 fb3f 	bl	80032f4 <memset>
  if(huart->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13c      	bne.n	8000cfa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 f910 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff fee9 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cf6:	f000 fa0d 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	37b8      	adds	r7, #184	; 0xb8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8b0 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f002 fa6a 	bl	800326c <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20080000 	.word	0x20080000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000118 	.word	0x20000118
 8000dcc:	20000130 	.word	0x20000130

08000dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd7 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fa29 	bl	8003278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fc1f 	bl	8000668 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	20000130 	.word	0x20000130

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>

08000e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f92e 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f805 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fed7 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f93b 	bl	80010fa <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f911 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	2000011c 	.word	0x2000011c

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000011c 	.word	0x2000011c

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	05fa0000 	.word	0x05fa0000

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff5c 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb0 	bl	8001068 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e175      	b.n	8001420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8164 	bne.w	800141a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x56>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80be 	beq.w	800141a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012b6:	4a61      	ldr	r2, [pc, #388]	; (800143c <HAL_GPIO_Init+0x328>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_GPIO_Init+0x32c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d037      	beq.n	8001352 <HAL_GPIO_Init+0x23e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a57      	ldr	r2, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x330>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d031      	beq.n	800134e <HAL_GPIO_Init+0x23a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x334>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x236>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_GPIO_Init+0x338>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x232>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x33c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x22e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a53      	ldr	r2, [pc, #332]	; (8001454 <HAL_GPIO_Init+0x340>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x22a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x344>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x348>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x34c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x350>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x21a>
 800132a:	2309      	movs	r3, #9
 800132c:	e012      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800132e:	230a      	movs	r3, #10
 8001330:	e010      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001332:	2308      	movs	r3, #8
 8001334:	e00e      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001336:	2307      	movs	r3, #7
 8001338:	e00c      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133a:	2306      	movs	r3, #6
 800133c:	e00a      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133e:	2305      	movs	r3, #5
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001342:	2304      	movs	r3, #4
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x328>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a34      	ldr	r2, [pc, #208]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_GPIO_Init+0x354>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a29      	ldr	r2, [pc, #164]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f ae86 	bls.w	8001134 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40021800 	.word	0x40021800
 800145c:	40021c00 	.word	0x40021c00
 8001460:	40022000 	.word	0x40022000
 8001464:	40022400 	.word	0x40022400
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_PWREx_EnableOverDrive+0x98>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_PWREx_EnableOverDrive+0x98>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_PWREx_EnableOverDrive+0x98>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149a:	f7ff fd25 	bl	8000ee8 <HAL_GetTick>
 800149e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a0:	e009      	b.n	80014b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a2:	f7ff fd21 	bl	8000ee8 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b0:	d901      	bls.n	80014b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e022      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c2:	d1ee      	bne.n	80014a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d0:	f7ff fd0a 	bl	8000ee8 <HAL_GetTick>
 80014d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d6:	e009      	b.n	80014ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d8:	f7ff fd06 	bl	8000ee8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e6:	d901      	bls.n	80014ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e007      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014f8:	d1ee      	bne.n	80014d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e29b      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8087 	beq.w	800163e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001530:	4b96      	ldr	r3, [pc, #600]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b04      	cmp	r3, #4
 800153a:	d00c      	beq.n	8001556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153c:	4b93      	ldr	r3, [pc, #588]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d112      	bne.n	800156e <HAL_RCC_OscConfig+0x62>
 8001548:	4b90      	ldr	r3, [pc, #576]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001554:	d10b      	bne.n	800156e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001556:	4b8d      	ldr	r3, [pc, #564]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d06c      	beq.n	800163c <HAL_RCC_OscConfig+0x130>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d168      	bne.n	800163c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e275      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x7a>
 8001578:	4b84      	ldr	r3, [pc, #528]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a83      	ldr	r2, [pc, #524]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800157e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	e02e      	b.n	80015e4 <HAL_RCC_OscConfig+0xd8>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x9c>
 800158e:	4b7f      	ldr	r3, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b7c      	ldr	r3, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7b      	ldr	r2, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e01d      	b.n	80015e4 <HAL_RCC_OscConfig+0xd8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0xc0>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0xd8>
 80015cc:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6b      	ldr	r2, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80015de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d013      	beq.n	8001614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc7c 	bl	8000ee8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fc78 	bl	8000ee8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e229      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0xe8>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fc68 	bl	8000ee8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc64 	bl	8000ee8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e215      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x110>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d069      	beq.n	800171e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800164a:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d11c      	bne.n	800169c <HAL_RCC_OscConfig+0x190>
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d116      	bne.n	800169c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_RCC_OscConfig+0x17a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e1e9      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	493d      	ldr	r1, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	e040      	b.n	800171e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc1a 	bl	8000ee8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc16 	bl	8000ee8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1c7      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4929      	ldr	r1, [pc, #164]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
 80016ea:	e018      	b.n	800171e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a26      	ldr	r2, [pc, #152]	; (800178c <HAL_RCC_OscConfig+0x280>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fbf6 	bl	8000ee8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fbf2 	bl	8000ee8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1a3      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d038      	beq.n	800179c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d019      	beq.n	8001766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fbd3 	bl	8000ee8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fbcf 	bl	8000ee8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e180      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x23a>
 8001764:	e01a      	b.n	800179c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x280>)
 8001768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x280>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fbb9 	bl	8000ee8 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fbb5 	bl	8000ee8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d903      	bls.n	8001790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e166      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
 800178c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ee      	bne.n	800177a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a4 	beq.w	80018f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017aa:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10d      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a88      	ldr	r2, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b86      	ldr	r3, [pc, #536]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d2:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x4d4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017de:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x4d4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x4d4>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb7d 	bl	8000ee8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fb79 	bl	8000ee8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	; 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e12a      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x4d4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x31a>
 8001818:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a6f      	ldr	r2, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e02d      	b.n	8001882 <HAL_RCC_OscConfig+0x376>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x33c>
 800182e:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a6a      	ldr	r2, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a67      	ldr	r2, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	e01c      	b.n	8001882 <HAL_RCC_OscConfig+0x376>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x35e>
 8001850:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a61      	ldr	r2, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0x376>
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a5b      	ldr	r2, [pc, #364]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d015      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fb2d 	bl	8000ee8 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fb29 	bl	8000ee8 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0d8      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ee      	beq.n	8001892 <HAL_RCC_OscConfig+0x386>
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff fb17 	bl	8000ee8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fb13 	bl	8000ee8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0c2      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ee      	bne.n	80018be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80ae 	beq.w	8001a58 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d06d      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d14b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a31      	ldr	r2, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fae4 	bl	8000ee8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fae0 	bl	8000ee8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e091      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	071b      	lsls	r3, r3, #28
 800196e:	491b      	ldr	r1, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fab2 	bl	8000ee8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff faae 	bl	8000ee8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e05f      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x47c>
 80019a6:	e057      	b.n	8001a58 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa98 	bl	8000ee8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff fa94 	bl	8000ee8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e045      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_OscConfig+0x4d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x4b0>
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x54c>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_RCC_OscConfig+0x558>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d030      	beq.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d129      	bne.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d122      	bne.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d119      	bne.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10f      	bne.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0d0      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	4965      	ldr	r1, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d040      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e073      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4936      	ldr	r1, [pc, #216]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f9c4 	bl	8000ee8 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f9c0 	bl	8000ee8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e053      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d210      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 020f 	bic.w	r2, r3, #15
 8001ba2:	4922      	ldr	r1, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1cc>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1d0>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1d4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f920 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08005e04 	.word	0x08005e04
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b094      	sub	sp, #80	; 0x50
 8001c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c50:	2300      	movs	r3, #0
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d00d      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x40>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	f200 80e1 	bhi.w	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c72:	e0db      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c78:	e0db      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7e:	e0d8      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	462b      	mov	r3, r5
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0159      	lsls	r1, r3, #5
 8001cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc4:	0150      	lsls	r0, r2, #5
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4621      	mov	r1, r4
 8001ccc:	1a51      	subs	r1, r2, r1
 8001cce:	6139      	str	r1, [r7, #16]
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	018b      	lsls	r3, r1, #6
 8001ce8:	4651      	mov	r1, sl
 8001cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cee:	4651      	mov	r1, sl
 8001cf0:	018a      	lsls	r2, r1, #6
 8001cf2:	4651      	mov	r1, sl
 8001cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	eb18 0303 	adds.w	r3, r8, r3
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	462b      	mov	r3, r5
 8001d20:	eb49 0303 	adc.w	r3, r9, r3
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d32:	4629      	mov	r1, r5
 8001d34:	024b      	lsls	r3, r1, #9
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	024a      	lsls	r2, r1, #9
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d46:	2200      	movs	r2, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d50:	f7fe fac6 	bl	80002e0 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	e058      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2200      	movs	r2, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	4611      	mov	r1, r2
 8001d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0159      	lsls	r1, r3, #5
 8001d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d8a:	0150      	lsls	r0, r2, #5
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4641      	mov	r1, r8
 8001d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d96:	4649      	mov	r1, r9
 8001d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db0:	ebb2 040a 	subs.w	r4, r2, sl
 8001db4:	eb63 050b 	sbc.w	r5, r3, fp
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	00eb      	lsls	r3, r5, #3
 8001dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc6:	00e2      	lsls	r2, r4, #3
 8001dc8:	4614      	mov	r4, r2
 8001dca:	461d      	mov	r5, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	18e3      	adds	r3, r4, r3
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	eb45 0303 	adc.w	r3, r5, r3
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de6:	4629      	mov	r1, r5
 8001de8:	028b      	lsls	r3, r1, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df0:	4621      	mov	r1, r4
 8001df2:	028a      	lsls	r2, r1, #10
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	61fa      	str	r2, [r7, #28]
 8001e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e04:	f7fe fa6c 	bl	80002e0 <__aeabi_uldivmod>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3750      	adds	r7, #80	; 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08005e14 	.word	0x08005e14

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08005e14 	.word	0x08005e14

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d012      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001edc:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a68      	ldr	r2, [pc, #416]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ee6:	6093      	str	r3, [r2, #8]
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	4964      	ldr	r1, [pc, #400]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	4959      	ldr	r1, [pc, #356]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	494a      	ldr	r1, [pc, #296]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f68:	d101      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 808b 	beq.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a39      	ldr	r2, [pc, #228]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fb0:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7fe ff94 	bl	8000ee8 <HAL_GetTick>
 8001fc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc4:	f7fe ff90 	bl	8000ee8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e38f      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d035      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d02e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002008:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d114      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe ff58 	bl	8000ee8 <HAL_GetTick>
 8002038:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe ff54 	bl	8000ee8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e351      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800206a:	d111      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800207a:	400b      	ands	r3, r1
 800207c:	4901      	ldr	r1, [pc, #4]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
 8002082:	e00b      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002084:	40023800 	.word	0x40023800
 8002088:	40007000 	.word	0x40007000
 800208c:	0ffffcff 	.word	0x0ffffcff
 8002090:	4bac      	ldr	r3, [pc, #688]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4aab      	ldr	r2, [pc, #684]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800209a:	6093      	str	r3, [r2, #8]
 800209c:	4ba9      	ldr	r3, [pc, #676]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a8:	49a6      	ldr	r1, [pc, #664]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020ba:	4ba2      	ldr	r3, [pc, #648]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c0:	4aa0      	ldr	r2, [pc, #640]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ca:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	499b      	ldr	r1, [pc, #620]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020e8:	4b96      	ldr	r3, [pc, #600]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f6:	4993      	ldr	r1, [pc, #588]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800210a:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002118:	498a      	ldr	r1, [pc, #552]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	4982      	ldr	r1, [pc, #520]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800214e:	4b7d      	ldr	r3, [pc, #500]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4979      	ldr	r1, [pc, #484]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002170:	4b74      	ldr	r3, [pc, #464]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4971      	ldr	r1, [pc, #452]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002192:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f023 020c 	bic.w	r2, r3, #12
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	4968      	ldr	r1, [pc, #416]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b4:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	4960      	ldr	r1, [pc, #384]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e4:	4957      	ldr	r1, [pc, #348]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021f8:	4b52      	ldr	r3, [pc, #328]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	494f      	ldr	r1, [pc, #316]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4946      	ldr	r1, [pc, #280]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	493e      	ldr	r1, [pc, #248]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002280:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d011      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b0:	4924      	ldr	r1, [pc, #144]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c0:	d101      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	4914      	ldr	r1, [pc, #80]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002314:	490b      	ldr	r1, [pc, #44]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002338:	4902      	ldr	r1, [pc, #8]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002340:	e002      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002354:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	4986      	ldr	r1, [pc, #536]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800237e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002388:	497d      	ldr	r1, [pc, #500]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d006      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80d6 	beq.w	8002550 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023a4:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe fd9a 	bl	8000ee8 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023b8:	f7fe fd96 	bl	8000ee8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e195      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d021      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11d      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	0e1b      	lsrs	r3, r3, #24
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	019a      	lsls	r2, r3, #6
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	4958      	ldr	r1, [pc, #352]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02e      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002450:	d129      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002460:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002466:	0f1b      	lsrs	r3, r3, #28
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	019a      	lsls	r2, r3, #6
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	041b      	lsls	r3, r3, #16
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	071b      	lsls	r3, r3, #28
 8002486:	493e      	ldr	r1, [pc, #248]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002494:	f023 021f 	bic.w	r2, r3, #31
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	3b01      	subs	r3, #1
 800249e:	4938      	ldr	r1, [pc, #224]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01d      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b8:	0e1b      	lsrs	r3, r3, #24
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c6:	0f1b      	lsrs	r3, r3, #28
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4926      	ldr	r1, [pc, #152]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d011      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	019a      	lsls	r2, r3, #6
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	491a      	ldr	r1, [pc, #104]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252a:	f7fe fcdd 	bl	8000ee8 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002532:	f7fe fcd9 	bl	8000ee8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	; 0x64
 800253e:	d901      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0d8      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 80ce 	bne.w	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe fcc0 	bl	8000ee8 <HAL_GetTick>
 8002568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800256a:	e00b      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800256c:	f7fe fcbc 	bl	8000ee8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d904      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0bb      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d0ec      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02e      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12a      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	0f1b      	lsrs	r3, r3, #28
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	019a      	lsls	r2, r3, #6
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	4944      	ldr	r1, [pc, #272]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025f6:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	493d      	ldr	r1, [pc, #244]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d022      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002624:	d11d      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	0e1b      	lsrs	r3, r3, #24
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	0f1b      	lsrs	r3, r3, #28
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	019a      	lsls	r2, r3, #6
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	431a      	orrs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	4929      	ldr	r1, [pc, #164]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	0e1b      	lsrs	r3, r3, #24
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	019a      	lsls	r2, r3, #6
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	071b      	lsls	r3, r3, #28
 80026a2:	4917      	ldr	r1, [pc, #92]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	4911      	ldr	r1, [pc, #68]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc0c 	bl	8000ee8 <HAL_GetTick>
 80026d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026d4:	f7fe fc08 	bl	8000ee8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e007      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f2:	d1ef      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e040      	b.n	8002798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fa92 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f974 	bl	8002a30 <UART_SetConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e022      	b.n	8002798 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fbcc 	bl	8002ef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800276e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fc53 	bl	800303c <UART_CheckIdleState>
 8002796:	4603      	mov	r3, r0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d171      	bne.n	800289c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x24>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e06a      	b.n	800289e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2221      	movs	r2, #33	; 0x21
 80027d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fb87 	bl	8000ee8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f4:	d108      	bne.n	8002808 <HAL_UART_Transmit+0x68>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e003      	b.n	8002810 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002810:	e02c      	b.n	800286c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fc5a 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e038      	b.n	800289e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3302      	adds	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e007      	b.n	800285a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1cc      	bne.n	8002812 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	2140      	movs	r1, #64	; 0x40
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fc27 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e005      	b.n	800289e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08a      	sub	sp, #40	; 0x28
 80028aa:	af02      	add	r7, sp, #8
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028bc:	2b20      	cmp	r3, #32
 80028be:	f040 80b1 	bne.w	8002a24 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_UART_Receive+0x28>
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0a9      	b.n	8002a26 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2222      	movs	r2, #34	; 0x22
 80028de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fafe 	bl	8000ee8 <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	d10e      	bne.n	8002926 <HAL_UART_Receive+0x80>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_UART_Receive+0x76>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800291a:	e02d      	b.n	8002978 <HAL_UART_Receive+0xd2>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	22ff      	movs	r2, #255	; 0xff
 8002920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002924:	e028      	b.n	8002978 <HAL_UART_Receive+0xd2>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_UART_Receive+0xa4>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_UART_Receive+0x9a>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800293e:	e01b      	b.n	8002978 <HAL_UART_Receive+0xd2>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	227f      	movs	r2, #127	; 0x7f
 8002944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002948:	e016      	b.n	8002978 <HAL_UART_Receive+0xd2>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002952:	d10d      	bne.n	8002970 <HAL_UART_Receive+0xca>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_UART_Receive+0xc0>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	227f      	movs	r2, #127	; 0x7f
 8002960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002964:	e008      	b.n	8002978 <HAL_UART_Receive+0xd2>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	223f      	movs	r2, #63	; 0x3f
 800296a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800296e:	e003      	b.n	8002978 <HAL_UART_Receive+0xd2>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800297e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d108      	bne.n	800299c <HAL_UART_Receive+0xf6>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e003      	b.n	80029a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80029a4:	e032      	b.n	8002a0c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2120      	movs	r1, #32
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fb90 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e032      	b.n	8002a26 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	8a7b      	ldrh	r3, [r7, #18]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	3302      	adds	r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e00c      	b.n	80029fa <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8a7b      	ldrh	r3, [r7, #18]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4013      	ands	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1c6      	bne.n	80029a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4ba6      	ldr	r3, [pc, #664]	; (8002cf4 <UART_SetConfig+0x2c4>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a94      	ldr	r2, [pc, #592]	; (8002cf8 <UART_SetConfig+0x2c8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d120      	bne.n	8002aee <UART_SetConfig+0xbe>
 8002aac:	4b93      	ldr	r3, [pc, #588]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d816      	bhi.n	8002ae8 <UART_SetConfig+0xb8>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x90>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ad7 	.word	0x08002ad7
 8002acc:	08002ae3 	.word	0x08002ae3
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e150      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e14d      	b.n	8002d78 <UART_SetConfig+0x348>
 8002adc:	2304      	movs	r3, #4
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e14a      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e147      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ae8:	2310      	movs	r3, #16
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e144      	b.n	8002d78 <UART_SetConfig+0x348>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a83      	ldr	r2, [pc, #524]	; (8002d00 <UART_SetConfig+0x2d0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d132      	bne.n	8002b5e <UART_SetConfig+0x12e>
 8002af8:	4b80      	ldr	r3, [pc, #512]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d828      	bhi.n	8002b58 <UART_SetConfig+0x128>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0xdc>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b41 	.word	0x08002b41
 8002b10:	08002b59 	.word	0x08002b59
 8002b14:	08002b59 	.word	0x08002b59
 8002b18:	08002b59 	.word	0x08002b59
 8002b1c:	08002b4d 	.word	0x08002b4d
 8002b20:	08002b59 	.word	0x08002b59
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002b59 	.word	0x08002b59
 8002b2c:	08002b47 	.word	0x08002b47
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b59 	.word	0x08002b59
 8002b3c:	08002b53 	.word	0x08002b53
 8002b40:	2300      	movs	r3, #0
 8002b42:	77fb      	strb	r3, [r7, #31]
 8002b44:	e118      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b46:	2302      	movs	r3, #2
 8002b48:	77fb      	strb	r3, [r7, #31]
 8002b4a:	e115      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e112      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b52:	2308      	movs	r3, #8
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e10f      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b58:	2310      	movs	r3, #16
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e10c      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d120      	bne.n	8002baa <UART_SetConfig+0x17a>
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b72:	2b30      	cmp	r3, #48	; 0x30
 8002b74:	d013      	beq.n	8002b9e <UART_SetConfig+0x16e>
 8002b76:	2b30      	cmp	r3, #48	; 0x30
 8002b78:	d814      	bhi.n	8002ba4 <UART_SetConfig+0x174>
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d009      	beq.n	8002b92 <UART_SetConfig+0x162>
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d810      	bhi.n	8002ba4 <UART_SetConfig+0x174>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <UART_SetConfig+0x15c>
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d006      	beq.n	8002b98 <UART_SetConfig+0x168>
 8002b8a:	e00b      	b.n	8002ba4 <UART_SetConfig+0x174>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e0f2      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b92:	2302      	movs	r3, #2
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	e0ef      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e0ec      	b.n	8002d78 <UART_SetConfig+0x348>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	77fb      	strb	r3, [r7, #31]
 8002ba2:	e0e9      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e0e6      	b.n	8002d78 <UART_SetConfig+0x348>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <UART_SetConfig+0x2d8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d120      	bne.n	8002bf6 <UART_SetConfig+0x1c6>
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002bc0:	d013      	beq.n	8002bea <UART_SetConfig+0x1ba>
 8002bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002bc4:	d814      	bhi.n	8002bf0 <UART_SetConfig+0x1c0>
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d009      	beq.n	8002bde <UART_SetConfig+0x1ae>
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d810      	bhi.n	8002bf0 <UART_SetConfig+0x1c0>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <UART_SetConfig+0x1a8>
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d006      	beq.n	8002be4 <UART_SetConfig+0x1b4>
 8002bd6:	e00b      	b.n	8002bf0 <UART_SetConfig+0x1c0>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e0cc      	b.n	8002d78 <UART_SetConfig+0x348>
 8002bde:	2302      	movs	r3, #2
 8002be0:	77fb      	strb	r3, [r7, #31]
 8002be2:	e0c9      	b.n	8002d78 <UART_SetConfig+0x348>
 8002be4:	2304      	movs	r3, #4
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	e0c6      	b.n	8002d78 <UART_SetConfig+0x348>
 8002bea:	2308      	movs	r3, #8
 8002bec:	77fb      	strb	r3, [r7, #31]
 8002bee:	e0c3      	b.n	8002d78 <UART_SetConfig+0x348>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	77fb      	strb	r3, [r7, #31]
 8002bf4:	e0c0      	b.n	8002d78 <UART_SetConfig+0x348>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <UART_SetConfig+0x2dc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d125      	bne.n	8002c4c <UART_SetConfig+0x21c>
 8002c00:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0e:	d017      	beq.n	8002c40 <UART_SetConfig+0x210>
 8002c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c14:	d817      	bhi.n	8002c46 <UART_SetConfig+0x216>
 8002c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1a:	d00b      	beq.n	8002c34 <UART_SetConfig+0x204>
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c20:	d811      	bhi.n	8002c46 <UART_SetConfig+0x216>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <UART_SetConfig+0x1fe>
 8002c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2a:	d006      	beq.n	8002c3a <UART_SetConfig+0x20a>
 8002c2c:	e00b      	b.n	8002c46 <UART_SetConfig+0x216>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	77fb      	strb	r3, [r7, #31]
 8002c32:	e0a1      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c34:	2302      	movs	r3, #2
 8002c36:	77fb      	strb	r3, [r7, #31]
 8002c38:	e09e      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	e09b      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c40:	2308      	movs	r3, #8
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e098      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c46:	2310      	movs	r3, #16
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e095      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <UART_SetConfig+0x2e0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d125      	bne.n	8002ca2 <UART_SetConfig+0x272>
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c64:	d017      	beq.n	8002c96 <UART_SetConfig+0x266>
 8002c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c6a:	d817      	bhi.n	8002c9c <UART_SetConfig+0x26c>
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	d00b      	beq.n	8002c8a <UART_SetConfig+0x25a>
 8002c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c76:	d811      	bhi.n	8002c9c <UART_SetConfig+0x26c>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <UART_SetConfig+0x254>
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d006      	beq.n	8002c90 <UART_SetConfig+0x260>
 8002c82:	e00b      	b.n	8002c9c <UART_SetConfig+0x26c>
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e076      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	e073      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c90:	2304      	movs	r3, #4
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	e070      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c96:	2308      	movs	r3, #8
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e06d      	b.n	8002d78 <UART_SetConfig+0x348>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e06a      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <UART_SetConfig+0x2e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d138      	bne.n	8002d1e <UART_SetConfig+0x2ee>
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cba:	d017      	beq.n	8002cec <UART_SetConfig+0x2bc>
 8002cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc0:	d82a      	bhi.n	8002d18 <UART_SetConfig+0x2e8>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	d00b      	beq.n	8002ce0 <UART_SetConfig+0x2b0>
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d824      	bhi.n	8002d18 <UART_SetConfig+0x2e8>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <UART_SetConfig+0x2aa>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d006      	beq.n	8002ce6 <UART_SetConfig+0x2b6>
 8002cd8:	e01e      	b.n	8002d18 <UART_SetConfig+0x2e8>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e04b      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e048      	b.n	8002d78 <UART_SetConfig+0x348>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e045      	b.n	8002d78 <UART_SetConfig+0x348>
 8002cec:	2308      	movs	r3, #8
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e042      	b.n	8002d78 <UART_SetConfig+0x348>
 8002cf2:	bf00      	nop
 8002cf4:	efff69f3 	.word	0xefff69f3
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40004800 	.word	0x40004800
 8002d08:	40004c00 	.word	0x40004c00
 8002d0c:	40005000 	.word	0x40005000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	40007800 	.word	0x40007800
 8002d18:	2310      	movs	r3, #16
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e02c      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	; (8002eec <UART_SetConfig+0x4bc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <UART_SetConfig+0x344>
 8002d28:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <UART_SetConfig+0x4c0>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d36:	d017      	beq.n	8002d68 <UART_SetConfig+0x338>
 8002d38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d3c:	d817      	bhi.n	8002d6e <UART_SetConfig+0x33e>
 8002d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d42:	d00b      	beq.n	8002d5c <UART_SetConfig+0x32c>
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d48:	d811      	bhi.n	8002d6e <UART_SetConfig+0x33e>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <UART_SetConfig+0x326>
 8002d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d52:	d006      	beq.n	8002d62 <UART_SetConfig+0x332>
 8002d54:	e00b      	b.n	8002d6e <UART_SetConfig+0x33e>
 8002d56:	2300      	movs	r3, #0
 8002d58:	77fb      	strb	r3, [r7, #31]
 8002d5a:	e00d      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e00a      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d62:	2304      	movs	r3, #4
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e007      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d68:	2308      	movs	r3, #8
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e004      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d6e:	2310      	movs	r3, #16
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e001      	b.n	8002d78 <UART_SetConfig+0x348>
 8002d74:	2310      	movs	r3, #16
 8002d76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d80:	d15b      	bne.n	8002e3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d828      	bhi.n	8002dda <UART_SetConfig+0x3aa>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0x360>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002dbd 	.word	0x08002dbd
 8002d98:	08002dc5 	.word	0x08002dc5
 8002d9c:	08002ddb 	.word	0x08002ddb
 8002da0:	08002dcb 	.word	0x08002dcb
 8002da4:	08002ddb 	.word	0x08002ddb
 8002da8:	08002ddb 	.word	0x08002ddb
 8002dac:	08002ddb 	.word	0x08002ddb
 8002db0:	08002dd3 	.word	0x08002dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff f856 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002db8:	61b8      	str	r0, [r7, #24]
        break;
 8002dba:	e013      	b.n	8002de4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dbc:	f7ff f866 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002dc0:	61b8      	str	r0, [r7, #24]
        break;
 8002dc2:	e00f      	b.n	8002de4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <UART_SetConfig+0x4c4>)
 8002dc6:	61bb      	str	r3, [r7, #24]
        break;
 8002dc8:	e00c      	b.n	8002de4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dca:	f7fe ff39 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8002dce:	61b8      	str	r0, [r7, #24]
        break;
 8002dd0:	e008      	b.n	8002de4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd6:	61bb      	str	r3, [r7, #24]
        break;
 8002dd8:	e004      	b.n	8002de4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	77bb      	strb	r3, [r7, #30]
        break;
 8002de2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d074      	beq.n	8002ed4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	005a      	lsls	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d916      	bls.n	8002e34 <UART_SetConfig+0x404>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d212      	bcs.n	8002e34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	89fa      	ldrh	r2, [r7, #14]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	e04f      	b.n	8002ed4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	77bb      	strb	r3, [r7, #30]
 8002e38:	e04c      	b.n	8002ed4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d828      	bhi.n	8002e92 <UART_SetConfig+0x462>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x418>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002e93 	.word	0x08002e93
 8002e58:	08002e83 	.word	0x08002e83
 8002e5c:	08002e93 	.word	0x08002e93
 8002e60:	08002e93 	.word	0x08002e93
 8002e64:	08002e93 	.word	0x08002e93
 8002e68:	08002e8b 	.word	0x08002e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7fe fffa 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002e70:	61b8      	str	r0, [r7, #24]
        break;
 8002e72:	e013      	b.n	8002e9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7ff f80a 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002e78:	61b8      	str	r0, [r7, #24]
        break;
 8002e7a:	e00f      	b.n	8002e9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <UART_SetConfig+0x4c4>)
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e00c      	b.n	8002e9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e82:	f7fe fedd 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8002e86:	61b8      	str	r0, [r7, #24]
        break;
 8002e88:	e008      	b.n	8002e9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8e:	61bb      	str	r3, [r7, #24]
        break;
 8002e90:	e004      	b.n	8002e9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77bb      	strb	r3, [r7, #30]
        break;
 8002e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d018      	beq.n	8002ed4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	085a      	lsrs	r2, r3, #1
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	441a      	add	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b0f      	cmp	r3, #15
 8002eba:	d909      	bls.n	8002ed0 <UART_SetConfig+0x4a0>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec2:	d205      	bcs.n	8002ed0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e001      	b.n	8002ed4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40007c00 	.word	0x40007c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01a      	beq.n	800300e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d10a      	bne.n	800300e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800304c:	f7fd ff4c 	bl	8000ee8 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d10e      	bne.n	800307e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f831 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e027      	b.n	80030ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d10e      	bne.n	80030aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f81b 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e011      	b.n	80030ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b09c      	sub	sp, #112	; 0x70
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	e0a7      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	f000 80a3 	beq.w	8003238 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fd fef9 	bl	8000ee8 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <UART_WaitOnFlagUntilTimeout+0x32>
 8003102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003104:	2b00      	cmp	r3, #0
 8003106:	d13f      	bne.n	8003188 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800311c:	667b      	str	r3, [r7, #100]	; 0x64
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003128:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800312c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e6      	bne.n	8003108 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3308      	adds	r3, #8
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	663b      	str	r3, [r7, #96]	; 0x60
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3308      	adds	r3, #8
 8003158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315a:	64ba      	str	r2, [r7, #72]	; 0x48
 800315c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e5      	bne.n	800313a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e068      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d050      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a4:	d148      	bne.n	8003238 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
 80031d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e6      	bne.n	80031b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3308      	adds	r3, #8
 80031e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	613b      	str	r3, [r7, #16]
   return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3308      	adds	r3, #8
 8003200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003202:	623a      	str	r2, [r7, #32]
 8003204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e010      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	429a      	cmp	r2, r3
 8003254:	f43f af48 	beq.w	80030e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3770      	adds	r7, #112	; 0x70
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <atoi>:
 8003262:	220a      	movs	r2, #10
 8003264:	2100      	movs	r1, #0
 8003266:	f000 ba3d 	b.w	80036e4 <strtol>
	...

0800326c <__errno>:
 800326c:	4b01      	ldr	r3, [pc, #4]	; (8003274 <__errno+0x8>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	2000000c 	.word	0x2000000c

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	4d0d      	ldr	r5, [pc, #52]	; (80032b0 <__libc_init_array+0x38>)
 800327c:	4c0d      	ldr	r4, [pc, #52]	; (80032b4 <__libc_init_array+0x3c>)
 800327e:	1b64      	subs	r4, r4, r5
 8003280:	10a4      	asrs	r4, r4, #2
 8003282:	2600      	movs	r6, #0
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	4d0b      	ldr	r5, [pc, #44]	; (80032b8 <__libc_init_array+0x40>)
 800328a:	4c0c      	ldr	r4, [pc, #48]	; (80032bc <__libc_init_array+0x44>)
 800328c:	f001 ff9a 	bl	80051c4 <_init>
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	2600      	movs	r6, #0
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a0:	4798      	blx	r3
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032aa:	4798      	blx	r3
 80032ac:	3601      	adds	r6, #1
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	08006000 	.word	0x08006000
 80032b4:	08006000 	.word	0x08006000
 80032b8:	08006000 	.word	0x08006000
 80032bc:	08006004 	.word	0x08006004

080032c0 <__itoa>:
 80032c0:	1e93      	subs	r3, r2, #2
 80032c2:	2b22      	cmp	r3, #34	; 0x22
 80032c4:	b510      	push	{r4, lr}
 80032c6:	460c      	mov	r4, r1
 80032c8:	d904      	bls.n	80032d4 <__itoa+0x14>
 80032ca:	2300      	movs	r3, #0
 80032cc:	700b      	strb	r3, [r1, #0]
 80032ce:	461c      	mov	r4, r3
 80032d0:	4620      	mov	r0, r4
 80032d2:	bd10      	pop	{r4, pc}
 80032d4:	2a0a      	cmp	r2, #10
 80032d6:	d109      	bne.n	80032ec <__itoa+0x2c>
 80032d8:	2800      	cmp	r0, #0
 80032da:	da07      	bge.n	80032ec <__itoa+0x2c>
 80032dc:	232d      	movs	r3, #45	; 0x2d
 80032de:	700b      	strb	r3, [r1, #0]
 80032e0:	4240      	negs	r0, r0
 80032e2:	2101      	movs	r1, #1
 80032e4:	4421      	add	r1, r4
 80032e6:	f000 fa07 	bl	80036f8 <__utoa>
 80032ea:	e7f1      	b.n	80032d0 <__itoa+0x10>
 80032ec:	2100      	movs	r1, #0
 80032ee:	e7f9      	b.n	80032e4 <__itoa+0x24>

080032f0 <itoa>:
 80032f0:	f7ff bfe6 	b.w	80032c0 <__itoa>

080032f4 <memset>:
 80032f4:	4402      	add	r2, r0
 80032f6:	4603      	mov	r3, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <memset+0xa>
 80032fc:	4770      	bx	lr
 80032fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003302:	e7f9      	b.n	80032f8 <memset+0x4>

08003304 <iprintf>:
 8003304:	b40f      	push	{r0, r1, r2, r3}
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <iprintf+0x2c>)
 8003308:	b513      	push	{r0, r1, r4, lr}
 800330a:	681c      	ldr	r4, [r3, #0]
 800330c:	b124      	cbz	r4, 8003318 <iprintf+0x14>
 800330e:	69a3      	ldr	r3, [r4, #24]
 8003310:	b913      	cbnz	r3, 8003318 <iprintf+0x14>
 8003312:	4620      	mov	r0, r4
 8003314:	f000 fc1e 	bl	8003b54 <__sinit>
 8003318:	ab05      	add	r3, sp, #20
 800331a:	9a04      	ldr	r2, [sp, #16]
 800331c:	68a1      	ldr	r1, [r4, #8]
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	4620      	mov	r0, r4
 8003322:	f000 fe4b 	bl	8003fbc <_vfiprintf_r>
 8003326:	b002      	add	sp, #8
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332c:	b004      	add	sp, #16
 800332e:	4770      	bx	lr
 8003330:	2000000c 	.word	0x2000000c

08003334 <_puts_r>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	460e      	mov	r6, r1
 8003338:	4605      	mov	r5, r0
 800333a:	b118      	cbz	r0, 8003344 <_puts_r+0x10>
 800333c:	6983      	ldr	r3, [r0, #24]
 800333e:	b90b      	cbnz	r3, 8003344 <_puts_r+0x10>
 8003340:	f000 fc08 	bl	8003b54 <__sinit>
 8003344:	69ab      	ldr	r3, [r5, #24]
 8003346:	68ac      	ldr	r4, [r5, #8]
 8003348:	b913      	cbnz	r3, 8003350 <_puts_r+0x1c>
 800334a:	4628      	mov	r0, r5
 800334c:	f000 fc02 	bl	8003b54 <__sinit>
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <_puts_r+0xd0>)
 8003352:	429c      	cmp	r4, r3
 8003354:	d120      	bne.n	8003398 <_puts_r+0x64>
 8003356:	686c      	ldr	r4, [r5, #4]
 8003358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800335a:	07db      	lsls	r3, r3, #31
 800335c:	d405      	bmi.n	800336a <_puts_r+0x36>
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	0598      	lsls	r0, r3, #22
 8003362:	d402      	bmi.n	800336a <_puts_r+0x36>
 8003364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003366:	f000 fcb0 	bl	8003cca <__retarget_lock_acquire_recursive>
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	0719      	lsls	r1, r3, #28
 800336e:	d51d      	bpl.n	80033ac <_puts_r+0x78>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	b1db      	cbz	r3, 80033ac <_puts_r+0x78>
 8003374:	3e01      	subs	r6, #1
 8003376:	68a3      	ldr	r3, [r4, #8]
 8003378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800337c:	3b01      	subs	r3, #1
 800337e:	60a3      	str	r3, [r4, #8]
 8003380:	bb39      	cbnz	r1, 80033d2 <_puts_r+0x9e>
 8003382:	2b00      	cmp	r3, #0
 8003384:	da38      	bge.n	80033f8 <_puts_r+0xc4>
 8003386:	4622      	mov	r2, r4
 8003388:	210a      	movs	r1, #10
 800338a:	4628      	mov	r0, r5
 800338c:	f000 f9f6 	bl	800377c <__swbuf_r>
 8003390:	3001      	adds	r0, #1
 8003392:	d011      	beq.n	80033b8 <_puts_r+0x84>
 8003394:	250a      	movs	r5, #10
 8003396:	e011      	b.n	80033bc <_puts_r+0x88>
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <_puts_r+0xd4>)
 800339a:	429c      	cmp	r4, r3
 800339c:	d101      	bne.n	80033a2 <_puts_r+0x6e>
 800339e:	68ac      	ldr	r4, [r5, #8]
 80033a0:	e7da      	b.n	8003358 <_puts_r+0x24>
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <_puts_r+0xd8>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	bf08      	it	eq
 80033a8:	68ec      	ldreq	r4, [r5, #12]
 80033aa:	e7d5      	b.n	8003358 <_puts_r+0x24>
 80033ac:	4621      	mov	r1, r4
 80033ae:	4628      	mov	r0, r5
 80033b0:	f000 fa36 	bl	8003820 <__swsetup_r>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d0dd      	beq.n	8003374 <_puts_r+0x40>
 80033b8:	f04f 35ff 	mov.w	r5, #4294967295
 80033bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033be:	07da      	lsls	r2, r3, #31
 80033c0:	d405      	bmi.n	80033ce <_puts_r+0x9a>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	059b      	lsls	r3, r3, #22
 80033c6:	d402      	bmi.n	80033ce <_puts_r+0x9a>
 80033c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ca:	f000 fc7f 	bl	8003ccc <__retarget_lock_release_recursive>
 80033ce:	4628      	mov	r0, r5
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	da04      	bge.n	80033e0 <_puts_r+0xac>
 80033d6:	69a2      	ldr	r2, [r4, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	dc06      	bgt.n	80033ea <_puts_r+0xb6>
 80033dc:	290a      	cmp	r1, #10
 80033de:	d004      	beq.n	80033ea <_puts_r+0xb6>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	6022      	str	r2, [r4, #0]
 80033e6:	7019      	strb	r1, [r3, #0]
 80033e8:	e7c5      	b.n	8003376 <_puts_r+0x42>
 80033ea:	4622      	mov	r2, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	f000 f9c5 	bl	800377c <__swbuf_r>
 80033f2:	3001      	adds	r0, #1
 80033f4:	d1bf      	bne.n	8003376 <_puts_r+0x42>
 80033f6:	e7df      	b.n	80033b8 <_puts_r+0x84>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	250a      	movs	r5, #10
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	6022      	str	r2, [r4, #0]
 8003400:	701d      	strb	r5, [r3, #0]
 8003402:	e7db      	b.n	80033bc <_puts_r+0x88>
 8003404:	08005f68 	.word	0x08005f68
 8003408:	08005f88 	.word	0x08005f88
 800340c:	08005f48 	.word	0x08005f48

08003410 <puts>:
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <puts+0xc>)
 8003412:	4601      	mov	r1, r0
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	f7ff bf8d 	b.w	8003334 <_puts_r>
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c

08003420 <iscanf>:
 8003420:	b40f      	push	{r0, r1, r2, r3}
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <iscanf+0x2c>)
 8003424:	b513      	push	{r0, r1, r4, lr}
 8003426:	681c      	ldr	r4, [r3, #0]
 8003428:	b124      	cbz	r4, 8003434 <iscanf+0x14>
 800342a:	69a3      	ldr	r3, [r4, #24]
 800342c:	b913      	cbnz	r3, 8003434 <iscanf+0x14>
 800342e:	4620      	mov	r0, r4
 8003430:	f000 fb90 	bl	8003b54 <__sinit>
 8003434:	ab05      	add	r3, sp, #20
 8003436:	9a04      	ldr	r2, [sp, #16]
 8003438:	6861      	ldr	r1, [r4, #4]
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	4620      	mov	r0, r4
 800343e:	f001 fa27 	bl	8004890 <_vfiscanf_r>
 8003442:	b002      	add	sp, #8
 8003444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003448:	b004      	add	sp, #16
 800344a:	4770      	bx	lr
 800344c:	2000000c 	.word	0x2000000c

08003450 <setvbuf>:
 8003450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003454:	461d      	mov	r5, r3
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <setvbuf+0x17c>)
 8003458:	681f      	ldr	r7, [r3, #0]
 800345a:	4604      	mov	r4, r0
 800345c:	460e      	mov	r6, r1
 800345e:	4690      	mov	r8, r2
 8003460:	b127      	cbz	r7, 800346c <setvbuf+0x1c>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	b913      	cbnz	r3, 800346c <setvbuf+0x1c>
 8003466:	4638      	mov	r0, r7
 8003468:	f000 fb74 	bl	8003b54 <__sinit>
 800346c:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <setvbuf+0x180>)
 800346e:	429c      	cmp	r4, r3
 8003470:	d167      	bne.n	8003542 <setvbuf+0xf2>
 8003472:	687c      	ldr	r4, [r7, #4]
 8003474:	f1b8 0f02 	cmp.w	r8, #2
 8003478:	d006      	beq.n	8003488 <setvbuf+0x38>
 800347a:	f1b8 0f01 	cmp.w	r8, #1
 800347e:	f200 809f 	bhi.w	80035c0 <setvbuf+0x170>
 8003482:	2d00      	cmp	r5, #0
 8003484:	f2c0 809c 	blt.w	80035c0 <setvbuf+0x170>
 8003488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800348a:	07db      	lsls	r3, r3, #31
 800348c:	d405      	bmi.n	800349a <setvbuf+0x4a>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	0598      	lsls	r0, r3, #22
 8003492:	d402      	bmi.n	800349a <setvbuf+0x4a>
 8003494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003496:	f000 fc18 	bl	8003cca <__retarget_lock_acquire_recursive>
 800349a:	4621      	mov	r1, r4
 800349c:	4638      	mov	r0, r7
 800349e:	f000 fab3 	bl	8003a08 <_fflush_r>
 80034a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034a4:	b141      	cbz	r1, 80034b8 <setvbuf+0x68>
 80034a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034aa:	4299      	cmp	r1, r3
 80034ac:	d002      	beq.n	80034b4 <setvbuf+0x64>
 80034ae:	4638      	mov	r0, r7
 80034b0:	f000 fc7a 	bl	8003da8 <_free_r>
 80034b4:	2300      	movs	r3, #0
 80034b6:	6363      	str	r3, [r4, #52]	; 0x34
 80034b8:	2300      	movs	r3, #0
 80034ba:	61a3      	str	r3, [r4, #24]
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	0619      	lsls	r1, r3, #24
 80034c2:	d503      	bpl.n	80034cc <setvbuf+0x7c>
 80034c4:	6921      	ldr	r1, [r4, #16]
 80034c6:	4638      	mov	r0, r7
 80034c8:	f000 fc6e 	bl	8003da8 <_free_r>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	f1b8 0f02 	cmp.w	r8, #2
 80034da:	81a3      	strh	r3, [r4, #12]
 80034dc:	d06c      	beq.n	80035b8 <setvbuf+0x168>
 80034de:	ab01      	add	r3, sp, #4
 80034e0:	466a      	mov	r2, sp
 80034e2:	4621      	mov	r1, r4
 80034e4:	4638      	mov	r0, r7
 80034e6:	f000 fbf2 	bl	8003cce <__swhatbuf_r>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	4318      	orrs	r0, r3
 80034ee:	81a0      	strh	r0, [r4, #12]
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	d130      	bne.n	8003556 <setvbuf+0x106>
 80034f4:	9d00      	ldr	r5, [sp, #0]
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 fc4e 	bl	8003d98 <malloc>
 80034fc:	4606      	mov	r6, r0
 80034fe:	2800      	cmp	r0, #0
 8003500:	d155      	bne.n	80035ae <setvbuf+0x15e>
 8003502:	f8dd 9000 	ldr.w	r9, [sp]
 8003506:	45a9      	cmp	r9, r5
 8003508:	d14a      	bne.n	80035a0 <setvbuf+0x150>
 800350a:	f04f 35ff 	mov.w	r5, #4294967295
 800350e:	2200      	movs	r2, #0
 8003510:	60a2      	str	r2, [r4, #8]
 8003512:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003516:	6022      	str	r2, [r4, #0]
 8003518:	6122      	str	r2, [r4, #16]
 800351a:	2201      	movs	r2, #1
 800351c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003520:	6162      	str	r2, [r4, #20]
 8003522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	07d2      	lsls	r2, r2, #31
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	d405      	bmi.n	800353a <setvbuf+0xea>
 800352e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003532:	d102      	bne.n	800353a <setvbuf+0xea>
 8003534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003536:	f000 fbc9 	bl	8003ccc <__retarget_lock_release_recursive>
 800353a:	4628      	mov	r0, r5
 800353c:	b003      	add	sp, #12
 800353e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <setvbuf+0x184>)
 8003544:	429c      	cmp	r4, r3
 8003546:	d101      	bne.n	800354c <setvbuf+0xfc>
 8003548:	68bc      	ldr	r4, [r7, #8]
 800354a:	e793      	b.n	8003474 <setvbuf+0x24>
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <setvbuf+0x188>)
 800354e:	429c      	cmp	r4, r3
 8003550:	bf08      	it	eq
 8003552:	68fc      	ldreq	r4, [r7, #12]
 8003554:	e78e      	b.n	8003474 <setvbuf+0x24>
 8003556:	2e00      	cmp	r6, #0
 8003558:	d0cd      	beq.n	80034f6 <setvbuf+0xa6>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	b913      	cbnz	r3, 8003564 <setvbuf+0x114>
 800355e:	4638      	mov	r0, r7
 8003560:	f000 faf8 	bl	8003b54 <__sinit>
 8003564:	f1b8 0f01 	cmp.w	r8, #1
 8003568:	bf08      	it	eq
 800356a:	89a3      	ldrheq	r3, [r4, #12]
 800356c:	6026      	str	r6, [r4, #0]
 800356e:	bf04      	itt	eq
 8003570:	f043 0301 	orreq.w	r3, r3, #1
 8003574:	81a3      	strheq	r3, [r4, #12]
 8003576:	89a2      	ldrh	r2, [r4, #12]
 8003578:	f012 0308 	ands.w	r3, r2, #8
 800357c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003580:	d01c      	beq.n	80035bc <setvbuf+0x16c>
 8003582:	07d3      	lsls	r3, r2, #31
 8003584:	bf41      	itttt	mi
 8003586:	2300      	movmi	r3, #0
 8003588:	426d      	negmi	r5, r5
 800358a:	60a3      	strmi	r3, [r4, #8]
 800358c:	61a5      	strmi	r5, [r4, #24]
 800358e:	bf58      	it	pl
 8003590:	60a5      	strpl	r5, [r4, #8]
 8003592:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003594:	f015 0501 	ands.w	r5, r5, #1
 8003598:	d115      	bne.n	80035c6 <setvbuf+0x176>
 800359a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800359e:	e7c8      	b.n	8003532 <setvbuf+0xe2>
 80035a0:	4648      	mov	r0, r9
 80035a2:	f000 fbf9 	bl	8003d98 <malloc>
 80035a6:	4606      	mov	r6, r0
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d0ae      	beq.n	800350a <setvbuf+0xba>
 80035ac:	464d      	mov	r5, r9
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	e7d0      	b.n	800355a <setvbuf+0x10a>
 80035b8:	2500      	movs	r5, #0
 80035ba:	e7a8      	b.n	800350e <setvbuf+0xbe>
 80035bc:	60a3      	str	r3, [r4, #8]
 80035be:	e7e8      	b.n	8003592 <setvbuf+0x142>
 80035c0:	f04f 35ff 	mov.w	r5, #4294967295
 80035c4:	e7b9      	b.n	800353a <setvbuf+0xea>
 80035c6:	2500      	movs	r5, #0
 80035c8:	e7b7      	b.n	800353a <setvbuf+0xea>
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	08005f68 	.word	0x08005f68
 80035d4:	08005f88 	.word	0x08005f88
 80035d8:	08005f48 	.word	0x08005f48

080035dc <_strtol_l.constprop.0>:
 80035dc:	2b01      	cmp	r3, #1
 80035de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e2:	d001      	beq.n	80035e8 <_strtol_l.constprop.0+0xc>
 80035e4:	2b24      	cmp	r3, #36	; 0x24
 80035e6:	d906      	bls.n	80035f6 <_strtol_l.constprop.0+0x1a>
 80035e8:	f7ff fe40 	bl	800326c <__errno>
 80035ec:	2316      	movs	r3, #22
 80035ee:	6003      	str	r3, [r0, #0]
 80035f0:	2000      	movs	r0, #0
 80035f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80036dc <_strtol_l.constprop.0+0x100>
 80035fa:	460d      	mov	r5, r1
 80035fc:	462e      	mov	r6, r5
 80035fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003602:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003606:	f017 0708 	ands.w	r7, r7, #8
 800360a:	d1f7      	bne.n	80035fc <_strtol_l.constprop.0+0x20>
 800360c:	2c2d      	cmp	r4, #45	; 0x2d
 800360e:	d132      	bne.n	8003676 <_strtol_l.constprop.0+0x9a>
 8003610:	782c      	ldrb	r4, [r5, #0]
 8003612:	2701      	movs	r7, #1
 8003614:	1cb5      	adds	r5, r6, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d05b      	beq.n	80036d2 <_strtol_l.constprop.0+0xf6>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d109      	bne.n	8003632 <_strtol_l.constprop.0+0x56>
 800361e:	2c30      	cmp	r4, #48	; 0x30
 8003620:	d107      	bne.n	8003632 <_strtol_l.constprop.0+0x56>
 8003622:	782c      	ldrb	r4, [r5, #0]
 8003624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003628:	2c58      	cmp	r4, #88	; 0x58
 800362a:	d14d      	bne.n	80036c8 <_strtol_l.constprop.0+0xec>
 800362c:	786c      	ldrb	r4, [r5, #1]
 800362e:	2310      	movs	r3, #16
 8003630:	3502      	adds	r5, #2
 8003632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003636:	f108 38ff 	add.w	r8, r8, #4294967295
 800363a:	f04f 0c00 	mov.w	ip, #0
 800363e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003642:	4666      	mov	r6, ip
 8003644:	fb03 8a19 	mls	sl, r3, r9, r8
 8003648:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800364c:	f1be 0f09 	cmp.w	lr, #9
 8003650:	d816      	bhi.n	8003680 <_strtol_l.constprop.0+0xa4>
 8003652:	4674      	mov	r4, lr
 8003654:	42a3      	cmp	r3, r4
 8003656:	dd24      	ble.n	80036a2 <_strtol_l.constprop.0+0xc6>
 8003658:	f1bc 0f00 	cmp.w	ip, #0
 800365c:	db1e      	blt.n	800369c <_strtol_l.constprop.0+0xc0>
 800365e:	45b1      	cmp	r9, r6
 8003660:	d31c      	bcc.n	800369c <_strtol_l.constprop.0+0xc0>
 8003662:	d101      	bne.n	8003668 <_strtol_l.constprop.0+0x8c>
 8003664:	45a2      	cmp	sl, r4
 8003666:	db19      	blt.n	800369c <_strtol_l.constprop.0+0xc0>
 8003668:	fb06 4603 	mla	r6, r6, r3, r4
 800366c:	f04f 0c01 	mov.w	ip, #1
 8003670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003674:	e7e8      	b.n	8003648 <_strtol_l.constprop.0+0x6c>
 8003676:	2c2b      	cmp	r4, #43	; 0x2b
 8003678:	bf04      	itt	eq
 800367a:	782c      	ldrbeq	r4, [r5, #0]
 800367c:	1cb5      	addeq	r5, r6, #2
 800367e:	e7ca      	b.n	8003616 <_strtol_l.constprop.0+0x3a>
 8003680:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003684:	f1be 0f19 	cmp.w	lr, #25
 8003688:	d801      	bhi.n	800368e <_strtol_l.constprop.0+0xb2>
 800368a:	3c37      	subs	r4, #55	; 0x37
 800368c:	e7e2      	b.n	8003654 <_strtol_l.constprop.0+0x78>
 800368e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003692:	f1be 0f19 	cmp.w	lr, #25
 8003696:	d804      	bhi.n	80036a2 <_strtol_l.constprop.0+0xc6>
 8003698:	3c57      	subs	r4, #87	; 0x57
 800369a:	e7db      	b.n	8003654 <_strtol_l.constprop.0+0x78>
 800369c:	f04f 3cff 	mov.w	ip, #4294967295
 80036a0:	e7e6      	b.n	8003670 <_strtol_l.constprop.0+0x94>
 80036a2:	f1bc 0f00 	cmp.w	ip, #0
 80036a6:	da05      	bge.n	80036b4 <_strtol_l.constprop.0+0xd8>
 80036a8:	2322      	movs	r3, #34	; 0x22
 80036aa:	6003      	str	r3, [r0, #0]
 80036ac:	4646      	mov	r6, r8
 80036ae:	b942      	cbnz	r2, 80036c2 <_strtol_l.constprop.0+0xe6>
 80036b0:	4630      	mov	r0, r6
 80036b2:	e79e      	b.n	80035f2 <_strtol_l.constprop.0+0x16>
 80036b4:	b107      	cbz	r7, 80036b8 <_strtol_l.constprop.0+0xdc>
 80036b6:	4276      	negs	r6, r6
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d0f9      	beq.n	80036b0 <_strtol_l.constprop.0+0xd4>
 80036bc:	f1bc 0f00 	cmp.w	ip, #0
 80036c0:	d000      	beq.n	80036c4 <_strtol_l.constprop.0+0xe8>
 80036c2:	1e69      	subs	r1, r5, #1
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	e7f3      	b.n	80036b0 <_strtol_l.constprop.0+0xd4>
 80036c8:	2430      	movs	r4, #48	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1b1      	bne.n	8003632 <_strtol_l.constprop.0+0x56>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e7af      	b.n	8003632 <_strtol_l.constprop.0+0x56>
 80036d2:	2c30      	cmp	r4, #48	; 0x30
 80036d4:	d0a5      	beq.n	8003622 <_strtol_l.constprop.0+0x46>
 80036d6:	230a      	movs	r3, #10
 80036d8:	e7ab      	b.n	8003632 <_strtol_l.constprop.0+0x56>
 80036da:	bf00      	nop
 80036dc:	08005e46 	.word	0x08005e46

080036e0 <_strtol_r>:
 80036e0:	f7ff bf7c 	b.w	80035dc <_strtol_l.constprop.0>

080036e4 <strtol>:
 80036e4:	4613      	mov	r3, r2
 80036e6:	460a      	mov	r2, r1
 80036e8:	4601      	mov	r1, r0
 80036ea:	4802      	ldr	r0, [pc, #8]	; (80036f4 <strtol+0x10>)
 80036ec:	6800      	ldr	r0, [r0, #0]
 80036ee:	f7ff bf75 	b.w	80035dc <_strtol_l.constprop.0>
 80036f2:	bf00      	nop
 80036f4:	2000000c 	.word	0x2000000c

080036f8 <__utoa>:
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	4c1f      	ldr	r4, [pc, #124]	; (8003778 <__utoa+0x80>)
 80036fc:	b08b      	sub	sp, #44	; 0x2c
 80036fe:	4605      	mov	r5, r0
 8003700:	460b      	mov	r3, r1
 8003702:	466e      	mov	r6, sp
 8003704:	f104 0c20 	add.w	ip, r4, #32
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	6861      	ldr	r1, [r4, #4]
 800370c:	4637      	mov	r7, r6
 800370e:	c703      	stmia	r7!, {r0, r1}
 8003710:	3408      	adds	r4, #8
 8003712:	4564      	cmp	r4, ip
 8003714:	463e      	mov	r6, r7
 8003716:	d1f7      	bne.n	8003708 <__utoa+0x10>
 8003718:	7921      	ldrb	r1, [r4, #4]
 800371a:	7139      	strb	r1, [r7, #4]
 800371c:	1e91      	subs	r1, r2, #2
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	6038      	str	r0, [r7, #0]
 8003722:	2922      	cmp	r1, #34	; 0x22
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	d904      	bls.n	8003734 <__utoa+0x3c>
 800372a:	7019      	strb	r1, [r3, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	4618      	mov	r0, r3
 8003730:	b00b      	add	sp, #44	; 0x2c
 8003732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003734:	1e58      	subs	r0, r3, #1
 8003736:	4684      	mov	ip, r0
 8003738:	fbb5 f7f2 	udiv	r7, r5, r2
 800373c:	fb02 5617 	mls	r6, r2, r7, r5
 8003740:	3628      	adds	r6, #40	; 0x28
 8003742:	446e      	add	r6, sp
 8003744:	460c      	mov	r4, r1
 8003746:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800374a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800374e:	462e      	mov	r6, r5
 8003750:	42b2      	cmp	r2, r6
 8003752:	f101 0101 	add.w	r1, r1, #1
 8003756:	463d      	mov	r5, r7
 8003758:	d9ee      	bls.n	8003738 <__utoa+0x40>
 800375a:	2200      	movs	r2, #0
 800375c:	545a      	strb	r2, [r3, r1]
 800375e:	1919      	adds	r1, r3, r4
 8003760:	1aa5      	subs	r5, r4, r2
 8003762:	42aa      	cmp	r2, r5
 8003764:	dae3      	bge.n	800372e <__utoa+0x36>
 8003766:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800376a:	780e      	ldrb	r6, [r1, #0]
 800376c:	7006      	strb	r6, [r0, #0]
 800376e:	3201      	adds	r2, #1
 8003770:	f801 5901 	strb.w	r5, [r1], #-1
 8003774:	e7f4      	b.n	8003760 <__utoa+0x68>
 8003776:	bf00      	nop
 8003778:	08005e20 	.word	0x08005e20

0800377c <__swbuf_r>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	460e      	mov	r6, r1
 8003780:	4614      	mov	r4, r2
 8003782:	4605      	mov	r5, r0
 8003784:	b118      	cbz	r0, 800378e <__swbuf_r+0x12>
 8003786:	6983      	ldr	r3, [r0, #24]
 8003788:	b90b      	cbnz	r3, 800378e <__swbuf_r+0x12>
 800378a:	f000 f9e3 	bl	8003b54 <__sinit>
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <__swbuf_r+0x98>)
 8003790:	429c      	cmp	r4, r3
 8003792:	d12b      	bne.n	80037ec <__swbuf_r+0x70>
 8003794:	686c      	ldr	r4, [r5, #4]
 8003796:	69a3      	ldr	r3, [r4, #24]
 8003798:	60a3      	str	r3, [r4, #8]
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	071a      	lsls	r2, r3, #28
 800379e:	d52f      	bpl.n	8003800 <__swbuf_r+0x84>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	b36b      	cbz	r3, 8003800 <__swbuf_r+0x84>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	1ac0      	subs	r0, r0, r3
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	b2f6      	uxtb	r6, r6
 80037ae:	4283      	cmp	r3, r0
 80037b0:	4637      	mov	r7, r6
 80037b2:	dc04      	bgt.n	80037be <__swbuf_r+0x42>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 f926 	bl	8003a08 <_fflush_r>
 80037bc:	bb30      	cbnz	r0, 800380c <__swbuf_r+0x90>
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60a3      	str	r3, [r4, #8]
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	6022      	str	r2, [r4, #0]
 80037ca:	701e      	strb	r6, [r3, #0]
 80037cc:	6963      	ldr	r3, [r4, #20]
 80037ce:	3001      	adds	r0, #1
 80037d0:	4283      	cmp	r3, r0
 80037d2:	d004      	beq.n	80037de <__swbuf_r+0x62>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	07db      	lsls	r3, r3, #31
 80037d8:	d506      	bpl.n	80037e8 <__swbuf_r+0x6c>
 80037da:	2e0a      	cmp	r6, #10
 80037dc:	d104      	bne.n	80037e8 <__swbuf_r+0x6c>
 80037de:	4621      	mov	r1, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f911 	bl	8003a08 <_fflush_r>
 80037e6:	b988      	cbnz	r0, 800380c <__swbuf_r+0x90>
 80037e8:	4638      	mov	r0, r7
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <__swbuf_r+0x9c>)
 80037ee:	429c      	cmp	r4, r3
 80037f0:	d101      	bne.n	80037f6 <__swbuf_r+0x7a>
 80037f2:	68ac      	ldr	r4, [r5, #8]
 80037f4:	e7cf      	b.n	8003796 <__swbuf_r+0x1a>
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <__swbuf_r+0xa0>)
 80037f8:	429c      	cmp	r4, r3
 80037fa:	bf08      	it	eq
 80037fc:	68ec      	ldreq	r4, [r5, #12]
 80037fe:	e7ca      	b.n	8003796 <__swbuf_r+0x1a>
 8003800:	4621      	mov	r1, r4
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f80c 	bl	8003820 <__swsetup_r>
 8003808:	2800      	cmp	r0, #0
 800380a:	d0cb      	beq.n	80037a4 <__swbuf_r+0x28>
 800380c:	f04f 37ff 	mov.w	r7, #4294967295
 8003810:	e7ea      	b.n	80037e8 <__swbuf_r+0x6c>
 8003812:	bf00      	nop
 8003814:	08005f68 	.word	0x08005f68
 8003818:	08005f88 	.word	0x08005f88
 800381c:	08005f48 	.word	0x08005f48

08003820 <__swsetup_r>:
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <__swsetup_r+0xcc>)
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	681d      	ldr	r5, [r3, #0]
 8003826:	4606      	mov	r6, r0
 8003828:	460c      	mov	r4, r1
 800382a:	b125      	cbz	r5, 8003836 <__swsetup_r+0x16>
 800382c:	69ab      	ldr	r3, [r5, #24]
 800382e:	b913      	cbnz	r3, 8003836 <__swsetup_r+0x16>
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f98f 	bl	8003b54 <__sinit>
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <__swsetup_r+0xd0>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d10f      	bne.n	800385c <__swsetup_r+0x3c>
 800383c:	686c      	ldr	r4, [r5, #4]
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003844:	0719      	lsls	r1, r3, #28
 8003846:	d42c      	bmi.n	80038a2 <__swsetup_r+0x82>
 8003848:	06dd      	lsls	r5, r3, #27
 800384a:	d411      	bmi.n	8003870 <__swsetup_r+0x50>
 800384c:	2309      	movs	r3, #9
 800384e:	6033      	str	r3, [r6, #0]
 8003850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	f04f 30ff 	mov.w	r0, #4294967295
 800385a:	e03e      	b.n	80038da <__swsetup_r+0xba>
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <__swsetup_r+0xd4>)
 800385e:	429c      	cmp	r4, r3
 8003860:	d101      	bne.n	8003866 <__swsetup_r+0x46>
 8003862:	68ac      	ldr	r4, [r5, #8]
 8003864:	e7eb      	b.n	800383e <__swsetup_r+0x1e>
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <__swsetup_r+0xd8>)
 8003868:	429c      	cmp	r4, r3
 800386a:	bf08      	it	eq
 800386c:	68ec      	ldreq	r4, [r5, #12]
 800386e:	e7e6      	b.n	800383e <__swsetup_r+0x1e>
 8003870:	0758      	lsls	r0, r3, #29
 8003872:	d512      	bpl.n	800389a <__swsetup_r+0x7a>
 8003874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003876:	b141      	cbz	r1, 800388a <__swsetup_r+0x6a>
 8003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <__swsetup_r+0x66>
 8003880:	4630      	mov	r0, r6
 8003882:	f000 fa91 	bl	8003da8 <_free_r>
 8003886:	2300      	movs	r3, #0
 8003888:	6363      	str	r3, [r4, #52]	; 0x34
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	2300      	movs	r3, #0
 8003894:	6063      	str	r3, [r4, #4]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	b94b      	cbnz	r3, 80038ba <__swsetup_r+0x9a>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d003      	beq.n	80038ba <__swsetup_r+0x9a>
 80038b2:	4621      	mov	r1, r4
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 fa2f 	bl	8003d18 <__smakebuf_r>
 80038ba:	89a0      	ldrh	r0, [r4, #12]
 80038bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038c0:	f010 0301 	ands.w	r3, r0, #1
 80038c4:	d00a      	beq.n	80038dc <__swsetup_r+0xbc>
 80038c6:	2300      	movs	r3, #0
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6963      	ldr	r3, [r4, #20]
 80038cc:	425b      	negs	r3, r3
 80038ce:	61a3      	str	r3, [r4, #24]
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	b943      	cbnz	r3, 80038e6 <__swsetup_r+0xc6>
 80038d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d8:	d1ba      	bne.n	8003850 <__swsetup_r+0x30>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	0781      	lsls	r1, r0, #30
 80038de:	bf58      	it	pl
 80038e0:	6963      	ldrpl	r3, [r4, #20]
 80038e2:	60a3      	str	r3, [r4, #8]
 80038e4:	e7f4      	b.n	80038d0 <__swsetup_r+0xb0>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7f7      	b.n	80038da <__swsetup_r+0xba>
 80038ea:	bf00      	nop
 80038ec:	2000000c 	.word	0x2000000c
 80038f0:	08005f68 	.word	0x08005f68
 80038f4:	08005f88 	.word	0x08005f88
 80038f8:	08005f48 	.word	0x08005f48

080038fc <__sflush_r>:
 80038fc:	898a      	ldrh	r2, [r1, #12]
 80038fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	0710      	lsls	r0, r2, #28
 8003906:	460c      	mov	r4, r1
 8003908:	d458      	bmi.n	80039bc <__sflush_r+0xc0>
 800390a:	684b      	ldr	r3, [r1, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	dc05      	bgt.n	800391c <__sflush_r+0x20>
 8003910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	dc02      	bgt.n	800391c <__sflush_r+0x20>
 8003916:	2000      	movs	r0, #0
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800391c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800391e:	2e00      	cmp	r6, #0
 8003920:	d0f9      	beq.n	8003916 <__sflush_r+0x1a>
 8003922:	2300      	movs	r3, #0
 8003924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003928:	682f      	ldr	r7, [r5, #0]
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	d032      	beq.n	8003994 <__sflush_r+0x98>
 800392e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	075a      	lsls	r2, r3, #29
 8003934:	d505      	bpl.n	8003942 <__sflush_r+0x46>
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	1ac0      	subs	r0, r0, r3
 800393a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800393c:	b10b      	cbz	r3, 8003942 <__sflush_r+0x46>
 800393e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003940:	1ac0      	subs	r0, r0, r3
 8003942:	2300      	movs	r3, #0
 8003944:	4602      	mov	r2, r0
 8003946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003948:	6a21      	ldr	r1, [r4, #32]
 800394a:	4628      	mov	r0, r5
 800394c:	47b0      	blx	r6
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	d106      	bne.n	8003962 <__sflush_r+0x66>
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	291d      	cmp	r1, #29
 8003958:	d82c      	bhi.n	80039b4 <__sflush_r+0xb8>
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <__sflush_r+0x108>)
 800395c:	40ca      	lsrs	r2, r1
 800395e:	07d6      	lsls	r6, r2, #31
 8003960:	d528      	bpl.n	80039b4 <__sflush_r+0xb8>
 8003962:	2200      	movs	r2, #0
 8003964:	6062      	str	r2, [r4, #4]
 8003966:	04d9      	lsls	r1, r3, #19
 8003968:	6922      	ldr	r2, [r4, #16]
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	d504      	bpl.n	8003978 <__sflush_r+0x7c>
 800396e:	1c42      	adds	r2, r0, #1
 8003970:	d101      	bne.n	8003976 <__sflush_r+0x7a>
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	b903      	cbnz	r3, 8003978 <__sflush_r+0x7c>
 8003976:	6560      	str	r0, [r4, #84]	; 0x54
 8003978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397a:	602f      	str	r7, [r5, #0]
 800397c:	2900      	cmp	r1, #0
 800397e:	d0ca      	beq.n	8003916 <__sflush_r+0x1a>
 8003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <__sflush_r+0x92>
 8003988:	4628      	mov	r0, r5
 800398a:	f000 fa0d 	bl	8003da8 <_free_r>
 800398e:	2000      	movs	r0, #0
 8003990:	6360      	str	r0, [r4, #52]	; 0x34
 8003992:	e7c1      	b.n	8003918 <__sflush_r+0x1c>
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	2301      	movs	r3, #1
 8003998:	4628      	mov	r0, r5
 800399a:	47b0      	blx	r6
 800399c:	1c41      	adds	r1, r0, #1
 800399e:	d1c7      	bne.n	8003930 <__sflush_r+0x34>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0c4      	beq.n	8003930 <__sflush_r+0x34>
 80039a6:	2b1d      	cmp	r3, #29
 80039a8:	d001      	beq.n	80039ae <__sflush_r+0xb2>
 80039aa:	2b16      	cmp	r3, #22
 80039ac:	d101      	bne.n	80039b2 <__sflush_r+0xb6>
 80039ae:	602f      	str	r7, [r5, #0]
 80039b0:	e7b1      	b.n	8003916 <__sflush_r+0x1a>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	e7ad      	b.n	8003918 <__sflush_r+0x1c>
 80039bc:	690f      	ldr	r7, [r1, #16]
 80039be:	2f00      	cmp	r7, #0
 80039c0:	d0a9      	beq.n	8003916 <__sflush_r+0x1a>
 80039c2:	0793      	lsls	r3, r2, #30
 80039c4:	680e      	ldr	r6, [r1, #0]
 80039c6:	bf08      	it	eq
 80039c8:	694b      	ldreq	r3, [r1, #20]
 80039ca:	600f      	str	r7, [r1, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2300      	movne	r3, #0
 80039d0:	eba6 0807 	sub.w	r8, r6, r7
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	f1b8 0f00 	cmp.w	r8, #0
 80039da:	dd9c      	ble.n	8003916 <__sflush_r+0x1a>
 80039dc:	6a21      	ldr	r1, [r4, #32]
 80039de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039e0:	4643      	mov	r3, r8
 80039e2:	463a      	mov	r2, r7
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b0      	blx	r6
 80039e8:	2800      	cmp	r0, #0
 80039ea:	dc06      	bgt.n	80039fa <__sflush_r+0xfe>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e78e      	b.n	8003918 <__sflush_r+0x1c>
 80039fa:	4407      	add	r7, r0
 80039fc:	eba8 0800 	sub.w	r8, r8, r0
 8003a00:	e7e9      	b.n	80039d6 <__sflush_r+0xda>
 8003a02:	bf00      	nop
 8003a04:	20400001 	.word	0x20400001

08003a08 <_fflush_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	b913      	cbnz	r3, 8003a18 <_fflush_r+0x10>
 8003a12:	2500      	movs	r5, #0
 8003a14:	4628      	mov	r0, r5
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	b118      	cbz	r0, 8003a22 <_fflush_r+0x1a>
 8003a1a:	6983      	ldr	r3, [r0, #24]
 8003a1c:	b90b      	cbnz	r3, 8003a22 <_fflush_r+0x1a>
 8003a1e:	f000 f899 	bl	8003b54 <__sinit>
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <_fflush_r+0x6c>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d11b      	bne.n	8003a60 <_fflush_r+0x58>
 8003a28:	686c      	ldr	r4, [r5, #4]
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ef      	beq.n	8003a12 <_fflush_r+0xa>
 8003a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a34:	07d0      	lsls	r0, r2, #31
 8003a36:	d404      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a38:	0599      	lsls	r1, r3, #22
 8003a3a:	d402      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a3e:	f000 f944 	bl	8003cca <__retarget_lock_acquire_recursive>
 8003a42:	4628      	mov	r0, r5
 8003a44:	4621      	mov	r1, r4
 8003a46:	f7ff ff59 	bl	80038fc <__sflush_r>
 8003a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a4c:	07da      	lsls	r2, r3, #31
 8003a4e:	4605      	mov	r5, r0
 8003a50:	d4e0      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	059b      	lsls	r3, r3, #22
 8003a56:	d4dd      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5a:	f000 f937 	bl	8003ccc <__retarget_lock_release_recursive>
 8003a5e:	e7d9      	b.n	8003a14 <_fflush_r+0xc>
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_fflush_r+0x70>)
 8003a62:	429c      	cmp	r4, r3
 8003a64:	d101      	bne.n	8003a6a <_fflush_r+0x62>
 8003a66:	68ac      	ldr	r4, [r5, #8]
 8003a68:	e7df      	b.n	8003a2a <_fflush_r+0x22>
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <_fflush_r+0x74>)
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	bf08      	it	eq
 8003a70:	68ec      	ldreq	r4, [r5, #12]
 8003a72:	e7da      	b.n	8003a2a <_fflush_r+0x22>
 8003a74:	08005f68 	.word	0x08005f68
 8003a78:	08005f88 	.word	0x08005f88
 8003a7c:	08005f48 	.word	0x08005f48

08003a80 <fflush>:
 8003a80:	4601      	mov	r1, r0
 8003a82:	b920      	cbnz	r0, 8003a8e <fflush+0xe>
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <fflush+0x18>)
 8003a86:	4905      	ldr	r1, [pc, #20]	; (8003a9c <fflush+0x1c>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f000 b8fe 	b.w	8003c8a <_fwalk_reent>
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <fflush+0x20>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f7ff bfb9 	b.w	8003a08 <_fflush_r>
 8003a96:	bf00      	nop
 8003a98:	08005e1c 	.word	0x08005e1c
 8003a9c:	08003a09 	.word	0x08003a09
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <std>:
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8003aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ab2:	6083      	str	r3, [r0, #8]
 8003ab4:	8181      	strh	r1, [r0, #12]
 8003ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ab8:	81c2      	strh	r2, [r0, #14]
 8003aba:	6183      	str	r3, [r0, #24]
 8003abc:	4619      	mov	r1, r3
 8003abe:	2208      	movs	r2, #8
 8003ac0:	305c      	adds	r0, #92	; 0x5c
 8003ac2:	f7ff fc17 	bl	80032f4 <memset>
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <std+0x38>)
 8003ac8:	6263      	str	r3, [r4, #36]	; 0x24
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <std+0x3c>)
 8003acc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <std+0x40>)
 8003ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <std+0x44>)
 8003ad4:	6224      	str	r4, [r4, #32]
 8003ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop
 8003adc:	08004d3d 	.word	0x08004d3d
 8003ae0:	08004d5f 	.word	0x08004d5f
 8003ae4:	08004d97 	.word	0x08004d97
 8003ae8:	08004dbb 	.word	0x08004dbb

08003aec <_cleanup_r>:
 8003aec:	4901      	ldr	r1, [pc, #4]	; (8003af4 <_cleanup_r+0x8>)
 8003aee:	f000 b8cc 	b.w	8003c8a <_fwalk_reent>
 8003af2:	bf00      	nop
 8003af4:	08003a09 	.word	0x08003a09

08003af8 <__sfmoreglue>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	2268      	movs	r2, #104	; 0x68
 8003afc:	1e4d      	subs	r5, r1, #1
 8003afe:	4355      	muls	r5, r2
 8003b00:	460e      	mov	r6, r1
 8003b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b06:	f000 f9bb 	bl	8003e80 <_malloc_r>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	b140      	cbz	r0, 8003b20 <__sfmoreglue+0x28>
 8003b0e:	2100      	movs	r1, #0
 8003b10:	e9c0 1600 	strd	r1, r6, [r0]
 8003b14:	300c      	adds	r0, #12
 8003b16:	60a0      	str	r0, [r4, #8]
 8003b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b1c:	f7ff fbea 	bl	80032f4 <memset>
 8003b20:	4620      	mov	r0, r4
 8003b22:	bd70      	pop	{r4, r5, r6, pc}

08003b24 <__sfp_lock_acquire>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__sfp_lock_acquire+0x8>)
 8003b26:	f000 b8d0 	b.w	8003cca <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000121 	.word	0x20000121

08003b30 <__sfp_lock_release>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__sfp_lock_release+0x8>)
 8003b32:	f000 b8cb 	b.w	8003ccc <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000121 	.word	0x20000121

08003b3c <__sinit_lock_acquire>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__sinit_lock_acquire+0x8>)
 8003b3e:	f000 b8c4 	b.w	8003cca <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	20000122 	.word	0x20000122

08003b48 <__sinit_lock_release>:
 8003b48:	4801      	ldr	r0, [pc, #4]	; (8003b50 <__sinit_lock_release+0x8>)
 8003b4a:	f000 b8bf 	b.w	8003ccc <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	20000122 	.word	0x20000122

08003b54 <__sinit>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4604      	mov	r4, r0
 8003b58:	f7ff fff0 	bl	8003b3c <__sinit_lock_acquire>
 8003b5c:	69a3      	ldr	r3, [r4, #24]
 8003b5e:	b11b      	cbz	r3, 8003b68 <__sinit+0x14>
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b64:	f7ff bff0 	b.w	8003b48 <__sinit_lock_release>
 8003b68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b6c:	6523      	str	r3, [r4, #80]	; 0x50
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <__sinit+0x68>)
 8003b70:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <__sinit+0x6c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	bf04      	itt	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	61a3      	streq	r3, [r4, #24]
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f000 f820 	bl	8003bc4 <__sfp>
 8003b84:	6060      	str	r0, [r4, #4]
 8003b86:	4620      	mov	r0, r4
 8003b88:	f000 f81c 	bl	8003bc4 <__sfp>
 8003b8c:	60a0      	str	r0, [r4, #8]
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 f818 	bl	8003bc4 <__sfp>
 8003b94:	2200      	movs	r2, #0
 8003b96:	60e0      	str	r0, [r4, #12]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	f7ff ff82 	bl	8003aa4 <std>
 8003ba0:	68a0      	ldr	r0, [r4, #8]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2109      	movs	r1, #9
 8003ba6:	f7ff ff7d 	bl	8003aa4 <std>
 8003baa:	68e0      	ldr	r0, [r4, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	2112      	movs	r1, #18
 8003bb0:	f7ff ff78 	bl	8003aa4 <std>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61a3      	str	r3, [r4, #24]
 8003bb8:	e7d2      	b.n	8003b60 <__sinit+0xc>
 8003bba:	bf00      	nop
 8003bbc:	08005e1c 	.word	0x08005e1c
 8003bc0:	08003aed 	.word	0x08003aed

08003bc4 <__sfp>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	4607      	mov	r7, r0
 8003bc8:	f7ff ffac 	bl	8003b24 <__sfp_lock_acquire>
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <__sfp+0x84>)
 8003bce:	681e      	ldr	r6, [r3, #0]
 8003bd0:	69b3      	ldr	r3, [r6, #24]
 8003bd2:	b913      	cbnz	r3, 8003bda <__sfp+0x16>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff ffbd 	bl	8003b54 <__sinit>
 8003bda:	3648      	adds	r6, #72	; 0x48
 8003bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	d503      	bpl.n	8003bec <__sfp+0x28>
 8003be4:	6833      	ldr	r3, [r6, #0]
 8003be6:	b30b      	cbz	r3, 8003c2c <__sfp+0x68>
 8003be8:	6836      	ldr	r6, [r6, #0]
 8003bea:	e7f7      	b.n	8003bdc <__sfp+0x18>
 8003bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bf0:	b9d5      	cbnz	r5, 8003c28 <__sfp+0x64>
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <__sfp+0x88>)
 8003bf4:	60e3      	str	r3, [r4, #12]
 8003bf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bfa:	6665      	str	r5, [r4, #100]	; 0x64
 8003bfc:	f000 f864 	bl	8003cc8 <__retarget_lock_init_recursive>
 8003c00:	f7ff ff96 	bl	8003b30 <__sfp_lock_release>
 8003c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c0c:	6025      	str	r5, [r4, #0]
 8003c0e:	61a5      	str	r5, [r4, #24]
 8003c10:	2208      	movs	r2, #8
 8003c12:	4629      	mov	r1, r5
 8003c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c18:	f7ff fb6c 	bl	80032f4 <memset>
 8003c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c24:	4620      	mov	r0, r4
 8003c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c28:	3468      	adds	r4, #104	; 0x68
 8003c2a:	e7d9      	b.n	8003be0 <__sfp+0x1c>
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7ff ff62 	bl	8003af8 <__sfmoreglue>
 8003c34:	4604      	mov	r4, r0
 8003c36:	6030      	str	r0, [r6, #0]
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d1d5      	bne.n	8003be8 <__sfp+0x24>
 8003c3c:	f7ff ff78 	bl	8003b30 <__sfp_lock_release>
 8003c40:	230c      	movs	r3, #12
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	e7ee      	b.n	8003c24 <__sfp+0x60>
 8003c46:	bf00      	nop
 8003c48:	08005e1c 	.word	0x08005e1c
 8003c4c:	ffff0001 	.word	0xffff0001

08003c50 <_fwalk>:
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	460f      	mov	r7, r1
 8003c56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003c60:	f1b8 0801 	subs.w	r8, r8, #1
 8003c64:	d505      	bpl.n	8003c72 <_fwalk+0x22>
 8003c66:	6824      	ldr	r4, [r4, #0]
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d1f7      	bne.n	8003c5c <_fwalk+0xc>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d906      	bls.n	8003c86 <_fwalk+0x36>
 8003c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <_fwalk+0x36>
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b8      	blx	r7
 8003c84:	4306      	orrs	r6, r0
 8003c86:	3568      	adds	r5, #104	; 0x68
 8003c88:	e7ea      	b.n	8003c60 <_fwalk+0x10>

08003c8a <_fwalk_reent>:
 8003c8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8e:	4606      	mov	r6, r0
 8003c90:	4688      	mov	r8, r1
 8003c92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c96:	2700      	movs	r7, #0
 8003c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca0:	d505      	bpl.n	8003cae <_fwalk_reent+0x24>
 8003ca2:	6824      	ldr	r4, [r4, #0]
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d1f7      	bne.n	8003c98 <_fwalk_reent+0xe>
 8003ca8:	4638      	mov	r0, r7
 8003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d907      	bls.n	8003cc4 <_fwalk_reent+0x3a>
 8003cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	d003      	beq.n	8003cc4 <_fwalk_reent+0x3a>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	47c0      	blx	r8
 8003cc2:	4307      	orrs	r7, r0
 8003cc4:	3568      	adds	r5, #104	; 0x68
 8003cc6:	e7e9      	b.n	8003c9c <_fwalk_reent+0x12>

08003cc8 <__retarget_lock_init_recursive>:
 8003cc8:	4770      	bx	lr

08003cca <__retarget_lock_acquire_recursive>:
 8003cca:	4770      	bx	lr

08003ccc <__retarget_lock_release_recursive>:
 8003ccc:	4770      	bx	lr

08003cce <__swhatbuf_r>:
 8003cce:	b570      	push	{r4, r5, r6, lr}
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	b096      	sub	sp, #88	; 0x58
 8003cda:	4614      	mov	r4, r2
 8003cdc:	461d      	mov	r5, r3
 8003cde:	da08      	bge.n	8003cf2 <__swhatbuf_r+0x24>
 8003ce0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	602a      	str	r2, [r5, #0]
 8003ce8:	061a      	lsls	r2, r3, #24
 8003cea:	d410      	bmi.n	8003d0e <__swhatbuf_r+0x40>
 8003cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf0:	e00e      	b.n	8003d10 <__swhatbuf_r+0x42>
 8003cf2:	466a      	mov	r2, sp
 8003cf4:	f001 f9ce 	bl	8005094 <_fstat_r>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	dbf1      	blt.n	8003ce0 <__swhatbuf_r+0x12>
 8003cfc:	9a01      	ldr	r2, [sp, #4]
 8003cfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d06:	425a      	negs	r2, r3
 8003d08:	415a      	adcs	r2, r3
 8003d0a:	602a      	str	r2, [r5, #0]
 8003d0c:	e7ee      	b.n	8003cec <__swhatbuf_r+0x1e>
 8003d0e:	2340      	movs	r3, #64	; 0x40
 8003d10:	2000      	movs	r0, #0
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	b016      	add	sp, #88	; 0x58
 8003d16:	bd70      	pop	{r4, r5, r6, pc}

08003d18 <__smakebuf_r>:
 8003d18:	898b      	ldrh	r3, [r1, #12]
 8003d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d1c:	079d      	lsls	r5, r3, #30
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460c      	mov	r4, r1
 8003d22:	d507      	bpl.n	8003d34 <__smakebuf_r+0x1c>
 8003d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	6123      	str	r3, [r4, #16]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6163      	str	r3, [r4, #20]
 8003d30:	b002      	add	sp, #8
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	ab01      	add	r3, sp, #4
 8003d36:	466a      	mov	r2, sp
 8003d38:	f7ff ffc9 	bl	8003cce <__swhatbuf_r>
 8003d3c:	9900      	ldr	r1, [sp, #0]
 8003d3e:	4605      	mov	r5, r0
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f89d 	bl	8003e80 <_malloc_r>
 8003d46:	b948      	cbnz	r0, 8003d5c <__smakebuf_r+0x44>
 8003d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d4c:	059a      	lsls	r2, r3, #22
 8003d4e:	d4ef      	bmi.n	8003d30 <__smakebuf_r+0x18>
 8003d50:	f023 0303 	bic.w	r3, r3, #3
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	81a3      	strh	r3, [r4, #12]
 8003d5a:	e7e3      	b.n	8003d24 <__smakebuf_r+0xc>
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <__smakebuf_r+0x7c>)
 8003d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	6020      	str	r0, [r4, #0]
 8003d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	6163      	str	r3, [r4, #20]
 8003d6e:	9b01      	ldr	r3, [sp, #4]
 8003d70:	6120      	str	r0, [r4, #16]
 8003d72:	b15b      	cbz	r3, 8003d8c <__smakebuf_r+0x74>
 8003d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f001 f99d 	bl	80050b8 <_isatty_r>
 8003d7e:	b128      	cbz	r0, 8003d8c <__smakebuf_r+0x74>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	89a0      	ldrh	r0, [r4, #12]
 8003d8e:	4305      	orrs	r5, r0
 8003d90:	81a5      	strh	r5, [r4, #12]
 8003d92:	e7cd      	b.n	8003d30 <__smakebuf_r+0x18>
 8003d94:	08003aed 	.word	0x08003aed

08003d98 <malloc>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <malloc+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f000 b86f 	b.w	8003e80 <_malloc_r>
 8003da2:	bf00      	nop
 8003da4:	2000000c 	.word	0x2000000c

08003da8 <_free_r>:
 8003da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003daa:	2900      	cmp	r1, #0
 8003dac:	d044      	beq.n	8003e38 <_free_r+0x90>
 8003dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db2:	9001      	str	r0, [sp, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f1a1 0404 	sub.w	r4, r1, #4
 8003dba:	bfb8      	it	lt
 8003dbc:	18e4      	addlt	r4, r4, r3
 8003dbe:	f001 f9ab 	bl	8005118 <__malloc_lock>
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <_free_r+0x94>)
 8003dc4:	9801      	ldr	r0, [sp, #4]
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	b933      	cbnz	r3, 8003dd8 <_free_r+0x30>
 8003dca:	6063      	str	r3, [r4, #4]
 8003dcc:	6014      	str	r4, [r2, #0]
 8003dce:	b003      	add	sp, #12
 8003dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dd4:	f001 b9a6 	b.w	8005124 <__malloc_unlock>
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d908      	bls.n	8003dee <_free_r+0x46>
 8003ddc:	6825      	ldr	r5, [r4, #0]
 8003dde:	1961      	adds	r1, r4, r5
 8003de0:	428b      	cmp	r3, r1
 8003de2:	bf01      	itttt	eq
 8003de4:	6819      	ldreq	r1, [r3, #0]
 8003de6:	685b      	ldreq	r3, [r3, #4]
 8003de8:	1949      	addeq	r1, r1, r5
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	e7ed      	b.n	8003dca <_free_r+0x22>
 8003dee:	461a      	mov	r2, r3
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b10b      	cbz	r3, 8003df8 <_free_r+0x50>
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d9fa      	bls.n	8003dee <_free_r+0x46>
 8003df8:	6811      	ldr	r1, [r2, #0]
 8003dfa:	1855      	adds	r5, r2, r1
 8003dfc:	42a5      	cmp	r5, r4
 8003dfe:	d10b      	bne.n	8003e18 <_free_r+0x70>
 8003e00:	6824      	ldr	r4, [r4, #0]
 8003e02:	4421      	add	r1, r4
 8003e04:	1854      	adds	r4, r2, r1
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	d1e0      	bne.n	8003dce <_free_r+0x26>
 8003e0c:	681c      	ldr	r4, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	6053      	str	r3, [r2, #4]
 8003e12:	4421      	add	r1, r4
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	e7da      	b.n	8003dce <_free_r+0x26>
 8003e18:	d902      	bls.n	8003e20 <_free_r+0x78>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	6003      	str	r3, [r0, #0]
 8003e1e:	e7d6      	b.n	8003dce <_free_r+0x26>
 8003e20:	6825      	ldr	r5, [r4, #0]
 8003e22:	1961      	adds	r1, r4, r5
 8003e24:	428b      	cmp	r3, r1
 8003e26:	bf04      	itt	eq
 8003e28:	6819      	ldreq	r1, [r3, #0]
 8003e2a:	685b      	ldreq	r3, [r3, #4]
 8003e2c:	6063      	str	r3, [r4, #4]
 8003e2e:	bf04      	itt	eq
 8003e30:	1949      	addeq	r1, r1, r5
 8003e32:	6021      	streq	r1, [r4, #0]
 8003e34:	6054      	str	r4, [r2, #4]
 8003e36:	e7ca      	b.n	8003dce <_free_r+0x26>
 8003e38:	b003      	add	sp, #12
 8003e3a:	bd30      	pop	{r4, r5, pc}
 8003e3c:	20000124 	.word	0x20000124

08003e40 <sbrk_aligned>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4e0e      	ldr	r6, [pc, #56]	; (8003e7c <sbrk_aligned+0x3c>)
 8003e44:	460c      	mov	r4, r1
 8003e46:	6831      	ldr	r1, [r6, #0]
 8003e48:	4605      	mov	r5, r0
 8003e4a:	b911      	cbnz	r1, 8003e52 <sbrk_aligned+0x12>
 8003e4c:	f000 ff2e 	bl	8004cac <_sbrk_r>
 8003e50:	6030      	str	r0, [r6, #0]
 8003e52:	4621      	mov	r1, r4
 8003e54:	4628      	mov	r0, r5
 8003e56:	f000 ff29 	bl	8004cac <_sbrk_r>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	d00a      	beq.n	8003e74 <sbrk_aligned+0x34>
 8003e5e:	1cc4      	adds	r4, r0, #3
 8003e60:	f024 0403 	bic.w	r4, r4, #3
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d007      	beq.n	8003e78 <sbrk_aligned+0x38>
 8003e68:	1a21      	subs	r1, r4, r0
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 ff1e 	bl	8004cac <_sbrk_r>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d101      	bne.n	8003e78 <sbrk_aligned+0x38>
 8003e74:	f04f 34ff 	mov.w	r4, #4294967295
 8003e78:	4620      	mov	r0, r4
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	20000128 	.word	0x20000128

08003e80 <_malloc_r>:
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	1ccd      	adds	r5, r1, #3
 8003e86:	f025 0503 	bic.w	r5, r5, #3
 8003e8a:	3508      	adds	r5, #8
 8003e8c:	2d0c      	cmp	r5, #12
 8003e8e:	bf38      	it	cc
 8003e90:	250c      	movcc	r5, #12
 8003e92:	2d00      	cmp	r5, #0
 8003e94:	4607      	mov	r7, r0
 8003e96:	db01      	blt.n	8003e9c <_malloc_r+0x1c>
 8003e98:	42a9      	cmp	r1, r5
 8003e9a:	d905      	bls.n	8003ea8 <_malloc_r+0x28>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea8:	4e2e      	ldr	r6, [pc, #184]	; (8003f64 <_malloc_r+0xe4>)
 8003eaa:	f001 f935 	bl	8005118 <__malloc_lock>
 8003eae:	6833      	ldr	r3, [r6, #0]
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	bb34      	cbnz	r4, 8003f02 <_malloc_r+0x82>
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f7ff ffc2 	bl	8003e40 <sbrk_aligned>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	d14d      	bne.n	8003f5e <_malloc_r+0xde>
 8003ec2:	6834      	ldr	r4, [r6, #0]
 8003ec4:	4626      	mov	r6, r4
 8003ec6:	2e00      	cmp	r6, #0
 8003ec8:	d140      	bne.n	8003f4c <_malloc_r+0xcc>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4638      	mov	r0, r7
 8003ed0:	eb04 0803 	add.w	r8, r4, r3
 8003ed4:	f000 feea 	bl	8004cac <_sbrk_r>
 8003ed8:	4580      	cmp	r8, r0
 8003eda:	d13a      	bne.n	8003f52 <_malloc_r+0xd2>
 8003edc:	6821      	ldr	r1, [r4, #0]
 8003ede:	3503      	adds	r5, #3
 8003ee0:	1a6d      	subs	r5, r5, r1
 8003ee2:	f025 0503 	bic.w	r5, r5, #3
 8003ee6:	3508      	adds	r5, #8
 8003ee8:	2d0c      	cmp	r5, #12
 8003eea:	bf38      	it	cc
 8003eec:	250c      	movcc	r5, #12
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	f7ff ffa5 	bl	8003e40 <sbrk_aligned>
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d02b      	beq.n	8003f52 <_malloc_r+0xd2>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	442b      	add	r3, r5
 8003efe:	6023      	str	r3, [r4, #0]
 8003f00:	e00e      	b.n	8003f20 <_malloc_r+0xa0>
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	1b52      	subs	r2, r2, r5
 8003f06:	d41e      	bmi.n	8003f46 <_malloc_r+0xc6>
 8003f08:	2a0b      	cmp	r2, #11
 8003f0a:	d916      	bls.n	8003f3a <_malloc_r+0xba>
 8003f0c:	1961      	adds	r1, r4, r5
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	6025      	str	r5, [r4, #0]
 8003f12:	bf18      	it	ne
 8003f14:	6059      	strne	r1, [r3, #4]
 8003f16:	6863      	ldr	r3, [r4, #4]
 8003f18:	bf08      	it	eq
 8003f1a:	6031      	streq	r1, [r6, #0]
 8003f1c:	5162      	str	r2, [r4, r5]
 8003f1e:	604b      	str	r3, [r1, #4]
 8003f20:	4638      	mov	r0, r7
 8003f22:	f104 060b 	add.w	r6, r4, #11
 8003f26:	f001 f8fd 	bl	8005124 <__malloc_unlock>
 8003f2a:	f026 0607 	bic.w	r6, r6, #7
 8003f2e:	1d23      	adds	r3, r4, #4
 8003f30:	1af2      	subs	r2, r6, r3
 8003f32:	d0b6      	beq.n	8003ea2 <_malloc_r+0x22>
 8003f34:	1b9b      	subs	r3, r3, r6
 8003f36:	50a3      	str	r3, [r4, r2]
 8003f38:	e7b3      	b.n	8003ea2 <_malloc_r+0x22>
 8003f3a:	6862      	ldr	r2, [r4, #4]
 8003f3c:	42a3      	cmp	r3, r4
 8003f3e:	bf0c      	ite	eq
 8003f40:	6032      	streq	r2, [r6, #0]
 8003f42:	605a      	strne	r2, [r3, #4]
 8003f44:	e7ec      	b.n	8003f20 <_malloc_r+0xa0>
 8003f46:	4623      	mov	r3, r4
 8003f48:	6864      	ldr	r4, [r4, #4]
 8003f4a:	e7b2      	b.n	8003eb2 <_malloc_r+0x32>
 8003f4c:	4634      	mov	r4, r6
 8003f4e:	6876      	ldr	r6, [r6, #4]
 8003f50:	e7b9      	b.n	8003ec6 <_malloc_r+0x46>
 8003f52:	230c      	movs	r3, #12
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4638      	mov	r0, r7
 8003f58:	f001 f8e4 	bl	8005124 <__malloc_unlock>
 8003f5c:	e7a1      	b.n	8003ea2 <_malloc_r+0x22>
 8003f5e:	6025      	str	r5, [r4, #0]
 8003f60:	e7de      	b.n	8003f20 <_malloc_r+0xa0>
 8003f62:	bf00      	nop
 8003f64:	20000124 	.word	0x20000124

08003f68 <__sfputc_r>:
 8003f68:	6893      	ldr	r3, [r2, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	b410      	push	{r4}
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	da08      	bge.n	8003f86 <__sfputc_r+0x1e>
 8003f74:	6994      	ldr	r4, [r2, #24]
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	db01      	blt.n	8003f7e <__sfputc_r+0x16>
 8003f7a:	290a      	cmp	r1, #10
 8003f7c:	d103      	bne.n	8003f86 <__sfputc_r+0x1e>
 8003f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f82:	f7ff bbfb 	b.w	800377c <__swbuf_r>
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	1c58      	adds	r0, r3, #1
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	7019      	strb	r1, [r3, #0]
 8003f8e:	4608      	mov	r0, r1
 8003f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <__sfputs_r>:
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f98:	4606      	mov	r6, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	18d5      	adds	r5, r2, r3
 8003fa0:	42ac      	cmp	r4, r5
 8003fa2:	d101      	bne.n	8003fa8 <__sfputs_r+0x12>
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e007      	b.n	8003fb8 <__sfputs_r+0x22>
 8003fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fac:	463a      	mov	r2, r7
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff ffda 	bl	8003f68 <__sfputc_r>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d1f3      	bne.n	8003fa0 <__sfputs_r+0xa>
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fbc <_vfiprintf_r>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	460d      	mov	r5, r1
 8003fc2:	b09d      	sub	sp, #116	; 0x74
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	4606      	mov	r6, r0
 8003fca:	b118      	cbz	r0, 8003fd4 <_vfiprintf_r+0x18>
 8003fcc:	6983      	ldr	r3, [r0, #24]
 8003fce:	b90b      	cbnz	r3, 8003fd4 <_vfiprintf_r+0x18>
 8003fd0:	f7ff fdc0 	bl	8003b54 <__sinit>
 8003fd4:	4b89      	ldr	r3, [pc, #548]	; (80041fc <_vfiprintf_r+0x240>)
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	d11b      	bne.n	8004012 <_vfiprintf_r+0x56>
 8003fda:	6875      	ldr	r5, [r6, #4]
 8003fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	d405      	bmi.n	8003fee <_vfiprintf_r+0x32>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	059a      	lsls	r2, r3, #22
 8003fe6:	d402      	bmi.n	8003fee <_vfiprintf_r+0x32>
 8003fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fea:	f7ff fe6e 	bl	8003cca <__retarget_lock_acquire_recursive>
 8003fee:	89ab      	ldrh	r3, [r5, #12]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	d501      	bpl.n	8003ff8 <_vfiprintf_r+0x3c>
 8003ff4:	692b      	ldr	r3, [r5, #16]
 8003ff6:	b9eb      	cbnz	r3, 8004034 <_vfiprintf_r+0x78>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff fc10 	bl	8003820 <__swsetup_r>
 8004000:	b1c0      	cbz	r0, 8004034 <_vfiprintf_r+0x78>
 8004002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004004:	07dc      	lsls	r4, r3, #31
 8004006:	d50e      	bpl.n	8004026 <_vfiprintf_r+0x6a>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	b01d      	add	sp, #116	; 0x74
 800400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <_vfiprintf_r+0x244>)
 8004014:	429d      	cmp	r5, r3
 8004016:	d101      	bne.n	800401c <_vfiprintf_r+0x60>
 8004018:	68b5      	ldr	r5, [r6, #8]
 800401a:	e7df      	b.n	8003fdc <_vfiprintf_r+0x20>
 800401c:	4b79      	ldr	r3, [pc, #484]	; (8004204 <_vfiprintf_r+0x248>)
 800401e:	429d      	cmp	r5, r3
 8004020:	bf08      	it	eq
 8004022:	68f5      	ldreq	r5, [r6, #12]
 8004024:	e7da      	b.n	8003fdc <_vfiprintf_r+0x20>
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	0598      	lsls	r0, r3, #22
 800402a:	d4ed      	bmi.n	8004008 <_vfiprintf_r+0x4c>
 800402c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800402e:	f7ff fe4d 	bl	8003ccc <__retarget_lock_release_recursive>
 8004032:	e7e9      	b.n	8004008 <_vfiprintf_r+0x4c>
 8004034:	2300      	movs	r3, #0
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	2320      	movs	r3, #32
 800403a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	2330      	movs	r3, #48	; 0x30
 8004044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004208 <_vfiprintf_r+0x24c>
 8004048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800404c:	f04f 0901 	mov.w	r9, #1
 8004050:	4623      	mov	r3, r4
 8004052:	469a      	mov	sl, r3
 8004054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004058:	b10a      	cbz	r2, 800405e <_vfiprintf_r+0xa2>
 800405a:	2a25      	cmp	r2, #37	; 0x25
 800405c:	d1f9      	bne.n	8004052 <_vfiprintf_r+0x96>
 800405e:	ebba 0b04 	subs.w	fp, sl, r4
 8004062:	d00b      	beq.n	800407c <_vfiprintf_r+0xc0>
 8004064:	465b      	mov	r3, fp
 8004066:	4622      	mov	r2, r4
 8004068:	4629      	mov	r1, r5
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff ff93 	bl	8003f96 <__sfputs_r>
 8004070:	3001      	adds	r0, #1
 8004072:	f000 80aa 	beq.w	80041ca <_vfiprintf_r+0x20e>
 8004076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004078:	445a      	add	r2, fp
 800407a:	9209      	str	r2, [sp, #36]	; 0x24
 800407c:	f89a 3000 	ldrb.w	r3, [sl]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a2 	beq.w	80041ca <_vfiprintf_r+0x20e>
 8004086:	2300      	movs	r3, #0
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004090:	f10a 0a01 	add.w	sl, sl, #1
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	9307      	str	r3, [sp, #28]
 8004098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800409c:	931a      	str	r3, [sp, #104]	; 0x68
 800409e:	4654      	mov	r4, sl
 80040a0:	2205      	movs	r2, #5
 80040a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a6:	4858      	ldr	r0, [pc, #352]	; (8004208 <_vfiprintf_r+0x24c>)
 80040a8:	f7fc f8ca 	bl	8000240 <memchr>
 80040ac:	9a04      	ldr	r2, [sp, #16]
 80040ae:	b9d8      	cbnz	r0, 80040e8 <_vfiprintf_r+0x12c>
 80040b0:	06d1      	lsls	r1, r2, #27
 80040b2:	bf44      	itt	mi
 80040b4:	2320      	movmi	r3, #32
 80040b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ba:	0713      	lsls	r3, r2, #28
 80040bc:	bf44      	itt	mi
 80040be:	232b      	movmi	r3, #43	; 0x2b
 80040c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040c4:	f89a 3000 	ldrb.w	r3, [sl]
 80040c8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ca:	d015      	beq.n	80040f8 <_vfiprintf_r+0x13c>
 80040cc:	9a07      	ldr	r2, [sp, #28]
 80040ce:	4654      	mov	r4, sl
 80040d0:	2000      	movs	r0, #0
 80040d2:	f04f 0c0a 	mov.w	ip, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040dc:	3b30      	subs	r3, #48	; 0x30
 80040de:	2b09      	cmp	r3, #9
 80040e0:	d94e      	bls.n	8004180 <_vfiprintf_r+0x1c4>
 80040e2:	b1b0      	cbz	r0, 8004112 <_vfiprintf_r+0x156>
 80040e4:	9207      	str	r2, [sp, #28]
 80040e6:	e014      	b.n	8004112 <_vfiprintf_r+0x156>
 80040e8:	eba0 0308 	sub.w	r3, r0, r8
 80040ec:	fa09 f303 	lsl.w	r3, r9, r3
 80040f0:	4313      	orrs	r3, r2
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	46a2      	mov	sl, r4
 80040f6:	e7d2      	b.n	800409e <_vfiprintf_r+0xe2>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	1d19      	adds	r1, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	9103      	str	r1, [sp, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfbb      	ittet	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	f042 0202 	orrlt.w	r2, r2, #2
 800410a:	9307      	strge	r3, [sp, #28]
 800410c:	9307      	strlt	r3, [sp, #28]
 800410e:	bfb8      	it	lt
 8004110:	9204      	strlt	r2, [sp, #16]
 8004112:	7823      	ldrb	r3, [r4, #0]
 8004114:	2b2e      	cmp	r3, #46	; 0x2e
 8004116:	d10c      	bne.n	8004132 <_vfiprintf_r+0x176>
 8004118:	7863      	ldrb	r3, [r4, #1]
 800411a:	2b2a      	cmp	r3, #42	; 0x2a
 800411c:	d135      	bne.n	800418a <_vfiprintf_r+0x1ce>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	9203      	str	r2, [sp, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	f04f 33ff 	movlt.w	r3, #4294967295
 800412e:	3402      	adds	r4, #2
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004218 <_vfiprintf_r+0x25c>
 8004136:	7821      	ldrb	r1, [r4, #0]
 8004138:	2203      	movs	r2, #3
 800413a:	4650      	mov	r0, sl
 800413c:	f7fc f880 	bl	8000240 <memchr>
 8004140:	b140      	cbz	r0, 8004154 <_vfiprintf_r+0x198>
 8004142:	2340      	movs	r3, #64	; 0x40
 8004144:	eba0 000a 	sub.w	r0, r0, sl
 8004148:	fa03 f000 	lsl.w	r0, r3, r0
 800414c:	9b04      	ldr	r3, [sp, #16]
 800414e:	4303      	orrs	r3, r0
 8004150:	3401      	adds	r4, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	482c      	ldr	r0, [pc, #176]	; (800420c <_vfiprintf_r+0x250>)
 800415a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415e:	2206      	movs	r2, #6
 8004160:	f7fc f86e 	bl	8000240 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d03f      	beq.n	80041e8 <_vfiprintf_r+0x22c>
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <_vfiprintf_r+0x254>)
 800416a:	bb1b      	cbnz	r3, 80041b4 <_vfiprintf_r+0x1f8>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	3308      	adds	r3, #8
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417a:	443b      	add	r3, r7
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
 800417e:	e767      	b.n	8004050 <_vfiprintf_r+0x94>
 8004180:	fb0c 3202 	mla	r2, ip, r2, r3
 8004184:	460c      	mov	r4, r1
 8004186:	2001      	movs	r0, #1
 8004188:	e7a5      	b.n	80040d6 <_vfiprintf_r+0x11a>
 800418a:	2300      	movs	r3, #0
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0c0a 	mov.w	ip, #10
 8004196:	4620      	mov	r0, r4
 8004198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419c:	3a30      	subs	r2, #48	; 0x30
 800419e:	2a09      	cmp	r2, #9
 80041a0:	d903      	bls.n	80041aa <_vfiprintf_r+0x1ee>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c5      	beq.n	8004132 <_vfiprintf_r+0x176>
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	e7c3      	b.n	8004132 <_vfiprintf_r+0x176>
 80041aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ae:	4604      	mov	r4, r0
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7f0      	b.n	8004196 <_vfiprintf_r+0x1da>
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <_vfiprintf_r+0x258>)
 80041bc:	a904      	add	r1, sp, #16
 80041be:	4630      	mov	r0, r6
 80041c0:	f3af 8000 	nop.w
 80041c4:	4607      	mov	r7, r0
 80041c6:	1c78      	adds	r0, r7, #1
 80041c8:	d1d6      	bne.n	8004178 <_vfiprintf_r+0x1bc>
 80041ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041cc:	07d9      	lsls	r1, r3, #31
 80041ce:	d405      	bmi.n	80041dc <_vfiprintf_r+0x220>
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	059a      	lsls	r2, r3, #22
 80041d4:	d402      	bmi.n	80041dc <_vfiprintf_r+0x220>
 80041d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d8:	f7ff fd78 	bl	8003ccc <__retarget_lock_release_recursive>
 80041dc:	89ab      	ldrh	r3, [r5, #12]
 80041de:	065b      	lsls	r3, r3, #25
 80041e0:	f53f af12 	bmi.w	8004008 <_vfiprintf_r+0x4c>
 80041e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041e6:	e711      	b.n	800400c <_vfiprintf_r+0x50>
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	462a      	mov	r2, r5
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <_vfiprintf_r+0x258>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 f880 	bl	80042f8 <_printf_i>
 80041f8:	e7e4      	b.n	80041c4 <_vfiprintf_r+0x208>
 80041fa:	bf00      	nop
 80041fc:	08005f68 	.word	0x08005f68
 8004200:	08005f88 	.word	0x08005f88
 8004204:	08005f48 	.word	0x08005f48
 8004208:	08005fa8 	.word	0x08005fa8
 800420c:	08005fb2 	.word	0x08005fb2
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f97 	.word	0x08003f97
 8004218:	08005fae 	.word	0x08005fae

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4699      	mov	r9, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004268:	1e13      	subs	r3, r2, #0
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	68e5      	ldr	r5, [r4, #12]
 8004286:	6832      	ldr	r2, [r6, #0]
 8004288:	f003 0306 	and.w	r3, r3, #6
 800428c:	2b04      	cmp	r3, #4
 800428e:	bf08      	it	eq
 8004290:	1aad      	subeq	r5, r5, r2
 8004292:	68a3      	ldr	r3, [r4, #8]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4649      	mov	r1, r9
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	; 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4649      	mov	r1, r9
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c0      	blx	r8
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	7e0f      	ldrb	r7, [r1, #24]
 80042fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004300:	2f78      	cmp	r7, #120	; 0x78
 8004302:	4691      	mov	r9, r2
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	469a      	mov	sl, r3
 800430a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	; 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d8 	beq.w	80044ca <_printf_i+0x1d2>
 800431a:	2f58      	cmp	r7, #88	; 0x58
 800431c:	f000 80a3 	beq.w	8004466 <_printf_i+0x16e>
 8004320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a101      	add	r1, pc, #4	; (adr r1, 8004338 <_printf_i+0x40>)
 8004334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044b1 	.word	0x080044b1
 8004368:	080043d5 	.word	0x080043d5
 800436c:	08004493 	.word	0x08004493
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044d3 	.word	0x080044d3
 800437c:	08004321 	.word	0x08004321
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	0800449b 	.word	0x0800449b
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	602a      	str	r2, [r5, #0]
 8004398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a3      	b.n	80044ec <_printf_i+0x1f4>
 80043a4:	6820      	ldr	r0, [r4, #0]
 80043a6:	6829      	ldr	r1, [r5, #0]
 80043a8:	0606      	lsls	r6, r0, #24
 80043aa:	f101 0304 	add.w	r3, r1, #4
 80043ae:	d50a      	bpl.n	80043c6 <_printf_i+0xce>
 80043b0:	680e      	ldr	r6, [r1, #0]
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	2e00      	cmp	r6, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xc8>
 80043b8:	232d      	movs	r3, #45	; 0x2d
 80043ba:	4276      	negs	r6, r6
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	485e      	ldr	r0, [pc, #376]	; (800453c <_printf_i+0x244>)
 80043c2:	230a      	movs	r3, #10
 80043c4:	e019      	b.n	80043fa <_printf_i+0x102>
 80043c6:	680e      	ldr	r6, [r1, #0]
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ce:	bf18      	it	ne
 80043d0:	b236      	sxthne	r6, r6
 80043d2:	e7ef      	b.n	80043b4 <_printf_i+0xbc>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	6820      	ldr	r0, [r4, #0]
 80043d8:	1d19      	adds	r1, r3, #4
 80043da:	6029      	str	r1, [r5, #0]
 80043dc:	0601      	lsls	r1, r0, #24
 80043de:	d501      	bpl.n	80043e4 <_printf_i+0xec>
 80043e0:	681e      	ldr	r6, [r3, #0]
 80043e2:	e002      	b.n	80043ea <_printf_i+0xf2>
 80043e4:	0646      	lsls	r6, r0, #25
 80043e6:	d5fb      	bpl.n	80043e0 <_printf_i+0xe8>
 80043e8:	881e      	ldrh	r6, [r3, #0]
 80043ea:	4854      	ldr	r0, [pc, #336]	; (800453c <_printf_i+0x244>)
 80043ec:	2f6f      	cmp	r7, #111	; 0x6f
 80043ee:	bf0c      	ite	eq
 80043f0:	2308      	moveq	r3, #8
 80043f2:	230a      	movne	r3, #10
 80043f4:	2100      	movs	r1, #0
 80043f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043fa:	6865      	ldr	r5, [r4, #4]
 80043fc:	60a5      	str	r5, [r4, #8]
 80043fe:	2d00      	cmp	r5, #0
 8004400:	bfa2      	ittt	ge
 8004402:	6821      	ldrge	r1, [r4, #0]
 8004404:	f021 0104 	bicge.w	r1, r1, #4
 8004408:	6021      	strge	r1, [r4, #0]
 800440a:	b90e      	cbnz	r6, 8004410 <_printf_i+0x118>
 800440c:	2d00      	cmp	r5, #0
 800440e:	d04d      	beq.n	80044ac <_printf_i+0x1b4>
 8004410:	4615      	mov	r5, r2
 8004412:	fbb6 f1f3 	udiv	r1, r6, r3
 8004416:	fb03 6711 	mls	r7, r3, r1, r6
 800441a:	5dc7      	ldrb	r7, [r0, r7]
 800441c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004420:	4637      	mov	r7, r6
 8004422:	42bb      	cmp	r3, r7
 8004424:	460e      	mov	r6, r1
 8004426:	d9f4      	bls.n	8004412 <_printf_i+0x11a>
 8004428:	2b08      	cmp	r3, #8
 800442a:	d10b      	bne.n	8004444 <_printf_i+0x14c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07de      	lsls	r6, r3, #31
 8004430:	d508      	bpl.n	8004444 <_printf_i+0x14c>
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	6861      	ldr	r1, [r4, #4]
 8004436:	4299      	cmp	r1, r3
 8004438:	bfde      	ittt	le
 800443a:	2330      	movle	r3, #48	; 0x30
 800443c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004444:	1b52      	subs	r2, r2, r5
 8004446:	6122      	str	r2, [r4, #16]
 8004448:	f8cd a000 	str.w	sl, [sp]
 800444c:	464b      	mov	r3, r9
 800444e:	aa03      	add	r2, sp, #12
 8004450:	4621      	mov	r1, r4
 8004452:	4640      	mov	r0, r8
 8004454:	f7ff fee2 	bl	800421c <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d14c      	bne.n	80044f6 <_printf_i+0x1fe>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	b004      	add	sp, #16
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004466:	4835      	ldr	r0, [pc, #212]	; (800453c <_printf_i+0x244>)
 8004468:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800446c:	6829      	ldr	r1, [r5, #0]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f851 6b04 	ldr.w	r6, [r1], #4
 8004474:	6029      	str	r1, [r5, #0]
 8004476:	061d      	lsls	r5, r3, #24
 8004478:	d514      	bpl.n	80044a4 <_printf_i+0x1ac>
 800447a:	07df      	lsls	r7, r3, #31
 800447c:	bf44      	itt	mi
 800447e:	f043 0320 	orrmi.w	r3, r3, #32
 8004482:	6023      	strmi	r3, [r4, #0]
 8004484:	b91e      	cbnz	r6, 800448e <_printf_i+0x196>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f023 0320 	bic.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	2310      	movs	r3, #16
 8004490:	e7b0      	b.n	80043f4 <_printf_i+0xfc>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	2378      	movs	r3, #120	; 0x78
 800449c:	4828      	ldr	r0, [pc, #160]	; (8004540 <_printf_i+0x248>)
 800449e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a2:	e7e3      	b.n	800446c <_printf_i+0x174>
 80044a4:	0659      	lsls	r1, r3, #25
 80044a6:	bf48      	it	mi
 80044a8:	b2b6      	uxthmi	r6, r6
 80044aa:	e7e6      	b.n	800447a <_printf_i+0x182>
 80044ac:	4615      	mov	r5, r2
 80044ae:	e7bb      	b.n	8004428 <_printf_i+0x130>
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	6826      	ldr	r6, [r4, #0]
 80044b4:	6961      	ldr	r1, [r4, #20]
 80044b6:	1d18      	adds	r0, r3, #4
 80044b8:	6028      	str	r0, [r5, #0]
 80044ba:	0635      	lsls	r5, r6, #24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0x1cc>
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0x1d2>
 80044c4:	0670      	lsls	r0, r6, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0x1c8>
 80044c8:	8019      	strh	r1, [r3, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	4615      	mov	r5, r2
 80044d0:	e7ba      	b.n	8004448 <_printf_i+0x150>
 80044d2:	682b      	ldr	r3, [r5, #0]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	602a      	str	r2, [r5, #0]
 80044d8:	681d      	ldr	r5, [r3, #0]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	2100      	movs	r1, #0
 80044de:	4628      	mov	r0, r5
 80044e0:	f7fb feae 	bl	8000240 <memchr>
 80044e4:	b108      	cbz	r0, 80044ea <_printf_i+0x1f2>
 80044e6:	1b40      	subs	r0, r0, r5
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	e7a8      	b.n	8004448 <_printf_i+0x150>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	462a      	mov	r2, r5
 80044fa:	4649      	mov	r1, r9
 80044fc:	4640      	mov	r0, r8
 80044fe:	47d0      	blx	sl
 8004500:	3001      	adds	r0, #1
 8004502:	d0ab      	beq.n	800445c <_printf_i+0x164>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	079b      	lsls	r3, r3, #30
 8004508:	d413      	bmi.n	8004532 <_printf_i+0x23a>
 800450a:	68e0      	ldr	r0, [r4, #12]
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	4298      	cmp	r0, r3
 8004510:	bfb8      	it	lt
 8004512:	4618      	movlt	r0, r3
 8004514:	e7a4      	b.n	8004460 <_printf_i+0x168>
 8004516:	2301      	movs	r3, #1
 8004518:	4632      	mov	r2, r6
 800451a:	4649      	mov	r1, r9
 800451c:	4640      	mov	r0, r8
 800451e:	47d0      	blx	sl
 8004520:	3001      	adds	r0, #1
 8004522:	d09b      	beq.n	800445c <_printf_i+0x164>
 8004524:	3501      	adds	r5, #1
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	9903      	ldr	r1, [sp, #12]
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	42ab      	cmp	r3, r5
 800452e:	dcf2      	bgt.n	8004516 <_printf_i+0x21e>
 8004530:	e7eb      	b.n	800450a <_printf_i+0x212>
 8004532:	2500      	movs	r5, #0
 8004534:	f104 0619 	add.w	r6, r4, #25
 8004538:	e7f5      	b.n	8004526 <_printf_i+0x22e>
 800453a:	bf00      	nop
 800453c:	08005fb9 	.word	0x08005fb9
 8004540:	08005fca 	.word	0x08005fca

08004544 <__svfiscanf_r>:
 8004544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004548:	461d      	mov	r5, r3
 800454a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800454c:	07df      	lsls	r7, r3, #31
 800454e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004552:	4606      	mov	r6, r0
 8004554:	460c      	mov	r4, r1
 8004556:	4692      	mov	sl, r2
 8004558:	d405      	bmi.n	8004566 <__svfiscanf_r+0x22>
 800455a:	898b      	ldrh	r3, [r1, #12]
 800455c:	0598      	lsls	r0, r3, #22
 800455e:	d402      	bmi.n	8004566 <__svfiscanf_r+0x22>
 8004560:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8004562:	f7ff fbb2 	bl	8003cca <__retarget_lock_acquire_recursive>
 8004566:	2300      	movs	r3, #0
 8004568:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800456c:	4ba6      	ldr	r3, [pc, #664]	; (8004808 <__svfiscanf_r+0x2c4>)
 800456e:	93a0      	str	r3, [sp, #640]	; 0x280
 8004570:	f10d 0804 	add.w	r8, sp, #4
 8004574:	4ba5      	ldr	r3, [pc, #660]	; (800480c <__svfiscanf_r+0x2c8>)
 8004576:	4fa6      	ldr	r7, [pc, #664]	; (8004810 <__svfiscanf_r+0x2cc>)
 8004578:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004814 <__svfiscanf_r+0x2d0>
 800457c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004580:	93a1      	str	r3, [sp, #644]	; 0x284
 8004582:	9500      	str	r5, [sp, #0]
 8004584:	f89a 3000 	ldrb.w	r3, [sl]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8173 	beq.w	8004874 <__svfiscanf_r+0x330>
 800458e:	5dd9      	ldrb	r1, [r3, r7]
 8004590:	f011 0108 	ands.w	r1, r1, #8
 8004594:	f10a 0501 	add.w	r5, sl, #1
 8004598:	d019      	beq.n	80045ce <__svfiscanf_r+0x8a>
 800459a:	6863      	ldr	r3, [r4, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	dd0f      	ble.n	80045c0 <__svfiscanf_r+0x7c>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	5cba      	ldrb	r2, [r7, r2]
 80045a6:	0711      	lsls	r1, r2, #28
 80045a8:	d401      	bmi.n	80045ae <__svfiscanf_r+0x6a>
 80045aa:	46aa      	mov	sl, r5
 80045ac:	e7ea      	b.n	8004584 <__svfiscanf_r+0x40>
 80045ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045b0:	3201      	adds	r2, #1
 80045b2:	9245      	str	r2, [sp, #276]	; 0x114
 80045b4:	6862      	ldr	r2, [r4, #4]
 80045b6:	3301      	adds	r3, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	6062      	str	r2, [r4, #4]
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	e7ec      	b.n	800459a <__svfiscanf_r+0x56>
 80045c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80045c2:	4621      	mov	r1, r4
 80045c4:	4630      	mov	r0, r6
 80045c6:	4798      	blx	r3
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d0e9      	beq.n	80045a0 <__svfiscanf_r+0x5c>
 80045cc:	e7ed      	b.n	80045aa <__svfiscanf_r+0x66>
 80045ce:	2b25      	cmp	r3, #37	; 0x25
 80045d0:	d012      	beq.n	80045f8 <__svfiscanf_r+0xb4>
 80045d2:	469a      	mov	sl, r3
 80045d4:	6863      	ldr	r3, [r4, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f340 8095 	ble.w	8004706 <__svfiscanf_r+0x1c2>
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	7813      	ldrb	r3, [r2, #0]
 80045e0:	4553      	cmp	r3, sl
 80045e2:	f040 8147 	bne.w	8004874 <__svfiscanf_r+0x330>
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80045ee:	3201      	adds	r2, #1
 80045f0:	3301      	adds	r3, #1
 80045f2:	6022      	str	r2, [r4, #0]
 80045f4:	9345      	str	r3, [sp, #276]	; 0x114
 80045f6:	e7d8      	b.n	80045aa <__svfiscanf_r+0x66>
 80045f8:	9141      	str	r1, [sp, #260]	; 0x104
 80045fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80045fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004600:	2b2a      	cmp	r3, #42	; 0x2a
 8004602:	bf02      	ittt	eq
 8004604:	2310      	moveq	r3, #16
 8004606:	9341      	streq	r3, [sp, #260]	; 0x104
 8004608:	f10a 0502 	addeq.w	r5, sl, #2
 800460c:	220a      	movs	r2, #10
 800460e:	46aa      	mov	sl, r5
 8004610:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004614:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004618:	2b09      	cmp	r3, #9
 800461a:	d91e      	bls.n	800465a <__svfiscanf_r+0x116>
 800461c:	487d      	ldr	r0, [pc, #500]	; (8004814 <__svfiscanf_r+0x2d0>)
 800461e:	2203      	movs	r2, #3
 8004620:	f7fb fe0e 	bl	8000240 <memchr>
 8004624:	b140      	cbz	r0, 8004638 <__svfiscanf_r+0xf4>
 8004626:	2301      	movs	r3, #1
 8004628:	eba0 0009 	sub.w	r0, r0, r9
 800462c:	fa03 f000 	lsl.w	r0, r3, r0
 8004630:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004632:	4318      	orrs	r0, r3
 8004634:	9041      	str	r0, [sp, #260]	; 0x104
 8004636:	4655      	mov	r5, sl
 8004638:	f815 3b01 	ldrb.w	r3, [r5], #1
 800463c:	2b78      	cmp	r3, #120	; 0x78
 800463e:	d807      	bhi.n	8004650 <__svfiscanf_r+0x10c>
 8004640:	2b57      	cmp	r3, #87	; 0x57
 8004642:	d811      	bhi.n	8004668 <__svfiscanf_r+0x124>
 8004644:	2b25      	cmp	r3, #37	; 0x25
 8004646:	d0c4      	beq.n	80045d2 <__svfiscanf_r+0x8e>
 8004648:	d858      	bhi.n	80046fc <__svfiscanf_r+0x1b8>
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80c8 	beq.w	80047e0 <__svfiscanf_r+0x29c>
 8004650:	2303      	movs	r3, #3
 8004652:	9347      	str	r3, [sp, #284]	; 0x11c
 8004654:	230a      	movs	r3, #10
 8004656:	9342      	str	r3, [sp, #264]	; 0x108
 8004658:	e07c      	b.n	8004754 <__svfiscanf_r+0x210>
 800465a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800465c:	fb02 1103 	mla	r1, r2, r3, r1
 8004660:	3930      	subs	r1, #48	; 0x30
 8004662:	9143      	str	r1, [sp, #268]	; 0x10c
 8004664:	4655      	mov	r5, sl
 8004666:	e7d2      	b.n	800460e <__svfiscanf_r+0xca>
 8004668:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800466c:	2a20      	cmp	r2, #32
 800466e:	d8ef      	bhi.n	8004650 <__svfiscanf_r+0x10c>
 8004670:	a101      	add	r1, pc, #4	; (adr r1, 8004678 <__svfiscanf_r+0x134>)
 8004672:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800473f 	.word	0x0800473f
 800467c:	08004651 	.word	0x08004651
 8004680:	08004651 	.word	0x08004651
 8004684:	0800479d 	.word	0x0800479d
 8004688:	08004651 	.word	0x08004651
 800468c:	08004651 	.word	0x08004651
 8004690:	08004651 	.word	0x08004651
 8004694:	08004651 	.word	0x08004651
 8004698:	08004651 	.word	0x08004651
 800469c:	08004651 	.word	0x08004651
 80046a0:	08004651 	.word	0x08004651
 80046a4:	080047b3 	.word	0x080047b3
 80046a8:	08004789 	.word	0x08004789
 80046ac:	08004703 	.word	0x08004703
 80046b0:	08004703 	.word	0x08004703
 80046b4:	08004703 	.word	0x08004703
 80046b8:	08004651 	.word	0x08004651
 80046bc:	0800478d 	.word	0x0800478d
 80046c0:	08004651 	.word	0x08004651
 80046c4:	08004651 	.word	0x08004651
 80046c8:	08004651 	.word	0x08004651
 80046cc:	08004651 	.word	0x08004651
 80046d0:	080047c3 	.word	0x080047c3
 80046d4:	08004795 	.word	0x08004795
 80046d8:	08004737 	.word	0x08004737
 80046dc:	08004651 	.word	0x08004651
 80046e0:	08004651 	.word	0x08004651
 80046e4:	080047bf 	.word	0x080047bf
 80046e8:	08004651 	.word	0x08004651
 80046ec:	08004789 	.word	0x08004789
 80046f0:	08004651 	.word	0x08004651
 80046f4:	08004651 	.word	0x08004651
 80046f8:	0800473f 	.word	0x0800473f
 80046fc:	3b45      	subs	r3, #69	; 0x45
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d8a6      	bhi.n	8004650 <__svfiscanf_r+0x10c>
 8004702:	2305      	movs	r3, #5
 8004704:	e025      	b.n	8004752 <__svfiscanf_r+0x20e>
 8004706:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004708:	4621      	mov	r1, r4
 800470a:	4630      	mov	r0, r6
 800470c:	4798      	blx	r3
 800470e:	2800      	cmp	r0, #0
 8004710:	f43f af64 	beq.w	80045dc <__svfiscanf_r+0x98>
 8004714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004716:	07da      	lsls	r2, r3, #31
 8004718:	f140 80a4 	bpl.w	8004864 <__svfiscanf_r+0x320>
 800471c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800471e:	2800      	cmp	r0, #0
 8004720:	d067      	beq.n	80047f2 <__svfiscanf_r+0x2ae>
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004728:	bf18      	it	ne
 800472a:	f04f 30ff 	movne.w	r0, #4294967295
 800472e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004738:	f042 0220 	orr.w	r2, r2, #32
 800473c:	9241      	str	r2, [sp, #260]	; 0x104
 800473e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004744:	9241      	str	r2, [sp, #260]	; 0x104
 8004746:	2210      	movs	r2, #16
 8004748:	2b6f      	cmp	r3, #111	; 0x6f
 800474a:	9242      	str	r2, [sp, #264]	; 0x108
 800474c:	bf34      	ite	cc
 800474e:	2303      	movcc	r3, #3
 8004750:	2304      	movcs	r3, #4
 8004752:	9347      	str	r3, [sp, #284]	; 0x11c
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	dd4e      	ble.n	80047f8 <__svfiscanf_r+0x2b4>
 800475a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800475c:	065b      	lsls	r3, r3, #25
 800475e:	d404      	bmi.n	800476a <__svfiscanf_r+0x226>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	5cba      	ldrb	r2, [r7, r2]
 8004766:	0710      	lsls	r0, r2, #28
 8004768:	d456      	bmi.n	8004818 <__svfiscanf_r+0x2d4>
 800476a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800476c:	2b02      	cmp	r3, #2
 800476e:	dc65      	bgt.n	800483c <__svfiscanf_r+0x2f8>
 8004770:	466b      	mov	r3, sp
 8004772:	4622      	mov	r2, r4
 8004774:	a941      	add	r1, sp, #260	; 0x104
 8004776:	4630      	mov	r0, r6
 8004778:	f000 f8b2 	bl	80048e0 <_scanf_chars>
 800477c:	2801      	cmp	r0, #1
 800477e:	d079      	beq.n	8004874 <__svfiscanf_r+0x330>
 8004780:	2802      	cmp	r0, #2
 8004782:	f47f af12 	bne.w	80045aa <__svfiscanf_r+0x66>
 8004786:	e7c5      	b.n	8004714 <__svfiscanf_r+0x1d0>
 8004788:	220a      	movs	r2, #10
 800478a:	e7dd      	b.n	8004748 <__svfiscanf_r+0x204>
 800478c:	2300      	movs	r3, #0
 800478e:	9342      	str	r3, [sp, #264]	; 0x108
 8004790:	2303      	movs	r3, #3
 8004792:	e7de      	b.n	8004752 <__svfiscanf_r+0x20e>
 8004794:	2308      	movs	r3, #8
 8004796:	9342      	str	r3, [sp, #264]	; 0x108
 8004798:	2304      	movs	r3, #4
 800479a:	e7da      	b.n	8004752 <__svfiscanf_r+0x20e>
 800479c:	4629      	mov	r1, r5
 800479e:	4640      	mov	r0, r8
 80047a0:	f000 fa94 	bl	8004ccc <__sccl>
 80047a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80047a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047aa:	9341      	str	r3, [sp, #260]	; 0x104
 80047ac:	4605      	mov	r5, r0
 80047ae:	2301      	movs	r3, #1
 80047b0:	e7cf      	b.n	8004752 <__svfiscanf_r+0x20e>
 80047b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80047b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b8:	9341      	str	r3, [sp, #260]	; 0x104
 80047ba:	2300      	movs	r3, #0
 80047bc:	e7c9      	b.n	8004752 <__svfiscanf_r+0x20e>
 80047be:	2302      	movs	r3, #2
 80047c0:	e7c7      	b.n	8004752 <__svfiscanf_r+0x20e>
 80047c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80047c4:	06c3      	lsls	r3, r0, #27
 80047c6:	f53f aef0 	bmi.w	80045aa <__svfiscanf_r+0x66>
 80047ca:	9b00      	ldr	r3, [sp, #0]
 80047cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047ce:	1d19      	adds	r1, r3, #4
 80047d0:	9100      	str	r1, [sp, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f010 0f01 	tst.w	r0, #1
 80047d8:	bf14      	ite	ne
 80047da:	801a      	strhne	r2, [r3, #0]
 80047dc:	601a      	streq	r2, [r3, #0]
 80047de:	e6e4      	b.n	80045aa <__svfiscanf_r+0x66>
 80047e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047e2:	07d8      	lsls	r0, r3, #31
 80047e4:	d405      	bmi.n	80047f2 <__svfiscanf_r+0x2ae>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	0599      	lsls	r1, r3, #22
 80047ea:	d402      	bmi.n	80047f2 <__svfiscanf_r+0x2ae>
 80047ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ee:	f7ff fa6d 	bl	8003ccc <__retarget_lock_release_recursive>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	e79a      	b.n	800472e <__svfiscanf_r+0x1ea>
 80047f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047fa:	4621      	mov	r1, r4
 80047fc:	4630      	mov	r0, r6
 80047fe:	4798      	blx	r3
 8004800:	2800      	cmp	r0, #0
 8004802:	d0aa      	beq.n	800475a <__svfiscanf_r+0x216>
 8004804:	e786      	b.n	8004714 <__svfiscanf_r+0x1d0>
 8004806:	bf00      	nop
 8004808:	08004f21 	.word	0x08004f21
 800480c:	08004b99 	.word	0x08004b99
 8004810:	08005e46 	.word	0x08005e46
 8004814:	08005fae 	.word	0x08005fae
 8004818:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800481a:	3201      	adds	r2, #1
 800481c:	9245      	str	r2, [sp, #276]	; 0x114
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	3a01      	subs	r2, #1
 8004822:	2a00      	cmp	r2, #0
 8004824:	6062      	str	r2, [r4, #4]
 8004826:	dd02      	ble.n	800482e <__svfiscanf_r+0x2ea>
 8004828:	3301      	adds	r3, #1
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	e798      	b.n	8004760 <__svfiscanf_r+0x21c>
 800482e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004830:	4621      	mov	r1, r4
 8004832:	4630      	mov	r0, r6
 8004834:	4798      	blx	r3
 8004836:	2800      	cmp	r0, #0
 8004838:	d092      	beq.n	8004760 <__svfiscanf_r+0x21c>
 800483a:	e76b      	b.n	8004714 <__svfiscanf_r+0x1d0>
 800483c:	2b04      	cmp	r3, #4
 800483e:	dc06      	bgt.n	800484e <__svfiscanf_r+0x30a>
 8004840:	466b      	mov	r3, sp
 8004842:	4622      	mov	r2, r4
 8004844:	a941      	add	r1, sp, #260	; 0x104
 8004846:	4630      	mov	r0, r6
 8004848:	f000 f8a4 	bl	8004994 <_scanf_i>
 800484c:	e796      	b.n	800477c <__svfiscanf_r+0x238>
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <__svfiscanf_r+0x348>)
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f aeaa 	beq.w	80045aa <__svfiscanf_r+0x66>
 8004856:	466b      	mov	r3, sp
 8004858:	4622      	mov	r2, r4
 800485a:	a941      	add	r1, sp, #260	; 0x104
 800485c:	4630      	mov	r0, r6
 800485e:	f3af 8000 	nop.w
 8004862:	e78b      	b.n	800477c <__svfiscanf_r+0x238>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	0599      	lsls	r1, r3, #22
 8004868:	f53f af58 	bmi.w	800471c <__svfiscanf_r+0x1d8>
 800486c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486e:	f7ff fa2d 	bl	8003ccc <__retarget_lock_release_recursive>
 8004872:	e753      	b.n	800471c <__svfiscanf_r+0x1d8>
 8004874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004876:	07da      	lsls	r2, r3, #31
 8004878:	d405      	bmi.n	8004886 <__svfiscanf_r+0x342>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	d402      	bmi.n	8004886 <__svfiscanf_r+0x342>
 8004880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004882:	f7ff fa23 	bl	8003ccc <__retarget_lock_release_recursive>
 8004886:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004888:	e751      	b.n	800472e <__svfiscanf_r+0x1ea>
 800488a:	bf00      	nop
 800488c:	00000000 	.word	0x00000000

08004890 <_vfiscanf_r>:
 8004890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004892:	460c      	mov	r4, r1
 8004894:	4605      	mov	r5, r0
 8004896:	b138      	cbz	r0, 80048a8 <_vfiscanf_r+0x18>
 8004898:	6981      	ldr	r1, [r0, #24]
 800489a:	b929      	cbnz	r1, 80048a8 <_vfiscanf_r+0x18>
 800489c:	e9cd 2300 	strd	r2, r3, [sp]
 80048a0:	f7ff f958 	bl	8003b54 <__sinit>
 80048a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048a8:	490a      	ldr	r1, [pc, #40]	; (80048d4 <_vfiscanf_r+0x44>)
 80048aa:	428c      	cmp	r4, r1
 80048ac:	d107      	bne.n	80048be <_vfiscanf_r+0x2e>
 80048ae:	686c      	ldr	r4, [r5, #4]
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	b003      	add	sp, #12
 80048b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048ba:	f7ff be43 	b.w	8004544 <__svfiscanf_r>
 80048be:	4906      	ldr	r1, [pc, #24]	; (80048d8 <_vfiscanf_r+0x48>)
 80048c0:	428c      	cmp	r4, r1
 80048c2:	d101      	bne.n	80048c8 <_vfiscanf_r+0x38>
 80048c4:	68ac      	ldr	r4, [r5, #8]
 80048c6:	e7f3      	b.n	80048b0 <_vfiscanf_r+0x20>
 80048c8:	4904      	ldr	r1, [pc, #16]	; (80048dc <_vfiscanf_r+0x4c>)
 80048ca:	428c      	cmp	r4, r1
 80048cc:	bf08      	it	eq
 80048ce:	68ec      	ldreq	r4, [r5, #12]
 80048d0:	e7ee      	b.n	80048b0 <_vfiscanf_r+0x20>
 80048d2:	bf00      	nop
 80048d4:	08005f68 	.word	0x08005f68
 80048d8:	08005f88 	.word	0x08005f88
 80048dc:	08005f48 	.word	0x08005f48

080048e0 <_scanf_chars>:
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e4:	4615      	mov	r5, r2
 80048e6:	688a      	ldr	r2, [r1, #8]
 80048e8:	4680      	mov	r8, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b932      	cbnz	r2, 80048fc <_scanf_chars+0x1c>
 80048ee:	698a      	ldr	r2, [r1, #24]
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2201      	moveq	r2, #1
 80048f6:	f04f 32ff 	movne.w	r2, #4294967295
 80048fa:	608a      	str	r2, [r1, #8]
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004990 <_scanf_chars+0xb0>
 8004902:	06d1      	lsls	r1, r2, #27
 8004904:	bf5f      	itttt	pl
 8004906:	681a      	ldrpl	r2, [r3, #0]
 8004908:	1d11      	addpl	r1, r2, #4
 800490a:	6019      	strpl	r1, [r3, #0]
 800490c:	6816      	ldrpl	r6, [r2, #0]
 800490e:	2700      	movs	r7, #0
 8004910:	69a0      	ldr	r0, [r4, #24]
 8004912:	b188      	cbz	r0, 8004938 <_scanf_chars+0x58>
 8004914:	2801      	cmp	r0, #1
 8004916:	d107      	bne.n	8004928 <_scanf_chars+0x48>
 8004918:	682a      	ldr	r2, [r5, #0]
 800491a:	7811      	ldrb	r1, [r2, #0]
 800491c:	6962      	ldr	r2, [r4, #20]
 800491e:	5c52      	ldrb	r2, [r2, r1]
 8004920:	b952      	cbnz	r2, 8004938 <_scanf_chars+0x58>
 8004922:	2f00      	cmp	r7, #0
 8004924:	d031      	beq.n	800498a <_scanf_chars+0xaa>
 8004926:	e022      	b.n	800496e <_scanf_chars+0x8e>
 8004928:	2802      	cmp	r0, #2
 800492a:	d120      	bne.n	800496e <_scanf_chars+0x8e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	d41a      	bmi.n	800496e <_scanf_chars+0x8e>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	06da      	lsls	r2, r3, #27
 800493c:	bf5e      	ittt	pl
 800493e:	682b      	ldrpl	r3, [r5, #0]
 8004940:	781b      	ldrbpl	r3, [r3, #0]
 8004942:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004946:	682a      	ldr	r2, [r5, #0]
 8004948:	686b      	ldr	r3, [r5, #4]
 800494a:	3201      	adds	r2, #1
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	68a2      	ldr	r2, [r4, #8]
 8004950:	3b01      	subs	r3, #1
 8004952:	3a01      	subs	r2, #1
 8004954:	606b      	str	r3, [r5, #4]
 8004956:	3701      	adds	r7, #1
 8004958:	60a2      	str	r2, [r4, #8]
 800495a:	b142      	cbz	r2, 800496e <_scanf_chars+0x8e>
 800495c:	2b00      	cmp	r3, #0
 800495e:	dcd7      	bgt.n	8004910 <_scanf_chars+0x30>
 8004960:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004964:	4629      	mov	r1, r5
 8004966:	4640      	mov	r0, r8
 8004968:	4798      	blx	r3
 800496a:	2800      	cmp	r0, #0
 800496c:	d0d0      	beq.n	8004910 <_scanf_chars+0x30>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	f013 0310 	ands.w	r3, r3, #16
 8004974:	d105      	bne.n	8004982 <_scanf_chars+0xa2>
 8004976:	68e2      	ldr	r2, [r4, #12]
 8004978:	3201      	adds	r2, #1
 800497a:	60e2      	str	r2, [r4, #12]
 800497c:	69a2      	ldr	r2, [r4, #24]
 800497e:	b102      	cbz	r2, 8004982 <_scanf_chars+0xa2>
 8004980:	7033      	strb	r3, [r6, #0]
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	443b      	add	r3, r7
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2000      	movs	r0, #0
 800498a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800498e:	bf00      	nop
 8004990:	08005e46 	.word	0x08005e46

08004994 <_scanf_i>:
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	4698      	mov	r8, r3
 800499a:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <_scanf_i+0x1e0>)
 800499c:	460c      	mov	r4, r1
 800499e:	4682      	mov	sl, r0
 80049a0:	4616      	mov	r6, r2
 80049a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049a6:	b087      	sub	sp, #28
 80049a8:	ab03      	add	r3, sp, #12
 80049aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80049ae:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <_scanf_i+0x1e4>)
 80049b0:	69a1      	ldr	r1, [r4, #24]
 80049b2:	4a72      	ldr	r2, [pc, #456]	; (8004b7c <_scanf_i+0x1e8>)
 80049b4:	2903      	cmp	r1, #3
 80049b6:	bf18      	it	ne
 80049b8:	461a      	movne	r2, r3
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	9201      	str	r2, [sp, #4]
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80049c4:	bf88      	it	hi
 80049c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80049ca:	4627      	mov	r7, r4
 80049cc:	bf82      	ittt	hi
 80049ce:	eb03 0905 	addhi.w	r9, r3, r5
 80049d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049d6:	60a3      	strhi	r3, [r4, #8]
 80049d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80049dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80049e0:	bf98      	it	ls
 80049e2:	f04f 0900 	movls.w	r9, #0
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	463d      	mov	r5, r7
 80049ea:	f04f 0b00 	mov.w	fp, #0
 80049ee:	6831      	ldr	r1, [r6, #0]
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	7809      	ldrb	r1, [r1, #0]
 80049f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f7fb fc21 	bl	8000240 <memchr>
 80049fe:	b328      	cbz	r0, 8004a4c <_scanf_i+0xb8>
 8004a00:	f1bb 0f01 	cmp.w	fp, #1
 8004a04:	d159      	bne.n	8004aba <_scanf_i+0x126>
 8004a06:	6862      	ldr	r2, [r4, #4]
 8004a08:	b92a      	cbnz	r2, 8004a16 <_scanf_i+0x82>
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	6022      	str	r2, [r4, #0]
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004a1c:	6022      	str	r2, [r4, #0]
 8004a1e:	68a2      	ldr	r2, [r4, #8]
 8004a20:	1e51      	subs	r1, r2, #1
 8004a22:	60a1      	str	r1, [r4, #8]
 8004a24:	b192      	cbz	r2, 8004a4c <_scanf_i+0xb8>
 8004a26:	6832      	ldr	r2, [r6, #0]
 8004a28:	1c51      	adds	r1, r2, #1
 8004a2a:	6031      	str	r1, [r6, #0]
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	f805 2b01 	strb.w	r2, [r5], #1
 8004a32:	6872      	ldr	r2, [r6, #4]
 8004a34:	3a01      	subs	r2, #1
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	6072      	str	r2, [r6, #4]
 8004a3a:	dc07      	bgt.n	8004a4c <_scanf_i+0xb8>
 8004a3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004a40:	4631      	mov	r1, r6
 8004a42:	4650      	mov	r0, sl
 8004a44:	4790      	blx	r2
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f040 8085 	bne.w	8004b56 <_scanf_i+0x1c2>
 8004a4c:	f10b 0b01 	add.w	fp, fp, #1
 8004a50:	f1bb 0f03 	cmp.w	fp, #3
 8004a54:	d1cb      	bne.n	80049ee <_scanf_i+0x5a>
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	b90b      	cbnz	r3, 8004a5e <_scanf_i+0xca>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	6063      	str	r3, [r4, #4]
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	4947      	ldr	r1, [pc, #284]	; (8004b80 <_scanf_i+0x1ec>)
 8004a62:	6960      	ldr	r0, [r4, #20]
 8004a64:	1ac9      	subs	r1, r1, r3
 8004a66:	f000 f931 	bl	8004ccc <__sccl>
 8004a6a:	f04f 0b00 	mov.w	fp, #0
 8004a6e:	68a3      	ldr	r3, [r4, #8]
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d03d      	beq.n	8004af2 <_scanf_i+0x15e>
 8004a76:	6831      	ldr	r1, [r6, #0]
 8004a78:	6960      	ldr	r0, [r4, #20]
 8004a7a:	f891 c000 	ldrb.w	ip, [r1]
 8004a7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d035      	beq.n	8004af2 <_scanf_i+0x15e>
 8004a86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004a8a:	d124      	bne.n	8004ad6 <_scanf_i+0x142>
 8004a8c:	0510      	lsls	r0, r2, #20
 8004a8e:	d522      	bpl.n	8004ad6 <_scanf_i+0x142>
 8004a90:	f10b 0b01 	add.w	fp, fp, #1
 8004a94:	f1b9 0f00 	cmp.w	r9, #0
 8004a98:	d003      	beq.n	8004aa2 <_scanf_i+0x10e>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6873      	ldr	r3, [r6, #4]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	6073      	str	r3, [r6, #4]
 8004aaa:	dd1b      	ble.n	8004ae4 <_scanf_i+0x150>
 8004aac:	6833      	ldr	r3, [r6, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	68a3      	ldr	r3, [r4, #8]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60a3      	str	r3, [r4, #8]
 8004ab8:	e7d9      	b.n	8004a6e <_scanf_i+0xda>
 8004aba:	f1bb 0f02 	cmp.w	fp, #2
 8004abe:	d1ae      	bne.n	8004a1e <_scanf_i+0x8a>
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004ac6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004aca:	d1bf      	bne.n	8004a4c <_scanf_i+0xb8>
 8004acc:	2310      	movs	r3, #16
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	e7a2      	b.n	8004a1c <_scanf_i+0x88>
 8004ad6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	780b      	ldrb	r3, [r1, #0]
 8004ade:	f805 3b01 	strb.w	r3, [r5], #1
 8004ae2:	e7de      	b.n	8004aa2 <_scanf_i+0x10e>
 8004ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4650      	mov	r0, sl
 8004aec:	4798      	blx	r3
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d0df      	beq.n	8004ab2 <_scanf_i+0x11e>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	05db      	lsls	r3, r3, #23
 8004af6:	d50d      	bpl.n	8004b14 <_scanf_i+0x180>
 8004af8:	42bd      	cmp	r5, r7
 8004afa:	d909      	bls.n	8004b10 <_scanf_i+0x17c>
 8004afc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b04:	4632      	mov	r2, r6
 8004b06:	4650      	mov	r0, sl
 8004b08:	4798      	blx	r3
 8004b0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004b0e:	464d      	mov	r5, r9
 8004b10:	42bd      	cmp	r5, r7
 8004b12:	d02d      	beq.n	8004b70 <_scanf_i+0x1dc>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	f012 0210 	ands.w	r2, r2, #16
 8004b1a:	d113      	bne.n	8004b44 <_scanf_i+0x1b0>
 8004b1c:	702a      	strb	r2, [r5, #0]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	9e01      	ldr	r6, [sp, #4]
 8004b22:	4639      	mov	r1, r7
 8004b24:	4650      	mov	r0, sl
 8004b26:	47b0      	blx	r6
 8004b28:	6821      	ldr	r1, [r4, #0]
 8004b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b2e:	f011 0f20 	tst.w	r1, #32
 8004b32:	d013      	beq.n	8004b5c <_scanf_i+0x1c8>
 8004b34:	1d1a      	adds	r2, r3, #4
 8004b36:	f8c8 2000 	str.w	r2, [r8]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6018      	str	r0, [r3, #0]
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60e3      	str	r3, [r4, #12]
 8004b44:	1bed      	subs	r5, r5, r7
 8004b46:	44ab      	add	fp, r5
 8004b48:	6925      	ldr	r5, [r4, #16]
 8004b4a:	445d      	add	r5, fp
 8004b4c:	6125      	str	r5, [r4, #16]
 8004b4e:	2000      	movs	r0, #0
 8004b50:	b007      	add	sp, #28
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	f04f 0b00 	mov.w	fp, #0
 8004b5a:	e7ca      	b.n	8004af2 <_scanf_i+0x15e>
 8004b5c:	1d1a      	adds	r2, r3, #4
 8004b5e:	f8c8 2000 	str.w	r2, [r8]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f011 0f01 	tst.w	r1, #1
 8004b68:	bf14      	ite	ne
 8004b6a:	8018      	strhne	r0, [r3, #0]
 8004b6c:	6018      	streq	r0, [r3, #0]
 8004b6e:	e7e6      	b.n	8004b3e <_scanf_i+0x1aa>
 8004b70:	2001      	movs	r0, #1
 8004b72:	e7ed      	b.n	8004b50 <_scanf_i+0x1bc>
 8004b74:	08005df8 	.word	0x08005df8
 8004b78:	08004ea9 	.word	0x08004ea9
 8004b7c:	080036e1 	.word	0x080036e1
 8004b80:	08005ff4 	.word	0x08005ff4

08004b84 <lflush>:
 8004b84:	8983      	ldrh	r3, [r0, #12]
 8004b86:	f003 0309 	and.w	r3, r3, #9
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	d101      	bne.n	8004b92 <lflush+0xe>
 8004b8e:	f7fe bf77 	b.w	8003a80 <fflush>
 8004b92:	2000      	movs	r0, #0
 8004b94:	4770      	bx	lr
	...

08004b98 <__srefill_r>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	b118      	cbz	r0, 8004ba8 <__srefill_r+0x10>
 8004ba0:	6983      	ldr	r3, [r0, #24]
 8004ba2:	b90b      	cbnz	r3, 8004ba8 <__srefill_r+0x10>
 8004ba4:	f7fe ffd6 	bl	8003b54 <__sinit>
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <__srefill_r+0x100>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d10a      	bne.n	8004bc4 <__srefill_r+0x2c>
 8004bae:	686c      	ldr	r4, [r5, #4]
 8004bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	069e      	lsls	r6, r3, #26
 8004bbc:	d50c      	bpl.n	8004bd8 <__srefill_r+0x40>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	e066      	b.n	8004c92 <__srefill_r+0xfa>
 8004bc4:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <__srefill_r+0x104>)
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d101      	bne.n	8004bce <__srefill_r+0x36>
 8004bca:	68ac      	ldr	r4, [r5, #8]
 8004bcc:	e7f0      	b.n	8004bb0 <__srefill_r+0x18>
 8004bce:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <__srefill_r+0x108>)
 8004bd0:	429c      	cmp	r4, r3
 8004bd2:	bf08      	it	eq
 8004bd4:	68ec      	ldreq	r4, [r5, #12]
 8004bd6:	e7eb      	b.n	8004bb0 <__srefill_r+0x18>
 8004bd8:	0758      	lsls	r0, r3, #29
 8004bda:	d448      	bmi.n	8004c6e <__srefill_r+0xd6>
 8004bdc:	06d9      	lsls	r1, r3, #27
 8004bde:	d405      	bmi.n	8004bec <__srefill_r+0x54>
 8004be0:	2309      	movs	r3, #9
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	e7e8      	b.n	8004bbe <__srefill_r+0x26>
 8004bec:	071a      	lsls	r2, r3, #28
 8004bee:	d50b      	bpl.n	8004c08 <__srefill_r+0x70>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f7fe ff08 	bl	8003a08 <_fflush_r>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d1e0      	bne.n	8004bbe <__srefill_r+0x26>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	60a0      	str	r0, [r4, #8]
 8004c00:	f023 0308 	bic.w	r3, r3, #8
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	61a0      	str	r0, [r4, #24]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	b91b      	cbnz	r3, 8004c1c <__srefill_r+0x84>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7ff f87e 	bl	8003d18 <__smakebuf_r>
 8004c1c:	89a6      	ldrh	r6, [r4, #12]
 8004c1e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004c22:	07b3      	lsls	r3, r6, #30
 8004c24:	d00f      	beq.n	8004c46 <__srefill_r+0xae>
 8004c26:	2301      	movs	r3, #1
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <__srefill_r+0x10c>)
 8004c2c:	491e      	ldr	r1, [pc, #120]	; (8004ca8 <__srefill_r+0x110>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	f006 0609 	and.w	r6, r6, #9
 8004c34:	f7ff f80c 	bl	8003c50 <_fwalk>
 8004c38:	2e09      	cmp	r6, #9
 8004c3a:	81a7      	strh	r7, [r4, #12]
 8004c3c:	d103      	bne.n	8004c46 <__srefill_r+0xae>
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f7fe fe5b 	bl	80038fc <__sflush_r>
 8004c46:	6922      	ldr	r2, [r4, #16]
 8004c48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c4a:	6963      	ldr	r3, [r4, #20]
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	2800      	cmp	r0, #0
 8004c56:	6060      	str	r0, [r4, #4]
 8004c58:	dc1c      	bgt.n	8004c94 <__srefill_r+0xfc>
 8004c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5e:	bf17      	itett	ne
 8004c60:	2200      	movne	r2, #0
 8004c62:	f043 0320 	orreq.w	r3, r3, #32
 8004c66:	6062      	strne	r2, [r4, #4]
 8004c68:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004c6c:	e7bc      	b.n	8004be8 <__srefill_r+0x50>
 8004c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d0cd      	beq.n	8004c10 <__srefill_r+0x78>
 8004c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <__srefill_r+0xea>
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f7ff f893 	bl	8003da8 <_free_r>
 8004c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c84:	6063      	str	r3, [r4, #4]
 8004c86:	2000      	movs	r0, #0
 8004c88:	6360      	str	r0, [r4, #52]	; 0x34
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0c0      	beq.n	8004c10 <__srefill_r+0x78>
 8004c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7fc      	b.n	8004c92 <__srefill_r+0xfa>
 8004c98:	08005f68 	.word	0x08005f68
 8004c9c:	08005f88 	.word	0x08005f88
 8004ca0:	08005f48 	.word	0x08005f48
 8004ca4:	08005e1c 	.word	0x08005e1c
 8004ca8:	08004b85 	.word	0x08004b85

08004cac <_sbrk_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	; (8004cc8 <_sbrk_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f7fc f854 	bl	8000d64 <_sbrk>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_sbrk_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_sbrk_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	2000012c 	.word	0x2000012c

08004ccc <__sccl>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	780b      	ldrb	r3, [r1, #0]
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2b5e      	cmp	r3, #94	; 0x5e
 8004cd4:	bf0b      	itete	eq
 8004cd6:	784b      	ldrbeq	r3, [r1, #1]
 8004cd8:	1c48      	addne	r0, r1, #1
 8004cda:	1c88      	addeq	r0, r1, #2
 8004cdc:	2200      	movne	r2, #0
 8004cde:	bf08      	it	eq
 8004ce0:	2201      	moveq	r2, #1
 8004ce2:	1e61      	subs	r1, r4, #1
 8004ce4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004ce8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004cec:	42a9      	cmp	r1, r5
 8004cee:	d1fb      	bne.n	8004ce8 <__sccl+0x1c>
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <__sccl+0x2a>
 8004cf2:	3801      	subs	r0, #1
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	f082 0201 	eor.w	r2, r2, #1
 8004cfa:	54e2      	strb	r2, [r4, r3]
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004d04:	292d      	cmp	r1, #45	; 0x2d
 8004d06:	d006      	beq.n	8004d16 <__sccl+0x4a>
 8004d08:	295d      	cmp	r1, #93	; 0x5d
 8004d0a:	d0f3      	beq.n	8004cf4 <__sccl+0x28>
 8004d0c:	b909      	cbnz	r1, 8004d12 <__sccl+0x46>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	e7f0      	b.n	8004cf4 <__sccl+0x28>
 8004d12:	460b      	mov	r3, r1
 8004d14:	e7f1      	b.n	8004cfa <__sccl+0x2e>
 8004d16:	786e      	ldrb	r6, [r5, #1]
 8004d18:	2e5d      	cmp	r6, #93	; 0x5d
 8004d1a:	d0fa      	beq.n	8004d12 <__sccl+0x46>
 8004d1c:	42b3      	cmp	r3, r6
 8004d1e:	dcf8      	bgt.n	8004d12 <__sccl+0x46>
 8004d20:	3502      	adds	r5, #2
 8004d22:	4619      	mov	r1, r3
 8004d24:	3101      	adds	r1, #1
 8004d26:	428e      	cmp	r6, r1
 8004d28:	5462      	strb	r2, [r4, r1]
 8004d2a:	dcfb      	bgt.n	8004d24 <__sccl+0x58>
 8004d2c:	1af1      	subs	r1, r6, r3
 8004d2e:	3901      	subs	r1, #1
 8004d30:	1c58      	adds	r0, r3, #1
 8004d32:	42b3      	cmp	r3, r6
 8004d34:	bfa8      	it	ge
 8004d36:	2100      	movge	r1, #0
 8004d38:	1843      	adds	r3, r0, r1
 8004d3a:	e7e0      	b.n	8004cfe <__sccl+0x32>

08004d3c <__sread>:
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	f000 fa24 	bl	8005190 <_read_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	bfab      	itete	ge
 8004d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d50:	181b      	addge	r3, r3, r0
 8004d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d56:	bfac      	ite	ge
 8004d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d5a:	81a3      	strhlt	r3, [r4, #12]
 8004d5c:	bd10      	pop	{r4, pc}

08004d5e <__swrite>:
 8004d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d62:	461f      	mov	r7, r3
 8004d64:	898b      	ldrh	r3, [r1, #12]
 8004d66:	05db      	lsls	r3, r3, #23
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	d505      	bpl.n	8004d7c <__swrite+0x1e>
 8004d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d74:	2302      	movs	r3, #2
 8004d76:	2200      	movs	r2, #0
 8004d78:	f000 f9ae 	bl	80050d8 <_lseek_r>
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d86:	81a3      	strh	r3, [r4, #12]
 8004d88:	4632      	mov	r2, r6
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d92:	f000 b95d 	b.w	8005050 <_write_r>

08004d96 <__sseek>:
 8004d96:	b510      	push	{r4, lr}
 8004d98:	460c      	mov	r4, r1
 8004d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9e:	f000 f99b 	bl	80050d8 <_lseek_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	bf15      	itete	ne
 8004da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004db2:	81a3      	strheq	r3, [r4, #12]
 8004db4:	bf18      	it	ne
 8004db6:	81a3      	strhne	r3, [r4, #12]
 8004db8:	bd10      	pop	{r4, pc}

08004dba <__sclose>:
 8004dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbe:	f000 b959 	b.w	8005074 <_close_r>
	...

08004dc4 <_strtoul_l.constprop.0>:
 8004dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	4f36      	ldr	r7, [pc, #216]	; (8004ea4 <_strtoul_l.constprop.0+0xe0>)
 8004dca:	4686      	mov	lr, r0
 8004dcc:	460d      	mov	r5, r1
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dd4:	5de6      	ldrb	r6, [r4, r7]
 8004dd6:	f016 0608 	ands.w	r6, r6, #8
 8004dda:	d1f8      	bne.n	8004dce <_strtoul_l.constprop.0+0xa>
 8004ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8004dde:	d12f      	bne.n	8004e40 <_strtoul_l.constprop.0+0x7c>
 8004de0:	782c      	ldrb	r4, [r5, #0]
 8004de2:	2601      	movs	r6, #1
 8004de4:	1c85      	adds	r5, r0, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d057      	beq.n	8004e9a <_strtoul_l.constprop.0+0xd6>
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d109      	bne.n	8004e02 <_strtoul_l.constprop.0+0x3e>
 8004dee:	2c30      	cmp	r4, #48	; 0x30
 8004df0:	d107      	bne.n	8004e02 <_strtoul_l.constprop.0+0x3e>
 8004df2:	7828      	ldrb	r0, [r5, #0]
 8004df4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004df8:	2858      	cmp	r0, #88	; 0x58
 8004dfa:	d149      	bne.n	8004e90 <_strtoul_l.constprop.0+0xcc>
 8004dfc:	786c      	ldrb	r4, [r5, #1]
 8004dfe:	2310      	movs	r3, #16
 8004e00:	3502      	adds	r5, #2
 8004e02:	f04f 38ff 	mov.w	r8, #4294967295
 8004e06:	2700      	movs	r7, #0
 8004e08:	fbb8 f8f3 	udiv	r8, r8, r3
 8004e0c:	fb03 f908 	mul.w	r9, r3, r8
 8004e10:	ea6f 0909 	mvn.w	r9, r9
 8004e14:	4638      	mov	r0, r7
 8004e16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004e1a:	f1bc 0f09 	cmp.w	ip, #9
 8004e1e:	d814      	bhi.n	8004e4a <_strtoul_l.constprop.0+0x86>
 8004e20:	4664      	mov	r4, ip
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	dd22      	ble.n	8004e6c <_strtoul_l.constprop.0+0xa8>
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	db1d      	blt.n	8004e66 <_strtoul_l.constprop.0+0xa2>
 8004e2a:	4580      	cmp	r8, r0
 8004e2c:	d31b      	bcc.n	8004e66 <_strtoul_l.constprop.0+0xa2>
 8004e2e:	d101      	bne.n	8004e34 <_strtoul_l.constprop.0+0x70>
 8004e30:	45a1      	cmp	r9, r4
 8004e32:	db18      	blt.n	8004e66 <_strtoul_l.constprop.0+0xa2>
 8004e34:	fb00 4003 	mla	r0, r0, r3, r4
 8004e38:	2701      	movs	r7, #1
 8004e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e3e:	e7ea      	b.n	8004e16 <_strtoul_l.constprop.0+0x52>
 8004e40:	2c2b      	cmp	r4, #43	; 0x2b
 8004e42:	bf04      	itt	eq
 8004e44:	782c      	ldrbeq	r4, [r5, #0]
 8004e46:	1c85      	addeq	r5, r0, #2
 8004e48:	e7cd      	b.n	8004de6 <_strtoul_l.constprop.0+0x22>
 8004e4a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e4e:	f1bc 0f19 	cmp.w	ip, #25
 8004e52:	d801      	bhi.n	8004e58 <_strtoul_l.constprop.0+0x94>
 8004e54:	3c37      	subs	r4, #55	; 0x37
 8004e56:	e7e4      	b.n	8004e22 <_strtoul_l.constprop.0+0x5e>
 8004e58:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004e5c:	f1bc 0f19 	cmp.w	ip, #25
 8004e60:	d804      	bhi.n	8004e6c <_strtoul_l.constprop.0+0xa8>
 8004e62:	3c57      	subs	r4, #87	; 0x57
 8004e64:	e7dd      	b.n	8004e22 <_strtoul_l.constprop.0+0x5e>
 8004e66:	f04f 37ff 	mov.w	r7, #4294967295
 8004e6a:	e7e6      	b.n	8004e3a <_strtoul_l.constprop.0+0x76>
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	da07      	bge.n	8004e80 <_strtoul_l.constprop.0+0xbc>
 8004e70:	2322      	movs	r3, #34	; 0x22
 8004e72:	f8ce 3000 	str.w	r3, [lr]
 8004e76:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7a:	b932      	cbnz	r2, 8004e8a <_strtoul_l.constprop.0+0xc6>
 8004e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e80:	b106      	cbz	r6, 8004e84 <_strtoul_l.constprop.0+0xc0>
 8004e82:	4240      	negs	r0, r0
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d0f9      	beq.n	8004e7c <_strtoul_l.constprop.0+0xb8>
 8004e88:	b107      	cbz	r7, 8004e8c <_strtoul_l.constprop.0+0xc8>
 8004e8a:	1e69      	subs	r1, r5, #1
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	e7f5      	b.n	8004e7c <_strtoul_l.constprop.0+0xb8>
 8004e90:	2430      	movs	r4, #48	; 0x30
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1b5      	bne.n	8004e02 <_strtoul_l.constprop.0+0x3e>
 8004e96:	2308      	movs	r3, #8
 8004e98:	e7b3      	b.n	8004e02 <_strtoul_l.constprop.0+0x3e>
 8004e9a:	2c30      	cmp	r4, #48	; 0x30
 8004e9c:	d0a9      	beq.n	8004df2 <_strtoul_l.constprop.0+0x2e>
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	e7af      	b.n	8004e02 <_strtoul_l.constprop.0+0x3e>
 8004ea2:	bf00      	nop
 8004ea4:	08005e46 	.word	0x08005e46

08004ea8 <_strtoul_r>:
 8004ea8:	f7ff bf8c 	b.w	8004dc4 <_strtoul_l.constprop.0>

08004eac <__submore>:
 8004eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d11d      	bne.n	8004ef8 <__submore+0x4c>
 8004ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ec0:	f7fe ffde 	bl	8003e80 <_malloc_r>
 8004ec4:	b918      	cbnz	r0, 8004ece <__submore+0x22>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ed4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004ede:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ee2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004ee6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004eea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004eee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004ef2:	6020      	str	r0, [r4, #0]
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e7e8      	b.n	8004eca <__submore+0x1e>
 8004ef8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004efa:	0077      	lsls	r7, r6, #1
 8004efc:	463a      	mov	r2, r7
 8004efe:	f000 f917 	bl	8005130 <_realloc_r>
 8004f02:	4605      	mov	r5, r0
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0de      	beq.n	8004ec6 <__submore+0x1a>
 8004f08:	eb00 0806 	add.w	r8, r0, r6
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4640      	mov	r0, r8
 8004f12:	f000 f8f3 	bl	80050fc <memcpy>
 8004f16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004f1a:	f8c4 8000 	str.w	r8, [r4]
 8004f1e:	e7e9      	b.n	8004ef4 <__submore+0x48>

08004f20 <_ungetc_r>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4614      	mov	r4, r2
 8004f24:	1c4a      	adds	r2, r1, #1
 8004f26:	4606      	mov	r6, r0
 8004f28:	460d      	mov	r5, r1
 8004f2a:	d103      	bne.n	8004f34 <_ungetc_r+0x14>
 8004f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f30:	4628      	mov	r0, r5
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	b118      	cbz	r0, 8004f3e <_ungetc_r+0x1e>
 8004f36:	6983      	ldr	r3, [r0, #24]
 8004f38:	b90b      	cbnz	r3, 8004f3e <_ungetc_r+0x1e>
 8004f3a:	f7fe fe0b 	bl	8003b54 <__sinit>
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <_ungetc_r+0x124>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d11d      	bne.n	8004f80 <_ungetc_r+0x60>
 8004f44:	6874      	ldr	r4, [r6, #4]
 8004f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f48:	07db      	lsls	r3, r3, #31
 8004f4a:	d405      	bmi.n	8004f58 <_ungetc_r+0x38>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	0598      	lsls	r0, r3, #22
 8004f50:	d402      	bmi.n	8004f58 <_ungetc_r+0x38>
 8004f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f54:	f7fe feb9 	bl	8003cca <__retarget_lock_acquire_recursive>
 8004f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5c:	f023 0320 	bic.w	r3, r3, #32
 8004f60:	0759      	lsls	r1, r3, #29
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	d42d      	bmi.n	8004fc4 <_ungetc_r+0xa4>
 8004f68:	06d3      	lsls	r3, r2, #27
 8004f6a:	d413      	bmi.n	8004f94 <_ungetc_r+0x74>
 8004f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f6e:	07dd      	lsls	r5, r3, #31
 8004f70:	d4dc      	bmi.n	8004f2c <_ungetc_r+0xc>
 8004f72:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004f76:	d1d9      	bne.n	8004f2c <_ungetc_r+0xc>
 8004f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7a:	f7fe fea7 	bl	8003ccc <__retarget_lock_release_recursive>
 8004f7e:	e7d5      	b.n	8004f2c <_ungetc_r+0xc>
 8004f80:	4b31      	ldr	r3, [pc, #196]	; (8005048 <_ungetc_r+0x128>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <_ungetc_r+0x6a>
 8004f86:	68b4      	ldr	r4, [r6, #8]
 8004f88:	e7dd      	b.n	8004f46 <_ungetc_r+0x26>
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <_ungetc_r+0x12c>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68f4      	ldreq	r4, [r6, #12]
 8004f92:	e7d8      	b.n	8004f46 <_ungetc_r+0x26>
 8004f94:	0710      	lsls	r0, r2, #28
 8004f96:	d511      	bpl.n	8004fbc <_ungetc_r+0x9c>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7fe fd34 	bl	8003a08 <_fflush_r>
 8004fa0:	b130      	cbz	r0, 8004fb0 <_ungetc_r+0x90>
 8004fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa4:	07d9      	lsls	r1, r3, #31
 8004fa6:	d4c1      	bmi.n	8004f2c <_ungetc_r+0xc>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fae:	e7e2      	b.n	8004f76 <_ungetc_r+0x56>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	60a0      	str	r0, [r4, #8]
 8004fb4:	f023 0308 	bic.w	r3, r3, #8
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	61a0      	str	r0, [r4, #24]
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fc6:	6862      	ldr	r2, [r4, #4]
 8004fc8:	b2ed      	uxtb	r5, r5
 8004fca:	b1d3      	cbz	r3, 8005002 <_ungetc_r+0xe2>
 8004fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	dc05      	bgt.n	8004fde <_ungetc_r+0xbe>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff ff69 	bl	8004eac <__submore>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d1e1      	bne.n	8004fa2 <_ungetc_r+0x82>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	6022      	str	r2, [r4, #0]
 8004fe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	3301      	adds	r3, #1
 8004fec:	6063      	str	r3, [r4, #4]
 8004fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff0:	07da      	lsls	r2, r3, #31
 8004ff2:	d49d      	bmi.n	8004f30 <_ungetc_r+0x10>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	059b      	lsls	r3, r3, #22
 8004ff8:	d49a      	bmi.n	8004f30 <_ungetc_r+0x10>
 8004ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ffc:	f7fe fe66 	bl	8003ccc <__retarget_lock_release_recursive>
 8005000:	e796      	b.n	8004f30 <_ungetc_r+0x10>
 8005002:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005004:	6920      	ldr	r0, [r4, #16]
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f001 0101 	and.w	r1, r1, #1
 800500c:	b160      	cbz	r0, 8005028 <_ungetc_r+0x108>
 800500e:	4298      	cmp	r0, r3
 8005010:	d20a      	bcs.n	8005028 <_ungetc_r+0x108>
 8005012:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005016:	42a8      	cmp	r0, r5
 8005018:	d106      	bne.n	8005028 <_ungetc_r+0x108>
 800501a:	3b01      	subs	r3, #1
 800501c:	3201      	adds	r2, #1
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	6062      	str	r2, [r4, #4]
 8005022:	2900      	cmp	r1, #0
 8005024:	d184      	bne.n	8004f30 <_ungetc_r+0x10>
 8005026:	e7e5      	b.n	8004ff4 <_ungetc_r+0xd4>
 8005028:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800502c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005030:	6363      	str	r3, [r4, #52]	; 0x34
 8005032:	2303      	movs	r3, #3
 8005034:	63a3      	str	r3, [r4, #56]	; 0x38
 8005036:	4623      	mov	r3, r4
 8005038:	f803 5f46 	strb.w	r5, [r3, #70]!
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	e7ee      	b.n	8005022 <_ungetc_r+0x102>
 8005044:	08005f68 	.word	0x08005f68
 8005048:	08005f88 	.word	0x08005f88
 800504c:	08005f48 	.word	0x08005f48

08005050 <_write_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	; (8005070 <_write_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fb fd3a 	bl	8000ad8 <_write>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_write_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_write_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	2000012c 	.word	0x2000012c

08005074 <_close_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4d06      	ldr	r5, [pc, #24]	; (8005090 <_close_r+0x1c>)
 8005078:	2300      	movs	r3, #0
 800507a:	4604      	mov	r4, r0
 800507c:	4608      	mov	r0, r1
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	f7fb fd56 	bl	8000b30 <_close>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_close_r+0x1a>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_close_r+0x1a>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	2000012c 	.word	0x2000012c

08005094 <_fstat_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d07      	ldr	r5, [pc, #28]	; (80050b4 <_fstat_r+0x20>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	f7fb fd95 	bl	8000bd0 <_fstat>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	d102      	bne.n	80050b0 <_fstat_r+0x1c>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	b103      	cbz	r3, 80050b0 <_fstat_r+0x1c>
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
 80050b2:	bf00      	nop
 80050b4:	2000012c 	.word	0x2000012c

080050b8 <_isatty_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d06      	ldr	r5, [pc, #24]	; (80050d4 <_isatty_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fb fcf2 	bl	8000aac <_isatty>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_isatty_r+0x1a>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_isatty_r+0x1a>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	2000012c 	.word	0x2000012c

080050d8 <_lseek_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d07      	ldr	r5, [pc, #28]	; (80050f8 <_lseek_r+0x20>)
 80050dc:	4604      	mov	r4, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	4611      	mov	r1, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	602a      	str	r2, [r5, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fb fd39 	bl	8000b5e <_lseek>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_lseek_r+0x1e>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_lseek_r+0x1e>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	2000012c 	.word	0x2000012c

080050fc <memcpy>:
 80050fc:	440a      	add	r2, r1
 80050fe:	4291      	cmp	r1, r2
 8005100:	f100 33ff 	add.w	r3, r0, #4294967295
 8005104:	d100      	bne.n	8005108 <memcpy+0xc>
 8005106:	4770      	bx	lr
 8005108:	b510      	push	{r4, lr}
 800510a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800510e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005112:	4291      	cmp	r1, r2
 8005114:	d1f9      	bne.n	800510a <memcpy+0xe>
 8005116:	bd10      	pop	{r4, pc}

08005118 <__malloc_lock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_lock+0x8>)
 800511a:	f7fe bdd6 	b.w	8003cca <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	20000120 	.word	0x20000120

08005124 <__malloc_unlock>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__malloc_unlock+0x8>)
 8005126:	f7fe bdd1 	b.w	8003ccc <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	20000120 	.word	0x20000120

08005130 <_realloc_r>:
 8005130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005134:	4680      	mov	r8, r0
 8005136:	4614      	mov	r4, r2
 8005138:	460e      	mov	r6, r1
 800513a:	b921      	cbnz	r1, 8005146 <_realloc_r+0x16>
 800513c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	4611      	mov	r1, r2
 8005142:	f7fe be9d 	b.w	8003e80 <_malloc_r>
 8005146:	b92a      	cbnz	r2, 8005154 <_realloc_r+0x24>
 8005148:	f7fe fe2e 	bl	8003da8 <_free_r>
 800514c:	4625      	mov	r5, r4
 800514e:	4628      	mov	r0, r5
 8005150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005154:	f000 f82e 	bl	80051b4 <_malloc_usable_size_r>
 8005158:	4284      	cmp	r4, r0
 800515a:	4607      	mov	r7, r0
 800515c:	d802      	bhi.n	8005164 <_realloc_r+0x34>
 800515e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005162:	d812      	bhi.n	800518a <_realloc_r+0x5a>
 8005164:	4621      	mov	r1, r4
 8005166:	4640      	mov	r0, r8
 8005168:	f7fe fe8a 	bl	8003e80 <_malloc_r>
 800516c:	4605      	mov	r5, r0
 800516e:	2800      	cmp	r0, #0
 8005170:	d0ed      	beq.n	800514e <_realloc_r+0x1e>
 8005172:	42bc      	cmp	r4, r7
 8005174:	4622      	mov	r2, r4
 8005176:	4631      	mov	r1, r6
 8005178:	bf28      	it	cs
 800517a:	463a      	movcs	r2, r7
 800517c:	f7ff ffbe 	bl	80050fc <memcpy>
 8005180:	4631      	mov	r1, r6
 8005182:	4640      	mov	r0, r8
 8005184:	f7fe fe10 	bl	8003da8 <_free_r>
 8005188:	e7e1      	b.n	800514e <_realloc_r+0x1e>
 800518a:	4635      	mov	r5, r6
 800518c:	e7df      	b.n	800514e <_realloc_r+0x1e>
	...

08005190 <_read_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <_read_r+0x20>)
 8005194:	4604      	mov	r4, r0
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f7fb fcee 	bl	8000b80 <_read>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_read_r+0x1e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_read_r+0x1e>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	2000012c 	.word	0x2000012c

080051b4 <_malloc_usable_size_r>:
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f18      	subs	r0, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfbc      	itt	lt
 80051be:	580b      	ldrlt	r3, [r1, r0]
 80051c0:	18c0      	addlt	r0, r0, r3
 80051c2:	4770      	bx	lr

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
