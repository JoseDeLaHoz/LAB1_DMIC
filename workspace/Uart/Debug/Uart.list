
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800470c  0800470c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08004784  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004784  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b6  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f9  00000000  00000000  0002b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264f6  00000000  00000000  0002d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8ef  00000000  00000000  00053ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d86  00000000  00000000  0005e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000263c  00000000  00000000  00151594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004450 	.word	0x08004450

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004450 	.word	0x08004450

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fbc2 	bl	8000d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f911 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f9af 	bl	8000954 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f97d 	bl	80008f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80005fa:	487a      	ldr	r0, [pc, #488]	; (80007e4 <main+0x200>)
 80005fc:	f000 f9d4 	bl	80009a8 <RetargetInit>

  uint8_t receive[16] = {0};
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
 8000604:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
  uint8_t seed[16] = {0};
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
  uint8_t pol[] = {0,1,1,1};
 8000620:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <main+0x204>)
 8000622:	61fb      	str	r3, [r7, #28]
  uint8_t xor[16] = {0};
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
  uint8_t buff[4];
  uint8_t sp[]="\n\r";
 8000634:	4a6d      	ldr	r2, [pc, #436]	; (80007ec <main+0x208>)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	4611      	mov	r1, r2
 800063c:	8019      	strh	r1, [r3, #0]
 800063e:	3302      	adds	r3, #2
 8000640:	0c12      	lsrs	r2, r2, #16
 8000642:	701a      	strb	r2, [r3, #0]

  printf("\x1b[2J"); //Clear the screen
 8000644:	486a      	ldr	r0, [pc, #424]	; (80007f0 <main+0x20c>)
 8000646:	f002 fdef 	bl	8003228 <iprintf>
  printf("\n\r***************************************************************");
 800064a:	486a      	ldr	r0, [pc, #424]	; (80007f4 <main+0x210>)
 800064c:	f002 fdec 	bl	8003228 <iprintf>
  printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 8000650:	4869      	ldr	r0, [pc, #420]	; (80007f8 <main+0x214>)
 8000652:	f002 fde9 	bl	8003228 <iprintf>
  printf("\n\r* DMIC - Jose De La Hoz - 2022                                *");
 8000656:	4869      	ldr	r0, [pc, #420]	; (80007fc <main+0x218>)
 8000658:	f002 fde6 	bl	8003228 <iprintf>
  printf("\n\r* Juego 'GENERADOR SEUDO SBPA'                          *");
 800065c:	4868      	ldr	r0, [pc, #416]	; (8000800 <main+0x21c>)
 800065e:	f002 fde3 	bl	8003228 <iprintf>
  printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000662:	4868      	ldr	r0, [pc, #416]	; (8000804 <main+0x220>)
 8000664:	f002 fde0 	bl	8003228 <iprintf>
  printf("\n\r***************************************************************");
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <main+0x210>)
 800066a:	f002 fddd 	bl	8003228 <iprintf>
  printf("\r\n");
 800066e:	4866      	ldr	r0, [pc, #408]	; (8000808 <main+0x224>)
 8000670:	f002 fe60 	bl	8003334 <puts>
  printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000674:	4865      	ldr	r0, [pc, #404]	; (800080c <main+0x228>)
 8000676:	f002 fdd7 	bl	8003228 <iprintf>
  printf("\r\n");
 800067a:	4863      	ldr	r0, [pc, #396]	; (8000808 <main+0x224>)
 800067c:	f002 fe5a 	bl	8003334 <puts>
  printf("\r\nIngrese su nombre: ");
 8000680:	4863      	ldr	r0, [pc, #396]	; (8000810 <main+0x22c>)
 8000682:	f002 fdd1 	bl	8003228 <iprintf>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if(!HAL_UART_Receive(&huart3, (uint8_t*)receive,4, HAL_MAX_DELAY)){
 8000686:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2204      	movs	r2, #4
 8000690:	4854      	ldr	r0, [pc, #336]	; (80007e4 <main+0x200>)
 8000692:	f002 f89e 	bl	80027d2 <HAL_UART_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d115      	bne.n	80006c8 <main+0xe4>

		  for(int i=0;(i<=15);i++){
 800069c:	2300      	movs	r3, #0
 800069e:	677b      	str	r3, [r7, #116]	; 0x74
 80006a0:	e00f      	b.n	80006c2 <main+0xde>
			  seed[i]=(receive[i]-48);
 80006a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3b30      	subs	r3, #48	; 0x30
 80006ae:	b2d9      	uxtb	r1, r3
 80006b0:	f107 0220 	add.w	r2, r7, #32
 80006b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006b6:	4413      	add	r3, r2
 80006b8:	460a      	mov	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
		  for(int i=0;(i<=15);i++){
 80006bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006be:	3301      	adds	r3, #1
 80006c0:	677b      	str	r3, [r7, #116]	; 0x74
 80006c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	ddec      	ble.n	80006a2 <main+0xbe>
		  //HAL_UART_Transmit(&huart3, seed, sizeof(seed), HAL_MAX_DELAY);
		  //HAL_UART_Transmit(&huart3, seed, 4, HAL_MAX_DELAY);

	  }
  //////////////////////////////////////////////////////
int k=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	673b      	str	r3, [r7, #112]	; 0x70
while(k<16){
 80006cc:	e085      	b.n	80007da <main+0x1f6>
	  for(int i=0;(i<4);i++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80006d2:	e01b      	b.n	800070c <main+0x128>
		  if(pol[i]==1){xor[i]=seed[i];}
 80006d4:	f107 021c 	add.w	r2, r7, #28
 80006d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10b      	bne.n	80006fa <main+0x116>
 80006e2:	f107 0220 	add.w	r2, r7, #32
 80006e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e8:	4413      	add	r3, r2
 80006ea:	7819      	ldrb	r1, [r3, #0]
 80006ec:	f107 020c 	add.w	r2, r7, #12
 80006f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f2:	4413      	add	r3, r2
 80006f4:	460a      	mov	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	e005      	b.n	8000706 <main+0x122>
		  else{xor[i]=0;}
 80006fa:	f107 020c 	add.w	r2, r7, #12
 80006fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000700:	4413      	add	r3, r2
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	  for(int i=0;(i<4);i++){
 8000706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000708:	3301      	adds	r3, #1
 800070a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800070c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800070e:	2b03      	cmp	r3, #3
 8000710:	dde0      	ble.n	80006d4 <main+0xf0>
	  }
	  ////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
	  uint8_t res=0;
 8000712:	2300      	movs	r3, #0
 8000714:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	  for(int i = 0;(i<4);i++){
 8000718:	2300      	movs	r3, #0
 800071a:	667b      	str	r3, [r7, #100]	; 0x64
 800071c:	e00c      	b.n	8000738 <main+0x154>
		  res=res+xor[i];
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000724:	4413      	add	r3, r2
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800072c:	4413      	add	r3, r2
 800072e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	  for(int i = 0;(i<4);i++){
 8000732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000734:	3301      	adds	r3, #1
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
 8000738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800073a:	2b03      	cmp	r3, #3
 800073c:	ddef      	ble.n	800071e <main+0x13a>

	 // HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

	////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

	  if(res % 2 == 0){res = 0;}
 800073e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <main+0x170>
 800074c:	2300      	movs	r3, #0
 800074e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000752:	e002      	b.n	800075a <main+0x176>
	  else{res = 1;}
 8000754:	2301      	movs	r3, #1
 8000756:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	  ///////////////////////////////////////////////
	 // HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);
	  ///mover y poner el valor xor en la cabeza

	  seed[3]=seed[2];
 800075a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800075e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  seed[2]=seed[1];
 8000762:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000766:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  seed[1]=seed[0];
 800076a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800076e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  seed[0]=res;
 8000772:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000776:	f887 3020 	strb.w	r3, [r7, #32]


	  uint8_t usr =8*seed[0]+4*seed[1]+2*seed[2]+seed[3];
 800077a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800078c:	4413      	add	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000798:	4413      	add	r3, r2
 800079a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	  itoa(usr,(char*)buff,10);
 800079e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80007a2:	f107 0108 	add.w	r1, r7, #8
 80007a6:	220a      	movs	r2, #10
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fd33 	bl	8003214 <itoa>


	  HAL_UART_Transmit(&huart3, buff, sizeof(buff), HAL_MAX_DELAY);
 80007ae:	f107 0108 	add.w	r1, r7, #8
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	2204      	movs	r2, #4
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x200>)
 80007ba:	f001 ff87 	bl	80026cc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, sp, sizeof(sp), HAL_MAX_DELAY);
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	2203      	movs	r2, #3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x200>)
 80007c8:	f001 ff80 	bl	80026cc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 fb2c 	bl	8000e2c <HAL_Delay>


k++;
 80007d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007d6:	3301      	adds	r3, #1
 80007d8:	673b      	str	r3, [r7, #112]	; 0x70
while(k<16){
 80007da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	f77f af76 	ble.w	80006ce <main+0xea>
  {
 80007e2:	e750      	b.n	8000686 <main+0xa2>
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	01010100 	.word	0x01010100
 80007ec:	08004628 	.word	0x08004628
 80007f0:	08004468 	.word	0x08004468
 80007f4:	08004470 	.word	0x08004470
 80007f8:	080044b4 	.word	0x080044b4
 80007fc:	080044f8 	.word	0x080044f8
 8000800:	0800453c 	.word	0x0800453c
 8000804:	08004578 	.word	0x08004578
 8000808:	080045bc 	.word	0x080045bc
 800080c:	080045c0 	.word	0x080045c0
 8000810:	08004610 	.word	0x08004610

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2234      	movs	r2, #52	; 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fcf8 	bl	8003218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <SystemClock_Config+0xd8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <SystemClock_Config+0xd8>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SystemClock_Config+0xd8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemClock_Config+0xdc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <SystemClock_Config+0xdc>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <SystemClock_Config+0xdc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fdcd 	bl	8001438 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f87a 	bl	800099c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a8:	f000 fd76 	bl	8001398 <HAL_PWREx_EnableOverDrive>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008b2:	f000 f873 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2103      	movs	r1, #3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f85e 	bl	8001994 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008de:	f000 f85d 	bl	800099c <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	; 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f001 fe7a 	bl	8002630 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f82b 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000008c 	.word	0x2000008c
 8000950:	40004800 	.word	0x40004800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_GPIO_Init+0x44>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <MX_GPIO_Init+0x44>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_GPIO_Init+0x44>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_GPIO_Init+0x44>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <MX_GPIO_Init+0x44>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_GPIO_Init+0x44>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <RetargetInit+0x28>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <RetargetInit+0x2c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6898      	ldr	r0, [r3, #8]
 80009bc:	2300      	movs	r3, #0
 80009be:	2202      	movs	r2, #2
 80009c0:	2100      	movs	r1, #0
 80009c2:	f002 fcbf 	bl	8003344 <setvbuf>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000114 	.word	0x20000114
 80009d4:	2000000c 	.word	0x2000000c

080009d8 <_isatty>:

int _isatty(int fd) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db04      	blt.n	80009f0 <_isatty+0x18>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dc01      	bgt.n	80009f0 <_isatty+0x18>
    return 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e005      	b.n	80009fc <_isatty+0x24>

  errno = EBADF;
 80009f0:	f002 fbce 	bl	8003190 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2209      	movs	r2, #9
 80009f8:	601a      	str	r2, [r3, #0]
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_write>:

int _write(int fd, char* ptr, int len) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d002      	beq.n	8000a1c <_write+0x18>
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d111      	bne.n	8000a40 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <_write+0x54>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	f001 fe4f 	bl	80026cc <HAL_UART_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <_write+0x38>
      return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	e008      	b.n	8000a4e <_write+0x4a>
    else
      return EIO;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	e006      	b.n	8000a4e <_write+0x4a>
  }
  errno = EBADF;
 8000a40:	f002 fba6 	bl	8003190 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2209      	movs	r2, #9
 8000a48:	601a      	str	r2, [r3, #0]
  return -1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000114 	.word	0x20000114

08000a5c <_close>:

int _close(int fd) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db04      	blt.n	8000a74 <_close+0x18>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	dc01      	bgt.n	8000a74 <_close+0x18>
    return 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e006      	b.n	8000a82 <_close+0x26>

  errno = EBADF;
 8000a74:	f002 fb8c 	bl	8003190 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2209      	movs	r2, #9
 8000a7c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000a96:	f002 fb7b 	bl	8003190 <__errno>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2209      	movs	r2, #9
 8000a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_read>:

int _read(int fd, char* ptr, int len) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d110      	bne.n	8000ae0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <_read+0x4c>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	f001 fe82 	bl	80027d2 <HAL_UART_Receive>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <_read+0x30>
      return 1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e008      	b.n	8000aee <_read+0x42>
    else
      return EIO;
 8000adc:	2305      	movs	r3, #5
 8000ade:	e006      	b.n	8000aee <_read+0x42>
  }
  errno = EBADF;
 8000ae0:	f002 fb56 	bl	8003190 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	601a      	str	r2, [r3, #0]
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000114 	.word	0x20000114

08000afc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db08      	blt.n	8000b1e <_fstat+0x22>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	dc05      	bgt.n	8000b1e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b18:	605a      	str	r2, [r3, #4]
    return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e005      	b.n	8000b2a <_fstat+0x2e>
  }

  errno = EBADF;
 8000b1e:	f002 fb37 	bl	8003190 <__errno>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2209      	movs	r2, #9
 8000b26:	601a      	str	r2, [r3, #0]
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ae      	sub	sp, #184	; 0xb8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2290      	movs	r2, #144	; 0x90
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fb3b 	bl	8003218 <memset>
  if(huart->Instance==USART3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d13c      	bne.n	8000c26 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f910 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff fee9 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0xb8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c14:	2307      	movs	r3, #7
 8000c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_UART_MspInit+0xbc>)
 8000c22:	f000 fa0d 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	37b8      	adds	r7, #184	; 0xb8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004800 	.word	0x40004800
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f8b0 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 fa66 	bl	8003190 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20080000 	.word	0x20080000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000118 	.word	0x20000118
 8000cf8:	20000130 	.word	0x20000130

08000cfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fa25 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc47 	bl	80005e4 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d64:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 8000d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d6c:	20000130 	.word	0x20000130

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>

08000d72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 f92e 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f805 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d82:	f7ff fed7 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f93b 	bl	8001026 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f911 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	2000011c 	.word	0x2000011c

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000011c 	.word	0x2000011c

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e175      	b.n	800134c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8164 	bne.w	8001346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x56>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80be 	beq.w	8001346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e2:	4a61      	ldr	r2, [pc, #388]	; (8001368 <HAL_GPIO_Init+0x328>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_GPIO_Init+0x32c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d037      	beq.n	800127e <HAL_GPIO_Init+0x23e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d031      	beq.n	800127a <HAL_GPIO_Init+0x23a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x334>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x236>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a55      	ldr	r2, [pc, #340]	; (8001378 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x232>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a54      	ldr	r2, [pc, #336]	; (800137c <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x22e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a53      	ldr	r2, [pc, #332]	; (8001380 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x22a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a50      	ldr	r2, [pc, #320]	; (800138c <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x350>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x21a>
 8001256:	2309      	movs	r3, #9
 8001258:	e012      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125a:	230a      	movs	r3, #10
 800125c:	e010      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125e:	2308      	movs	r3, #8
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001262:	2307      	movs	r3, #7
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x328>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x354>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae86 	bls.w	8001060 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40022000 	.word	0x40022000
 8001390:	40022400 	.word	0x40022400
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_PWREx_EnableOverDrive+0x98>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c6:	f7ff fd25 	bl	8000e14 <HAL_GetTick>
 80013ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013cc:	e009      	b.n	80013e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013ce:	f7ff fd21 	bl	8000e14 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013dc:	d901      	bls.n	80013e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e022      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ee:	d1ee      	bne.n	80013ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff fd0a 	bl	8000e14 <HAL_GetTick>
 8001400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001402:	e009      	b.n	8001418 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001404:	f7ff fd06 	bl	8000e14 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001412:	d901      	bls.n	8001418 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e007      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_PWREx_EnableOverDrive+0x9c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001424:	d1ee      	bne.n	8001404 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e29b      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	4b96      	ldr	r3, [pc, #600]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00c      	beq.n	8001482 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001468:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d112      	bne.n	800149a <HAL_RCC_OscConfig+0x62>
 8001474:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b8d      	ldr	r3, [pc, #564]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06c      	beq.n	8001568 <HAL_RCC_OscConfig+0x130>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d168      	bne.n	8001568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e275      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x7a>
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a83      	ldr	r2, [pc, #524]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e02e      	b.n	8001510 <HAL_RCC_OscConfig+0xd8>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x9c>
 80014ba:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7e      	ldr	r2, [pc, #504]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7b      	ldr	r2, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xd8>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a75      	ldr	r2, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a72      	ldr	r2, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xd8>
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a6b      	ldr	r2, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc7c 	bl	8000e14 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fc78 	bl	8000e14 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e229      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc68 	bl	8000e14 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fc64 	bl	8000e14 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e215      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x110>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d069      	beq.n	800164a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001576:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x190>
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1e9      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	493d      	ldr	r1, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e040      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc1a 	bl	8000e14 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc16 	bl	8000e14 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1c7      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4929      	ldr	r1, [pc, #164]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
 8001616:	e018      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fbf6 	bl	8000e14 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fbf2 	bl	8000e14 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1a3      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d038      	beq.n	80016c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001662:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff fbd3 	bl	8000e14 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fbcf 	bl	8000e14 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e180      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x23a>
 8001690:	e01a      	b.n	80016c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fbb9 	bl	8000e14 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fbb5 	bl	8000e14 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d903      	bls.n	80016bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e166      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
 80016b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a4 	beq.w	800181e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a88      	ldr	r2, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b86      	ldr	r3, [pc, #536]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x4d4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d118      	bne.n	800173c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800170a:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x4d4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x4d4>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb7d 	bl	8000e14 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fb79 	bl	8000e14 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e12a      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x4d4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x31a>
 8001744:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	e02d      	b.n	80017ae <HAL_RCC_OscConfig+0x376>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x33c>
 800175a:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a6a      	ldr	r2, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a67      	ldr	r2, [pc, #412]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
 8001772:	e01c      	b.n	80017ae <HAL_RCC_OscConfig+0x376>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d10c      	bne.n	8001796 <HAL_RCC_OscConfig+0x35e>
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a61      	ldr	r2, [pc, #388]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
 8001794:	e00b      	b.n	80017ae <HAL_RCC_OscConfig+0x376>
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a5b      	ldr	r2, [pc, #364]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d015      	beq.n	80017e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb2d 	bl	8000e14 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fb29 	bl	8000e14 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0d8      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCC_OscConfig+0x386>
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fb17 	bl	8000e14 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fb13 	bl	8000e14 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0c2      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d105      	bne.n	800181e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a3c      	ldr	r2, [pc, #240]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80ae 	beq.w	8001984 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001828:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d06d      	beq.n	8001910 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d14b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a31      	ldr	r2, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fae4 	bl	8000e14 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fae0 	bl	8000e14 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e091      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	071b      	lsls	r3, r3, #28
 800189a:	491b      	ldr	r1, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fab2 	bl	8000e14 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff faae 	bl	8000e14 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e05f      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x47c>
 80018d2:	e057      	b.n	8001984 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa98 	bl	8000e14 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa94 	bl	8000e14 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e045      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_OscConfig+0x4d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4b0>
 8001906:	e03d      	b.n	8001984 <HAL_RCC_OscConfig+0x54c>
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_RCC_OscConfig+0x558>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d030      	beq.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d129      	bne.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d122      	bne.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001946:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001948:	4293      	cmp	r3, r2
 800194a:	d119      	bne.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d10f      	bne.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0d0      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b67      	ldr	r3, [pc, #412]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 020f 	bic.w	r2, r3, #15
 80019c2:	4965      	ldr	r1, [pc, #404]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d040      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d115      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e073      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06b      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4936      	ldr	r1, [pc, #216]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a88:	f7ff f9c4 	bl	8000e14 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff f9c0 	bl	8000e14 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e053      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d210      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 020f 	bic.w	r2, r3, #15
 8001ace:	4922      	ldr	r1, [pc, #136]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1d4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f920 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	0800462c 	.word	0x0800462c
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b094      	sub	sp, #80	; 0x50
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f200 80e1 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9e:	e0db      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba4:	e0db      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001baa:	e0d8      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bde:	4622      	mov	r2, r4
 8001be0:	462b      	mov	r3, r5
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0159      	lsls	r1, r3, #5
 8001bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf0:	0150      	lsls	r0, r2, #5
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	1a51      	subs	r1, r2, r1
 8001bfa:	6139      	str	r1, [r7, #16]
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c10:	4659      	mov	r1, fp
 8001c12:	018b      	lsls	r3, r1, #6
 8001c14:	4651      	mov	r1, sl
 8001c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	018a      	lsls	r2, r1, #6
 8001c1e:	4651      	mov	r1, sl
 8001c20:	ebb2 0801 	subs.w	r8, r2, r1
 8001c24:	4659      	mov	r1, fp
 8001c26:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	eb18 0303 	adds.w	r3, r8, r3
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	eb49 0303 	adc.w	r3, r9, r3
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	024b      	lsls	r3, r1, #9
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c68:	4621      	mov	r1, r4
 8001c6a:	024a      	lsls	r2, r1, #9
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c72:	2200      	movs	r2, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c7c:	f7fe fb30 	bl	80002e0 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	e058      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	4611      	mov	r1, r2
 8001c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0159      	lsls	r1, r3, #5
 8001cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb6:	0150      	lsls	r0, r2, #5
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf2:	00e2      	lsls	r2, r4, #3
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	18e3      	adds	r3, r4, r3
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	464b      	mov	r3, r9
 8001d00:	eb45 0303 	adc.w	r3, r5, r3
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d12:	4629      	mov	r1, r5
 8001d14:	028b      	lsls	r3, r1, #10
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	028a      	lsls	r2, r1, #10
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	61fa      	str	r2, [r7, #28]
 8001d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d30:	f7fe fad6 	bl	80002e0 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3750      	adds	r7, #80	; 0x50
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	0800463c 	.word	0x0800463c

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	0800463c 	.word	0x0800463c

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e08:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a68      	ldr	r2, [pc, #416]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e12:	6093      	str	r3, [r2, #8]
 8001e14:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	4964      	ldr	r1, [pc, #400]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d017      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	4959      	ldr	r1, [pc, #356]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e58:	d101      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d017      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	494a      	ldr	r1, [pc, #296]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 808b 	beq.w	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001edc:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee8:	f7fe ff94 	bl	8000e14 <HAL_GetTick>
 8001eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7fe ff90 	bl	8000e14 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e38f      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d035      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d02e      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d114      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ff58 	bl	8000e14 <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe ff54 	bl	8000e14 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e351      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ee      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f96:	d111      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	4901      	ldr	r1, [pc, #4]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	0ffffcff 	.word	0x0ffffcff
 8001fbc:	4bac      	ldr	r3, [pc, #688]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4aab      	ldr	r2, [pc, #684]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	4ba9      	ldr	r3, [pc, #676]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	49a6      	ldr	r1, [pc, #664]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d010      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fe6:	4ba2      	ldr	r3, [pc, #648]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fec:	4aa0      	ldr	r2, [pc, #640]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ff6:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	499b      	ldr	r1, [pc, #620]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002014:	4b96      	ldr	r3, [pc, #600]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002022:	4993      	ldr	r1, [pc, #588]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002036:	4b8e      	ldr	r3, [pc, #568]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002044:	498a      	ldr	r1, [pc, #552]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002058:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002066:	4982      	ldr	r1, [pc, #520]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800207a:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4979      	ldr	r1, [pc, #484]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209c:	4b74      	ldr	r3, [pc, #464]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4971      	ldr	r1, [pc, #452]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020be:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f023 020c 	bic.w	r2, r3, #12
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	4968      	ldr	r1, [pc, #416]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e0:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4960      	ldr	r1, [pc, #384]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002102:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002110:	4957      	ldr	r1, [pc, #348]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	494f      	ldr	r1, [pc, #316]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4946      	ldr	r1, [pc, #280]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	493e      	ldr	r1, [pc, #248]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ba:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d011      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021dc:	4924      	ldr	r1, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ec:	d101      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221c:	4914      	ldr	r1, [pc, #80]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002240:	490b      	ldr	r1, [pc, #44]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00f      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002264:	4902      	ldr	r1, [pc, #8]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800226c:	e002      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002280:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	4986      	ldr	r1, [pc, #536]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b4:	497d      	ldr	r1, [pc, #500]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d006      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80d6 	beq.w	800247c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022d0:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a75      	ldr	r2, [pc, #468]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7fe fd9a 	bl	8000e14 <HAL_GetTick>
 80022e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022e4:	f7fe fd96 	bl	8000e14 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e195      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f6:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d021      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11d      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002324:	4b61      	ldr	r3, [pc, #388]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232a:	0e1b      	lsrs	r3, r3, #24
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	019a      	lsls	r2, r3, #6
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	071b      	lsls	r3, r3, #28
 800234a:	4958      	ldr	r1, [pc, #352]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02e      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237c:	d129      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800238c:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002392:	0f1b      	lsrs	r3, r3, #28
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	019a      	lsls	r2, r3, #6
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	071b      	lsls	r3, r3, #28
 80023b2:	493e      	ldr	r1, [pc, #248]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c0:	f023 021f 	bic.w	r2, r3, #31
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	3b01      	subs	r3, #1
 80023ca:	4938      	ldr	r1, [pc, #224]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01d      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023de:	4b33      	ldr	r3, [pc, #204]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f2:	0f1b      	lsrs	r3, r3, #28
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	019a      	lsls	r2, r3, #6
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	071b      	lsls	r3, r3, #28
 8002412:	4926      	ldr	r1, [pc, #152]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	019a      	lsls	r2, r3, #6
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	491a      	ldr	r1, [pc, #104]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002456:	f7fe fcdd 	bl	8000e14 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800245e:	f7fe fcd9 	bl	8000e14 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0d8      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 80ce 	bne.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fcc0 	bl	8000e14 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002496:	e00b      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002498:	f7fe fcbc 	bl	8000e14 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d904      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0bb      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024b0:	4b5e      	ldr	r3, [pc, #376]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024bc:	d0ec      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d12a      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024e6:	4b51      	ldr	r3, [pc, #324]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	0f1b      	lsrs	r3, r3, #28
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	019a      	lsls	r2, r3, #6
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	071b      	lsls	r3, r3, #28
 800251a:	4944      	ldr	r1, [pc, #272]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002522:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	493d      	ldr	r1, [pc, #244]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002550:	d11d      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	0e1b      	lsrs	r3, r3, #24
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	0f1b      	lsrs	r3, r3, #28
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	019a      	lsls	r2, r3, #6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	071b      	lsls	r3, r3, #28
 8002586:	4929      	ldr	r1, [pc, #164]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d028      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	019a      	lsls	r2, r3, #6
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	071b      	lsls	r3, r3, #28
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4911      	ldr	r1, [pc, #68]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe fc0c 	bl	8000e14 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002600:	f7fe fc08 	bl	8000e14 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e007      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800261a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261e:	d1ef      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e040      	b.n	80026c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fa92 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f974 	bl	800295c <UART_SetConfig>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fbcc 	bl	8002e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fc53 	bl	8002f68 <UART_CheckIdleState>
 80026c2:	4603      	mov	r3, r0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d171      	bne.n	80027c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_UART_Transmit+0x24>
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e06a      	b.n	80027ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2221      	movs	r2, #33	; 0x21
 8002700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002702:	f7fe fb87 	bl	8000e14 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d108      	bne.n	8002734 <HAL_UART_Transmit+0x68>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	e003      	b.n	800273c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800273c:	e02c      	b.n	8002798 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fc5a 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e038      	b.n	80027ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	3302      	adds	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	e007      	b.n	8002786 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3301      	adds	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1cc      	bne.n	800273e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fc27 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e005      	b.n	80027ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08a      	sub	sp, #40	; 0x28
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	f040 80b1 	bne.w	8002950 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_UART_Receive+0x28>
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0a9      	b.n	8002952 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2222      	movs	r2, #34	; 0x22
 800280a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002814:	f7fe fafe 	bl	8000e14 <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d10e      	bne.n	8002852 <HAL_UART_Receive+0x80>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_UART_Receive+0x76>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002846:	e02d      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002850:	e028      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_UART_Receive+0xa4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <HAL_UART_Receive+0x9a>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800286a:	e01b      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	227f      	movs	r2, #127	; 0x7f
 8002870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002874:	e016      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287e:	d10d      	bne.n	800289c <HAL_UART_Receive+0xca>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_UART_Receive+0xc0>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	227f      	movs	r2, #127	; 0x7f
 800288c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002890:	e008      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	223f      	movs	r2, #63	; 0x3f
 8002896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800289a:	e003      	b.n	80028a4 <HAL_UART_Receive+0xd2>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b4:	d108      	bne.n	80028c8 <HAL_UART_Receive+0xf6>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d104      	bne.n	80028c8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	e003      	b.n	80028d0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028d0:	e032      	b.n	8002938 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2120      	movs	r1, #32
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fb90 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e032      	b.n	8002952 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	8a7b      	ldrh	r3, [r7, #18]
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29a      	uxth	r2, r3
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	3302      	adds	r3, #2
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e00c      	b.n	8002926 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8a7b      	ldrh	r3, [r7, #18]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4013      	ands	r3, r2
 800291a:	b2da      	uxtb	r2, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1c6      	bne.n	80028d2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4ba6      	ldr	r3, [pc, #664]	; (8002c20 <UART_SetConfig+0x2c4>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	6979      	ldr	r1, [r7, #20]
 8002990:	430b      	orrs	r3, r1
 8002992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a94      	ldr	r2, [pc, #592]	; (8002c24 <UART_SetConfig+0x2c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d120      	bne.n	8002a1a <UART_SetConfig+0xbe>
 80029d8:	4b93      	ldr	r3, [pc, #588]	; (8002c28 <UART_SetConfig+0x2cc>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d816      	bhi.n	8002a14 <UART_SetConfig+0xb8>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <UART_SetConfig+0x90>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a09 	.word	0x08002a09
 80029f4:	08002a03 	.word	0x08002a03
 80029f8:	08002a0f 	.word	0x08002a0f
 80029fc:	2301      	movs	r3, #1
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e150      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a02:	2302      	movs	r3, #2
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e14d      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e14a      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e147      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a14:	2310      	movs	r3, #16
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e144      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a83      	ldr	r2, [pc, #524]	; (8002c2c <UART_SetConfig+0x2d0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d132      	bne.n	8002a8a <UART_SetConfig+0x12e>
 8002a24:	4b80      	ldr	r3, [pc, #512]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d828      	bhi.n	8002a84 <UART_SetConfig+0x128>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0xdc>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a85 	.word	0x08002a85
 8002a44:	08002a85 	.word	0x08002a85
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002a85 	.word	0x08002a85
 8002a58:	08002a73 	.word	0x08002a73
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002a85 	.word	0x08002a85
 8002a68:	08002a7f 	.word	0x08002a7f
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e118      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a72:	2302      	movs	r3, #2
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e115      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e112      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e10f      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a84:	2310      	movs	r3, #16
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e10c      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a68      	ldr	r2, [pc, #416]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d120      	bne.n	8002ad6 <UART_SetConfig+0x17a>
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a9e:	2b30      	cmp	r3, #48	; 0x30
 8002aa0:	d013      	beq.n	8002aca <UART_SetConfig+0x16e>
 8002aa2:	2b30      	cmp	r3, #48	; 0x30
 8002aa4:	d814      	bhi.n	8002ad0 <UART_SetConfig+0x174>
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d009      	beq.n	8002abe <UART_SetConfig+0x162>
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d810      	bhi.n	8002ad0 <UART_SetConfig+0x174>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <UART_SetConfig+0x15c>
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d006      	beq.n	8002ac4 <UART_SetConfig+0x168>
 8002ab6:	e00b      	b.n	8002ad0 <UART_SetConfig+0x174>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e0f2      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e0ef      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	e0ec      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002aca:	2308      	movs	r3, #8
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	e0e9      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	e0e6      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <UART_SetConfig+0x2d8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d120      	bne.n	8002b22 <UART_SetConfig+0x1c6>
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002aea:	2bc0      	cmp	r3, #192	; 0xc0
 8002aec:	d013      	beq.n	8002b16 <UART_SetConfig+0x1ba>
 8002aee:	2bc0      	cmp	r3, #192	; 0xc0
 8002af0:	d814      	bhi.n	8002b1c <UART_SetConfig+0x1c0>
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d009      	beq.n	8002b0a <UART_SetConfig+0x1ae>
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d810      	bhi.n	8002b1c <UART_SetConfig+0x1c0>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <UART_SetConfig+0x1a8>
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d006      	beq.n	8002b10 <UART_SetConfig+0x1b4>
 8002b02:	e00b      	b.n	8002b1c <UART_SetConfig+0x1c0>
 8002b04:	2300      	movs	r3, #0
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e0cc      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e0c9      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b10:	2304      	movs	r3, #4
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	e0c6      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b16:	2308      	movs	r3, #8
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e0c3      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e0c0      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a44      	ldr	r2, [pc, #272]	; (8002c38 <UART_SetConfig+0x2dc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d125      	bne.n	8002b78 <UART_SetConfig+0x21c>
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b3a:	d017      	beq.n	8002b6c <UART_SetConfig+0x210>
 8002b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b40:	d817      	bhi.n	8002b72 <UART_SetConfig+0x216>
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b46:	d00b      	beq.n	8002b60 <UART_SetConfig+0x204>
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d811      	bhi.n	8002b72 <UART_SetConfig+0x216>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <UART_SetConfig+0x1fe>
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d006      	beq.n	8002b66 <UART_SetConfig+0x20a>
 8002b58:	e00b      	b.n	8002b72 <UART_SetConfig+0x216>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e0a1      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b60:	2302      	movs	r3, #2
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e09e      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b66:	2304      	movs	r3, #4
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e09b      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e098      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b72:	2310      	movs	r3, #16
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e095      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <UART_SetConfig+0x2e0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d125      	bne.n	8002bce <UART_SetConfig+0x272>
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b90:	d017      	beq.n	8002bc2 <UART_SetConfig+0x266>
 8002b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b96:	d817      	bhi.n	8002bc8 <UART_SetConfig+0x26c>
 8002b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9c:	d00b      	beq.n	8002bb6 <UART_SetConfig+0x25a>
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba2:	d811      	bhi.n	8002bc8 <UART_SetConfig+0x26c>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <UART_SetConfig+0x254>
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d006      	beq.n	8002bbc <UART_SetConfig+0x260>
 8002bae:	e00b      	b.n	8002bc8 <UART_SetConfig+0x26c>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e076      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e073      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e070      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e06d      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e06a      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <UART_SetConfig+0x2e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d138      	bne.n	8002c4a <UART_SetConfig+0x2ee>
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <UART_SetConfig+0x2cc>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be6:	d017      	beq.n	8002c18 <UART_SetConfig+0x2bc>
 8002be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bec:	d82a      	bhi.n	8002c44 <UART_SetConfig+0x2e8>
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d00b      	beq.n	8002c0c <UART_SetConfig+0x2b0>
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf8:	d824      	bhi.n	8002c44 <UART_SetConfig+0x2e8>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <UART_SetConfig+0x2aa>
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c02:	d006      	beq.n	8002c12 <UART_SetConfig+0x2b6>
 8002c04:	e01e      	b.n	8002c44 <UART_SetConfig+0x2e8>
 8002c06:	2300      	movs	r3, #0
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e04b      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e048      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c12:	2304      	movs	r3, #4
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e045      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e042      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c1e:	bf00      	nop
 8002c20:	efff69f3 	.word	0xefff69f3
 8002c24:	40011000 	.word	0x40011000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40004400 	.word	0x40004400
 8002c30:	40004800 	.word	0x40004800
 8002c34:	40004c00 	.word	0x40004c00
 8002c38:	40005000 	.word	0x40005000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	40007800 	.word	0x40007800
 8002c44:	2310      	movs	r3, #16
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e02c      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <UART_SetConfig+0x4bc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d125      	bne.n	8002ca0 <UART_SetConfig+0x344>
 8002c54:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <UART_SetConfig+0x4c0>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c62:	d017      	beq.n	8002c94 <UART_SetConfig+0x338>
 8002c64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c68:	d817      	bhi.n	8002c9a <UART_SetConfig+0x33e>
 8002c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6e:	d00b      	beq.n	8002c88 <UART_SetConfig+0x32c>
 8002c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c74:	d811      	bhi.n	8002c9a <UART_SetConfig+0x33e>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <UART_SetConfig+0x326>
 8002c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7e:	d006      	beq.n	8002c8e <UART_SetConfig+0x332>
 8002c80:	e00b      	b.n	8002c9a <UART_SetConfig+0x33e>
 8002c82:	2300      	movs	r3, #0
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e00d      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e00a      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e007      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c94:	2308      	movs	r3, #8
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e004      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e001      	b.n	8002ca4 <UART_SetConfig+0x348>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cac:	d15b      	bne.n	8002d66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d828      	bhi.n	8002d06 <UART_SetConfig+0x3aa>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x360>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff f856 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e013      	b.n	8002d10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff f866 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002cec:	61b8      	str	r0, [r7, #24]
        break;
 8002cee:	e00f      	b.n	8002d10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <UART_SetConfig+0x4c4>)
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e00c      	b.n	8002d10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7fe ff39 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8002cfa:	61b8      	str	r0, [r7, #24]
        break;
 8002cfc:	e008      	b.n	8002d10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d02:	61bb      	str	r3, [r7, #24]
        break;
 8002d04:	e004      	b.n	8002d10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d074      	beq.n	8002e00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	005a      	lsls	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d916      	bls.n	8002d60 <UART_SetConfig+0x404>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d212      	bcs.n	8002d60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f023 030f 	bic.w	r3, r3, #15
 8002d42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	89fa      	ldrh	r2, [r7, #14]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e04f      	b.n	8002e00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77bb      	strb	r3, [r7, #30]
 8002d64:	e04c      	b.n	8002e00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d828      	bhi.n	8002dbe <UART_SetConfig+0x462>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <UART_SetConfig+0x418>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08002da1 	.word	0x08002da1
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002dbf 	.word	0x08002dbf
 8002d84:	08002daf 	.word	0x08002daf
 8002d88:	08002dbf 	.word	0x08002dbf
 8002d8c:	08002dbf 	.word	0x08002dbf
 8002d90:	08002dbf 	.word	0x08002dbf
 8002d94:	08002db7 	.word	0x08002db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7fe fffa 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	61b8      	str	r0, [r7, #24]
        break;
 8002d9e:	e013      	b.n	8002dc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7ff f80a 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002da4:	61b8      	str	r0, [r7, #24]
        break;
 8002da6:	e00f      	b.n	8002dc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <UART_SetConfig+0x4c4>)
 8002daa:	61bb      	str	r3, [r7, #24]
        break;
 8002dac:	e00c      	b.n	8002dc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7fe fedd 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8002db2:	61b8      	str	r0, [r7, #24]
        break;
 8002db4:	e008      	b.n	8002dc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dba:	61bb      	str	r3, [r7, #24]
        break;
 8002dbc:	e004      	b.n	8002dc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002dc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	085a      	lsrs	r2, r3, #1
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d909      	bls.n	8002dfc <UART_SetConfig+0x4a0>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d205      	bcs.n	8002dfc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e001      	b.n	8002e00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40007c00 	.word	0x40007c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400

08002e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f22:	d10a      	bne.n	8002f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f78:	f7fd ff4c 	bl	8000e14 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d10e      	bne.n	8002faa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f831 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e027      	b.n	8002ffa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d10e      	bne.n	8002fd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f81b 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e011      	b.n	8002ffa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b09c      	sub	sp, #112	; 0x70
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	e0a7      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	f000 80a3 	beq.w	8003164 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fd fef9 	bl	8000e14 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <UART_WaitOnFlagUntilTimeout+0x32>
 800302e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003030:	2b00      	cmp	r3, #0
 8003032:	d13f      	bne.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003048:	667b      	str	r3, [r7, #100]	; 0x64
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e6      	bne.n	8003034 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	663b      	str	r3, [r7, #96]	; 0x60
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3308      	adds	r3, #8
 8003084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003086:	64ba      	str	r2, [r7, #72]	; 0x48
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800308c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e5      	bne.n	8003066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e068      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d050      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d148      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
 80030fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e6      	bne.n	80030dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	613b      	str	r3, [r7, #16]
   return(result);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	66bb      	str	r3, [r7, #104]	; 0x68
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3308      	adds	r3, #8
 800312c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800312e:	623a      	str	r2, [r7, #32]
 8003130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	61bb      	str	r3, [r7, #24]
   return(result);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e010      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	f43f af48 	beq.w	8003014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3770      	adds	r7, #112	; 0x70
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <__errno>:
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <__errno+0x8>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4d0d      	ldr	r5, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2600      	movs	r6, #0
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4d0b      	ldr	r5, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	; (80031e0 <__libc_init_array+0x44>)
 80031b0:	f001 f94e 	bl	8004450 <_init>
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2600      	movs	r6, #0
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800470c 	.word	0x0800470c
 80031d8:	0800470c 	.word	0x0800470c
 80031dc:	0800470c 	.word	0x0800470c
 80031e0:	08004710 	.word	0x08004710

080031e4 <__itoa>:
 80031e4:	1e93      	subs	r3, r2, #2
 80031e6:	2b22      	cmp	r3, #34	; 0x22
 80031e8:	b510      	push	{r4, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	d904      	bls.n	80031f8 <__itoa+0x14>
 80031ee:	2300      	movs	r3, #0
 80031f0:	700b      	strb	r3, [r1, #0]
 80031f2:	461c      	mov	r4, r3
 80031f4:	4620      	mov	r0, r4
 80031f6:	bd10      	pop	{r4, pc}
 80031f8:	2a0a      	cmp	r2, #10
 80031fa:	d109      	bne.n	8003210 <__itoa+0x2c>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	da07      	bge.n	8003210 <__itoa+0x2c>
 8003200:	232d      	movs	r3, #45	; 0x2d
 8003202:	700b      	strb	r3, [r1, #0]
 8003204:	4240      	negs	r0, r0
 8003206:	2101      	movs	r1, #1
 8003208:	4421      	add	r1, r4
 800320a:	f000 f961 	bl	80034d0 <__utoa>
 800320e:	e7f1      	b.n	80031f4 <__itoa+0x10>
 8003210:	2100      	movs	r1, #0
 8003212:	e7f9      	b.n	8003208 <__itoa+0x24>

08003214 <itoa>:
 8003214:	f7ff bfe6 	b.w	80031e4 <__itoa>

08003218 <memset>:
 8003218:	4402      	add	r2, r0
 800321a:	4603      	mov	r3, r0
 800321c:	4293      	cmp	r3, r2
 800321e:	d100      	bne.n	8003222 <memset+0xa>
 8003220:	4770      	bx	lr
 8003222:	f803 1b01 	strb.w	r1, [r3], #1
 8003226:	e7f9      	b.n	800321c <memset+0x4>

08003228 <iprintf>:
 8003228:	b40f      	push	{r0, r1, r2, r3}
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <iprintf+0x2c>)
 800322c:	b513      	push	{r0, r1, r4, lr}
 800322e:	681c      	ldr	r4, [r3, #0]
 8003230:	b124      	cbz	r4, 800323c <iprintf+0x14>
 8003232:	69a3      	ldr	r3, [r4, #24]
 8003234:	b913      	cbnz	r3, 800323c <iprintf+0x14>
 8003236:	4620      	mov	r0, r4
 8003238:	f000 fb66 	bl	8003908 <__sinit>
 800323c:	ab05      	add	r3, sp, #20
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	68a1      	ldr	r1, [r4, #8]
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	4620      	mov	r0, r4
 8003246:	f000 fd77 	bl	8003d38 <_vfiprintf_r>
 800324a:	b002      	add	sp, #8
 800324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003250:	b004      	add	sp, #16
 8003252:	4770      	bx	lr
 8003254:	2000000c 	.word	0x2000000c

08003258 <_puts_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	460e      	mov	r6, r1
 800325c:	4605      	mov	r5, r0
 800325e:	b118      	cbz	r0, 8003268 <_puts_r+0x10>
 8003260:	6983      	ldr	r3, [r0, #24]
 8003262:	b90b      	cbnz	r3, 8003268 <_puts_r+0x10>
 8003264:	f000 fb50 	bl	8003908 <__sinit>
 8003268:	69ab      	ldr	r3, [r5, #24]
 800326a:	68ac      	ldr	r4, [r5, #8]
 800326c:	b913      	cbnz	r3, 8003274 <_puts_r+0x1c>
 800326e:	4628      	mov	r0, r5
 8003270:	f000 fb4a 	bl	8003908 <__sinit>
 8003274:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <_puts_r+0xd0>)
 8003276:	429c      	cmp	r4, r3
 8003278:	d120      	bne.n	80032bc <_puts_r+0x64>
 800327a:	686c      	ldr	r4, [r5, #4]
 800327c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800327e:	07db      	lsls	r3, r3, #31
 8003280:	d405      	bmi.n	800328e <_puts_r+0x36>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	0598      	lsls	r0, r3, #22
 8003286:	d402      	bmi.n	800328e <_puts_r+0x36>
 8003288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328a:	f000 fbdb 	bl	8003a44 <__retarget_lock_acquire_recursive>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	0719      	lsls	r1, r3, #28
 8003292:	d51d      	bpl.n	80032d0 <_puts_r+0x78>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	b1db      	cbz	r3, 80032d0 <_puts_r+0x78>
 8003298:	3e01      	subs	r6, #1
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60a3      	str	r3, [r4, #8]
 80032a4:	bb39      	cbnz	r1, 80032f6 <_puts_r+0x9e>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da38      	bge.n	800331c <_puts_r+0xc4>
 80032aa:	4622      	mov	r2, r4
 80032ac:	210a      	movs	r1, #10
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 f950 	bl	8003554 <__swbuf_r>
 80032b4:	3001      	adds	r0, #1
 80032b6:	d011      	beq.n	80032dc <_puts_r+0x84>
 80032b8:	250a      	movs	r5, #10
 80032ba:	e011      	b.n	80032e0 <_puts_r+0x88>
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <_puts_r+0xd4>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <_puts_r+0x6e>
 80032c2:	68ac      	ldr	r4, [r5, #8]
 80032c4:	e7da      	b.n	800327c <_puts_r+0x24>
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <_puts_r+0xd8>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68ec      	ldreq	r4, [r5, #12]
 80032ce:	e7d5      	b.n	800327c <_puts_r+0x24>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 f990 	bl	80035f8 <__swsetup_r>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d0dd      	beq.n	8003298 <_puts_r+0x40>
 80032dc:	f04f 35ff 	mov.w	r5, #4294967295
 80032e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032e2:	07da      	lsls	r2, r3, #31
 80032e4:	d405      	bmi.n	80032f2 <_puts_r+0x9a>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	059b      	lsls	r3, r3, #22
 80032ea:	d402      	bmi.n	80032f2 <_puts_r+0x9a>
 80032ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ee:	f000 fbaa 	bl	8003a46 <__retarget_lock_release_recursive>
 80032f2:	4628      	mov	r0, r5
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da04      	bge.n	8003304 <_puts_r+0xac>
 80032fa:	69a2      	ldr	r2, [r4, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dc06      	bgt.n	800330e <_puts_r+0xb6>
 8003300:	290a      	cmp	r1, #10
 8003302:	d004      	beq.n	800330e <_puts_r+0xb6>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	6022      	str	r2, [r4, #0]
 800330a:	7019      	strb	r1, [r3, #0]
 800330c:	e7c5      	b.n	800329a <_puts_r+0x42>
 800330e:	4622      	mov	r2, r4
 8003310:	4628      	mov	r0, r5
 8003312:	f000 f91f 	bl	8003554 <__swbuf_r>
 8003316:	3001      	adds	r0, #1
 8003318:	d1bf      	bne.n	800329a <_puts_r+0x42>
 800331a:	e7df      	b.n	80032dc <_puts_r+0x84>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	250a      	movs	r5, #10
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	6022      	str	r2, [r4, #0]
 8003324:	701d      	strb	r5, [r3, #0]
 8003326:	e7db      	b.n	80032e0 <_puts_r+0x88>
 8003328:	08004690 	.word	0x08004690
 800332c:	080046b0 	.word	0x080046b0
 8003330:	08004670 	.word	0x08004670

08003334 <puts>:
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <puts+0xc>)
 8003336:	4601      	mov	r1, r0
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	f7ff bf8d 	b.w	8003258 <_puts_r>
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c

08003344 <setvbuf>:
 8003344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003348:	461d      	mov	r5, r3
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <setvbuf+0x17c>)
 800334c:	681f      	ldr	r7, [r3, #0]
 800334e:	4604      	mov	r4, r0
 8003350:	460e      	mov	r6, r1
 8003352:	4690      	mov	r8, r2
 8003354:	b127      	cbz	r7, 8003360 <setvbuf+0x1c>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	b913      	cbnz	r3, 8003360 <setvbuf+0x1c>
 800335a:	4638      	mov	r0, r7
 800335c:	f000 fad4 	bl	8003908 <__sinit>
 8003360:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <setvbuf+0x180>)
 8003362:	429c      	cmp	r4, r3
 8003364:	d167      	bne.n	8003436 <setvbuf+0xf2>
 8003366:	687c      	ldr	r4, [r7, #4]
 8003368:	f1b8 0f02 	cmp.w	r8, #2
 800336c:	d006      	beq.n	800337c <setvbuf+0x38>
 800336e:	f1b8 0f01 	cmp.w	r8, #1
 8003372:	f200 809f 	bhi.w	80034b4 <setvbuf+0x170>
 8003376:	2d00      	cmp	r5, #0
 8003378:	f2c0 809c 	blt.w	80034b4 <setvbuf+0x170>
 800337c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800337e:	07db      	lsls	r3, r3, #31
 8003380:	d405      	bmi.n	800338e <setvbuf+0x4a>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	0598      	lsls	r0, r3, #22
 8003386:	d402      	bmi.n	800338e <setvbuf+0x4a>
 8003388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800338a:	f000 fb5b 	bl	8003a44 <__retarget_lock_acquire_recursive>
 800338e:	4621      	mov	r1, r4
 8003390:	4638      	mov	r0, r7
 8003392:	f000 fa25 	bl	80037e0 <_fflush_r>
 8003396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003398:	b141      	cbz	r1, 80033ac <setvbuf+0x68>
 800339a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800339e:	4299      	cmp	r1, r3
 80033a0:	d002      	beq.n	80033a8 <setvbuf+0x64>
 80033a2:	4638      	mov	r0, r7
 80033a4:	f000 fbbe 	bl	8003b24 <_free_r>
 80033a8:	2300      	movs	r3, #0
 80033aa:	6363      	str	r3, [r4, #52]	; 0x34
 80033ac:	2300      	movs	r3, #0
 80033ae:	61a3      	str	r3, [r4, #24]
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	0619      	lsls	r1, r3, #24
 80033b6:	d503      	bpl.n	80033c0 <setvbuf+0x7c>
 80033b8:	6921      	ldr	r1, [r4, #16]
 80033ba:	4638      	mov	r0, r7
 80033bc:	f000 fbb2 	bl	8003b24 <_free_r>
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	f1b8 0f02 	cmp.w	r8, #2
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	d06c      	beq.n	80034ac <setvbuf+0x168>
 80033d2:	ab01      	add	r3, sp, #4
 80033d4:	466a      	mov	r2, sp
 80033d6:	4621      	mov	r1, r4
 80033d8:	4638      	mov	r0, r7
 80033da:	f000 fb35 	bl	8003a48 <__swhatbuf_r>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	4318      	orrs	r0, r3
 80033e2:	81a0      	strh	r0, [r4, #12]
 80033e4:	2d00      	cmp	r5, #0
 80033e6:	d130      	bne.n	800344a <setvbuf+0x106>
 80033e8:	9d00      	ldr	r5, [sp, #0]
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 fb92 	bl	8003b14 <malloc>
 80033f0:	4606      	mov	r6, r0
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d155      	bne.n	80034a2 <setvbuf+0x15e>
 80033f6:	f8dd 9000 	ldr.w	r9, [sp]
 80033fa:	45a9      	cmp	r9, r5
 80033fc:	d14a      	bne.n	8003494 <setvbuf+0x150>
 80033fe:	f04f 35ff 	mov.w	r5, #4294967295
 8003402:	2200      	movs	r2, #0
 8003404:	60a2      	str	r2, [r4, #8]
 8003406:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800340a:	6022      	str	r2, [r4, #0]
 800340c:	6122      	str	r2, [r4, #16]
 800340e:	2201      	movs	r2, #1
 8003410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003414:	6162      	str	r2, [r4, #20]
 8003416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	07d2      	lsls	r2, r2, #31
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	d405      	bmi.n	800342e <setvbuf+0xea>
 8003422:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003426:	d102      	bne.n	800342e <setvbuf+0xea>
 8003428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800342a:	f000 fb0c 	bl	8003a46 <__retarget_lock_release_recursive>
 800342e:	4628      	mov	r0, r5
 8003430:	b003      	add	sp, #12
 8003432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <setvbuf+0x184>)
 8003438:	429c      	cmp	r4, r3
 800343a:	d101      	bne.n	8003440 <setvbuf+0xfc>
 800343c:	68bc      	ldr	r4, [r7, #8]
 800343e:	e793      	b.n	8003368 <setvbuf+0x24>
 8003440:	4b22      	ldr	r3, [pc, #136]	; (80034cc <setvbuf+0x188>)
 8003442:	429c      	cmp	r4, r3
 8003444:	bf08      	it	eq
 8003446:	68fc      	ldreq	r4, [r7, #12]
 8003448:	e78e      	b.n	8003368 <setvbuf+0x24>
 800344a:	2e00      	cmp	r6, #0
 800344c:	d0cd      	beq.n	80033ea <setvbuf+0xa6>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	b913      	cbnz	r3, 8003458 <setvbuf+0x114>
 8003452:	4638      	mov	r0, r7
 8003454:	f000 fa58 	bl	8003908 <__sinit>
 8003458:	f1b8 0f01 	cmp.w	r8, #1
 800345c:	bf08      	it	eq
 800345e:	89a3      	ldrheq	r3, [r4, #12]
 8003460:	6026      	str	r6, [r4, #0]
 8003462:	bf04      	itt	eq
 8003464:	f043 0301 	orreq.w	r3, r3, #1
 8003468:	81a3      	strheq	r3, [r4, #12]
 800346a:	89a2      	ldrh	r2, [r4, #12]
 800346c:	f012 0308 	ands.w	r3, r2, #8
 8003470:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003474:	d01c      	beq.n	80034b0 <setvbuf+0x16c>
 8003476:	07d3      	lsls	r3, r2, #31
 8003478:	bf41      	itttt	mi
 800347a:	2300      	movmi	r3, #0
 800347c:	426d      	negmi	r5, r5
 800347e:	60a3      	strmi	r3, [r4, #8]
 8003480:	61a5      	strmi	r5, [r4, #24]
 8003482:	bf58      	it	pl
 8003484:	60a5      	strpl	r5, [r4, #8]
 8003486:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003488:	f015 0501 	ands.w	r5, r5, #1
 800348c:	d115      	bne.n	80034ba <setvbuf+0x176>
 800348e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003492:	e7c8      	b.n	8003426 <setvbuf+0xe2>
 8003494:	4648      	mov	r0, r9
 8003496:	f000 fb3d 	bl	8003b14 <malloc>
 800349a:	4606      	mov	r6, r0
 800349c:	2800      	cmp	r0, #0
 800349e:	d0ae      	beq.n	80033fe <setvbuf+0xba>
 80034a0:	464d      	mov	r5, r9
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a8:	81a3      	strh	r3, [r4, #12]
 80034aa:	e7d0      	b.n	800344e <setvbuf+0x10a>
 80034ac:	2500      	movs	r5, #0
 80034ae:	e7a8      	b.n	8003402 <setvbuf+0xbe>
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	e7e8      	b.n	8003486 <setvbuf+0x142>
 80034b4:	f04f 35ff 	mov.w	r5, #4294967295
 80034b8:	e7b9      	b.n	800342e <setvbuf+0xea>
 80034ba:	2500      	movs	r5, #0
 80034bc:	e7b7      	b.n	800342e <setvbuf+0xea>
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c
 80034c4:	08004690 	.word	0x08004690
 80034c8:	080046b0 	.word	0x080046b0
 80034cc:	08004670 	.word	0x08004670

080034d0 <__utoa>:
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d2:	4c1f      	ldr	r4, [pc, #124]	; (8003550 <__utoa+0x80>)
 80034d4:	b08b      	sub	sp, #44	; 0x2c
 80034d6:	4605      	mov	r5, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	466e      	mov	r6, sp
 80034dc:	f104 0c20 	add.w	ip, r4, #32
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	6861      	ldr	r1, [r4, #4]
 80034e4:	4637      	mov	r7, r6
 80034e6:	c703      	stmia	r7!, {r0, r1}
 80034e8:	3408      	adds	r4, #8
 80034ea:	4564      	cmp	r4, ip
 80034ec:	463e      	mov	r6, r7
 80034ee:	d1f7      	bne.n	80034e0 <__utoa+0x10>
 80034f0:	7921      	ldrb	r1, [r4, #4]
 80034f2:	7139      	strb	r1, [r7, #4]
 80034f4:	1e91      	subs	r1, r2, #2
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	6038      	str	r0, [r7, #0]
 80034fa:	2922      	cmp	r1, #34	; 0x22
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	d904      	bls.n	800350c <__utoa+0x3c>
 8003502:	7019      	strb	r1, [r3, #0]
 8003504:	460b      	mov	r3, r1
 8003506:	4618      	mov	r0, r3
 8003508:	b00b      	add	sp, #44	; 0x2c
 800350a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350c:	1e58      	subs	r0, r3, #1
 800350e:	4684      	mov	ip, r0
 8003510:	fbb5 f7f2 	udiv	r7, r5, r2
 8003514:	fb02 5617 	mls	r6, r2, r7, r5
 8003518:	3628      	adds	r6, #40	; 0x28
 800351a:	446e      	add	r6, sp
 800351c:	460c      	mov	r4, r1
 800351e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003522:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003526:	462e      	mov	r6, r5
 8003528:	42b2      	cmp	r2, r6
 800352a:	f101 0101 	add.w	r1, r1, #1
 800352e:	463d      	mov	r5, r7
 8003530:	d9ee      	bls.n	8003510 <__utoa+0x40>
 8003532:	2200      	movs	r2, #0
 8003534:	545a      	strb	r2, [r3, r1]
 8003536:	1919      	adds	r1, r3, r4
 8003538:	1aa5      	subs	r5, r4, r2
 800353a:	42aa      	cmp	r2, r5
 800353c:	dae3      	bge.n	8003506 <__utoa+0x36>
 800353e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003542:	780e      	ldrb	r6, [r1, #0]
 8003544:	7006      	strb	r6, [r0, #0]
 8003546:	3201      	adds	r2, #1
 8003548:	f801 5901 	strb.w	r5, [r1], #-1
 800354c:	e7f4      	b.n	8003538 <__utoa+0x68>
 800354e:	bf00      	nop
 8003550:	08004648 	.word	0x08004648

08003554 <__swbuf_r>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	460e      	mov	r6, r1
 8003558:	4614      	mov	r4, r2
 800355a:	4605      	mov	r5, r0
 800355c:	b118      	cbz	r0, 8003566 <__swbuf_r+0x12>
 800355e:	6983      	ldr	r3, [r0, #24]
 8003560:	b90b      	cbnz	r3, 8003566 <__swbuf_r+0x12>
 8003562:	f000 f9d1 	bl	8003908 <__sinit>
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <__swbuf_r+0x98>)
 8003568:	429c      	cmp	r4, r3
 800356a:	d12b      	bne.n	80035c4 <__swbuf_r+0x70>
 800356c:	686c      	ldr	r4, [r5, #4]
 800356e:	69a3      	ldr	r3, [r4, #24]
 8003570:	60a3      	str	r3, [r4, #8]
 8003572:	89a3      	ldrh	r3, [r4, #12]
 8003574:	071a      	lsls	r2, r3, #28
 8003576:	d52f      	bpl.n	80035d8 <__swbuf_r+0x84>
 8003578:	6923      	ldr	r3, [r4, #16]
 800357a:	b36b      	cbz	r3, 80035d8 <__swbuf_r+0x84>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	1ac0      	subs	r0, r0, r3
 8003582:	6963      	ldr	r3, [r4, #20]
 8003584:	b2f6      	uxtb	r6, r6
 8003586:	4283      	cmp	r3, r0
 8003588:	4637      	mov	r7, r6
 800358a:	dc04      	bgt.n	8003596 <__swbuf_r+0x42>
 800358c:	4621      	mov	r1, r4
 800358e:	4628      	mov	r0, r5
 8003590:	f000 f926 	bl	80037e0 <_fflush_r>
 8003594:	bb30      	cbnz	r0, 80035e4 <__swbuf_r+0x90>
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	3b01      	subs	r3, #1
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	701e      	strb	r6, [r3, #0]
 80035a4:	6963      	ldr	r3, [r4, #20]
 80035a6:	3001      	adds	r0, #1
 80035a8:	4283      	cmp	r3, r0
 80035aa:	d004      	beq.n	80035b6 <__swbuf_r+0x62>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	07db      	lsls	r3, r3, #31
 80035b0:	d506      	bpl.n	80035c0 <__swbuf_r+0x6c>
 80035b2:	2e0a      	cmp	r6, #10
 80035b4:	d104      	bne.n	80035c0 <__swbuf_r+0x6c>
 80035b6:	4621      	mov	r1, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	f000 f911 	bl	80037e0 <_fflush_r>
 80035be:	b988      	cbnz	r0, 80035e4 <__swbuf_r+0x90>
 80035c0:	4638      	mov	r0, r7
 80035c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <__swbuf_r+0x9c>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	d101      	bne.n	80035ce <__swbuf_r+0x7a>
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	e7cf      	b.n	800356e <__swbuf_r+0x1a>
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <__swbuf_r+0xa0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	bf08      	it	eq
 80035d4:	68ec      	ldreq	r4, [r5, #12]
 80035d6:	e7ca      	b.n	800356e <__swbuf_r+0x1a>
 80035d8:	4621      	mov	r1, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f80c 	bl	80035f8 <__swsetup_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d0cb      	beq.n	800357c <__swbuf_r+0x28>
 80035e4:	f04f 37ff 	mov.w	r7, #4294967295
 80035e8:	e7ea      	b.n	80035c0 <__swbuf_r+0x6c>
 80035ea:	bf00      	nop
 80035ec:	08004690 	.word	0x08004690
 80035f0:	080046b0 	.word	0x080046b0
 80035f4:	08004670 	.word	0x08004670

080035f8 <__swsetup_r>:
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <__swsetup_r+0xcc>)
 80035fa:	b570      	push	{r4, r5, r6, lr}
 80035fc:	681d      	ldr	r5, [r3, #0]
 80035fe:	4606      	mov	r6, r0
 8003600:	460c      	mov	r4, r1
 8003602:	b125      	cbz	r5, 800360e <__swsetup_r+0x16>
 8003604:	69ab      	ldr	r3, [r5, #24]
 8003606:	b913      	cbnz	r3, 800360e <__swsetup_r+0x16>
 8003608:	4628      	mov	r0, r5
 800360a:	f000 f97d 	bl	8003908 <__sinit>
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <__swsetup_r+0xd0>)
 8003610:	429c      	cmp	r4, r3
 8003612:	d10f      	bne.n	8003634 <__swsetup_r+0x3c>
 8003614:	686c      	ldr	r4, [r5, #4]
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800361c:	0719      	lsls	r1, r3, #28
 800361e:	d42c      	bmi.n	800367a <__swsetup_r+0x82>
 8003620:	06dd      	lsls	r5, r3, #27
 8003622:	d411      	bmi.n	8003648 <__swsetup_r+0x50>
 8003624:	2309      	movs	r3, #9
 8003626:	6033      	str	r3, [r6, #0]
 8003628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	f04f 30ff 	mov.w	r0, #4294967295
 8003632:	e03e      	b.n	80036b2 <__swsetup_r+0xba>
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <__swsetup_r+0xd4>)
 8003636:	429c      	cmp	r4, r3
 8003638:	d101      	bne.n	800363e <__swsetup_r+0x46>
 800363a:	68ac      	ldr	r4, [r5, #8]
 800363c:	e7eb      	b.n	8003616 <__swsetup_r+0x1e>
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <__swsetup_r+0xd8>)
 8003640:	429c      	cmp	r4, r3
 8003642:	bf08      	it	eq
 8003644:	68ec      	ldreq	r4, [r5, #12]
 8003646:	e7e6      	b.n	8003616 <__swsetup_r+0x1e>
 8003648:	0758      	lsls	r0, r3, #29
 800364a:	d512      	bpl.n	8003672 <__swsetup_r+0x7a>
 800364c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800364e:	b141      	cbz	r1, 8003662 <__swsetup_r+0x6a>
 8003650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003654:	4299      	cmp	r1, r3
 8003656:	d002      	beq.n	800365e <__swsetup_r+0x66>
 8003658:	4630      	mov	r0, r6
 800365a:	f000 fa63 	bl	8003b24 <_free_r>
 800365e:	2300      	movs	r3, #0
 8003660:	6363      	str	r3, [r4, #52]	; 0x34
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	2300      	movs	r3, #0
 800366c:	6063      	str	r3, [r4, #4]
 800366e:	6923      	ldr	r3, [r4, #16]
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	b94b      	cbnz	r3, 8003692 <__swsetup_r+0x9a>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d003      	beq.n	8003692 <__swsetup_r+0x9a>
 800368a:	4621      	mov	r1, r4
 800368c:	4630      	mov	r0, r6
 800368e:	f000 fa01 	bl	8003a94 <__smakebuf_r>
 8003692:	89a0      	ldrh	r0, [r4, #12]
 8003694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003698:	f010 0301 	ands.w	r3, r0, #1
 800369c:	d00a      	beq.n	80036b4 <__swsetup_r+0xbc>
 800369e:	2300      	movs	r3, #0
 80036a0:	60a3      	str	r3, [r4, #8]
 80036a2:	6963      	ldr	r3, [r4, #20]
 80036a4:	425b      	negs	r3, r3
 80036a6:	61a3      	str	r3, [r4, #24]
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	b943      	cbnz	r3, 80036be <__swsetup_r+0xc6>
 80036ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036b0:	d1ba      	bne.n	8003628 <__swsetup_r+0x30>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	0781      	lsls	r1, r0, #30
 80036b6:	bf58      	it	pl
 80036b8:	6963      	ldrpl	r3, [r4, #20]
 80036ba:	60a3      	str	r3, [r4, #8]
 80036bc:	e7f4      	b.n	80036a8 <__swsetup_r+0xb0>
 80036be:	2000      	movs	r0, #0
 80036c0:	e7f7      	b.n	80036b2 <__swsetup_r+0xba>
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	08004690 	.word	0x08004690
 80036cc:	080046b0 	.word	0x080046b0
 80036d0:	08004670 	.word	0x08004670

080036d4 <__sflush_r>:
 80036d4:	898a      	ldrh	r2, [r1, #12]
 80036d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036da:	4605      	mov	r5, r0
 80036dc:	0710      	lsls	r0, r2, #28
 80036de:	460c      	mov	r4, r1
 80036e0:	d458      	bmi.n	8003794 <__sflush_r+0xc0>
 80036e2:	684b      	ldr	r3, [r1, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dc05      	bgt.n	80036f4 <__sflush_r+0x20>
 80036e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	dc02      	bgt.n	80036f4 <__sflush_r+0x20>
 80036ee:	2000      	movs	r0, #0
 80036f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036f6:	2e00      	cmp	r6, #0
 80036f8:	d0f9      	beq.n	80036ee <__sflush_r+0x1a>
 80036fa:	2300      	movs	r3, #0
 80036fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003700:	682f      	ldr	r7, [r5, #0]
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	d032      	beq.n	800376c <__sflush_r+0x98>
 8003706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	075a      	lsls	r2, r3, #29
 800370c:	d505      	bpl.n	800371a <__sflush_r+0x46>
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	1ac0      	subs	r0, r0, r3
 8003712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003714:	b10b      	cbz	r3, 800371a <__sflush_r+0x46>
 8003716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003718:	1ac0      	subs	r0, r0, r3
 800371a:	2300      	movs	r3, #0
 800371c:	4602      	mov	r2, r0
 800371e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003720:	6a21      	ldr	r1, [r4, #32]
 8003722:	4628      	mov	r0, r5
 8003724:	47b0      	blx	r6
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	d106      	bne.n	800373a <__sflush_r+0x66>
 800372c:	6829      	ldr	r1, [r5, #0]
 800372e:	291d      	cmp	r1, #29
 8003730:	d82c      	bhi.n	800378c <__sflush_r+0xb8>
 8003732:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <__sflush_r+0x108>)
 8003734:	40ca      	lsrs	r2, r1
 8003736:	07d6      	lsls	r6, r2, #31
 8003738:	d528      	bpl.n	800378c <__sflush_r+0xb8>
 800373a:	2200      	movs	r2, #0
 800373c:	6062      	str	r2, [r4, #4]
 800373e:	04d9      	lsls	r1, r3, #19
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	6022      	str	r2, [r4, #0]
 8003744:	d504      	bpl.n	8003750 <__sflush_r+0x7c>
 8003746:	1c42      	adds	r2, r0, #1
 8003748:	d101      	bne.n	800374e <__sflush_r+0x7a>
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	b903      	cbnz	r3, 8003750 <__sflush_r+0x7c>
 800374e:	6560      	str	r0, [r4, #84]	; 0x54
 8003750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003752:	602f      	str	r7, [r5, #0]
 8003754:	2900      	cmp	r1, #0
 8003756:	d0ca      	beq.n	80036ee <__sflush_r+0x1a>
 8003758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800375c:	4299      	cmp	r1, r3
 800375e:	d002      	beq.n	8003766 <__sflush_r+0x92>
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f9df 	bl	8003b24 <_free_r>
 8003766:	2000      	movs	r0, #0
 8003768:	6360      	str	r0, [r4, #52]	; 0x34
 800376a:	e7c1      	b.n	80036f0 <__sflush_r+0x1c>
 800376c:	6a21      	ldr	r1, [r4, #32]
 800376e:	2301      	movs	r3, #1
 8003770:	4628      	mov	r0, r5
 8003772:	47b0      	blx	r6
 8003774:	1c41      	adds	r1, r0, #1
 8003776:	d1c7      	bne.n	8003708 <__sflush_r+0x34>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0c4      	beq.n	8003708 <__sflush_r+0x34>
 800377e:	2b1d      	cmp	r3, #29
 8003780:	d001      	beq.n	8003786 <__sflush_r+0xb2>
 8003782:	2b16      	cmp	r3, #22
 8003784:	d101      	bne.n	800378a <__sflush_r+0xb6>
 8003786:	602f      	str	r7, [r5, #0]
 8003788:	e7b1      	b.n	80036ee <__sflush_r+0x1a>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003790:	81a3      	strh	r3, [r4, #12]
 8003792:	e7ad      	b.n	80036f0 <__sflush_r+0x1c>
 8003794:	690f      	ldr	r7, [r1, #16]
 8003796:	2f00      	cmp	r7, #0
 8003798:	d0a9      	beq.n	80036ee <__sflush_r+0x1a>
 800379a:	0793      	lsls	r3, r2, #30
 800379c:	680e      	ldr	r6, [r1, #0]
 800379e:	bf08      	it	eq
 80037a0:	694b      	ldreq	r3, [r1, #20]
 80037a2:	600f      	str	r7, [r1, #0]
 80037a4:	bf18      	it	ne
 80037a6:	2300      	movne	r3, #0
 80037a8:	eba6 0807 	sub.w	r8, r6, r7
 80037ac:	608b      	str	r3, [r1, #8]
 80037ae:	f1b8 0f00 	cmp.w	r8, #0
 80037b2:	dd9c      	ble.n	80036ee <__sflush_r+0x1a>
 80037b4:	6a21      	ldr	r1, [r4, #32]
 80037b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037b8:	4643      	mov	r3, r8
 80037ba:	463a      	mov	r2, r7
 80037bc:	4628      	mov	r0, r5
 80037be:	47b0      	blx	r6
 80037c0:	2800      	cmp	r0, #0
 80037c2:	dc06      	bgt.n	80037d2 <__sflush_r+0xfe>
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ca:	81a3      	strh	r3, [r4, #12]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	e78e      	b.n	80036f0 <__sflush_r+0x1c>
 80037d2:	4407      	add	r7, r0
 80037d4:	eba8 0800 	sub.w	r8, r8, r0
 80037d8:	e7e9      	b.n	80037ae <__sflush_r+0xda>
 80037da:	bf00      	nop
 80037dc:	20400001 	.word	0x20400001

080037e0 <_fflush_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	690b      	ldr	r3, [r1, #16]
 80037e4:	4605      	mov	r5, r0
 80037e6:	460c      	mov	r4, r1
 80037e8:	b913      	cbnz	r3, 80037f0 <_fflush_r+0x10>
 80037ea:	2500      	movs	r5, #0
 80037ec:	4628      	mov	r0, r5
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	b118      	cbz	r0, 80037fa <_fflush_r+0x1a>
 80037f2:	6983      	ldr	r3, [r0, #24]
 80037f4:	b90b      	cbnz	r3, 80037fa <_fflush_r+0x1a>
 80037f6:	f000 f887 	bl	8003908 <__sinit>
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <_fflush_r+0x6c>)
 80037fc:	429c      	cmp	r4, r3
 80037fe:	d11b      	bne.n	8003838 <_fflush_r+0x58>
 8003800:	686c      	ldr	r4, [r5, #4]
 8003802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ef      	beq.n	80037ea <_fflush_r+0xa>
 800380a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800380c:	07d0      	lsls	r0, r2, #31
 800380e:	d404      	bmi.n	800381a <_fflush_r+0x3a>
 8003810:	0599      	lsls	r1, r3, #22
 8003812:	d402      	bmi.n	800381a <_fflush_r+0x3a>
 8003814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003816:	f000 f915 	bl	8003a44 <__retarget_lock_acquire_recursive>
 800381a:	4628      	mov	r0, r5
 800381c:	4621      	mov	r1, r4
 800381e:	f7ff ff59 	bl	80036d4 <__sflush_r>
 8003822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003824:	07da      	lsls	r2, r3, #31
 8003826:	4605      	mov	r5, r0
 8003828:	d4e0      	bmi.n	80037ec <_fflush_r+0xc>
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	059b      	lsls	r3, r3, #22
 800382e:	d4dd      	bmi.n	80037ec <_fflush_r+0xc>
 8003830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003832:	f000 f908 	bl	8003a46 <__retarget_lock_release_recursive>
 8003836:	e7d9      	b.n	80037ec <_fflush_r+0xc>
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <_fflush_r+0x70>)
 800383a:	429c      	cmp	r4, r3
 800383c:	d101      	bne.n	8003842 <_fflush_r+0x62>
 800383e:	68ac      	ldr	r4, [r5, #8]
 8003840:	e7df      	b.n	8003802 <_fflush_r+0x22>
 8003842:	4b04      	ldr	r3, [pc, #16]	; (8003854 <_fflush_r+0x74>)
 8003844:	429c      	cmp	r4, r3
 8003846:	bf08      	it	eq
 8003848:	68ec      	ldreq	r4, [r5, #12]
 800384a:	e7da      	b.n	8003802 <_fflush_r+0x22>
 800384c:	08004690 	.word	0x08004690
 8003850:	080046b0 	.word	0x080046b0
 8003854:	08004670 	.word	0x08004670

08003858 <std>:
 8003858:	2300      	movs	r3, #0
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
 800385e:	e9c0 3300 	strd	r3, r3, [r0]
 8003862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003866:	6083      	str	r3, [r0, #8]
 8003868:	8181      	strh	r1, [r0, #12]
 800386a:	6643      	str	r3, [r0, #100]	; 0x64
 800386c:	81c2      	strh	r2, [r0, #14]
 800386e:	6183      	str	r3, [r0, #24]
 8003870:	4619      	mov	r1, r3
 8003872:	2208      	movs	r2, #8
 8003874:	305c      	adds	r0, #92	; 0x5c
 8003876:	f7ff fccf 	bl	8003218 <memset>
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <std+0x38>)
 800387c:	6263      	str	r3, [r4, #36]	; 0x24
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <std+0x3c>)
 8003880:	62a3      	str	r3, [r4, #40]	; 0x28
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <std+0x40>)
 8003884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <std+0x44>)
 8003888:	6224      	str	r4, [r4, #32]
 800388a:	6323      	str	r3, [r4, #48]	; 0x30
 800388c:	bd10      	pop	{r4, pc}
 800388e:	bf00      	nop
 8003890:	080042e1 	.word	0x080042e1
 8003894:	08004303 	.word	0x08004303
 8003898:	0800433b 	.word	0x0800433b
 800389c:	0800435f 	.word	0x0800435f

080038a0 <_cleanup_r>:
 80038a0:	4901      	ldr	r1, [pc, #4]	; (80038a8 <_cleanup_r+0x8>)
 80038a2:	f000 b8af 	b.w	8003a04 <_fwalk_reent>
 80038a6:	bf00      	nop
 80038a8:	080037e1 	.word	0x080037e1

080038ac <__sfmoreglue>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	2268      	movs	r2, #104	; 0x68
 80038b0:	1e4d      	subs	r5, r1, #1
 80038b2:	4355      	muls	r5, r2
 80038b4:	460e      	mov	r6, r1
 80038b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038ba:	f000 f99f 	bl	8003bfc <_malloc_r>
 80038be:	4604      	mov	r4, r0
 80038c0:	b140      	cbz	r0, 80038d4 <__sfmoreglue+0x28>
 80038c2:	2100      	movs	r1, #0
 80038c4:	e9c0 1600 	strd	r1, r6, [r0]
 80038c8:	300c      	adds	r0, #12
 80038ca:	60a0      	str	r0, [r4, #8]
 80038cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038d0:	f7ff fca2 	bl	8003218 <memset>
 80038d4:	4620      	mov	r0, r4
 80038d6:	bd70      	pop	{r4, r5, r6, pc}

080038d8 <__sfp_lock_acquire>:
 80038d8:	4801      	ldr	r0, [pc, #4]	; (80038e0 <__sfp_lock_acquire+0x8>)
 80038da:	f000 b8b3 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 80038de:	bf00      	nop
 80038e0:	20000121 	.word	0x20000121

080038e4 <__sfp_lock_release>:
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <__sfp_lock_release+0x8>)
 80038e6:	f000 b8ae 	b.w	8003a46 <__retarget_lock_release_recursive>
 80038ea:	bf00      	nop
 80038ec:	20000121 	.word	0x20000121

080038f0 <__sinit_lock_acquire>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__sinit_lock_acquire+0x8>)
 80038f2:	f000 b8a7 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 80038f6:	bf00      	nop
 80038f8:	20000122 	.word	0x20000122

080038fc <__sinit_lock_release>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__sinit_lock_release+0x8>)
 80038fe:	f000 b8a2 	b.w	8003a46 <__retarget_lock_release_recursive>
 8003902:	bf00      	nop
 8003904:	20000122 	.word	0x20000122

08003908 <__sinit>:
 8003908:	b510      	push	{r4, lr}
 800390a:	4604      	mov	r4, r0
 800390c:	f7ff fff0 	bl	80038f0 <__sinit_lock_acquire>
 8003910:	69a3      	ldr	r3, [r4, #24]
 8003912:	b11b      	cbz	r3, 800391c <__sinit+0x14>
 8003914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003918:	f7ff bff0 	b.w	80038fc <__sinit_lock_release>
 800391c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003920:	6523      	str	r3, [r4, #80]	; 0x50
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <__sinit+0x68>)
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <__sinit+0x6c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	62a2      	str	r2, [r4, #40]	; 0x28
 800392a:	42a3      	cmp	r3, r4
 800392c:	bf04      	itt	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	61a3      	streq	r3, [r4, #24]
 8003932:	4620      	mov	r0, r4
 8003934:	f000 f820 	bl	8003978 <__sfp>
 8003938:	6060      	str	r0, [r4, #4]
 800393a:	4620      	mov	r0, r4
 800393c:	f000 f81c 	bl	8003978 <__sfp>
 8003940:	60a0      	str	r0, [r4, #8]
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f818 	bl	8003978 <__sfp>
 8003948:	2200      	movs	r2, #0
 800394a:	60e0      	str	r0, [r4, #12]
 800394c:	2104      	movs	r1, #4
 800394e:	6860      	ldr	r0, [r4, #4]
 8003950:	f7ff ff82 	bl	8003858 <std>
 8003954:	68a0      	ldr	r0, [r4, #8]
 8003956:	2201      	movs	r2, #1
 8003958:	2109      	movs	r1, #9
 800395a:	f7ff ff7d 	bl	8003858 <std>
 800395e:	68e0      	ldr	r0, [r4, #12]
 8003960:	2202      	movs	r2, #2
 8003962:	2112      	movs	r1, #18
 8003964:	f7ff ff78 	bl	8003858 <std>
 8003968:	2301      	movs	r3, #1
 800396a:	61a3      	str	r3, [r4, #24]
 800396c:	e7d2      	b.n	8003914 <__sinit+0xc>
 800396e:	bf00      	nop
 8003970:	08004644 	.word	0x08004644
 8003974:	080038a1 	.word	0x080038a1

08003978 <__sfp>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	4607      	mov	r7, r0
 800397c:	f7ff ffac 	bl	80038d8 <__sfp_lock_acquire>
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <__sfp+0x84>)
 8003982:	681e      	ldr	r6, [r3, #0]
 8003984:	69b3      	ldr	r3, [r6, #24]
 8003986:	b913      	cbnz	r3, 800398e <__sfp+0x16>
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff ffbd 	bl	8003908 <__sinit>
 800398e:	3648      	adds	r6, #72	; 0x48
 8003990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003994:	3b01      	subs	r3, #1
 8003996:	d503      	bpl.n	80039a0 <__sfp+0x28>
 8003998:	6833      	ldr	r3, [r6, #0]
 800399a:	b30b      	cbz	r3, 80039e0 <__sfp+0x68>
 800399c:	6836      	ldr	r6, [r6, #0]
 800399e:	e7f7      	b.n	8003990 <__sfp+0x18>
 80039a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039a4:	b9d5      	cbnz	r5, 80039dc <__sfp+0x64>
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <__sfp+0x88>)
 80039a8:	60e3      	str	r3, [r4, #12]
 80039aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039ae:	6665      	str	r5, [r4, #100]	; 0x64
 80039b0:	f000 f847 	bl	8003a42 <__retarget_lock_init_recursive>
 80039b4:	f7ff ff96 	bl	80038e4 <__sfp_lock_release>
 80039b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039c0:	6025      	str	r5, [r4, #0]
 80039c2:	61a5      	str	r5, [r4, #24]
 80039c4:	2208      	movs	r2, #8
 80039c6:	4629      	mov	r1, r5
 80039c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039cc:	f7ff fc24 	bl	8003218 <memset>
 80039d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039d8:	4620      	mov	r0, r4
 80039da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039dc:	3468      	adds	r4, #104	; 0x68
 80039de:	e7d9      	b.n	8003994 <__sfp+0x1c>
 80039e0:	2104      	movs	r1, #4
 80039e2:	4638      	mov	r0, r7
 80039e4:	f7ff ff62 	bl	80038ac <__sfmoreglue>
 80039e8:	4604      	mov	r4, r0
 80039ea:	6030      	str	r0, [r6, #0]
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d1d5      	bne.n	800399c <__sfp+0x24>
 80039f0:	f7ff ff78 	bl	80038e4 <__sfp_lock_release>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	e7ee      	b.n	80039d8 <__sfp+0x60>
 80039fa:	bf00      	nop
 80039fc:	08004644 	.word	0x08004644
 8003a00:	ffff0001 	.word	0xffff0001

08003a04 <_fwalk_reent>:
 8003a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a08:	4606      	mov	r6, r0
 8003a0a:	4688      	mov	r8, r1
 8003a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a10:	2700      	movs	r7, #0
 8003a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a16:	f1b9 0901 	subs.w	r9, r9, #1
 8003a1a:	d505      	bpl.n	8003a28 <_fwalk_reent+0x24>
 8003a1c:	6824      	ldr	r4, [r4, #0]
 8003a1e:	2c00      	cmp	r4, #0
 8003a20:	d1f7      	bne.n	8003a12 <_fwalk_reent+0xe>
 8003a22:	4638      	mov	r0, r7
 8003a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a28:	89ab      	ldrh	r3, [r5, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d907      	bls.n	8003a3e <_fwalk_reent+0x3a>
 8003a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a32:	3301      	adds	r3, #1
 8003a34:	d003      	beq.n	8003a3e <_fwalk_reent+0x3a>
 8003a36:	4629      	mov	r1, r5
 8003a38:	4630      	mov	r0, r6
 8003a3a:	47c0      	blx	r8
 8003a3c:	4307      	orrs	r7, r0
 8003a3e:	3568      	adds	r5, #104	; 0x68
 8003a40:	e7e9      	b.n	8003a16 <_fwalk_reent+0x12>

08003a42 <__retarget_lock_init_recursive>:
 8003a42:	4770      	bx	lr

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <__swhatbuf_r>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	460e      	mov	r6, r1
 8003a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a50:	2900      	cmp	r1, #0
 8003a52:	b096      	sub	sp, #88	; 0x58
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	da08      	bge.n	8003a6c <__swhatbuf_r+0x24>
 8003a5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	602a      	str	r2, [r5, #0]
 8003a62:	061a      	lsls	r2, r3, #24
 8003a64:	d410      	bmi.n	8003a88 <__swhatbuf_r+0x40>
 8003a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6a:	e00e      	b.n	8003a8a <__swhatbuf_r+0x42>
 8003a6c:	466a      	mov	r2, sp
 8003a6e:	f000 fc9d 	bl	80043ac <_fstat_r>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	dbf1      	blt.n	8003a5a <__swhatbuf_r+0x12>
 8003a76:	9a01      	ldr	r2, [sp, #4]
 8003a78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a80:	425a      	negs	r2, r3
 8003a82:	415a      	adcs	r2, r3
 8003a84:	602a      	str	r2, [r5, #0]
 8003a86:	e7ee      	b.n	8003a66 <__swhatbuf_r+0x1e>
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	b016      	add	sp, #88	; 0x58
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a94 <__smakebuf_r>:
 8003a94:	898b      	ldrh	r3, [r1, #12]
 8003a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a98:	079d      	lsls	r5, r3, #30
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	d507      	bpl.n	8003ab0 <__smakebuf_r+0x1c>
 8003aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	6123      	str	r3, [r4, #16]
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	6163      	str	r3, [r4, #20]
 8003aac:	b002      	add	sp, #8
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	ab01      	add	r3, sp, #4
 8003ab2:	466a      	mov	r2, sp
 8003ab4:	f7ff ffc8 	bl	8003a48 <__swhatbuf_r>
 8003ab8:	9900      	ldr	r1, [sp, #0]
 8003aba:	4605      	mov	r5, r0
 8003abc:	4630      	mov	r0, r6
 8003abe:	f000 f89d 	bl	8003bfc <_malloc_r>
 8003ac2:	b948      	cbnz	r0, 8003ad8 <__smakebuf_r+0x44>
 8003ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac8:	059a      	lsls	r2, r3, #22
 8003aca:	d4ef      	bmi.n	8003aac <__smakebuf_r+0x18>
 8003acc:	f023 0303 	bic.w	r3, r3, #3
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	e7e3      	b.n	8003aa0 <__smakebuf_r+0xc>
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <__smakebuf_r+0x7c>)
 8003ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	6020      	str	r0, [r4, #0]
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	81a3      	strh	r3, [r4, #12]
 8003ae6:	9b00      	ldr	r3, [sp, #0]
 8003ae8:	6163      	str	r3, [r4, #20]
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	6120      	str	r0, [r4, #16]
 8003aee:	b15b      	cbz	r3, 8003b08 <__smakebuf_r+0x74>
 8003af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003af4:	4630      	mov	r0, r6
 8003af6:	f000 fc6b 	bl	80043d0 <_isatty_r>
 8003afa:	b128      	cbz	r0, 8003b08 <__smakebuf_r+0x74>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	89a0      	ldrh	r0, [r4, #12]
 8003b0a:	4305      	orrs	r5, r0
 8003b0c:	81a5      	strh	r5, [r4, #12]
 8003b0e:	e7cd      	b.n	8003aac <__smakebuf_r+0x18>
 8003b10:	080038a1 	.word	0x080038a1

08003b14 <malloc>:
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <malloc+0xc>)
 8003b16:	4601      	mov	r1, r0
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	f000 b86f 	b.w	8003bfc <_malloc_r>
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <_free_r>:
 8003b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b26:	2900      	cmp	r1, #0
 8003b28:	d044      	beq.n	8003bb4 <_free_r+0x90>
 8003b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2e:	9001      	str	r0, [sp, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f1a1 0404 	sub.w	r4, r1, #4
 8003b36:	bfb8      	it	lt
 8003b38:	18e4      	addlt	r4, r4, r3
 8003b3a:	f000 fc6b 	bl	8004414 <__malloc_lock>
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <_free_r+0x94>)
 8003b40:	9801      	ldr	r0, [sp, #4]
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	b933      	cbnz	r3, 8003b54 <_free_r+0x30>
 8003b46:	6063      	str	r3, [r4, #4]
 8003b48:	6014      	str	r4, [r2, #0]
 8003b4a:	b003      	add	sp, #12
 8003b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b50:	f000 bc66 	b.w	8004420 <__malloc_unlock>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d908      	bls.n	8003b6a <_free_r+0x46>
 8003b58:	6825      	ldr	r5, [r4, #0]
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf01      	itttt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	1949      	addeq	r1, r1, r5
 8003b66:	6021      	streq	r1, [r4, #0]
 8003b68:	e7ed      	b.n	8003b46 <_free_r+0x22>
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b10b      	cbz	r3, 8003b74 <_free_r+0x50>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d9fa      	bls.n	8003b6a <_free_r+0x46>
 8003b74:	6811      	ldr	r1, [r2, #0]
 8003b76:	1855      	adds	r5, r2, r1
 8003b78:	42a5      	cmp	r5, r4
 8003b7a:	d10b      	bne.n	8003b94 <_free_r+0x70>
 8003b7c:	6824      	ldr	r4, [r4, #0]
 8003b7e:	4421      	add	r1, r4
 8003b80:	1854      	adds	r4, r2, r1
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	d1e0      	bne.n	8003b4a <_free_r+0x26>
 8003b88:	681c      	ldr	r4, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	4421      	add	r1, r4
 8003b90:	6011      	str	r1, [r2, #0]
 8003b92:	e7da      	b.n	8003b4a <_free_r+0x26>
 8003b94:	d902      	bls.n	8003b9c <_free_r+0x78>
 8003b96:	230c      	movs	r3, #12
 8003b98:	6003      	str	r3, [r0, #0]
 8003b9a:	e7d6      	b.n	8003b4a <_free_r+0x26>
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	1961      	adds	r1, r4, r5
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	bf04      	itt	eq
 8003ba4:	6819      	ldreq	r1, [r3, #0]
 8003ba6:	685b      	ldreq	r3, [r3, #4]
 8003ba8:	6063      	str	r3, [r4, #4]
 8003baa:	bf04      	itt	eq
 8003bac:	1949      	addeq	r1, r1, r5
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	6054      	str	r4, [r2, #4]
 8003bb2:	e7ca      	b.n	8003b4a <_free_r+0x26>
 8003bb4:	b003      	add	sp, #12
 8003bb6:	bd30      	pop	{r4, r5, pc}
 8003bb8:	20000124 	.word	0x20000124

08003bbc <sbrk_aligned>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4e0e      	ldr	r6, [pc, #56]	; (8003bf8 <sbrk_aligned+0x3c>)
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	6831      	ldr	r1, [r6, #0]
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b911      	cbnz	r1, 8003bce <sbrk_aligned+0x12>
 8003bc8:	f000 fb7a 	bl	80042c0 <_sbrk_r>
 8003bcc:	6030      	str	r0, [r6, #0]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fb75 	bl	80042c0 <_sbrk_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d00a      	beq.n	8003bf0 <sbrk_aligned+0x34>
 8003bda:	1cc4      	adds	r4, r0, #3
 8003bdc:	f024 0403 	bic.w	r4, r4, #3
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d007      	beq.n	8003bf4 <sbrk_aligned+0x38>
 8003be4:	1a21      	subs	r1, r4, r0
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 fb6a 	bl	80042c0 <_sbrk_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d101      	bne.n	8003bf4 <sbrk_aligned+0x38>
 8003bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	20000128 	.word	0x20000128

08003bfc <_malloc_r>:
 8003bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c00:	1ccd      	adds	r5, r1, #3
 8003c02:	f025 0503 	bic.w	r5, r5, #3
 8003c06:	3508      	adds	r5, #8
 8003c08:	2d0c      	cmp	r5, #12
 8003c0a:	bf38      	it	cc
 8003c0c:	250c      	movcc	r5, #12
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	4607      	mov	r7, r0
 8003c12:	db01      	blt.n	8003c18 <_malloc_r+0x1c>
 8003c14:	42a9      	cmp	r1, r5
 8003c16:	d905      	bls.n	8003c24 <_malloc_r+0x28>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	4630      	mov	r0, r6
 8003c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c24:	4e2e      	ldr	r6, [pc, #184]	; (8003ce0 <_malloc_r+0xe4>)
 8003c26:	f000 fbf5 	bl	8004414 <__malloc_lock>
 8003c2a:	6833      	ldr	r3, [r6, #0]
 8003c2c:	461c      	mov	r4, r3
 8003c2e:	bb34      	cbnz	r4, 8003c7e <_malloc_r+0x82>
 8003c30:	4629      	mov	r1, r5
 8003c32:	4638      	mov	r0, r7
 8003c34:	f7ff ffc2 	bl	8003bbc <sbrk_aligned>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	d14d      	bne.n	8003cda <_malloc_r+0xde>
 8003c3e:	6834      	ldr	r4, [r6, #0]
 8003c40:	4626      	mov	r6, r4
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	d140      	bne.n	8003cc8 <_malloc_r+0xcc>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	4631      	mov	r1, r6
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	eb04 0803 	add.w	r8, r4, r3
 8003c50:	f000 fb36 	bl	80042c0 <_sbrk_r>
 8003c54:	4580      	cmp	r8, r0
 8003c56:	d13a      	bne.n	8003cce <_malloc_r+0xd2>
 8003c58:	6821      	ldr	r1, [r4, #0]
 8003c5a:	3503      	adds	r5, #3
 8003c5c:	1a6d      	subs	r5, r5, r1
 8003c5e:	f025 0503 	bic.w	r5, r5, #3
 8003c62:	3508      	adds	r5, #8
 8003c64:	2d0c      	cmp	r5, #12
 8003c66:	bf38      	it	cc
 8003c68:	250c      	movcc	r5, #12
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f7ff ffa5 	bl	8003bbc <sbrk_aligned>
 8003c72:	3001      	adds	r0, #1
 8003c74:	d02b      	beq.n	8003cce <_malloc_r+0xd2>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	442b      	add	r3, r5
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	e00e      	b.n	8003c9c <_malloc_r+0xa0>
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	1b52      	subs	r2, r2, r5
 8003c82:	d41e      	bmi.n	8003cc2 <_malloc_r+0xc6>
 8003c84:	2a0b      	cmp	r2, #11
 8003c86:	d916      	bls.n	8003cb6 <_malloc_r+0xba>
 8003c88:	1961      	adds	r1, r4, r5
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	6025      	str	r5, [r4, #0]
 8003c8e:	bf18      	it	ne
 8003c90:	6059      	strne	r1, [r3, #4]
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	bf08      	it	eq
 8003c96:	6031      	streq	r1, [r6, #0]
 8003c98:	5162      	str	r2, [r4, r5]
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f104 060b 	add.w	r6, r4, #11
 8003ca2:	f000 fbbd 	bl	8004420 <__malloc_unlock>
 8003ca6:	f026 0607 	bic.w	r6, r6, #7
 8003caa:	1d23      	adds	r3, r4, #4
 8003cac:	1af2      	subs	r2, r6, r3
 8003cae:	d0b6      	beq.n	8003c1e <_malloc_r+0x22>
 8003cb0:	1b9b      	subs	r3, r3, r6
 8003cb2:	50a3      	str	r3, [r4, r2]
 8003cb4:	e7b3      	b.n	8003c1e <_malloc_r+0x22>
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	42a3      	cmp	r3, r4
 8003cba:	bf0c      	ite	eq
 8003cbc:	6032      	streq	r2, [r6, #0]
 8003cbe:	605a      	strne	r2, [r3, #4]
 8003cc0:	e7ec      	b.n	8003c9c <_malloc_r+0xa0>
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	6864      	ldr	r4, [r4, #4]
 8003cc6:	e7b2      	b.n	8003c2e <_malloc_r+0x32>
 8003cc8:	4634      	mov	r4, r6
 8003cca:	6876      	ldr	r6, [r6, #4]
 8003ccc:	e7b9      	b.n	8003c42 <_malloc_r+0x46>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	f000 fba4 	bl	8004420 <__malloc_unlock>
 8003cd8:	e7a1      	b.n	8003c1e <_malloc_r+0x22>
 8003cda:	6025      	str	r5, [r4, #0]
 8003cdc:	e7de      	b.n	8003c9c <_malloc_r+0xa0>
 8003cde:	bf00      	nop
 8003ce0:	20000124 	.word	0x20000124

08003ce4 <__sfputc_r>:
 8003ce4:	6893      	ldr	r3, [r2, #8]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	b410      	push	{r4}
 8003cec:	6093      	str	r3, [r2, #8]
 8003cee:	da08      	bge.n	8003d02 <__sfputc_r+0x1e>
 8003cf0:	6994      	ldr	r4, [r2, #24]
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	db01      	blt.n	8003cfa <__sfputc_r+0x16>
 8003cf6:	290a      	cmp	r1, #10
 8003cf8:	d103      	bne.n	8003d02 <__sfputc_r+0x1e>
 8003cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cfe:	f7ff bc29 	b.w	8003554 <__swbuf_r>
 8003d02:	6813      	ldr	r3, [r2, #0]
 8003d04:	1c58      	adds	r0, r3, #1
 8003d06:	6010      	str	r0, [r2, #0]
 8003d08:	7019      	strb	r1, [r3, #0]
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <__sfputs_r>:
 8003d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d14:	4606      	mov	r6, r0
 8003d16:	460f      	mov	r7, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	18d5      	adds	r5, r2, r3
 8003d1c:	42ac      	cmp	r4, r5
 8003d1e:	d101      	bne.n	8003d24 <__sfputs_r+0x12>
 8003d20:	2000      	movs	r0, #0
 8003d22:	e007      	b.n	8003d34 <__sfputs_r+0x22>
 8003d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d28:	463a      	mov	r2, r7
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff ffda 	bl	8003ce4 <__sfputc_r>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d1f3      	bne.n	8003d1c <__sfputs_r+0xa>
 8003d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d38 <_vfiprintf_r>:
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	460d      	mov	r5, r1
 8003d3e:	b09d      	sub	sp, #116	; 0x74
 8003d40:	4614      	mov	r4, r2
 8003d42:	4698      	mov	r8, r3
 8003d44:	4606      	mov	r6, r0
 8003d46:	b118      	cbz	r0, 8003d50 <_vfiprintf_r+0x18>
 8003d48:	6983      	ldr	r3, [r0, #24]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x18>
 8003d4c:	f7ff fddc 	bl	8003908 <__sinit>
 8003d50:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <_vfiprintf_r+0x240>)
 8003d52:	429d      	cmp	r5, r3
 8003d54:	d11b      	bne.n	8003d8e <_vfiprintf_r+0x56>
 8003d56:	6875      	ldr	r5, [r6, #4]
 8003d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5a:	07d9      	lsls	r1, r3, #31
 8003d5c:	d405      	bmi.n	8003d6a <_vfiprintf_r+0x32>
 8003d5e:	89ab      	ldrh	r3, [r5, #12]
 8003d60:	059a      	lsls	r2, r3, #22
 8003d62:	d402      	bmi.n	8003d6a <_vfiprintf_r+0x32>
 8003d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d66:	f7ff fe6d 	bl	8003a44 <__retarget_lock_acquire_recursive>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	d501      	bpl.n	8003d74 <_vfiprintf_r+0x3c>
 8003d70:	692b      	ldr	r3, [r5, #16]
 8003d72:	b9eb      	cbnz	r3, 8003db0 <_vfiprintf_r+0x78>
 8003d74:	4629      	mov	r1, r5
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7ff fc3e 	bl	80035f8 <__swsetup_r>
 8003d7c:	b1c0      	cbz	r0, 8003db0 <_vfiprintf_r+0x78>
 8003d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d80:	07dc      	lsls	r4, r3, #31
 8003d82:	d50e      	bpl.n	8003da2 <_vfiprintf_r+0x6a>
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	b01d      	add	sp, #116	; 0x74
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <_vfiprintf_r+0x244>)
 8003d90:	429d      	cmp	r5, r3
 8003d92:	d101      	bne.n	8003d98 <_vfiprintf_r+0x60>
 8003d94:	68b5      	ldr	r5, [r6, #8]
 8003d96:	e7df      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <_vfiprintf_r+0x248>)
 8003d9a:	429d      	cmp	r5, r3
 8003d9c:	bf08      	it	eq
 8003d9e:	68f5      	ldreq	r5, [r6, #12]
 8003da0:	e7da      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003da2:	89ab      	ldrh	r3, [r5, #12]
 8003da4:	0598      	lsls	r0, r3, #22
 8003da6:	d4ed      	bmi.n	8003d84 <_vfiprintf_r+0x4c>
 8003da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003daa:	f7ff fe4c 	bl	8003a46 <__retarget_lock_release_recursive>
 8003dae:	e7e9      	b.n	8003d84 <_vfiprintf_r+0x4c>
 8003db0:	2300      	movs	r3, #0
 8003db2:	9309      	str	r3, [sp, #36]	; 0x24
 8003db4:	2320      	movs	r3, #32
 8003db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dbe:	2330      	movs	r3, #48	; 0x30
 8003dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f84 <_vfiprintf_r+0x24c>
 8003dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dc8:	f04f 0901 	mov.w	r9, #1
 8003dcc:	4623      	mov	r3, r4
 8003dce:	469a      	mov	sl, r3
 8003dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd4:	b10a      	cbz	r2, 8003dda <_vfiprintf_r+0xa2>
 8003dd6:	2a25      	cmp	r2, #37	; 0x25
 8003dd8:	d1f9      	bne.n	8003dce <_vfiprintf_r+0x96>
 8003dda:	ebba 0b04 	subs.w	fp, sl, r4
 8003dde:	d00b      	beq.n	8003df8 <_vfiprintf_r+0xc0>
 8003de0:	465b      	mov	r3, fp
 8003de2:	4622      	mov	r2, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff ff93 	bl	8003d12 <__sfputs_r>
 8003dec:	3001      	adds	r0, #1
 8003dee:	f000 80aa 	beq.w	8003f46 <_vfiprintf_r+0x20e>
 8003df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003df4:	445a      	add	r2, fp
 8003df6:	9209      	str	r2, [sp, #36]	; 0x24
 8003df8:	f89a 3000 	ldrb.w	r3, [sl]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a2 	beq.w	8003f46 <_vfiprintf_r+0x20e>
 8003e02:	2300      	movs	r3, #0
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e0c:	f10a 0a01 	add.w	sl, sl, #1
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	9307      	str	r3, [sp, #28]
 8003e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e18:	931a      	str	r3, [sp, #104]	; 0x68
 8003e1a:	4654      	mov	r4, sl
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e22:	4858      	ldr	r0, [pc, #352]	; (8003f84 <_vfiprintf_r+0x24c>)
 8003e24:	f7fc fa0c 	bl	8000240 <memchr>
 8003e28:	9a04      	ldr	r2, [sp, #16]
 8003e2a:	b9d8      	cbnz	r0, 8003e64 <_vfiprintf_r+0x12c>
 8003e2c:	06d1      	lsls	r1, r2, #27
 8003e2e:	bf44      	itt	mi
 8003e30:	2320      	movmi	r3, #32
 8003e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e36:	0713      	lsls	r3, r2, #28
 8003e38:	bf44      	itt	mi
 8003e3a:	232b      	movmi	r3, #43	; 0x2b
 8003e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e40:	f89a 3000 	ldrb.w	r3, [sl]
 8003e44:	2b2a      	cmp	r3, #42	; 0x2a
 8003e46:	d015      	beq.n	8003e74 <_vfiprintf_r+0x13c>
 8003e48:	9a07      	ldr	r2, [sp, #28]
 8003e4a:	4654      	mov	r4, sl
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f04f 0c0a 	mov.w	ip, #10
 8003e52:	4621      	mov	r1, r4
 8003e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e58:	3b30      	subs	r3, #48	; 0x30
 8003e5a:	2b09      	cmp	r3, #9
 8003e5c:	d94e      	bls.n	8003efc <_vfiprintf_r+0x1c4>
 8003e5e:	b1b0      	cbz	r0, 8003e8e <_vfiprintf_r+0x156>
 8003e60:	9207      	str	r2, [sp, #28]
 8003e62:	e014      	b.n	8003e8e <_vfiprintf_r+0x156>
 8003e64:	eba0 0308 	sub.w	r3, r0, r8
 8003e68:	fa09 f303 	lsl.w	r3, r9, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	46a2      	mov	sl, r4
 8003e72:	e7d2      	b.n	8003e1a <_vfiprintf_r+0xe2>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	1d19      	adds	r1, r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	9103      	str	r1, [sp, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bfbb      	ittet	lt
 8003e80:	425b      	neglt	r3, r3
 8003e82:	f042 0202 	orrlt.w	r2, r2, #2
 8003e86:	9307      	strge	r3, [sp, #28]
 8003e88:	9307      	strlt	r3, [sp, #28]
 8003e8a:	bfb8      	it	lt
 8003e8c:	9204      	strlt	r2, [sp, #16]
 8003e8e:	7823      	ldrb	r3, [r4, #0]
 8003e90:	2b2e      	cmp	r3, #46	; 0x2e
 8003e92:	d10c      	bne.n	8003eae <_vfiprintf_r+0x176>
 8003e94:	7863      	ldrb	r3, [r4, #1]
 8003e96:	2b2a      	cmp	r3, #42	; 0x2a
 8003e98:	d135      	bne.n	8003f06 <_vfiprintf_r+0x1ce>
 8003e9a:	9b03      	ldr	r3, [sp, #12]
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	9203      	str	r2, [sp, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eaa:	3402      	adds	r4, #2
 8003eac:	9305      	str	r3, [sp, #20]
 8003eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f94 <_vfiprintf_r+0x25c>
 8003eb2:	7821      	ldrb	r1, [r4, #0]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f7fc f9c2 	bl	8000240 <memchr>
 8003ebc:	b140      	cbz	r0, 8003ed0 <_vfiprintf_r+0x198>
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	eba0 000a 	sub.w	r0, r0, sl
 8003ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ec8:	9b04      	ldr	r3, [sp, #16]
 8003eca:	4303      	orrs	r3, r0
 8003ecc:	3401      	adds	r4, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	482c      	ldr	r0, [pc, #176]	; (8003f88 <_vfiprintf_r+0x250>)
 8003ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eda:	2206      	movs	r2, #6
 8003edc:	f7fc f9b0 	bl	8000240 <memchr>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d03f      	beq.n	8003f64 <_vfiprintf_r+0x22c>
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <_vfiprintf_r+0x254>)
 8003ee6:	bb1b      	cbnz	r3, 8003f30 <_vfiprintf_r+0x1f8>
 8003ee8:	9b03      	ldr	r3, [sp, #12]
 8003eea:	3307      	adds	r3, #7
 8003eec:	f023 0307 	bic.w	r3, r3, #7
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef6:	443b      	add	r3, r7
 8003ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8003efa:	e767      	b.n	8003dcc <_vfiprintf_r+0x94>
 8003efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f00:	460c      	mov	r4, r1
 8003f02:	2001      	movs	r0, #1
 8003f04:	e7a5      	b.n	8003e52 <_vfiprintf_r+0x11a>
 8003f06:	2300      	movs	r3, #0
 8003f08:	3401      	adds	r4, #1
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f04f 0c0a 	mov.w	ip, #10
 8003f12:	4620      	mov	r0, r4
 8003f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f18:	3a30      	subs	r2, #48	; 0x30
 8003f1a:	2a09      	cmp	r2, #9
 8003f1c:	d903      	bls.n	8003f26 <_vfiprintf_r+0x1ee>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0c5      	beq.n	8003eae <_vfiprintf_r+0x176>
 8003f22:	9105      	str	r1, [sp, #20]
 8003f24:	e7c3      	b.n	8003eae <_vfiprintf_r+0x176>
 8003f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e7f0      	b.n	8003f12 <_vfiprintf_r+0x1da>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <_vfiprintf_r+0x258>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f3af 8000 	nop.w
 8003f40:	4607      	mov	r7, r0
 8003f42:	1c78      	adds	r0, r7, #1
 8003f44:	d1d6      	bne.n	8003ef4 <_vfiprintf_r+0x1bc>
 8003f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f48:	07d9      	lsls	r1, r3, #31
 8003f4a:	d405      	bmi.n	8003f58 <_vfiprintf_r+0x220>
 8003f4c:	89ab      	ldrh	r3, [r5, #12]
 8003f4e:	059a      	lsls	r2, r3, #22
 8003f50:	d402      	bmi.n	8003f58 <_vfiprintf_r+0x220>
 8003f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f54:	f7ff fd77 	bl	8003a46 <__retarget_lock_release_recursive>
 8003f58:	89ab      	ldrh	r3, [r5, #12]
 8003f5a:	065b      	lsls	r3, r3, #25
 8003f5c:	f53f af12 	bmi.w	8003d84 <_vfiprintf_r+0x4c>
 8003f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f62:	e711      	b.n	8003d88 <_vfiprintf_r+0x50>
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <_vfiprintf_r+0x258>)
 8003f6c:	a904      	add	r1, sp, #16
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 f880 	bl	8004074 <_printf_i>
 8003f74:	e7e4      	b.n	8003f40 <_vfiprintf_r+0x208>
 8003f76:	bf00      	nop
 8003f78:	08004690 	.word	0x08004690
 8003f7c:	080046b0 	.word	0x080046b0
 8003f80:	08004670 	.word	0x08004670
 8003f84:	080046d0 	.word	0x080046d0
 8003f88:	080046da 	.word	0x080046da
 8003f8c:	00000000 	.word	0x00000000
 8003f90:	08003d13 	.word	0x08003d13
 8003f94:	080046d6 	.word	0x080046d6

08003f98 <_printf_common>:
 8003f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	4699      	mov	r9, r3
 8003fa0:	688a      	ldr	r2, [r1, #8]
 8003fa2:	690b      	ldr	r3, [r1, #16]
 8003fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	bfb8      	it	lt
 8003fac:	4613      	movlt	r3, r2
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	b10a      	cbz	r2, 8003fbe <_printf_common+0x26>
 8003fba:	3301      	adds	r3, #1
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	0699      	lsls	r1, r3, #26
 8003fc2:	bf42      	ittt	mi
 8003fc4:	6833      	ldrmi	r3, [r6, #0]
 8003fc6:	3302      	addmi	r3, #2
 8003fc8:	6033      	strmi	r3, [r6, #0]
 8003fca:	6825      	ldr	r5, [r4, #0]
 8003fcc:	f015 0506 	ands.w	r5, r5, #6
 8003fd0:	d106      	bne.n	8003fe0 <_printf_common+0x48>
 8003fd2:	f104 0a19 	add.w	sl, r4, #25
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	6832      	ldr	r2, [r6, #0]
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	dc26      	bgt.n	800402e <_printf_common+0x96>
 8003fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe4:	1e13      	subs	r3, r2, #0
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	bf18      	it	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	0692      	lsls	r2, r2, #26
 8003fee:	d42b      	bmi.n	8004048 <_printf_common+0xb0>
 8003ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d01e      	beq.n	800403c <_printf_common+0xa4>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	68e5      	ldr	r5, [r4, #12]
 8004002:	6832      	ldr	r2, [r6, #0]
 8004004:	f003 0306 	and.w	r3, r3, #6
 8004008:	2b04      	cmp	r3, #4
 800400a:	bf08      	it	eq
 800400c:	1aad      	subeq	r5, r5, r2
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	6922      	ldr	r2, [r4, #16]
 8004012:	bf0c      	ite	eq
 8004014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004018:	2500      	movne	r5, #0
 800401a:	4293      	cmp	r3, r2
 800401c:	bfc4      	itt	gt
 800401e:	1a9b      	subgt	r3, r3, r2
 8004020:	18ed      	addgt	r5, r5, r3
 8004022:	2600      	movs	r6, #0
 8004024:	341a      	adds	r4, #26
 8004026:	42b5      	cmp	r5, r6
 8004028:	d11a      	bne.n	8004060 <_printf_common+0xc8>
 800402a:	2000      	movs	r0, #0
 800402c:	e008      	b.n	8004040 <_printf_common+0xa8>
 800402e:	2301      	movs	r3, #1
 8004030:	4652      	mov	r2, sl
 8004032:	4649      	mov	r1, r9
 8004034:	4638      	mov	r0, r7
 8004036:	47c0      	blx	r8
 8004038:	3001      	adds	r0, #1
 800403a:	d103      	bne.n	8004044 <_printf_common+0xac>
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	3501      	adds	r5, #1
 8004046:	e7c6      	b.n	8003fd6 <_printf_common+0x3e>
 8004048:	18e1      	adds	r1, r4, r3
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	2030      	movs	r0, #48	; 0x30
 800404e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004052:	4422      	add	r2, r4
 8004054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800405c:	3302      	adds	r3, #2
 800405e:	e7c7      	b.n	8003ff0 <_printf_common+0x58>
 8004060:	2301      	movs	r3, #1
 8004062:	4622      	mov	r2, r4
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d0e6      	beq.n	800403c <_printf_common+0xa4>
 800406e:	3601      	adds	r6, #1
 8004070:	e7d9      	b.n	8004026 <_printf_common+0x8e>
	...

08004074 <_printf_i>:
 8004074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	7e0f      	ldrb	r7, [r1, #24]
 800407a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800407c:	2f78      	cmp	r7, #120	; 0x78
 800407e:	4691      	mov	r9, r2
 8004080:	4680      	mov	r8, r0
 8004082:	460c      	mov	r4, r1
 8004084:	469a      	mov	sl, r3
 8004086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800408a:	d807      	bhi.n	800409c <_printf_i+0x28>
 800408c:	2f62      	cmp	r7, #98	; 0x62
 800408e:	d80a      	bhi.n	80040a6 <_printf_i+0x32>
 8004090:	2f00      	cmp	r7, #0
 8004092:	f000 80d8 	beq.w	8004246 <_printf_i+0x1d2>
 8004096:	2f58      	cmp	r7, #88	; 0x58
 8004098:	f000 80a3 	beq.w	80041e2 <_printf_i+0x16e>
 800409c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a4:	e03a      	b.n	800411c <_printf_i+0xa8>
 80040a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040aa:	2b15      	cmp	r3, #21
 80040ac:	d8f6      	bhi.n	800409c <_printf_i+0x28>
 80040ae:	a101      	add	r1, pc, #4	; (adr r1, 80040b4 <_printf_i+0x40>)
 80040b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	08004121 	.word	0x08004121
 80040bc:	0800409d 	.word	0x0800409d
 80040c0:	0800409d 	.word	0x0800409d
 80040c4:	0800409d 	.word	0x0800409d
 80040c8:	0800409d 	.word	0x0800409d
 80040cc:	08004121 	.word	0x08004121
 80040d0:	0800409d 	.word	0x0800409d
 80040d4:	0800409d 	.word	0x0800409d
 80040d8:	0800409d 	.word	0x0800409d
 80040dc:	0800409d 	.word	0x0800409d
 80040e0:	0800422d 	.word	0x0800422d
 80040e4:	08004151 	.word	0x08004151
 80040e8:	0800420f 	.word	0x0800420f
 80040ec:	0800409d 	.word	0x0800409d
 80040f0:	0800409d 	.word	0x0800409d
 80040f4:	0800424f 	.word	0x0800424f
 80040f8:	0800409d 	.word	0x0800409d
 80040fc:	08004151 	.word	0x08004151
 8004100:	0800409d 	.word	0x0800409d
 8004104:	0800409d 	.word	0x0800409d
 8004108:	08004217 	.word	0x08004217
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	602a      	str	r2, [r5, #0]
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800411c:	2301      	movs	r3, #1
 800411e:	e0a3      	b.n	8004268 <_printf_i+0x1f4>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	6829      	ldr	r1, [r5, #0]
 8004124:	0606      	lsls	r6, r0, #24
 8004126:	f101 0304 	add.w	r3, r1, #4
 800412a:	d50a      	bpl.n	8004142 <_printf_i+0xce>
 800412c:	680e      	ldr	r6, [r1, #0]
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	2e00      	cmp	r6, #0
 8004132:	da03      	bge.n	800413c <_printf_i+0xc8>
 8004134:	232d      	movs	r3, #45	; 0x2d
 8004136:	4276      	negs	r6, r6
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413c:	485e      	ldr	r0, [pc, #376]	; (80042b8 <_printf_i+0x244>)
 800413e:	230a      	movs	r3, #10
 8004140:	e019      	b.n	8004176 <_printf_i+0x102>
 8004142:	680e      	ldr	r6, [r1, #0]
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800414a:	bf18      	it	ne
 800414c:	b236      	sxthne	r6, r6
 800414e:	e7ef      	b.n	8004130 <_printf_i+0xbc>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	6029      	str	r1, [r5, #0]
 8004158:	0601      	lsls	r1, r0, #24
 800415a:	d501      	bpl.n	8004160 <_printf_i+0xec>
 800415c:	681e      	ldr	r6, [r3, #0]
 800415e:	e002      	b.n	8004166 <_printf_i+0xf2>
 8004160:	0646      	lsls	r6, r0, #25
 8004162:	d5fb      	bpl.n	800415c <_printf_i+0xe8>
 8004164:	881e      	ldrh	r6, [r3, #0]
 8004166:	4854      	ldr	r0, [pc, #336]	; (80042b8 <_printf_i+0x244>)
 8004168:	2f6f      	cmp	r7, #111	; 0x6f
 800416a:	bf0c      	ite	eq
 800416c:	2308      	moveq	r3, #8
 800416e:	230a      	movne	r3, #10
 8004170:	2100      	movs	r1, #0
 8004172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004176:	6865      	ldr	r5, [r4, #4]
 8004178:	60a5      	str	r5, [r4, #8]
 800417a:	2d00      	cmp	r5, #0
 800417c:	bfa2      	ittt	ge
 800417e:	6821      	ldrge	r1, [r4, #0]
 8004180:	f021 0104 	bicge.w	r1, r1, #4
 8004184:	6021      	strge	r1, [r4, #0]
 8004186:	b90e      	cbnz	r6, 800418c <_printf_i+0x118>
 8004188:	2d00      	cmp	r5, #0
 800418a:	d04d      	beq.n	8004228 <_printf_i+0x1b4>
 800418c:	4615      	mov	r5, r2
 800418e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004192:	fb03 6711 	mls	r7, r3, r1, r6
 8004196:	5dc7      	ldrb	r7, [r0, r7]
 8004198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800419c:	4637      	mov	r7, r6
 800419e:	42bb      	cmp	r3, r7
 80041a0:	460e      	mov	r6, r1
 80041a2:	d9f4      	bls.n	800418e <_printf_i+0x11a>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10b      	bne.n	80041c0 <_printf_i+0x14c>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	07de      	lsls	r6, r3, #31
 80041ac:	d508      	bpl.n	80041c0 <_printf_i+0x14c>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	6861      	ldr	r1, [r4, #4]
 80041b2:	4299      	cmp	r1, r3
 80041b4:	bfde      	ittt	le
 80041b6:	2330      	movle	r3, #48	; 0x30
 80041b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041c0:	1b52      	subs	r2, r2, r5
 80041c2:	6122      	str	r2, [r4, #16]
 80041c4:	f8cd a000 	str.w	sl, [sp]
 80041c8:	464b      	mov	r3, r9
 80041ca:	aa03      	add	r2, sp, #12
 80041cc:	4621      	mov	r1, r4
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7ff fee2 	bl	8003f98 <_printf_common>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d14c      	bne.n	8004272 <_printf_i+0x1fe>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	b004      	add	sp, #16
 80041de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e2:	4835      	ldr	r0, [pc, #212]	; (80042b8 <_printf_i+0x244>)
 80041e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041e8:	6829      	ldr	r1, [r5, #0]
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80041f0:	6029      	str	r1, [r5, #0]
 80041f2:	061d      	lsls	r5, r3, #24
 80041f4:	d514      	bpl.n	8004220 <_printf_i+0x1ac>
 80041f6:	07df      	lsls	r7, r3, #31
 80041f8:	bf44      	itt	mi
 80041fa:	f043 0320 	orrmi.w	r3, r3, #32
 80041fe:	6023      	strmi	r3, [r4, #0]
 8004200:	b91e      	cbnz	r6, 800420a <_printf_i+0x196>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f023 0320 	bic.w	r3, r3, #32
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	2310      	movs	r3, #16
 800420c:	e7b0      	b.n	8004170 <_printf_i+0xfc>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	2378      	movs	r3, #120	; 0x78
 8004218:	4828      	ldr	r0, [pc, #160]	; (80042bc <_printf_i+0x248>)
 800421a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800421e:	e7e3      	b.n	80041e8 <_printf_i+0x174>
 8004220:	0659      	lsls	r1, r3, #25
 8004222:	bf48      	it	mi
 8004224:	b2b6      	uxthmi	r6, r6
 8004226:	e7e6      	b.n	80041f6 <_printf_i+0x182>
 8004228:	4615      	mov	r5, r2
 800422a:	e7bb      	b.n	80041a4 <_printf_i+0x130>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	6826      	ldr	r6, [r4, #0]
 8004230:	6961      	ldr	r1, [r4, #20]
 8004232:	1d18      	adds	r0, r3, #4
 8004234:	6028      	str	r0, [r5, #0]
 8004236:	0635      	lsls	r5, r6, #24
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	d501      	bpl.n	8004240 <_printf_i+0x1cc>
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	e002      	b.n	8004246 <_printf_i+0x1d2>
 8004240:	0670      	lsls	r0, r6, #25
 8004242:	d5fb      	bpl.n	800423c <_printf_i+0x1c8>
 8004244:	8019      	strh	r1, [r3, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	4615      	mov	r5, r2
 800424c:	e7ba      	b.n	80041c4 <_printf_i+0x150>
 800424e:	682b      	ldr	r3, [r5, #0]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	602a      	str	r2, [r5, #0]
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	2100      	movs	r1, #0
 800425a:	4628      	mov	r0, r5
 800425c:	f7fb fff0 	bl	8000240 <memchr>
 8004260:	b108      	cbz	r0, 8004266 <_printf_i+0x1f2>
 8004262:	1b40      	subs	r0, r0, r5
 8004264:	6060      	str	r0, [r4, #4]
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	2300      	movs	r3, #0
 800426c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004270:	e7a8      	b.n	80041c4 <_printf_i+0x150>
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	462a      	mov	r2, r5
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	47d0      	blx	sl
 800427c:	3001      	adds	r0, #1
 800427e:	d0ab      	beq.n	80041d8 <_printf_i+0x164>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	079b      	lsls	r3, r3, #30
 8004284:	d413      	bmi.n	80042ae <_printf_i+0x23a>
 8004286:	68e0      	ldr	r0, [r4, #12]
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	4298      	cmp	r0, r3
 800428c:	bfb8      	it	lt
 800428e:	4618      	movlt	r0, r3
 8004290:	e7a4      	b.n	80041dc <_printf_i+0x168>
 8004292:	2301      	movs	r3, #1
 8004294:	4632      	mov	r2, r6
 8004296:	4649      	mov	r1, r9
 8004298:	4640      	mov	r0, r8
 800429a:	47d0      	blx	sl
 800429c:	3001      	adds	r0, #1
 800429e:	d09b      	beq.n	80041d8 <_printf_i+0x164>
 80042a0:	3501      	adds	r5, #1
 80042a2:	68e3      	ldr	r3, [r4, #12]
 80042a4:	9903      	ldr	r1, [sp, #12]
 80042a6:	1a5b      	subs	r3, r3, r1
 80042a8:	42ab      	cmp	r3, r5
 80042aa:	dcf2      	bgt.n	8004292 <_printf_i+0x21e>
 80042ac:	e7eb      	b.n	8004286 <_printf_i+0x212>
 80042ae:	2500      	movs	r5, #0
 80042b0:	f104 0619 	add.w	r6, r4, #25
 80042b4:	e7f5      	b.n	80042a2 <_printf_i+0x22e>
 80042b6:	bf00      	nop
 80042b8:	080046e1 	.word	0x080046e1
 80042bc:	080046f2 	.word	0x080046f2

080042c0 <_sbrk_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d06      	ldr	r5, [pc, #24]	; (80042dc <_sbrk_r+0x1c>)
 80042c4:	2300      	movs	r3, #0
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f7fc fce0 	bl	8000c90 <_sbrk>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_sbrk_r+0x1a>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_sbrk_r+0x1a>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	2000012c 	.word	0x2000012c

080042e0 <__sread>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	460c      	mov	r4, r1
 80042e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e8:	f000 f8a0 	bl	800442c <_read_r>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	bfab      	itete	ge
 80042f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042f2:	89a3      	ldrhlt	r3, [r4, #12]
 80042f4:	181b      	addge	r3, r3, r0
 80042f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042fa:	bfac      	ite	ge
 80042fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80042fe:	81a3      	strhlt	r3, [r4, #12]
 8004300:	bd10      	pop	{r4, pc}

08004302 <__swrite>:
 8004302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	461f      	mov	r7, r3
 8004308:	898b      	ldrh	r3, [r1, #12]
 800430a:	05db      	lsls	r3, r3, #23
 800430c:	4605      	mov	r5, r0
 800430e:	460c      	mov	r4, r1
 8004310:	4616      	mov	r6, r2
 8004312:	d505      	bpl.n	8004320 <__swrite+0x1e>
 8004314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004318:	2302      	movs	r3, #2
 800431a:	2200      	movs	r2, #0
 800431c:	f000 f868 	bl	80043f0 <_lseek_r>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	4632      	mov	r2, r6
 800432e:	463b      	mov	r3, r7
 8004330:	4628      	mov	r0, r5
 8004332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004336:	f000 b817 	b.w	8004368 <_write_r>

0800433a <__sseek>:
 800433a:	b510      	push	{r4, lr}
 800433c:	460c      	mov	r4, r1
 800433e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004342:	f000 f855 	bl	80043f0 <_lseek_r>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	bf15      	itete	ne
 800434c:	6560      	strne	r0, [r4, #84]	; 0x54
 800434e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004356:	81a3      	strheq	r3, [r4, #12]
 8004358:	bf18      	it	ne
 800435a:	81a3      	strhne	r3, [r4, #12]
 800435c:	bd10      	pop	{r4, pc}

0800435e <__sclose>:
 800435e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004362:	f000 b813 	b.w	800438c <_close_r>
	...

08004368 <_write_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4d07      	ldr	r5, [pc, #28]	; (8004388 <_write_r+0x20>)
 800436c:	4604      	mov	r4, r0
 800436e:	4608      	mov	r0, r1
 8004370:	4611      	mov	r1, r2
 8004372:	2200      	movs	r2, #0
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc fb44 	bl	8000a04 <_write>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_write_r+0x1e>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_write_r+0x1e>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	2000012c 	.word	0x2000012c

0800438c <_close_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d06      	ldr	r5, [pc, #24]	; (80043a8 <_close_r+0x1c>)
 8004390:	2300      	movs	r3, #0
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	f7fc fb60 	bl	8000a5c <_close>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_close_r+0x1a>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_close_r+0x1a>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	2000012c 	.word	0x2000012c

080043ac <_fstat_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4d07      	ldr	r5, [pc, #28]	; (80043cc <_fstat_r+0x20>)
 80043b0:	2300      	movs	r3, #0
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	f7fc fb9f 	bl	8000afc <_fstat>
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	d102      	bne.n	80043c8 <_fstat_r+0x1c>
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	b103      	cbz	r3, 80043c8 <_fstat_r+0x1c>
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	2000012c 	.word	0x2000012c

080043d0 <_isatty_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4d06      	ldr	r5, [pc, #24]	; (80043ec <_isatty_r+0x1c>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	f7fc fafc 	bl	80009d8 <_isatty>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_isatty_r+0x1a>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_isatty_r+0x1a>
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	2000012c 	.word	0x2000012c

080043f0 <_lseek_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4d07      	ldr	r5, [pc, #28]	; (8004410 <_lseek_r+0x20>)
 80043f4:	4604      	mov	r4, r0
 80043f6:	4608      	mov	r0, r1
 80043f8:	4611      	mov	r1, r2
 80043fa:	2200      	movs	r2, #0
 80043fc:	602a      	str	r2, [r5, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	f7fc fb43 	bl	8000a8a <_lseek>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_lseek_r+0x1e>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_lseek_r+0x1e>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	2000012c 	.word	0x2000012c

08004414 <__malloc_lock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_lock+0x8>)
 8004416:	f7ff bb15 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 800441a:	bf00      	nop
 800441c:	20000120 	.word	0x20000120

08004420 <__malloc_unlock>:
 8004420:	4801      	ldr	r0, [pc, #4]	; (8004428 <__malloc_unlock+0x8>)
 8004422:	f7ff bb10 	b.w	8003a46 <__retarget_lock_release_recursive>
 8004426:	bf00      	nop
 8004428:	20000120 	.word	0x20000120

0800442c <_read_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4d07      	ldr	r5, [pc, #28]	; (800444c <_read_r+0x20>)
 8004430:	4604      	mov	r4, r0
 8004432:	4608      	mov	r0, r1
 8004434:	4611      	mov	r1, r2
 8004436:	2200      	movs	r2, #0
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fc fb36 	bl	8000aac <_read>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_read_r+0x1e>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_read_r+0x1e>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	2000012c 	.word	0x2000012c

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
