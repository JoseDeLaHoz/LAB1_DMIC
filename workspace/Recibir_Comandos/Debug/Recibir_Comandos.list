
Recibir_Comandos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc8  0800fed8  0800fed8  0001fed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012aa0  08012aa0  000309bc  2**0
                  CONTENTS
  4 .ARM          00000008  08012aa0  08012aa0  00022aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012aa8  08012aa8  000309bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012aa8  08012aa8  00022aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ab0  08012ab0  00022ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  08012ab4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200009bc  08013470  000309bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08013470  00030b48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150ea  00000000  00000000  000309ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d8  00000000  00000000  00045ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000481b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  000492b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296e6  00000000  00000000  0004a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cd1  00000000  00000000  0007399e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe9b4  00000000  00000000  0008966f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006680  00000000  00000000  00188074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0018e6f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0018e730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009bc 	.word	0x200009bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800febc 	.word	0x0800febc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009c0 	.word	0x200009c0
 800023c:	0800febc 	.word	0x0800febc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <Saludo>:

/**
 *
 */

void Saludo(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	printf("\x1b[2J"); //Clear the screen
 80009e0:	4814      	ldr	r0, [pc, #80]	; (8000a34 <Saludo+0x58>)
 80009e2:	f005 fe0d 	bl	8006600 <printf>
	printf("\n\r***************************************************************");
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <Saludo+0x5c>)
 80009e8:	f005 fe0a 	bl	8006600 <printf>
	printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <Saludo+0x60>)
 80009ee:	f005 fe07 	bl	8006600 <printf>
	printf("\n\r*                    DMIC - B - 2022                          *");
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <Saludo+0x64>)
 80009f4:	f005 fe04 	bl	8006600 <printf>
	printf("\n\r*\t Jose De La Hoz                                       *");
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <Saludo+0x68>)
 80009fa:	f005 fe01 	bl	8006600 <printf>
	printf("\n\r*\t Jhan Carlos Reyes                                    *");
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <Saludo+0x6c>)
 8000a00:	f005 fdfe 	bl	8006600 <printf>
	printf("\n\r*\t Esneider Silva                                       *");
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Saludo+0x70>)
 8000a06:	f005 fdfb 	bl	8006600 <printf>
	printf("\n\r*\t\t'GENERADOR DE NUMEROS PSEUDOALEATORIO'        *");
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <Saludo+0x74>)
 8000a0c:	f005 fdf8 	bl	8006600 <printf>
	printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <Saludo+0x78>)
 8000a12:	f005 fdf5 	bl	8006600 <printf>
	printf("\n\r***************************************************************");
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <Saludo+0x5c>)
 8000a18:	f005 fdf2 	bl	8006600 <printf>
	printf("\r\n");
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <Saludo+0x7c>)
 8000a1e:	f005 fe47 	bl	80066b0 <puts>
	printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <Saludo+0x80>)
 8000a24:	f005 fdec 	bl	8006600 <printf>
	printf("\r\n");
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <Saludo+0x7c>)
 8000a2a:	f005 fe41 	bl	80066b0 <puts>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	0800fed8 	.word	0x0800fed8
 8000a38:	0800fee0 	.word	0x0800fee0
 8000a3c:	0800ff24 	.word	0x0800ff24
 8000a40:	0800ff68 	.word	0x0800ff68
 8000a44:	0800ffac 	.word	0x0800ffac
 8000a48:	0800ffe8 	.word	0x0800ffe8
 8000a4c:	08010024 	.word	0x08010024
 8000a50:	08010060 	.word	0x08010060
 8000a54:	08010098 	.word	0x08010098
 8000a58:	080100dc 	.word	0x080100dc
 8000a5c:	080100e0 	.word	0x080100e0

08000a60 <Help>:
    printf("\r\n");
    printf("\r\nDato ingresado invalido !!!");

}

void Help(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	printf("\n\rPara mÃ¡s informaciÃ³n de un comando especÃ­fico, escriba 'help <comando>'");
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <Help+0x40>)
 8000a66:	f005 fdcb 	bl	8006600 <printf>
	printf("\n\r Donde <comando> es uno de los siguientes:");
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <Help+0x44>)
 8000a6c:	f005 fdc8 	bl	8006600 <printf>
	printf("\n\r\t ledc");
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <Help+0x48>)
 8000a72:	f005 fdc5 	bl	8006600 <printf>
	printf("\n\r\t lfsr");
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <Help+0x4c>)
 8000a78:	f005 fdc2 	bl	8006600 <printf>
	printf("\n\r\t time");
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <Help+0x50>)
 8000a7e:	f005 fdbf 	bl	8006600 <printf>
	printf("\n\r\t temp");
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <Help+0x54>)
 8000a84:	f005 fdbc 	bl	8006600 <printf>
	printf("\n\r\t rege");
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <Help+0x58>)
 8000a8a:	f005 fdb9 	bl	8006600 <printf>
	printf("\n\r\t prin");
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <Help+0x5c>)
 8000a90:	f005 fdb6 	bl	8006600 <printf>
	printf("\r\n");
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <Help+0x60>)
 8000a96:	f005 fe0b 	bl	80066b0 <puts>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08010210 	.word	0x08010210
 8000aa4:	08010264 	.word	0x08010264
 8000aa8:	08010294 	.word	0x08010294
 8000aac:	080102a0 	.word	0x080102a0
 8000ab0:	080102ac 	.word	0x080102ac
 8000ab4:	080102b8 	.word	0x080102b8
 8000ab8:	080102c4 	.word	0x080102c4
 8000abc:	080102d0 	.word	0x080102d0
 8000ac0:	080100dc 	.word	0x080100dc

08000ac4 <H_Ledc>:

void H_Ledc(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	printf("\n\r Hace titilar un led a una velocidad configurable.");
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <H_Ledc+0x28>)
 8000aca:	f005 fd99 	bl	8006600 <printf>
	printf("\n\r ledcontrol <argumento>");
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <H_Ledc+0x2c>)
 8000ad0:	f005 fd96 	bl	8006600 <printf>
	printf("\n\r\t    argumento\t determina la frecuencia de encendido y apagado del led (0.1, 0.2,..., 1,.., 10) Hz");
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <H_Ledc+0x30>)
 8000ad6:	f005 fd93 	bl	8006600 <printf>
	printf("\n\r\t    los posibles valores del argumento estÃ¡n entre 1 y 100");
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <H_Ledc+0x34>)
 8000adc:	f005 fd90 	bl	8006600 <printf>
	printf("\r\n");
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <H_Ledc+0x38>)
 8000ae2:	f005 fde5 	bl	80066b0 <puts>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	080102dc 	.word	0x080102dc
 8000af0:	08010314 	.word	0x08010314
 8000af4:	08010330 	.word	0x08010330
 8000af8:	08010398 	.word	0x08010398
 8000afc:	080100dc 	.word	0x080100dc

08000b00 <H_Time>:




void H_Time(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	printf("\n\r Toma la fecha y hora del RTC y lo presenta en pantalla.");
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <H_Time+0x20>)
 8000b06:	f005 fd7b 	bl	8006600 <printf>
	printf("\n\r\t tiempo [vacio]");
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <H_Time+0x24>)
 8000b0c:	f005 fd78 	bl	8006600 <printf>
	printf("\n\r\t\t  este comando no requiere de un argumentos");
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <H_Time+0x28>)
 8000b12:	f005 fd75 	bl	8006600 <printf>
	printf("\r\n");
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <H_Time+0x2c>)
 8000b18:	f005 fdca 	bl	80066b0 <puts>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080103dc 	.word	0x080103dc
 8000b24:	08010418 	.word	0x08010418
 8000b28:	0801042c 	.word	0x0801042c
 8000b2c:	080100dc 	.word	0x080100dc

08000b30 <H_Temp>:

void H_Temp(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	printf("\n\r Toma la temperatura del perifÃ©rico de la tarjeta nÃºcleo y la presenta en la terminal.");
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <H_Temp+0x20>)
 8000b36:	f005 fd63 	bl	8006600 <printf>
	printf("\n\r\t temp [vacio]");
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <H_Temp+0x24>)
 8000b3c:	f005 fd60 	bl	8006600 <printf>
	printf("\n\r\t\t este comando no requiere de un argumentos");
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <H_Temp+0x28>)
 8000b42:	f005 fd5d 	bl	8006600 <printf>
	printf("\r\n");
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <H_Temp+0x2c>)
 8000b48:	f005 fdb2 	bl	80066b0 <puts>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	0801045c 	.word	0x0801045c
 8000b54:	080104bc 	.word	0x080104bc
 8000b58:	080104d0 	.word	0x080104d0
 8000b5c:	080100dc 	.word	0x080100dc

08000b60 <H_Rege>:

void H_Rege(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	printf("\n\r Permite gestionar los registros de ejecuciÃ³n almacenados en la memoria no volÃ¡til.");
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <H_Rege+0x2c>)
 8000b66:	f005 fd4b 	bl	8006600 <printf>
	printf("\n\r\t rege <argumento>");
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <H_Rege+0x30>)
 8000b6c:	f005 fd48 	bl	8006600 <printf>
	printf("\n\r\t\t    r  permite leer los datos guardados en los registros");
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <H_Rege+0x34>)
 8000b72:	f005 fd45 	bl	8006600 <printf>
	printf("\n\r\t\t    w  permite modificar o escribir por primera vez en los registros");
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <H_Rege+0x38>)
 8000b78:	f005 fd42 	bl	8006600 <printf>
	printf("\n\r\t\t    s  muestra el estado de los registros");
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <H_Rege+0x3c>)
 8000b7e:	f005 fd3f 	bl	8006600 <printf>
	printf("\r\n");
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <H_Rege+0x40>)
 8000b84:	f005 fd94 	bl	80066b0 <puts>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08010500 	.word	0x08010500
 8000b90:	0801055c 	.word	0x0801055c
 8000b94:	08010574 	.word	0x08010574
 8000b98:	080105b4 	.word	0x080105b4
 8000b9c:	08010600 	.word	0x08010600
 8000ba0:	080100dc 	.word	0x080100dc

08000ba4 <H_Prin>:

void H_Prin(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	printf("\n\r Permite determinar si durante la ejecuciÃ³n de al secuencia pseudoaleatoria se imprimen");
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <H_Prin+0x2c>)
 8000baa:	f005 fd29 	bl	8006600 <printf>
	printf("\n\r los nÃºmeros o solo se indica que se estÃ¡ corriendo la secuencia.");
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <H_Prin+0x30>)
 8000bb0:	f005 fd26 	bl	8006600 <printf>
	printf("\n\r\t impresion <argumento>");
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <H_Prin+0x34>)
 8000bb6:	f005 fd23 	bl	8006600 <printf>
	printf("\n\r\t\t    d deshabilita la impresiÃ³n de los nÃºmeros de la secuencia y emite una seÃ±al de ejecuciÃ³n");
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <H_Prin+0x38>)
 8000bbc:	f005 fd20 	bl	8006600 <printf>
	printf("\n\r\t\t    e  habilita la impresiÃ³n de los nÃºmeros de la secuencia");
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <H_Prin+0x3c>)
 8000bc2:	f005 fd1d 	bl	8006600 <printf>
	printf("\r\n");
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <H_Prin+0x40>)
 8000bc8:	f005 fd72 	bl	80066b0 <puts>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08010630 	.word	0x08010630
 8000bd4:	08010690 	.word	0x08010690
 8000bd8:	080106dc 	.word	0x080106dc
 8000bdc:	080106f8 	.word	0x080106f8
 8000be0:	08010768 	.word	0x08010768
 8000be4:	080100dc 	.word	0x080100dc

08000be8 <H_Lfsr>:

void H_Lfsr(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	printf("\n\r Genera una secuencia de números pseudoaleatorios.");
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <H_Lfsr+0x2c>)
 8000bee:	f005 fd07 	bl	8006600 <printf>
	printf("\n\r LFSR <argumento>");
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <H_Lfsr+0x30>)
 8000bf4:	f005 fd04 	bl	8006600 <printf>
	printf("\n\r\t argumento:\t permite escoger el algoritmo de generación de la secuencia de números");
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <H_Lfsr+0x34>)
 8000bfa:	f005 fd01 	bl	8006600 <printf>
	printf("\n\r\t\t x genera la secuencia de números con la técnica de XOR's");
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <H_Lfsr+0x38>)
 8000c00:	f005 fcfe 	bl	8006600 <printf>
	printf("\n\r\t\t p genera la secuencia de números con la técnica dada por la página");
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <H_Lfsr+0x3c>)
 8000c06:	f005 fcfb 	bl	8006600 <printf>
	printf("\r\n");
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <H_Lfsr+0x40>)
 8000c0c:	f005 fd50 	bl	80066b0 <puts>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	080107b0 	.word	0x080107b0
 8000c18:	080107e8 	.word	0x080107e8
 8000c1c:	080107fc 	.word	0x080107fc
 8000c20:	08010854 	.word	0x08010854
 8000c24:	08010894 	.word	0x08010894
 8000c28:	080100dc 	.word	0x080100dc

08000c2c <Lfsr>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Lfsr(void){
 8000c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c30:	ed2d 8b02 	vpush	{d8}
 8000c34:	b0e2      	sub	sp, #392	; 0x188
 8000c36:	af00      	add	r7, sp, #0

				char buf_lfsr[10];
				uint8_t receive[32] = { 0 }; // Arreglo para recibir
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000c3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]
				uint8_t seed[32] = { 0 };	//Arreglo semilla
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]
				uint8_t seed_init[32] = { 0 }; //Arreglo semilla inicial
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]
				uint8_t pol[32] = { 0 }; // Almacenar polinomio
 8000c86:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000c8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	3304      	adds	r3, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]
				uint8_t aux[32] = { 0 }; // Auxiliar para invertir
 8000ca4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000ca8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]
				uint8_t xor[32] = { 0 }; // Almacena las xor
 8000cc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000cc6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]
				uint8_t buffer_lfsr[16]={0};	//Transmitir
 8000ce0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000ce4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
				uint8_t band = 1;		//bandera de ciclo max
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
				uint8_t tx_int[2]={0};
 8000cfc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000d00:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000d04:	2200      	movs	r2, #0
 8000d06:	801a      	strh	r2, [r3, #0]
				uint8_t buf_int[2]={0};
 8000d08:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000d0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]




				//Mensaje de saludo
				Saludo();
 8000d14:	f7ff fe62 	bl	80009dc <Saludo>

				//Etiqueta para reiniciar

				printf("\n\rNumero de bits termino de realimentacion\n\r");
 8000d18:	48dc      	ldr	r0, [pc, #880]	; (800108c <Lfsr+0x460>)
 8000d1a:	f005 fc71 	bl	8006600 <printf>
				scanf("%s", buf_lfsr);
 8000d1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d22:	4619      	mov	r1, r3
 8000d24:	48da      	ldr	r0, [pc, #872]	; (8001090 <Lfsr+0x464>)
 8000d26:	f005 fccb 	bl	80066c0 <scanf>
				int numbits = atoi(buf_lfsr);
 8000d2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fc05 	bl	800653e <atoi>
 8000d34:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
				printf("\n\rNumero de bits - Decimals: %d\n\r", numbits);
 8000d38:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000d3c:	48d5      	ldr	r0, [pc, #852]	; (8001094 <Lfsr+0x468>)
 8000d3e:	f005 fc5f 	bl	8006600 <printf>

				printf("\n\rIngrese el polinomio de %d bits en binario\n\r", numbits);
 8000d42:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000d46:	48d4      	ldr	r0, [pc, #848]	; (8001098 <Lfsr+0x46c>)
 8000d48:	f005 fc5a 	bl	8006600 <printf>
				if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits,
 8000d4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	48d0      	ldr	r0, [pc, #832]	; (800109c <Lfsr+0x470>)
 8000d5c:	f004 fb5b 	bl	8005416 <HAL_UART_Receive>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11f      	bne.n	8000da6 <Lfsr+0x17a>
						HAL_MAX_DELAY)) {

					for (int i = 0; (i < numbits); i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d6c:	e015      	b.n	8000d9a <Lfsr+0x16e>
						pol[i] = (receive[i] - 48);
 8000d6e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000d72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3b30      	subs	r3, #48	; 0x30
 8000d7c:	b2d9      	uxtb	r1, r3
 8000d7e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000d82:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8000d86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d8a:	4413      	add	r3, r2
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
					for (int i = 0; (i < numbits); i++) {
 8000d90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d94:	3301      	adds	r3, #1
 8000d96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d9a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000d9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dbe3      	blt.n	8000d6e <Lfsr+0x142>
				}


				///////////

			printf("\n\rIngrese el numero de la semilla de %d bits en binario\n\r",
 8000da6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000daa:	48bd      	ldr	r0, [pc, #756]	; (80010a0 <Lfsr+0x474>)
 8000dac:	f005 fc28 	bl	8006600 <printf>
					numbits);
			if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits, HAL_MAX_DELAY)) {
 8000db0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	48b7      	ldr	r0, [pc, #732]	; (800109c <Lfsr+0x470>)
 8000dc0:	f004 fb29 	bl	8005416 <HAL_UART_Receive>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8135 	bne.w	8001036 <Lfsr+0x40a>

				//Recibe una semilla del tamaño de bits anteriormente especificado en binario
				for (int i = 0; (i < numbits); i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000dd2:	e020      	b.n	8000e16 <Lfsr+0x1ea>
					seed[i] = (receive[i] - 48);
 8000dd4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000dd8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3b30      	subs	r3, #48	; 0x30
 8000de2:	b2d9      	uxtb	r1, r3
 8000de4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000de8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000dec:	4413      	add	r3, r2
 8000dee:	460a      	mov	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
					seed_init[i] = seed[i];
 8000df2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000df6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000dfa:	4413      	add	r3, r2
 8000dfc:	7819      	ldrb	r1, [r3, #0]
 8000dfe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e02:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000e06:	4413      	add	r3, r2
 8000e08:	460a      	mov	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; (i < numbits); i++) {
 8000e0c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000e10:	3301      	adds	r3, #1
 8000e12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e16:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dbd8      	blt.n	8000dd4 <Lfsr+0x1a8>
				}
				band = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
				//Convertir de arreglo a byte
				uint64_t usr = 0;
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
				for (int i = 0; (i < numbits); i++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000e3a:	e032      	b.n	8000ea2 <Lfsr+0x276>
					usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 8000e3c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8000e40:	f7ff fbdc 	bl	80005fc <__aeabi_ul2d>
 8000e44:	ec41 0b18 	vmov	d8, r0, r1
 8000e48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e5c:	eeb0 1b47 	vmov.f64	d1, d7
 8000e60:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000e64:	f00e fd54 	bl	800f910 <pow>
 8000e68:	eeb0 6b40 	vmov.f64	d6, d0
 8000e6c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e84:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e88:	ec51 0b17 	vmov	r0, r1, d7
 8000e8c:	f7ff fc1c 	bl	80006c8 <__aeabi_d2ulz>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
				for (int i = 0; (i < numbits); i++) {
 8000e98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000ea2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbc6      	blt.n	8000e3c <Lfsr+0x210>
				}

				uint64_t taps = 0;
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
				for (int i = 0; (i < numbits); i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8000ec0:	e037      	b.n	8000f32 <Lfsr+0x306>
					taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 8000ec2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8000ec6:	f7ff fb99 	bl	80005fc <__aeabi_ul2d>
 8000eca:	ec41 0b18 	vmov	d8, r0, r1
 8000ece:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ee2:	eeb0 1b47 	vmov.f64	d1, d7
 8000ee6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000eea:	f00e fd11 	bl	800f910 <pow>
 8000eee:	eeb0 6b40 	vmov.f64	d6, d0
 8000ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000f02:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f14:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f18:	ec51 0b17 	vmov	r0, r1, d7
 8000f1c:	f7ff fbd4 	bl	80006c8 <__aeabi_d2ulz>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
				for (int i = 0; (i < numbits); i++) {
 8000f28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8000f32:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbc1      	blt.n	8000ec2 <Lfsr+0x296>
				}


				printf("\n\r\n\r***************************************************************");
 8000f3e:	4859      	ldr	r0, [pc, #356]	; (80010a4 <Lfsr+0x478>)
 8000f40:	f005 fb5e 	bl	8006600 <printf>
				printf("\n\r\t*\t RESUMEN INICIAL DE LA SECUENCIA \t*\n\r");
 8000f44:	4858      	ldr	r0, [pc, #352]	; (80010a8 <Lfsr+0x47c>)
 8000f46:	f005 fb5b 	bl	8006600 <printf>
				printf("***************************************************************");
 8000f4a:	4858      	ldr	r0, [pc, #352]	; (80010ac <Lfsr+0x480>)
 8000f4c:	f005 fb58 	bl	8006600 <printf>
				printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000f50:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000f54:	4856      	ldr	r0, [pc, #344]	; (80010b0 <Lfsr+0x484>)
 8000f56:	f005 fb53 	bl	8006600 <printf>
				printf("Funcion de realimentacion: BIN ");
 8000f5a:	4856      	ldr	r0, [pc, #344]	; (80010b4 <Lfsr+0x488>)
 8000f5c:	f005 fb50 	bl	8006600 <printf>

				printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000f60:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000f64:	4852      	ldr	r0, [pc, #328]	; (80010b0 <Lfsr+0x484>)
 8000f66:	f005 fb4b 	bl	8006600 <printf>
				printf("Funcion de realimentacion; ");
 8000f6a:	4853      	ldr	r0, [pc, #332]	; (80010b8 <Lfsr+0x48c>)
 8000f6c:	f005 fb48 	bl	8006600 <printf>
				itoa(taps, (char*) buffer_lfsr, 2);
 8000f70:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f74:	f107 011c 	add.w	r1, r7, #28
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fb26 	bl	80065cc <itoa>
				printf("%s", buffer_lfsr);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4842      	ldr	r0, [pc, #264]	; (8001090 <Lfsr+0x464>)
 8000f88:	f005 fb3a 	bl	8006600 <printf>
				printf(" - ");
 8000f8c:	484b      	ldr	r0, [pc, #300]	; (80010bc <Lfsr+0x490>)
 8000f8e:	f005 fb37 	bl	8006600 <printf>
				itoa(taps, (char*) buffer_lfsr, 16);
 8000f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f96:	f107 011c 	add.w	r1, r7, #28
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 fb15 	bl	80065cc <itoa>
				printf("%s", buffer_lfsr);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4839      	ldr	r0, [pc, #228]	; (8001090 <Lfsr+0x464>)
 8000faa:	f005 fb29 	bl	8006600 <printf>

				printf("\n\rValor inicial - Semilla : ");
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <Lfsr+0x494>)
 8000fb0:	f005 fb26 	bl	8006600 <printf>
				itoa(usr, (char*) buffer_lfsr, 2);
 8000fb4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000fb8:	f107 011c 	add.w	r1, r7, #28
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fb04 	bl	80065cc <itoa>
				printf("%s", buffer_lfsr);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4831      	ldr	r0, [pc, #196]	; (8001090 <Lfsr+0x464>)
 8000fcc:	f005 fb18 	bl	8006600 <printf>
				printf(" - ");
 8000fd0:	483a      	ldr	r0, [pc, #232]	; (80010bc <Lfsr+0x490>)
 8000fd2:	f005 fb15 	bl	8006600 <printf>
				itoa(usr, (char*) buffer_lfsr, 16);
 8000fd6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000fda:	f107 011c 	add.w	r1, r7, #28
 8000fde:	2210      	movs	r2, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 faf3 	bl	80065cc <itoa>
				printf("%s", buffer_lfsr);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <Lfsr+0x464>)
 8000fee:	f005 fb07 	bl	8006600 <printf>

				uint64_t a = pow(2,numbits)-1;
 8000ff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ffe:	eeb0 1b47 	vmov.f64	d1, d7
 8001002:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001006:	f00e fc83 	bl	800f910 <pow>
 800100a:	eeb0 7b40 	vmov.f64	d7, d0
 800100e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001012:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001016:	ec51 0b17 	vmov	r0, r1, d7
 800101a:	f7ff fb55 	bl	80006c8 <__aeabi_d2ulz>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
				printf("\n\rTotal de numeros esperados en la secuencia: %llu ", a);
 8001026:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800102a:	4826      	ldr	r0, [pc, #152]	; (80010c4 <Lfsr+0x498>)
 800102c:	f005 fae8 	bl	8006600 <printf>
				printf("\r\n");
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <Lfsr+0x49c>)
 8001032:	f005 fb3d 	bl	80066b0 <puts>

			}

			printf("\n\r");
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <Lfsr+0x4a0>)
 8001038:	f005 fae2 	bl	8006600 <printf>
			//////////////////////////////////////////////////////
			//Invertir el polinomio de acuerdo con los parámetros establecidos
				for (int w = 0; w < numbits; w++) {
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001042:	e018      	b.n	8001076 <Lfsr+0x44a>
					aux[w] = pol[numbits - 1 - w];
 8001044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001054:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001058:	5cd1      	ldrb	r1, [r2, r3]
 800105a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800105e:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001062:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001066:	4413      	add	r3, r2
 8001068:	460a      	mov	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
				for (int w = 0; w < numbits; w++) {
 800106c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001076:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800107a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800107e:	429a      	cmp	r2, r3
 8001080:	dbe0      	blt.n	8001044 <Lfsr+0x418>
				}

				for (int w = 0; w < numbits; w++) {
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001088:	e038      	b.n	80010fc <Lfsr+0x4d0>
 800108a:	bf00      	nop
 800108c:	080108e0 	.word	0x080108e0
 8001090:	08010910 	.word	0x08010910
 8001094:	08010914 	.word	0x08010914
 8001098:	08010938 	.word	0x08010938
 800109c:	20000a78 	.word	0x20000a78
 80010a0:	08010968 	.word	0x08010968
 80010a4:	080109a4 	.word	0x080109a4
 80010a8:	080109e8 	.word	0x080109e8
 80010ac:	08010a14 	.word	0x08010a14
 80010b0:	08010a54 	.word	0x08010a54
 80010b4:	08010a88 	.word	0x08010a88
 80010b8:	08010aa8 	.word	0x08010aa8
 80010bc:	08010ac4 	.word	0x08010ac4
 80010c0:	08010ac8 	.word	0x08010ac8
 80010c4:	08010ae8 	.word	0x08010ae8
 80010c8:	08010b1c 	.word	0x08010b1c
 80010cc:	08010b20 	.word	0x08010b20
					pol[w] = aux[w];
 80010d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80010d4:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80010d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010dc:	4413      	add	r3, r2
 80010de:	7819      	ldrb	r1, [r3, #0]
 80010e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80010e4:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80010e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010ec:	4413      	add	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
				for (int w = 0; w < numbits; w++) {
 80010f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010f6:	3301      	adds	r3, #1
 80010f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010fc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001100:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001104:	429a      	cmp	r2, r3
 8001106:	dbe3      	blt.n	80010d0 <Lfsr+0x4a4>
				}

			uint64_t k = 0;
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			while (k < pow(2, numbits)) {
 8001114:	e170      	b.n	80013f8 <Lfsr+0x7cc>



				for (int i = 0; (i < numbits); i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800111c:	e027      	b.n	800116e <Lfsr+0x542>
					if (pol[i] == 1) {
 800111e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001122:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8001126:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10f      	bne.n	8001152 <Lfsr+0x526>
						xor[i] = seed[i];
 8001132:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001136:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800113a:	4413      	add	r3, r2
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001142:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8001146:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800114a:	4413      	add	r3, r2
 800114c:	460a      	mov	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e008      	b.n	8001164 <Lfsr+0x538>
					} else {
						xor[i] = 0;
 8001152:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001156:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800115a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800115e:	4413      	add	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
				for (int i = 0; (i < numbits); i++) {
 8001164:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001168:	3301      	adds	r3, #1
 800116a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800116e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001176:	429a      	cmp	r2, r3
 8001178:	dbd1      	blt.n	800111e <Lfsr+0x4f2>
				}
				////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////////////////////////////
				//Determinar cuantos 1's tiene
				uint64_t res = 0;
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
				for (int i = 0; (i < numbits); i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800118c:	e018      	b.n	80011c0 <Lfsr+0x594>
					res = res + xor[i];
 800118e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001192:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8001196:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	4698      	mov	r8, r3
 80011a4:	4691      	mov	r9, r2
 80011a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80011aa:	eb12 0a08 	adds.w	sl, r2, r8
 80011ae:	eb43 0b09 	adc.w	fp, r3, r9
 80011b2:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
				for (int i = 0; (i < numbits); i++) {
 80011b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80011c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80011c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbe0      	blt.n	800118e <Lfsr+0x562>
				// Función utilizada en DEBUGG
				// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

				////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

				if (res % 2 == 0) {
 80011cc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80011d0:	f002 0401 	and.w	r4, r2, #1
 80011d4:	2500      	movs	r5, #0
 80011d6:	ea54 0305 	orrs.w	r3, r4, r5
 80011da:	d106      	bne.n	80011ea <Lfsr+0x5be>
					res = 0;
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 80011e8:	e005      	b.n	80011f6 <Lfsr+0x5ca>
				} else {
					res = 1;
 80011ea:	f04f 0201 	mov.w	r2, #1
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
				}
				///////////////////////////////////////////////
				// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);

				///mover y poner el valor xor en la cabeza
				for (int i = numbits - 1; i > 0; i--) {
 80011f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001200:	e015      	b.n	800122e <Lfsr+0x602>
					seed[i] = seed[i - 1];
 8001202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001206:	3b01      	subs	r3, #1
 8001208:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	4413      	add	r3, r2
 8001212:	f813 1cdc 	ldrb.w	r1, [r3, #-220]
 8001216:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800121a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
				for (int i = numbits - 1; i > 0; i--) {
 8001224:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001228:	3b01      	subs	r3, #1
 800122a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800122e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001232:	2b00      	cmp	r3, #0
 8001234:	dce5      	bgt.n	8001202 <Lfsr+0x5d6>
				}

				seed[0] = res;
 8001236:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800123a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

				uint64_t usr = 0;
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
				for (int i = 0; (i < numbits); i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001250:	e032      	b.n	80012b8 <Lfsr+0x68c>
					usr = usr + pow(2, ((numbits - 1) - i)) * seed[i];
 8001252:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001256:	f7ff f9d1 	bl	80005fc <__aeabi_ul2d>
 800125a:	ec41 0b18 	vmov	d8, r0, r1
 800125e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001272:	eeb0 1b47 	vmov.f64	d1, d7
 8001276:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800127a:	f00e fb49 	bl	800f910 <pow>
 800127e:	eeb0 6b40 	vmov.f64	d6, d0
 8001282:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001286:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001296:	ee26 7b07 	vmul.f64	d7, d6, d7
 800129a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800129e:	ec51 0b17 	vmov	r0, r1, d7
 80012a2:	f7ff fa11 	bl	80006c8 <__aeabi_d2ulz>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
				for (int i = 0; (i < numbits); i++) {
 80012ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012b2:	3301      	adds	r3, #1
 80012b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbc6      	blt.n	8001252 <Lfsr+0x626>


				//itoa(usr, (char*) buffer_lfsr, 16);
				//printf("\n\r%s", buffer_lfsr);

				if(HAL_GPIO_ReadPin (GPIOC, btn_Pin)){
 80012c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c8:	4888      	ldr	r0, [pc, #544]	; (80014ec <Lfsr+0x8c0>)
 80012ca:	f001 fded 	bl	8002ea8 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00e      	beq.n	80012f2 <Lfsr+0x6c6>
					printf("\n\r\n\r***************************************************************");
 80012d4:	4886      	ldr	r0, [pc, #536]	; (80014f0 <Lfsr+0x8c4>)
 80012d6:	f005 f993 	bl	8006600 <printf>
					printf("\n\r\t*\t DETENER LA SECUENCIA POR EL USUARIO\t*\n\r");
 80012da:	4886      	ldr	r0, [pc, #536]	; (80014f4 <Lfsr+0x8c8>)
 80012dc:	f005 f990 	bl	8006600 <printf>
					printf("***************************************************************");
 80012e0:	4885      	ldr	r0, [pc, #532]	; (80014f8 <Lfsr+0x8cc>)
 80012e2:	f005 f98d 	bl	8006600 <printf>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2101      	movs	r1, #1
 80012ea:	4884      	ldr	r0, [pc, #528]	; (80014fc <Lfsr+0x8d0>)
 80012ec:	f001 fdf4 	bl	8002ed8 <HAL_GPIO_WritePin>
					goto last;
 80012f0:	e09d      	b.n	800142e <Lfsr+0x802>
				}


				if (band == 1) {
 80012f2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d103      	bne.n	8001302 <Lfsr+0x6d6>
					band = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8001300:	e022      	b.n	8001348 <Lfsr+0x71c>
				} else {
					band = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
					for (int i = 0; i < numbits; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800130e:	e015      	b.n	800133c <Lfsr+0x710>
						if (seed[i] != seed_init[i]) {
 8001310:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001314:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001318:	4413      	add	r3, r2
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001320:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d002      	beq.n	8001332 <Lfsr+0x706>
							band = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
					for (int i = 0; i < numbits; i++) {
 8001332:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800133c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001340:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001344:	429a      	cmp	r2, r3
 8001346:	dbe3      	blt.n	8001310 <Lfsr+0x6e4>
						}
					}
				}

				if (band == 0) {
 8001348:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800134c:	2b00      	cmp	r3, #0
 800134e:	d124      	bne.n	800139a <Lfsr+0x76e>
					if (k == pow(2, numbits) - 2) {
 8001350:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001354:	f7ff f952 	bl	80005fc <__aeabi_ul2d>
 8001358:	ec41 0b18 	vmov	d8, r0, r1
 800135c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001368:	eeb0 1b47 	vmov.f64	d1, d7
 800136c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001370:	f00e face 	bl	800f910 <pow>
 8001374:	eeb0 7b40 	vmov.f64	d7, d0
 8001378:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800137c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001380:	eeb4 8b47 	vcmp.f64	d8, d7
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d103      	bne.n	8001392 <Lfsr+0x766>
						printf("\n\rMAXIMO\n\r");
 800138a:	485d      	ldr	r0, [pc, #372]	; (8001500 <Lfsr+0x8d4>)
 800138c:	f005 f938 	bl	8006600 <printf>
					} else {
						printf("\n\rNO MAX\n\r");
					}
					break;
 8001390:	e04d      	b.n	800142e <Lfsr+0x802>
						printf("\n\rNO MAX\n\r");
 8001392:	485c      	ldr	r0, [pc, #368]	; (8001504 <Lfsr+0x8d8>)
 8001394:	f005 f934 	bl	8006600 <printf>
					break;
 8001398:	e049      	b.n	800142e <Lfsr+0x802>
				}
				if (band == 2 && k== pow(2, numbits) - 1) {
 800139a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d11f      	bne.n	80013e2 <Lfsr+0x7b6>
 80013a2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80013a6:	f7ff f929 	bl	80005fc <__aeabi_ul2d>
 80013aa:	ec41 0b18 	vmov	d8, r0, r1
 80013ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013ba:	eeb0 1b47 	vmov.f64	d1, d7
 80013be:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80013c2:	f00e faa5 	bl	800f910 <pow>
 80013c6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013d2:	eeb4 8b47 	vcmp.f64	d8, d7
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d102      	bne.n	80013e2 <Lfsr+0x7b6>
					printf("\n\rNO MAX\n\r");
 80013dc:	4849      	ldr	r0, [pc, #292]	; (8001504 <Lfsr+0x8d8>)
 80013de:	f005 f90f 	bl	8006600 <printf>
				}
				k++;
 80013e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013e6:	1c51      	adds	r1, r2, #1
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	f143 0300 	adc.w	r3, r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			while (k < pow(2, numbits)) {
 80013f8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80013fc:	f7ff f8fe 	bl	80005fc <__aeabi_ul2d>
 8001400:	ec41 0b18 	vmov	d8, r0, r1
 8001404:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001410:	eeb0 1b47 	vmov.f64	d1, d7
 8001414:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001418:	f00e fa7a 	bl	800f910 <pow>
 800141c:	eeb0 7b40 	vmov.f64	d7, d0
 8001420:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	f53f ae75 	bmi.w	8001116 <Lfsr+0x4ea>
			}
			last:
 800142c:	bf00      	nop
			printf("\n\r\n\r***************************************************************");
 800142e:	4830      	ldr	r0, [pc, #192]	; (80014f0 <Lfsr+0x8c4>)
 8001430:	f005 f8e6 	bl	8006600 <printf>
			printf("\n\r\t*\t RESUMEN FINAL DE LA SECUENCIA \t*\n\r");
 8001434:	4834      	ldr	r0, [pc, #208]	; (8001508 <Lfsr+0x8dc>)
 8001436:	f005 f8e3 	bl	8006600 <printf>
			printf("***************************************************************");
 800143a:	482f      	ldr	r0, [pc, #188]	; (80014f8 <Lfsr+0x8cc>)
 800143c:	f005 f8e0 	bl	8006600 <printf>
			printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8001440:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001444:	4831      	ldr	r0, [pc, #196]	; (800150c <Lfsr+0x8e0>)
 8001446:	f005 f8db 	bl	8006600 <printf>
			printf("Funcion de realimentacion: BIN ");
 800144a:	4831      	ldr	r0, [pc, #196]	; (8001510 <Lfsr+0x8e4>)
 800144c:	f005 f8d8 	bl	8006600 <printf>

			uint64_t usr = 0;
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			for (int i = 0; (i < numbits); i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001462:	e032      	b.n	80014ca <Lfsr+0x89e>
				usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 8001464:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001468:	f7ff f8c8 	bl	80005fc <__aeabi_ul2d>
 800146c:	ec41 0b18 	vmov	d8, r0, r1
 8001470:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001484:	eeb0 1b47 	vmov.f64	d1, d7
 8001488:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800148c:	f00e fa40 	bl	800f910 <pow>
 8001490:	eeb0 6b40 	vmov.f64	d6, d0
 8001494:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014ac:	ee38 7b07 	vadd.f64	d7, d8, d7
 80014b0:	ec51 0b17 	vmov	r0, r1, d7
 80014b4:	f7ff f908 	bl	80006c8 <__aeabi_d2ulz>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			for (int i = 0; (i < numbits); i++) {
 80014c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbc6      	blt.n	8001464 <Lfsr+0x838>
			}

			uint64_t taps = 0;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			for (int i = 0; (i < numbits); i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e8:	e04c      	b.n	8001584 <Lfsr+0x958>
 80014ea:	bf00      	nop
 80014ec:	40020800 	.word	0x40020800
 80014f0:	080109a4 	.word	0x080109a4
 80014f4:	08010b24 	.word	0x08010b24
 80014f8:	08010a14 	.word	0x08010a14
 80014fc:	40020400 	.word	0x40020400
 8001500:	08010b54 	.word	0x08010b54
 8001504:	08010b60 	.word	0x08010b60
 8001508:	08010b6c 	.word	0x08010b6c
 800150c:	08010a54 	.word	0x08010a54
 8001510:	08010a88 	.word	0x08010a88
				taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 8001514:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001518:	f7ff f870 	bl	80005fc <__aeabi_ul2d>
 800151c:	ec41 0b18 	vmov	d8, r0, r1
 8001520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001534:	eeb0 1b47 	vmov.f64	d1, d7
 8001538:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800153c:	f00e f9e8 	bl	800f910 <pow>
 8001540:	eeb0 6b40 	vmov.f64	d6, d0
 8001544:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001554:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001562:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001566:	ee38 7b07 	vadd.f64	d7, d8, d7
 800156a:	ec51 0b17 	vmov	r0, r1, d7
 800156e:	f7ff f8ab 	bl	80006c8 <__aeabi_d2ulz>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			for (int i = 0; (i < numbits); i++) {
 800157a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800157e:	3301      	adds	r3, #1
 8001580:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001584:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001588:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800158c:	429a      	cmp	r2, r3
 800158e:	dbc1      	blt.n	8001514 <Lfsr+0x8e8>

				for (int w = 0; w < numbits; w++) {
					pol[w] = aux[w];
				}
			 */
			itoa(taps, (char*) buffer_lfsr, 2);
 8001590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001594:	f107 011c 	add.w	r1, r7, #28
 8001598:	2202      	movs	r2, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f005 f816 	bl	80065cc <itoa>
			printf("%s", buffer_lfsr);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4854      	ldr	r0, [pc, #336]	; (80016f8 <Lfsr+0xacc>)
 80015a8:	f005 f82a 	bl	8006600 <printf>
			printf(" - HEX ");
 80015ac:	4853      	ldr	r0, [pc, #332]	; (80016fc <Lfsr+0xad0>)
 80015ae:	f005 f827 	bl	8006600 <printf>
			itoa(taps, (char*) buffer_lfsr, 16);
 80015b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015b6:	f107 011c 	add.w	r1, r7, #28
 80015ba:	2210      	movs	r2, #16
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 f805 	bl	80065cc <itoa>
			printf("%s", buffer_lfsr);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	484b      	ldr	r0, [pc, #300]	; (80016f8 <Lfsr+0xacc>)
 80015ca:	f005 f819 	bl	8006600 <printf>

			printf("\n\rValor inicial - Semilla : ");
 80015ce:	484c      	ldr	r0, [pc, #304]	; (8001700 <Lfsr+0xad4>)
 80015d0:	f005 f816 	bl	8006600 <printf>
			itoa(usr, (char*) buffer_lfsr, 2);
 80015d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015d8:	f107 011c 	add.w	r1, r7, #28
 80015dc:	2202      	movs	r2, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fff4 	bl	80065cc <itoa>
			printf("%s", buffer_lfsr);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4843      	ldr	r0, [pc, #268]	; (80016f8 <Lfsr+0xacc>)
 80015ec:	f005 f808 	bl	8006600 <printf>
			printf(" - ");
 80015f0:	4844      	ldr	r0, [pc, #272]	; (8001704 <Lfsr+0xad8>)
 80015f2:	f005 f805 	bl	8006600 <printf>
			itoa(usr, (char*) buffer_lfsr, 16);
 80015f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015fa:	f107 011c 	add.w	r1, r7, #28
 80015fe:	2210      	movs	r2, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f004 ffe3 	bl	80065cc <itoa>
			printf("%s", buffer_lfsr);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	483a      	ldr	r0, [pc, #232]	; (80016f8 <Lfsr+0xacc>)
 800160e:	f004 fff7 	bl	8006600 <printf>


			printf("\n\rNumero de valores calculados en la secuencia: %llu ", k+1);
 8001612:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001616:	1c51      	adds	r1, r2, #1
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	f143 0300 	adc.w	r3, r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	4838      	ldr	r0, [pc, #224]	; (8001708 <Lfsr+0xadc>)
 8001626:	f004 ffeb 	bl	8006600 <printf>
			if (band == 0) {
 800162a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800162e:	2b00      	cmp	r3, #0
 8001630:	d12d      	bne.n	800168e <Lfsr+0xa62>
				if (k == pow(2, numbits) - 2) {
 8001632:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001636:	f7fe ffe1 	bl	80005fc <__aeabi_ul2d>
 800163a:	ec41 0b18 	vmov	d8, r0, r1
 800163e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164a:	eeb0 1b47 	vmov.f64	d1, d7
 800164e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001652:	f00e f95d 	bl	800f910 <pow>
 8001656:	eeb0 7b40 	vmov.f64	d7, d0
 800165a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800165e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001662:	eeb4 8b47 	vcmp.f64	d8, d7
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	d108      	bne.n	800167e <Lfsr+0xa52>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2101      	movs	r1, #1
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <Lfsr+0xae0>)
 8001672:	f001 fc31 	bl	8002ed8 <HAL_GPIO_WritePin>
					printf("\n\rMAXIMO\n\r");
 8001676:	4826      	ldr	r0, [pc, #152]	; (8001710 <Lfsr+0xae4>)
 8001678:	f004 ffc2 	bl	8006600 <printf>
 800167c:	e007      	b.n	800168e <Lfsr+0xa62>
				} else {
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	4822      	ldr	r0, [pc, #136]	; (800170c <Lfsr+0xae0>)
 8001684:	f001 fc28 	bl	8002ed8 <HAL_GPIO_WritePin>
					printf("\n\rNO MAX\n\r");
 8001688:	4822      	ldr	r0, [pc, #136]	; (8001714 <Lfsr+0xae8>)
 800168a:	f004 ffb9 	bl	8006600 <printf>
				}
			}
			if (band == 2 && k== pow(2, numbits) - 1) {
 800168e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001692:	2b02      	cmp	r3, #2
 8001694:	d124      	bne.n	80016e0 <Lfsr+0xab4>
 8001696:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800169a:	f7fe ffaf 	bl	80005fc <__aeabi_ul2d>
 800169e:	ec41 0b18 	vmov	d8, r0, r1
 80016a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016ae:	eeb0 1b47 	vmov.f64	d1, d7
 80016b2:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80016b6:	f00e f92b 	bl	800f910 <pow>
 80016ba:	eeb0 7b40 	vmov.f64	d7, d0
 80016be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80016c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016c6:	eeb4 8b47 	vcmp.f64	d8, d7
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d107      	bne.n	80016e0 <Lfsr+0xab4>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <Lfsr+0xae0>)
 80016d6:	f001 fbff 	bl	8002ed8 <HAL_GPIO_WritePin>
				printf("\n\rNO MAX\n\r");
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <Lfsr+0xae8>)
 80016dc:	f004 ff90 	bl	8006600 <printf>
			}
			printf("\n\r***************************************************************\n\r");
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <Lfsr+0xaec>)
 80016e2:	f004 ff8d 	bl	8006600 <printf>




			}
 80016e6:	bf00      	nop
 80016e8:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80016ec:	46bd      	mov	sp, r7
 80016ee:	ecbd 8b02 	vpop	{d8}
 80016f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f6:	bf00      	nop
 80016f8:	08010910 	.word	0x08010910
 80016fc:	08010b98 	.word	0x08010b98
 8001700:	08010ac8 	.word	0x08010ac8
 8001704:	08010ac4 	.word	0x08010ac4
 8001708:	08010ba0 	.word	0x08010ba0
 800170c:	40020400 	.word	0x40020400
 8001710:	08010b54 	.word	0x08010b54
 8001714:	08010b60 	.word	0x08010b60
 8001718:	08010bd8 	.word	0x08010bd8

0800171c <Temp>:


void Temp(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af02      	add	r7, sp, #8
	uint8_t bufe_tmp[] = "error\r\n";
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <Temp+0xf8>)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172c:	e883 0003 	stmia.w	r3, {r0, r1}

	   uint8_t buff_rx_tmp[2] = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	813b      	strh	r3, [r7, #8]
	   uint8_t buff_tx_tmp[2] = {0};
 8001734:	2300      	movs	r3, #0
 8001736:	80bb      	strh	r3, [r7, #4]
	   static const uint8_t ADDR_W = 0x90;
	   static const uint8_t POINTER_Temp = 0x00;
	   uint16_t val = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	83bb      	strh	r3, [r7, #28]
	   uint16_t a1 = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	837b      	strh	r3, [r7, #26]
	   uint16_t a0 = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	833b      	strh	r3, [r7, #24]
	   float temp;
	   HAL_StatusTypeDef ret;

	   buff_tx_tmp[0]= POINTER_Temp;
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <Temp+0xfc>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	713b      	strb	r3, [r7, #4]


		uint8_t buff_temp[4]={0};	//Transmitir
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]

		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx_tmp, 1, HAL_MAX_DELAY);
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <Temp+0x100>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b299      	uxth	r1, r3
 8001754:	1d3a      	adds	r2, r7, #4
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	4830      	ldr	r0, [pc, #192]	; (8001820 <Temp+0x104>)
 8001760:	f001 fc64 	bl	800302c <HAL_I2C_Master_Transmit>
 8001764:	4603      	mov	r3, r0
 8001766:	77fb      	strb	r3, [r7, #31]

					  if (ret == HAL_OK){
 8001768:	7ffb      	ldrb	r3, [r7, #31]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13e      	bne.n	80017ec <Temp+0xd0>

						  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_W, buff_rx_tmp, 2, HAL_MAX_DELAY);
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <Temp+0x100>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b299      	uxth	r1, r3
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2302      	movs	r3, #2
 8001780:	4827      	ldr	r0, [pc, #156]	; (8001820 <Temp+0x104>)
 8001782:	f001 fd47 	bl	8003214 <HAL_I2C_Master_Receive>
 8001786:	4603      	mov	r3, r0
 8001788:	77fb      	strb	r3, [r7, #31]

						  if(ret == HAL_OK){
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12d      	bne.n	80017ec <Temp+0xd0>

							  a1 = buff_rx_tmp[1];
 8001790:	7a7b      	ldrb	r3, [r7, #9]
 8001792:	837b      	strh	r3, [r7, #26]
							  a1 = (a1 >> 5);
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	837b      	strh	r3, [r7, #26]

							  a0 = buff_rx_tmp[0];
 800179a:	7a3b      	ldrb	r3, [r7, #8]
 800179c:	833b      	strh	r3, [r7, #24]
							  a0 = (a0 << 3);
 800179e:	8b3b      	ldrh	r3, [r7, #24]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	833b      	strh	r3, [r7, #24]

							  val = (a0 | a1);
 80017a4:	8b3a      	ldrh	r2, [r7, #24]
 80017a6:	8b7b      	ldrh	r3, [r7, #26]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	83bb      	strh	r3, [r7, #28]

							  temp = val*0.125;
 80017ac:	8bbb      	ldrh	r3, [r7, #28]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017b6:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 80017ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c2:	edc7 7a05 	vstr	s15, [r7, #20]


							  itoa(val, (char*) buff_temp, 10);
 80017c6:	8bbb      	ldrh	r3, [r7, #28]
 80017c8:	4639      	mov	r1, r7
 80017ca:	220a      	movs	r2, #10
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fefd 	bl	80065cc <itoa>


							  printf("%.6f\r\n", temp);
 80017d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017da:	ec53 2b17 	vmov	r2, r3, d7
 80017de:	4811      	ldr	r0, [pc, #68]	; (8001824 <Temp+0x108>)
 80017e0:	f004 ff0e 	bl	8006600 <printf>
							  HAL_Delay(500);
 80017e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e8:	f000 ffea 	bl	80027c0 <HAL_Delay>
						  }
					  }

					  if (ret != HAL_OK){
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <Temp+0xee>
						  HAL_UART_Transmit(&huart3, bufe_tmp, sizeof(bufe_tmp), HAL_MAX_DELAY);
 80017f2:	f107 010c 	add.w	r1, r7, #12
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	2208      	movs	r2, #8
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <Temp+0x10c>)
 80017fe:	f003 fd87 	bl	8005310 <HAL_UART_Transmit>
						  HAL_Delay(300);
 8001802:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001806:	f000 ffdb 	bl	80027c0 <HAL_Delay>
					  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	08010c24 	.word	0x08010c24
 8001818:	08010d05 	.word	0x08010d05
 800181c:	08010d06 	.word	0x08010d06
 8001820:	200009d8 	.word	0x200009d8
 8001824:	08010c1c 	.word	0x08010c1c
 8001828:	20000a78 	.word	0x20000a78

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0b6      	sub	sp, #216	; 0xd8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001832:	f000 ff68 	bl	8002706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001836:	f000 fb57 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183a:	f000 fc83 	bl	8002144 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800183e:	f000 fc51 	bl	80020e4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001842:	f000 fc01 	bl	8002048 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001846:	f000 fbbf 	bl	8001fc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	RetargetInit(&huart3);
 800184a:	48cb      	ldr	r0, [pc, #812]	; (8001b78 <main+0x34c>)
 800184c:	f000 fce6 	bl	800221c <RetargetInit>
  /* USER CODE BEGIN WHILE */




	uint8_t rx[2]={0};
 8001850:	2300      	movs	r3, #0
 8001852:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t buffin[100]={0};
 8001856:	2300      	movs	r3, #0
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
 800185a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800185e:	2260      	movs	r2, #96	; 0x60
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fec4 	bl	80065f0 <memset>

	char saludo[] = "jhan";
 8001868:	4ac4      	ldr	r2, [pc, #784]	; (8001b7c <main+0x350>)
 800186a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800186e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	3304      	adds	r3, #4
 8001876:	7019      	strb	r1, [r3, #0]
	char help[] = "help";
 8001878:	4ac1      	ldr	r2, [pc, #772]	; (8001b80 <main+0x354>)
 800187a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001882:	6018      	str	r0, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	7019      	strb	r1, [r3, #0]
	char temp[] = "temp";
 8001888:	4abe      	ldr	r2, [pc, #760]	; (8001b84 <main+0x358>)
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001892:	6018      	str	r0, [r3, #0]
 8001894:	3304      	adds	r3, #4
 8001896:	7019      	strb	r1, [r3, #0]
	char ledc[] = "ledc";
 8001898:	4abb      	ldr	r2, [pc, #748]	; (8001b88 <main+0x35c>)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a2:	6018      	str	r0, [r3, #0]
 80018a4:	3304      	adds	r3, #4
 80018a6:	7019      	strb	r1, [r3, #0]
	char lfsr[] = "lfsr";
 80018a8:	4ab8      	ldr	r2, [pc, #736]	; (8001b8c <main+0x360>)
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b2:	6018      	str	r0, [r3, #0]
 80018b4:	3304      	adds	r3, #4
 80018b6:	7019      	strb	r1, [r3, #0]
	char time[] = "time";
 80018b8:	4ab5      	ldr	r2, [pc, #724]	; (8001b90 <main+0x364>)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	6018      	str	r0, [r3, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	7019      	strb	r1, [r3, #0]
	char rege[] = "rege";
 80018c8:	4ab2      	ldr	r2, [pc, #712]	; (8001b94 <main+0x368>)
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d2:	6018      	str	r0, [r3, #0]
 80018d4:	3304      	adds	r3, #4
 80018d6:	7019      	strb	r1, [r3, #0]
	char prin[] = "prin";
 80018d8:	4aaf      	ldr	r2, [pc, #700]	; (8001b98 <main+0x36c>)
 80018da:	463b      	mov	r3, r7
 80018dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e0:	6018      	str	r0, [r3, #0]
 80018e2:	3304      	adds	r3, #4
 80018e4:	7019      	strb	r1, [r3, #0]

	uint8_t i = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	while (1)
	{

//////////////////////////RECIBIMOS EL TECLADO/////////////////////////
				while(rx[0] != 0x0A){
 80018ec:	e014      	b.n	8001918 <main+0xec>
					  HAL_UART_Receive(&huart3, rx, 1, HAL_MAX_DELAY);
 80018ee:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	2201      	movs	r2, #1
 80018f8:	489f      	ldr	r0, [pc, #636]	; (8001b78 <main+0x34c>)
 80018fa:	f003 fd8c 	bl	8005416 <HAL_UART_Receive>
					  buffin[i]=rx[0];
 80018fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001902:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001906:	33d8      	adds	r3, #216	; 0xd8
 8001908:	443b      	add	r3, r7
 800190a:	f803 2c98 	strb.w	r2, [r3, #-152]
					  i++;
 800190e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001912:	3301      	adds	r3, #1
 8001914:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				while(rx[0] != 0x0A){
 8001918:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800191c:	2b0a      	cmp	r3, #10
 800191e:	d1e6      	bne.n	80018ee <main+0xc2>
				  }
//////////////////////////TRANSMITIMOS LO QUE RECIBIMOS DEL TECLADO, SOLO PARA PROBAR, LUEGO SE QUITA//////
				  HAL_UART_Transmit(&huart3, buffin, i, HAL_MAX_DELAY);
 8001920:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001924:	b29a      	uxth	r2, r3
 8001926:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	4892      	ldr	r0, [pc, #584]	; (8001b78 <main+0x34c>)
 8001930:	f003 fcee 	bl	8005310 <HAL_UART_Transmit>
				  i=0;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				  rx[0]=0;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
//////////////////////DETERMINAMOS QUÉ COMANDO RECIBIMOS////////////////
				  /////FALTA PONER LA PARTE DE PROCESAR EL PAR�?METRO
				  ///// ES SOLO PARA TENER LISTA LA PARTE DE TERMINAR COMANDOS
				  if(!memcmp(buffin,saludo,strlen(saludo))){
 8001940:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc7b 	bl	8000240 <strlen>
 800194a:	4602      	mov	r2, r0
 800194c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001950:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fe3b 	bl	80065d0 <memcmp>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d12b      	bne.n	80019b8 <main+0x18c>

					  printf("es saludo\n\r");
 8001960:	488e      	ldr	r0, [pc, #568]	; (8001b9c <main+0x370>)
 8001962:	f004 fe4d 	bl	8006600 <printf>
					  printf(" %d\n",strlen(saludo));
 8001966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc68 	bl	8000240 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	488a      	ldr	r0, [pc, #552]	; (8001ba0 <main+0x374>)
 8001976:	f004 fe43 	bl	8006600 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 800197a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc5e 	bl	8000240 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	4619      	mov	r1, r3
 8001988:	4885      	ldr	r0, [pc, #532]	; (8001ba0 <main+0x374>)
 800198a:	f004 fe39 	bl	8006600 <printf>

					  for(int w = 0; w<sizeof(buffin); w++){
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001994:	e00b      	b.n	80019ae <main+0x182>
					 				  		  			  buffin[w]=0;}
 8001996:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800199a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 80019a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019a8:	3301      	adds	r3, #1
 80019aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80019ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019b2:	2b63      	cmp	r3, #99	; 0x63
 80019b4:	d9ef      	bls.n	8001996 <main+0x16a>
 80019b6:	e7af      	b.n	8001918 <main+0xec>
				  }


				  else if(!memcmp(buffin,help,strlen(help))){
 80019b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fc3f 	bl	8000240 <strlen>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80019c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fdff 	bl	80065d0 <memcmp>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 80a2 	bne.w	8001b1e <main+0x2f2>
					  printf("es help\n\r");
 80019da:	4872      	ldr	r0, [pc, #456]	; (8001ba4 <main+0x378>)
 80019dc:	f004 fe10 	bl	8006600 <printf>
					  printf(" %d\n",strlen(help));
 80019e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc2b 	bl	8000240 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	486c      	ldr	r0, [pc, #432]	; (8001ba0 <main+0x374>)
 80019f0:	f004 fe06 	bl	8006600 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 80019f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc21 	bl	8000240 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4867      	ldr	r0, [pc, #412]	; (8001ba0 <main+0x374>)
 8001a04:	f004 fdfc 	bl	8006600 <printf>


					  if((buffin[5]==0)&&(buffin[6]==0)){
 8001a08:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <main+0x1f0>
 8001a10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <main+0x1f0>
						  Help();
 8001a18:	f7ff f822 	bl	8000a60 <Help>
					  }

					  if((buffin[5]=='t')&&(buffin[6]==0x65)&&(buffin[7]==0x6d)&&(buffin[8]==0x70)){
 8001a1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a20:	2b74      	cmp	r3, #116	; 0x74
 8001a22:	d10d      	bne.n	8001a40 <main+0x214>
 8001a24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a28:	2b65      	cmp	r3, #101	; 0x65
 8001a2a:	d109      	bne.n	8001a40 <main+0x214>
 8001a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a30:	2b6d      	cmp	r3, #109	; 0x6d
 8001a32:	d105      	bne.n	8001a40 <main+0x214>
 8001a34:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a38:	2b70      	cmp	r3, #112	; 0x70
 8001a3a:	d101      	bne.n	8001a40 <main+0x214>
						  H_Temp();
 8001a3c:	f7ff f878 	bl	8000b30 <H_Temp>
					  }

					  if((buffin[5]=='l')&&(buffin[6]=='e')&&(buffin[7]=='d')&&(buffin[8]=='c')){
 8001a40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a44:	2b6c      	cmp	r3, #108	; 0x6c
 8001a46:	d10d      	bne.n	8001a64 <main+0x238>
 8001a48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a4c:	2b65      	cmp	r3, #101	; 0x65
 8001a4e:	d109      	bne.n	8001a64 <main+0x238>
 8001a50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d105      	bne.n	8001a64 <main+0x238>
 8001a58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a5c:	2b63      	cmp	r3, #99	; 0x63
 8001a5e:	d101      	bne.n	8001a64 <main+0x238>
						  H_Ledc();
 8001a60:	f7ff f830 	bl	8000ac4 <H_Ledc>
					  }

					  if((buffin[5]=='l')&&(buffin[6]=='f')&&(buffin[7]=='s')&&(buffin[8]=='r')){
 8001a64:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a68:	2b6c      	cmp	r3, #108	; 0x6c
 8001a6a:	d10d      	bne.n	8001a88 <main+0x25c>
 8001a6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a70:	2b66      	cmp	r3, #102	; 0x66
 8001a72:	d109      	bne.n	8001a88 <main+0x25c>
 8001a74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a78:	2b73      	cmp	r3, #115	; 0x73
 8001a7a:	d105      	bne.n	8001a88 <main+0x25c>
 8001a7c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a80:	2b72      	cmp	r3, #114	; 0x72
 8001a82:	d101      	bne.n	8001a88 <main+0x25c>
						  H_Lfsr();
 8001a84:	f7ff f8b0 	bl	8000be8 <H_Lfsr>
					  }

					  if((buffin[5]==0x74)&&(buffin[6]==0x69)&&(buffin[7]==0x6d)&&(buffin[8]==0x65)){
 8001a88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a8c:	2b74      	cmp	r3, #116	; 0x74
 8001a8e:	d10d      	bne.n	8001aac <main+0x280>
 8001a90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a94:	2b69      	cmp	r3, #105	; 0x69
 8001a96:	d109      	bne.n	8001aac <main+0x280>
 8001a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a9c:	2b6d      	cmp	r3, #109	; 0x6d
 8001a9e:	d105      	bne.n	8001aac <main+0x280>
 8001aa0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001aa4:	2b65      	cmp	r3, #101	; 0x65
 8001aa6:	d101      	bne.n	8001aac <main+0x280>
						  H_Time();
 8001aa8:	f7ff f82a 	bl	8000b00 <H_Time>
					  }

					  if((buffin[5]==0x72)&&(buffin[6]==0x65)&&(buffin[7]==0x67)&&(buffin[8]==0x65)){
 8001aac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ab0:	2b72      	cmp	r3, #114	; 0x72
 8001ab2:	d10d      	bne.n	8001ad0 <main+0x2a4>
 8001ab4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ab8:	2b65      	cmp	r3, #101	; 0x65
 8001aba:	d109      	bne.n	8001ad0 <main+0x2a4>
 8001abc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac0:	2b67      	cmp	r3, #103	; 0x67
 8001ac2:	d105      	bne.n	8001ad0 <main+0x2a4>
 8001ac4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ac8:	2b65      	cmp	r3, #101	; 0x65
 8001aca:	d101      	bne.n	8001ad0 <main+0x2a4>
						  H_Rege();
 8001acc:	f7ff f848 	bl	8000b60 <H_Rege>
					  }

					  if((buffin[5]==0x70)&&(buffin[6]==0x72)&&(buffin[7]==0x69)&&(buffin[8]==0x6e)){
 8001ad0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ad4:	2b70      	cmp	r3, #112	; 0x70
 8001ad6:	d10d      	bne.n	8001af4 <main+0x2c8>
 8001ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001adc:	2b72      	cmp	r3, #114	; 0x72
 8001ade:	d109      	bne.n	8001af4 <main+0x2c8>
 8001ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae4:	2b69      	cmp	r3, #105	; 0x69
 8001ae6:	d105      	bne.n	8001af4 <main+0x2c8>
 8001ae8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001aec:	2b6e      	cmp	r3, #110	; 0x6e
 8001aee:	d101      	bne.n	8001af4 <main+0x2c8>
						  H_Prin();
 8001af0:	f7ff f858 	bl	8000ba4 <H_Prin>





					  for(int w = 0; w<sizeof(buffin); w++){
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001afa:	e00b      	b.n	8001b14 <main+0x2e8>
					  					 			buffin[w]=0;}
 8001afc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b04:	4413      	add	r3, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b18:	2b63      	cmp	r3, #99	; 0x63
 8001b1a:	d9ef      	bls.n	8001afc <main+0x2d0>
 8001b1c:	e6fc      	b.n	8001918 <main+0xec>

				  }

				  else if(!memcmp(buffin,temp,strlen(temp))){
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb8c 	bl	8000240 <strlen>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fd4c 	bl	80065d0 <memcmp>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d147      	bne.n	8001bce <main+0x3a2>
					  printf("es temp\n\r");
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <main+0x37c>)
 8001b40:	f004 fd5e 	bl	8006600 <printf>
					  printf(" %d\n",strlen(temp));
 8001b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fb79 	bl	8000240 <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <main+0x374>)
 8001b54:	f004 fd54 	bl	8006600 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fb6f 	bl	8000240 <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <main+0x374>)
 8001b68:	f004 fd4a 	bl	8006600 <printf>

					  //PONER LA FUNCION PARA LEER TEMPERATURA, YA QUE AC�? NO SE RECIBE PAR�?METRO//
					  Temp();
 8001b6c:	f7ff fdd6 	bl	800171c <Temp>

					  for(int w = 0; w<sizeof(buffin); w++){
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b76:	e025      	b.n	8001bc4 <main+0x398>
 8001b78:	20000a78 	.word	0x20000a78
 8001b7c:	08010cc8 	.word	0x08010cc8
 8001b80:	08010cd0 	.word	0x08010cd0
 8001b84:	08010cd8 	.word	0x08010cd8
 8001b88:	08010ce0 	.word	0x08010ce0
 8001b8c:	08010ce8 	.word	0x08010ce8
 8001b90:	08010cf0 	.word	0x08010cf0
 8001b94:	08010cf8 	.word	0x08010cf8
 8001b98:	08010d00 	.word	0x08010d00
 8001b9c:	08010c2c 	.word	0x08010c2c
 8001ba0:	08010c38 	.word	0x08010c38
 8001ba4:	08010c40 	.word	0x08010c40
 8001ba8:	08010c4c 	.word	0x08010c4c
													buffin[w]=0;
 8001bac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bc8:	2b63      	cmp	r3, #99	; 0x63
 8001bca:	d9ef      	bls.n	8001bac <main+0x380>
 8001bcc:	e6a4      	b.n	8001918 <main+0xec>

					  }

				  }

				  else if(!memcmp(buffin,ledc,strlen(ledc))){
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fb34 	bl	8000240 <strlen>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f107 0120 	add.w	r1, r7, #32
 8001bde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 fcf4 	bl	80065d0 <memcmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d145      	bne.n	8001c7a <main+0x44e>
					  printf("es led\n\r");
 8001bee:	48b4      	ldr	r0, [pc, #720]	; (8001ec0 <main+0x694>)
 8001bf0:	f004 fd06 	bl	8006600 <printf>
					  printf(" %d\n",strlen(ledc));
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fb21 	bl	8000240 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	48b0      	ldr	r0, [pc, #704]	; (8001ec4 <main+0x698>)
 8001c04:	f004 fcfc 	bl	8006600 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001c08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fb17 	bl	8000240 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	48ab      	ldr	r0, [pc, #684]	; (8001ec4 <main+0x698>)
 8001c18:	f004 fcf2 	bl	8006600 <printf>

					  //PONER LA FUNCIÓN PARA CONFIGURAR LA FRECUANCIA DEL LED//


					  if((buffin[5]== 'o') && (buffin[6]== 'n')){
 8001c1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c20:	2b6f      	cmp	r3, #111	; 0x6f
 8001c22:	d108      	bne.n	8001c36 <main+0x40a>
 8001c24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c28:	2b6e      	cmp	r3, #110	; 0x6e
 8001c2a:	d104      	bne.n	8001c36 <main+0x40a>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2101      	movs	r1, #1
 8001c30:	48a5      	ldr	r0, [pc, #660]	; (8001ec8 <main+0x69c>)
 8001c32:	f001 f951 	bl	8002ed8 <HAL_GPIO_WritePin>
					  }

					  if((buffin[5] == 'o') && (buffin[6]=='f')){
 8001c36:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c3a:	2b6f      	cmp	r3, #111	; 0x6f
 8001c3c:	d108      	bne.n	8001c50 <main+0x424>
 8001c3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c42:	2b66      	cmp	r3, #102	; 0x66
 8001c44:	d104      	bne.n	8001c50 <main+0x424>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2101      	movs	r1, #1
 8001c4a:	489f      	ldr	r0, [pc, #636]	; (8001ec8 <main+0x69c>)
 8001c4c:	f001 f944 	bl	8002ed8 <HAL_GPIO_WritePin>
					  }


					  for(int w = 0; w<sizeof(buffin); w++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c56:	e00b      	b.n	8001c70 <main+0x444>
												buffin[w]=0;}
 8001c58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c60:	4413      	add	r3, r2
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c74:	2b63      	cmp	r3, #99	; 0x63
 8001c76:	d9ef      	bls.n	8001c58 <main+0x42c>
 8001c78:	e64e      	b.n	8001918 <main+0xec>
				  }




				  else if(!memcmp(buffin,lfsr,strlen(lfsr))){
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fade 	bl	8000240 <strlen>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f107 0118 	add.w	r1, r7, #24
 8001c8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fc9e 	bl	80065d0 <memcmp>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d138      	bne.n	8001d0c <main+0x4e0>
					  printf("es lfsr\n\r");
 8001c9a:	488c      	ldr	r0, [pc, #560]	; (8001ecc <main+0x6a0>)
 8001c9c:	f004 fcb0 	bl	8006600 <printf>
					  printf(" %d\n",strlen(lfsr));
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe facb 	bl	8000240 <strlen>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4885      	ldr	r0, [pc, #532]	; (8001ec4 <main+0x698>)
 8001cb0:	f004 fca6 	bl	8006600 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001cb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fac1 	bl	8000240 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4880      	ldr	r0, [pc, #512]	; (8001ec4 <main+0x698>)
 8001cc4:	f004 fc9c 	bl	8006600 <printf>

					  if(buffin[5]=='x'){
 8001cc8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ccc:	2b78      	cmp	r3, #120	; 0x78
 8001cce:	d101      	bne.n	8001cd4 <main+0x4a8>

						 Lfsr();
 8001cd0:	f7fe ffac 	bl	8000c2c <Lfsr>

					  }

					  if(buffin[5]=='p'){
 8001cd4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001cd8:	2b70      	cmp	r3, #112	; 0x70
 8001cda:	d102      	bne.n	8001ce2 <main+0x4b6>
						  printf("es lfsr con pagina\n\r");
 8001cdc:	487c      	ldr	r0, [pc, #496]	; (8001ed0 <main+0x6a4>)
 8001cde:	f004 fc8f 	bl	8006600 <printf>
					  }



					  for(int w = 0; w<sizeof(buffin); w++){
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ce8:	e00b      	b.n	8001d02 <main+0x4d6>
					  							buffin[w]=0;}
 8001cea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d06:	2b63      	cmp	r3, #99	; 0x63
 8001d08:	d9ef      	bls.n	8001cea <main+0x4be>
 8001d0a:	e605      	b.n	8001918 <main+0xec>

				  }



				  else if(!memcmp(buffin,time,strlen(time))){
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa95 	bl	8000240 <strlen>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f107 0110 	add.w	r1, r7, #16
 8001d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fc55 	bl	80065d0 <memcmp>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13c      	bne.n	8001da6 <main+0x57a>
					  	  uint64_t r =0;
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
					  	  r = pow(2,32);
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0301 	mov.w	r3, #1
 8001d40:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 		printf("es time\n\r");
 8001d44:	4863      	ldr	r0, [pc, #396]	; (8001ed4 <main+0x6a8>)
 8001d46:	f004 fc5b 	bl	8006600 <printf>
				 		printf(" %d\n",strlen(time));
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa76 	bl	8000240 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	485a      	ldr	r0, [pc, #360]	; (8001ec4 <main+0x698>)
 8001d5a:	f004 fc51 	bl	8006600 <printf>
				 		printf(" %d\n",strlen((char*)buffin));
 8001d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa6c 	bl	8000240 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4855      	ldr	r0, [pc, #340]	; (8001ec4 <main+0x698>)
 8001d6e:	f004 fc47 	bl	8006600 <printf>
				 		printf(" %llu",r);
 8001d72:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001d76:	4858      	ldr	r0, [pc, #352]	; (8001ed8 <main+0x6ac>)
 8001d78:	f004 fc42 	bl	8006600 <printf>



				 		for(int w = 0; w<sizeof(buffin); w++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d82:	e00b      	b.n	8001d9c <main+0x570>
				 					  			buffin[w]=0;}
 8001d84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
				 		for(int w = 0; w<sizeof(buffin); w++){
 8001d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001da0:	2b63      	cmp	r3, #99	; 0x63
 8001da2:	d9ef      	bls.n	8001d84 <main+0x558>
 8001da4:	e5b8      	b.n	8001918 <main+0xec>

				  }


				  else if(!memcmp(buffin,rege,strlen(rege))){
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fa48 	bl	8000240 <strlen>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f107 0108 	add.w	r1, r7, #8
 8001db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fc08 	bl	80065d0 <memcmp>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d12b      	bne.n	8001e1e <main+0x5f2>
				  	printf("es rege\n\r");
 8001dc6:	4845      	ldr	r0, [pc, #276]	; (8001edc <main+0x6b0>)
 8001dc8:	f004 fc1a 	bl	8006600 <printf>
				  	printf(" %d\n",strlen(rege));
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fa35 	bl	8000240 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	483a      	ldr	r0, [pc, #232]	; (8001ec4 <main+0x698>)
 8001ddc:	f004 fc10 	bl	8006600 <printf>
				  	printf(" %d\n",strlen((char*)buffin));
 8001de0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fa2b 	bl	8000240 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4835      	ldr	r0, [pc, #212]	; (8001ec4 <main+0x698>)
 8001df0:	f004 fc06 	bl	8006600 <printf>



				  	for(int w = 0; w<sizeof(buffin); w++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dfa:	e00b      	b.n	8001e14 <main+0x5e8>
				  				 			buffin[w]=0;}
 8001dfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e04:	4413      	add	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e18:	2b63      	cmp	r3, #99	; 0x63
 8001e1a:	d9ef      	bls.n	8001dfc <main+0x5d0>
 8001e1c:	e57c      	b.n	8001918 <main+0xec>

				  }



				  else if(!memcmp(buffin,prin,strlen(prin))){
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fa0d 	bl	8000240 <strlen>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4639      	mov	r1, r7
 8001e2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fbce 	bl	80065d0 <memcmp>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d12a      	bne.n	8001e90 <main+0x664>
				  	printf("es prin\n\r");
 8001e3a:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <main+0x6b4>)
 8001e3c:	f004 fbe0 	bl	8006600 <printf>
				  	printf(" %d\n",strlen(prin));
 8001e40:	463b      	mov	r3, r7
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe f9fc 	bl	8000240 <strlen>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <main+0x698>)
 8001e4e:	f004 fbd7 	bl	8006600 <printf>
				  	printf(" %d\n",strlen((char*)buffin));
 8001e52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe f9f2 	bl	8000240 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <main+0x698>)
 8001e62:	f004 fbcd 	bl	8006600 <printf>



				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e6c:	e00b      	b.n	8001e86 <main+0x65a>
				  				 			buffin[w]=0;}
 8001e6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	4413      	add	r3, r2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e8a:	2b63      	cmp	r3, #99	; 0x63
 8001e8c:	d9ef      	bls.n	8001e6e <main+0x642>
 8001e8e:	e543      	b.n	8001918 <main+0xec>

				  }

				  else{
					  printf("ningun comando\n\r");
 8001e90:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <main+0x6b8>)
 8001e92:	f004 fbb5 	bl	8006600 <printf>
					  for(int w = 0; w<sizeof(buffin); w++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e9c:	e00b      	b.n	8001eb6 <main+0x68a>
					 				  		  			  buffin[w]=0;}
 8001e9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ea2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eba:	2b63      	cmp	r3, #99	; 0x63
 8001ebc:	d9ef      	bls.n	8001e9e <main+0x672>
				while(rx[0] != 0x0A){
 8001ebe:	e52b      	b.n	8001918 <main+0xec>
 8001ec0:	08010c58 	.word	0x08010c58
 8001ec4:	08010c38 	.word	0x08010c38
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	08010c64 	.word	0x08010c64
 8001ed0:	08010c70 	.word	0x08010c70
 8001ed4:	08010c88 	.word	0x08010c88
 8001ed8:	08010c94 	.word	0x08010c94
 8001edc:	08010c9c 	.word	0x08010c9c
 8001ee0:	08010ca8 	.word	0x08010ca8
 8001ee4:	08010cb4 	.word	0x08010cb4

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b094      	sub	sp, #80	; 0x50
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2234      	movs	r2, #52	; 0x34
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 fb7a 	bl	80065f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <SystemClock_Config+0xdc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <SystemClock_Config+0xdc>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <SystemClock_Config+0xdc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001f58:	2360      	movs	r3, #96	; 0x60
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 fd9b 	bl	8003aa8 <HAL_RCC_OscConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f78:	f000 f94a 	bl	8002210 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f7c:	f001 fd44 	bl	8003a08 <HAL_PWREx_EnableOverDrive>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001f86:	f000 f943 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 f82c 	bl	8004004 <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001fb2:	f000 f92d 	bl	8002210 <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3750      	adds	r7, #80	; 0x50
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_I2C1_Init+0x74>)
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <MX_I2C1_Init+0x78>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_I2C1_Init+0x74>)
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <MX_I2C1_Init+0x7c>)
 8001fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_I2C1_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <MX_I2C1_Init+0x74>)
 8002004:	f000 ff82 	bl	8002f0c <HAL_I2C_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800200e:	f000 f8ff 	bl	8002210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <MX_I2C1_Init+0x74>)
 8002016:	f001 fc5f 	bl	80038d8 <HAL_I2CEx_ConfigAnalogFilter>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002020:	f000 f8f6 	bl	8002210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002024:	2100      	movs	r1, #0
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_I2C1_Init+0x74>)
 8002028:	f001 fca1 	bl	800396e <HAL_I2CEx_ConfigDigitalFilter>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f000 f8ed 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200009d8 	.word	0x200009d8
 8002040:	40005400 	.word	0x40005400
 8002044:	10805d88 	.word	0x10805d88

08002048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_TIM2_Init+0x98>)
 8002068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MX_TIM2_Init+0x98>)
 8002070:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_TIM2_Init+0x98>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM2_Init+0x98>)
 800207e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_TIM2_Init+0x98>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_TIM2_Init+0x98>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <MX_TIM2_Init+0x98>)
 8002092:	f002 fe05 	bl	8004ca0 <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800209c:	f000 f8b8 	bl	8002210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_TIM2_Init+0x98>)
 80020ae:	f002 fe4f 	bl	8004d50 <HAL_TIM_ConfigClockSource>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80020b8:	f000 f8aa 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_TIM2_Init+0x98>)
 80020ca:	f003 f845 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80020d4:	f000 f89c 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000a2c 	.word	0x20000a2c

080020e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_USART3_UART_Init+0x58>)
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <MX_USART3_UART_Init+0x5c>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_USART3_UART_Init+0x58>)
 80020f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80020f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_USART3_UART_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_USART3_UART_Init+0x58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_USART3_UART_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_USART3_UART_Init+0x58>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_USART3_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_USART3_UART_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_USART3_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_USART3_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_USART3_UART_Init+0x58>)
 8002128:	f003 f8a4 	bl	8005274 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002132:	f000 f86d 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000a78 	.word	0x20000a78
 8002140:	40004800 	.word	0x40004800

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <MX_GPIO_Init+0xc0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_GPIO_Init+0xc0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_GPIO_Init+0xc0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <MX_GPIO_Init+0xc0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <MX_GPIO_Init+0xc0>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <MX_GPIO_Init+0xc0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2101      	movs	r1, #1
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <MX_GPIO_Init+0xc4>)
 80021c0:	f000 fe8a 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80021c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_GPIO_Init+0xc8>)
 80021da:	f000 fcb9 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021de:	2301      	movs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_GPIO_Init+0xc4>)
 80021f6:	f000 fcab 	bl	8002b50 <HAL_GPIO_Init>

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800

08002210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002218:	e7fe      	b.n	8002218 <Error_Handler+0x8>
	...

0800221c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <RetargetInit+0x28>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <RetargetInit+0x2c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6898      	ldr	r0, [r3, #8]
 8002230:	2300      	movs	r3, #0
 8002232:	2202      	movs	r2, #2
 8002234:	2100      	movs	r1, #0
 8002236:	f004 fa55 	bl	80066e4 <setvbuf>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000b00 	.word	0x20000b00
 8002248:	2000000c 	.word	0x2000000c

0800224c <_isatty>:

int _isatty(int fd) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db04      	blt.n	8002264 <_isatty+0x18>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	dc01      	bgt.n	8002264 <_isatty+0x18>
    return 1;
 8002260:	2301      	movs	r3, #1
 8002262:	e005      	b.n	8002270 <_isatty+0x24>

  errno = EBADF;
 8002264:	f004 f970 	bl	8006548 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	2209      	movs	r2, #9
 800226c:	601a      	str	r2, [r3, #0]
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_write>:

int _write(int fd, char* ptr, int len) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <_write+0x18>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d111      	bne.n	80022b4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <_write+0x54>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	b29a      	uxth	r2, r3
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	f003 f837 	bl	8005310 <HAL_UART_Transmit>
 80022a2:	4603      	mov	r3, r0
 80022a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <_write+0x38>
      return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	e008      	b.n	80022c2 <_write+0x4a>
    else
      return EIO;
 80022b0:	2305      	movs	r3, #5
 80022b2:	e006      	b.n	80022c2 <_write+0x4a>
  }
  errno = EBADF;
 80022b4:	f004 f948 	bl	8006548 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2209      	movs	r2, #9
 80022bc:	601a      	str	r2, [r3, #0]
  return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000b00 	.word	0x20000b00

080022d0 <_close>:

int _close(int fd) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db04      	blt.n	80022e8 <_close+0x18>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	dc01      	bgt.n	80022e8 <_close+0x18>
    return 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e006      	b.n	80022f6 <_close+0x26>

  errno = EBADF;
 80022e8:	f004 f92e 	bl	8006548 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2209      	movs	r2, #9
 80022f0:	601a      	str	r2, [r3, #0]
  return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800230a:	f004 f91d 	bl	8006548 <__errno>
 800230e:	4603      	mov	r3, r0
 8002310:	2209      	movs	r2, #9
 8002312:	601a      	str	r2, [r3, #0]
  return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_read>:

int _read(int fd, char* ptr, int len) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d110      	bne.n	8002354 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <_read+0x4c>)
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	2201      	movs	r2, #1
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	f003 f86a 	bl	8005416 <HAL_UART_Receive>
 8002342:	4603      	mov	r3, r0
 8002344:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <_read+0x30>
      return 1;
 800234c:	2301      	movs	r3, #1
 800234e:	e008      	b.n	8002362 <_read+0x42>
    else
      return EIO;
 8002350:	2305      	movs	r3, #5
 8002352:	e006      	b.n	8002362 <_read+0x42>
  }
  errno = EBADF;
 8002354:	f004 f8f8 	bl	8006548 <__errno>
 8002358:	4603      	mov	r3, r0
 800235a:	2209      	movs	r2, #9
 800235c:	601a      	str	r2, [r3, #0]
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000b00 	.word	0x20000b00

08002370 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db08      	blt.n	8002392 <_fstat+0x22>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	dc05      	bgt.n	8002392 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238c:	605a      	str	r2, [r3, #4]
    return 0;
 800238e:	2300      	movs	r3, #0
 8002390:	e005      	b.n	800239e <_fstat+0x2e>
  }

  errno = EBADF;
 8002392:	f004 f8d9 	bl	8006548 <__errno>
 8002396:	4603      	mov	r3, r0
 8002398:	2209      	movs	r2, #9
 800239a:	601a      	str	r2, [r3, #0]
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_MspInit+0x44>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_MspInit+0x44>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_MspInit+0x44>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x44>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_MspInit+0x44>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_MspInit+0x44>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0ae      	sub	sp, #184	; 0xb8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2290      	movs	r2, #144	; 0x90
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f004 f8ed 	bl	80065f0 <memset>
  if(hi2c->Instance==I2C1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_I2C_MspInit+0xb4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d13c      	bne.n	800249a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002424:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002426:	2300      	movs	r3, #0
 8002428:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f80e 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800243a:	f7ff fee9 	bl	8002210 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800245a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002470:	2304      	movs	r3, #4
 8002472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800247a:	4619      	mov	r1, r3
 800247c:	480b      	ldr	r0, [pc, #44]	; (80024ac <HAL_I2C_MspInit+0xbc>)
 800247e:	f000 fb67 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 8002488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_I2C_MspInit+0xb8>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	37b8      	adds	r7, #184	; 0xb8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40005400 	.word	0x40005400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c0:	d10b      	bne.n	80024da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0ae      	sub	sp, #184	; 0xb8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2290      	movs	r2, #144	; 0x90
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f004 f86f 	bl	80065f0 <memset>
  if(huart->Instance==USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_UART_MspInit+0xc4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d144      	bne.n	80025a6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800251c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002522:	2300      	movs	r3, #0
 8002524:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4618      	mov	r0, r3
 800252c:	f001 ff90 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002536:	f7ff fe6b 	bl	8002210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800256a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002584:	2307      	movs	r3, #7
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800258e:	4619      	mov	r1, r3
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002592:	f000 fadd 	bl	8002b50 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2027      	movs	r0, #39	; 0x27
 800259c:	f000 fa0f 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025a0:	2027      	movs	r0, #39	; 0x27
 80025a2:	f000 fa28 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	37b8      	adds	r7, #184	; 0xb8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40004800 	.word	0x40004800
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020c00 	.word	0x40020c00

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 f8ba 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <USART3_IRQHandler+0x10>)
 8002616:	f002 ffc3 	bl	80055a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000a78 	.word	0x20000a78

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f003 ff78 	bl	8006548 <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20080000 	.word	0x20080000
 8002684:	00000400 	.word	0x00000400
 8002688:	20000b04 	.word	0x20000b04
 800268c:	20000b48 	.word	0x20000b48

08002690 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <SystemInit+0x20>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <SystemInit+0x20>)
 800269c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ba:	490e      	ldr	r1, [pc, #56]	; (80026f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d0:	4c0b      	ldr	r4, [pc, #44]	; (8002700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026de:	f7ff ffd7 	bl	8002690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f003 ff37 	bl	8006554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff f8a1 	bl	800182c <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 80026f8:	08012ab4 	.word	0x08012ab4
  ldr r2, =_sbss
 80026fc:	200009bc 	.word	0x200009bc
  ldr r4, =_ebss
 8002700:	20000b48 	.word	0x20000b48

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>

08002706 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270a:	2003      	movs	r0, #3
 800270c:	f000 f94c 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002710:	2000      	movs	r0, #0
 8002712:	f000 f805 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002716:	f7ff fe47 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f967 	bl	8002a12 <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 f92f 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000000 	.word	0x20000000
 8002778:	20000008 	.word	0x20000008
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x20>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x24>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_IncTick+0x24>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000b08 	.word	0x20000b08

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000b08 	.word	0x20000b08

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000008 	.word	0x20000008

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <__NVIC_SetPriorityGrouping+0x40>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x40>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	05fa0000 	.word	0x05fa0000

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff feb6 	bl	80027a8 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d008      	beq.n	8002a5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e052      	b.n	8002b02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0216 	bic.w	r2, r2, #22
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_DMA_Abort+0x62>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e013      	b.n	8002ad6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff fe7b 	bl	80027a8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d90c      	bls.n	8002ad6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e015      	b.n	8002b02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e4      	bne.n	8002aae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	223f      	movs	r2, #63	; 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d004      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00c      	b.n	8002b42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e175      	b.n	8002e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8164 	bne.w	8002e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x56>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80be 	beq.w	8002e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d037      	beq.n	8002d8e <HAL_GPIO_Init+0x23e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a57      	ldr	r2, [pc, #348]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_GPIO_Init+0x23a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a56      	ldr	r2, [pc, #344]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x236>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <HAL_GPIO_Init+0x338>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x232>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <HAL_GPIO_Init+0x33c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x22e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_GPIO_Init+0x340>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x22a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x344>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_GPIO_Init+0x348>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x34c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x350>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d66:	2309      	movs	r3, #9
 8002d68:	e012      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e010      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae86 	bls.w	8002b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40022400 	.word	0x40022400
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e001      	b.n	8002eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07f      	b.n	800301e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fa5c 	bl	80023f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e006      	b.n	8002f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d104      	bne.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_I2C_Init+0x11c>)
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	02008000 	.word	0x02008000

0800302c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 80da 	bne.w	8003202 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_Master_Transmit+0x30>
 8003058:	2302      	movs	r3, #2
 800305a:	e0d3      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003064:	f7ff fba0 	bl	80027a8 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2319      	movs	r3, #25
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f9e6 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0be      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2210      	movs	r2, #16
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2bff      	cmp	r3, #255	; 0xff
 80030b6:	d90e      	bls.n	80030d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	4b51      	ldr	r3, [pc, #324]	; (800320c <HAL_I2C_Master_Transmit+0x1e0>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fbd0 	bl	8003874 <I2C_TransferConfig>
 80030d4:	e06c      	b.n	80031b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8979      	ldrh	r1, [r7, #10]
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_I2C_Master_Transmit+0x1e0>)
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fbbf 	bl	8003874 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030f6:	e05b      	b.n	80031b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	6a39      	ldr	r1, [r7, #32]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f9e3 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e07b      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d034      	beq.n	80031b0 <HAL_I2C_Master_Transmit+0x184>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d130      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2200      	movs	r2, #0
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f975 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e04d      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2bff      	cmp	r3, #255	; 0xff
 8003170:	d90e      	bls.n	8003190 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	22ff      	movs	r2, #255	; 0xff
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	2300      	movs	r3, #0
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fb73 	bl	8003874 <I2C_TransferConfig>
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	8979      	ldrh	r1, [r7, #10]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb62 	bl	8003874 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d19e      	bne.n	80030f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	6a39      	ldr	r1, [r7, #32]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f9c2 	bl	8003548 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01a      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2220      	movs	r2, #32
 80031d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_I2C_Master_Transmit+0x1e4>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	80002000 	.word	0x80002000
 8003210:	fe00e800 	.word	0xfe00e800

08003214 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	817b      	strh	r3, [r7, #10]
 8003224:	4613      	mov	r3, r2
 8003226:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b20      	cmp	r3, #32
 8003232:	f040 80db 	bne.w	80033ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2C_Master_Receive+0x30>
 8003240:	2302      	movs	r3, #2
 8003242:	e0d4      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800324c:	f7ff faac 	bl	80027a8 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2319      	movs	r3, #25
 8003258:	2201      	movs	r2, #1
 800325a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8f2 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0bf      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2222      	movs	r2, #34	; 0x22
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2210      	movs	r2, #16
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	893a      	ldrh	r2, [r7, #8]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2bff      	cmp	r3, #255	; 0xff
 800329e:	d90e      	bls.n	80032be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	22ff      	movs	r2, #255	; 0xff
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <HAL_I2C_Master_Receive+0x1e4>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fadc 	bl	8003874 <I2C_TransferConfig>
 80032bc:	e06d      	b.n	800339a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	8979      	ldrh	r1, [r7, #10]
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_I2C_Master_Receive+0x1e4>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 facb 	bl	8003874 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032de:	e05c      	b.n	800339a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6a39      	ldr	r1, [r7, #32]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f96b 	bl	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e07c      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d034      	beq.n	800339a <HAL_I2C_Master_Receive+0x186>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d130      	bne.n	800339a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2200      	movs	r2, #0
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f880 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e04d      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d90e      	bls.n	800337a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	b2da      	uxtb	r2, r3
 8003368:	8979      	ldrh	r1, [r7, #10]
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa7e 	bl	8003874 <I2C_TransferConfig>
 8003378:	e00f      	b.n	800339a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	b2da      	uxtb	r2, r3
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	2300      	movs	r3, #0
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa6d 	bl	8003874 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d19d      	bne.n	80032e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	6a39      	ldr	r1, [r7, #32]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f8cd 	bl	8003548 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e01a      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2220      	movs	r2, #32
 80033be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_I2C_Master_Receive+0x1e8>)
 80033cc:	400b      	ands	r3, r1
 80033ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	80002400 	.word	0x80002400
 80033fc:	fe00e800 	.word	0xfe00e800

08003400 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d103      	bne.n	800341e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d007      	beq.n	800343c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	619a      	str	r2, [r3, #24]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003458:	e022      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d01e      	beq.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7ff f9a1 	bl	80027a8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e00f      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d0cd      	beq.n	800345a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d4:	e02c      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8ea 	bl	80036b4 <I2C_IsErrorOccurred>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e02a      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d01e      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7ff f959 	bl	80027a8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d1cb      	bne.n	80034d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003554:	e028      	b.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8aa 	bl	80036b4 <I2C_IsErrorOccurred>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e026      	b.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7ff f91d 	bl	80027a8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d113      	bne.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d1cf      	bne.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035cc:	e064      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f86e 	bl	80036b4 <I2C_IsErrorOccurred>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e062      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d138      	bne.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d105      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e04e      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d107      	bne.n	8003628 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2210      	movs	r2, #16
 800361e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2204      	movs	r2, #4
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
 8003626:	e002      	b.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2220      	movs	r2, #32
 8003634:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003642:	400b      	ands	r3, r1
 8003644:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7ff f8a1 	bl	80027a8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10f      	bne.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e007      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d193      	bne.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fe00e800 	.word	0xfe00e800

080036b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d068      	beq.n	80037b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e8:	e049      	b.n	800377e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d045      	beq.n	800377e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7ff f859 	bl	80027a8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_IsErrorOccurred+0x54>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d13a      	bne.n	800377e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800371a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372a:	d121      	bne.n	8003770 <I2C_IsErrorOccurred+0xbc>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003732:	d01d      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01a      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003748:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374a:	f7ff f82d 	bl	80027a8 <HAL_GetTick>
 800374e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e00e      	b.n	8003770 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003752:	f7ff f829 	bl	80027a8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b19      	cmp	r3, #25
 800375e:	d907      	bls.n	8003770 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800376e:	e006      	b.n	800377e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d1e9      	bne.n	8003752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d003      	beq.n	8003794 <I2C_IsErrorOccurred+0xe0>
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0aa      	beq.n	80036ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fde9 	bl	8003400 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <I2C_IsErrorOccurred+0x1bc>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003866:	4618      	mov	r0, r3
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	fe00e800 	.word	0xfe00e800

08003874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	4613      	mov	r3, r2
 8003884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388c:	7a7b      	ldrb	r3, [r7, #9]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	4313      	orrs	r3, r2
 800389e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	0d5b      	lsrs	r3, r3, #21
 80038ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <I2C_TransferConfig+0x60>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	43db      	mvns	r3, r3
 80038b8:	ea02 0103 	and.w	r1, r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	03ff63ff 	.word	0x03ff63ff

080038d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d138      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e032      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800392a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d139      	bne.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398e:	2302      	movs	r3, #2
 8003990:	e033      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	; 0x24
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a36:	f7fe feb7 	bl	80027a8 <HAL_GetTick>
 8003a3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a3c:	e009      	b.n	8003a52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a3e:	f7fe feb3 	bl	80027a8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4c:	d901      	bls.n	8003a52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e022      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6c:	f7fe fe9c 	bl	80027a8 <HAL_GetTick>
 8003a70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a72:	e009      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a74:	f7fe fe98 	bl	80027a8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a82:	d901      	bls.n	8003a88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e007      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a94:	d1ee      	bne.n	8003a74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e29b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8087 	beq.w	8003bda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003acc:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d00c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad8:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d112      	bne.n	8003b0a <HAL_RCC_OscConfig+0x62>
 8003ae4:	4b90      	ldr	r3, [pc, #576]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d06c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x130>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d168      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e275      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x7a>
 8003b14:	4b84      	ldr	r3, [pc, #528]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a83      	ldr	r2, [pc, #524]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e02e      	b.n	8003b80 <HAL_RCC_OscConfig+0xd8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x9c>
 8003b2a:	4b7f      	ldr	r3, [pc, #508]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7b      	ldr	r2, [pc, #492]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xd8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a75      	ldr	r2, [pc, #468]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a72      	ldr	r2, [pc, #456]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xd8>
 8003b68:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6e      	ldr	r2, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6b      	ldr	r2, [pc, #428]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fe0e 	bl	80027a8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe fe0a 	bl	80027a8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e229      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xe8>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fdfa 	bl	80027a8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe fdf6 	bl	80027a8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e215      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x110>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d069      	beq.n	8003cba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be6:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x190>
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1e9      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	493d      	ldr	r1, [pc, #244]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	e040      	b.n	8003cba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c40:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a38      	ldr	r2, [pc, #224]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fdac 	bl	80027a8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe fda8 	bl	80027a8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1c7      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4929      	ldr	r1, [pc, #164]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
 8003c86:	e018      	b.n	8003cba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe fd88 	bl	80027a8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fd84 	bl	80027a8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1a3      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d038      	beq.n	8003d38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d019      	beq.n	8003d02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe fd65 	bl	80027a8 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fd61 	bl	80027a8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e180      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x23a>
 8003d00:	e01a      	b.n	8003d38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <HAL_RCC_OscConfig+0x280>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fd4b 	bl	80027a8 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fe fd47 	bl	80027a8 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d903      	bls.n	8003d2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e166      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
 8003d28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ee      	bne.n	8003d16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a4 	beq.w	8003e8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	4a88      	ldr	r2, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5e:	4b86      	ldr	r3, [pc, #536]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6e:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d118      	bne.n	8003dac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x4d4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_RCC_OscConfig+0x4d4>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d86:	f7fe fd0f 	bl	80027a8 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fe fd0b 	bl	80027a8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e12a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da0:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x4d4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x31a>
 8003db4:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	e02d      	b.n	8003e1e <HAL_RCC_OscConfig+0x376>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x33c>
 8003dca:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a67      	ldr	r2, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	e01c      	b.n	8003e1e <HAL_RCC_OscConfig+0x376>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x35e>
 8003dec:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a61      	ldr	r2, [pc, #388]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	e00b      	b.n	8003e1e <HAL_RCC_OscConfig+0x376>
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a5b      	ldr	r2, [pc, #364]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d015      	beq.n	8003e52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fe fcbf 	bl	80027a8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fe fcbb 	bl	80027a8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0d8      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ee      	beq.n	8003e2e <HAL_RCC_OscConfig+0x386>
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe fca9 	bl	80027a8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fca5 	bl	80027a8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0c2      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ee      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80ae 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d06d      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d14b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b32      	ldr	r3, [pc, #200]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a31      	ldr	r2, [pc, #196]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fc76 	bl	80027a8 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe fc72 	bl	80027a8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e091      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	071b      	lsls	r3, r3, #28
 8003f0a:	491b      	ldr	r1, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fc44 	bl	80027a8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fe fc40 	bl	80027a8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e05f      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x47c>
 8003f42:	e057      	b.n	8003ff4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fc2a 	bl	80027a8 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe fc26 	bl	80027a8 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e045      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4b0>
 8003f76:	e03d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x54c>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <HAL_RCC_OscConfig+0x558>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d030      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d129      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d122      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d119      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d10f      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800

08004004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d0      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d910      	bls.n	800404c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b67      	ldr	r3, [pc, #412]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4965      	ldr	r1, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d040      	beq.n	8004128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d115      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e073      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06b      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4936      	ldr	r1, [pc, #216]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f8:	f7fe fb56 	bl	80027a8 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fe fb52 	bl	80027a8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e053      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 020c 	and.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1eb      	bne.n	8004100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d210      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 020f 	bic.w	r2, r3, #15
 800413e:	4922      	ldr	r1, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1cc>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1d0>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1d4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fab2 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08010d08 	.word	0x08010d08
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000004 	.word	0x20000004

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b094      	sub	sp, #80	; 0x50
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	2300      	movs	r3, #0
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80e1 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e0db      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004214:	e0db      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421a:	e0d8      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	2200      	movs	r2, #0
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
 800423c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	633b      	str	r3, [r7, #48]	; 0x30
 8004246:	2300      	movs	r3, #0
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4621      	mov	r1, r4
 8004268:	1a51      	subs	r1, r2, r1
 800426a:	6139      	str	r1, [r7, #16]
 800426c:	4629      	mov	r1, r5
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004280:	4659      	mov	r1, fp
 8004282:	018b      	lsls	r3, r1, #6
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428a:	4651      	mov	r1, sl
 800428c:	018a      	lsls	r2, r1, #6
 800428e:	4651      	mov	r1, sl
 8004290:	ebb2 0801 	subs.w	r8, r2, r1
 8004294:	4659      	mov	r1, fp
 8004296:	eb63 0901 	sbc.w	r9, r3, r1
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ae:	4690      	mov	r8, r2
 80042b0:	4699      	mov	r9, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	eb18 0303 	adds.w	r3, r8, r3
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	462b      	mov	r3, r5
 80042bc:	eb49 0303 	adc.w	r3, r9, r3
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ce:	4629      	mov	r1, r5
 80042d0:	024b      	lsls	r3, r1, #9
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042d8:	4621      	mov	r1, r4
 80042da:	024a      	lsls	r2, r1, #9
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e2:	2200      	movs	r2, #0
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ec:	f7fc f9bc 	bl	8000668 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	e058      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	4618      	mov	r0, r3
 8004304:	4611      	mov	r1, r2
 8004306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	0159      	lsls	r1, r3, #5
 8004322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004326:	0150      	lsls	r0, r2, #5
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4641      	mov	r1, r8
 800432e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb63 0b01 	sbc.w	fp, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800434c:	ebb2 040a 	subs.w	r4, r2, sl
 8004350:	eb63 050b 	sbc.w	r5, r3, fp
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	00eb      	lsls	r3, r5, #3
 800435e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	4643      	mov	r3, r8
 800436a:	18e3      	adds	r3, r4, r3
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	464b      	mov	r3, r9
 8004370:	eb45 0303 	adc.w	r3, r5, r3
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004382:	4629      	mov	r1, r5
 8004384:	028b      	lsls	r3, r1, #10
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800438c:	4621      	mov	r1, r4
 800438e:	028a      	lsls	r2, r1, #10
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	2200      	movs	r2, #0
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	f7fc f962 	bl	8000668 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80043bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3750      	adds	r7, #80	; 0x50
 80043d4:	46bd      	mov	sp, r7
 80043d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200

080043e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	08010d18 	.word	0x08010d18

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800442c:	f7ff ffdc 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0b5b      	lsrs	r3, r3, #13
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	08010d18 	.word	0x08010d18

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004478:	4b69      	ldr	r3, [pc, #420]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a68      	ldr	r2, [pc, #416]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	4964      	ldr	r1, [pc, #400]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d017      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044aa:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	4959      	ldr	r1, [pc, #356]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e6:	4b4e      	ldr	r3, [pc, #312]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	494a      	ldr	r1, [pc, #296]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 808b 	beq.w	800464a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a39      	ldr	r2, [pc, #228]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fe f926 	bl	80027a8 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fe f922 	bl	80027a8 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e38f      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004572:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d035      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d02e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d114      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe f8ea 	bl	80027a8 <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe f8e6 	bl	80027a8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e351      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004606:	d111      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004616:	400b      	ands	r3, r1
 8004618:	4901      	ldr	r1, [pc, #4]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	e00b      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	0ffffcff 	.word	0x0ffffcff
 800462c:	4bac      	ldr	r3, [pc, #688]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4aab      	ldr	r2, [pc, #684]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	4ba9      	ldr	r3, [pc, #676]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	49a6      	ldr	r1, [pc, #664]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	4313      	orrs	r3, r2
 8004648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004656:	4ba2      	ldr	r3, [pc, #648]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	4aa0      	ldr	r2, [pc, #640]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004666:	4b9e      	ldr	r3, [pc, #632]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	499b      	ldr	r1, [pc, #620]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004684:	4b96      	ldr	r3, [pc, #600]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	4993      	ldr	r1, [pc, #588]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a6:	4b8e      	ldr	r3, [pc, #568]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b4:	498a      	ldr	r1, [pc, #552]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c8:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d6:	4982      	ldr	r1, [pc, #520]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ea:	4b7d      	ldr	r3, [pc, #500]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4979      	ldr	r1, [pc, #484]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470c:	4b74      	ldr	r3, [pc, #464]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f023 0203 	bic.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4971      	ldr	r1, [pc, #452]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f023 020c 	bic.w	r2, r3, #12
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	4968      	ldr	r1, [pc, #416]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004750:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	4960      	ldr	r1, [pc, #384]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004772:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	4957      	ldr	r1, [pc, #348]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004794:	4b52      	ldr	r3, [pc, #328]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	494f      	ldr	r1, [pc, #316]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	4946      	ldr	r1, [pc, #280]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	493e      	ldr	r1, [pc, #248]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	4935      	ldr	r1, [pc, #212]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800481c:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	492d      	ldr	r1, [pc, #180]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484c:	4924      	ldr	r1, [pc, #144]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	4914      	ldr	r1, [pc, #80]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b0:	490b      	ldr	r1, [pc, #44]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00f      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	4902      	ldr	r1, [pc, #8]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048dc:	e002      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048f0:	4b8a      	ldr	r3, [pc, #552]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	4986      	ldr	r1, [pc, #536]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004914:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004924:	497d      	ldr	r1, [pc, #500]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d006      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80d6 	beq.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004940:	4b76      	ldr	r3, [pc, #472]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd ff2c 	bl	80027a8 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004954:	f7fd ff28 	bl	80027a8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e195      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004966:	4b6d      	ldr	r3, [pc, #436]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d021      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11d      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004986:	4b65      	ldr	r3, [pc, #404]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	0e1b      	lsrs	r3, r3, #24
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	019a      	lsls	r2, r3, #6
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	071b      	lsls	r3, r3, #28
 80049ba:	4958      	ldr	r1, [pc, #352]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ec:	d129      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ee:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049fc:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	493e      	ldr	r1, [pc, #248]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a2a:	4b3c      	ldr	r3, [pc, #240]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	f023 021f 	bic.w	r2, r3, #31
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	4938      	ldr	r1, [pc, #224]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01d      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a5c:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a62:	0f1b      	lsrs	r3, r3, #28
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	061b      	lsls	r3, r3, #24
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	4926      	ldr	r1, [pc, #152]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	019a      	lsls	r2, r3, #6
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	491a      	ldr	r1, [pc, #104]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fd fe6f 	bl	80027a8 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ace:	f7fd fe6b 	bl	80027a8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b64      	cmp	r3, #100	; 0x64
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0d8      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 80ce 	bne.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fd fe52 	bl	80027a8 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b06:	e00b      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b08:	f7fd fe4e 	bl	80027a8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d904      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0bb      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b20:	4b5e      	ldr	r3, [pc, #376]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d0ec      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02e      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d12a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	019a      	lsls	r2, r3, #6
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	4944      	ldr	r1, [pc, #272]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	493d      	ldr	r1, [pc, #244]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d022      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d11d      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4929      	ldr	r1, [pc, #164]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d028      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	019a      	lsls	r2, r3, #6
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	4917      	ldr	r1, [pc, #92]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4911      	ldr	r1, [pc, #68]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c68:	f7fd fd9e 	bl	80027a8 <HAL_GetTick>
 8004c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c70:	f7fd fd9a 	bl	80027a8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e007      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8e:	d1ef      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e049      	b.n	8004d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fbf2 	bl	80024b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 f900 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e0b4      	b.n	8004ed6 <HAL_TIM_ConfigClockSource+0x186>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4b56      	ldr	r3, [pc, #344]	; (8004ee0 <HAL_TIM_ConfigClockSource+0x190>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d03e      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xd4>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	f200 8087 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	f000 8086 	beq.w	8004ec2 <HAL_TIM_ConfigClockSource+0x172>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d87f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b70      	cmp	r3, #112	; 0x70
 8004dbe:	d01a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xa6>
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d87b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d050      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x11a>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d877      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b50      	cmp	r3, #80	; 0x50
 8004dce:	d03c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xfa>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d873      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d058      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x13a>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d86f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d064      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	d86b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d060      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d867      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d05a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	e062      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f000 f987 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f000 f970 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e03c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 f8e4 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f93d 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e68:	e02c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f903 	bl	8005082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2160      	movs	r1, #96	; 0x60
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f92d 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e01c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 f8c4 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f91d 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 f914 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	fffeff88 	.word	0xfffeff88

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a40      	ldr	r2, [pc, #256]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d00f      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3d      	ldr	r2, [pc, #244]	; (8004ffc <TIM_Base_SetConfig+0x118>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3c      	ldr	r2, [pc, #240]	; (8005000 <TIM_Base_SetConfig+0x11c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <TIM_Base_SetConfig+0x120>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3a      	ldr	r2, [pc, #232]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d108      	bne.n	8004f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2f      	ldr	r2, [pc, #188]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d027      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <TIM_Base_SetConfig+0x118>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d023      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <TIM_Base_SetConfig+0x11c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01f      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <TIM_Base_SetConfig+0x120>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a29      	ldr	r2, [pc, #164]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d017      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a28      	ldr	r2, [pc, #160]	; (800500c <TIM_Base_SetConfig+0x128>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <TIM_Base_SetConfig+0x12c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a26      	ldr	r2, [pc, #152]	; (8005014 <TIM_Base_SetConfig+0x130>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a25      	ldr	r2, [pc, #148]	; (8005018 <TIM_Base_SetConfig+0x134>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a24      	ldr	r2, [pc, #144]	; (800501c <TIM_Base_SetConfig+0x138>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a23      	ldr	r2, [pc, #140]	; (8005020 <TIM_Base_SetConfig+0x13c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d108      	bne.n	8004fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_Base_SetConfig+0xf8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d103      	bne.n	8004fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40010400 	.word	0x40010400
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	40001800 	.word	0x40001800
 800501c:	40001c00 	.word	0x40001c00
 8005020:	40002000 	.word	0x40002000

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e06d      	b.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a30      	ldr	r2, [pc, #192]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2f      	ldr	r2, [pc, #188]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a20      	ldr	r2, [pc, #128]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d01d      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10c      	bne.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800

08005274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e040      	b.n	8005308 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fd f928 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fc86 	bl	8005bc4 <UART_SetConfig>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fede 	bl	800608c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 ff65 	bl	80061d0 <UART_CheckIdleState>
 8005306:	4603      	mov	r3, r0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005324:	2b20      	cmp	r3, #32
 8005326:	d171      	bne.n	800540c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UART_Transmit+0x24>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e06a      	b.n	800540e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2221      	movs	r2, #33	; 0x21
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005346:	f7fd fa2f 	bl	80027a8 <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d108      	bne.n	8005378 <HAL_UART_Transmit+0x68>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e003      	b.n	8005380 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005380:	e02c      	b.n	80053dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 ff6c 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e038      	b.n	800540e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3302      	adds	r3, #2
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e007      	b.n	80053ca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1cc      	bne.n	8005382 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 ff39 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e005      	b.n	800540e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08a      	sub	sp, #40	; 0x28
 800541a:	af02      	add	r7, sp, #8
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542c:	2b20      	cmp	r3, #32
 800542e:	f040 80b1 	bne.w	8005594 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_UART_Receive+0x28>
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0a9      	b.n	8005596 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2222      	movs	r2, #34	; 0x22
 800544e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005458:	f7fd f9a6 	bl	80027a8 <HAL_GetTick>
 800545c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d10e      	bne.n	8005496 <HAL_UART_Receive+0x80>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_UART_Receive+0x76>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800548a:	e02d      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	22ff      	movs	r2, #255	; 0xff
 8005490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005494:	e028      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <HAL_UART_Receive+0xa4>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <HAL_UART_Receive+0x9a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ae:	e01b      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	227f      	movs	r2, #127	; 0x7f
 80054b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b8:	e016      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c2:	d10d      	bne.n	80054e0 <HAL_UART_Receive+0xca>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_UART_Receive+0xc0>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	227f      	movs	r2, #127	; 0x7f
 80054d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d4:	e008      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	223f      	movs	r2, #63	; 0x3f
 80054da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054de:	e003      	b.n	80054e8 <HAL_UART_Receive+0xd2>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d108      	bne.n	800550c <HAL_UART_Receive+0xf6>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e003      	b.n	8005514 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005514:	e032      	b.n	800557c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2120      	movs	r1, #32
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fea2 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e032      	b.n	8005596 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	b29a      	uxth	r2, r3
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	4013      	ands	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e00c      	b.n	800556a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2da      	uxtb	r2, r3
 8005558:	8a7b      	ldrh	r3, [r7, #18]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4013      	ands	r3, r2
 800555e:	b2da      	uxtb	r2, r3
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1c6      	bne.n	8005516 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b0ba      	sub	sp, #232	; 0xe8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80055ce:	4013      	ands	r3, r2
 80055d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d115      	bne.n	8005608 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00f      	beq.n	8005608 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 82ac 	beq.w	8005b56 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
      }
      return;
 8005606:	e2a6      	b.n	8005b56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8117 	beq.w	8005840 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800561e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005622:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_UART_IRQHandler+0x298>)
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 810a 	beq.w	8005840 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d011      	beq.n	800565c <HAL_UART_IRQHandler+0xbc>
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2201      	movs	r2, #1
 800564a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800565c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d011      	beq.n	800568c <HAL_UART_IRQHandler+0xec>
 8005668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2202      	movs	r2, #2
 800567a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	f043 0204 	orr.w	r2, r3, #4
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800568c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d011      	beq.n	80056bc <HAL_UART_IRQHandler+0x11c>
 8005698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2204      	movs	r2, #4
 80056aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d017      	beq.n	80056f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2208      	movs	r2, #8
 80056e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ee:	f043 0208 	orr.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005700:	2b00      	cmp	r3, #0
 8005702:	d012      	beq.n	800572a <HAL_UART_IRQHandler+0x18a>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8212 	beq.w	8005b5a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005764:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d005      	beq.n	8005782 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800577a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800577e:	2b00      	cmp	r3, #0
 8005780:	d04f      	beq.n	8005822 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fe37 	bl	80063f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d141      	bne.n	800581a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1d9      	bne.n	8005796 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d013      	beq.n	8005812 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <HAL_UART_IRQHandler+0x29c>)
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd f987 	bl	8002b0a <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e00f      	b.n	8005832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9b6 	bl	8005b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e00b      	b.n	8005832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9b2 	bl	8005b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e007      	b.n	8005832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9ae 	bl	8005b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005830:	e193      	b.n	8005b5a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005832:	bf00      	nop
    return;
 8005834:	e191      	b.n	8005b5a <HAL_UART_IRQHandler+0x5ba>
 8005836:	bf00      	nop
 8005838:	04000120 	.word	0x04000120
 800583c:	080064bf 	.word	0x080064bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 814c 	bne.w	8005ae2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8145 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 813e 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2210      	movs	r2, #16
 800586c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	f040 80b6 	bne.w	80059ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800588a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8165 	beq.w	8005b5e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800589a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800589e:	429a      	cmp	r2, r3
 80058a0:	f080 815d 	bcs.w	8005b5e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b8:	f000 8086 	beq.w	80059c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1da      	bne.n	80058bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800592a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800592e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800593c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e1      	bne.n	8005906 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800596c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005998:	f023 0310 	bic.w	r3, r3, #16
 800599c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e4      	bne.n	8005988 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fd f831 	bl	8002a2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8d8 	bl	8005b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059e8:	e0b9      	b.n	8005b5e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80ab 	beq.w	8005b62 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a6 	beq.w	8005b62 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a38:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e4      	bne.n	8005a16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a70:	633a      	str	r2, [r7, #48]	; 0x30
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e3      	bne.n	8005a4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f023 0310 	bic.w	r3, r3, #16
 8005aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	69b9      	ldr	r1, [r7, #24]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e4      	bne.n	8005a98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f85c 	bl	8005b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ae0:	e03f      	b.n	8005b62 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00e      	beq.n	8005b0c <HAL_UART_IRQHandler+0x56c>
 8005aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f853 	bl	8005bb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b0a:	e02d      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01c      	beq.n	8005b66 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
    }
    return;
 8005b34:	e017      	b.n	8005b66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
 8005b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fccb 	bl	80064ea <UART_EndTransmit_IT>
    return;
 8005b54:	e008      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b56:	bf00      	nop
 8005b58:	e006      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b5a:	bf00      	nop
 8005b5c:	e004      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b66:	bf00      	nop
  }

}
 8005b68:	37e8      	adds	r7, #232	; 0xe8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop

08005b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4ba6      	ldr	r3, [pc, #664]	; (8005e88 <UART_SetConfig+0x2c4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a94      	ldr	r2, [pc, #592]	; (8005e8c <UART_SetConfig+0x2c8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d120      	bne.n	8005c82 <UART_SetConfig+0xbe>
 8005c40:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d816      	bhi.n	8005c7c <UART_SetConfig+0xb8>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x90>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005c71 	.word	0x08005c71
 8005c5c:	08005c6b 	.word	0x08005c6b
 8005c60:	08005c77 	.word	0x08005c77
 8005c64:	2301      	movs	r3, #1
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e150      	b.n	8005f0c <UART_SetConfig+0x348>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e14d      	b.n	8005f0c <UART_SetConfig+0x348>
 8005c70:	2304      	movs	r3, #4
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e14a      	b.n	8005f0c <UART_SetConfig+0x348>
 8005c76:	2308      	movs	r3, #8
 8005c78:	77fb      	strb	r3, [r7, #31]
 8005c7a:	e147      	b.n	8005f0c <UART_SetConfig+0x348>
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e144      	b.n	8005f0c <UART_SetConfig+0x348>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a83      	ldr	r2, [pc, #524]	; (8005e94 <UART_SetConfig+0x2d0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d132      	bne.n	8005cf2 <UART_SetConfig+0x12e>
 8005c8c:	4b80      	ldr	r3, [pc, #512]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b0c      	cmp	r3, #12
 8005c98:	d828      	bhi.n	8005cec <UART_SetConfig+0x128>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0xdc>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005ced 	.word	0x08005ced
 8005ca8:	08005ced 	.word	0x08005ced
 8005cac:	08005ced 	.word	0x08005ced
 8005cb0:	08005ce1 	.word	0x08005ce1
 8005cb4:	08005ced 	.word	0x08005ced
 8005cb8:	08005ced 	.word	0x08005ced
 8005cbc:	08005ced 	.word	0x08005ced
 8005cc0:	08005cdb 	.word	0x08005cdb
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005ce7 	.word	0x08005ce7
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e118      	b.n	8005f0c <UART_SetConfig+0x348>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e115      	b.n	8005f0c <UART_SetConfig+0x348>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e112      	b.n	8005f0c <UART_SetConfig+0x348>
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e10f      	b.n	8005f0c <UART_SetConfig+0x348>
 8005cec:	2310      	movs	r3, #16
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e10c      	b.n	8005f0c <UART_SetConfig+0x348>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <UART_SetConfig+0x2d4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d120      	bne.n	8005d3e <UART_SetConfig+0x17a>
 8005cfc:	4b64      	ldr	r3, [pc, #400]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d06:	2b30      	cmp	r3, #48	; 0x30
 8005d08:	d013      	beq.n	8005d32 <UART_SetConfig+0x16e>
 8005d0a:	2b30      	cmp	r3, #48	; 0x30
 8005d0c:	d814      	bhi.n	8005d38 <UART_SetConfig+0x174>
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d009      	beq.n	8005d26 <UART_SetConfig+0x162>
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d810      	bhi.n	8005d38 <UART_SetConfig+0x174>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <UART_SetConfig+0x15c>
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d006      	beq.n	8005d2c <UART_SetConfig+0x168>
 8005d1e:	e00b      	b.n	8005d38 <UART_SetConfig+0x174>
 8005d20:	2300      	movs	r3, #0
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e0f2      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e0ef      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e0ec      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e0e9      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e0e6      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a56      	ldr	r2, [pc, #344]	; (8005e9c <UART_SetConfig+0x2d8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d120      	bne.n	8005d8a <UART_SetConfig+0x1c6>
 8005d48:	4b51      	ldr	r3, [pc, #324]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d52:	2bc0      	cmp	r3, #192	; 0xc0
 8005d54:	d013      	beq.n	8005d7e <UART_SetConfig+0x1ba>
 8005d56:	2bc0      	cmp	r3, #192	; 0xc0
 8005d58:	d814      	bhi.n	8005d84 <UART_SetConfig+0x1c0>
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d009      	beq.n	8005d72 <UART_SetConfig+0x1ae>
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d810      	bhi.n	8005d84 <UART_SetConfig+0x1c0>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <UART_SetConfig+0x1a8>
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d006      	beq.n	8005d78 <UART_SetConfig+0x1b4>
 8005d6a:	e00b      	b.n	8005d84 <UART_SetConfig+0x1c0>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e0cc      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e0c9      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e0c6      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e0c3      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d84:	2310      	movs	r3, #16
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e0c0      	b.n	8005f0c <UART_SetConfig+0x348>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <UART_SetConfig+0x2dc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d125      	bne.n	8005de0 <UART_SetConfig+0x21c>
 8005d94:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da2:	d017      	beq.n	8005dd4 <UART_SetConfig+0x210>
 8005da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da8:	d817      	bhi.n	8005dda <UART_SetConfig+0x216>
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dae:	d00b      	beq.n	8005dc8 <UART_SetConfig+0x204>
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db4:	d811      	bhi.n	8005dda <UART_SetConfig+0x216>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <UART_SetConfig+0x1fe>
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d006      	beq.n	8005dce <UART_SetConfig+0x20a>
 8005dc0:	e00b      	b.n	8005dda <UART_SetConfig+0x216>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e0a1      	b.n	8005f0c <UART_SetConfig+0x348>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e09e      	b.n	8005f0c <UART_SetConfig+0x348>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e09b      	b.n	8005f0c <UART_SetConfig+0x348>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e098      	b.n	8005f0c <UART_SetConfig+0x348>
 8005dda:	2310      	movs	r3, #16
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e095      	b.n	8005f0c <UART_SetConfig+0x348>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <UART_SetConfig+0x2e0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d125      	bne.n	8005e36 <UART_SetConfig+0x272>
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005df8:	d017      	beq.n	8005e2a <UART_SetConfig+0x266>
 8005dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dfe:	d817      	bhi.n	8005e30 <UART_SetConfig+0x26c>
 8005e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e04:	d00b      	beq.n	8005e1e <UART_SetConfig+0x25a>
 8005e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0a:	d811      	bhi.n	8005e30 <UART_SetConfig+0x26c>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <UART_SetConfig+0x254>
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e14:	d006      	beq.n	8005e24 <UART_SetConfig+0x260>
 8005e16:	e00b      	b.n	8005e30 <UART_SetConfig+0x26c>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e076      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e073      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e24:	2304      	movs	r3, #4
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e070      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e06d      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e30:	2310      	movs	r3, #16
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e06a      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <UART_SetConfig+0x2e4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d138      	bne.n	8005eb2 <UART_SetConfig+0x2ee>
 8005e40:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <UART_SetConfig+0x2cc>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e4e:	d017      	beq.n	8005e80 <UART_SetConfig+0x2bc>
 8005e50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e54:	d82a      	bhi.n	8005eac <UART_SetConfig+0x2e8>
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5a:	d00b      	beq.n	8005e74 <UART_SetConfig+0x2b0>
 8005e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e60:	d824      	bhi.n	8005eac <UART_SetConfig+0x2e8>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <UART_SetConfig+0x2aa>
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	d006      	beq.n	8005e7a <UART_SetConfig+0x2b6>
 8005e6c:	e01e      	b.n	8005eac <UART_SetConfig+0x2e8>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e04b      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e74:	2302      	movs	r3, #2
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e048      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e045      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e80:	2308      	movs	r3, #8
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e042      	b.n	8005f0c <UART_SetConfig+0x348>
 8005e86:	bf00      	nop
 8005e88:	efff69f3 	.word	0xefff69f3
 8005e8c:	40011000 	.word	0x40011000
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40004400 	.word	0x40004400
 8005e98:	40004800 	.word	0x40004800
 8005e9c:	40004c00 	.word	0x40004c00
 8005ea0:	40005000 	.word	0x40005000
 8005ea4:	40011400 	.word	0x40011400
 8005ea8:	40007800 	.word	0x40007800
 8005eac:	2310      	movs	r3, #16
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e02c      	b.n	8005f0c <UART_SetConfig+0x348>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a72      	ldr	r2, [pc, #456]	; (8006080 <UART_SetConfig+0x4bc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d125      	bne.n	8005f08 <UART_SetConfig+0x344>
 8005ebc:	4b71      	ldr	r3, [pc, #452]	; (8006084 <UART_SetConfig+0x4c0>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ec6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eca:	d017      	beq.n	8005efc <UART_SetConfig+0x338>
 8005ecc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ed0:	d817      	bhi.n	8005f02 <UART_SetConfig+0x33e>
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed6:	d00b      	beq.n	8005ef0 <UART_SetConfig+0x32c>
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d811      	bhi.n	8005f02 <UART_SetConfig+0x33e>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <UART_SetConfig+0x326>
 8005ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee6:	d006      	beq.n	8005ef6 <UART_SetConfig+0x332>
 8005ee8:	e00b      	b.n	8005f02 <UART_SetConfig+0x33e>
 8005eea:	2300      	movs	r3, #0
 8005eec:	77fb      	strb	r3, [r7, #31]
 8005eee:	e00d      	b.n	8005f0c <UART_SetConfig+0x348>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e00a      	b.n	8005f0c <UART_SetConfig+0x348>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e007      	b.n	8005f0c <UART_SetConfig+0x348>
 8005efc:	2308      	movs	r3, #8
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e004      	b.n	8005f0c <UART_SetConfig+0x348>
 8005f02:	2310      	movs	r3, #16
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e001      	b.n	8005f0c <UART_SetConfig+0x348>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f14:	d15b      	bne.n	8005fce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d828      	bhi.n	8005f6e <UART_SetConfig+0x3aa>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x360>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fe fa5a 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61b8      	str	r0, [r7, #24]
        break;
 8005f4e:	e013      	b.n	8005f78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fe fa6a 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8005f54:	61b8      	str	r0, [r7, #24]
        break;
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <UART_SetConfig+0x4c4>)
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e00c      	b.n	8005f78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fe f93d 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005f62:	61b8      	str	r0, [r7, #24]
        break;
 8005f64:	e008      	b.n	8005f78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61bb      	str	r3, [r7, #24]
        break;
 8005f6c:	e004      	b.n	8005f78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	77bb      	strb	r3, [r7, #30]
        break;
 8005f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d074      	beq.n	8006068 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	005a      	lsls	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b0f      	cmp	r3, #15
 8005f98:	d916      	bls.n	8005fc8 <UART_SetConfig+0x404>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d212      	bcs.n	8005fc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f023 030f 	bic.w	r3, r3, #15
 8005faa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	89fa      	ldrh	r2, [r7, #14]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e04f      	b.n	8006068 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	77bb      	strb	r3, [r7, #30]
 8005fcc:	e04c      	b.n	8006068 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d828      	bhi.n	8006026 <UART_SetConfig+0x462>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x418>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	08006027 	.word	0x08006027
 8005fec:	08006017 	.word	0x08006017
 8005ff0:	08006027 	.word	0x08006027
 8005ff4:	08006027 	.word	0x08006027
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	0800601f 	.word	0x0800601f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7fe f9fe 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8006004:	61b8      	str	r0, [r7, #24]
        break;
 8006006:	e013      	b.n	8006030 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006008:	f7fe fa0e 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 800600c:	61b8      	str	r0, [r7, #24]
        break;
 800600e:	e00f      	b.n	8006030 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <UART_SetConfig+0x4c4>)
 8006012:	61bb      	str	r3, [r7, #24]
        break;
 8006014:	e00c      	b.n	8006030 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006016:	f7fe f8e1 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800601a:	61b8      	str	r0, [r7, #24]
        break;
 800601c:	e008      	b.n	8006030 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006022:	61bb      	str	r3, [r7, #24]
        break;
 8006024:	e004      	b.n	8006030 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	77bb      	strb	r3, [r7, #30]
        break;
 800602e:	bf00      	nop
    }

    if (pclk != 0U)
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	085a      	lsrs	r2, r3, #1
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d909      	bls.n	8006064 <UART_SetConfig+0x4a0>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006056:	d205      	bcs.n	8006064 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	e001      	b.n	8006068 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006074:	7fbb      	ldrb	r3, [r7, #30]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40007c00 	.word	0x40007c00
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400

0800608c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618a:	d10a      	bne.n	80061a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e0:	f7fc fae2 	bl	80027a8 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d10e      	bne.n	8006212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f831 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e027      	b.n	8006262 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d10e      	bne.n	800623e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f81b 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e011      	b.n	8006262 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627a:	e0a7      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	f000 80a3 	beq.w	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006286:	f7fc fa8f 	bl	80027a8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	2b00      	cmp	r3, #0
 800629a:	d13f      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b0:	667b      	str	r3, [r7, #100]	; 0x64
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	663b      	str	r3, [r7, #96]	; 0x60
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e068      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d050      	beq.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006338:	d148      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
 8006364:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	613b      	str	r3, [r7, #16]
   return(result);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	66bb      	str	r3, [r7, #104]	; 0x68
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006396:	623a      	str	r2, [r7, #32]
 8006398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	69f9      	ldr	r1, [r7, #28]
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e010      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f43f af48 	beq.w	800627c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3770      	adds	r7, #112	; 0x70
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b095      	sub	sp, #84	; 0x54
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	643b      	str	r3, [r7, #64]	; 0x40
 800641e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	2b01      	cmp	r3, #1
 800646a:	d118      	bne.n	800649e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	60bb      	str	r3, [r7, #8]
   return(result);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	613b      	str	r3, [r7, #16]
   return(result);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e6      	bne.n	800646c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064b2:	bf00      	nop
 80064b4:	3754      	adds	r7, #84	; 0x54
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fb51 	bl	8005b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fb1d 	bl	8005b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006536:	bf00      	nop
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <atoi>:
 800653e:	220a      	movs	r2, #10
 8006540:	2100      	movs	r1, #0
 8006542:	f000 ba09 	b.w	8006958 <strtol>
	...

08006548 <__errno>:
 8006548:	4b01      	ldr	r3, [pc, #4]	; (8006550 <__errno+0x8>)
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c

08006554 <__libc_init_array>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	4d0d      	ldr	r5, [pc, #52]	; (800658c <__libc_init_array+0x38>)
 8006558:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <__libc_init_array+0x3c>)
 800655a:	1b64      	subs	r4, r4, r5
 800655c:	10a4      	asrs	r4, r4, #2
 800655e:	2600      	movs	r6, #0
 8006560:	42a6      	cmp	r6, r4
 8006562:	d109      	bne.n	8006578 <__libc_init_array+0x24>
 8006564:	4d0b      	ldr	r5, [pc, #44]	; (8006594 <__libc_init_array+0x40>)
 8006566:	4c0c      	ldr	r4, [pc, #48]	; (8006598 <__libc_init_array+0x44>)
 8006568:	f009 fca8 	bl	800febc <_init>
 800656c:	1b64      	subs	r4, r4, r5
 800656e:	10a4      	asrs	r4, r4, #2
 8006570:	2600      	movs	r6, #0
 8006572:	42a6      	cmp	r6, r4
 8006574:	d105      	bne.n	8006582 <__libc_init_array+0x2e>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	f855 3b04 	ldr.w	r3, [r5], #4
 800657c:	4798      	blx	r3
 800657e:	3601      	adds	r6, #1
 8006580:	e7ee      	b.n	8006560 <__libc_init_array+0xc>
 8006582:	f855 3b04 	ldr.w	r3, [r5], #4
 8006586:	4798      	blx	r3
 8006588:	3601      	adds	r6, #1
 800658a:	e7f2      	b.n	8006572 <__libc_init_array+0x1e>
 800658c:	08012aa8 	.word	0x08012aa8
 8006590:	08012aa8 	.word	0x08012aa8
 8006594:	08012aa8 	.word	0x08012aa8
 8006598:	08012ab0 	.word	0x08012ab0

0800659c <__itoa>:
 800659c:	1e93      	subs	r3, r2, #2
 800659e:	2b22      	cmp	r3, #34	; 0x22
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	d904      	bls.n	80065b0 <__itoa+0x14>
 80065a6:	2300      	movs	r3, #0
 80065a8:	700b      	strb	r3, [r1, #0]
 80065aa:	461c      	mov	r4, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd10      	pop	{r4, pc}
 80065b0:	2a0a      	cmp	r2, #10
 80065b2:	d109      	bne.n	80065c8 <__itoa+0x2c>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	da07      	bge.n	80065c8 <__itoa+0x2c>
 80065b8:	232d      	movs	r3, #45	; 0x2d
 80065ba:	700b      	strb	r3, [r1, #0]
 80065bc:	4240      	negs	r0, r0
 80065be:	2101      	movs	r1, #1
 80065c0:	4421      	add	r1, r4
 80065c2:	f000 f9d3 	bl	800696c <__utoa>
 80065c6:	e7f1      	b.n	80065ac <__itoa+0x10>
 80065c8:	2100      	movs	r1, #0
 80065ca:	e7f9      	b.n	80065c0 <__itoa+0x24>

080065cc <itoa>:
 80065cc:	f7ff bfe6 	b.w	800659c <__itoa>

080065d0 <memcmp>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	3901      	subs	r1, #1
 80065d4:	4402      	add	r2, r0
 80065d6:	4290      	cmp	r0, r2
 80065d8:	d101      	bne.n	80065de <memcmp+0xe>
 80065da:	2000      	movs	r0, #0
 80065dc:	e005      	b.n	80065ea <memcmp+0x1a>
 80065de:	7803      	ldrb	r3, [r0, #0]
 80065e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d001      	beq.n	80065ec <memcmp+0x1c>
 80065e8:	1b18      	subs	r0, r3, r4
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	3001      	adds	r0, #1
 80065ee:	e7f2      	b.n	80065d6 <memcmp+0x6>

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <printf>:
 8006600:	b40f      	push	{r0, r1, r2, r3}
 8006602:	b507      	push	{r0, r1, r2, lr}
 8006604:	4906      	ldr	r1, [pc, #24]	; (8006620 <printf+0x20>)
 8006606:	ab04      	add	r3, sp, #16
 8006608:	6808      	ldr	r0, [r1, #0]
 800660a:	f853 2b04 	ldr.w	r2, [r3], #4
 800660e:	6881      	ldr	r1, [r0, #8]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	f000 f9ed 	bl	80069f0 <_vfprintf_r>
 8006616:	b003      	add	sp, #12
 8006618:	f85d eb04 	ldr.w	lr, [sp], #4
 800661c:	b004      	add	sp, #16
 800661e:	4770      	bx	lr
 8006620:	2000000c 	.word	0x2000000c

08006624 <_puts_r>:
 8006624:	b530      	push	{r4, r5, lr}
 8006626:	4605      	mov	r5, r0
 8006628:	b089      	sub	sp, #36	; 0x24
 800662a:	4608      	mov	r0, r1
 800662c:	460c      	mov	r4, r1
 800662e:	f7f9 fe07 	bl	8000240 <strlen>
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <_puts_r+0x88>)
 8006634:	9306      	str	r3, [sp, #24]
 8006636:	2301      	movs	r3, #1
 8006638:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800663c:	9307      	str	r3, [sp, #28]
 800663e:	4418      	add	r0, r3
 8006640:	ab04      	add	r3, sp, #16
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	2302      	movs	r3, #2
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800664a:	68ac      	ldr	r4, [r5, #8]
 800664c:	9003      	str	r0, [sp, #12]
 800664e:	b913      	cbnz	r3, 8006656 <_puts_r+0x32>
 8006650:	4628      	mov	r0, r5
 8006652:	f003 fd4f 	bl	800a0f4 <__sinit>
 8006656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006658:	07db      	lsls	r3, r3, #31
 800665a:	d405      	bmi.n	8006668 <_puts_r+0x44>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	0598      	lsls	r0, r3, #22
 8006660:	d402      	bmi.n	8006668 <_puts_r+0x44>
 8006662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006664:	f004 f89e 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 8006668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666c:	0499      	lsls	r1, r3, #18
 800666e:	d406      	bmi.n	800667e <_puts_r+0x5a>
 8006670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667c:	6663      	str	r3, [r4, #100]	; 0x64
 800667e:	4628      	mov	r0, r5
 8006680:	aa01      	add	r2, sp, #4
 8006682:	4621      	mov	r1, r4
 8006684:	f003 feee 	bl	800a464 <__sfvwrite_r>
 8006688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668a:	2800      	cmp	r0, #0
 800668c:	bf14      	ite	ne
 800668e:	f04f 35ff 	movne.w	r5, #4294967295
 8006692:	250a      	moveq	r5, #10
 8006694:	07da      	lsls	r2, r3, #31
 8006696:	d405      	bmi.n	80066a4 <_puts_r+0x80>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	059b      	lsls	r3, r3, #22
 800669c:	d402      	bmi.n	80066a4 <_puts_r+0x80>
 800669e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a0:	f004 f881 	bl	800a7a6 <__retarget_lock_release_recursive>
 80066a4:	4628      	mov	r0, r5
 80066a6:	b009      	add	sp, #36	; 0x24
 80066a8:	bd30      	pop	{r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	08011172 	.word	0x08011172

080066b0 <puts>:
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <puts+0xc>)
 80066b2:	4601      	mov	r1, r0
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f7ff bfb5 	b.w	8006624 <_puts_r>
 80066ba:	bf00      	nop
 80066bc:	2000000c 	.word	0x2000000c

080066c0 <scanf>:
 80066c0:	b40f      	push	{r0, r1, r2, r3}
 80066c2:	b507      	push	{r0, r1, r2, lr}
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <scanf+0x20>)
 80066c6:	ab04      	add	r3, sp, #16
 80066c8:	6808      	ldr	r0, [r1, #0]
 80066ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ce:	6841      	ldr	r1, [r0, #4]
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f002 fda3 	bl	800921c <_vfscanf_r>
 80066d6:	b003      	add	sp, #12
 80066d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066dc:	b004      	add	sp, #16
 80066de:	4770      	bx	lr
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <setvbuf>:
 80066e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	461d      	mov	r5, r3
 80066ea:	4b58      	ldr	r3, [pc, #352]	; (800684c <setvbuf+0x168>)
 80066ec:	681f      	ldr	r7, [r3, #0]
 80066ee:	4604      	mov	r4, r0
 80066f0:	460e      	mov	r6, r1
 80066f2:	4690      	mov	r8, r2
 80066f4:	b127      	cbz	r7, 8006700 <setvbuf+0x1c>
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	b913      	cbnz	r3, 8006700 <setvbuf+0x1c>
 80066fa:	4638      	mov	r0, r7
 80066fc:	f003 fcfa 	bl	800a0f4 <__sinit>
 8006700:	f1b8 0f02 	cmp.w	r8, #2
 8006704:	d006      	beq.n	8006714 <setvbuf+0x30>
 8006706:	f1b8 0f01 	cmp.w	r8, #1
 800670a:	f200 809a 	bhi.w	8006842 <setvbuf+0x15e>
 800670e:	2d00      	cmp	r5, #0
 8006710:	f2c0 8097 	blt.w	8006842 <setvbuf+0x15e>
 8006714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d405      	bmi.n	8006726 <setvbuf+0x42>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	0598      	lsls	r0, r3, #22
 800671e:	d402      	bmi.n	8006726 <setvbuf+0x42>
 8006720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006722:	f004 f83f 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 8006726:	4621      	mov	r1, r4
 8006728:	4638      	mov	r0, r7
 800672a:	f003 fc65 	bl	8009ff8 <_fflush_r>
 800672e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006730:	b141      	cbz	r1, 8006744 <setvbuf+0x60>
 8006732:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006736:	4299      	cmp	r1, r3
 8006738:	d002      	beq.n	8006740 <setvbuf+0x5c>
 800673a:	4638      	mov	r0, r7
 800673c:	f003 fdd2 	bl	800a2e4 <_free_r>
 8006740:	2300      	movs	r3, #0
 8006742:	6323      	str	r3, [r4, #48]	; 0x30
 8006744:	2300      	movs	r3, #0
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	0619      	lsls	r1, r3, #24
 800674e:	d503      	bpl.n	8006758 <setvbuf+0x74>
 8006750:	6921      	ldr	r1, [r4, #16]
 8006752:	4638      	mov	r0, r7
 8006754:	f003 fdc6 	bl	800a2e4 <_free_r>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	f1b8 0f02 	cmp.w	r8, #2
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	d067      	beq.n	800683a <setvbuf+0x156>
 800676a:	ab01      	add	r3, sp, #4
 800676c:	466a      	mov	r2, sp
 800676e:	4621      	mov	r1, r4
 8006770:	4638      	mov	r0, r7
 8006772:	f004 f819 	bl	800a7a8 <__swhatbuf_r>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	4318      	orrs	r0, r3
 800677a:	81a0      	strh	r0, [r4, #12]
 800677c:	bb35      	cbnz	r5, 80067cc <setvbuf+0xe8>
 800677e:	9d00      	ldr	r5, [sp, #0]
 8006780:	4628      	mov	r0, r5
 8006782:	f004 f87d 	bl	800a880 <malloc>
 8006786:	4606      	mov	r6, r0
 8006788:	2800      	cmp	r0, #0
 800678a:	d151      	bne.n	8006830 <setvbuf+0x14c>
 800678c:	f8dd 9000 	ldr.w	r9, [sp]
 8006790:	45a9      	cmp	r9, r5
 8006792:	d146      	bne.n	8006822 <setvbuf+0x13e>
 8006794:	f04f 35ff 	mov.w	r5, #4294967295
 8006798:	2200      	movs	r2, #0
 800679a:	60a2      	str	r2, [r4, #8]
 800679c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	6122      	str	r2, [r4, #16]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067aa:	6162      	str	r2, [r4, #20]
 80067ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	07d2      	lsls	r2, r2, #31
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	d405      	bmi.n	80067c4 <setvbuf+0xe0>
 80067b8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80067bc:	d102      	bne.n	80067c4 <setvbuf+0xe0>
 80067be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c0:	f003 fff1 	bl	800a7a6 <__retarget_lock_release_recursive>
 80067c4:	4628      	mov	r0, r5
 80067c6:	b003      	add	sp, #12
 80067c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	d0d7      	beq.n	8006780 <setvbuf+0x9c>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	b913      	cbnz	r3, 80067da <setvbuf+0xf6>
 80067d4:	4638      	mov	r0, r7
 80067d6:	f003 fc8d 	bl	800a0f4 <__sinit>
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	6026      	str	r6, [r4, #0]
 80067de:	42ab      	cmp	r3, r5
 80067e0:	bf1e      	ittt	ne
 80067e2:	89a3      	ldrhne	r3, [r4, #12]
 80067e4:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80067e8:	81a3      	strhne	r3, [r4, #12]
 80067ea:	f1b8 0f01 	cmp.w	r8, #1
 80067ee:	bf02      	ittt	eq
 80067f0:	89a3      	ldrheq	r3, [r4, #12]
 80067f2:	f043 0301 	orreq.w	r3, r3, #1
 80067f6:	81a3      	strheq	r3, [r4, #12]
 80067f8:	89a2      	ldrh	r2, [r4, #12]
 80067fa:	f012 0308 	ands.w	r3, r2, #8
 80067fe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006802:	d01c      	beq.n	800683e <setvbuf+0x15a>
 8006804:	07d3      	lsls	r3, r2, #31
 8006806:	bf41      	itttt	mi
 8006808:	2300      	movmi	r3, #0
 800680a:	426d      	negmi	r5, r5
 800680c:	60a3      	strmi	r3, [r4, #8]
 800680e:	61a5      	strmi	r5, [r4, #24]
 8006810:	bf58      	it	pl
 8006812:	60a5      	strpl	r5, [r4, #8]
 8006814:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006816:	f015 0501 	ands.w	r5, r5, #1
 800681a:	d115      	bne.n	8006848 <setvbuf+0x164>
 800681c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006820:	e7cc      	b.n	80067bc <setvbuf+0xd8>
 8006822:	4648      	mov	r0, r9
 8006824:	f004 f82c 	bl	800a880 <malloc>
 8006828:	4606      	mov	r6, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d0b2      	beq.n	8006794 <setvbuf+0xb0>
 800682e:	464d      	mov	r5, r9
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	e7ca      	b.n	80067d0 <setvbuf+0xec>
 800683a:	2500      	movs	r5, #0
 800683c:	e7ac      	b.n	8006798 <setvbuf+0xb4>
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	e7e8      	b.n	8006814 <setvbuf+0x130>
 8006842:	f04f 35ff 	mov.w	r5, #4294967295
 8006846:	e7bd      	b.n	80067c4 <setvbuf+0xe0>
 8006848:	2500      	movs	r5, #0
 800684a:	e7bb      	b.n	80067c4 <setvbuf+0xe0>
 800684c:	2000000c 	.word	0x2000000c

08006850 <_strtol_l.constprop.0>:
 8006850:	2b01      	cmp	r3, #1
 8006852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006856:	d001      	beq.n	800685c <_strtol_l.constprop.0+0xc>
 8006858:	2b24      	cmp	r3, #36	; 0x24
 800685a:	d906      	bls.n	800686a <_strtol_l.constprop.0+0x1a>
 800685c:	f7ff fe74 	bl	8006548 <__errno>
 8006860:	2316      	movs	r3, #22
 8006862:	6003      	str	r3, [r0, #0]
 8006864:	2000      	movs	r0, #0
 8006866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006950 <_strtol_l.constprop.0+0x100>
 800686e:	460d      	mov	r5, r1
 8006870:	462e      	mov	r6, r5
 8006872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006876:	f814 700c 	ldrb.w	r7, [r4, ip]
 800687a:	f017 0708 	ands.w	r7, r7, #8
 800687e:	d1f7      	bne.n	8006870 <_strtol_l.constprop.0+0x20>
 8006880:	2c2d      	cmp	r4, #45	; 0x2d
 8006882:	d132      	bne.n	80068ea <_strtol_l.constprop.0+0x9a>
 8006884:	782c      	ldrb	r4, [r5, #0]
 8006886:	2701      	movs	r7, #1
 8006888:	1cb5      	adds	r5, r6, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d05b      	beq.n	8006946 <_strtol_l.constprop.0+0xf6>
 800688e:	2b10      	cmp	r3, #16
 8006890:	d109      	bne.n	80068a6 <_strtol_l.constprop.0+0x56>
 8006892:	2c30      	cmp	r4, #48	; 0x30
 8006894:	d107      	bne.n	80068a6 <_strtol_l.constprop.0+0x56>
 8006896:	782c      	ldrb	r4, [r5, #0]
 8006898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800689c:	2c58      	cmp	r4, #88	; 0x58
 800689e:	d14d      	bne.n	800693c <_strtol_l.constprop.0+0xec>
 80068a0:	786c      	ldrb	r4, [r5, #1]
 80068a2:	2310      	movs	r3, #16
 80068a4:	3502      	adds	r5, #2
 80068a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ae:	f04f 0c00 	mov.w	ip, #0
 80068b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80068b6:	4666      	mov	r6, ip
 80068b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80068bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80068c0:	f1be 0f09 	cmp.w	lr, #9
 80068c4:	d816      	bhi.n	80068f4 <_strtol_l.constprop.0+0xa4>
 80068c6:	4674      	mov	r4, lr
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	dd24      	ble.n	8006916 <_strtol_l.constprop.0+0xc6>
 80068cc:	f1bc 0f00 	cmp.w	ip, #0
 80068d0:	db1e      	blt.n	8006910 <_strtol_l.constprop.0+0xc0>
 80068d2:	45b1      	cmp	r9, r6
 80068d4:	d31c      	bcc.n	8006910 <_strtol_l.constprop.0+0xc0>
 80068d6:	d101      	bne.n	80068dc <_strtol_l.constprop.0+0x8c>
 80068d8:	45a2      	cmp	sl, r4
 80068da:	db19      	blt.n	8006910 <_strtol_l.constprop.0+0xc0>
 80068dc:	fb06 4603 	mla	r6, r6, r3, r4
 80068e0:	f04f 0c01 	mov.w	ip, #1
 80068e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068e8:	e7e8      	b.n	80068bc <_strtol_l.constprop.0+0x6c>
 80068ea:	2c2b      	cmp	r4, #43	; 0x2b
 80068ec:	bf04      	itt	eq
 80068ee:	782c      	ldrbeq	r4, [r5, #0]
 80068f0:	1cb5      	addeq	r5, r6, #2
 80068f2:	e7ca      	b.n	800688a <_strtol_l.constprop.0+0x3a>
 80068f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80068f8:	f1be 0f19 	cmp.w	lr, #25
 80068fc:	d801      	bhi.n	8006902 <_strtol_l.constprop.0+0xb2>
 80068fe:	3c37      	subs	r4, #55	; 0x37
 8006900:	e7e2      	b.n	80068c8 <_strtol_l.constprop.0+0x78>
 8006902:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006906:	f1be 0f19 	cmp.w	lr, #25
 800690a:	d804      	bhi.n	8006916 <_strtol_l.constprop.0+0xc6>
 800690c:	3c57      	subs	r4, #87	; 0x57
 800690e:	e7db      	b.n	80068c8 <_strtol_l.constprop.0+0x78>
 8006910:	f04f 3cff 	mov.w	ip, #4294967295
 8006914:	e7e6      	b.n	80068e4 <_strtol_l.constprop.0+0x94>
 8006916:	f1bc 0f00 	cmp.w	ip, #0
 800691a:	da05      	bge.n	8006928 <_strtol_l.constprop.0+0xd8>
 800691c:	2322      	movs	r3, #34	; 0x22
 800691e:	6003      	str	r3, [r0, #0]
 8006920:	4646      	mov	r6, r8
 8006922:	b942      	cbnz	r2, 8006936 <_strtol_l.constprop.0+0xe6>
 8006924:	4630      	mov	r0, r6
 8006926:	e79e      	b.n	8006866 <_strtol_l.constprop.0+0x16>
 8006928:	b107      	cbz	r7, 800692c <_strtol_l.constprop.0+0xdc>
 800692a:	4276      	negs	r6, r6
 800692c:	2a00      	cmp	r2, #0
 800692e:	d0f9      	beq.n	8006924 <_strtol_l.constprop.0+0xd4>
 8006930:	f1bc 0f00 	cmp.w	ip, #0
 8006934:	d000      	beq.n	8006938 <_strtol_l.constprop.0+0xe8>
 8006936:	1e69      	subs	r1, r5, #1
 8006938:	6011      	str	r1, [r2, #0]
 800693a:	e7f3      	b.n	8006924 <_strtol_l.constprop.0+0xd4>
 800693c:	2430      	movs	r4, #48	; 0x30
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1b1      	bne.n	80068a6 <_strtol_l.constprop.0+0x56>
 8006942:	2308      	movs	r3, #8
 8006944:	e7af      	b.n	80068a6 <_strtol_l.constprop.0+0x56>
 8006946:	2c30      	cmp	r4, #48	; 0x30
 8006948:	d0a5      	beq.n	8006896 <_strtol_l.constprop.0+0x46>
 800694a:	230a      	movs	r3, #10
 800694c:	e7ab      	b.n	80068a6 <_strtol_l.constprop.0+0x56>
 800694e:	bf00      	nop
 8006950:	08010dc5 	.word	0x08010dc5

08006954 <_strtol_r>:
 8006954:	f7ff bf7c 	b.w	8006850 <_strtol_l.constprop.0>

08006958 <strtol>:
 8006958:	4613      	mov	r3, r2
 800695a:	460a      	mov	r2, r1
 800695c:	4601      	mov	r1, r0
 800695e:	4802      	ldr	r0, [pc, #8]	; (8006968 <strtol+0x10>)
 8006960:	6800      	ldr	r0, [r0, #0]
 8006962:	f7ff bf75 	b.w	8006850 <_strtol_l.constprop.0>
 8006966:	bf00      	nop
 8006968:	2000000c 	.word	0x2000000c

0800696c <__utoa>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	4c1f      	ldr	r4, [pc, #124]	; (80069ec <__utoa+0x80>)
 8006970:	b08b      	sub	sp, #44	; 0x2c
 8006972:	4605      	mov	r5, r0
 8006974:	460b      	mov	r3, r1
 8006976:	466e      	mov	r6, sp
 8006978:	f104 0c20 	add.w	ip, r4, #32
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	6861      	ldr	r1, [r4, #4]
 8006980:	4637      	mov	r7, r6
 8006982:	c703      	stmia	r7!, {r0, r1}
 8006984:	3408      	adds	r4, #8
 8006986:	4564      	cmp	r4, ip
 8006988:	463e      	mov	r6, r7
 800698a:	d1f7      	bne.n	800697c <__utoa+0x10>
 800698c:	7921      	ldrb	r1, [r4, #4]
 800698e:	7139      	strb	r1, [r7, #4]
 8006990:	1e91      	subs	r1, r2, #2
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	6038      	str	r0, [r7, #0]
 8006996:	2922      	cmp	r1, #34	; 0x22
 8006998:	f04f 0100 	mov.w	r1, #0
 800699c:	d904      	bls.n	80069a8 <__utoa+0x3c>
 800699e:	7019      	strb	r1, [r3, #0]
 80069a0:	460b      	mov	r3, r1
 80069a2:	4618      	mov	r0, r3
 80069a4:	b00b      	add	sp, #44	; 0x2c
 80069a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a8:	1e58      	subs	r0, r3, #1
 80069aa:	4684      	mov	ip, r0
 80069ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80069b0:	fb02 5617 	mls	r6, r2, r7, r5
 80069b4:	3628      	adds	r6, #40	; 0x28
 80069b6:	446e      	add	r6, sp
 80069b8:	460c      	mov	r4, r1
 80069ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80069be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80069c2:	462e      	mov	r6, r5
 80069c4:	42b2      	cmp	r2, r6
 80069c6:	f101 0101 	add.w	r1, r1, #1
 80069ca:	463d      	mov	r5, r7
 80069cc:	d9ee      	bls.n	80069ac <__utoa+0x40>
 80069ce:	2200      	movs	r2, #0
 80069d0:	545a      	strb	r2, [r3, r1]
 80069d2:	1919      	adds	r1, r3, r4
 80069d4:	1aa5      	subs	r5, r4, r2
 80069d6:	42aa      	cmp	r2, r5
 80069d8:	dae3      	bge.n	80069a2 <__utoa+0x36>
 80069da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80069de:	780e      	ldrb	r6, [r1, #0]
 80069e0:	7006      	strb	r6, [r0, #0]
 80069e2:	3201      	adds	r2, #1
 80069e4:	f801 5901 	strb.w	r5, [r1], #-1
 80069e8:	e7f4      	b.n	80069d4 <__utoa+0x68>
 80069ea:	bf00      	nop
 80069ec:	08010d24 	.word	0x08010d24

080069f0 <_vfprintf_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ed2d 8b04 	vpush	{d8-d9}
 80069f8:	b0cb      	sub	sp, #300	; 0x12c
 80069fa:	460d      	mov	r5, r1
 80069fc:	4692      	mov	sl, r2
 80069fe:	461c      	mov	r4, r3
 8006a00:	4698      	mov	r8, r3
 8006a02:	4606      	mov	r6, r0
 8006a04:	f003 fec8 	bl	800a798 <_localeconv_r>
 8006a08:	6803      	ldr	r3, [r0, #0]
 8006a0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fc17 	bl	8000240 <strlen>
 8006a12:	900a      	str	r0, [sp, #40]	; 0x28
 8006a14:	b126      	cbz	r6, 8006a20 <_vfprintf_r+0x30>
 8006a16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8006a18:	b913      	cbnz	r3, 8006a20 <_vfprintf_r+0x30>
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f003 fb6a 	bl	800a0f4 <__sinit>
 8006a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a22:	07d8      	lsls	r0, r3, #31
 8006a24:	d405      	bmi.n	8006a32 <_vfprintf_r+0x42>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	0599      	lsls	r1, r3, #22
 8006a2a:	d402      	bmi.n	8006a32 <_vfprintf_r+0x42>
 8006a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2e:	f003 feb9 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 8006a32:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006a36:	049a      	lsls	r2, r3, #18
 8006a38:	d406      	bmi.n	8006a48 <_vfprintf_r+0x58>
 8006a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a3e:	81ab      	strh	r3, [r5, #12]
 8006a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a46:	666b      	str	r3, [r5, #100]	; 0x64
 8006a48:	89ab      	ldrh	r3, [r5, #12]
 8006a4a:	071f      	lsls	r7, r3, #28
 8006a4c:	d501      	bpl.n	8006a52 <_vfprintf_r+0x62>
 8006a4e:	692b      	ldr	r3, [r5, #16]
 8006a50:	b9bb      	cbnz	r3, 8006a82 <_vfprintf_r+0x92>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4630      	mov	r0, r6
 8006a56:	f002 fbf5 	bl	8009244 <__swsetup_r>
 8006a5a:	b190      	cbz	r0, 8006a82 <_vfprintf_r+0x92>
 8006a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a5e:	07dc      	lsls	r4, r3, #31
 8006a60:	d508      	bpl.n	8006a74 <_vfprintf_r+0x84>
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a6a:	b04b      	add	sp, #300	; 0x12c
 8006a6c:	ecbd 8b04 	vpop	{d8-d9}
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a74:	89ab      	ldrh	r3, [r5, #12]
 8006a76:	0598      	lsls	r0, r3, #22
 8006a78:	d4f3      	bmi.n	8006a62 <_vfprintf_r+0x72>
 8006a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a7c:	f003 fe93 	bl	800a7a6 <__retarget_lock_release_recursive>
 8006a80:	e7ef      	b.n	8006a62 <_vfprintf_r+0x72>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	f003 021a 	and.w	r2, r3, #26
 8006a88:	2a0a      	cmp	r2, #10
 8006a8a:	d116      	bne.n	8006aba <_vfprintf_r+0xca>
 8006a8c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	db12      	blt.n	8006aba <_vfprintf_r+0xca>
 8006a94:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006a96:	07d1      	lsls	r1, r2, #31
 8006a98:	d404      	bmi.n	8006aa4 <_vfprintf_r+0xb4>
 8006a9a:	059a      	lsls	r2, r3, #22
 8006a9c:	d402      	bmi.n	8006aa4 <_vfprintf_r+0xb4>
 8006a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aa0:	f003 fe81 	bl	800a7a6 <__retarget_lock_release_recursive>
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4630      	mov	r0, r6
 8006aac:	b04b      	add	sp, #300	; 0x12c
 8006aae:	ecbd 8b04 	vpop	{d8-d9}
 8006ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab6:	f001 b9bf 	b.w	8007e38 <__sbprintf>
 8006aba:	2300      	movs	r3, #0
 8006abc:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8006ac0:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8006d20 <_vfprintf_r+0x330>
 8006ac4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8006ac8:	ac21      	add	r4, sp, #132	; 0x84
 8006aca:	941e      	str	r4, [sp, #120]	; 0x78
 8006acc:	9303      	str	r3, [sp, #12]
 8006ace:	9308      	str	r3, [sp, #32]
 8006ad0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8006ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad6:	4653      	mov	r3, sl
 8006ad8:	461f      	mov	r7, r3
 8006ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ade:	b10a      	cbz	r2, 8006ae4 <_vfprintf_r+0xf4>
 8006ae0:	2a25      	cmp	r2, #37	; 0x25
 8006ae2:	d1f9      	bne.n	8006ad8 <_vfprintf_r+0xe8>
 8006ae4:	ebb7 090a 	subs.w	r9, r7, sl
 8006ae8:	d00d      	beq.n	8006b06 <_vfprintf_r+0x116>
 8006aea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006aec:	444b      	add	r3, r9
 8006aee:	9320      	str	r3, [sp, #128]	; 0x80
 8006af0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006af2:	3301      	adds	r3, #1
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	e9c4 a900 	strd	sl, r9, [r4]
 8006afa:	931f      	str	r3, [sp, #124]	; 0x7c
 8006afc:	dc77      	bgt.n	8006bee <_vfprintf_r+0x1fe>
 8006afe:	3408      	adds	r4, #8
 8006b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b02:	444b      	add	r3, r9
 8006b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b06:	783b      	ldrb	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f001 8150 	beq.w	8007dae <_vfprintf_r+0x13be>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	1c7b      	adds	r3, r7, #1
 8006b12:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8006b16:	f04f 37ff 	mov.w	r7, #4294967295
 8006b1a:	920c      	str	r2, [sp, #48]	; 0x30
 8006b1c:	4693      	mov	fp, r2
 8006b1e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8006b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b26:	9204      	str	r2, [sp, #16]
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	9b04      	ldr	r3, [sp, #16]
 8006b2c:	3b20      	subs	r3, #32
 8006b2e:	2b5a      	cmp	r3, #90	; 0x5a
 8006b30:	f200 85a7 	bhi.w	8007682 <_vfprintf_r+0xc92>
 8006b34:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b38:	05a5007d 	.word	0x05a5007d
 8006b3c:	008505a5 	.word	0x008505a5
 8006b40:	05a505a5 	.word	0x05a505a5
 8006b44:	006505a5 	.word	0x006505a5
 8006b48:	05a505a5 	.word	0x05a505a5
 8006b4c:	00920088 	.word	0x00920088
 8006b50:	008f05a5 	.word	0x008f05a5
 8006b54:	05a50095 	.word	0x05a50095
 8006b58:	00b100ae 	.word	0x00b100ae
 8006b5c:	00b100b1 	.word	0x00b100b1
 8006b60:	00b100b1 	.word	0x00b100b1
 8006b64:	00b100b1 	.word	0x00b100b1
 8006b68:	00b100b1 	.word	0x00b100b1
 8006b6c:	05a505a5 	.word	0x05a505a5
 8006b70:	05a505a5 	.word	0x05a505a5
 8006b74:	05a505a5 	.word	0x05a505a5
 8006b78:	013305a5 	.word	0x013305a5
 8006b7c:	00df05a5 	.word	0x00df05a5
 8006b80:	013300fc 	.word	0x013300fc
 8006b84:	01330133 	.word	0x01330133
 8006b88:	05a505a5 	.word	0x05a505a5
 8006b8c:	05a505a5 	.word	0x05a505a5
 8006b90:	05a500c2 	.word	0x05a500c2
 8006b94:	046905a5 	.word	0x046905a5
 8006b98:	05a505a5 	.word	0x05a505a5
 8006b9c:	04b705a5 	.word	0x04b705a5
 8006ba0:	04db05a5 	.word	0x04db05a5
 8006ba4:	05a505a5 	.word	0x05a505a5
 8006ba8:	05a50501 	.word	0x05a50501
 8006bac:	05a505a5 	.word	0x05a505a5
 8006bb0:	05a505a5 	.word	0x05a505a5
 8006bb4:	05a505a5 	.word	0x05a505a5
 8006bb8:	013305a5 	.word	0x013305a5
 8006bbc:	00df05a5 	.word	0x00df05a5
 8006bc0:	013300fe 	.word	0x013300fe
 8006bc4:	01330133 	.word	0x01330133
 8006bc8:	00fe00c5 	.word	0x00fe00c5
 8006bcc:	05a500d9 	.word	0x05a500d9
 8006bd0:	05a500d2 	.word	0x05a500d2
 8006bd4:	046b043e 	.word	0x046b043e
 8006bd8:	00d904a4 	.word	0x00d904a4
 8006bdc:	04b705a5 	.word	0x04b705a5
 8006be0:	04dd007b 	.word	0x04dd007b
 8006be4:	05a505a5 	.word	0x05a505a5
 8006be8:	05a50522 	.word	0x05a50522
 8006bec:	007b      	.short	0x007b
 8006bee:	aa1e      	add	r2, sp, #120	; 0x78
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f007 fab8 	bl	800e168 <__sprint_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	f040 812a 	bne.w	8006e52 <_vfprintf_r+0x462>
 8006bfe:	ac21      	add	r4, sp, #132	; 0x84
 8006c00:	e77e      	b.n	8006b00 <_vfprintf_r+0x110>
 8006c02:	4630      	mov	r0, r6
 8006c04:	f003 fdc8 	bl	800a798 <_localeconv_r>
 8006c08:	6843      	ldr	r3, [r0, #4]
 8006c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7f9 fb17 	bl	8000240 <strlen>
 8006c12:	900e      	str	r0, [sp, #56]	; 0x38
 8006c14:	4630      	mov	r0, r6
 8006c16:	f003 fdbf 	bl	800a798 <_localeconv_r>
 8006c1a:	6883      	ldr	r3, [r0, #8]
 8006c1c:	9308      	str	r3, [sp, #32]
 8006c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c20:	b12b      	cbz	r3, 8006c2e <_vfprintf_r+0x23e>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	b11b      	cbz	r3, 8006c2e <_vfprintf_r+0x23e>
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b10b      	cbz	r3, 8006c2e <_vfprintf_r+0x23e>
 8006c2a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8006c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c30:	e777      	b.n	8006b22 <_vfprintf_r+0x132>
 8006c32:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f9      	bne.n	8006c2e <_vfprintf_r+0x23e>
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8006c40:	e7f5      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c42:	f04b 0b01 	orr.w	fp, fp, #1
 8006c46:	e7f2      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c48:	f858 3b04 	ldr.w	r3, [r8], #4
 8006c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	daed      	bge.n	8006c2e <_vfprintf_r+0x23e>
 8006c52:	425b      	negs	r3, r3
 8006c54:	930c      	str	r3, [sp, #48]	; 0x30
 8006c56:	f04b 0b04 	orr.w	fp, fp, #4
 8006c5a:	e7e8      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c5c:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 8006c60:	e7e5      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c68:	9204      	str	r2, [sp, #16]
 8006c6a:	2a2a      	cmp	r2, #42	; 0x2a
 8006c6c:	d110      	bne.n	8006c90 <_vfprintf_r+0x2a0>
 8006c6e:	f858 7b04 	ldr.w	r7, [r8], #4
 8006c72:	9309      	str	r3, [sp, #36]	; 0x24
 8006c74:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 8006c78:	e7d9      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c7a:	210a      	movs	r1, #10
 8006c7c:	fb01 2707 	mla	r7, r1, r7, r2
 8006c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c84:	9204      	str	r2, [sp, #16]
 8006c86:	9a04      	ldr	r2, [sp, #16]
 8006c88:	3a30      	subs	r2, #48	; 0x30
 8006c8a:	2a09      	cmp	r2, #9
 8006c8c:	d9f5      	bls.n	8006c7a <_vfprintf_r+0x28a>
 8006c8e:	e74b      	b.n	8006b28 <_vfprintf_r+0x138>
 8006c90:	2700      	movs	r7, #0
 8006c92:	e7f8      	b.n	8006c86 <_vfprintf_r+0x296>
 8006c94:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006c98:	e7c9      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	920c      	str	r2, [sp, #48]	; 0x30
 8006ca0:	9a04      	ldr	r2, [sp, #16]
 8006ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ca4:	3a30      	subs	r2, #48	; 0x30
 8006ca6:	200a      	movs	r0, #10
 8006ca8:	fb00 2201 	mla	r2, r0, r1, r2
 8006cac:	920c      	str	r2, [sp, #48]	; 0x30
 8006cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb2:	9204      	str	r2, [sp, #16]
 8006cb4:	3a30      	subs	r2, #48	; 0x30
 8006cb6:	2a09      	cmp	r2, #9
 8006cb8:	d9f2      	bls.n	8006ca0 <_vfprintf_r+0x2b0>
 8006cba:	e735      	b.n	8006b28 <_vfprintf_r+0x138>
 8006cbc:	f04b 0b08 	orr.w	fp, fp, #8
 8006cc0:	e7b5      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b68      	cmp	r3, #104	; 0x68
 8006cc8:	bf01      	itttt	eq
 8006cca:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 8006ccc:	3301      	addeq	r3, #1
 8006cce:	9309      	streq	r3, [sp, #36]	; 0x24
 8006cd0:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8006cd4:	bf18      	it	ne
 8006cd6:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8006cda:	e7a8      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b6c      	cmp	r3, #108	; 0x6c
 8006ce2:	d105      	bne.n	8006cf0 <_vfprintf_r+0x300>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cea:	f04b 0b20 	orr.w	fp, fp, #32
 8006cee:	e79e      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006cf0:	f04b 0b10 	orr.w	fp, fp, #16
 8006cf4:	e79b      	b.n	8006c2e <_vfprintf_r+0x23e>
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f852 3b04 	ldr.w	r3, [r2], #4
 8006cfe:	9205      	str	r2, [sp, #20]
 8006d00:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8006d04:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8006d08:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8006d0c:	9002      	str	r0, [sp, #8]
 8006d0e:	2701      	movs	r7, #1
 8006d10:	4681      	mov	r9, r0
 8006d12:	4680      	mov	r8, r0
 8006d14:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8006d18:	e19b      	b.n	8007052 <_vfprintf_r+0x662>
 8006d1a:	bf00      	nop
 8006d1c:	f3af 8000 	nop.w
	...
 8006d28:	ffffffff 	.word	0xffffffff
 8006d2c:	7fefffff 	.word	0x7fefffff
 8006d30:	f04b 0b10 	orr.w	fp, fp, #16
 8006d34:	f01b 0f20 	tst.w	fp, #32
 8006d38:	d016      	beq.n	8006d68 <_vfprintf_r+0x378>
 8006d3a:	f108 0807 	add.w	r8, r8, #7
 8006d3e:	f028 0307 	bic.w	r3, r8, #7
 8006d42:	461a      	mov	r2, r3
 8006d44:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8006d48:	f852 8b08 	ldr.w	r8, [r2], #8
 8006d4c:	9205      	str	r2, [sp, #20]
 8006d4e:	f1b9 0f00 	cmp.w	r9, #0
 8006d52:	da07      	bge.n	8006d64 <_vfprintf_r+0x374>
 8006d54:	f1d8 0800 	rsbs	r8, r8, #0
 8006d58:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006d5c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8006d60:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8006d64:	2301      	movs	r3, #1
 8006d66:	e365      	b.n	8007434 <_vfprintf_r+0xa44>
 8006d68:	4642      	mov	r2, r8
 8006d6a:	f01b 0f10 	tst.w	fp, #16
 8006d6e:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	d003      	beq.n	8006d7e <_vfprintf_r+0x38e>
 8006d76:	4698      	mov	r8, r3
 8006d78:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006d7c:	e7e7      	b.n	8006d4e <_vfprintf_r+0x35e>
 8006d7e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006d82:	d004      	beq.n	8006d8e <_vfprintf_r+0x39e>
 8006d84:	fa0f f883 	sxth.w	r8, r3
 8006d88:	f343 39c0 	sbfx	r9, r3, #15, #1
 8006d8c:	e7df      	b.n	8006d4e <_vfprintf_r+0x35e>
 8006d8e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006d92:	d0f0      	beq.n	8006d76 <_vfprintf_r+0x386>
 8006d94:	fa4f f883 	sxtb.w	r8, r3
 8006d98:	f343 19c0 	sbfx	r9, r3, #7, #1
 8006d9c:	e7d7      	b.n	8006d4e <_vfprintf_r+0x35e>
 8006d9e:	f108 0807 	add.w	r8, r8, #7
 8006da2:	f028 0307 	bic.w	r3, r8, #7
 8006da6:	ecb3 8b02 	vldmia	r3!, {d8}
 8006daa:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 8006d28 <_vfprintf_r+0x338>
 8006dae:	eeb0 6bc8 	vabs.f64	d6, d8
 8006db2:	eeb4 6b47 	vcmp.f64	d6, d7
 8006db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	dd18      	ble.n	8006df0 <_vfprintf_r+0x400>
 8006dbe:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	d502      	bpl.n	8006dce <_vfprintf_r+0x3de>
 8006dc8:	232d      	movs	r3, #45	; 0x2d
 8006dca:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8006dce:	4a28      	ldr	r2, [pc, #160]	; (8006e70 <_vfprintf_r+0x480>)
 8006dd0:	4828      	ldr	r0, [pc, #160]	; (8006e74 <_vfprintf_r+0x484>)
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	2b47      	cmp	r3, #71	; 0x47
 8006dd6:	bfd4      	ite	le
 8006dd8:	4692      	movle	sl, r2
 8006dda:	4682      	movgt	sl, r0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8006de2:	9302      	str	r3, [sp, #8]
 8006de4:	2703      	movs	r7, #3
 8006de6:	4699      	mov	r9, r3
 8006de8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006dec:	4698      	mov	r8, r3
 8006dee:	e130      	b.n	8007052 <_vfprintf_r+0x662>
 8006df0:	eeb4 8b48 	vcmp.f64	d8, d8
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	d70a      	bvc.n	8006e10 <_vfprintf_r+0x420>
 8006dfa:	ee18 3a90 	vmov	r3, s17
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bfb8      	it	lt
 8006e02:	232d      	movlt	r3, #45	; 0x2d
 8006e04:	4a1c      	ldr	r2, [pc, #112]	; (8006e78 <_vfprintf_r+0x488>)
 8006e06:	481d      	ldr	r0, [pc, #116]	; (8006e7c <_vfprintf_r+0x48c>)
 8006e08:	bfb8      	it	lt
 8006e0a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 8006e0e:	e7e0      	b.n	8006dd2 <_vfprintf_r+0x3e2>
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	f023 0920 	bic.w	r9, r3, #32
 8006e16:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8006e1a:	d131      	bne.n	8006e80 <_vfprintf_r+0x490>
 8006e1c:	2330      	movs	r3, #48	; 0x30
 8006e1e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	2b61      	cmp	r3, #97	; 0x61
 8006e26:	bf0c      	ite	eq
 8006e28:	2378      	moveq	r3, #120	; 0x78
 8006e2a:	2358      	movne	r3, #88	; 0x58
 8006e2c:	2f63      	cmp	r7, #99	; 0x63
 8006e2e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8006e32:	f04b 0b02 	orr.w	fp, fp, #2
 8006e36:	f340 81e3 	ble.w	8007200 <_vfprintf_r+0x810>
 8006e3a:	1c79      	adds	r1, r7, #1
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f003 fd2f 	bl	800a8a0 <_malloc_r>
 8006e42:	4682      	mov	sl, r0
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 81e0 	bne.w	800720a <_vfprintf_r+0x81a>
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e50:	81ab      	strh	r3, [r5, #12]
 8006e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e54:	07d9      	lsls	r1, r3, #31
 8006e56:	d405      	bmi.n	8006e64 <_vfprintf_r+0x474>
 8006e58:	89ab      	ldrh	r3, [r5, #12]
 8006e5a:	059a      	lsls	r2, r3, #22
 8006e5c:	d402      	bmi.n	8006e64 <_vfprintf_r+0x474>
 8006e5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e60:	f003 fca1 	bl	800a7a6 <__retarget_lock_release_recursive>
 8006e64:	89ab      	ldrh	r3, [r5, #12]
 8006e66:	065b      	lsls	r3, r3, #25
 8006e68:	f57f adfe 	bpl.w	8006a68 <_vfprintf_r+0x78>
 8006e6c:	e5f9      	b.n	8006a62 <_vfprintf_r+0x72>
 8006e6e:	bf00      	nop
 8006e70:	08010d49 	.word	0x08010d49
 8006e74:	08010d4d 	.word	0x08010d4d
 8006e78:	08010d51 	.word	0x08010d51
 8006e7c:	08010d55 	.word	0x08010d55
 8006e80:	1c7b      	adds	r3, r7, #1
 8006e82:	f000 81c4 	beq.w	800720e <_vfprintf_r+0x81e>
 8006e86:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e8a:	f040 81c4 	bne.w	8007216 <_vfprintf_r+0x826>
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	f040 81c1 	bne.w	8007216 <_vfprintf_r+0x826>
 8006e94:	9702      	str	r7, [sp, #8]
 8006e96:	2701      	movs	r7, #1
 8006e98:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8006e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e9e:	ee18 3a90 	vmov	r3, s17
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f280 81ba 	bge.w	800721c <_vfprintf_r+0x82c>
 8006ea8:	eeb1 9b48 	vneg.f64	d9, d8
 8006eac:	232d      	movs	r3, #45	; 0x2d
 8006eae:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8006eb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eb4:	f040 81cb 	bne.w	800724e <_vfprintf_r+0x85e>
 8006eb8:	eeb0 0b49 	vmov.f64	d0, d9
 8006ebc:	a818      	add	r0, sp, #96	; 0x60
 8006ebe:	f004 fe33 	bl	800bb28 <frexp>
 8006ec2:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8006ec6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006eca:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8006ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed2:	bf08      	it	eq
 8006ed4:	2301      	moveq	r3, #1
 8006ed6:	9a04      	ldr	r2, [sp, #16]
 8006ed8:	bf08      	it	eq
 8006eda:	9318      	streq	r3, [sp, #96]	; 0x60
 8006edc:	49b7      	ldr	r1, [pc, #732]	; (80071bc <_vfprintf_r+0x7cc>)
 8006ede:	4bb8      	ldr	r3, [pc, #736]	; (80071c0 <_vfprintf_r+0x7d0>)
 8006ee0:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8006ee4:	2a61      	cmp	r2, #97	; 0x61
 8006ee6:	bf18      	it	ne
 8006ee8:	4619      	movne	r1, r3
 8006eea:	1e7a      	subs	r2, r7, #1
 8006eec:	4653      	mov	r3, sl
 8006eee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006ef2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8006ef6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006efa:	ee16 ca90 	vmov	ip, s13
 8006efe:	f811 000c 	ldrb.w	r0, [r1, ip]
 8006f02:	f803 0b01 	strb.w	r0, [r3], #1
 8006f06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006f10:	d006      	beq.n	8006f20 <_vfprintf_r+0x530>
 8006f12:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f1e:	d1e6      	bne.n	8006eee <_vfprintf_r+0x4fe>
 8006f20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006f24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	dc09      	bgt.n	8006f42 <_vfprintf_r+0x552>
 8006f2e:	eeb4 0b47 	vcmp.f64	d0, d7
 8006f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f36:	f040 8184 	bne.w	8007242 <_vfprintf_r+0x852>
 8006f3a:	f01c 0f01 	tst.w	ip, #1
 8006f3e:	f000 8180 	beq.w	8007242 <_vfprintf_r+0x852>
 8006f42:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8006f46:	931c      	str	r3, [sp, #112]	; 0x70
 8006f48:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006f4c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8006f4e:	1e42      	subs	r2, r0, #1
 8006f50:	921c      	str	r2, [sp, #112]	; 0x70
 8006f52:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8006f56:	4562      	cmp	r2, ip
 8006f58:	f000 8164 	beq.w	8007224 <_vfprintf_r+0x834>
 8006f5c:	2a39      	cmp	r2, #57	; 0x39
 8006f5e:	bf16      	itet	ne
 8006f60:	3201      	addne	r2, #1
 8006f62:	7a8a      	ldrbeq	r2, [r1, #10]
 8006f64:	b2d2      	uxtbne	r2, r2
 8006f66:	f800 2c01 	strb.w	r2, [r0, #-1]
 8006f6a:	eba3 030a 	sub.w	r3, r3, sl
 8006f6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f72:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	f040 81ac 	bne.w	80072d4 <_vfprintf_r+0x8e4>
 8006f7c:	f118 0f03 	cmn.w	r8, #3
 8006f80:	db02      	blt.n	8006f88 <_vfprintf_r+0x598>
 8006f82:	4547      	cmp	r7, r8
 8006f84:	f280 81ce 	bge.w	8007324 <_vfprintf_r+0x934>
 8006f88:	9b04      	ldr	r3, [sp, #16]
 8006f8a:	3b02      	subs	r3, #2
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	9904      	ldr	r1, [sp, #16]
 8006f90:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8006f94:	f021 0120 	bic.w	r1, r1, #32
 8006f98:	2941      	cmp	r1, #65	; 0x41
 8006f9a:	bf08      	it	eq
 8006f9c:	320f      	addeq	r2, #15
 8006f9e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006fa2:	bf06      	itte	eq
 8006fa4:	b2d2      	uxtbeq	r2, r2
 8006fa6:	2101      	moveq	r1, #1
 8006fa8:	2100      	movne	r1, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	9318      	str	r3, [sp, #96]	; 0x60
 8006fae:	bfb8      	it	lt
 8006fb0:	f1c8 0301 	rsblt	r3, r8, #1
 8006fb4:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8006fb8:	bfb4      	ite	lt
 8006fba:	222d      	movlt	r2, #45	; 0x2d
 8006fbc:	222b      	movge	r2, #43	; 0x2b
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8006fc4:	f340 819d 	ble.w	8007302 <_vfprintf_r+0x912>
 8006fc8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 8006fcc:	200a      	movs	r0, #10
 8006fce:	4611      	mov	r1, r2
 8006fd0:	fb93 f7f0 	sdiv	r7, r3, r0
 8006fd4:	fb00 3017 	mls	r0, r0, r7, r3
 8006fd8:	3030      	adds	r0, #48	; 0x30
 8006fda:	f801 0c01 	strb.w	r0, [r1, #-1]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	2863      	cmp	r0, #99	; 0x63
 8006fe2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	dcf0      	bgt.n	8006fcc <_vfprintf_r+0x5dc>
 8006fea:	3330      	adds	r3, #48	; 0x30
 8006fec:	1e88      	subs	r0, r1, #2
 8006fee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ff2:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8006ff6:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	f0c0 817b 	bcc.w	80072f8 <_vfprintf_r+0x908>
 8007002:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8007006:	1a52      	subs	r2, r2, r1
 8007008:	42b8      	cmp	r0, r7
 800700a:	bf88      	it	hi
 800700c:	2200      	movhi	r2, #0
 800700e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8007012:	441a      	add	r2, r3
 8007014:	ab1a      	add	r3, sp, #104	; 0x68
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	9a03      	ldr	r2, [sp, #12]
 800701a:	9311      	str	r3, [sp, #68]	; 0x44
 800701c:	2a01      	cmp	r2, #1
 800701e:	eb03 0702 	add.w	r7, r3, r2
 8007022:	dc02      	bgt.n	800702a <_vfprintf_r+0x63a>
 8007024:	f01b 0f01 	tst.w	fp, #1
 8007028:	d001      	beq.n	800702e <_vfprintf_r+0x63e>
 800702a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702c:	441f      	add	r7, r3
 800702e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8007032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007036:	930d      	str	r3, [sp, #52]	; 0x34
 8007038:	2300      	movs	r3, #0
 800703a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800703e:	4698      	mov	r8, r3
 8007040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007042:	b113      	cbz	r3, 800704a <_vfprintf_r+0x65a>
 8007044:	232d      	movs	r3, #45	; 0x2d
 8007046:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800704a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800704e:	f04f 0900 	mov.w	r9, #0
 8007052:	45b9      	cmp	r9, r7
 8007054:	464b      	mov	r3, r9
 8007056:	bfb8      	it	lt
 8007058:	463b      	movlt	r3, r7
 800705a:	930d      	str	r3, [sp, #52]	; 0x34
 800705c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8007060:	b113      	cbz	r3, 8007068 <_vfprintf_r+0x678>
 8007062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007064:	3301      	adds	r3, #1
 8007066:	930d      	str	r3, [sp, #52]	; 0x34
 8007068:	f01b 0302 	ands.w	r3, fp, #2
 800706c:	9313      	str	r3, [sp, #76]	; 0x4c
 800706e:	bf1e      	ittt	ne
 8007070:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8007072:	3302      	addne	r3, #2
 8007074:	930d      	strne	r3, [sp, #52]	; 0x34
 8007076:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800707a:	9314      	str	r3, [sp, #80]	; 0x50
 800707c:	d120      	bne.n	80070c0 <_vfprintf_r+0x6d0>
 800707e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	dd1b      	ble.n	80070c0 <_vfprintf_r+0x6d0>
 8007088:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800708c:	494d      	ldr	r1, [pc, #308]	; (80071c4 <_vfprintf_r+0x7d4>)
 800708e:	6021      	str	r1, [r4, #0]
 8007090:	2b10      	cmp	r3, #16
 8007092:	f102 0201 	add.w	r2, r2, #1
 8007096:	f104 0008 	add.w	r0, r4, #8
 800709a:	f300 8302 	bgt.w	80076a2 <_vfprintf_r+0xcb2>
 800709e:	eb0c 0103 	add.w	r1, ip, r3
 80070a2:	2a07      	cmp	r2, #7
 80070a4:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	f340 830f 	ble.w	80076cc <_vfprintf_r+0xcdc>
 80070ae:	aa1e      	add	r2, sp, #120	; 0x78
 80070b0:	4629      	mov	r1, r5
 80070b2:	4630      	mov	r0, r6
 80070b4:	f007 f858 	bl	800e168 <__sprint_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f040 8655 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80070be:	ac21      	add	r4, sp, #132	; 0x84
 80070c0:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80070c4:	b173      	cbz	r3, 80070e4 <_vfprintf_r+0x6f4>
 80070c6:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	2301      	movs	r3, #1
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070d2:	3301      	adds	r3, #1
 80070d4:	9320      	str	r3, [sp, #128]	; 0x80
 80070d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070d8:	3301      	adds	r3, #1
 80070da:	2b07      	cmp	r3, #7
 80070dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80070de:	f300 82f7 	bgt.w	80076d0 <_vfprintf_r+0xce0>
 80070e2:	3408      	adds	r4, #8
 80070e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070e6:	b16b      	cbz	r3, 8007104 <_vfprintf_r+0x714>
 80070e8:	ab17      	add	r3, sp, #92	; 0x5c
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	2302      	movs	r3, #2
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070f2:	3302      	adds	r3, #2
 80070f4:	9320      	str	r3, [sp, #128]	; 0x80
 80070f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070f8:	3301      	adds	r3, #1
 80070fa:	2b07      	cmp	r3, #7
 80070fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80070fe:	f300 82f1 	bgt.w	80076e4 <_vfprintf_r+0xcf4>
 8007102:	3408      	adds	r4, #8
 8007104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d120      	bne.n	800714c <_vfprintf_r+0x75c>
 800710a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	dd1b      	ble.n	800714c <_vfprintf_r+0x75c>
 8007114:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8007118:	492b      	ldr	r1, [pc, #172]	; (80071c8 <_vfprintf_r+0x7d8>)
 800711a:	6021      	str	r1, [r4, #0]
 800711c:	2b10      	cmp	r3, #16
 800711e:	f102 0201 	add.w	r2, r2, #1
 8007122:	f104 0008 	add.w	r0, r4, #8
 8007126:	f300 82e7 	bgt.w	80076f8 <_vfprintf_r+0xd08>
 800712a:	eb0c 0103 	add.w	r1, ip, r3
 800712e:	2a07      	cmp	r2, #7
 8007130:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	f340 82f4 	ble.w	8007722 <_vfprintf_r+0xd32>
 800713a:	aa1e      	add	r2, sp, #120	; 0x78
 800713c:	4629      	mov	r1, r5
 800713e:	4630      	mov	r0, r6
 8007140:	f007 f812 	bl	800e168 <__sprint_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	f040 860f 	bne.w	8007d68 <_vfprintf_r+0x1378>
 800714a:	ac21      	add	r4, sp, #132	; 0x84
 800714c:	eba9 0907 	sub.w	r9, r9, r7
 8007150:	f1b9 0f00 	cmp.w	r9, #0
 8007154:	dd1c      	ble.n	8007190 <_vfprintf_r+0x7a0>
 8007156:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800715a:	481b      	ldr	r0, [pc, #108]	; (80071c8 <_vfprintf_r+0x7d8>)
 800715c:	6020      	str	r0, [r4, #0]
 800715e:	f1b9 0f10 	cmp.w	r9, #16
 8007162:	f102 0201 	add.w	r2, r2, #1
 8007166:	f104 0108 	add.w	r1, r4, #8
 800716a:	f300 82dc 	bgt.w	8007726 <_vfprintf_r+0xd36>
 800716e:	444b      	add	r3, r9
 8007170:	2a07      	cmp	r2, #7
 8007172:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8007176:	f8c4 9004 	str.w	r9, [r4, #4]
 800717a:	f340 82e8 	ble.w	800774e <_vfprintf_r+0xd5e>
 800717e:	aa1e      	add	r2, sp, #120	; 0x78
 8007180:	4629      	mov	r1, r5
 8007182:	4630      	mov	r0, r6
 8007184:	f006 fff0 	bl	800e168 <__sprint_r>
 8007188:	2800      	cmp	r0, #0
 800718a:	f040 85ed 	bne.w	8007d68 <_vfprintf_r+0x1378>
 800718e:	ac21      	add	r4, sp, #132	; 0x84
 8007190:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007194:	9820      	ldr	r0, [sp, #128]	; 0x80
 8007196:	f040 82e1 	bne.w	800775c <_vfprintf_r+0xd6c>
 800719a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800719c:	3301      	adds	r3, #1
 800719e:	4438      	add	r0, r7
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	e9c4 a700 	strd	sl, r7, [r4]
 80071a6:	9020      	str	r0, [sp, #128]	; 0x80
 80071a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80071aa:	f300 831c 	bgt.w	80077e6 <_vfprintf_r+0xdf6>
 80071ae:	3408      	adds	r4, #8
 80071b0:	f01b 0f04 	tst.w	fp, #4
 80071b4:	f040 85b7 	bne.w	8007d26 <_vfprintf_r+0x1336>
 80071b8:	e008      	b.n	80071cc <_vfprintf_r+0x7dc>
 80071ba:	bf00      	nop
 80071bc:	08010d59 	.word	0x08010d59
 80071c0:	08010d6a 	.word	0x08010d6a
 80071c4:	08010d7d 	.word	0x08010d7d
 80071c8:	08010d8d 	.word	0x08010d8d
 80071cc:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 80071d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071d2:	428a      	cmp	r2, r1
 80071d4:	bfac      	ite	ge
 80071d6:	189b      	addge	r3, r3, r2
 80071d8:	185b      	addlt	r3, r3, r1
 80071da:	930b      	str	r3, [sp, #44]	; 0x2c
 80071dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071de:	b13b      	cbz	r3, 80071f0 <_vfprintf_r+0x800>
 80071e0:	aa1e      	add	r2, sp, #120	; 0x78
 80071e2:	4629      	mov	r1, r5
 80071e4:	4630      	mov	r0, r6
 80071e6:	f006 ffbf 	bl	800e168 <__sprint_r>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f040 85bc 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80071f0:	2300      	movs	r3, #0
 80071f2:	931f      	str	r3, [sp, #124]	; 0x7c
 80071f4:	9b02      	ldr	r3, [sp, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f040 85d3 	bne.w	8007da2 <_vfprintf_r+0x13b2>
 80071fc:	ac21      	add	r4, sp, #132	; 0x84
 80071fe:	e0e6      	b.n	80073ce <_vfprintf_r+0x9de>
 8007200:	2300      	movs	r3, #0
 8007202:	9302      	str	r3, [sp, #8]
 8007204:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8007208:	e646      	b.n	8006e98 <_vfprintf_r+0x4a8>
 800720a:	9002      	str	r0, [sp, #8]
 800720c:	e644      	b.n	8006e98 <_vfprintf_r+0x4a8>
 800720e:	2300      	movs	r3, #0
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	2706      	movs	r7, #6
 8007214:	e640      	b.n	8006e98 <_vfprintf_r+0x4a8>
 8007216:	2300      	movs	r3, #0
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	e63d      	b.n	8006e98 <_vfprintf_r+0x4a8>
 800721c:	2300      	movs	r3, #0
 800721e:	eeb0 9b48 	vmov.f64	d9, d8
 8007222:	e644      	b.n	8006eae <_vfprintf_r+0x4be>
 8007224:	f800 ec01 	strb.w	lr, [r0, #-1]
 8007228:	e690      	b.n	8006f4c <_vfprintf_r+0x55c>
 800722a:	f802 eb01 	strb.w	lr, [r2], #1
 800722e:	ebac 0102 	sub.w	r1, ip, r2
 8007232:	2900      	cmp	r1, #0
 8007234:	daf9      	bge.n	800722a <_vfprintf_r+0x83a>
 8007236:	1c42      	adds	r2, r0, #1
 8007238:	3001      	adds	r0, #1
 800723a:	bfb8      	it	lt
 800723c:	2200      	movlt	r2, #0
 800723e:	4413      	add	r3, r2
 8007240:	e693      	b.n	8006f6a <_vfprintf_r+0x57a>
 8007242:	461a      	mov	r2, r3
 8007244:	eb03 0c00 	add.w	ip, r3, r0
 8007248:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800724c:	e7ef      	b.n	800722e <_vfprintf_r+0x83e>
 800724e:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8007252:	d006      	beq.n	8007262 <_vfprintf_r+0x872>
 8007254:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8007258:	d119      	bne.n	800728e <_vfprintf_r+0x89e>
 800725a:	f107 0801 	add.w	r8, r7, #1
 800725e:	2102      	movs	r1, #2
 8007260:	e001      	b.n	8007266 <_vfprintf_r+0x876>
 8007262:	46b8      	mov	r8, r7
 8007264:	2103      	movs	r1, #3
 8007266:	ab1c      	add	r3, sp, #112	; 0x70
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	ab19      	add	r3, sp, #100	; 0x64
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4642      	mov	r2, r8
 8007270:	ab18      	add	r3, sp, #96	; 0x60
 8007272:	4630      	mov	r0, r6
 8007274:	eeb0 0b49 	vmov.f64	d0, d9
 8007278:	f002 f8da 	bl	8009430 <_dtoa_r>
 800727c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007280:	4682      	mov	sl, r0
 8007282:	d106      	bne.n	8007292 <_vfprintf_r+0x8a2>
 8007284:	f01b 0f01 	tst.w	fp, #1
 8007288:	d103      	bne.n	8007292 <_vfprintf_r+0x8a2>
 800728a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800728c:	e66d      	b.n	8006f6a <_vfprintf_r+0x57a>
 800728e:	46b8      	mov	r8, r7
 8007290:	e7e5      	b.n	800725e <_vfprintf_r+0x86e>
 8007292:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8007296:	eb0a 0308 	add.w	r3, sl, r8
 800729a:	d10d      	bne.n	80072b8 <_vfprintf_r+0x8c8>
 800729c:	f89a 2000 	ldrb.w	r2, [sl]
 80072a0:	2a30      	cmp	r2, #48	; 0x30
 80072a2:	d107      	bne.n	80072b4 <_vfprintf_r+0x8c4>
 80072a4:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80072a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ac:	bf1c      	itt	ne
 80072ae:	f1c8 0201 	rsbne	r2, r8, #1
 80072b2:	9218      	strne	r2, [sp, #96]	; 0x60
 80072b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072b6:	4413      	add	r3, r2
 80072b8:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80072bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c0:	bf08      	it	eq
 80072c2:	931c      	streq	r3, [sp, #112]	; 0x70
 80072c4:	2130      	movs	r1, #48	; 0x30
 80072c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d9de      	bls.n	800728a <_vfprintf_r+0x89a>
 80072cc:	1c50      	adds	r0, r2, #1
 80072ce:	901c      	str	r0, [sp, #112]	; 0x70
 80072d0:	7011      	strb	r1, [r2, #0]
 80072d2:	e7f8      	b.n	80072c6 <_vfprintf_r+0x8d6>
 80072d4:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80072d8:	f47f ae59 	bne.w	8006f8e <_vfprintf_r+0x59e>
 80072dc:	f00b 0301 	and.w	r3, fp, #1
 80072e0:	f1b8 0f00 	cmp.w	r8, #0
 80072e4:	ea43 0307 	orr.w	r3, r3, r7
 80072e8:	dd18      	ble.n	800731c <_vfprintf_r+0x92c>
 80072ea:	b38b      	cbz	r3, 8007350 <_vfprintf_r+0x960>
 80072ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ee:	4443      	add	r3, r8
 80072f0:	441f      	add	r7, r3
 80072f2:	2366      	movs	r3, #102	; 0x66
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	e030      	b.n	800735a <_vfprintf_r+0x96a>
 80072f8:	f813 cb01 	ldrb.w	ip, [r3], #1
 80072fc:	f802 cb01 	strb.w	ip, [r2], #1
 8007300:	e67c      	b.n	8006ffc <_vfprintf_r+0x60c>
 8007302:	b941      	cbnz	r1, 8007316 <_vfprintf_r+0x926>
 8007304:	2230      	movs	r2, #48	; 0x30
 8007306:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800730a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800730e:	3330      	adds	r3, #48	; 0x30
 8007310:	f802 3b01 	strb.w	r3, [r2], #1
 8007314:	e67e      	b.n	8007014 <_vfprintf_r+0x624>
 8007316:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800731a:	e7f8      	b.n	800730e <_vfprintf_r+0x91e>
 800731c:	b1d3      	cbz	r3, 8007354 <_vfprintf_r+0x964>
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	3301      	adds	r3, #1
 8007322:	e7e5      	b.n	80072f0 <_vfprintf_r+0x900>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	4543      	cmp	r3, r8
 8007328:	dc07      	bgt.n	800733a <_vfprintf_r+0x94a>
 800732a:	f01b 0f01 	tst.w	fp, #1
 800732e:	d02a      	beq.n	8007386 <_vfprintf_r+0x996>
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	eb08 0703 	add.w	r7, r8, r3
 8007336:	2367      	movs	r3, #103	; 0x67
 8007338:	e7dc      	b.n	80072f4 <_vfprintf_r+0x904>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733e:	f1b8 0f00 	cmp.w	r8, #0
 8007342:	eb03 0702 	add.w	r7, r3, r2
 8007346:	dcf6      	bgt.n	8007336 <_vfprintf_r+0x946>
 8007348:	f1c8 0301 	rsb	r3, r8, #1
 800734c:	441f      	add	r7, r3
 800734e:	e7f2      	b.n	8007336 <_vfprintf_r+0x946>
 8007350:	4647      	mov	r7, r8
 8007352:	e7ce      	b.n	80072f2 <_vfprintf_r+0x902>
 8007354:	2366      	movs	r3, #102	; 0x66
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	2701      	movs	r7, #1
 800735a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	d025      	beq.n	80073ae <_vfprintf_r+0x9be>
 8007362:	2300      	movs	r3, #0
 8007364:	f1b8 0f00 	cmp.w	r8, #0
 8007368:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800736c:	f77f ae68 	ble.w	8007040 <_vfprintf_r+0x650>
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2bff      	cmp	r3, #255	; 0xff
 8007376:	d108      	bne.n	800738a <_vfprintf_r+0x99a>
 8007378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800737c:	4413      	add	r3, r2
 800737e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007380:	fb02 7703 	mla	r7, r2, r3, r7
 8007384:	e65c      	b.n	8007040 <_vfprintf_r+0x650>
 8007386:	4647      	mov	r7, r8
 8007388:	e7d5      	b.n	8007336 <_vfprintf_r+0x946>
 800738a:	4543      	cmp	r3, r8
 800738c:	daf4      	bge.n	8007378 <_vfprintf_r+0x988>
 800738e:	eba8 0803 	sub.w	r8, r8, r3
 8007392:	9b08      	ldr	r3, [sp, #32]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	b133      	cbz	r3, 80073a6 <_vfprintf_r+0x9b6>
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	3301      	adds	r3, #1
 800739c:	9307      	str	r3, [sp, #28]
 800739e:	9b08      	ldr	r3, [sp, #32]
 80073a0:	3301      	adds	r3, #1
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	e7e4      	b.n	8007370 <_vfprintf_r+0x980>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	3301      	adds	r3, #1
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	e7e0      	b.n	8007370 <_vfprintf_r+0x980>
 80073ae:	9b07      	ldr	r3, [sp, #28]
 80073b0:	9306      	str	r3, [sp, #24]
 80073b2:	e645      	b.n	8007040 <_vfprintf_r+0x650>
 80073b4:	f108 0304 	add.w	r3, r8, #4
 80073b8:	f01b 0f20 	tst.w	fp, #32
 80073bc:	9305      	str	r3, [sp, #20]
 80073be:	d00c      	beq.n	80073da <_vfprintf_r+0x9ea>
 80073c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073c2:	f8d8 3000 	ldr.w	r3, [r8]
 80073c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073c8:	17d2      	asrs	r2, r2, #31
 80073ca:	e9c3 1200 	strd	r1, r2, [r3]
 80073ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80073d2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80073d6:	f7ff bb7e 	b.w	8006ad6 <_vfprintf_r+0xe6>
 80073da:	f01b 0f10 	tst.w	fp, #16
 80073de:	d004      	beq.n	80073ea <_vfprintf_r+0x9fa>
 80073e0:	f8d8 3000 	ldr.w	r3, [r8]
 80073e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e7f1      	b.n	80073ce <_vfprintf_r+0x9de>
 80073ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80073ee:	d004      	beq.n	80073fa <_vfprintf_r+0xa0a>
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e7e9      	b.n	80073ce <_vfprintf_r+0x9de>
 80073fa:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80073fe:	d0ef      	beq.n	80073e0 <_vfprintf_r+0x9f0>
 8007400:	f8d8 3000 	ldr.w	r3, [r8]
 8007404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e7e1      	b.n	80073ce <_vfprintf_r+0x9de>
 800740a:	f04b 0b10 	orr.w	fp, fp, #16
 800740e:	f01b 0320 	ands.w	r3, fp, #32
 8007412:	d020      	beq.n	8007456 <_vfprintf_r+0xa66>
 8007414:	f108 0807 	add.w	r8, r8, #7
 8007418:	f028 0307 	bic.w	r3, r8, #7
 800741c:	461a      	mov	r2, r3
 800741e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007422:	f852 8b08 	ldr.w	r8, [r2], #8
 8007426:	9205      	str	r2, [sp, #20]
 8007428:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800742c:	2300      	movs	r3, #0
 800742e:	2200      	movs	r2, #0
 8007430:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8007434:	1c7a      	adds	r2, r7, #1
 8007436:	f000 84cd 	beq.w	8007dd4 <_vfprintf_r+0x13e4>
 800743a:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800743e:	9202      	str	r2, [sp, #8]
 8007440:	ea58 0209 	orrs.w	r2, r8, r9
 8007444:	f040 84cc 	bne.w	8007de0 <_vfprintf_r+0x13f0>
 8007448:	2f00      	cmp	r7, #0
 800744a:	f000 810f 	beq.w	800766c <_vfprintf_r+0xc7c>
 800744e:	2b01      	cmp	r3, #1
 8007450:	f040 84c9 	bne.w	8007de6 <_vfprintf_r+0x13f6>
 8007454:	e0ae      	b.n	80075b4 <_vfprintf_r+0xbc4>
 8007456:	4642      	mov	r2, r8
 8007458:	f01b 0910 	ands.w	r9, fp, #16
 800745c:	f852 8b04 	ldr.w	r8, [r2], #4
 8007460:	9205      	str	r2, [sp, #20]
 8007462:	d001      	beq.n	8007468 <_vfprintf_r+0xa78>
 8007464:	4699      	mov	r9, r3
 8007466:	e7df      	b.n	8007428 <_vfprintf_r+0xa38>
 8007468:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800746c:	d002      	beq.n	8007474 <_vfprintf_r+0xa84>
 800746e:	fa1f f888 	uxth.w	r8, r8
 8007472:	e7d9      	b.n	8007428 <_vfprintf_r+0xa38>
 8007474:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007478:	d0d6      	beq.n	8007428 <_vfprintf_r+0xa38>
 800747a:	fa5f f888 	uxtb.w	r8, r8
 800747e:	e7f1      	b.n	8007464 <_vfprintf_r+0xa74>
 8007480:	4643      	mov	r3, r8
 8007482:	2278      	movs	r2, #120	; 0x78
 8007484:	f853 8b04 	ldr.w	r8, [r3], #4
 8007488:	9305      	str	r3, [sp, #20]
 800748a:	2330      	movs	r3, #48	; 0x30
 800748c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8007490:	4bb0      	ldr	r3, [pc, #704]	; (8007754 <_vfprintf_r+0xd64>)
 8007492:	9312      	str	r3, [sp, #72]	; 0x48
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	f04b 0b02 	orr.w	fp, fp, #2
 800749c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 80074a0:	2302      	movs	r3, #2
 80074a2:	9204      	str	r2, [sp, #16]
 80074a4:	e7c3      	b.n	800742e <_vfprintf_r+0xa3e>
 80074a6:	4643      	mov	r3, r8
 80074a8:	1c79      	adds	r1, r7, #1
 80074aa:	f853 ab04 	ldr.w	sl, [r3], #4
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	f04f 0800 	mov.w	r8, #0
 80074b4:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 80074b8:	d010      	beq.n	80074dc <_vfprintf_r+0xaec>
 80074ba:	463a      	mov	r2, r7
 80074bc:	4641      	mov	r1, r8
 80074be:	4650      	mov	r0, sl
 80074c0:	f7f8 fec6 	bl	8000250 <memchr>
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f000 80e8 	beq.w	800769c <_vfprintf_r+0xcac>
 80074cc:	e9cd 8806 	strd	r8, r8, [sp, #24]
 80074d0:	eba0 070a 	sub.w	r7, r0, sl
 80074d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80074d8:	46c1      	mov	r9, r8
 80074da:	e5ba      	b.n	8007052 <_vfprintf_r+0x662>
 80074dc:	4650      	mov	r0, sl
 80074de:	f7f8 feaf 	bl	8000240 <strlen>
 80074e2:	46c1      	mov	r9, r8
 80074e4:	4607      	mov	r7, r0
 80074e6:	f8cd 8008 	str.w	r8, [sp, #8]
 80074ea:	464b      	mov	r3, r9
 80074ec:	e47c      	b.n	8006de8 <_vfprintf_r+0x3f8>
 80074ee:	f04b 0b10 	orr.w	fp, fp, #16
 80074f2:	f01b 0320 	ands.w	r3, fp, #32
 80074f6:	d00b      	beq.n	8007510 <_vfprintf_r+0xb20>
 80074f8:	f108 0807 	add.w	r8, r8, #7
 80074fc:	f028 0307 	bic.w	r3, r8, #7
 8007500:	461a      	mov	r2, r3
 8007502:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007506:	f852 8b08 	ldr.w	r8, [r2], #8
 800750a:	9205      	str	r2, [sp, #20]
 800750c:	2301      	movs	r3, #1
 800750e:	e78e      	b.n	800742e <_vfprintf_r+0xa3e>
 8007510:	4642      	mov	r2, r8
 8007512:	f01b 0910 	ands.w	r9, fp, #16
 8007516:	f852 8b04 	ldr.w	r8, [r2], #4
 800751a:	9205      	str	r2, [sp, #20]
 800751c:	d001      	beq.n	8007522 <_vfprintf_r+0xb32>
 800751e:	4699      	mov	r9, r3
 8007520:	e7f4      	b.n	800750c <_vfprintf_r+0xb1c>
 8007522:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007526:	d002      	beq.n	800752e <_vfprintf_r+0xb3e>
 8007528:	fa1f f888 	uxth.w	r8, r8
 800752c:	e7ee      	b.n	800750c <_vfprintf_r+0xb1c>
 800752e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007532:	d0eb      	beq.n	800750c <_vfprintf_r+0xb1c>
 8007534:	fa5f f888 	uxtb.w	r8, r8
 8007538:	e7f1      	b.n	800751e <_vfprintf_r+0xb2e>
 800753a:	4b87      	ldr	r3, [pc, #540]	; (8007758 <_vfprintf_r+0xd68>)
 800753c:	9312      	str	r3, [sp, #72]	; 0x48
 800753e:	f01b 0320 	ands.w	r3, fp, #32
 8007542:	d01d      	beq.n	8007580 <_vfprintf_r+0xb90>
 8007544:	f108 0807 	add.w	r8, r8, #7
 8007548:	f028 0307 	bic.w	r3, r8, #7
 800754c:	461a      	mov	r2, r3
 800754e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007552:	f852 8b08 	ldr.w	r8, [r2], #8
 8007556:	9205      	str	r2, [sp, #20]
 8007558:	f01b 0f01 	tst.w	fp, #1
 800755c:	d00a      	beq.n	8007574 <_vfprintf_r+0xb84>
 800755e:	ea58 0309 	orrs.w	r3, r8, r9
 8007562:	d007      	beq.n	8007574 <_vfprintf_r+0xb84>
 8007564:	2330      	movs	r3, #48	; 0x30
 8007566:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800756a:	9b04      	ldr	r3, [sp, #16]
 800756c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8007570:	f04b 0b02 	orr.w	fp, fp, #2
 8007574:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007578:	2302      	movs	r3, #2
 800757a:	e758      	b.n	800742e <_vfprintf_r+0xa3e>
 800757c:	4b75      	ldr	r3, [pc, #468]	; (8007754 <_vfprintf_r+0xd64>)
 800757e:	e7dd      	b.n	800753c <_vfprintf_r+0xb4c>
 8007580:	4642      	mov	r2, r8
 8007582:	f01b 0910 	ands.w	r9, fp, #16
 8007586:	f852 8b04 	ldr.w	r8, [r2], #4
 800758a:	9205      	str	r2, [sp, #20]
 800758c:	d001      	beq.n	8007592 <_vfprintf_r+0xba2>
 800758e:	4699      	mov	r9, r3
 8007590:	e7e2      	b.n	8007558 <_vfprintf_r+0xb68>
 8007592:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007596:	d002      	beq.n	800759e <_vfprintf_r+0xbae>
 8007598:	fa1f f888 	uxth.w	r8, r8
 800759c:	e7dc      	b.n	8007558 <_vfprintf_r+0xb68>
 800759e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 80075a2:	d0d9      	beq.n	8007558 <_vfprintf_r+0xb68>
 80075a4:	fa5f f888 	uxtb.w	r8, r8
 80075a8:	e7f1      	b.n	800758e <_vfprintf_r+0xb9e>
 80075aa:	f1b8 0f0a 	cmp.w	r8, #10
 80075ae:	f179 0300 	sbcs.w	r3, r9, #0
 80075b2:	d207      	bcs.n	80075c4 <_vfprintf_r+0xbd4>
 80075b4:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80075b8:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 80075bc:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 80075c0:	f000 bc2f 	b.w	8007e22 <_vfprintf_r+0x1432>
 80075c4:	2300      	movs	r3, #0
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	9b02      	ldr	r3, [sp, #8]
 80075ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ce:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	220a      	movs	r2, #10
 80075d6:	2300      	movs	r3, #0
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 f844 	bl	8000668 <__aeabi_uldivmod>
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	3230      	adds	r2, #48	; 0x30
 80075ea:	f10b 3aff 	add.w	sl, fp, #4294967295
 80075ee:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80075f2:	b1db      	cbz	r3, 800762c <_vfprintf_r+0xc3c>
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	9a03      	ldr	r2, [sp, #12]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d116      	bne.n	800762c <_vfprintf_r+0xc3c>
 80075fe:	2aff      	cmp	r2, #255	; 0xff
 8007600:	d014      	beq.n	800762c <_vfprintf_r+0xc3c>
 8007602:	f1b8 0f0a 	cmp.w	r8, #10
 8007606:	f179 0300 	sbcs.w	r3, r9, #0
 800760a:	d30f      	bcc.n	800762c <_vfprintf_r+0xc3c>
 800760c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800760e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007610:	ebaa 0a03 	sub.w	sl, sl, r3
 8007614:	461a      	mov	r2, r3
 8007616:	4650      	mov	r0, sl
 8007618:	f004 fb6f 	bl	800bcfa <strncpy>
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	b11b      	cbz	r3, 800762a <_vfprintf_r+0xc3a>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	3301      	adds	r3, #1
 8007626:	9308      	str	r3, [sp, #32]
 8007628:	2300      	movs	r3, #0
 800762a:	9303      	str	r3, [sp, #12]
 800762c:	2300      	movs	r3, #0
 800762e:	220a      	movs	r2, #10
 8007630:	4640      	mov	r0, r8
 8007632:	4649      	mov	r1, r9
 8007634:	f7f9 f818 	bl	8000668 <__aeabi_uldivmod>
 8007638:	f1b8 0f0a 	cmp.w	r8, #10
 800763c:	f179 0300 	sbcs.w	r3, r9, #0
 8007640:	f0c0 83ef 	bcc.w	8007e22 <_vfprintf_r+0x1432>
 8007644:	4680      	mov	r8, r0
 8007646:	4689      	mov	r9, r1
 8007648:	46d3      	mov	fp, sl
 800764a:	e7c3      	b.n	80075d4 <_vfprintf_r+0xbe4>
 800764c:	f008 030f 	and.w	r3, r8, #15
 8007650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007652:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007656:	5cd3      	ldrb	r3, [r2, r3]
 8007658:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800765c:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8007660:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007664:	ea58 0309 	orrs.w	r3, r8, r9
 8007668:	d1f0      	bne.n	800764c <_vfprintf_r+0xc5c>
 800766a:	e3da      	b.n	8007e22 <_vfprintf_r+0x1432>
 800766c:	b933      	cbnz	r3, 800767c <_vfprintf_r+0xc8c>
 800766e:	f01b 0f01 	tst.w	fp, #1
 8007672:	d003      	beq.n	800767c <_vfprintf_r+0xc8c>
 8007674:	2330      	movs	r3, #48	; 0x30
 8007676:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 800767a:	e79f      	b.n	80075bc <_vfprintf_r+0xbcc>
 800767c:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8007680:	e3cf      	b.n	8007e22 <_vfprintf_r+0x1432>
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8392 	beq.w	8007dae <_vfprintf_r+0x13be>
 800768a:	2000      	movs	r0, #0
 800768c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8007690:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8007694:	f8cd 8014 	str.w	r8, [sp, #20]
 8007698:	f7ff bb36 	b.w	8006d08 <_vfprintf_r+0x318>
 800769c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80076a0:	e723      	b.n	80074ea <_vfprintf_r+0xafa>
 80076a2:	2110      	movs	r1, #16
 80076a4:	6061      	str	r1, [r4, #4]
 80076a6:	2a07      	cmp	r2, #7
 80076a8:	4461      	add	r1, ip
 80076aa:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80076ae:	dd0a      	ble.n	80076c6 <_vfprintf_r+0xcd6>
 80076b0:	aa1e      	add	r2, sp, #120	; 0x78
 80076b2:	4629      	mov	r1, r5
 80076b4:	4630      	mov	r0, r6
 80076b6:	9315      	str	r3, [sp, #84]	; 0x54
 80076b8:	f006 fd56 	bl	800e168 <__sprint_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 8353 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80076c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076c4:	a821      	add	r0, sp, #132	; 0x84
 80076c6:	3b10      	subs	r3, #16
 80076c8:	4604      	mov	r4, r0
 80076ca:	e4dd      	b.n	8007088 <_vfprintf_r+0x698>
 80076cc:	4604      	mov	r4, r0
 80076ce:	e4f7      	b.n	80070c0 <_vfprintf_r+0x6d0>
 80076d0:	aa1e      	add	r2, sp, #120	; 0x78
 80076d2:	4629      	mov	r1, r5
 80076d4:	4630      	mov	r0, r6
 80076d6:	f006 fd47 	bl	800e168 <__sprint_r>
 80076da:	2800      	cmp	r0, #0
 80076dc:	f040 8344 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80076e0:	ac21      	add	r4, sp, #132	; 0x84
 80076e2:	e4ff      	b.n	80070e4 <_vfprintf_r+0x6f4>
 80076e4:	aa1e      	add	r2, sp, #120	; 0x78
 80076e6:	4629      	mov	r1, r5
 80076e8:	4630      	mov	r0, r6
 80076ea:	f006 fd3d 	bl	800e168 <__sprint_r>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f040 833a 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80076f4:	ac21      	add	r4, sp, #132	; 0x84
 80076f6:	e505      	b.n	8007104 <_vfprintf_r+0x714>
 80076f8:	2110      	movs	r1, #16
 80076fa:	6061      	str	r1, [r4, #4]
 80076fc:	2a07      	cmp	r2, #7
 80076fe:	4461      	add	r1, ip
 8007700:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8007704:	dd0a      	ble.n	800771c <_vfprintf_r+0xd2c>
 8007706:	aa1e      	add	r2, sp, #120	; 0x78
 8007708:	4629      	mov	r1, r5
 800770a:	4630      	mov	r0, r6
 800770c:	9313      	str	r3, [sp, #76]	; 0x4c
 800770e:	f006 fd2b 	bl	800e168 <__sprint_r>
 8007712:	2800      	cmp	r0, #0
 8007714:	f040 8328 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800771a:	a821      	add	r0, sp, #132	; 0x84
 800771c:	3b10      	subs	r3, #16
 800771e:	4604      	mov	r4, r0
 8007720:	e4f8      	b.n	8007114 <_vfprintf_r+0x724>
 8007722:	4604      	mov	r4, r0
 8007724:	e512      	b.n	800714c <_vfprintf_r+0x75c>
 8007726:	2010      	movs	r0, #16
 8007728:	4403      	add	r3, r0
 800772a:	2a07      	cmp	r2, #7
 800772c:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8007730:	6060      	str	r0, [r4, #4]
 8007732:	dd08      	ble.n	8007746 <_vfprintf_r+0xd56>
 8007734:	aa1e      	add	r2, sp, #120	; 0x78
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	f006 fd15 	bl	800e168 <__sprint_r>
 800773e:	2800      	cmp	r0, #0
 8007740:	f040 8312 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007744:	a921      	add	r1, sp, #132	; 0x84
 8007746:	f1a9 0910 	sub.w	r9, r9, #16
 800774a:	460c      	mov	r4, r1
 800774c:	e503      	b.n	8007156 <_vfprintf_r+0x766>
 800774e:	460c      	mov	r4, r1
 8007750:	e51e      	b.n	8007190 <_vfprintf_r+0x7a0>
 8007752:	bf00      	nop
 8007754:	08010d59 	.word	0x08010d59
 8007758:	08010d6a 	.word	0x08010d6a
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	2b65      	cmp	r3, #101	; 0x65
 8007760:	f340 8252 	ble.w	8007c08 <_vfprintf_r+0x1218>
 8007764:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776c:	d16c      	bne.n	8007848 <_vfprintf_r+0xe58>
 800776e:	4b75      	ldr	r3, [pc, #468]	; (8007944 <_vfprintf_r+0xf54>)
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	2301      	movs	r3, #1
 8007774:	4418      	add	r0, r3
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800777a:	9020      	str	r0, [sp, #128]	; 0x80
 800777c:	3301      	adds	r3, #1
 800777e:	2b07      	cmp	r3, #7
 8007780:	931f      	str	r3, [sp, #124]	; 0x7c
 8007782:	dc3a      	bgt.n	80077fa <_vfprintf_r+0xe0a>
 8007784:	3408      	adds	r4, #8
 8007786:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007788:	9a03      	ldr	r2, [sp, #12]
 800778a:	4293      	cmp	r3, r2
 800778c:	db03      	blt.n	8007796 <_vfprintf_r+0xda6>
 800778e:	f01b 0f01 	tst.w	fp, #1
 8007792:	f43f ad0d 	beq.w	80071b0 <_vfprintf_r+0x7c0>
 8007796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077a2:	4413      	add	r3, r2
 80077a4:	9320      	str	r3, [sp, #128]	; 0x80
 80077a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077a8:	3301      	adds	r3, #1
 80077aa:	2b07      	cmp	r3, #7
 80077ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80077ae:	dc2e      	bgt.n	800780e <_vfprintf_r+0xe1e>
 80077b0:	3408      	adds	r4, #8
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	1e5f      	subs	r7, r3, #1
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	f77f acfa 	ble.w	80071b0 <_vfprintf_r+0x7c0>
 80077bc:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8007948 <_vfprintf_r+0xf58>
 80077c0:	f04f 0910 	mov.w	r9, #16
 80077c4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80077c8:	2f10      	cmp	r7, #16
 80077ca:	f103 0301 	add.w	r3, r3, #1
 80077ce:	f104 0108 	add.w	r1, r4, #8
 80077d2:	f8c4 8000 	str.w	r8, [r4]
 80077d6:	dc24      	bgt.n	8007822 <_vfprintf_r+0xe32>
 80077d8:	443a      	add	r2, r7
 80077da:	6067      	str	r7, [r4, #4]
 80077dc:	9220      	str	r2, [sp, #128]	; 0x80
 80077de:	2b07      	cmp	r3, #7
 80077e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80077e2:	f340 829d 	ble.w	8007d20 <_vfprintf_r+0x1330>
 80077e6:	aa1e      	add	r2, sp, #120	; 0x78
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f006 fcbc 	bl	800e168 <__sprint_r>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f040 82b9 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80077f6:	ac21      	add	r4, sp, #132	; 0x84
 80077f8:	e4da      	b.n	80071b0 <_vfprintf_r+0x7c0>
 80077fa:	aa1e      	add	r2, sp, #120	; 0x78
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f006 fcb2 	bl	800e168 <__sprint_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	f040 82af 	bne.w	8007d68 <_vfprintf_r+0x1378>
 800780a:	ac21      	add	r4, sp, #132	; 0x84
 800780c:	e7bb      	b.n	8007786 <_vfprintf_r+0xd96>
 800780e:	aa1e      	add	r2, sp, #120	; 0x78
 8007810:	4629      	mov	r1, r5
 8007812:	4630      	mov	r0, r6
 8007814:	f006 fca8 	bl	800e168 <__sprint_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	f040 82a5 	bne.w	8007d68 <_vfprintf_r+0x1378>
 800781e:	ac21      	add	r4, sp, #132	; 0x84
 8007820:	e7c7      	b.n	80077b2 <_vfprintf_r+0xdc2>
 8007822:	3210      	adds	r2, #16
 8007824:	2b07      	cmp	r3, #7
 8007826:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800782a:	f8c4 9004 	str.w	r9, [r4, #4]
 800782e:	dd08      	ble.n	8007842 <_vfprintf_r+0xe52>
 8007830:	aa1e      	add	r2, sp, #120	; 0x78
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f006 fc97 	bl	800e168 <__sprint_r>
 800783a:	2800      	cmp	r0, #0
 800783c:	f040 8294 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007840:	a921      	add	r1, sp, #132	; 0x84
 8007842:	3f10      	subs	r7, #16
 8007844:	460c      	mov	r4, r1
 8007846:	e7bd      	b.n	80077c4 <_vfprintf_r+0xdd4>
 8007848:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800784a:	2b00      	cmp	r3, #0
 800784c:	dc7e      	bgt.n	800794c <_vfprintf_r+0xf5c>
 800784e:	4b3d      	ldr	r3, [pc, #244]	; (8007944 <_vfprintf_r+0xf54>)
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	2301      	movs	r3, #1
 8007854:	4418      	add	r0, r3
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800785a:	9020      	str	r0, [sp, #128]	; 0x80
 800785c:	3301      	adds	r3, #1
 800785e:	2b07      	cmp	r3, #7
 8007860:	931f      	str	r3, [sp, #124]	; 0x7c
 8007862:	dc47      	bgt.n	80078f4 <_vfprintf_r+0xf04>
 8007864:	3408      	adds	r4, #8
 8007866:	9903      	ldr	r1, [sp, #12]
 8007868:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800786a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800786c:	430a      	orrs	r2, r1
 800786e:	f00b 0101 	and.w	r1, fp, #1
 8007872:	430a      	orrs	r2, r1
 8007874:	f43f ac9c 	beq.w	80071b0 <_vfprintf_r+0x7c0>
 8007878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800787e:	6062      	str	r2, [r4, #4]
 8007880:	4413      	add	r3, r2
 8007882:	9320      	str	r3, [sp, #128]	; 0x80
 8007884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007886:	3301      	adds	r3, #1
 8007888:	2b07      	cmp	r3, #7
 800788a:	931f      	str	r3, [sp, #124]	; 0x7c
 800788c:	dc3c      	bgt.n	8007908 <_vfprintf_r+0xf18>
 800788e:	f104 0308 	add.w	r3, r4, #8
 8007892:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007894:	2f00      	cmp	r7, #0
 8007896:	da1c      	bge.n	80078d2 <_vfprintf_r+0xee2>
 8007898:	4c2b      	ldr	r4, [pc, #172]	; (8007948 <_vfprintf_r+0xf58>)
 800789a:	427f      	negs	r7, r7
 800789c:	461a      	mov	r2, r3
 800789e:	f04f 0810 	mov.w	r8, #16
 80078a2:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 80078a6:	2f10      	cmp	r7, #16
 80078a8:	f101 0101 	add.w	r1, r1, #1
 80078ac:	f103 0308 	add.w	r3, r3, #8
 80078b0:	6014      	str	r4, [r2, #0]
 80078b2:	dc33      	bgt.n	800791c <_vfprintf_r+0xf2c>
 80078b4:	6057      	str	r7, [r2, #4]
 80078b6:	2907      	cmp	r1, #7
 80078b8:	4407      	add	r7, r0
 80078ba:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 80078be:	dd08      	ble.n	80078d2 <_vfprintf_r+0xee2>
 80078c0:	aa1e      	add	r2, sp, #120	; 0x78
 80078c2:	4629      	mov	r1, r5
 80078c4:	4630      	mov	r0, r6
 80078c6:	f006 fc4f 	bl	800e168 <__sprint_r>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f040 824c 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80078d0:	ab21      	add	r3, sp, #132	; 0x84
 80078d2:	9a03      	ldr	r2, [sp, #12]
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	9903      	ldr	r1, [sp, #12]
 80078d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078da:	f8c3 a000 	str.w	sl, [r3]
 80078de:	440a      	add	r2, r1
 80078e0:	9220      	str	r2, [sp, #128]	; 0x80
 80078e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80078e4:	3201      	adds	r2, #1
 80078e6:	2a07      	cmp	r2, #7
 80078e8:	921f      	str	r2, [sp, #124]	; 0x7c
 80078ea:	f73f af7c 	bgt.w	80077e6 <_vfprintf_r+0xdf6>
 80078ee:	f103 0408 	add.w	r4, r3, #8
 80078f2:	e45d      	b.n	80071b0 <_vfprintf_r+0x7c0>
 80078f4:	aa1e      	add	r2, sp, #120	; 0x78
 80078f6:	4629      	mov	r1, r5
 80078f8:	4630      	mov	r0, r6
 80078fa:	f006 fc35 	bl	800e168 <__sprint_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f040 8232 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007904:	ac21      	add	r4, sp, #132	; 0x84
 8007906:	e7ae      	b.n	8007866 <_vfprintf_r+0xe76>
 8007908:	aa1e      	add	r2, sp, #120	; 0x78
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	f006 fc2b 	bl	800e168 <__sprint_r>
 8007912:	2800      	cmp	r0, #0
 8007914:	f040 8228 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007918:	ab21      	add	r3, sp, #132	; 0x84
 800791a:	e7ba      	b.n	8007892 <_vfprintf_r+0xea2>
 800791c:	3010      	adds	r0, #16
 800791e:	2907      	cmp	r1, #7
 8007920:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8007924:	f8c2 8004 	str.w	r8, [r2, #4]
 8007928:	dd08      	ble.n	800793c <_vfprintf_r+0xf4c>
 800792a:	aa1e      	add	r2, sp, #120	; 0x78
 800792c:	4629      	mov	r1, r5
 800792e:	4630      	mov	r0, r6
 8007930:	f006 fc1a 	bl	800e168 <__sprint_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 8217 	bne.w	8007d68 <_vfprintf_r+0x1378>
 800793a:	ab21      	add	r3, sp, #132	; 0x84
 800793c:	3f10      	subs	r7, #16
 800793e:	461a      	mov	r2, r3
 8007940:	e7af      	b.n	80078a2 <_vfprintf_r+0xeb2>
 8007942:	bf00      	nop
 8007944:	08010d7b 	.word	0x08010d7b
 8007948:	08010d8d 	.word	0x08010d8d
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	4543      	cmp	r3, r8
 8007950:	bfa8      	it	ge
 8007952:	4643      	movge	r3, r8
 8007954:	2b00      	cmp	r3, #0
 8007956:	4699      	mov	r9, r3
 8007958:	dd0a      	ble.n	8007970 <_vfprintf_r+0xf80>
 800795a:	4418      	add	r0, r3
 800795c:	e9c4 a300 	strd	sl, r3, [r4]
 8007960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007962:	9020      	str	r0, [sp, #128]	; 0x80
 8007964:	3301      	adds	r3, #1
 8007966:	2b07      	cmp	r3, #7
 8007968:	931f      	str	r3, [sp, #124]	; 0x7c
 800796a:	f300 8084 	bgt.w	8007a76 <_vfprintf_r+0x1086>
 800796e:	3408      	adds	r4, #8
 8007970:	f1b9 0f00 	cmp.w	r9, #0
 8007974:	bfac      	ite	ge
 8007976:	eba8 0709 	subge.w	r7, r8, r9
 800797a:	4647      	movlt	r7, r8
 800797c:	2f00      	cmp	r7, #0
 800797e:	dd1b      	ble.n	80079b8 <_vfprintf_r+0xfc8>
 8007980:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 8007dcc <_vfprintf_r+0x13dc>
 8007984:	f8c4 9000 	str.w	r9, [r4]
 8007988:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800798c:	2f10      	cmp	r7, #16
 800798e:	f103 0301 	add.w	r3, r3, #1
 8007992:	f104 0108 	add.w	r1, r4, #8
 8007996:	dc78      	bgt.n	8007a8a <_vfprintf_r+0x109a>
 8007998:	6067      	str	r7, [r4, #4]
 800799a:	2b07      	cmp	r3, #7
 800799c:	4417      	add	r7, r2
 800799e:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80079a2:	f340 8085 	ble.w	8007ab0 <_vfprintf_r+0x10c0>
 80079a6:	aa1e      	add	r2, sp, #120	; 0x78
 80079a8:	4629      	mov	r1, r5
 80079aa:	4630      	mov	r0, r6
 80079ac:	f006 fbdc 	bl	800e168 <__sprint_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f040 81d9 	bne.w	8007d68 <_vfprintf_r+0x1378>
 80079b6:	ac21      	add	r4, sp, #132	; 0x84
 80079b8:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80079bc:	44d0      	add	r8, sl
 80079be:	d00a      	beq.n	80079d6 <_vfprintf_r+0xfe6>
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d176      	bne.n	8007ab4 <_vfprintf_r+0x10c4>
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d176      	bne.n	8007aba <_vfprintf_r+0x10ca>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	4453      	add	r3, sl
 80079d0:	4598      	cmp	r8, r3
 80079d2:	bf28      	it	cs
 80079d4:	4698      	movcs	r8, r3
 80079d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80079d8:	9a03      	ldr	r2, [sp, #12]
 80079da:	4293      	cmp	r3, r2
 80079dc:	db02      	blt.n	80079e4 <_vfprintf_r+0xff4>
 80079de:	f01b 0f01 	tst.w	fp, #1
 80079e2:	d00e      	beq.n	8007a02 <_vfprintf_r+0x1012>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079f0:	4413      	add	r3, r2
 80079f2:	9320      	str	r3, [sp, #128]	; 0x80
 80079f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079f6:	3301      	adds	r3, #1
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80079fc:	f300 80dd 	bgt.w	8007bba <_vfprintf_r+0x11ca>
 8007a00:	3408      	adds	r4, #8
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	9903      	ldr	r1, [sp, #12]
 8007a06:	eb0a 0203 	add.w	r2, sl, r3
 8007a0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007a0c:	eba2 0208 	sub.w	r2, r2, r8
 8007a10:	eba1 0903 	sub.w	r9, r1, r3
 8007a14:	4591      	cmp	r9, r2
 8007a16:	bfa8      	it	ge
 8007a18:	4691      	movge	r9, r2
 8007a1a:	f1b9 0f00 	cmp.w	r9, #0
 8007a1e:	dd0b      	ble.n	8007a38 <_vfprintf_r+0x1048>
 8007a20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a22:	444b      	add	r3, r9
 8007a24:	9320      	str	r3, [sp, #128]	; 0x80
 8007a26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a28:	3301      	adds	r3, #1
 8007a2a:	2b07      	cmp	r3, #7
 8007a2c:	e9c4 8900 	strd	r8, r9, [r4]
 8007a30:	931f      	str	r3, [sp, #124]	; 0x7c
 8007a32:	f300 80cc 	bgt.w	8007bce <_vfprintf_r+0x11de>
 8007a36:	3408      	adds	r4, #8
 8007a38:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	f1b9 0f00 	cmp.w	r9, #0
 8007a40:	eba3 0707 	sub.w	r7, r3, r7
 8007a44:	bfa8      	it	ge
 8007a46:	eba7 0709 	subge.w	r7, r7, r9
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	f77f abb0 	ble.w	80071b0 <_vfprintf_r+0x7c0>
 8007a50:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8007dcc <_vfprintf_r+0x13dc>
 8007a54:	f04f 0910 	mov.w	r9, #16
 8007a58:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007a5c:	2f10      	cmp	r7, #16
 8007a5e:	f103 0301 	add.w	r3, r3, #1
 8007a62:	f104 0108 	add.w	r1, r4, #8
 8007a66:	f8c4 8000 	str.w	r8, [r4]
 8007a6a:	f300 80ba 	bgt.w	8007be2 <_vfprintf_r+0x11f2>
 8007a6e:	6067      	str	r7, [r4, #4]
 8007a70:	4417      	add	r7, r2
 8007a72:	9720      	str	r7, [sp, #128]	; 0x80
 8007a74:	e6b3      	b.n	80077de <_vfprintf_r+0xdee>
 8007a76:	aa1e      	add	r2, sp, #120	; 0x78
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f006 fb74 	bl	800e168 <__sprint_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f040 8171 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007a86:	ac21      	add	r4, sp, #132	; 0x84
 8007a88:	e772      	b.n	8007970 <_vfprintf_r+0xf80>
 8007a8a:	2010      	movs	r0, #16
 8007a8c:	4402      	add	r2, r0
 8007a8e:	2b07      	cmp	r3, #7
 8007a90:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007a94:	6060      	str	r0, [r4, #4]
 8007a96:	dd08      	ble.n	8007aaa <_vfprintf_r+0x10ba>
 8007a98:	aa1e      	add	r2, sp, #120	; 0x78
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f006 fb63 	bl	800e168 <__sprint_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f040 8160 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007aa8:	a921      	add	r1, sp, #132	; 0x84
 8007aaa:	3f10      	subs	r7, #16
 8007aac:	460c      	mov	r4, r1
 8007aae:	e769      	b.n	8007984 <_vfprintf_r+0xf94>
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	e781      	b.n	80079b8 <_vfprintf_r+0xfc8>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d04f      	beq.n	8007b5a <_vfprintf_r+0x116a>
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	9306      	str	r3, [sp, #24]
 8007ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ac8:	6063      	str	r3, [r4, #4]
 8007aca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007acc:	4413      	add	r3, r2
 8007ace:	9320      	str	r3, [sp, #128]	; 0x80
 8007ad0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ad8:	dc46      	bgt.n	8007b68 <_vfprintf_r+0x1178>
 8007ada:	3408      	adds	r4, #8
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	9a08      	ldr	r2, [sp, #32]
 8007ae0:	eb0a 0903 	add.w	r9, sl, r3
 8007ae4:	eba9 0308 	sub.w	r3, r9, r8
 8007ae8:	f892 9000 	ldrb.w	r9, [r2]
 8007aec:	4599      	cmp	r9, r3
 8007aee:	bfa8      	it	ge
 8007af0:	4699      	movge	r9, r3
 8007af2:	f1b9 0f00 	cmp.w	r9, #0
 8007af6:	dd0a      	ble.n	8007b0e <_vfprintf_r+0x111e>
 8007af8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007afa:	444b      	add	r3, r9
 8007afc:	9320      	str	r3, [sp, #128]	; 0x80
 8007afe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b00:	3301      	adds	r3, #1
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	e9c4 8900 	strd	r8, r9, [r4]
 8007b08:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b0a:	dc37      	bgt.n	8007b7c <_vfprintf_r+0x118c>
 8007b0c:	3408      	adds	r4, #8
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	781f      	ldrb	r7, [r3, #0]
 8007b12:	f1b9 0f00 	cmp.w	r9, #0
 8007b16:	bfa8      	it	ge
 8007b18:	eba7 0709 	subge.w	r7, r7, r9
 8007b1c:	2f00      	cmp	r7, #0
 8007b1e:	dd18      	ble.n	8007b52 <_vfprintf_r+0x1162>
 8007b20:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007b24:	48a9      	ldr	r0, [pc, #676]	; (8007dcc <_vfprintf_r+0x13dc>)
 8007b26:	6020      	str	r0, [r4, #0]
 8007b28:	2f10      	cmp	r7, #16
 8007b2a:	f103 0301 	add.w	r3, r3, #1
 8007b2e:	f104 0108 	add.w	r1, r4, #8
 8007b32:	dc2d      	bgt.n	8007b90 <_vfprintf_r+0x11a0>
 8007b34:	6067      	str	r7, [r4, #4]
 8007b36:	2b07      	cmp	r3, #7
 8007b38:	4417      	add	r7, r2
 8007b3a:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8007b3e:	dd3a      	ble.n	8007bb6 <_vfprintf_r+0x11c6>
 8007b40:	aa1e      	add	r2, sp, #120	; 0x78
 8007b42:	4629      	mov	r1, r5
 8007b44:	4630      	mov	r0, r6
 8007b46:	f006 fb0f 	bl	800e168 <__sprint_r>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f040 810c 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007b50:	ac21      	add	r4, sp, #132	; 0x84
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	4498      	add	r8, r3
 8007b58:	e732      	b.n	80079c0 <_vfprintf_r+0xfd0>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	9308      	str	r3, [sp, #32]
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	9307      	str	r3, [sp, #28]
 8007b66:	e7ab      	b.n	8007ac0 <_vfprintf_r+0x10d0>
 8007b68:	aa1e      	add	r2, sp, #120	; 0x78
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f006 fafb 	bl	800e168 <__sprint_r>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f040 80f8 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007b78:	ac21      	add	r4, sp, #132	; 0x84
 8007b7a:	e7af      	b.n	8007adc <_vfprintf_r+0x10ec>
 8007b7c:	aa1e      	add	r2, sp, #120	; 0x78
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4630      	mov	r0, r6
 8007b82:	f006 faf1 	bl	800e168 <__sprint_r>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f040 80ee 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007b8c:	ac21      	add	r4, sp, #132	; 0x84
 8007b8e:	e7be      	b.n	8007b0e <_vfprintf_r+0x111e>
 8007b90:	2010      	movs	r0, #16
 8007b92:	4402      	add	r2, r0
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007b9a:	6060      	str	r0, [r4, #4]
 8007b9c:	dd08      	ble.n	8007bb0 <_vfprintf_r+0x11c0>
 8007b9e:	aa1e      	add	r2, sp, #120	; 0x78
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f006 fae0 	bl	800e168 <__sprint_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	f040 80dd 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007bae:	a921      	add	r1, sp, #132	; 0x84
 8007bb0:	3f10      	subs	r7, #16
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	e7b4      	b.n	8007b20 <_vfprintf_r+0x1130>
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	e7cb      	b.n	8007b52 <_vfprintf_r+0x1162>
 8007bba:	aa1e      	add	r2, sp, #120	; 0x78
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f006 fad2 	bl	800e168 <__sprint_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 80cf 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007bca:	ac21      	add	r4, sp, #132	; 0x84
 8007bcc:	e719      	b.n	8007a02 <_vfprintf_r+0x1012>
 8007bce:	aa1e      	add	r2, sp, #120	; 0x78
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f006 fac8 	bl	800e168 <__sprint_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f040 80c5 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007bde:	ac21      	add	r4, sp, #132	; 0x84
 8007be0:	e72a      	b.n	8007a38 <_vfprintf_r+0x1048>
 8007be2:	3210      	adds	r2, #16
 8007be4:	2b07      	cmp	r3, #7
 8007be6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007bea:	f8c4 9004 	str.w	r9, [r4, #4]
 8007bee:	dd08      	ble.n	8007c02 <_vfprintf_r+0x1212>
 8007bf0:	aa1e      	add	r2, sp, #120	; 0x78
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f006 fab7 	bl	800e168 <__sprint_r>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f040 80b4 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007c00:	a921      	add	r1, sp, #132	; 0x84
 8007c02:	3f10      	subs	r7, #16
 8007c04:	460c      	mov	r4, r1
 8007c06:	e727      	b.n	8007a58 <_vfprintf_r+0x1068>
 8007c08:	9903      	ldr	r1, [sp, #12]
 8007c0a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c0c:	2901      	cmp	r1, #1
 8007c0e:	f100 0001 	add.w	r0, r0, #1
 8007c12:	f102 0201 	add.w	r2, r2, #1
 8007c16:	f104 0308 	add.w	r3, r4, #8
 8007c1a:	dc02      	bgt.n	8007c22 <_vfprintf_r+0x1232>
 8007c1c:	f01b 0f01 	tst.w	fp, #1
 8007c20:	d073      	beq.n	8007d0a <_vfprintf_r+0x131a>
 8007c22:	2101      	movs	r1, #1
 8007c24:	2a07      	cmp	r2, #7
 8007c26:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8007c2a:	f8c4 a000 	str.w	sl, [r4]
 8007c2e:	6061      	str	r1, [r4, #4]
 8007c30:	dd08      	ble.n	8007c44 <_vfprintf_r+0x1254>
 8007c32:	aa1e      	add	r2, sp, #120	; 0x78
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f006 fa96 	bl	800e168 <__sprint_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 8093 	bne.w	8007d68 <_vfprintf_r+0x1378>
 8007c42:	ab21      	add	r3, sp, #132	; 0x84
 8007c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c50:	440a      	add	r2, r1
 8007c52:	9220      	str	r2, [sp, #128]	; 0x80
 8007c54:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c56:	3201      	adds	r2, #1
 8007c58:	2a07      	cmp	r2, #7
 8007c5a:	921f      	str	r2, [sp, #124]	; 0x7c
 8007c5c:	dc25      	bgt.n	8007caa <_vfprintf_r+0x12ba>
 8007c5e:	3308      	adds	r3, #8
 8007c60:	9a03      	ldr	r2, [sp, #12]
 8007c62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	f102 34ff 	add.w	r4, r2, #4294967295
 8007c6e:	d025      	beq.n	8007cbc <_vfprintf_r+0x12cc>
 8007c70:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007c72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c74:	f10a 0001 	add.w	r0, sl, #1
 8007c78:	e9c3 0400 	strd	r0, r4, [r3]
 8007c7c:	9803      	ldr	r0, [sp, #12]
 8007c7e:	3101      	adds	r1, #1
 8007c80:	3a01      	subs	r2, #1
 8007c82:	4402      	add	r2, r0
 8007c84:	2907      	cmp	r1, #7
 8007c86:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8007c8a:	dd47      	ble.n	8007d1c <_vfprintf_r+0x132c>
 8007c8c:	aa1e      	add	r2, sp, #120	; 0x78
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4630      	mov	r0, r6
 8007c92:	f006 fa69 	bl	800e168 <__sprint_r>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d166      	bne.n	8007d68 <_vfprintf_r+0x1378>
 8007c9a:	ab21      	add	r3, sp, #132	; 0x84
 8007c9c:	aa1a      	add	r2, sp, #104	; 0x68
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ca6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ca8:	e619      	b.n	80078de <_vfprintf_r+0xeee>
 8007caa:	aa1e      	add	r2, sp, #120	; 0x78
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f006 fa5a 	bl	800e168 <__sprint_r>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d157      	bne.n	8007d68 <_vfprintf_r+0x1378>
 8007cb8:	ab21      	add	r3, sp, #132	; 0x84
 8007cba:	e7d1      	b.n	8007c60 <_vfprintf_r+0x1270>
 8007cbc:	2c00      	cmp	r4, #0
 8007cbe:	dded      	ble.n	8007c9c <_vfprintf_r+0x12ac>
 8007cc0:	4f42      	ldr	r7, [pc, #264]	; (8007dcc <_vfprintf_r+0x13dc>)
 8007cc2:	f04f 0810 	mov.w	r8, #16
 8007cc6:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 8007cca:	2c10      	cmp	r4, #16
 8007ccc:	f102 0201 	add.w	r2, r2, #1
 8007cd0:	f103 0008 	add.w	r0, r3, #8
 8007cd4:	601f      	str	r7, [r3, #0]
 8007cd6:	dc07      	bgt.n	8007ce8 <_vfprintf_r+0x12f8>
 8007cd8:	605c      	str	r4, [r3, #4]
 8007cda:	2a07      	cmp	r2, #7
 8007cdc:	440c      	add	r4, r1
 8007cde:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8007ce2:	dcd3      	bgt.n	8007c8c <_vfprintf_r+0x129c>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	e7d9      	b.n	8007c9c <_vfprintf_r+0x12ac>
 8007ce8:	3110      	adds	r1, #16
 8007cea:	2a07      	cmp	r2, #7
 8007cec:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8007cf0:	f8c3 8004 	str.w	r8, [r3, #4]
 8007cf4:	dd06      	ble.n	8007d04 <_vfprintf_r+0x1314>
 8007cf6:	aa1e      	add	r2, sp, #120	; 0x78
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f006 fa34 	bl	800e168 <__sprint_r>
 8007d00:	bb90      	cbnz	r0, 8007d68 <_vfprintf_r+0x1378>
 8007d02:	a821      	add	r0, sp, #132	; 0x84
 8007d04:	3c10      	subs	r4, #16
 8007d06:	4603      	mov	r3, r0
 8007d08:	e7dd      	b.n	8007cc6 <_vfprintf_r+0x12d6>
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	2a07      	cmp	r2, #7
 8007d0e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8007d12:	f8c4 a000 	str.w	sl, [r4]
 8007d16:	6061      	str	r1, [r4, #4]
 8007d18:	ddc0      	ble.n	8007c9c <_vfprintf_r+0x12ac>
 8007d1a:	e7b7      	b.n	8007c8c <_vfprintf_r+0x129c>
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	e7bd      	b.n	8007c9c <_vfprintf_r+0x12ac>
 8007d20:	460c      	mov	r4, r1
 8007d22:	f7ff ba45 	b.w	80071b0 <_vfprintf_r+0x7c0>
 8007d26:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8007d2a:	1a9f      	subs	r7, r3, r2
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f77f aa4d 	ble.w	80071cc <_vfprintf_r+0x7dc>
 8007d32:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007dd0 <_vfprintf_r+0x13e0>
 8007d36:	f04f 0910 	mov.w	r9, #16
 8007d3a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007d3e:	2f10      	cmp	r7, #16
 8007d40:	f103 0301 	add.w	r3, r3, #1
 8007d44:	f8c4 8000 	str.w	r8, [r4]
 8007d48:	dc18      	bgt.n	8007d7c <_vfprintf_r+0x138c>
 8007d4a:	6067      	str	r7, [r4, #4]
 8007d4c:	2b07      	cmp	r3, #7
 8007d4e:	4417      	add	r7, r2
 8007d50:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8007d54:	f77f aa3a 	ble.w	80071cc <_vfprintf_r+0x7dc>
 8007d58:	aa1e      	add	r2, sp, #120	; 0x78
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f006 fa03 	bl	800e168 <__sprint_r>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f43f aa32 	beq.w	80071cc <_vfprintf_r+0x7dc>
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f43f a871 	beq.w	8006e52 <_vfprintf_r+0x462>
 8007d70:	4619      	mov	r1, r3
 8007d72:	4630      	mov	r0, r6
 8007d74:	f002 fab6 	bl	800a2e4 <_free_r>
 8007d78:	f7ff b86b 	b.w	8006e52 <_vfprintf_r+0x462>
 8007d7c:	3210      	adds	r2, #16
 8007d7e:	2b07      	cmp	r3, #7
 8007d80:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007d84:	f8c4 9004 	str.w	r9, [r4, #4]
 8007d88:	dc02      	bgt.n	8007d90 <_vfprintf_r+0x13a0>
 8007d8a:	3408      	adds	r4, #8
 8007d8c:	3f10      	subs	r7, #16
 8007d8e:	e7d4      	b.n	8007d3a <_vfprintf_r+0x134a>
 8007d90:	aa1e      	add	r2, sp, #120	; 0x78
 8007d92:	4629      	mov	r1, r5
 8007d94:	4630      	mov	r0, r6
 8007d96:	f006 f9e7 	bl	800e168 <__sprint_r>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1e4      	bne.n	8007d68 <_vfprintf_r+0x1378>
 8007d9e:	ac21      	add	r4, sp, #132	; 0x84
 8007da0:	e7f4      	b.n	8007d8c <_vfprintf_r+0x139c>
 8007da2:	9902      	ldr	r1, [sp, #8]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f002 fa9d 	bl	800a2e4 <_free_r>
 8007daa:	f7ff ba27 	b.w	80071fc <_vfprintf_r+0x80c>
 8007dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007db0:	b91b      	cbnz	r3, 8007dba <_vfprintf_r+0x13ca>
 8007db2:	2300      	movs	r3, #0
 8007db4:	931f      	str	r3, [sp, #124]	; 0x7c
 8007db6:	f7ff b84c 	b.w	8006e52 <_vfprintf_r+0x462>
 8007dba:	aa1e      	add	r2, sp, #120	; 0x78
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f006 f9d2 	bl	800e168 <__sprint_r>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0f4      	beq.n	8007db2 <_vfprintf_r+0x13c2>
 8007dc8:	f7ff b843 	b.w	8006e52 <_vfprintf_r+0x462>
 8007dcc:	08010d8d 	.word	0x08010d8d
 8007dd0:	08010d7d 	.word	0x08010d7d
 8007dd4:	ea58 0209 	orrs.w	r2, r8, r9
 8007dd8:	f8cd b008 	str.w	fp, [sp, #8]
 8007ddc:	f43f ab37 	beq.w	800744e <_vfprintf_r+0xa5e>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	f43f abe2 	beq.w	80075aa <_vfprintf_r+0xbba>
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8007dec:	f43f ac2e 	beq.w	800764c <_vfprintf_r+0xc5c>
 8007df0:	f008 0307 	and.w	r3, r8, #7
 8007df4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8007df8:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 8007dfc:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8007e00:	3330      	adds	r3, #48	; 0x30
 8007e02:	ea58 0109 	orrs.w	r1, r8, r9
 8007e06:	4652      	mov	r2, sl
 8007e08:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8007e0c:	d1f0      	bne.n	8007df0 <_vfprintf_r+0x1400>
 8007e0e:	9902      	ldr	r1, [sp, #8]
 8007e10:	07c8      	lsls	r0, r1, #31
 8007e12:	d506      	bpl.n	8007e22 <_vfprintf_r+0x1432>
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d004      	beq.n	8007e22 <_vfprintf_r+0x1432>
 8007e18:	2330      	movs	r3, #48	; 0x30
 8007e1a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8007e1e:	f1a2 0a02 	sub.w	sl, r2, #2
 8007e22:	ab4a      	add	r3, sp, #296	; 0x128
 8007e24:	46b9      	mov	r9, r7
 8007e26:	eba3 070a 	sub.w	r7, r3, sl
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	f7fe bfd9 	b.w	8006de8 <_vfprintf_r+0x3f8>
 8007e36:	bf00      	nop

08007e38 <__sbprintf>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	8989      	ldrh	r1, [r1, #12]
 8007e3e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8007e42:	f021 0102 	bic.w	r1, r1, #2
 8007e46:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007e4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007e4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8007e4e:	89e1      	ldrh	r1, [r4, #14]
 8007e50:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007e54:	69e1      	ldr	r1, [r4, #28]
 8007e56:	9109      	str	r1, [sp, #36]	; 0x24
 8007e58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e5c:	a91c      	add	r1, sp, #112	; 0x70
 8007e5e:	9102      	str	r1, [sp, #8]
 8007e60:	9106      	str	r1, [sp, #24]
 8007e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e66:	4606      	mov	r6, r0
 8007e68:	9104      	str	r1, [sp, #16]
 8007e6a:	9107      	str	r1, [sp, #28]
 8007e6c:	a818      	add	r0, sp, #96	; 0x60
 8007e6e:	2100      	movs	r1, #0
 8007e70:	e9cd 3200 	strd	r3, r2, [sp]
 8007e74:	9108      	str	r1, [sp, #32]
 8007e76:	f002 fc93 	bl	800a7a0 <__retarget_lock_init_recursive>
 8007e7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e7e:	a902      	add	r1, sp, #8
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7fe fdb5 	bl	80069f0 <_vfprintf_r>
 8007e86:	1e05      	subs	r5, r0, #0
 8007e88:	db07      	blt.n	8007e9a <__sbprintf+0x62>
 8007e8a:	a902      	add	r1, sp, #8
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f002 f8b3 	bl	8009ff8 <_fflush_r>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	bf18      	it	ne
 8007e96:	f04f 35ff 	movne.w	r5, #4294967295
 8007e9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007e9e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007ea0:	065b      	lsls	r3, r3, #25
 8007ea2:	bf42      	ittt	mi
 8007ea4:	89a3      	ldrhmi	r3, [r4, #12]
 8007ea6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8007eaa:	81a3      	strhmi	r3, [r4, #12]
 8007eac:	f002 fc79 	bl	800a7a2 <__retarget_lock_close_recursive>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}

08007eb8 <__svfscanf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	ed2d 8b02 	vpush	{d8}
 8007ec0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8007ec4:	461e      	mov	r6, r3
 8007ec6:	af02      	add	r7, sp, #8
 8007ec8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007eca:	617a      	str	r2, [r7, #20]
 8007ecc:	07da      	lsls	r2, r3, #31
 8007ece:	ee08 0a10 	vmov	s16, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	d405      	bmi.n	8007ee2 <__svfscanf_r+0x2a>
 8007ed6:	898b      	ldrh	r3, [r1, #12]
 8007ed8:	059b      	lsls	r3, r3, #22
 8007eda:	d402      	bmi.n	8007ee2 <__svfscanf_r+0x2a>
 8007edc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8007ede:	f002 fc61 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 8007ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee6:	049d      	lsls	r5, r3, #18
 8007ee8:	d406      	bmi.n	8007ef8 <__svfscanf_r+0x40>
 8007eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ef6:	6663      	str	r3, [r4, #100]	; 0x64
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007f0c:	617a      	str	r2, [r7, #20]
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80d6 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8007f16:	4a91      	ldr	r2, [pc, #580]	; (800815c <__svfscanf_r+0x2a4>)
 8007f18:	f813 8002 	ldrb.w	r8, [r3, r2]
 8007f1c:	f018 0808 	ands.w	r8, r8, #8
 8007f20:	d019      	beq.n	8007f56 <__svfscanf_r+0x9e>
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd0e      	ble.n	8007f46 <__svfscanf_r+0x8e>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	498c      	ldr	r1, [pc, #560]	; (800815c <__svfscanf_r+0x2a4>)
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	5c8a      	ldrb	r2, [r1, r2]
 8007f30:	0710      	lsls	r0, r2, #28
 8007f32:	d5e8      	bpl.n	8007f06 <__svfscanf_r+0x4e>
 8007f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f36:	3201      	adds	r2, #1
 8007f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	e7ed      	b.n	8007f22 <__svfscanf_r+0x6a>
 8007f46:	ee18 0a10 	vmov	r0, s16
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f003 fd6a 	bl	800ba24 <__srefill_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d0e9      	beq.n	8007f28 <__svfscanf_r+0x70>
 8007f54:	e7d7      	b.n	8007f06 <__svfscanf_r+0x4e>
 8007f56:	2b25      	cmp	r3, #37	; 0x25
 8007f58:	d165      	bne.n	8008026 <__svfscanf_r+0x16e>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8007f60:	46c1      	mov	r9, r8
 8007f62:	220a      	movs	r2, #10
 8007f64:	6979      	ldr	r1, [r7, #20]
 8007f66:	781d      	ldrb	r5, [r3, #0]
 8007f68:	3101      	adds	r1, #1
 8007f6a:	6179      	str	r1, [r7, #20]
 8007f6c:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8007f70:	2955      	cmp	r1, #85	; 0x55
 8007f72:	f200 80a6 	bhi.w	80080c2 <__svfscanf_r+0x20a>
 8007f76:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f7a:	0056      	.short	0x0056
 8007f7c:	00a400a4 	.word	0x00a400a4
 8007f80:	00a400a4 	.word	0x00a400a4
 8007f84:	00a4007d 	.word	0x00a4007d
 8007f88:	00a400a4 	.word	0x00a400a4
 8007f8c:	00a400a4 	.word	0x00a400a4
 8007f90:	00d100d1 	.word	0x00d100d1
 8007f94:	00d100d1 	.word	0x00d100d1
 8007f98:	00d100d1 	.word	0x00d100d1
 8007f9c:	00d100d1 	.word	0x00d100d1
 8007fa0:	00d100d1 	.word	0x00d100d1
 8007fa4:	00a400a4 	.word	0x00a400a4
 8007fa8:	00a400a4 	.word	0x00a400a4
 8007fac:	00a400a4 	.word	0x00a400a4
 8007fb0:	00f700a4 	.word	0x00f700a4
 8007fb4:	011b00a4 	.word	0x011b00a4
 8007fb8:	00f700db 	.word	0x00f700db
 8007fbc:	00f700f7 	.word	0x00f700f7
 8007fc0:	00a400a4 	.word	0x00a400a4
 8007fc4:	00a400a4 	.word	0x00a400a4
 8007fc8:	00a400a1 	.word	0x00a400a1
 8007fcc:	00df00a4 	.word	0x00df00a4
 8007fd0:	00a400a4 	.word	0x00a400a4
 8007fd4:	010d00a4 	.word	0x010d00a4
 8007fd8:	00a400a4 	.word	0x00a400a4
 8007fdc:	00a400a4 	.word	0x00a400a4
 8007fe0:	00a400eb 	.word	0x00a400eb
 8007fe4:	011100a4 	.word	0x011100a4
 8007fe8:	00a400a4 	.word	0x00a400a4
 8007fec:	00a400a4 	.word	0x00a400a4
 8007ff0:	00f700a4 	.word	0x00f700a4
 8007ff4:	011d00a4 	.word	0x011d00a4
 8007ff8:	00f700dd 	.word	0x00f700dd
 8007ffc:	00f700f7 	.word	0x00f700f7
 8008000:	01450094 	.word	0x01450094
 8008004:	00a400a1 	.word	0x00a400a1
 8008008:	00c40086 	.word	0x00c40086
 800800c:	00e10124 	.word	0x00e10124
 8008010:	00a40121 	.word	0x00a40121
 8008014:	010f00a4 	.word	0x010f00a4
 8008018:	00e700c0 	.word	0x00e700c0
 800801c:	00a400a4 	.word	0x00a400a4
 8008020:	00a400eb 	.word	0x00a400eb
 8008024:	00c0      	.short	0x00c0
 8008026:	6863      	ldr	r3, [r4, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dd0f      	ble.n	800804c <__svfscanf_r+0x194>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	7819      	ldrb	r1, [r3, #0]
 8008032:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8008036:	4291      	cmp	r1, r2
 8008038:	d143      	bne.n	80080c2 <__svfscanf_r+0x20a>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	3301      	adds	r3, #1
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	3a01      	subs	r2, #1
 8008044:	6062      	str	r2, [r4, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804a:	e75c      	b.n	8007f06 <__svfscanf_r+0x4e>
 800804c:	ee18 0a10 	vmov	r0, s16
 8008050:	4621      	mov	r1, r4
 8008052:	f003 fce7 	bl	800ba24 <__srefill_r>
 8008056:	2800      	cmp	r0, #0
 8008058:	d0e8      	beq.n	800802c <__svfscanf_r+0x174>
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 810e 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	bf18      	it	ne
 800806c:	f04f 33ff 	movne.w	r3, #4294967295
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
 8008072:	e026      	b.n	80080c2 <__svfscanf_r+0x20a>
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	ea53 0309 	orrs.w	r3, r3, r9
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
 800807c:	d121      	bne.n	80080c2 <__svfscanf_r+0x20a>
 800807e:	f04f 0910 	mov.w	r9, #16
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	e76e      	b.n	8007f64 <__svfscanf_r+0xac>
 8008086:	f019 0f0f 	tst.w	r9, #15
 800808a:	d11a      	bne.n	80080c2 <__svfscanf_r+0x20a>
 800808c:	7859      	ldrb	r1, [r3, #1]
 800808e:	296c      	cmp	r1, #108	; 0x6c
 8008090:	d104      	bne.n	800809c <__svfscanf_r+0x1e4>
 8008092:	3302      	adds	r3, #2
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	f049 0902 	orr.w	r9, r9, #2
 800809a:	e7f2      	b.n	8008082 <__svfscanf_r+0x1ca>
 800809c:	f049 0901 	orr.w	r9, r9, #1
 80080a0:	e7ef      	b.n	8008082 <__svfscanf_r+0x1ca>
 80080a2:	f019 0f0f 	tst.w	r9, #15
 80080a6:	d10c      	bne.n	80080c2 <__svfscanf_r+0x20a>
 80080a8:	7859      	ldrb	r1, [r3, #1]
 80080aa:	2968      	cmp	r1, #104	; 0x68
 80080ac:	bf03      	ittte	eq
 80080ae:	3302      	addeq	r3, #2
 80080b0:	617b      	streq	r3, [r7, #20]
 80080b2:	f049 0908 	orreq.w	r9, r9, #8
 80080b6:	f049 0904 	orrne.w	r9, r9, #4
 80080ba:	e7e2      	b.n	8008082 <__svfscanf_r+0x1ca>
 80080bc:	f019 0f0f 	tst.w	r9, #15
 80080c0:	d0e9      	beq.n	8008096 <__svfscanf_r+0x1de>
 80080c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c4:	07da      	lsls	r2, r3, #31
 80080c6:	d405      	bmi.n	80080d4 <__svfscanf_r+0x21c>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	059b      	lsls	r3, r3, #22
 80080cc:	d402      	bmi.n	80080d4 <__svfscanf_r+0x21c>
 80080ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d0:	f002 fb69 	bl	800a7a6 <__retarget_lock_release_recursive>
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	b143      	cbz	r3, 80080ea <__svfscanf_r+0x232>
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	3301      	adds	r3, #1
 80080dc:	f001 8092 	beq.w	8009204 <__svfscanf_r+0x134c>
 80080e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f041 8090 	bne.w	800920a <__svfscanf_r+0x1352>
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 80080f0:	46bd      	mov	sp, r7
 80080f2:	ecbd 8b02 	vpop	{d8}
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	f019 0f0f 	tst.w	r9, #15
 80080fe:	d0c0      	beq.n	8008082 <__svfscanf_r+0x1ca>
 8008100:	e7df      	b.n	80080c2 <__svfscanf_r+0x20a>
 8008102:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8008106:	d1dc      	bne.n	80080c2 <__svfscanf_r+0x20a>
 8008108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800810a:	b921      	cbnz	r1, 8008116 <__svfscanf_r+0x25e>
 800810c:	b082      	sub	sp, #8
 800810e:	a902      	add	r1, sp, #8
 8008110:	e9c1 3300 	strd	r3, r3, [r1]
 8008114:	6379      	str	r1, [r7, #52]	; 0x34
 8008116:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800811a:	e7b2      	b.n	8008082 <__svfscanf_r+0x1ca>
 800811c:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8008120:	d1cf      	bne.n	80080c2 <__svfscanf_r+0x20a>
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	fb02 5503 	mla	r5, r2, r3, r5
 8008128:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800812c:	633b      	str	r3, [r7, #48]	; 0x30
 800812e:	e7a8      	b.n	8008082 <__svfscanf_r+0x1ca>
 8008130:	f049 0901 	orr.w	r9, r9, #1
 8008134:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <__svfscanf_r+0x2a8>)
 8008136:	e008      	b.n	800814a <__svfscanf_r+0x292>
 8008138:	f049 0901 	orr.w	r9, r9, #1
 800813c:	4b09      	ldr	r3, [pc, #36]	; (8008164 <__svfscanf_r+0x2ac>)
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	2308      	movs	r3, #8
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	2503      	movs	r5, #3
 8008146:	e010      	b.n	800816a <__svfscanf_r+0x2b2>
 8008148:	4b06      	ldr	r3, [pc, #24]	; (8008164 <__svfscanf_r+0x2ac>)
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	230a      	movs	r3, #10
 800814e:	e7f8      	b.n	8008142 <__svfscanf_r+0x28a>
 8008150:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <__svfscanf_r+0x2ac>)
 8008156:	61bb      	str	r3, [r7, #24]
 8008158:	2310      	movs	r3, #16
 800815a:	e7f2      	b.n	8008142 <__svfscanf_r+0x28a>
 800815c:	08010dc5 	.word	0x08010dc5
 8008160:	08006955 	.word	0x08006955
 8008164:	0800cae5 	.word	0x0800cae5
 8008168:	2504      	movs	r5, #4
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dd4d      	ble.n	800820c <__svfscanf_r+0x354>
 8008170:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008174:	d105      	bne.n	8008182 <__svfscanf_r+0x2ca>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	49a3      	ldr	r1, [pc, #652]	; (8008408 <__svfscanf_r+0x550>)
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	5c52      	ldrb	r2, [r2, r1]
 800817e:	0711      	lsls	r1, r2, #28
 8008180:	d44c      	bmi.n	800821c <__svfscanf_r+0x364>
 8008182:	3d01      	subs	r5, #1
 8008184:	2d03      	cmp	r5, #3
 8008186:	d85c      	bhi.n	8008242 <__svfscanf_r+0x38a>
 8008188:	e8df f015 	tbh	[pc, r5, lsl #1]
 800818c:	037801ba 	.word	0x037801ba
 8008190:	06170524 	.word	0x06170524
 8008194:	f049 0901 	orr.w	r9, r9, #1
 8008198:	2502      	movs	r5, #2
 800819a:	e7e6      	b.n	800816a <__svfscanf_r+0x2b2>
 800819c:	6979      	ldr	r1, [r7, #20]
 800819e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80081a2:	f003 fd09 	bl	800bbb8 <__sccl>
 80081a6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80081aa:	6178      	str	r0, [r7, #20]
 80081ac:	2501      	movs	r5, #1
 80081ae:	e7dc      	b.n	800816a <__svfscanf_r+0x2b2>
 80081b0:	f049 0901 	orr.w	r9, r9, #1
 80081b4:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80081b8:	2500      	movs	r5, #0
 80081ba:	e7d6      	b.n	800816a <__svfscanf_r+0x2b2>
 80081bc:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80081c0:	e7c8      	b.n	8008154 <__svfscanf_r+0x29c>
 80081c2:	f019 0f10 	tst.w	r9, #16
 80081c6:	f47f ae9e 	bne.w	8007f06 <__svfscanf_r+0x4e>
 80081ca:	f019 0f08 	tst.w	r9, #8
 80081ce:	f856 3b04 	ldr.w	r3, [r6], #4
 80081d2:	d002      	beq.n	80081da <__svfscanf_r+0x322>
 80081d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e695      	b.n	8007f06 <__svfscanf_r+0x4e>
 80081da:	f019 0f04 	tst.w	r9, #4
 80081de:	d002      	beq.n	80081e6 <__svfscanf_r+0x32e>
 80081e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e68f      	b.n	8007f06 <__svfscanf_r+0x4e>
 80081e6:	f019 0f01 	tst.w	r9, #1
 80081ea:	d002      	beq.n	80081f2 <__svfscanf_r+0x33a>
 80081ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e689      	b.n	8007f06 <__svfscanf_r+0x4e>
 80081f2:	f019 0f02 	tst.w	r9, #2
 80081f6:	d0f9      	beq.n	80081ec <__svfscanf_r+0x334>
 80081f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081fc:	17d2      	asrs	r2, r2, #31
 80081fe:	e9c3 1200 	strd	r1, r2, [r3]
 8008202:	e680      	b.n	8007f06 <__svfscanf_r+0x4e>
 8008204:	4b81      	ldr	r3, [pc, #516]	; (800840c <__svfscanf_r+0x554>)
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	2300      	movs	r3, #0
 800820a:	e79a      	b.n	8008142 <__svfscanf_r+0x28a>
 800820c:	ee18 0a10 	vmov	r0, s16
 8008210:	4621      	mov	r1, r4
 8008212:	f003 fc07 	bl	800ba24 <__srefill_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	d0aa      	beq.n	8008170 <__svfscanf_r+0x2b8>
 800821a:	e71e      	b.n	800805a <__svfscanf_r+0x1a2>
 800821c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821e:	3201      	adds	r2, #1
 8008220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	3a01      	subs	r2, #1
 8008226:	2a00      	cmp	r2, #0
 8008228:	6062      	str	r2, [r4, #4]
 800822a:	dd02      	ble.n	8008232 <__svfscanf_r+0x37a>
 800822c:	3301      	adds	r3, #1
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	e7a1      	b.n	8008176 <__svfscanf_r+0x2be>
 8008232:	ee18 0a10 	vmov	r0, s16
 8008236:	4621      	mov	r1, r4
 8008238:	f003 fbf4 	bl	800ba24 <__srefill_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	d09a      	beq.n	8008176 <__svfscanf_r+0x2be>
 8008240:	e70b      	b.n	800805a <__svfscanf_r+0x1a2>
 8008242:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8008244:	2d01      	cmp	r5, #1
 8008246:	bf38      	it	cc
 8008248:	2501      	movcc	r5, #1
 800824a:	f019 0801 	ands.w	r8, r9, #1
 800824e:	f009 0b10 	and.w	fp, r9, #16
 8008252:	f000 80dd 	beq.w	8008410 <__svfscanf_r+0x558>
 8008256:	f1bb 0f00 	cmp.w	fp, #0
 800825a:	f040 809a 	bne.w	8008392 <__svfscanf_r+0x4da>
 800825e:	4633      	mov	r3, r6
 8008260:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008264:	f853 6b04 	ldr.w	r6, [r3], #4
 8008268:	633b      	str	r3, [r7, #48]	; 0x30
 800826a:	f000 8099 	beq.w	80083a0 <__svfscanf_r+0x4e8>
 800826e:	2e00      	cmp	r6, #0
 8008270:	f43f af27 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008274:	2080      	movs	r0, #128	; 0x80
 8008276:	f002 fb03 	bl	800a880 <malloc>
 800827a:	4680      	mov	r8, r0
 800827c:	b910      	cbnz	r0, 8008284 <__svfscanf_r+0x3cc>
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	e6f5      	b.n	8008070 <__svfscanf_r+0x1b8>
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	6030      	str	r0, [r6, #0]
 8008288:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800828c:	889b      	ldrh	r3, [r3, #4]
 800828e:	4599      	cmp	r9, r3
 8008290:	d312      	bcc.n	80082b8 <__svfscanf_r+0x400>
 8008292:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008296:	4293      	cmp	r3, r2
 8008298:	d8f1      	bhi.n	800827e <__svfscanf_r+0x3c6>
 800829a:	3308      	adds	r3, #8
 800829c:	fa1f fa83 	uxth.w	sl, r3
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f003 fa06 	bl	800b6b8 <realloc>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0e6      	beq.n	800827e <__svfscanf_r+0x3c6>
 80082b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b2:	6018      	str	r0, [r3, #0]
 80082b4:	f8a3 a004 	strh.w	sl, [r3, #4]
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f109 0201 	add.w	r2, r9, #1
 80082c2:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80082c6:	46b2      	mov	sl, r6
 80082c8:	80ca      	strh	r2, [r1, #6]
 80082ca:	4646      	mov	r6, r8
 80082cc:	f04f 0920 	mov.w	r9, #32
 80082d0:	2200      	movs	r2, #0
 80082d2:	627a      	str	r2, [r7, #36]	; 0x24
 80082d4:	f002 fa5a 	bl	800a78c <__locale_mb_cur_max>
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	4290      	cmp	r0, r2
 80082dc:	f43f aebd 	beq.w	800805a <__svfscanf_r+0x1a2>
 80082e0:	6821      	ldr	r1, [r4, #0]
 80082e2:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80082e6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80082ea:	f80c 0002 	strb.w	r0, [ip, r2]
 80082ee:	1c53      	adds	r3, r2, #1
 80082f0:	6862      	ldr	r2, [r4, #4]
 80082f2:	3a01      	subs	r2, #1
 80082f4:	e9c4 1200 	strd	r1, r2, [r4]
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	2a03      	cmp	r2, #3
 80082fc:	d102      	bne.n	8008304 <__svfscanf_r+0x44c>
 80082fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008300:	2a04      	cmp	r2, #4
 8008302:	d007      	beq.n	8008314 <__svfscanf_r+0x45c>
 8008304:	2208      	movs	r2, #8
 8008306:	2100      	movs	r1, #0
 8008308:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	f7fe f96f 	bl	80065f0 <memset>
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
 8008316:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800831a:	9200      	str	r2, [sp, #0]
 800831c:	ee18 0a10 	vmov	r0, s16
 8008320:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008324:	4631      	mov	r1, r6
 8008326:	f002 fcf7 	bl	800ad18 <_mbrtowc_r>
 800832a:	1c42      	adds	r2, r0, #1
 800832c:	6238      	str	r0, [r7, #32]
 800832e:	f43f ae94 	beq.w	800805a <__svfscanf_r+0x1a2>
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2800      	cmp	r0, #0
 8008336:	d137      	bne.n	80083a8 <__svfscanf_r+0x4f0>
 8008338:	f1bb 0f00 	cmp.w	fp, #0
 800833c:	d101      	bne.n	8008342 <__svfscanf_r+0x48a>
 800833e:	f8c6 b000 	str.w	fp, [r6]
 8008342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008344:	441a      	add	r2, r3
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834a:	2b03      	cmp	r3, #3
 800834c:	d102      	bne.n	8008354 <__svfscanf_r+0x49c>
 800834e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008350:	2b04      	cmp	r3, #4
 8008352:	d000      	beq.n	8008356 <__svfscanf_r+0x49e>
 8008354:	3d01      	subs	r5, #1
 8008356:	f1bb 0f00 	cmp.w	fp, #0
 800835a:	d118      	bne.n	800838e <__svfscanf_r+0x4d6>
 800835c:	f1ba 0f00 	cmp.w	sl, #0
 8008360:	d014      	beq.n	800838c <__svfscanf_r+0x4d4>
 8008362:	eba6 0308 	sub.w	r3, r6, r8
 8008366:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800836a:	d80f      	bhi.n	800838c <__svfscanf_r+0x4d4>
 800836c:	4640      	mov	r0, r8
 800836e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
 8008374:	f003 f9a0 	bl	800b6b8 <realloc>
 8008378:	4680      	mov	r8, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f af7f 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f8ca 0000 	str.w	r0, [sl]
 8008386:	18c6      	adds	r6, r0, r3
 8008388:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800838c:	3604      	adds	r6, #4
 800838e:	2200      	movs	r2, #0
 8008390:	e00e      	b.n	80083b0 <__svfscanf_r+0x4f8>
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	633e      	str	r6, [r7, #48]	; 0x30
 8008398:	46c8      	mov	r8, r9
 800839a:	46ca      	mov	sl, r9
 800839c:	464e      	mov	r6, r9
 800839e:	e797      	b.n	80082d0 <__svfscanf_r+0x418>
 80083a0:	46d9      	mov	r9, fp
 80083a2:	46d8      	mov	r8, fp
 80083a4:	46da      	mov	sl, fp
 80083a6:	e793      	b.n	80082d0 <__svfscanf_r+0x418>
 80083a8:	6a3a      	ldr	r2, [r7, #32]
 80083aa:	3202      	adds	r2, #2
 80083ac:	d1c9      	bne.n	8008342 <__svfscanf_r+0x48a>
 80083ae:	461a      	mov	r2, r3
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dc15      	bgt.n	80083e2 <__svfscanf_r+0x52a>
 80083b6:	ee18 0a10 	vmov	r0, s16
 80083ba:	4621      	mov	r1, r4
 80083bc:	627a      	str	r2, [r7, #36]	; 0x24
 80083be:	f003 fb31 	bl	800ba24 <__srefill_r>
 80083c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c4:	b168      	cbz	r0, 80083e2 <__svfscanf_r+0x52a>
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	f47f ae47 	bne.w	800805a <__svfscanf_r+0x1a2>
 80083cc:	f1ba 0f00 	cmp.w	sl, #0
 80083d0:	d10b      	bne.n	80083ea <__svfscanf_r+0x532>
 80083d2:	f1bb 0f00 	cmp.w	fp, #0
 80083d6:	d102      	bne.n	80083de <__svfscanf_r+0x526>
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	3301      	adds	r3, #1
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80083de:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80083e0:	e591      	b.n	8007f06 <__svfscanf_r+0x4e>
 80083e2:	2d00      	cmp	r5, #0
 80083e4:	f47f af75 	bne.w	80082d2 <__svfscanf_r+0x41a>
 80083e8:	e7f0      	b.n	80083cc <__svfscanf_r+0x514>
 80083ea:	eba6 0108 	sub.w	r1, r6, r8
 80083ee:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80083f2:	d9ee      	bls.n	80083d2 <__svfscanf_r+0x51a>
 80083f4:	f8da 0000 	ldr.w	r0, [sl]
 80083f8:	f003 f95e 	bl	800b6b8 <realloc>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d0e8      	beq.n	80083d2 <__svfscanf_r+0x51a>
 8008400:	f8ca 0000 	str.w	r0, [sl]
 8008404:	e7e5      	b.n	80083d2 <__svfscanf_r+0x51a>
 8008406:	bf00      	nop
 8008408:	08010dc5 	.word	0x08010dc5
 800840c:	08006955 	.word	0x08006955
 8008410:	f1bb 0f00 	cmp.w	fp, #0
 8008414:	d01b      	beq.n	800844e <__svfscanf_r+0x596>
 8008416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800841a:	429d      	cmp	r5, r3
 800841c:	dd11      	ble.n	8008442 <__svfscanf_r+0x58a>
 800841e:	4498      	add	r8, r3
 8008420:	1aed      	subs	r5, r5, r3
 8008422:	4413      	add	r3, r2
 8008424:	ee18 0a10 	vmov	r0, s16
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	4621      	mov	r1, r4
 800842c:	f003 fafa 	bl	800ba24 <__srefill_r>
 8008430:	2800      	cmp	r0, #0
 8008432:	d0f0      	beq.n	8008416 <__svfscanf_r+0x55e>
 8008434:	f1b8 0f00 	cmp.w	r8, #0
 8008438:	f43f ae0f 	beq.w	800805a <__svfscanf_r+0x1a2>
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	4443      	add	r3, r8
 8008440:	e602      	b.n	8008048 <__svfscanf_r+0x190>
 8008442:	1b5b      	subs	r3, r3, r5
 8008444:	442a      	add	r2, r5
 8008446:	44a8      	add	r8, r5
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	e7f6      	b.n	800843c <__svfscanf_r+0x584>
 800844e:	46b0      	mov	r8, r6
 8008450:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008454:	f858 6b04 	ldr.w	r6, [r8], #4
 8008458:	d031      	beq.n	80084be <__svfscanf_r+0x606>
 800845a:	2e00      	cmp	r6, #0
 800845c:	f43f ae31 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008460:	4628      	mov	r0, r5
 8008462:	f002 fa0d 	bl	800a880 <malloc>
 8008466:	4682      	mov	sl, r0
 8008468:	2800      	cmp	r0, #0
 800846a:	f43f af08 	beq.w	800827e <__svfscanf_r+0x3c6>
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	6030      	str	r0, [r6, #0]
 8008472:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008476:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800847a:	45cb      	cmp	fp, r9
 800847c:	d315      	bcc.n	80084aa <__svfscanf_r+0x5f2>
 800847e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008482:	4599      	cmp	r9, r3
 8008484:	f63f aefb 	bhi.w	800827e <__svfscanf_r+0x3c6>
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	f109 0908 	add.w	r9, r9, #8
 800848e:	fa1f f989 	uxth.w	r9, r9
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008498:	f003 f90e 	bl	800b6b8 <realloc>
 800849c:	2800      	cmp	r0, #0
 800849e:	f43f aeee 	beq.w	800827e <__svfscanf_r+0x3c6>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	6018      	str	r0, [r3, #0]
 80084a6:	f8a3 9004 	strh.w	r9, [r3, #4]
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f10b 0201 	add.w	r2, fp, #1
 80084b4:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80084b8:	46b1      	mov	r9, r6
 80084ba:	80ca      	strh	r2, [r1, #6]
 80084bc:	4656      	mov	r6, sl
 80084be:	4631      	mov	r1, r6
 80084c0:	ee18 0a10 	vmov	r0, s16
 80084c4:	9400      	str	r4, [sp, #0]
 80084c6:	462b      	mov	r3, r5
 80084c8:	2201      	movs	r2, #1
 80084ca:	f001 fe4f 	bl	800a16c <_fread_r>
 80084ce:	4606      	mov	r6, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f43f adc2 	beq.w	800805a <__svfscanf_r+0x1a2>
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	d009      	beq.n	80084f0 <__svfscanf_r+0x638>
 80084dc:	4285      	cmp	r5, r0
 80084de:	d907      	bls.n	80084f0 <__svfscanf_r+0x638>
 80084e0:	4601      	mov	r1, r0
 80084e2:	f8d9 0000 	ldr.w	r0, [r9]
 80084e6:	f003 f8e7 	bl	800b6b8 <realloc>
 80084ea:	b108      	cbz	r0, 80084f0 <__svfscanf_r+0x638>
 80084ec:	f8c9 0000 	str.w	r0, [r9]
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	4433      	add	r3, r6
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	3301      	adds	r3, #1
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fc:	4646      	mov	r6, r8
 80084fe:	e502      	b.n	8007f06 <__svfscanf_r+0x4e>
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf08      	it	eq
 8008506:	f04f 33ff 	moveq.w	r3, #4294967295
 800850a:	f019 0501 	ands.w	r5, r9, #1
 800850e:	633b      	str	r3, [r7, #48]	; 0x30
 8008510:	f009 0b10 	and.w	fp, r9, #16
 8008514:	f000 8107 	beq.w	8008726 <__svfscanf_r+0x86e>
 8008518:	f1bb 0f00 	cmp.w	fp, #0
 800851c:	f040 80a7 	bne.w	800866e <__svfscanf_r+0x7b6>
 8008520:	4633      	mov	r3, r6
 8008522:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008526:	f853 5b04 	ldr.w	r5, [r3], #4
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	f000 80a8 	beq.w	8008680 <__svfscanf_r+0x7c8>
 8008530:	2d00      	cmp	r5, #0
 8008532:	f43f adc6 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008536:	2080      	movs	r0, #128	; 0x80
 8008538:	f002 f9a2 	bl	800a880 <malloc>
 800853c:	4680      	mov	r8, r0
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f ae9d 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008546:	6028      	str	r0, [r5, #0]
 8008548:	88de      	ldrh	r6, [r3, #6]
 800854a:	889b      	ldrh	r3, [r3, #4]
 800854c:	429e      	cmp	r6, r3
 800854e:	d314      	bcc.n	800857a <__svfscanf_r+0x6c2>
 8008550:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008554:	4293      	cmp	r3, r2
 8008556:	f63f ae92 	bhi.w	800827e <__svfscanf_r+0x3c6>
 800855a:	3308      	adds	r3, #8
 800855c:	fa1f f983 	uxth.w	r9, r3
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	f003 f8a6 	bl	800b6b8 <realloc>
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f ae86 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	6018      	str	r0, [r3, #0]
 8008576:	f8a3 9004 	strh.w	r9, [r3, #4]
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	627d      	str	r5, [r7, #36]	; 0x24
 8008582:	1c72      	adds	r2, r6, #1
 8008584:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8008588:	80ca      	strh	r2, [r1, #6]
 800858a:	4645      	mov	r5, r8
 800858c:	f04f 0a20 	mov.w	sl, #32
 8008590:	2600      	movs	r6, #0
 8008592:	f002 f8fb 	bl	800a78c <__locale_mb_cur_max>
 8008596:	42b0      	cmp	r0, r6
 8008598:	f43f ad5f 	beq.w	800805a <__svfscanf_r+0x1a2>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80085a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a6:	558a      	strb	r2, [r1, r6]
 80085a8:	6862      	ldr	r2, [r4, #4]
 80085aa:	3a01      	subs	r2, #1
 80085ac:	e9c4 3200 	strd	r3, r2, [r4]
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	f106 0901 	add.w	r9, r6, #1
 80085b8:	d102      	bne.n	80085c0 <__svfscanf_r+0x708>
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d005      	beq.n	80085cc <__svfscanf_r+0x714>
 80085c0:	2208      	movs	r2, #8
 80085c2:	2100      	movs	r1, #0
 80085c4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80085c8:	f7fe f812 	bl	80065f0 <memset>
 80085cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	ee18 0a10 	vmov	r0, s16
 80085d6:	464b      	mov	r3, r9
 80085d8:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80085dc:	4629      	mov	r1, r5
 80085de:	f002 fb9b 	bl	800ad18 <_mbrtowc_r>
 80085e2:	4603      	mov	r3, r0
 80085e4:	6238      	str	r0, [r7, #32]
 80085e6:	1c58      	adds	r0, r3, #1
 80085e8:	f43f ad37 	beq.w	800805a <__svfscanf_r+0x1a2>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d14c      	bne.n	800868a <__svfscanf_r+0x7d2>
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	682e      	ldr	r6, [r5, #0]
 80085f4:	1c71      	adds	r1, r6, #1
 80085f6:	d059      	beq.n	80086ac <__svfscanf_r+0x7f4>
 80085f8:	2208      	movs	r2, #8
 80085fa:	2100      	movs	r1, #0
 80085fc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008600:	f7fd fff6 	bl	80065f0 <memset>
 8008604:	4b9c      	ldr	r3, [pc, #624]	; (8008878 <__svfscanf_r+0x9c0>)
 8008606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	4632      	mov	r2, r6
 800860e:	ee18 0a10 	vmov	r0, s16
 8008612:	68fe      	ldr	r6, [r7, #12]
 8008614:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008618:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800861c:	47b0      	blx	r6
 800861e:	2801      	cmp	r0, #1
 8008620:	d146      	bne.n	80086b0 <__svfscanf_r+0x7f8>
 8008622:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800862a:	5c9b      	ldrb	r3, [r3, r2]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d14b      	bne.n	80086c8 <__svfscanf_r+0x810>
 8008630:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8008634:	f1b9 0f00 	cmp.w	r9, #0
 8008638:	d13c      	bne.n	80086b4 <__svfscanf_r+0x7fc>
 800863a:	f1bb 0f00 	cmp.w	fp, #0
 800863e:	d114      	bne.n	800866a <__svfscanf_r+0x7b2>
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	f8c5 b000 	str.w	fp, [r5]
 8008646:	b16b      	cbz	r3, 8008664 <__svfscanf_r+0x7ac>
 8008648:	eba5 0108 	sub.w	r1, r5, r8
 800864c:	108b      	asrs	r3, r1, #2
 800864e:	3301      	adds	r3, #1
 8008650:	459a      	cmp	sl, r3
 8008652:	d907      	bls.n	8008664 <__svfscanf_r+0x7ac>
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	3104      	adds	r1, #4
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f003 f82d 	bl	800b6b8 <realloc>
 800865e:	b108      	cbz	r0, 8008664 <__svfscanf_r+0x7ac>
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	6018      	str	r0, [r3, #0]
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	3301      	adds	r3, #1
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
 800866a:	693e      	ldr	r6, [r7, #16]
 800866c:	e44b      	b.n	8007f06 <__svfscanf_r+0x4e>
 800866e:	f04f 0a00 	mov.w	sl, #0
 8008672:	613e      	str	r6, [r7, #16]
 8008674:	46d0      	mov	r8, sl
 8008676:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800867a:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800867e:	e787      	b.n	8008590 <__svfscanf_r+0x6d8>
 8008680:	46da      	mov	sl, fp
 8008682:	46d8      	mov	r8, fp
 8008684:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008688:	e782      	b.n	8008590 <__svfscanf_r+0x6d8>
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	3302      	adds	r3, #2
 800868e:	d1b0      	bne.n	80085f2 <__svfscanf_r+0x73a>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dc42      	bgt.n	800871c <__svfscanf_r+0x864>
 8008696:	ee18 0a10 	vmov	r0, s16
 800869a:	4621      	mov	r1, r4
 800869c:	f003 f9c2 	bl	800ba24 <__srefill_r>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d03b      	beq.n	800871c <__svfscanf_r+0x864>
 80086a4:	f1b9 0f00 	cmp.w	r9, #0
 80086a8:	d0c7      	beq.n	800863a <__svfscanf_r+0x782>
 80086aa:	e4d6      	b.n	800805a <__svfscanf_r+0x1a2>
 80086ac:	4632      	mov	r2, r6
 80086ae:	e7ba      	b.n	8008626 <__svfscanf_r+0x76e>
 80086b0:	2200      	movs	r2, #0
 80086b2:	e7b8      	b.n	8008626 <__svfscanf_r+0x76e>
 80086b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80086b8:	ee18 0a10 	vmov	r0, s16
 80086bc:	f816 1009 	ldrb.w	r1, [r6, r9]
 80086c0:	4622      	mov	r2, r4
 80086c2:	f005 fcc2 	bl	800e04a <_ungetc_r>
 80086c6:	e7b5      	b.n	8008634 <__svfscanf_r+0x77c>
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	444b      	add	r3, r9
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d102      	bne.n	80086da <__svfscanf_r+0x822>
 80086d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d002      	beq.n	80086e0 <__svfscanf_r+0x828>
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	3b01      	subs	r3, #1
 80086de:	633b      	str	r3, [r7, #48]	; 0x30
 80086e0:	f1bb 0f00 	cmp.w	fp, #0
 80086e4:	d117      	bne.n	8008716 <__svfscanf_r+0x85e>
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	3504      	adds	r5, #4
 80086ea:	b1a3      	cbz	r3, 8008716 <__svfscanf_r+0x85e>
 80086ec:	eba5 0608 	sub.w	r6, r5, r8
 80086f0:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 80086f4:	d80d      	bhi.n	8008712 <__svfscanf_r+0x85a>
 80086f6:	4640      	mov	r0, r8
 80086f8:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 80086fc:	f002 ffdc 	bl	800b6b8 <realloc>
 8008700:	4680      	mov	r8, r0
 8008702:	2800      	cmp	r0, #0
 8008704:	f43f adbb 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	1985      	adds	r5, r0, r6
 800870c:	6018      	str	r0, [r3, #0]
 800870e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8008712:	46d9      	mov	r9, fp
 8008714:	e7bc      	b.n	8008690 <__svfscanf_r+0x7d8>
 8008716:	f04f 0900 	mov.w	r9, #0
 800871a:	e7b9      	b.n	8008690 <__svfscanf_r+0x7d8>
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	2b00      	cmp	r3, #0
 8008720:	d08b      	beq.n	800863a <__svfscanf_r+0x782>
 8008722:	464e      	mov	r6, r9
 8008724:	e735      	b.n	8008592 <__svfscanf_r+0x6da>
 8008726:	f1bb 0f00 	cmp.w	fp, #0
 800872a:	d01d      	beq.n	8008768 <__svfscanf_r+0x8b0>
 800872c:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008738:	b90a      	cbnz	r2, 800873e <__svfscanf_r+0x886>
 800873a:	b995      	cbnz	r5, 8008762 <__svfscanf_r+0x8aa>
 800873c:	e4c1      	b.n	80080c2 <__svfscanf_r+0x20a>
 800873e:	3301      	adds	r3, #1
 8008740:	6862      	ldr	r2, [r4, #4]
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	3501      	adds	r5, #1
 8008748:	3a01      	subs	r2, #1
 800874a:	429d      	cmp	r5, r3
 800874c:	6062      	str	r2, [r4, #4]
 800874e:	d008      	beq.n	8008762 <__svfscanf_r+0x8aa>
 8008750:	2a00      	cmp	r2, #0
 8008752:	dced      	bgt.n	8008730 <__svfscanf_r+0x878>
 8008754:	ee18 0a10 	vmov	r0, s16
 8008758:	4621      	mov	r1, r4
 800875a:	f003 f963 	bl	800ba24 <__srefill_r>
 800875e:	2800      	cmp	r0, #0
 8008760:	d0e6      	beq.n	8008730 <__svfscanf_r+0x878>
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	442b      	add	r3, r5
 8008766:	e46f      	b.n	8008048 <__svfscanf_r+0x190>
 8008768:	46b3      	mov	fp, r6
 800876a:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800876e:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008772:	d07f      	beq.n	8008874 <__svfscanf_r+0x9bc>
 8008774:	2e00      	cmp	r6, #0
 8008776:	f43f aca4 	beq.w	80080c2 <__svfscanf_r+0x20a>
 800877a:	2020      	movs	r0, #32
 800877c:	f002 f880 	bl	800a880 <malloc>
 8008780:	4680      	mov	r8, r0
 8008782:	2800      	cmp	r0, #0
 8008784:	f43f ad7b 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	6030      	str	r0, [r6, #0]
 800878c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008790:	889d      	ldrh	r5, [r3, #4]
 8008792:	45a9      	cmp	r9, r5
 8008794:	d311      	bcc.n	80087ba <__svfscanf_r+0x902>
 8008796:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800879a:	429d      	cmp	r5, r3
 800879c:	f63f ad6f 	bhi.w	800827e <__svfscanf_r+0x3c6>
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	3508      	adds	r5, #8
 80087a4:	b2ad      	uxth	r5, r5
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	00a9      	lsls	r1, r5, #2
 80087aa:	f002 ff85 	bl	800b6b8 <realloc>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f ad65 	beq.w	800827e <__svfscanf_r+0x3c6>
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	6018      	str	r0, [r3, #0]
 80087b8:	809d      	strh	r5, [r3, #4]
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f109 0201 	add.w	r2, r9, #1
 80087c4:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80087c8:	46b2      	mov	sl, r6
 80087ca:	80ca      	strh	r2, [r1, #6]
 80087cc:	4646      	mov	r6, r8
 80087ce:	f04f 0920 	mov.w	r9, #32
 80087d2:	4635      	mov	r5, r6
 80087d4:	f107 0850 	add.w	r8, r7, #80	; 0x50
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	f818 2002 	ldrb.w	r2, [r8, r2]
 80087e0:	b36a      	cbz	r2, 800883e <__svfscanf_r+0x986>
 80087e2:	6862      	ldr	r2, [r4, #4]
 80087e4:	3a01      	subs	r2, #1
 80087e6:	6062      	str	r2, [r4, #4]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	6022      	str	r2, [r4, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	f806 3b01 	strb.w	r3, [r6], #1
 80087f2:	f1ba 0f00 	cmp.w	sl, #0
 80087f6:	d011      	beq.n	800881c <__svfscanf_r+0x964>
 80087f8:	1b73      	subs	r3, r6, r5
 80087fa:	454b      	cmp	r3, r9
 80087fc:	d30e      	bcc.n	800881c <__svfscanf_r+0x964>
 80087fe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008802:	4628      	mov	r0, r5
 8008804:	4649      	mov	r1, r9
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
 8008808:	f002 ff56 	bl	800b6b8 <realloc>
 800880c:	4605      	mov	r5, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f ad35 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	f8ca 0000 	str.w	r0, [sl]
 800881a:	18c6      	adds	r6, r0, r3
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	3b01      	subs	r3, #1
 8008820:	633b      	str	r3, [r7, #48]	; 0x30
 8008822:	d00c      	beq.n	800883e <__svfscanf_r+0x986>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	dcd6      	bgt.n	80087d8 <__svfscanf_r+0x920>
 800882a:	ee18 0a10 	vmov	r0, s16
 800882e:	4621      	mov	r1, r4
 8008830:	f003 f8f8 	bl	800ba24 <__srefill_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	d0cf      	beq.n	80087d8 <__svfscanf_r+0x920>
 8008838:	42ae      	cmp	r6, r5
 800883a:	f43f ac0e 	beq.w	800805a <__svfscanf_r+0x1a2>
 800883e:	1b75      	subs	r5, r6, r5
 8008840:	f43f ac3f 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008844:	2300      	movs	r3, #0
 8008846:	7033      	strb	r3, [r6, #0]
 8008848:	f1ba 0f00 	cmp.w	sl, #0
 800884c:	d009      	beq.n	8008862 <__svfscanf_r+0x9aa>
 800884e:	1c69      	adds	r1, r5, #1
 8008850:	4589      	cmp	r9, r1
 8008852:	d906      	bls.n	8008862 <__svfscanf_r+0x9aa>
 8008854:	f8da 0000 	ldr.w	r0, [sl]
 8008858:	f002 ff2e 	bl	800b6b8 <realloc>
 800885c:	b108      	cbz	r0, 8008862 <__svfscanf_r+0x9aa>
 800885e:	f8ca 0000 	str.w	r0, [sl]
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	3301      	adds	r3, #1
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	442b      	add	r3, r5
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800886e:	465e      	mov	r6, fp
 8008870:	f7ff bb49 	b.w	8007f06 <__svfscanf_r+0x4e>
 8008874:	46ca      	mov	sl, r9
 8008876:	e7ac      	b.n	80087d2 <__svfscanf_r+0x91a>
 8008878:	2000043c 	.word	0x2000043c
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	2b00      	cmp	r3, #0
 8008880:	bf08      	it	eq
 8008882:	f04f 33ff 	moveq.w	r3, #4294967295
 8008886:	f019 0501 	ands.w	r5, r9, #1
 800888a:	633b      	str	r3, [r7, #48]	; 0x30
 800888c:	f009 0810 	and.w	r8, r9, #16
 8008890:	f000 80fb 	beq.w	8008a8a <__svfscanf_r+0xbd2>
 8008894:	f1b8 0f00 	cmp.w	r8, #0
 8008898:	f040 80a0 	bne.w	80089dc <__svfscanf_r+0xb24>
 800889c:	4633      	mov	r3, r6
 800889e:	f019 0f80 	tst.w	r9, #128	; 0x80
 80088a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
 80088a8:	f000 80a0 	beq.w	80089ec <__svfscanf_r+0xb34>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	f43f ac08 	beq.w	80080c2 <__svfscanf_r+0x20a>
 80088b2:	2080      	movs	r0, #128	; 0x80
 80088b4:	f001 ffe4 	bl	800a880 <malloc>
 80088b8:	4605      	mov	r5, r0
 80088ba:	2800      	cmp	r0, #0
 80088bc:	f43f acdf 	beq.w	800827e <__svfscanf_r+0x3c6>
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	6030      	str	r0, [r6, #0]
 80088c4:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80088c8:	889b      	ldrh	r3, [r3, #4]
 80088ca:	4599      	cmp	r9, r3
 80088cc:	d314      	bcc.n	80088f8 <__svfscanf_r+0xa40>
 80088ce:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80088d2:	4293      	cmp	r3, r2
 80088d4:	f63f acd3 	bhi.w	800827e <__svfscanf_r+0x3c6>
 80088d8:	3308      	adds	r3, #8
 80088da:	fa1f fa83 	uxth.w	sl, r3
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f002 fee7 	bl	800b6b8 <realloc>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f43f acc7 	beq.w	800827e <__svfscanf_r+0x3c6>
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	6018      	str	r0, [r3, #0]
 80088f4:	f8a3 a004 	strh.w	sl, [r3, #4]
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f109 0201 	add.w	r2, r9, #1
 8008902:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008906:	46b2      	mov	sl, r6
 8008908:	80ca      	strh	r2, [r1, #6]
 800890a:	462e      	mov	r6, r5
 800890c:	f04f 0920 	mov.w	r9, #32
 8008910:	2200      	movs	r2, #0
 8008912:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	49ad      	ldr	r1, [pc, #692]	; (8008bd0 <__svfscanf_r+0xd18>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	5c5b      	ldrb	r3, [r3, r1]
 800891e:	0718      	lsls	r0, r3, #28
 8008920:	d441      	bmi.n	80089a6 <__svfscanf_r+0xaee>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2b00      	cmp	r3, #0
 8008926:	d03e      	beq.n	80089a6 <__svfscanf_r+0xaee>
 8008928:	613a      	str	r2, [r7, #16]
 800892a:	f001 ff2f 	bl	800a78c <__locale_mb_cur_max>
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4290      	cmp	r0, r2
 8008932:	f43f ab92 	beq.w	800805a <__svfscanf_r+0x1a2>
 8008936:	6821      	ldr	r1, [r4, #0]
 8008938:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800893c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008940:	f80c 0002 	strb.w	r0, [ip, r2]
 8008944:	1c53      	adds	r3, r2, #1
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	3a01      	subs	r2, #1
 800894a:	e9c4 1200 	strd	r1, r2, [r4]
 800894e:	6a3a      	ldr	r2, [r7, #32]
 8008950:	2a03      	cmp	r2, #3
 8008952:	d103      	bne.n	800895c <__svfscanf_r+0xaa4>
 8008954:	f8db 2000 	ldr.w	r2, [fp]
 8008958:	2a04      	cmp	r2, #4
 800895a:	d006      	beq.n	800896a <__svfscanf_r+0xab2>
 800895c:	2208      	movs	r2, #8
 800895e:	2100      	movs	r1, #0
 8008960:	4658      	mov	r0, fp
 8008962:	623b      	str	r3, [r7, #32]
 8008964:	f7fd fe44 	bl	80065f0 <memset>
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	f8cd b000 	str.w	fp, [sp]
 800896e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008972:	ee18 0a10 	vmov	r0, s16
 8008976:	4631      	mov	r1, r6
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	f002 f9cd 	bl	800ad18 <_mbrtowc_r>
 800897e:	1c42      	adds	r2, r0, #1
 8008980:	6238      	str	r0, [r7, #32]
 8008982:	f43f ab6a 	beq.w	800805a <__svfscanf_r+0x1a2>
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2800      	cmp	r0, #0
 800898a:	d133      	bne.n	80089f4 <__svfscanf_r+0xb3c>
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	6830      	ldr	r0, [r6, #0]
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	f001 feed 	bl	800a770 <iswspace>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4602      	mov	r2, r0
 800899a:	2800      	cmp	r0, #0
 800899c:	d049      	beq.n	8008a32 <__svfscanf_r+0xb7a>
 800899e:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d13a      	bne.n	8008a1c <__svfscanf_r+0xb64>
 80089a6:	f1b8 0f00 	cmp.w	r8, #0
 80089aa:	d114      	bne.n	80089d6 <__svfscanf_r+0xb1e>
 80089ac:	f8c6 8000 	str.w	r8, [r6]
 80089b0:	f1ba 0f00 	cmp.w	sl, #0
 80089b4:	d00c      	beq.n	80089d0 <__svfscanf_r+0xb18>
 80089b6:	1b71      	subs	r1, r6, r5
 80089b8:	108b      	asrs	r3, r1, #2
 80089ba:	3301      	adds	r3, #1
 80089bc:	4599      	cmp	r9, r3
 80089be:	d907      	bls.n	80089d0 <__svfscanf_r+0xb18>
 80089c0:	f8da 0000 	ldr.w	r0, [sl]
 80089c4:	3104      	adds	r1, #4
 80089c6:	f002 fe77 	bl	800b6b8 <realloc>
 80089ca:	b108      	cbz	r0, 80089d0 <__svfscanf_r+0xb18>
 80089cc:	f8ca 0000 	str.w	r0, [sl]
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	3301      	adds	r3, #1
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80089d8:	f7ff ba95 	b.w	8007f06 <__svfscanf_r+0x4e>
 80089dc:	f04f 0900 	mov.w	r9, #0
 80089e0:	627e      	str	r6, [r7, #36]	; 0x24
 80089e2:	464d      	mov	r5, r9
 80089e4:	46ca      	mov	sl, r9
 80089e6:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 80089ea:	e791      	b.n	8008910 <__svfscanf_r+0xa58>
 80089ec:	46c1      	mov	r9, r8
 80089ee:	4645      	mov	r5, r8
 80089f0:	46c2      	mov	sl, r8
 80089f2:	e78d      	b.n	8008910 <__svfscanf_r+0xa58>
 80089f4:	6a3a      	ldr	r2, [r7, #32]
 80089f6:	3202      	adds	r2, #2
 80089f8:	d1c9      	bne.n	800898e <__svfscanf_r+0xad6>
 80089fa:	461a      	mov	r2, r3
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	dc89      	bgt.n	8008916 <__svfscanf_r+0xa5e>
 8008a02:	ee18 0a10 	vmov	r0, s16
 8008a06:	4621      	mov	r1, r4
 8008a08:	613a      	str	r2, [r7, #16]
 8008a0a:	f003 f80b 	bl	800ba24 <__srefill_r>
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d080      	beq.n	8008916 <__svfscanf_r+0xa5e>
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	f47f ab20 	bne.w	800805a <__svfscanf_r+0x1a2>
 8008a1a:	e7c4      	b.n	80089a6 <__svfscanf_r+0xaee>
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	ee18 0a10 	vmov	r0, s16
 8008a22:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30
 8008a28:	4622      	mov	r2, r4
 8008a2a:	f005 fb0e 	bl	800e04a <_ungetc_r>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	e7b7      	b.n	80089a2 <__svfscanf_r+0xaea>
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	4419      	add	r1, r3
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d103      	bne.n	8008a46 <__svfscanf_r+0xb8e>
 8008a3e:	f8db 3000 	ldr.w	r3, [fp]
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d002      	beq.n	8008a4c <__svfscanf_r+0xb94>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a4c:	f1b8 0f00 	cmp.w	r8, #0
 8008a50:	d1d4      	bne.n	80089fc <__svfscanf_r+0xb44>
 8008a52:	3604      	adds	r6, #4
 8008a54:	f1ba 0f00 	cmp.w	sl, #0
 8008a58:	d015      	beq.n	8008a86 <__svfscanf_r+0xbce>
 8008a5a:	1b73      	subs	r3, r6, r5
 8008a5c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008a60:	d80f      	bhi.n	8008a82 <__svfscanf_r+0xbca>
 8008a62:	4628      	mov	r0, r5
 8008a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a68:	613b      	str	r3, [r7, #16]
 8008a6a:	f002 fe25 	bl	800b6b8 <realloc>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f43f ac04 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f8ca 0000 	str.w	r0, [sl]
 8008a7c:	18c6      	adds	r6, r0, r3
 8008a7e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008a82:	4642      	mov	r2, r8
 8008a84:	e7ba      	b.n	80089fc <__svfscanf_r+0xb44>
 8008a86:	4652      	mov	r2, sl
 8008a88:	e7b8      	b.n	80089fc <__svfscanf_r+0xb44>
 8008a8a:	f1b8 0f00 	cmp.w	r8, #0
 8008a8e:	d01a      	beq.n	8008ac6 <__svfscanf_r+0xc0e>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	494f      	ldr	r1, [pc, #316]	; (8008bd0 <__svfscanf_r+0xd18>)
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	5c52      	ldrb	r2, [r2, r1]
 8008a98:	0711      	lsls	r1, r2, #28
 8008a9a:	f53f ae62 	bmi.w	8008762 <__svfscanf_r+0x8aa>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6862      	ldr	r2, [r4, #4]
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	42ab      	cmp	r3, r5
 8008aac:	6062      	str	r2, [r4, #4]
 8008aae:	f43f ae58 	beq.w	8008762 <__svfscanf_r+0x8aa>
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	dcec      	bgt.n	8008a90 <__svfscanf_r+0xbd8>
 8008ab6:	ee18 0a10 	vmov	r0, s16
 8008aba:	4621      	mov	r1, r4
 8008abc:	f002 ffb2 	bl	800ba24 <__srefill_r>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d0e5      	beq.n	8008a90 <__svfscanf_r+0xbd8>
 8008ac4:	e64d      	b.n	8008762 <__svfscanf_r+0x8aa>
 8008ac6:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008aca:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ace:	d07d      	beq.n	8008bcc <__svfscanf_r+0xd14>
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	f43f aaf6 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008ad6:	2020      	movs	r0, #32
 8008ad8:	f001 fed2 	bl	800a880 <malloc>
 8008adc:	4681      	mov	r9, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f43f abcd 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	6028      	str	r0, [r5, #0]
 8008ae8:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8008aec:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8008af0:	45c2      	cmp	sl, r8
 8008af2:	d315      	bcc.n	8008b20 <__svfscanf_r+0xc68>
 8008af4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008af8:	4598      	cmp	r8, r3
 8008afa:	f63f abc0 	bhi.w	800827e <__svfscanf_r+0x3c6>
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	f108 0808 	add.w	r8, r8, #8
 8008b04:	fa1f f888 	uxth.w	r8, r8
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8008b0e:	f002 fdd3 	bl	800b6b8 <realloc>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f43f abb3 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	6018      	str	r0, [r3, #0]
 8008b1c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f10a 0201 	add.w	r2, sl, #1
 8008b2a:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8008b2e:	80ca      	strh	r2, [r1, #6]
 8008b30:	46aa      	mov	sl, r5
 8008b32:	464d      	mov	r5, r9
 8008b34:	f04f 0920 	mov.w	r9, #32
 8008b38:	46a8      	mov	r8, r5
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	4924      	ldr	r1, [pc, #144]	; (8008bd0 <__svfscanf_r+0xd18>)
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	5c52      	ldrb	r2, [r2, r1]
 8008b42:	0712      	lsls	r2, r2, #28
 8008b44:	d42a      	bmi.n	8008b9c <__svfscanf_r+0xce4>
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	3a01      	subs	r2, #1
 8008b4a:	6062      	str	r2, [r4, #4]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f805 3b01 	strb.w	r3, [r5], #1
 8008b56:	f1ba 0f00 	cmp.w	sl, #0
 8008b5a:	d011      	beq.n	8008b80 <__svfscanf_r+0xcc8>
 8008b5c:	eba5 0b08 	sub.w	fp, r5, r8
 8008b60:	45cb      	cmp	fp, r9
 8008b62:	d30d      	bcc.n	8008b80 <__svfscanf_r+0xcc8>
 8008b64:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f002 fda4 	bl	800b6b8 <realloc>
 8008b70:	4680      	mov	r8, r0
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f43f ab83 	beq.w	800827e <__svfscanf_r+0x3c6>
 8008b78:	eb00 050b 	add.w	r5, r0, fp
 8008b7c:	f8ca 0000 	str.w	r0, [sl]
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	3b01      	subs	r3, #1
 8008b84:	633b      	str	r3, [r7, #48]	; 0x30
 8008b86:	d009      	beq.n	8008b9c <__svfscanf_r+0xce4>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dcd5      	bgt.n	8008b3a <__svfscanf_r+0xc82>
 8008b8e:	ee18 0a10 	vmov	r0, s16
 8008b92:	4621      	mov	r1, r4
 8008b94:	f002 ff46 	bl	800ba24 <__srefill_r>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d0ce      	beq.n	8008b3a <__svfscanf_r+0xc82>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	702b      	strb	r3, [r5, #0]
 8008ba0:	eba5 0508 	sub.w	r5, r5, r8
 8008ba4:	f1ba 0f00 	cmp.w	sl, #0
 8008ba8:	d009      	beq.n	8008bbe <__svfscanf_r+0xd06>
 8008baa:	1c69      	adds	r1, r5, #1
 8008bac:	4589      	cmp	r9, r1
 8008bae:	d906      	bls.n	8008bbe <__svfscanf_r+0xd06>
 8008bb0:	f8da 0000 	ldr.w	r0, [sl]
 8008bb4:	f002 fd80 	bl	800b6b8 <realloc>
 8008bb8:	b108      	cbz	r0, 8008bbe <__svfscanf_r+0xd06>
 8008bba:	f8ca 0000 	str.w	r0, [sl]
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	442b      	add	r3, r5
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f7ff b99c 	b.w	8007f04 <__svfscanf_r+0x4c>
 8008bcc:	46ca      	mov	sl, r9
 8008bce:	e7b3      	b.n	8008b38 <__svfscanf_r+0xc80>
 8008bd0:	08010dc5 	.word	0x08010dc5
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008bdc:	bf81      	itttt	hi
 8008bde:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8008be0:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8008be4:	eb03 0b0c 	addhi.w	fp, r3, ip
 8008be8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008bec:	bf88      	it	hi
 8008bee:	633b      	strhi	r3, [r7, #48]	; 0x30
 8008bf0:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 8008bf4:	f8df 9414 	ldr.w	r9, [pc, #1044]	; 800900c <__svfscanf_r+0x1154>
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfa:	bf98      	it	ls
 8008bfc:	f04f 0b00 	movls.w	fp, #0
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	7813      	ldrb	r3, [r2, #0]
 8008c0c:	2b39      	cmp	r3, #57	; 0x39
 8008c0e:	d80f      	bhi.n	8008c30 <__svfscanf_r+0xd78>
 8008c10:	2b2a      	cmp	r3, #42	; 0x2a
 8008c12:	d91a      	bls.n	8008c4a <__svfscanf_r+0xd92>
 8008c14:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c18:	290e      	cmp	r1, #14
 8008c1a:	d816      	bhi.n	8008c4a <__svfscanf_r+0xd92>
 8008c1c:	e8df f001 	tbb	[pc, r1]
 8008c20:	157f157f 	.word	0x157f157f
 8008c24:	70704215 	.word	0x70704215
 8008c28:	70707070 	.word	0x70707070
 8008c2c:	7870      	.short	0x7870
 8008c2e:	78          	.byte	0x78
 8008c2f:	00          	.byte	0x00
 8008c30:	2b66      	cmp	r3, #102	; 0x66
 8008c32:	d835      	bhi.n	8008ca0 <__svfscanf_r+0xde8>
 8008c34:	2b60      	cmp	r3, #96	; 0x60
 8008c36:	d803      	bhi.n	8008c40 <__svfscanf_r+0xd88>
 8008c38:	2b46      	cmp	r3, #70	; 0x46
 8008c3a:	d804      	bhi.n	8008c46 <__svfscanf_r+0xd8e>
 8008c3c:	2b40      	cmp	r3, #64	; 0x40
 8008c3e:	d904      	bls.n	8008c4a <__svfscanf_r+0xd92>
 8008c40:	69f9      	ldr	r1, [r7, #28]
 8008c42:	290a      	cmp	r1, #10
 8008c44:	e069      	b.n	8008d1a <__svfscanf_r+0xe62>
 8008c46:	2b58      	cmp	r3, #88	; 0x58
 8008c48:	d06f      	beq.n	8008d2a <__svfscanf_r+0xe72>
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	05d8      	lsls	r0, r3, #23
 8008c4e:	d512      	bpl.n	8008c76 <__svfscanf_r+0xdbe>
 8008c50:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008c54:	4598      	cmp	r8, r3
 8008c56:	d909      	bls.n	8008c6c <__svfscanf_r+0xdb4>
 8008c58:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8008c5c:	ee18 0a10 	vmov	r0, s16
 8008c60:	4622      	mov	r2, r4
 8008c62:	f005 f9f2 	bl	800e04a <_ungetc_r>
 8008c66:	f108 39ff 	add.w	r9, r8, #4294967295
 8008c6a:	46c8      	mov	r8, r9
 8008c6c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008c70:	4598      	cmp	r8, r3
 8008c72:	f43f aa26 	beq.w	80080c2 <__svfscanf_r+0x20a>
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	f013 0210 	ands.w	r2, r3, #16
 8008c7c:	d175      	bne.n	8008d6a <__svfscanf_r+0xeb2>
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	69bd      	ldr	r5, [r7, #24]
 8008c82:	f888 2000 	strb.w	r2, [r8]
 8008c86:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008c8a:	ee18 0a10 	vmov	r0, s16
 8008c8e:	47a8      	blx	r5
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	0699      	lsls	r1, r3, #26
 8008c94:	f106 0904 	add.w	r9, r6, #4
 8008c98:	d55e      	bpl.n	8008d58 <__svfscanf_r+0xea0>
 8008c9a:	6833      	ldr	r3, [r6, #0]
 8008c9c:	6018      	str	r0, [r3, #0]
 8008c9e:	e060      	b.n	8008d62 <__svfscanf_r+0xeaa>
 8008ca0:	2b78      	cmp	r3, #120	; 0x78
 8008ca2:	e7d1      	b.n	8008c48 <__svfscanf_r+0xd90>
 8008ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ca6:	050d      	lsls	r5, r1, #20
 8008ca8:	d50d      	bpl.n	8008cc6 <__svfscanf_r+0xe0e>
 8008caa:	69f9      	ldr	r1, [r7, #28]
 8008cac:	b929      	cbnz	r1, 8008cba <__svfscanf_r+0xe02>
 8008cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008cb4:	6279      	str	r1, [r7, #36]	; 0x24
 8008cb6:	2108      	movs	r1, #8
 8008cb8:	61f9      	str	r1, [r7, #28]
 8008cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cbc:	0548      	lsls	r0, r1, #21
 8008cbe:	d505      	bpl.n	8008ccc <__svfscanf_r+0xe14>
 8008cc0:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 8008cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8008cc6:	f808 3b01 	strb.w	r3, [r8], #1
 8008cca:	e00d      	b.n	8008ce8 <__svfscanf_r+0xe30>
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	d004      	beq.n	8008ce4 <__svfscanf_r+0xe2c>
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	3301      	adds	r3, #1
 8008cde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ce4:	f10a 0a01 	add.w	sl, sl, #1
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	dd2a      	ble.n	8008d48 <__svfscanf_r+0xe90>
 8008cf2:	3201      	adds	r2, #1
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8008cfc:	d184      	bne.n	8008c08 <__svfscanf_r+0xd50>
 8008cfe:	e7a4      	b.n	8008c4a <__svfscanf_r+0xd92>
 8008d00:	69f9      	ldr	r1, [r7, #28]
 8008d02:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8008d06:	61f9      	str	r1, [r7, #28]
 8008d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d0a:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 8008d0e:	e7d9      	b.n	8008cc4 <__svfscanf_r+0xe0c>
 8008d10:	69f9      	ldr	r1, [r7, #28]
 8008d12:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8008d16:	61f9      	str	r1, [r7, #28]
 8008d18:	2908      	cmp	r1, #8
 8008d1a:	dcf5      	bgt.n	8008d08 <__svfscanf_r+0xe50>
 8008d1c:	e795      	b.n	8008c4a <__svfscanf_r+0xd92>
 8008d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d20:	060d      	lsls	r5, r1, #24
 8008d22:	d592      	bpl.n	8008c4a <__svfscanf_r+0xd92>
 8008d24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d28:	e7cc      	b.n	8008cc4 <__svfscanf_r+0xe0c>
 8008d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d2c:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8008d30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d34:	d189      	bne.n	8008c4a <__svfscanf_r+0xd92>
 8008d36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d38:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 8008d3c:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 8008d40:	6279      	str	r1, [r7, #36]	; 0x24
 8008d42:	2110      	movs	r1, #16
 8008d44:	61f9      	str	r1, [r7, #28]
 8008d46:	e7be      	b.n	8008cc6 <__svfscanf_r+0xe0e>
 8008d48:	ee18 0a10 	vmov	r0, s16
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f002 fe69 	bl	800ba24 <__srefill_r>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0cf      	beq.n	8008cf6 <__svfscanf_r+0xe3e>
 8008d56:	e778      	b.n	8008c4a <__svfscanf_r+0xd92>
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	071a      	lsls	r2, r3, #28
 8008d5c:	d50e      	bpl.n	8008d7c <__svfscanf_r+0xec4>
 8008d5e:	6833      	ldr	r3, [r6, #0]
 8008d60:	7018      	strb	r0, [r3, #0]
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	3301      	adds	r3, #1
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d68:	464e      	mov	r6, r9
 8008d6a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008d6e:	eba8 0803 	sub.w	r8, r8, r3
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	44c2      	add	sl, r8
 8008d76:	4453      	add	r3, sl
 8008d78:	f7ff b966 	b.w	8008048 <__svfscanf_r+0x190>
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	075b      	lsls	r3, r3, #29
 8008d80:	d502      	bpl.n	8008d88 <__svfscanf_r+0xed0>
 8008d82:	6833      	ldr	r3, [r6, #0]
 8008d84:	8018      	strh	r0, [r3, #0]
 8008d86:	e7ec      	b.n	8008d62 <__svfscanf_r+0xeaa>
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	f013 0201 	ands.w	r2, r3, #1
 8008d8e:	d184      	bne.n	8008c9a <__svfscanf_r+0xde2>
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	079d      	lsls	r5, r3, #30
 8008d94:	d581      	bpl.n	8008c9a <__svfscanf_r+0xde2>
 8008d96:	4b9c      	ldr	r3, [pc, #624]	; (8009008 <__svfscanf_r+0x1150>)
 8008d98:	69b9      	ldr	r1, [r7, #24]
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	ee18 0a10 	vmov	r0, s16
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008da6:	d105      	bne.n	8008db4 <__svfscanf_r+0xefc>
 8008da8:	f003 ff36 	bl	800cc18 <_strtoull_r>
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	e9c3 0100 	strd	r0, r1, [r3]
 8008db2:	e7d6      	b.n	8008d62 <__svfscanf_r+0xeaa>
 8008db4:	f003 fe22 	bl	800c9fc <_strtoll_r>
 8008db8:	e7f8      	b.n	8008dac <__svfscanf_r+0xef4>
 8008dba:	ee18 0a10 	vmov	r0, s16
 8008dbe:	f001 fceb 	bl	800a798 <_localeconv_r>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	6802      	ldr	r2, [r0, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008dcc:	f04f 0b00 	mov.w	fp, #0
 8008dd0:	bf88      	it	hi
 8008dd2:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8008dd4:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008dd8:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 8008ddc:	bf84      	itt	hi
 8008dde:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8008de2:	f240 115d 	movwhi	r1, #349	; 0x15d
 8008de6:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 8008dea:	bf86      	itte	hi
 8008dec:	181b      	addhi	r3, r3, r0
 8008dee:	6339      	strhi	r1, [r7, #48]	; 0x30
 8008df0:	2300      	movls	r3, #0
 8008df2:	46da      	mov	sl, fp
 8008df4:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 8008df8:	f8d4 e000 	ldr.w	lr, [r4]
 8008dfc:	f89e 0000 	ldrb.w	r0, [lr]
 8008e00:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 8008e04:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 8008e08:	f200 811e 	bhi.w	8009048 <__svfscanf_r+0x1190>
 8008e0c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8008e10:	011c0087 	.word	0x011c0087
 8008e14:	011c0087 	.word	0x011c0087
 8008e18:	004f011c 	.word	0x004f011c
 8008e1c:	006f006f 	.word	0x006f006f
 8008e20:	006f006f 	.word	0x006f006f
 8008e24:	006f006f 	.word	0x006f006f
 8008e28:	006f006f 	.word	0x006f006f
 8008e2c:	011c006f 	.word	0x011c006f
 8008e30:	011c011c 	.word	0x011c011c
 8008e34:	011c011c 	.word	0x011c011c
 8008e38:	011c011c 	.word	0x011c011c
 8008e3c:	006d00ad 	.word	0x006d00ad
 8008e40:	006d006d 	.word	0x006d006d
 8008e44:	00e50119 	.word	0x00e50119
 8008e48:	011c011c 	.word	0x011c011c
 8008e4c:	011c00cf 	.word	0x011c00cf
 8008e50:	011c011c 	.word	0x011c011c
 8008e54:	008e011c 	.word	0x008e011c
 8008e58:	0100011c 	.word	0x0100011c
 8008e5c:	011c011c 	.word	0x011c011c
 8008e60:	00f0011c 	.word	0x00f0011c
 8008e64:	011c011c 	.word	0x011c011c
 8008e68:	0073011c 	.word	0x0073011c
 8008e6c:	011c00f6 	.word	0x011c00f6
 8008e70:	011c011c 	.word	0x011c011c
 8008e74:	011c011c 	.word	0x011c011c
 8008e78:	011c011c 	.word	0x011c011c
 8008e7c:	006d00ad 	.word	0x006d00ad
 8008e80:	006d006d 	.word	0x006d006d
 8008e84:	00e50119 	.word	0x00e50119
 8008e88:	011c011c 	.word	0x011c011c
 8008e8c:	011c00cf 	.word	0x011c00cf
 8008e90:	011c011c 	.word	0x011c011c
 8008e94:	008e011c 	.word	0x008e011c
 8008e98:	0100011c 	.word	0x0100011c
 8008e9c:	011c011c 	.word	0x011c011c
 8008ea0:	00f0011c 	.word	0x00f0011c
 8008ea4:	011c011c 	.word	0x011c011c
 8008ea8:	0073011c 	.word	0x0073011c
 8008eac:	00f6      	.short	0x00f6
 8008eae:	05e9      	lsls	r1, r5, #23
 8008eb0:	d51d      	bpl.n	8008eee <__svfscanf_r+0x1036>
 8008eb2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008eb6:	f10a 0a01 	add.w	sl, sl, #1
 8008eba:	b11b      	cbz	r3, 8008ec4 <__svfscanf_r+0x100c>
 8008ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	6338      	str	r0, [r7, #48]	; 0x30
 8008ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ec6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ec8:	3001      	adds	r0, #1
 8008eca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ecc:	6860      	ldr	r0, [r4, #4]
 8008ece:	3801      	subs	r0, #1
 8008ed0:	3901      	subs	r1, #1
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ed6:	6060      	str	r0, [r4, #4]
 8008ed8:	f340 80c7 	ble.w	800906a <__svfscanf_r+0x11b2>
 8008edc:	f10e 0101 	add.w	r1, lr, #1
 8008ee0:	6021      	str	r1, [r4, #0]
 8008ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d187      	bne.n	8008df8 <__svfscanf_r+0xf40>
 8008ee8:	e04a      	b.n	8008f80 <__svfscanf_r+0x10c8>
 8008eea:	0529      	lsls	r1, r5, #20
 8008eec:	d548      	bpl.n	8008f80 <__svfscanf_r+0x10c8>
 8008eee:	eb1b 0f08 	cmn.w	fp, r8
 8008ef2:	d03f      	beq.n	8008f74 <__svfscanf_r+0x10bc>
 8008ef4:	e044      	b.n	8008f80 <__svfscanf_r+0x10c8>
 8008ef6:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 8008efa:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8008efe:	d13f      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8008f00:	f1ba 0f01 	cmp.w	sl, #1
 8008f04:	d13c      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8008f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f08:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008f0c:	3901      	subs	r1, #1
 8008f0e:	f809 cb01 	strb.w	ip, [r9], #1
 8008f12:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8008f16:	6339      	str	r1, [r7, #48]	; 0x30
 8008f18:	f04f 0a00 	mov.w	sl, #0
 8008f1c:	e003      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008f1e:	0629      	lsls	r1, r5, #24
 8008f20:	d52e      	bpl.n	8008f80 <__svfscanf_r+0x10c8>
 8008f22:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008f26:	f809 0b01 	strb.w	r0, [r9], #1
 8008f2a:	e7cb      	b.n	8008ec4 <__svfscanf_r+0x100c>
 8008f2c:	f1bb 0f00 	cmp.w	fp, #0
 8008f30:	d10c      	bne.n	8008f4c <__svfscanf_r+0x1094>
 8008f32:	f1ba 0f00 	cmp.w	sl, #0
 8008f36:	d10d      	bne.n	8008f54 <__svfscanf_r+0x109c>
 8008f38:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8008f3c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8008f40:	d108      	bne.n	8008f54 <__svfscanf_r+0x109c>
 8008f42:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8008f46:	f04f 0b01 	mov.w	fp, #1
 8008f4a:	e7ec      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008f4c:	f1bb 0f02 	cmp.w	fp, #2
 8008f50:	f000 8085 	beq.w	800905e <__svfscanf_r+0x11a6>
 8008f54:	f1b8 0f01 	cmp.w	r8, #1
 8008f58:	d002      	beq.n	8008f60 <__svfscanf_r+0x10a8>
 8008f5a:	f1b8 0f04 	cmp.w	r8, #4
 8008f5e:	d10f      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8008f60:	f108 0801 	add.w	r8, r8, #1
 8008f64:	fa5f f888 	uxtb.w	r8, r8
 8008f68:	e7dd      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008f6a:	0529      	lsls	r1, r5, #20
 8008f6c:	d505      	bpl.n	8008f7a <__svfscanf_r+0x10c2>
 8008f6e:	eb1b 0f08 	cmn.w	fp, r8
 8008f72:	d102      	bne.n	8008f7a <__svfscanf_r+0x10c2>
 8008f74:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8008f78:	e7d5      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008f7a:	f1bb 0f01 	cmp.w	fp, #1
 8008f7e:	d071      	beq.n	8009064 <__svfscanf_r+0x11ac>
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d001      	beq.n	8008f8a <__svfscanf_r+0x10d2>
 8008f86:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8008f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f8e:	f1bb 0f01 	cmp.w	fp, #1
 8008f92:	d877      	bhi.n	8009084 <__svfscanf_r+0x11cc>
 8008f94:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8008f98:	45a9      	cmp	r9, r5
 8008f9a:	f67f a892 	bls.w	80080c2 <__svfscanf_r+0x20a>
 8008f9e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008fa2:	ee18 0a10 	vmov	r0, s16
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	f005 f84f 	bl	800e04a <_ungetc_r>
 8008fac:	e7f4      	b.n	8008f98 <__svfscanf_r+0x10e0>
 8008fae:	f1b8 0f00 	cmp.w	r8, #0
 8008fb2:	d10c      	bne.n	8008fce <__svfscanf_r+0x1116>
 8008fb4:	f1ba 0f00 	cmp.w	sl, #0
 8008fb8:	d1e5      	bne.n	8008f86 <__svfscanf_r+0x10ce>
 8008fba:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8008fbe:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8008fc2:	d1e2      	bne.n	8008f8a <__svfscanf_r+0x10d2>
 8008fc4:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8008fc8:	f04f 0801 	mov.w	r8, #1
 8008fcc:	e7ab      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008fce:	f1b8 0f03 	cmp.w	r8, #3
 8008fd2:	d0c5      	beq.n	8008f60 <__svfscanf_r+0x10a8>
 8008fd4:	f1b8 0f05 	cmp.w	r8, #5
 8008fd8:	e7c1      	b.n	8008f5e <__svfscanf_r+0x10a6>
 8008fda:	0529      	lsls	r1, r5, #20
 8008fdc:	d502      	bpl.n	8008fe4 <__svfscanf_r+0x112c>
 8008fde:	eb1b 0f08 	cmn.w	fp, r8
 8008fe2:	d0c7      	beq.n	8008f74 <__svfscanf_r+0x10bc>
 8008fe4:	f1b8 0f02 	cmp.w	r8, #2
 8008fe8:	d1ca      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8008fea:	f04f 0803 	mov.w	r8, #3
 8008fee:	e79a      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008ff0:	f1b8 0f06 	cmp.w	r8, #6
 8008ff4:	d1c4      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8008ff6:	f04f 0807 	mov.w	r8, #7
 8008ffa:	e794      	b.n	8008f26 <__svfscanf_r+0x106e>
 8008ffc:	f1b8 0f07 	cmp.w	r8, #7
 8009000:	d1be      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8009002:	f04f 0808 	mov.w	r8, #8
 8009006:	e78e      	b.n	8008f26 <__svfscanf_r+0x106e>
 8009008:	0800cae5 	.word	0x0800cae5
 800900c:	08010da2 	.word	0x08010da2
 8009010:	0529      	lsls	r1, r5, #20
 8009012:	d5b5      	bpl.n	8008f80 <__svfscanf_r+0x10c8>
 8009014:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 8009018:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800901c:	d004      	beq.n	8009028 <__svfscanf_r+0x1170>
 800901e:	0569      	lsls	r1, r5, #21
 8009020:	d5ae      	bpl.n	8008f80 <__svfscanf_r+0x10c8>
 8009022:	f1ba 0f00 	cmp.w	sl, #0
 8009026:	d0b0      	beq.n	8008f8a <__svfscanf_r+0x10d2>
 8009028:	05a9      	lsls	r1, r5, #22
 800902a:	bf58      	it	pl
 800902c:	6a79      	ldrpl	r1, [r7, #36]	; 0x24
 800902e:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 8009032:	bf5c      	itt	pl
 8009034:	ebaa 0101 	subpl.w	r1, sl, r1
 8009038:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 800903c:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8009040:	e76a      	b.n	8008f18 <__svfscanf_r+0x1060>
 8009042:	0529      	lsls	r1, r5, #20
 8009044:	d5e6      	bpl.n	8009014 <__svfscanf_r+0x115c>
 8009046:	e752      	b.n	8008eee <__svfscanf_r+0x1036>
 8009048:	f892 c000 	ldrb.w	ip, [r2]
 800904c:	4584      	cmp	ip, r0
 800904e:	d197      	bne.n	8008f80 <__svfscanf_r+0x10c8>
 8009050:	05a9      	lsls	r1, r5, #22
 8009052:	d595      	bpl.n	8008f80 <__svfscanf_r+0x10c8>
 8009054:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8009058:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800905c:	e763      	b.n	8008f26 <__svfscanf_r+0x106e>
 800905e:	f04f 0b03 	mov.w	fp, #3
 8009062:	e760      	b.n	8008f26 <__svfscanf_r+0x106e>
 8009064:	f04f 0b02 	mov.w	fp, #2
 8009068:	e75d      	b.n	8008f26 <__svfscanf_r+0x106e>
 800906a:	ee18 0a10 	vmov	r0, s16
 800906e:	4621      	mov	r1, r4
 8009070:	e9c7 2301 	strd	r2, r3, [r7, #4]
 8009074:	f002 fcd6 	bl	800ba24 <__srefill_r>
 8009078:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f af30 	beq.w	8008ee2 <__svfscanf_r+0x102a>
 8009082:	e77d      	b.n	8008f80 <__svfscanf_r+0x10c8>
 8009084:	f108 33ff 	add.w	r3, r8, #4294967295
 8009088:	2b06      	cmp	r3, #6
 800908a:	d829      	bhi.n	80090e0 <__svfscanf_r+0x1228>
 800908c:	f1b8 0f02 	cmp.w	r8, #2
 8009090:	d837      	bhi.n	8009102 <__svfscanf_r+0x124a>
 8009092:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8009096:	45a9      	cmp	r9, r5
 8009098:	f67f a813 	bls.w	80080c2 <__svfscanf_r+0x20a>
 800909c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80090a0:	ee18 0a10 	vmov	r0, s16
 80090a4:	4622      	mov	r2, r4
 80090a6:	f004 ffd0 	bl	800e04a <_ungetc_r>
 80090aa:	e7f4      	b.n	8009096 <__svfscanf_r+0x11de>
 80090ac:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	4622      	mov	r2, r4
 80090b8:	f004 ffc7 	bl	800e04a <_ungetc_r>
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090c2:	fa5f fb8b 	uxtb.w	fp, fp
 80090c6:	f1bb 0f02 	cmp.w	fp, #2
 80090ca:	d1ef      	bne.n	80090ac <__svfscanf_r+0x11f4>
 80090cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ce:	f1a8 0803 	sub.w	r8, r8, #3
 80090d2:	fa5f f888 	uxtb.w	r8, r8
 80090d6:	eba3 0308 	sub.w	r3, r3, r8
 80090da:	eba9 0908 	sub.w	r9, r9, r8
 80090de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e0:	05ea      	lsls	r2, r5, #23
 80090e2:	d530      	bpl.n	8009146 <__svfscanf_r+0x128e>
 80090e4:	056b      	lsls	r3, r5, #21
 80090e6:	d50f      	bpl.n	8009108 <__svfscanf_r+0x1250>
 80090e8:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 80090ec:	45a9      	cmp	r9, r5
 80090ee:	f67e afe8 	bls.w	80080c2 <__svfscanf_r+0x20a>
 80090f2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80090f6:	ee18 0a10 	vmov	r0, s16
 80090fa:	4622      	mov	r2, r4
 80090fc:	f004 ffa5 	bl	800e04a <_ungetc_r>
 8009100:	e7f4      	b.n	80090ec <__svfscanf_r+0x1234>
 8009102:	46c3      	mov	fp, r8
 8009104:	464b      	mov	r3, r9
 8009106:	e7da      	b.n	80090be <__svfscanf_r+0x1206>
 8009108:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2965      	cmp	r1, #101	; 0x65
 8009110:	f109 38ff 	add.w	r8, r9, #4294967295
 8009114:	f103 3bff 	add.w	fp, r3, #4294967295
 8009118:	d00d      	beq.n	8009136 <__svfscanf_r+0x127e>
 800911a:	2945      	cmp	r1, #69	; 0x45
 800911c:	d00b      	beq.n	8009136 <__svfscanf_r+0x127e>
 800911e:	ee18 0a10 	vmov	r0, s16
 8009122:	4622      	mov	r2, r4
 8009124:	f004 ff91 	bl	800e04a <_ungetc_r>
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800912e:	f1a9 0802 	sub.w	r8, r9, #2
 8009132:	f1a3 0b02 	sub.w	fp, r3, #2
 8009136:	ee18 0a10 	vmov	r0, s16
 800913a:	4622      	mov	r2, r4
 800913c:	f004 ff85 	bl	800e04a <_ungetc_r>
 8009140:	46c1      	mov	r9, r8
 8009142:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8009146:	f015 0210 	ands.w	r2, r5, #16
 800914a:	f47e aedc 	bne.w	8007f06 <__svfscanf_r+0x4e>
 800914e:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 8009152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009156:	f889 2000 	strb.w	r2, [r9]
 800915a:	d114      	bne.n	8009186 <__svfscanf_r+0x12ce>
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	4553      	cmp	r3, sl
 8009160:	eba3 020a 	sub.w	r2, r3, sl
 8009164:	d11d      	bne.n	80091a2 <__svfscanf_r+0x12ea>
 8009166:	ee18 0a10 	vmov	r0, s16
 800916a:	2200      	movs	r2, #0
 800916c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009170:	f003 fba8 	bl	800c8c4 <_strtod_r>
 8009174:	07e8      	lsls	r0, r5, #31
 8009176:	f106 0804 	add.w	r8, r6, #4
 800917a:	d51d      	bpl.n	80091b8 <__svfscanf_r+0x1300>
 800917c:	6833      	ldr	r3, [r6, #0]
 800917e:	ed83 0b00 	vstr	d0, [r3]
 8009182:	f7ff b9b8 	b.w	80084f6 <__svfscanf_r+0x63e>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0ec      	beq.n	8009166 <__svfscanf_r+0x12ae>
 800918c:	68f9      	ldr	r1, [r7, #12]
 800918e:	230a      	movs	r3, #10
 8009190:	ee18 0a10 	vmov	r0, s16
 8009194:	3101      	adds	r1, #1
 8009196:	f7fd fbdd 	bl	8006954 <_strtol_r>
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f8d7 900c 	ldr.w	r9, [r7, #12]
 80091a0:	1ac2      	subs	r2, r0, r3
 80091a2:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 80091a6:	4599      	cmp	r9, r3
 80091a8:	bf28      	it	cs
 80091aa:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 80091ae:	4919      	ldr	r1, [pc, #100]	; (8009214 <__svfscanf_r+0x135c>)
 80091b0:	4648      	mov	r0, r9
 80091b2:	f002 fd3f 	bl	800bc34 <sprintf>
 80091b6:	e7d6      	b.n	8009166 <__svfscanf_r+0x12ae>
 80091b8:	07a9      	lsls	r1, r5, #30
 80091ba:	6836      	ldr	r6, [r6, #0]
 80091bc:	d503      	bpl.n	80091c6 <__svfscanf_r+0x130e>
 80091be:	ed86 0b00 	vstr	d0, [r6]
 80091c2:	f7ff b998 	b.w	80084f6 <__svfscanf_r+0x63e>
 80091c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80091ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ce:	d706      	bvc.n	80091de <__svfscanf_r+0x1326>
 80091d0:	4811      	ldr	r0, [pc, #68]	; (8009218 <__svfscanf_r+0x1360>)
 80091d2:	f002 fd29 	bl	800bc28 <nanf>
 80091d6:	ed86 0a00 	vstr	s0, [r6]
 80091da:	f7ff b98c 	b.w	80084f6 <__svfscanf_r+0x63e>
 80091de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80091e2:	e7f8      	b.n	80091d6 <__svfscanf_r+0x131e>
 80091e4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f001 fb51 	bl	800a890 <free>
 80091ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80091f2:	3401      	adds	r4, #1
 80091f4:	601e      	str	r6, [r3, #0]
 80091f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f8:	681d      	ldr	r5, [r3, #0]
 80091fa:	88db      	ldrh	r3, [r3, #6]
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	dcf1      	bgt.n	80091e4 <__svfscanf_r+0x132c>
 8009200:	f7fe bf6e 	b.w	80080e0 <__svfscanf_r+0x228>
 8009204:	2400      	movs	r4, #0
 8009206:	4626      	mov	r6, r4
 8009208:	e7f5      	b.n	80091f6 <__svfscanf_r+0x133e>
 800920a:	f001 fb41 	bl	800a890 <free>
 800920e:	f7fe bf6c 	b.w	80080ea <__svfscanf_r+0x232>
 8009212:	bf00      	nop
 8009214:	08010d9d 	.word	0x08010d9d
 8009218:	08011173 	.word	0x08011173

0800921c <_vfscanf_r>:
 800921c:	b530      	push	{r4, r5, lr}
 800921e:	4604      	mov	r4, r0
 8009220:	b085      	sub	sp, #20
 8009222:	b148      	cbz	r0, 8009238 <_vfscanf_r+0x1c>
 8009224:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009226:	b93d      	cbnz	r5, 8009238 <_vfscanf_r+0x1c>
 8009228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800922c:	9101      	str	r1, [sp, #4]
 800922e:	f000 ff61 	bl	800a0f4 <__sinit>
 8009232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	4620      	mov	r0, r4
 800923a:	b005      	add	sp, #20
 800923c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009240:	f7fe be3a 	b.w	8007eb8 <__svfscanf_r>

08009244 <__swsetup_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4b2a      	ldr	r3, [pc, #168]	; (80092f0 <__swsetup_r+0xac>)
 8009248:	4605      	mov	r5, r0
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	460c      	mov	r4, r1
 800924e:	b118      	cbz	r0, 8009258 <__swsetup_r+0x14>
 8009250:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009252:	b90b      	cbnz	r3, 8009258 <__swsetup_r+0x14>
 8009254:	f000 ff4e 	bl	800a0f4 <__sinit>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800925e:	0718      	lsls	r0, r3, #28
 8009260:	d422      	bmi.n	80092a8 <__swsetup_r+0x64>
 8009262:	06d9      	lsls	r1, r3, #27
 8009264:	d407      	bmi.n	8009276 <__swsetup_r+0x32>
 8009266:	2309      	movs	r3, #9
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	e034      	b.n	80092e0 <__swsetup_r+0x9c>
 8009276:	0758      	lsls	r0, r3, #29
 8009278:	d512      	bpl.n	80092a0 <__swsetup_r+0x5c>
 800927a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800927c:	b141      	cbz	r1, 8009290 <__swsetup_r+0x4c>
 800927e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009282:	4299      	cmp	r1, r3
 8009284:	d002      	beq.n	800928c <__swsetup_r+0x48>
 8009286:	4628      	mov	r0, r5
 8009288:	f001 f82c 	bl	800a2e4 <_free_r>
 800928c:	2300      	movs	r3, #0
 800928e:	6323      	str	r3, [r4, #48]	; 0x30
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	2300      	movs	r3, #0
 800929a:	6063      	str	r3, [r4, #4]
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f043 0308 	orr.w	r3, r3, #8
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	b94b      	cbnz	r3, 80092c0 <__swsetup_r+0x7c>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b6:	d003      	beq.n	80092c0 <__swsetup_r+0x7c>
 80092b8:	4621      	mov	r1, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	f001 faa0 	bl	800a800 <__smakebuf_r>
 80092c0:	89a0      	ldrh	r0, [r4, #12]
 80092c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c6:	f010 0301 	ands.w	r3, r0, #1
 80092ca:	d00a      	beq.n	80092e2 <__swsetup_r+0x9e>
 80092cc:	2300      	movs	r3, #0
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	6963      	ldr	r3, [r4, #20]
 80092d2:	425b      	negs	r3, r3
 80092d4:	61a3      	str	r3, [r4, #24]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	b943      	cbnz	r3, 80092ec <__swsetup_r+0xa8>
 80092da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092de:	d1c4      	bne.n	800926a <__swsetup_r+0x26>
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	0781      	lsls	r1, r0, #30
 80092e4:	bf58      	it	pl
 80092e6:	6963      	ldrpl	r3, [r4, #20]
 80092e8:	60a3      	str	r3, [r4, #8]
 80092ea:	e7f4      	b.n	80092d6 <__swsetup_r+0x92>
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7f7      	b.n	80092e0 <__swsetup_r+0x9c>
 80092f0:	2000000c 	.word	0x2000000c

080092f4 <register_fini>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <register_fini+0xc>)
 80092f6:	b113      	cbz	r3, 80092fe <register_fini+0xa>
 80092f8:	4802      	ldr	r0, [pc, #8]	; (8009304 <register_fini+0x10>)
 80092fa:	f000 b805 	b.w	8009308 <atexit>
 80092fe:	4770      	bx	lr
 8009300:	00000000 	.word	0x00000000
 8009304:	0800a145 	.word	0x0800a145

08009308 <atexit>:
 8009308:	2300      	movs	r3, #0
 800930a:	4601      	mov	r1, r0
 800930c:	461a      	mov	r2, r3
 800930e:	4618      	mov	r0, r3
 8009310:	f005 bc52 	b.w	800ebb8 <__register_exitproc>

08009314 <quorem>:
 8009314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	6903      	ldr	r3, [r0, #16]
 800931a:	690c      	ldr	r4, [r1, #16]
 800931c:	42a3      	cmp	r3, r4
 800931e:	4607      	mov	r7, r0
 8009320:	f2c0 8081 	blt.w	8009426 <quorem+0x112>
 8009324:	3c01      	subs	r4, #1
 8009326:	f101 0814 	add.w	r8, r1, #20
 800932a:	f100 0514 	add.w	r5, r0, #20
 800932e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800933c:	3301      	adds	r3, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009348:	fbb2 f6f3 	udiv	r6, r2, r3
 800934c:	d331      	bcc.n	80093b2 <quorem+0x9e>
 800934e:	f04f 0e00 	mov.w	lr, #0
 8009352:	4640      	mov	r0, r8
 8009354:	46ac      	mov	ip, r5
 8009356:	46f2      	mov	sl, lr
 8009358:	f850 2b04 	ldr.w	r2, [r0], #4
 800935c:	b293      	uxth	r3, r2
 800935e:	fb06 e303 	mla	r3, r6, r3, lr
 8009362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009366:	b29b      	uxth	r3, r3
 8009368:	ebaa 0303 	sub.w	r3, sl, r3
 800936c:	f8dc a000 	ldr.w	sl, [ip]
 8009370:	0c12      	lsrs	r2, r2, #16
 8009372:	fa13 f38a 	uxtah	r3, r3, sl
 8009376:	fb06 e202 	mla	r2, r6, r2, lr
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009382:	b292      	uxth	r2, r2
 8009384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800938c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009390:	4581      	cmp	r9, r0
 8009392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009396:	f84c 3b04 	str.w	r3, [ip], #4
 800939a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800939e:	d2db      	bcs.n	8009358 <quorem+0x44>
 80093a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80093a4:	b92b      	cbnz	r3, 80093b2 <quorem+0x9e>
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	3b04      	subs	r3, #4
 80093aa:	429d      	cmp	r5, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	d32e      	bcc.n	800940e <quorem+0xfa>
 80093b0:	613c      	str	r4, [r7, #16]
 80093b2:	4638      	mov	r0, r7
 80093b4:	f001 ff8e 	bl	800b2d4 <__mcmp>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	db24      	blt.n	8009406 <quorem+0xf2>
 80093bc:	3601      	adds	r6, #1
 80093be:	4628      	mov	r0, r5
 80093c0:	f04f 0c00 	mov.w	ip, #0
 80093c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80093c8:	f8d0 e000 	ldr.w	lr, [r0]
 80093cc:	b293      	uxth	r3, r2
 80093ce:	ebac 0303 	sub.w	r3, ip, r3
 80093d2:	0c12      	lsrs	r2, r2, #16
 80093d4:	fa13 f38e 	uxtah	r3, r3, lr
 80093d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e6:	45c1      	cmp	r9, r8
 80093e8:	f840 3b04 	str.w	r3, [r0], #4
 80093ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093f0:	d2e8      	bcs.n	80093c4 <quorem+0xb0>
 80093f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093fa:	b922      	cbnz	r2, 8009406 <quorem+0xf2>
 80093fc:	3b04      	subs	r3, #4
 80093fe:	429d      	cmp	r5, r3
 8009400:	461a      	mov	r2, r3
 8009402:	d30a      	bcc.n	800941a <quorem+0x106>
 8009404:	613c      	str	r4, [r7, #16]
 8009406:	4630      	mov	r0, r6
 8009408:	b003      	add	sp, #12
 800940a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	3b04      	subs	r3, #4
 8009412:	2a00      	cmp	r2, #0
 8009414:	d1cc      	bne.n	80093b0 <quorem+0x9c>
 8009416:	3c01      	subs	r4, #1
 8009418:	e7c7      	b.n	80093aa <quorem+0x96>
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	3b04      	subs	r3, #4
 800941e:	2a00      	cmp	r2, #0
 8009420:	d1f0      	bne.n	8009404 <quorem+0xf0>
 8009422:	3c01      	subs	r4, #1
 8009424:	e7eb      	b.n	80093fe <quorem+0xea>
 8009426:	2000      	movs	r0, #0
 8009428:	e7ee      	b.n	8009408 <quorem+0xf4>
 800942a:	0000      	movs	r0, r0
 800942c:	0000      	movs	r0, r0
	...

08009430 <_dtoa_r>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ed2d 8b02 	vpush	{d8}
 8009438:	b091      	sub	sp, #68	; 0x44
 800943a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800943e:	9106      	str	r1, [sp, #24]
 8009440:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009442:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009444:	9208      	str	r2, [sp, #32]
 8009446:	ec59 8b10 	vmov	r8, r9, d0
 800944a:	4606      	mov	r6, r0
 800944c:	930c      	str	r3, [sp, #48]	; 0x30
 800944e:	b141      	cbz	r1, 8009462 <_dtoa_r+0x32>
 8009450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009452:	604a      	str	r2, [r1, #4]
 8009454:	2301      	movs	r3, #1
 8009456:	4093      	lsls	r3, r2
 8009458:	608b      	str	r3, [r1, #8]
 800945a:	f001 fce2 	bl	800ae22 <_Bfree>
 800945e:	2300      	movs	r3, #0
 8009460:	6433      	str	r3, [r6, #64]	; 0x40
 8009462:	f1b9 0300 	subs.w	r3, r9, #0
 8009466:	bfbb      	ittet	lt
 8009468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800946c:	9303      	strlt	r3, [sp, #12]
 800946e:	2300      	movge	r3, #0
 8009470:	2201      	movlt	r2, #1
 8009472:	bfac      	ite	ge
 8009474:	6023      	strge	r3, [r4, #0]
 8009476:	6022      	strlt	r2, [r4, #0]
 8009478:	4b99      	ldr	r3, [pc, #612]	; (80096e0 <_dtoa_r+0x2b0>)
 800947a:	9c03      	ldr	r4, [sp, #12]
 800947c:	43a3      	bics	r3, r4
 800947e:	d11c      	bne.n	80094ba <_dtoa_r+0x8a>
 8009480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009482:	f242 730f 	movw	r3, #9999	; 0x270f
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800948c:	ea53 0308 	orrs.w	r3, r3, r8
 8009490:	f000 84f8 	beq.w	8009e84 <_dtoa_r+0xa54>
 8009494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009496:	b90b      	cbnz	r3, 800949c <_dtoa_r+0x6c>
 8009498:	4b92      	ldr	r3, [pc, #584]	; (80096e4 <_dtoa_r+0x2b4>)
 800949a:	e01f      	b.n	80094dc <_dtoa_r+0xac>
 800949c:	4b91      	ldr	r3, [pc, #580]	; (80096e4 <_dtoa_r+0x2b4>)
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	3303      	adds	r3, #3
 80094a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	9801      	ldr	r0, [sp, #4]
 80094a8:	b011      	add	sp, #68	; 0x44
 80094aa:	ecbd 8b02 	vpop	{d8}
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	4b8d      	ldr	r3, [pc, #564]	; (80096e8 <_dtoa_r+0x2b8>)
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	3308      	adds	r3, #8
 80094b8:	e7f3      	b.n	80094a2 <_dtoa_r+0x72>
 80094ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80094be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c6:	d10b      	bne.n	80094e0 <_dtoa_r+0xb0>
 80094c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ca:	2301      	movs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 84d4 	beq.w	8009e7e <_dtoa_r+0xa4e>
 80094d6:	4885      	ldr	r0, [pc, #532]	; (80096ec <_dtoa_r+0x2bc>)
 80094d8:	6018      	str	r0, [r3, #0]
 80094da:	1e43      	subs	r3, r0, #1
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	e7e2      	b.n	80094a6 <_dtoa_r+0x76>
 80094e0:	a90f      	add	r1, sp, #60	; 0x3c
 80094e2:	aa0e      	add	r2, sp, #56	; 0x38
 80094e4:	4630      	mov	r0, r6
 80094e6:	eeb0 0b48 	vmov.f64	d0, d8
 80094ea:	f002 f815 	bl	800b518 <__d2b>
 80094ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80094f2:	4605      	mov	r5, r0
 80094f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d046      	beq.n	8009588 <_dtoa_r+0x158>
 80094fa:	ee18 4a90 	vmov	r4, s17
 80094fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009502:	ec53 2b18 	vmov	r2, r3, d8
 8009506:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800950a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800950e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009512:	2400      	movs	r4, #0
 8009514:	ec43 2b16 	vmov	d6, r2, r3
 8009518:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800951c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80096c8 <_dtoa_r+0x298>
 8009520:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009524:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80096d0 <_dtoa_r+0x2a0>
 8009528:	eea7 6b05 	vfma.f64	d6, d7, d5
 800952c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80096d8 <_dtoa_r+0x2a8>
 8009530:	ee07 1a90 	vmov	s15, r1
 8009534:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009538:	eeb0 7b46 	vmov.f64	d7, d6
 800953c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009540:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009544:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	ee16 ba90 	vmov	fp, s13
 8009550:	940a      	str	r4, [sp, #40]	; 0x28
 8009552:	d508      	bpl.n	8009566 <_dtoa_r+0x136>
 8009554:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009558:	eeb4 6b47 	vcmp.f64	d6, d7
 800955c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009560:	bf18      	it	ne
 8009562:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009566:	f1bb 0f16 	cmp.w	fp, #22
 800956a:	d82f      	bhi.n	80095cc <_dtoa_r+0x19c>
 800956c:	4b60      	ldr	r3, [pc, #384]	; (80096f0 <_dtoa_r+0x2c0>)
 800956e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009572:	ed93 7b00 	vldr	d7, [r3]
 8009576:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	d501      	bpl.n	8009584 <_dtoa_r+0x154>
 8009580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009584:	2300      	movs	r3, #0
 8009586:	e022      	b.n	80095ce <_dtoa_r+0x19e>
 8009588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800958a:	4401      	add	r1, r0
 800958c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009590:	2b20      	cmp	r3, #32
 8009592:	bfc1      	itttt	gt
 8009594:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009598:	fa04 f303 	lslgt.w	r3, r4, r3
 800959c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80095a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80095a4:	bfd6      	itet	le
 80095a6:	f1c3 0320 	rsble	r3, r3, #32
 80095aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80095ae:	fa08 f803 	lslle.w	r8, r8, r3
 80095b2:	ee07 8a90 	vmov	s15, r8
 80095b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80095ba:	3901      	subs	r1, #1
 80095bc:	ee17 4a90 	vmov	r4, s15
 80095c0:	ec53 2b17 	vmov	r2, r3, d7
 80095c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80095c8:	2401      	movs	r4, #1
 80095ca:	e7a3      	b.n	8009514 <_dtoa_r+0xe4>
 80095cc:	2301      	movs	r3, #1
 80095ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d0:	1a43      	subs	r3, r0, r1
 80095d2:	1e5a      	subs	r2, r3, #1
 80095d4:	bf45      	ittet	mi
 80095d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80095da:	9304      	strmi	r3, [sp, #16]
 80095dc:	2300      	movpl	r3, #0
 80095de:	2300      	movmi	r3, #0
 80095e0:	9205      	str	r2, [sp, #20]
 80095e2:	bf54      	ite	pl
 80095e4:	9304      	strpl	r3, [sp, #16]
 80095e6:	9305      	strmi	r3, [sp, #20]
 80095e8:	f1bb 0f00 	cmp.w	fp, #0
 80095ec:	db18      	blt.n	8009620 <_dtoa_r+0x1f0>
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80095f4:	445b      	add	r3, fp
 80095f6:	9305      	str	r3, [sp, #20]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9a06      	ldr	r2, [sp, #24]
 80095fc:	2a09      	cmp	r2, #9
 80095fe:	d84a      	bhi.n	8009696 <_dtoa_r+0x266>
 8009600:	2a05      	cmp	r2, #5
 8009602:	bfc4      	itt	gt
 8009604:	3a04      	subgt	r2, #4
 8009606:	9206      	strgt	r2, [sp, #24]
 8009608:	9a06      	ldr	r2, [sp, #24]
 800960a:	f1a2 0202 	sub.w	r2, r2, #2
 800960e:	bfcc      	ite	gt
 8009610:	2400      	movgt	r4, #0
 8009612:	2401      	movle	r4, #1
 8009614:	2a03      	cmp	r2, #3
 8009616:	d849      	bhi.n	80096ac <_dtoa_r+0x27c>
 8009618:	e8df f002 	tbb	[pc, r2]
 800961c:	3b2d2f0b 	.word	0x3b2d2f0b
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	2200      	movs	r2, #0
 8009624:	eba3 030b 	sub.w	r3, r3, fp
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	9209      	str	r2, [sp, #36]	; 0x24
 800962c:	f1cb 0300 	rsb	r3, fp, #0
 8009630:	e7e3      	b.n	80095fa <_dtoa_r+0x1ca>
 8009632:	2200      	movs	r2, #0
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	9a08      	ldr	r2, [sp, #32]
 8009638:	2a00      	cmp	r2, #0
 800963a:	dc3a      	bgt.n	80096b2 <_dtoa_r+0x282>
 800963c:	f04f 0a01 	mov.w	sl, #1
 8009640:	46d1      	mov	r9, sl
 8009642:	4652      	mov	r2, sl
 8009644:	f8cd a020 	str.w	sl, [sp, #32]
 8009648:	2100      	movs	r1, #0
 800964a:	6471      	str	r1, [r6, #68]	; 0x44
 800964c:	2004      	movs	r0, #4
 800964e:	f100 0714 	add.w	r7, r0, #20
 8009652:	4297      	cmp	r7, r2
 8009654:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8009656:	d931      	bls.n	80096bc <_dtoa_r+0x28c>
 8009658:	4630      	mov	r0, r6
 800965a:	930d      	str	r3, [sp, #52]	; 0x34
 800965c:	f001 fbbc 	bl	800add8 <_Balloc>
 8009660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009662:	9001      	str	r0, [sp, #4]
 8009664:	4602      	mov	r2, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d148      	bne.n	80096fc <_dtoa_r+0x2cc>
 800966a:	4b22      	ldr	r3, [pc, #136]	; (80096f4 <_dtoa_r+0x2c4>)
 800966c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009670:	4821      	ldr	r0, [pc, #132]	; (80096f8 <_dtoa_r+0x2c8>)
 8009672:	f005 fae3 	bl	800ec3c <__assert_func>
 8009676:	2201      	movs	r2, #1
 8009678:	e7dc      	b.n	8009634 <_dtoa_r+0x204>
 800967a:	2200      	movs	r2, #0
 800967c:	9207      	str	r2, [sp, #28]
 800967e:	9a08      	ldr	r2, [sp, #32]
 8009680:	eb0b 0a02 	add.w	sl, fp, r2
 8009684:	f10a 0901 	add.w	r9, sl, #1
 8009688:	464a      	mov	r2, r9
 800968a:	2a01      	cmp	r2, #1
 800968c:	bfb8      	it	lt
 800968e:	2201      	movlt	r2, #1
 8009690:	e7da      	b.n	8009648 <_dtoa_r+0x218>
 8009692:	2201      	movs	r2, #1
 8009694:	e7f2      	b.n	800967c <_dtoa_r+0x24c>
 8009696:	2401      	movs	r4, #1
 8009698:	2200      	movs	r2, #0
 800969a:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800969e:	f04f 3aff 	mov.w	sl, #4294967295
 80096a2:	2100      	movs	r1, #0
 80096a4:	46d1      	mov	r9, sl
 80096a6:	2212      	movs	r2, #18
 80096a8:	9108      	str	r1, [sp, #32]
 80096aa:	e7cd      	b.n	8009648 <_dtoa_r+0x218>
 80096ac:	2201      	movs	r2, #1
 80096ae:	9207      	str	r2, [sp, #28]
 80096b0:	e7f5      	b.n	800969e <_dtoa_r+0x26e>
 80096b2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80096b6:	46d1      	mov	r9, sl
 80096b8:	4652      	mov	r2, sl
 80096ba:	e7c5      	b.n	8009648 <_dtoa_r+0x218>
 80096bc:	3101      	adds	r1, #1
 80096be:	6471      	str	r1, [r6, #68]	; 0x44
 80096c0:	0040      	lsls	r0, r0, #1
 80096c2:	e7c4      	b.n	800964e <_dtoa_r+0x21e>
 80096c4:	f3af 8000 	nop.w
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	7ff00000 	.word	0x7ff00000
 80096e4:	08010ec5 	.word	0x08010ec5
 80096e8:	08010ec9 	.word	0x08010ec9
 80096ec:	08010d7c 	.word	0x08010d7c
 80096f0:	08010fd0 	.word	0x08010fd0
 80096f4:	08010ed2 	.word	0x08010ed2
 80096f8:	08010ee3 	.word	0x08010ee3
 80096fc:	9a01      	ldr	r2, [sp, #4]
 80096fe:	6432      	str	r2, [r6, #64]	; 0x40
 8009700:	f1b9 0f0e 	cmp.w	r9, #14
 8009704:	d86c      	bhi.n	80097e0 <_dtoa_r+0x3b0>
 8009706:	2c00      	cmp	r4, #0
 8009708:	d06a      	beq.n	80097e0 <_dtoa_r+0x3b0>
 800970a:	f1bb 0f00 	cmp.w	fp, #0
 800970e:	f340 80a0 	ble.w	8009852 <_dtoa_r+0x422>
 8009712:	49c1      	ldr	r1, [pc, #772]	; (8009a18 <_dtoa_r+0x5e8>)
 8009714:	f00b 020f 	and.w	r2, fp, #15
 8009718:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800971c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009720:	ed92 7b00 	vldr	d7, [r2]
 8009724:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009728:	f000 8087 	beq.w	800983a <_dtoa_r+0x40a>
 800972c:	4abb      	ldr	r2, [pc, #748]	; (8009a1c <_dtoa_r+0x5ec>)
 800972e:	ed92 6b08 	vldr	d6, [r2, #32]
 8009732:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009736:	ed8d 6b02 	vstr	d6, [sp, #8]
 800973a:	f001 010f 	and.w	r1, r1, #15
 800973e:	2203      	movs	r2, #3
 8009740:	48b6      	ldr	r0, [pc, #728]	; (8009a1c <_dtoa_r+0x5ec>)
 8009742:	2900      	cmp	r1, #0
 8009744:	d17b      	bne.n	800983e <_dtoa_r+0x40e>
 8009746:	ed9d 6b02 	vldr	d6, [sp, #8]
 800974a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800974e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009754:	2900      	cmp	r1, #0
 8009756:	f000 80a2 	beq.w	800989e <_dtoa_r+0x46e>
 800975a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800975e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009762:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976a:	f140 8098 	bpl.w	800989e <_dtoa_r+0x46e>
 800976e:	f1b9 0f00 	cmp.w	r9, #0
 8009772:	f000 8094 	beq.w	800989e <_dtoa_r+0x46e>
 8009776:	f1ba 0f00 	cmp.w	sl, #0
 800977a:	dd2f      	ble.n	80097dc <_dtoa_r+0x3ac>
 800977c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009780:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009784:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009788:	f10b 37ff 	add.w	r7, fp, #4294967295
 800978c:	3201      	adds	r2, #1
 800978e:	4650      	mov	r0, sl
 8009790:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009794:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009798:	ee07 2a90 	vmov	s15, r2
 800979c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80097a0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80097a4:	ee15 4a90 	vmov	r4, s11
 80097a8:	ec52 1b15 	vmov	r1, r2, d5
 80097ac:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d177      	bne.n	80098a4 <_dtoa_r+0x474>
 80097b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80097b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80097bc:	ec42 1b17 	vmov	d7, r1, r2
 80097c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	f300 8262 	bgt.w	8009c90 <_dtoa_r+0x860>
 80097cc:	eeb1 7b47 	vneg.f64	d7, d7
 80097d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d8:	f100 8257 	bmi.w	8009c8a <_dtoa_r+0x85a>
 80097dc:	ed8d 8b02 	vstr	d8, [sp, #8]
 80097e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097e2:	2a00      	cmp	r2, #0
 80097e4:	f2c0 811c 	blt.w	8009a20 <_dtoa_r+0x5f0>
 80097e8:	f1bb 0f0e 	cmp.w	fp, #14
 80097ec:	f300 8118 	bgt.w	8009a20 <_dtoa_r+0x5f0>
 80097f0:	4b89      	ldr	r3, [pc, #548]	; (8009a18 <_dtoa_r+0x5e8>)
 80097f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097f6:	ed93 6b00 	vldr	d6, [r3]
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f280 80b7 	bge.w	8009970 <_dtoa_r+0x540>
 8009802:	f1b9 0f00 	cmp.w	r9, #0
 8009806:	f300 80b3 	bgt.w	8009970 <_dtoa_r+0x540>
 800980a:	f040 823e 	bne.w	8009c8a <_dtoa_r+0x85a>
 800980e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009812:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009816:	ed9d 7b02 	vldr	d7, [sp, #8]
 800981a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	464c      	mov	r4, r9
 8009824:	464f      	mov	r7, r9
 8009826:	f280 8214 	bge.w	8009c52 <_dtoa_r+0x822>
 800982a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800982e:	2331      	movs	r3, #49	; 0x31
 8009830:	f808 3b01 	strb.w	r3, [r8], #1
 8009834:	f10b 0b01 	add.w	fp, fp, #1
 8009838:	e210      	b.n	8009c5c <_dtoa_r+0x82c>
 800983a:	2202      	movs	r2, #2
 800983c:	e780      	b.n	8009740 <_dtoa_r+0x310>
 800983e:	07cc      	lsls	r4, r1, #31
 8009840:	d504      	bpl.n	800984c <_dtoa_r+0x41c>
 8009842:	ed90 6b00 	vldr	d6, [r0]
 8009846:	3201      	adds	r2, #1
 8009848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800984c:	1049      	asrs	r1, r1, #1
 800984e:	3008      	adds	r0, #8
 8009850:	e777      	b.n	8009742 <_dtoa_r+0x312>
 8009852:	d022      	beq.n	800989a <_dtoa_r+0x46a>
 8009854:	f1cb 0100 	rsb	r1, fp, #0
 8009858:	4a6f      	ldr	r2, [pc, #444]	; (8009a18 <_dtoa_r+0x5e8>)
 800985a:	f001 000f 	and.w	r0, r1, #15
 800985e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009862:	ed92 7b00 	vldr	d7, [r2]
 8009866:	ee28 7b07 	vmul.f64	d7, d8, d7
 800986a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800986e:	486b      	ldr	r0, [pc, #428]	; (8009a1c <_dtoa_r+0x5ec>)
 8009870:	1109      	asrs	r1, r1, #4
 8009872:	2400      	movs	r4, #0
 8009874:	2202      	movs	r2, #2
 8009876:	b929      	cbnz	r1, 8009884 <_dtoa_r+0x454>
 8009878:	2c00      	cmp	r4, #0
 800987a:	f43f af6a 	beq.w	8009752 <_dtoa_r+0x322>
 800987e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009882:	e766      	b.n	8009752 <_dtoa_r+0x322>
 8009884:	07cf      	lsls	r7, r1, #31
 8009886:	d505      	bpl.n	8009894 <_dtoa_r+0x464>
 8009888:	ed90 6b00 	vldr	d6, [r0]
 800988c:	3201      	adds	r2, #1
 800988e:	2401      	movs	r4, #1
 8009890:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009894:	1049      	asrs	r1, r1, #1
 8009896:	3008      	adds	r0, #8
 8009898:	e7ed      	b.n	8009876 <_dtoa_r+0x446>
 800989a:	2202      	movs	r2, #2
 800989c:	e759      	b.n	8009752 <_dtoa_r+0x322>
 800989e:	465f      	mov	r7, fp
 80098a0:	4648      	mov	r0, r9
 80098a2:	e775      	b.n	8009790 <_dtoa_r+0x360>
 80098a4:	ec42 1b17 	vmov	d7, r1, r2
 80098a8:	4a5b      	ldr	r2, [pc, #364]	; (8009a18 <_dtoa_r+0x5e8>)
 80098aa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80098ae:	ed12 4b02 	vldr	d4, [r2, #-8]
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	1814      	adds	r4, r2, r0
 80098b6:	9a07      	ldr	r2, [sp, #28]
 80098b8:	b352      	cbz	r2, 8009910 <_dtoa_r+0x4e0>
 80098ba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80098be:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80098c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098c6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80098ca:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80098ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098d2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80098d6:	ee14 2a90 	vmov	r2, s9
 80098da:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80098de:	3230      	adds	r2, #48	; 0x30
 80098e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80098e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ec:	f808 2b01 	strb.w	r2, [r8], #1
 80098f0:	d439      	bmi.n	8009966 <_dtoa_r+0x536>
 80098f2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80098f6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80098fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fe:	d472      	bmi.n	80099e6 <_dtoa_r+0x5b6>
 8009900:	45a0      	cmp	r8, r4
 8009902:	f43f af6b 	beq.w	80097dc <_dtoa_r+0x3ac>
 8009906:	ee27 7b03 	vmul.f64	d7, d7, d3
 800990a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800990e:	e7e0      	b.n	80098d2 <_dtoa_r+0x4a2>
 8009910:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009914:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009918:	4621      	mov	r1, r4
 800991a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800991e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009922:	ee14 2a90 	vmov	r2, s9
 8009926:	3230      	adds	r2, #48	; 0x30
 8009928:	f808 2b01 	strb.w	r2, [r8], #1
 800992c:	45a0      	cmp	r8, r4
 800992e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009932:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009936:	d118      	bne.n	800996a <_dtoa_r+0x53a>
 8009938:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800993c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009940:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009948:	dc4d      	bgt.n	80099e6 <_dtoa_r+0x5b6>
 800994a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800994e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009956:	f57f af41 	bpl.w	80097dc <_dtoa_r+0x3ac>
 800995a:	4688      	mov	r8, r1
 800995c:	3901      	subs	r1, #1
 800995e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009962:	2b30      	cmp	r3, #48	; 0x30
 8009964:	d0f9      	beq.n	800995a <_dtoa_r+0x52a>
 8009966:	46bb      	mov	fp, r7
 8009968:	e02a      	b.n	80099c0 <_dtoa_r+0x590>
 800996a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800996e:	e7d6      	b.n	800991e <_dtoa_r+0x4ee>
 8009970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009974:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009978:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800997c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009980:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009984:	ee15 3a10 	vmov	r3, s10
 8009988:	3330      	adds	r3, #48	; 0x30
 800998a:	f808 3b01 	strb.w	r3, [r8], #1
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	eba8 0303 	sub.w	r3, r8, r3
 8009994:	4599      	cmp	r9, r3
 8009996:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800999a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800999e:	d133      	bne.n	8009a08 <_dtoa_r+0x5d8>
 80099a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80099a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80099a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ac:	dc1a      	bgt.n	80099e4 <_dtoa_r+0x5b4>
 80099ae:	eeb4 7b46 	vcmp.f64	d7, d6
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	d103      	bne.n	80099c0 <_dtoa_r+0x590>
 80099b8:	ee15 3a10 	vmov	r3, s10
 80099bc:	07d9      	lsls	r1, r3, #31
 80099be:	d411      	bmi.n	80099e4 <_dtoa_r+0x5b4>
 80099c0:	4629      	mov	r1, r5
 80099c2:	4630      	mov	r0, r6
 80099c4:	f001 fa2d 	bl	800ae22 <_Bfree>
 80099c8:	2300      	movs	r3, #0
 80099ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099cc:	f888 3000 	strb.w	r3, [r8]
 80099d0:	f10b 0301 	add.w	r3, fp, #1
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f43f ad64 	beq.w	80094a6 <_dtoa_r+0x76>
 80099de:	f8c3 8000 	str.w	r8, [r3]
 80099e2:	e560      	b.n	80094a6 <_dtoa_r+0x76>
 80099e4:	465f      	mov	r7, fp
 80099e6:	4643      	mov	r3, r8
 80099e8:	4698      	mov	r8, r3
 80099ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ee:	2a39      	cmp	r2, #57	; 0x39
 80099f0:	d106      	bne.n	8009a00 <_dtoa_r+0x5d0>
 80099f2:	9a01      	ldr	r2, [sp, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d1f7      	bne.n	80099e8 <_dtoa_r+0x5b8>
 80099f8:	9901      	ldr	r1, [sp, #4]
 80099fa:	2230      	movs	r2, #48	; 0x30
 80099fc:	3701      	adds	r7, #1
 80099fe:	700a      	strb	r2, [r1, #0]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e7ae      	b.n	8009966 <_dtoa_r+0x536>
 8009a08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	d1b2      	bne.n	800997c <_dtoa_r+0x54c>
 8009a16:	e7d3      	b.n	80099c0 <_dtoa_r+0x590>
 8009a18:	08010fd0 	.word	0x08010fd0
 8009a1c:	08010fa8 	.word	0x08010fa8
 8009a20:	9907      	ldr	r1, [sp, #28]
 8009a22:	2900      	cmp	r1, #0
 8009a24:	f000 80d0 	beq.w	8009bc8 <_dtoa_r+0x798>
 8009a28:	9906      	ldr	r1, [sp, #24]
 8009a2a:	2901      	cmp	r1, #1
 8009a2c:	f300 80b4 	bgt.w	8009b98 <_dtoa_r+0x768>
 8009a30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a32:	2900      	cmp	r1, #0
 8009a34:	f000 80ac 	beq.w	8009b90 <_dtoa_r+0x760>
 8009a38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009a40:	461c      	mov	r4, r3
 8009a42:	930a      	str	r3, [sp, #40]	; 0x28
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	9b05      	ldr	r3, [sp, #20]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4413      	add	r3, r2
 8009a50:	4630      	mov	r0, r6
 8009a52:	9305      	str	r3, [sp, #20]
 8009a54:	f001 face 	bl	800aff4 <__i2b>
 8009a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	f1b8 0f00 	cmp.w	r8, #0
 8009a60:	dd0d      	ble.n	8009a7e <_dtoa_r+0x64e>
 8009a62:	9a05      	ldr	r2, [sp, #20]
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	dd0a      	ble.n	8009a7e <_dtoa_r+0x64e>
 8009a68:	4542      	cmp	r2, r8
 8009a6a:	9904      	ldr	r1, [sp, #16]
 8009a6c:	bfa8      	it	ge
 8009a6e:	4642      	movge	r2, r8
 8009a70:	1a89      	subs	r1, r1, r2
 8009a72:	9104      	str	r1, [sp, #16]
 8009a74:	9905      	ldr	r1, [sp, #20]
 8009a76:	eba8 0802 	sub.w	r8, r8, r2
 8009a7a:	1a8a      	subs	r2, r1, r2
 8009a7c:	9205      	str	r2, [sp, #20]
 8009a7e:	b303      	cbz	r3, 8009ac2 <_dtoa_r+0x692>
 8009a80:	9a07      	ldr	r2, [sp, #28]
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	f000 80a5 	beq.w	8009bd2 <_dtoa_r+0x7a2>
 8009a88:	2c00      	cmp	r4, #0
 8009a8a:	dd13      	ble.n	8009ab4 <_dtoa_r+0x684>
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4630      	mov	r0, r6
 8009a92:	930d      	str	r3, [sp, #52]	; 0x34
 8009a94:	f001 fb6e 	bl	800b174 <__pow5mult>
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f001 fabe 	bl	800b020 <__multiply>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	900a      	str	r0, [sp, #40]	; 0x28
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f001 f9ba 	bl	800ae22 <_Bfree>
 8009aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab2:	4615      	mov	r5, r2
 8009ab4:	1b1a      	subs	r2, r3, r4
 8009ab6:	d004      	beq.n	8009ac2 <_dtoa_r+0x692>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f001 fb5a 	bl	800b174 <__pow5mult>
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f001 fa95 	bl	800aff4 <__i2b>
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	f340 8081 	ble.w	8009bd6 <_dtoa_r+0x7a6>
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f001 fb4b 	bl	800b174 <__pow5mult>
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	dd7a      	ble.n	8009bdc <_dtoa_r+0x7ac>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8009aea:	6922      	ldr	r2, [r4, #16]
 8009aec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009af0:	6910      	ldr	r0, [r2, #16]
 8009af2:	f001 fa2f 	bl	800af54 <__hi0bits>
 8009af6:	f1c0 0020 	rsb	r0, r0, #32
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	4418      	add	r0, r3
 8009afe:	f010 001f 	ands.w	r0, r0, #31
 8009b02:	f000 808c 	beq.w	8009c1e <_dtoa_r+0x7ee>
 8009b06:	f1c0 0220 	rsb	r2, r0, #32
 8009b0a:	2a04      	cmp	r2, #4
 8009b0c:	f340 8085 	ble.w	8009c1a <_dtoa_r+0x7ea>
 8009b10:	f1c0 001c 	rsb	r0, r0, #28
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	4403      	add	r3, r0
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	4403      	add	r3, r0
 8009b1e:	4480      	add	r8, r0
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	9b04      	ldr	r3, [sp, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dd05      	ble.n	8009b34 <_dtoa_r+0x704>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f001 fb61 	bl	800b1f4 <__lshift>
 8009b32:	4605      	mov	r5, r0
 8009b34:	9b05      	ldr	r3, [sp, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd05      	ble.n	8009b46 <_dtoa_r+0x716>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f001 fb58 	bl	800b1f4 <__lshift>
 8009b44:	4604      	mov	r4, r0
 8009b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d06a      	beq.n	8009c22 <_dtoa_r+0x7f2>
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f001 fbc0 	bl	800b2d4 <__mcmp>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	da64      	bge.n	8009c22 <_dtoa_r+0x7f2>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	220a      	movs	r2, #10
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f001 f968 	bl	800ae34 <__multadd>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8190 	beq.w	8009e92 <_dtoa_r+0xa62>
 8009b72:	4639      	mov	r1, r7
 8009b74:	2300      	movs	r3, #0
 8009b76:	220a      	movs	r2, #10
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f001 f95b 	bl	800ae34 <__multadd>
 8009b7e:	f1ba 0f00 	cmp.w	sl, #0
 8009b82:	4607      	mov	r7, r0
 8009b84:	f300 808d 	bgt.w	8009ca2 <_dtoa_r+0x872>
 8009b88:	9b06      	ldr	r3, [sp, #24]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	dc50      	bgt.n	8009c30 <_dtoa_r+0x800>
 8009b8e:	e088      	b.n	8009ca2 <_dtoa_r+0x872>
 8009b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b96:	e751      	b.n	8009a3c <_dtoa_r+0x60c>
 8009b98:	f109 34ff 	add.w	r4, r9, #4294967295
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	bfbf      	itttt	lt
 8009ba0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009ba2:	1ae3      	sublt	r3, r4, r3
 8009ba4:	18d2      	addlt	r2, r2, r3
 8009ba6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009ba8:	bfb6      	itet	lt
 8009baa:	4623      	movlt	r3, r4
 8009bac:	1b1c      	subge	r4, r3, r4
 8009bae:	2400      	movlt	r4, #0
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	bfb5      	itete	lt
 8009bb6:	9a04      	ldrlt	r2, [sp, #16]
 8009bb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009bbc:	eba2 0809 	sublt.w	r8, r2, r9
 8009bc0:	464a      	movge	r2, r9
 8009bc2:	bfb8      	it	lt
 8009bc4:	2200      	movlt	r2, #0
 8009bc6:	e73c      	b.n	8009a42 <_dtoa_r+0x612>
 8009bc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009bcc:	9f07      	ldr	r7, [sp, #28]
 8009bce:	461c      	mov	r4, r3
 8009bd0:	e744      	b.n	8009a5c <_dtoa_r+0x62c>
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	e770      	b.n	8009ab8 <_dtoa_r+0x688>
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	dc18      	bgt.n	8009c0e <_dtoa_r+0x7de>
 8009bdc:	9b02      	ldr	r3, [sp, #8]
 8009bde:	b9b3      	cbnz	r3, 8009c0e <_dtoa_r+0x7de>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009be6:	b9a2      	cbnz	r2, 8009c12 <_dtoa_r+0x7e2>
 8009be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bec:	0d12      	lsrs	r2, r2, #20
 8009bee:	0512      	lsls	r2, r2, #20
 8009bf0:	b18a      	cbz	r2, 8009c16 <_dtoa_r+0x7e6>
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	9304      	str	r3, [sp, #16]
 8009bf8:	9b05      	ldr	r3, [sp, #20]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	9305      	str	r3, [sp, #20]
 8009bfe:	2301      	movs	r3, #1
 8009c00:	930a      	str	r3, [sp, #40]	; 0x28
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f47f af70 	bne.w	8009aea <_dtoa_r+0x6ba>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e775      	b.n	8009afa <_dtoa_r+0x6ca>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e7f6      	b.n	8009c00 <_dtoa_r+0x7d0>
 8009c12:	9b02      	ldr	r3, [sp, #8]
 8009c14:	e7f4      	b.n	8009c00 <_dtoa_r+0x7d0>
 8009c16:	920a      	str	r2, [sp, #40]	; 0x28
 8009c18:	e7f3      	b.n	8009c02 <_dtoa_r+0x7d2>
 8009c1a:	d082      	beq.n	8009b22 <_dtoa_r+0x6f2>
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	301c      	adds	r0, #28
 8009c20:	e778      	b.n	8009b14 <_dtoa_r+0x6e4>
 8009c22:	f1b9 0f00 	cmp.w	r9, #0
 8009c26:	dc37      	bgt.n	8009c98 <_dtoa_r+0x868>
 8009c28:	9b06      	ldr	r3, [sp, #24]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	dd34      	ble.n	8009c98 <_dtoa_r+0x868>
 8009c2e:	46ca      	mov	sl, r9
 8009c30:	f1ba 0f00 	cmp.w	sl, #0
 8009c34:	d10d      	bne.n	8009c52 <_dtoa_r+0x822>
 8009c36:	4621      	mov	r1, r4
 8009c38:	4653      	mov	r3, sl
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f001 f8f9 	bl	800ae34 <__multadd>
 8009c42:	4601      	mov	r1, r0
 8009c44:	4604      	mov	r4, r0
 8009c46:	4628      	mov	r0, r5
 8009c48:	f001 fb44 	bl	800b2d4 <__mcmp>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f73f adec 	bgt.w	800982a <_dtoa_r+0x3fa>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c58:	ea6f 0b03 	mvn.w	fp, r3
 8009c5c:	f04f 0900 	mov.w	r9, #0
 8009c60:	4621      	mov	r1, r4
 8009c62:	4630      	mov	r0, r6
 8009c64:	f001 f8dd 	bl	800ae22 <_Bfree>
 8009c68:	2f00      	cmp	r7, #0
 8009c6a:	f43f aea9 	beq.w	80099c0 <_dtoa_r+0x590>
 8009c6e:	f1b9 0f00 	cmp.w	r9, #0
 8009c72:	d005      	beq.n	8009c80 <_dtoa_r+0x850>
 8009c74:	45b9      	cmp	r9, r7
 8009c76:	d003      	beq.n	8009c80 <_dtoa_r+0x850>
 8009c78:	4649      	mov	r1, r9
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f001 f8d1 	bl	800ae22 <_Bfree>
 8009c80:	4639      	mov	r1, r7
 8009c82:	4630      	mov	r0, r6
 8009c84:	f001 f8cd 	bl	800ae22 <_Bfree>
 8009c88:	e69a      	b.n	80099c0 <_dtoa_r+0x590>
 8009c8a:	2400      	movs	r4, #0
 8009c8c:	4627      	mov	r7, r4
 8009c8e:	e7e0      	b.n	8009c52 <_dtoa_r+0x822>
 8009c90:	46bb      	mov	fp, r7
 8009c92:	4604      	mov	r4, r0
 8009c94:	4607      	mov	r7, r0
 8009c96:	e5c8      	b.n	800982a <_dtoa_r+0x3fa>
 8009c98:	9b07      	ldr	r3, [sp, #28]
 8009c9a:	46ca      	mov	sl, r9
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80ff 	beq.w	8009ea0 <_dtoa_r+0xa70>
 8009ca2:	f1b8 0f00 	cmp.w	r8, #0
 8009ca6:	dd05      	ble.n	8009cb4 <_dtoa_r+0x884>
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4642      	mov	r2, r8
 8009cac:	4630      	mov	r0, r6
 8009cae:	f001 faa1 	bl	800b1f4 <__lshift>
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d05c      	beq.n	8009d74 <_dtoa_r+0x944>
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f001 f88b 	bl	800add8 <_Balloc>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	b920      	cbnz	r0, 8009cd0 <_dtoa_r+0x8a0>
 8009cc6:	4b82      	ldr	r3, [pc, #520]	; (8009ed0 <_dtoa_r+0xaa0>)
 8009cc8:	4602      	mov	r2, r0
 8009cca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009cce:	e4cf      	b.n	8009670 <_dtoa_r+0x240>
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	3202      	adds	r2, #2
 8009cd4:	0092      	lsls	r2, r2, #2
 8009cd6:	f107 010c 	add.w	r1, r7, #12
 8009cda:	300c      	adds	r0, #12
 8009cdc:	f001 f848 	bl	800ad70 <memcpy>
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f001 fa85 	bl	800b1f4 <__lshift>
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	3301      	adds	r3, #1
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	4453      	add	r3, sl
 8009cf4:	9308      	str	r3, [sp, #32]
 8009cf6:	9b02      	ldr	r3, [sp, #8]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	46b9      	mov	r9, r7
 8009cfe:	9307      	str	r3, [sp, #28]
 8009d00:	4607      	mov	r7, r0
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	4621      	mov	r1, r4
 8009d06:	3b01      	subs	r3, #1
 8009d08:	4628      	mov	r0, r5
 8009d0a:	9302      	str	r3, [sp, #8]
 8009d0c:	f7ff fb02 	bl	8009314 <quorem>
 8009d10:	4603      	mov	r3, r0
 8009d12:	3330      	adds	r3, #48	; 0x30
 8009d14:	9005      	str	r0, [sp, #20]
 8009d16:	4649      	mov	r1, r9
 8009d18:	4628      	mov	r0, r5
 8009d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1c:	f001 fada 	bl	800b2d4 <__mcmp>
 8009d20:	463a      	mov	r2, r7
 8009d22:	4682      	mov	sl, r0
 8009d24:	4621      	mov	r1, r4
 8009d26:	4630      	mov	r0, r6
 8009d28:	f001 faf0 	bl	800b30c <__mdiff>
 8009d2c:	68c2      	ldr	r2, [r0, #12]
 8009d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d30:	4680      	mov	r8, r0
 8009d32:	bb0a      	cbnz	r2, 8009d78 <_dtoa_r+0x948>
 8009d34:	4601      	mov	r1, r0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f001 facc 	bl	800b2d4 <__mcmp>
 8009d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3e:	4602      	mov	r2, r0
 8009d40:	4641      	mov	r1, r8
 8009d42:	4630      	mov	r0, r6
 8009d44:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009d48:	f001 f86b 	bl	800ae22 <_Bfree>
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d54:	ea43 0102 	orr.w	r1, r3, r2
 8009d58:	9b07      	ldr	r3, [sp, #28]
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5e:	d10d      	bne.n	8009d7c <_dtoa_r+0x94c>
 8009d60:	2b39      	cmp	r3, #57	; 0x39
 8009d62:	d029      	beq.n	8009db8 <_dtoa_r+0x988>
 8009d64:	f1ba 0f00 	cmp.w	sl, #0
 8009d68:	dd01      	ble.n	8009d6e <_dtoa_r+0x93e>
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	3331      	adds	r3, #49	; 0x31
 8009d6e:	9a02      	ldr	r2, [sp, #8]
 8009d70:	7013      	strb	r3, [r2, #0]
 8009d72:	e775      	b.n	8009c60 <_dtoa_r+0x830>
 8009d74:	4638      	mov	r0, r7
 8009d76:	e7b8      	b.n	8009cea <_dtoa_r+0x8ba>
 8009d78:	2201      	movs	r2, #1
 8009d7a:	e7e1      	b.n	8009d40 <_dtoa_r+0x910>
 8009d7c:	f1ba 0f00 	cmp.w	sl, #0
 8009d80:	db06      	blt.n	8009d90 <_dtoa_r+0x960>
 8009d82:	9906      	ldr	r1, [sp, #24]
 8009d84:	ea41 0a0a 	orr.w	sl, r1, sl
 8009d88:	9907      	ldr	r1, [sp, #28]
 8009d8a:	ea5a 0101 	orrs.w	r1, sl, r1
 8009d8e:	d120      	bne.n	8009dd2 <_dtoa_r+0x9a2>
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	ddec      	ble.n	8009d6e <_dtoa_r+0x93e>
 8009d94:	4629      	mov	r1, r5
 8009d96:	2201      	movs	r2, #1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	f001 fa2a 	bl	800b1f4 <__lshift>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4605      	mov	r5, r0
 8009da4:	f001 fa96 	bl	800b2d4 <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	dc02      	bgt.n	8009db4 <_dtoa_r+0x984>
 8009dae:	d1de      	bne.n	8009d6e <_dtoa_r+0x93e>
 8009db0:	07da      	lsls	r2, r3, #31
 8009db2:	d5dc      	bpl.n	8009d6e <_dtoa_r+0x93e>
 8009db4:	2b39      	cmp	r3, #57	; 0x39
 8009db6:	d1d8      	bne.n	8009d6a <_dtoa_r+0x93a>
 8009db8:	9a02      	ldr	r2, [sp, #8]
 8009dba:	2339      	movs	r3, #57	; 0x39
 8009dbc:	7013      	strb	r3, [r2, #0]
 8009dbe:	4643      	mov	r3, r8
 8009dc0:	4698      	mov	r8, r3
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009dc8:	2a39      	cmp	r2, #57	; 0x39
 8009dca:	d051      	beq.n	8009e70 <_dtoa_r+0xa40>
 8009dcc:	3201      	adds	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]
 8009dd0:	e746      	b.n	8009c60 <_dtoa_r+0x830>
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	dd03      	ble.n	8009dde <_dtoa_r+0x9ae>
 8009dd6:	2b39      	cmp	r3, #57	; 0x39
 8009dd8:	d0ee      	beq.n	8009db8 <_dtoa_r+0x988>
 8009dda:	3301      	adds	r3, #1
 8009ddc:	e7c7      	b.n	8009d6e <_dtoa_r+0x93e>
 8009dde:	9a04      	ldr	r2, [sp, #16]
 8009de0:	9908      	ldr	r1, [sp, #32]
 8009de2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009de6:	428a      	cmp	r2, r1
 8009de8:	d02b      	beq.n	8009e42 <_dtoa_r+0xa12>
 8009dea:	4629      	mov	r1, r5
 8009dec:	2300      	movs	r3, #0
 8009dee:	220a      	movs	r2, #10
 8009df0:	4630      	mov	r0, r6
 8009df2:	f001 f81f 	bl	800ae34 <__multadd>
 8009df6:	45b9      	cmp	r9, r7
 8009df8:	4605      	mov	r5, r0
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	f04f 020a 	mov.w	r2, #10
 8009e02:	4649      	mov	r1, r9
 8009e04:	4630      	mov	r0, r6
 8009e06:	d107      	bne.n	8009e18 <_dtoa_r+0x9e8>
 8009e08:	f001 f814 	bl	800ae34 <__multadd>
 8009e0c:	4681      	mov	r9, r0
 8009e0e:	4607      	mov	r7, r0
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	3301      	adds	r3, #1
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	e774      	b.n	8009d02 <_dtoa_r+0x8d2>
 8009e18:	f001 f80c 	bl	800ae34 <__multadd>
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4681      	mov	r9, r0
 8009e20:	2300      	movs	r3, #0
 8009e22:	220a      	movs	r2, #10
 8009e24:	4630      	mov	r0, r6
 8009e26:	f001 f805 	bl	800ae34 <__multadd>
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	e7f0      	b.n	8009e10 <_dtoa_r+0x9e0>
 8009e2e:	f1ba 0f00 	cmp.w	sl, #0
 8009e32:	9a01      	ldr	r2, [sp, #4]
 8009e34:	bfcc      	ite	gt
 8009e36:	46d0      	movgt	r8, sl
 8009e38:	f04f 0801 	movle.w	r8, #1
 8009e3c:	4490      	add	r8, r2
 8009e3e:	f04f 0900 	mov.w	r9, #0
 8009e42:	4629      	mov	r1, r5
 8009e44:	2201      	movs	r2, #1
 8009e46:	4630      	mov	r0, r6
 8009e48:	9302      	str	r3, [sp, #8]
 8009e4a:	f001 f9d3 	bl	800b1f4 <__lshift>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4605      	mov	r5, r0
 8009e52:	f001 fa3f 	bl	800b2d4 <__mcmp>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	dcb1      	bgt.n	8009dbe <_dtoa_r+0x98e>
 8009e5a:	d102      	bne.n	8009e62 <_dtoa_r+0xa32>
 8009e5c:	9b02      	ldr	r3, [sp, #8]
 8009e5e:	07db      	lsls	r3, r3, #31
 8009e60:	d4ad      	bmi.n	8009dbe <_dtoa_r+0x98e>
 8009e62:	4643      	mov	r3, r8
 8009e64:	4698      	mov	r8, r3
 8009e66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e6a:	2a30      	cmp	r2, #48	; 0x30
 8009e6c:	d0fa      	beq.n	8009e64 <_dtoa_r+0xa34>
 8009e6e:	e6f7      	b.n	8009c60 <_dtoa_r+0x830>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d1a4      	bne.n	8009dc0 <_dtoa_r+0x990>
 8009e76:	f10b 0b01 	add.w	fp, fp, #1
 8009e7a:	2331      	movs	r3, #49	; 0x31
 8009e7c:	e778      	b.n	8009d70 <_dtoa_r+0x940>
 8009e7e:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <_dtoa_r+0xaa4>)
 8009e80:	f7ff bb2c 	b.w	80094dc <_dtoa_r+0xac>
 8009e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f47f ab13 	bne.w	80094b2 <_dtoa_r+0x82>
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <_dtoa_r+0xaa8>)
 8009e8e:	f7ff bb25 	b.w	80094dc <_dtoa_r+0xac>
 8009e92:	f1ba 0f00 	cmp.w	sl, #0
 8009e96:	dc03      	bgt.n	8009ea0 <_dtoa_r+0xa70>
 8009e98:	9b06      	ldr	r3, [sp, #24]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	f73f aec8 	bgt.w	8009c30 <_dtoa_r+0x800>
 8009ea0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7ff fa34 	bl	8009314 <quorem>
 8009eac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009eb0:	f808 3b01 	strb.w	r3, [r8], #1
 8009eb4:	9a01      	ldr	r2, [sp, #4]
 8009eb6:	eba8 0202 	sub.w	r2, r8, r2
 8009eba:	4592      	cmp	sl, r2
 8009ebc:	ddb7      	ble.n	8009e2e <_dtoa_r+0x9fe>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 ffb5 	bl	800ae34 <__multadd>
 8009eca:	4605      	mov	r5, r0
 8009ecc:	e7ea      	b.n	8009ea4 <_dtoa_r+0xa74>
 8009ece:	bf00      	nop
 8009ed0:	08010ed2 	.word	0x08010ed2
 8009ed4:	08010d7b 	.word	0x08010d7b
 8009ed8:	08010ec9 	.word	0x08010ec9

08009edc <__sflush_r>:
 8009edc:	898b      	ldrh	r3, [r1, #12]
 8009ede:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	0718      	lsls	r0, r3, #28
 8009eea:	460c      	mov	r4, r1
 8009eec:	d45f      	bmi.n	8009fae <__sflush_r+0xd2>
 8009eee:	684b      	ldr	r3, [r1, #4]
 8009ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	818a      	strh	r2, [r1, #12]
 8009ef8:	dc05      	bgt.n	8009f06 <__sflush_r+0x2a>
 8009efa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dc02      	bgt.n	8009f06 <__sflush_r+0x2a>
 8009f00:	2000      	movs	r0, #0
 8009f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f08:	2e00      	cmp	r6, #0
 8009f0a:	d0f9      	beq.n	8009f00 <__sflush_r+0x24>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f12:	682f      	ldr	r7, [r5, #0]
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	d036      	beq.n	8009f86 <__sflush_r+0xaa>
 8009f18:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	075a      	lsls	r2, r3, #29
 8009f1e:	d505      	bpl.n	8009f2c <__sflush_r+0x50>
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	1ac0      	subs	r0, r0, r3
 8009f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f26:	b10b      	cbz	r3, 8009f2c <__sflush_r+0x50>
 8009f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f2a:	1ac0      	subs	r0, r0, r3
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f32:	69e1      	ldr	r1, [r4, #28]
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b0      	blx	r6
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	d106      	bne.n	8009f4c <__sflush_r+0x70>
 8009f3e:	6829      	ldr	r1, [r5, #0]
 8009f40:	291d      	cmp	r1, #29
 8009f42:	d830      	bhi.n	8009fa6 <__sflush_r+0xca>
 8009f44:	4a2b      	ldr	r2, [pc, #172]	; (8009ff4 <__sflush_r+0x118>)
 8009f46:	40ca      	lsrs	r2, r1
 8009f48:	07d6      	lsls	r6, r2, #31
 8009f4a:	d52c      	bpl.n	8009fa6 <__sflush_r+0xca>
 8009f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f50:	b21b      	sxth	r3, r3
 8009f52:	2200      	movs	r2, #0
 8009f54:	6062      	str	r2, [r4, #4]
 8009f56:	04d9      	lsls	r1, r3, #19
 8009f58:	6922      	ldr	r2, [r4, #16]
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	6022      	str	r2, [r4, #0]
 8009f5e:	d504      	bpl.n	8009f6a <__sflush_r+0x8e>
 8009f60:	1c42      	adds	r2, r0, #1
 8009f62:	d101      	bne.n	8009f68 <__sflush_r+0x8c>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b903      	cbnz	r3, 8009f6a <__sflush_r+0x8e>
 8009f68:	6520      	str	r0, [r4, #80]	; 0x50
 8009f6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f6c:	602f      	str	r7, [r5, #0]
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d0c6      	beq.n	8009f00 <__sflush_r+0x24>
 8009f72:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009f76:	4299      	cmp	r1, r3
 8009f78:	d002      	beq.n	8009f80 <__sflush_r+0xa4>
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f9b2 	bl	800a2e4 <_free_r>
 8009f80:	2000      	movs	r0, #0
 8009f82:	6320      	str	r0, [r4, #48]	; 0x30
 8009f84:	e7bd      	b.n	8009f02 <__sflush_r+0x26>
 8009f86:	69e1      	ldr	r1, [r4, #28]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b0      	blx	r6
 8009f8e:	1c41      	adds	r1, r0, #1
 8009f90:	d1c3      	bne.n	8009f1a <__sflush_r+0x3e>
 8009f92:	682b      	ldr	r3, [r5, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0c0      	beq.n	8009f1a <__sflush_r+0x3e>
 8009f98:	2b1d      	cmp	r3, #29
 8009f9a:	d001      	beq.n	8009fa0 <__sflush_r+0xc4>
 8009f9c:	2b16      	cmp	r3, #22
 8009f9e:	d101      	bne.n	8009fa4 <__sflush_r+0xc8>
 8009fa0:	602f      	str	r7, [r5, #0]
 8009fa2:	e7ad      	b.n	8009f00 <__sflush_r+0x24>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	e7a9      	b.n	8009f02 <__sflush_r+0x26>
 8009fae:	690f      	ldr	r7, [r1, #16]
 8009fb0:	2f00      	cmp	r7, #0
 8009fb2:	d0a5      	beq.n	8009f00 <__sflush_r+0x24>
 8009fb4:	079b      	lsls	r3, r3, #30
 8009fb6:	680e      	ldr	r6, [r1, #0]
 8009fb8:	bf08      	it	eq
 8009fba:	694b      	ldreq	r3, [r1, #20]
 8009fbc:	600f      	str	r7, [r1, #0]
 8009fbe:	bf18      	it	ne
 8009fc0:	2300      	movne	r3, #0
 8009fc2:	eba6 0807 	sub.w	r8, r6, r7
 8009fc6:	608b      	str	r3, [r1, #8]
 8009fc8:	f1b8 0f00 	cmp.w	r8, #0
 8009fcc:	dd98      	ble.n	8009f00 <__sflush_r+0x24>
 8009fce:	69e1      	ldr	r1, [r4, #28]
 8009fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fd2:	4643      	mov	r3, r8
 8009fd4:	463a      	mov	r2, r7
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	47b0      	blx	r6
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	dc06      	bgt.n	8009fec <__sflush_r+0x110>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	e78a      	b.n	8009f02 <__sflush_r+0x26>
 8009fec:	4407      	add	r7, r0
 8009fee:	eba8 0800 	sub.w	r8, r8, r0
 8009ff2:	e7e9      	b.n	8009fc8 <__sflush_r+0xec>
 8009ff4:	20400001 	.word	0x20400001

08009ff8 <_fflush_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	b118      	cbz	r0, 800a008 <_fflush_r+0x10>
 800a000:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a002:	b90b      	cbnz	r3, 800a008 <_fflush_r+0x10>
 800a004:	f000 f876 	bl	800a0f4 <__sinit>
 800a008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00c:	b1bb      	cbz	r3, 800a03e <_fflush_r+0x46>
 800a00e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a010:	07d0      	lsls	r0, r2, #31
 800a012:	d404      	bmi.n	800a01e <_fflush_r+0x26>
 800a014:	0599      	lsls	r1, r3, #22
 800a016:	d402      	bmi.n	800a01e <_fflush_r+0x26>
 800a018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a01a:	f000 fbc3 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800a01e:	4628      	mov	r0, r5
 800a020:	4621      	mov	r1, r4
 800a022:	f7ff ff5b 	bl	8009edc <__sflush_r>
 800a026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a028:	07da      	lsls	r2, r3, #31
 800a02a:	4605      	mov	r5, r0
 800a02c:	d405      	bmi.n	800a03a <_fflush_r+0x42>
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	059b      	lsls	r3, r3, #22
 800a032:	d402      	bmi.n	800a03a <_fflush_r+0x42>
 800a034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a036:	f000 fbb6 	bl	800a7a6 <__retarget_lock_release_recursive>
 800a03a:	4628      	mov	r0, r5
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	461d      	mov	r5, r3
 800a040:	e7fb      	b.n	800a03a <_fflush_r+0x42>
	...

0800a044 <fflush>:
 800a044:	4601      	mov	r1, r0
 800a046:	b920      	cbnz	r0, 800a052 <fflush+0xe>
 800a048:	4b04      	ldr	r3, [pc, #16]	; (800a05c <fflush+0x18>)
 800a04a:	4905      	ldr	r1, [pc, #20]	; (800a060 <fflush+0x1c>)
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f000 bb70 	b.w	800a732 <_fwalk_reent>
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <fflush+0x20>)
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f7ff bfcf 	b.w	8009ff8 <_fflush_r>
 800a05a:	bf00      	nop
 800a05c:	08010d20 	.word	0x08010d20
 800a060:	08009ff9 	.word	0x08009ff9
 800a064:	2000000c 	.word	0x2000000c

0800a068 <std>:
 800a068:	2300      	movs	r3, #0
 800a06a:	b510      	push	{r4, lr}
 800a06c:	4604      	mov	r4, r0
 800a06e:	e9c0 3300 	strd	r3, r3, [r0]
 800a072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a076:	6083      	str	r3, [r0, #8]
 800a078:	8181      	strh	r1, [r0, #12]
 800a07a:	6643      	str	r3, [r0, #100]	; 0x64
 800a07c:	81c2      	strh	r2, [r0, #14]
 800a07e:	6183      	str	r3, [r0, #24]
 800a080:	4619      	mov	r1, r3
 800a082:	2208      	movs	r2, #8
 800a084:	305c      	adds	r0, #92	; 0x5c
 800a086:	f7fc fab3 	bl	80065f0 <memset>
 800a08a:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <std+0x40>)
 800a08c:	6223      	str	r3, [r4, #32]
 800a08e:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <std+0x44>)
 800a090:	6263      	str	r3, [r4, #36]	; 0x24
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <std+0x48>)
 800a094:	62a3      	str	r3, [r4, #40]	; 0x28
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <std+0x4c>)
 800a098:	61e4      	str	r4, [r4, #28]
 800a09a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a09c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a4:	f000 bb7c 	b.w	800a7a0 <__retarget_lock_init_recursive>
 800a0a8:	0800bc75 	.word	0x0800bc75
 800a0ac:	0800bc97 	.word	0x0800bc97
 800a0b0:	0800bccf 	.word	0x0800bccf
 800a0b4:	0800bcf3 	.word	0x0800bcf3

0800a0b8 <_cleanup_r>:
 800a0b8:	4901      	ldr	r1, [pc, #4]	; (800a0c0 <_cleanup_r+0x8>)
 800a0ba:	f000 bb3a 	b.w	800a732 <_fwalk_reent>
 800a0be:	bf00      	nop
 800a0c0:	0800ed05 	.word	0x0800ed05

0800a0c4 <__sfp_lock_acquire>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	; (800a0cc <__sfp_lock_acquire+0x8>)
 800a0c6:	f000 bb6d 	b.w	800a7a4 <__retarget_lock_acquire_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	20000b0e 	.word	0x20000b0e

0800a0d0 <__sfp_lock_release>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__sfp_lock_release+0x8>)
 800a0d2:	f000 bb68 	b.w	800a7a6 <__retarget_lock_release_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000b0e 	.word	0x20000b0e

0800a0dc <__sinit_lock_acquire>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	; (800a0e4 <__sinit_lock_acquire+0x8>)
 800a0de:	f000 bb61 	b.w	800a7a4 <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000b0f 	.word	0x20000b0f

0800a0e8 <__sinit_lock_release>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	; (800a0f0 <__sinit_lock_release+0x8>)
 800a0ea:	f000 bb5c 	b.w	800a7a6 <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	20000b0f 	.word	0x20000b0f

0800a0f4 <__sinit>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	f7ff fff0 	bl	800a0dc <__sinit_lock_acquire>
 800a0fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0fe:	b11a      	cbz	r2, 800a108 <__sinit+0x14>
 800a100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a104:	f7ff bff0 	b.w	800a0e8 <__sinit_lock_release>
 800a108:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <__sinit+0x4c>)
 800a10a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a10c:	2303      	movs	r3, #3
 800a10e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a112:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a116:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a11a:	6860      	ldr	r0, [r4, #4]
 800a11c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a120:	2104      	movs	r1, #4
 800a122:	f7ff ffa1 	bl	800a068 <std>
 800a126:	68a0      	ldr	r0, [r4, #8]
 800a128:	2201      	movs	r2, #1
 800a12a:	2109      	movs	r1, #9
 800a12c:	f7ff ff9c 	bl	800a068 <std>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	2202      	movs	r2, #2
 800a134:	2112      	movs	r1, #18
 800a136:	f7ff ff97 	bl	800a068 <std>
 800a13a:	2301      	movs	r3, #1
 800a13c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a13e:	e7df      	b.n	800a100 <__sinit+0xc>
 800a140:	0800a0b9 	.word	0x0800a0b9

0800a144 <__libc_fini_array>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d07      	ldr	r5, [pc, #28]	; (800a164 <__libc_fini_array+0x20>)
 800a148:	4c07      	ldr	r4, [pc, #28]	; (800a168 <__libc_fini_array+0x24>)
 800a14a:	1b64      	subs	r4, r4, r5
 800a14c:	10a4      	asrs	r4, r4, #2
 800a14e:	b91c      	cbnz	r4, 800a158 <__libc_fini_array+0x14>
 800a150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a154:	f005 beb8 	b.w	800fec8 <_fini>
 800a158:	3c01      	subs	r4, #1
 800a15a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a15e:	4798      	blx	r3
 800a160:	e7f5      	b.n	800a14e <__libc_fini_array+0xa>
 800a162:	bf00      	nop
 800a164:	08012ab0 	.word	0x08012ab0
 800a168:	08012ab4 	.word	0x08012ab4

0800a16c <_fread_r>:
 800a16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	461e      	mov	r6, r3
 800a172:	4613      	mov	r3, r2
 800a174:	4373      	muls	r3, r6
 800a176:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a178:	4681      	mov	r9, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	4692      	mov	sl, r2
 800a17e:	469b      	mov	fp, r3
 800a180:	d05a      	beq.n	800a238 <_fread_r+0xcc>
 800a182:	b118      	cbz	r0, 800a18c <_fread_r+0x20>
 800a184:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a186:	b90b      	cbnz	r3, 800a18c <_fread_r+0x20>
 800a188:	f7ff ffb4 	bl	800a0f4 <__sinit>
 800a18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18e:	07db      	lsls	r3, r3, #31
 800a190:	d405      	bmi.n	800a19e <_fread_r+0x32>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	059f      	lsls	r7, r3, #22
 800a196:	d402      	bmi.n	800a19e <_fread_r+0x32>
 800a198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19a:	f000 fb03 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800a19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a2:	049d      	lsls	r5, r3, #18
 800a1a4:	d406      	bmi.n	800a1b4 <_fread_r+0x48>
 800a1a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1b2:	6663      	str	r3, [r4, #100]	; 0x64
 800a1b4:	6863      	ldr	r3, [r4, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da01      	bge.n	800a1be <_fread_r+0x52>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	465f      	mov	r7, fp
 800a1c0:	e9d4 1500 	ldrd	r1, r5, [r4]
 800a1c4:	42af      	cmp	r7, r5
 800a1c6:	d813      	bhi.n	800a1f0 <_fread_r+0x84>
 800a1c8:	463a      	mov	r2, r7
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f000 fdd0 	bl	800ad70 <memcpy>
 800a1d0:	6863      	ldr	r3, [r4, #4]
 800a1d2:	1bdb      	subs	r3, r3, r7
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	443b      	add	r3, r7
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1de:	07da      	lsls	r2, r3, #31
 800a1e0:	d424      	bmi.n	800a22c <_fread_r+0xc0>
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	059b      	lsls	r3, r3, #22
 800a1e6:	d421      	bmi.n	800a22c <_fread_r+0xc0>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ea:	f000 fadc 	bl	800a7a6 <__retarget_lock_release_recursive>
 800a1ee:	e01d      	b.n	800a22c <_fread_r+0xc0>
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f000 fdbc 	bl	800ad70 <memcpy>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	442b      	add	r3, r5
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	4621      	mov	r1, r4
 800a200:	1b7b      	subs	r3, r7, r5
 800a202:	4648      	mov	r0, r9
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	f001 fc0d 	bl	800ba24 <__srefill_r>
 800a20a:	44a8      	add	r8, r5
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	b188      	cbz	r0, 800a234 <_fread_r+0xc8>
 800a210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a212:	07d8      	lsls	r0, r3, #31
 800a214:	d405      	bmi.n	800a222 <_fread_r+0xb6>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	0599      	lsls	r1, r3, #22
 800a21a:	d402      	bmi.n	800a222 <_fread_r+0xb6>
 800a21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21e:	f000 fac2 	bl	800a7a6 <__retarget_lock_release_recursive>
 800a222:	eb05 060b 	add.w	r6, r5, fp
 800a226:	1bf6      	subs	r6, r6, r7
 800a228:	fbb6 f6fa 	udiv	r6, r6, sl
 800a22c:	4630      	mov	r0, r6
 800a22e:	b003      	add	sp, #12
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	461f      	mov	r7, r3
 800a236:	e7c3      	b.n	800a1c0 <_fread_r+0x54>
 800a238:	461e      	mov	r6, r3
 800a23a:	e7f7      	b.n	800a22c <_fread_r+0xc0>

0800a23c <_malloc_trim_r>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	4606      	mov	r6, r0
 800a242:	2008      	movs	r0, #8
 800a244:	460c      	mov	r4, r1
 800a246:	f003 feb9 	bl	800dfbc <sysconf>
 800a24a:	4f23      	ldr	r7, [pc, #140]	; (800a2d8 <_malloc_trim_r+0x9c>)
 800a24c:	4680      	mov	r8, r0
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 fdb6 	bl	800adc0 <__malloc_lock>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	685d      	ldr	r5, [r3, #4]
 800a258:	f025 0503 	bic.w	r5, r5, #3
 800a25c:	1b2c      	subs	r4, r5, r4
 800a25e:	3c11      	subs	r4, #17
 800a260:	4444      	add	r4, r8
 800a262:	fbb4 f4f8 	udiv	r4, r4, r8
 800a266:	3c01      	subs	r4, #1
 800a268:	fb08 f404 	mul.w	r4, r8, r4
 800a26c:	45a0      	cmp	r8, r4
 800a26e:	dd05      	ble.n	800a27c <_malloc_trim_r+0x40>
 800a270:	4630      	mov	r0, r6
 800a272:	f000 fdab 	bl	800adcc <__malloc_unlock>
 800a276:	2000      	movs	r0, #0
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	2100      	movs	r1, #0
 800a27e:	4630      	mov	r0, r6
 800a280:	f001 fc8a 	bl	800bb98 <_sbrk_r>
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	442b      	add	r3, r5
 800a288:	4298      	cmp	r0, r3
 800a28a:	d1f1      	bne.n	800a270 <_malloc_trim_r+0x34>
 800a28c:	4261      	negs	r1, r4
 800a28e:	4630      	mov	r0, r6
 800a290:	f001 fc82 	bl	800bb98 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d110      	bne.n	800a2ba <_malloc_trim_r+0x7e>
 800a298:	2100      	movs	r1, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	f001 fc7c 	bl	800bb98 <_sbrk_r>
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	1a83      	subs	r3, r0, r2
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	dde3      	ble.n	800a270 <_malloc_trim_r+0x34>
 800a2a8:	490c      	ldr	r1, [pc, #48]	; (800a2dc <_malloc_trim_r+0xa0>)
 800a2aa:	6809      	ldr	r1, [r1, #0]
 800a2ac:	1a40      	subs	r0, r0, r1
 800a2ae:	490c      	ldr	r1, [pc, #48]	; (800a2e0 <_malloc_trim_r+0xa4>)
 800a2b0:	f043 0301 	orr.w	r3, r3, #1
 800a2b4:	6008      	str	r0, [r1, #0]
 800a2b6:	6053      	str	r3, [r2, #4]
 800a2b8:	e7da      	b.n	800a270 <_malloc_trim_r+0x34>
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	4a08      	ldr	r2, [pc, #32]	; (800a2e0 <_malloc_trim_r+0xa4>)
 800a2be:	1b2d      	subs	r5, r5, r4
 800a2c0:	f045 0501 	orr.w	r5, r5, #1
 800a2c4:	605d      	str	r5, [r3, #4]
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	1b1b      	subs	r3, r3, r4
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	f000 fd7d 	bl	800adcc <__malloc_unlock>
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	e7d0      	b.n	800a278 <_malloc_trim_r+0x3c>
 800a2d6:	bf00      	nop
 800a2d8:	200005a8 	.word	0x200005a8
 800a2dc:	200009b0 	.word	0x200009b0
 800a2e0:	20000b10 	.word	0x20000b10

0800a2e4 <_free_r>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	f000 80b1 	beq.w	800a452 <_free_r+0x16e>
 800a2f0:	f000 fd66 	bl	800adc0 <__malloc_lock>
 800a2f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a2f8:	4856      	ldr	r0, [pc, #344]	; (800a454 <_free_r+0x170>)
 800a2fa:	f022 0401 	bic.w	r4, r2, #1
 800a2fe:	f1a7 0308 	sub.w	r3, r7, #8
 800a302:	eb03 0c04 	add.w	ip, r3, r4
 800a306:	6881      	ldr	r1, [r0, #8]
 800a308:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a30c:	4561      	cmp	r1, ip
 800a30e:	f026 0603 	bic.w	r6, r6, #3
 800a312:	f002 0201 	and.w	r2, r2, #1
 800a316:	d11b      	bne.n	800a350 <_free_r+0x6c>
 800a318:	4434      	add	r4, r6
 800a31a:	b93a      	cbnz	r2, 800a32c <_free_r+0x48>
 800a31c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	4414      	add	r4, r2
 800a324:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a328:	60ca      	str	r2, [r1, #12]
 800a32a:	6091      	str	r1, [r2, #8]
 800a32c:	f044 0201 	orr.w	r2, r4, #1
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	6083      	str	r3, [r0, #8]
 800a334:	4b48      	ldr	r3, [pc, #288]	; (800a458 <_free_r+0x174>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d804      	bhi.n	800a346 <_free_r+0x62>
 800a33c:	4b47      	ldr	r3, [pc, #284]	; (800a45c <_free_r+0x178>)
 800a33e:	4628      	mov	r0, r5
 800a340:	6819      	ldr	r1, [r3, #0]
 800a342:	f7ff ff7b 	bl	800a23c <_malloc_trim_r>
 800a346:	4628      	mov	r0, r5
 800a348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a34c:	f000 bd3e 	b.w	800adcc <__malloc_unlock>
 800a350:	f8cc 6004 	str.w	r6, [ip, #4]
 800a354:	2a00      	cmp	r2, #0
 800a356:	d138      	bne.n	800a3ca <_free_r+0xe6>
 800a358:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a35c:	1a5b      	subs	r3, r3, r1
 800a35e:	440c      	add	r4, r1
 800a360:	6899      	ldr	r1, [r3, #8]
 800a362:	f100 0708 	add.w	r7, r0, #8
 800a366:	42b9      	cmp	r1, r7
 800a368:	d031      	beq.n	800a3ce <_free_r+0xea>
 800a36a:	68df      	ldr	r7, [r3, #12]
 800a36c:	60cf      	str	r7, [r1, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	eb0c 0106 	add.w	r1, ip, r6
 800a374:	6849      	ldr	r1, [r1, #4]
 800a376:	07c9      	lsls	r1, r1, #31
 800a378:	d40b      	bmi.n	800a392 <_free_r+0xae>
 800a37a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a37e:	4434      	add	r4, r6
 800a380:	bb3a      	cbnz	r2, 800a3d2 <_free_r+0xee>
 800a382:	4e37      	ldr	r6, [pc, #220]	; (800a460 <_free_r+0x17c>)
 800a384:	42b1      	cmp	r1, r6
 800a386:	d124      	bne.n	800a3d2 <_free_r+0xee>
 800a388:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a38c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a390:	2201      	movs	r2, #1
 800a392:	f044 0101 	orr.w	r1, r4, #1
 800a396:	6059      	str	r1, [r3, #4]
 800a398:	511c      	str	r4, [r3, r4]
 800a39a:	2a00      	cmp	r2, #0
 800a39c:	d1d3      	bne.n	800a346 <_free_r+0x62>
 800a39e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a3a2:	d21b      	bcs.n	800a3dc <_free_r+0xf8>
 800a3a4:	0961      	lsrs	r1, r4, #5
 800a3a6:	08e2      	lsrs	r2, r4, #3
 800a3a8:	2401      	movs	r4, #1
 800a3aa:	408c      	lsls	r4, r1
 800a3ac:	6841      	ldr	r1, [r0, #4]
 800a3ae:	3201      	adds	r2, #1
 800a3b0:	430c      	orrs	r4, r1
 800a3b2:	6044      	str	r4, [r0, #4]
 800a3b4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a3b8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a3bc:	3908      	subs	r1, #8
 800a3be:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a3c2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a3c6:	60e3      	str	r3, [r4, #12]
 800a3c8:	e7bd      	b.n	800a346 <_free_r+0x62>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	e7d0      	b.n	800a370 <_free_r+0x8c>
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	e7ce      	b.n	800a370 <_free_r+0x8c>
 800a3d2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a3d6:	60ce      	str	r6, [r1, #12]
 800a3d8:	60b1      	str	r1, [r6, #8]
 800a3da:	e7da      	b.n	800a392 <_free_r+0xae>
 800a3dc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a3e0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a3e4:	d214      	bcs.n	800a410 <_free_r+0x12c>
 800a3e6:	09a2      	lsrs	r2, r4, #6
 800a3e8:	3238      	adds	r2, #56	; 0x38
 800a3ea:	1c51      	adds	r1, r2, #1
 800a3ec:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a3f0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a3f4:	428e      	cmp	r6, r1
 800a3f6:	d125      	bne.n	800a444 <_free_r+0x160>
 800a3f8:	2401      	movs	r4, #1
 800a3fa:	1092      	asrs	r2, r2, #2
 800a3fc:	fa04 f202 	lsl.w	r2, r4, r2
 800a400:	6844      	ldr	r4, [r0, #4]
 800a402:	4322      	orrs	r2, r4
 800a404:	6042      	str	r2, [r0, #4]
 800a406:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a40a:	60b3      	str	r3, [r6, #8]
 800a40c:	60cb      	str	r3, [r1, #12]
 800a40e:	e79a      	b.n	800a346 <_free_r+0x62>
 800a410:	2a14      	cmp	r2, #20
 800a412:	d801      	bhi.n	800a418 <_free_r+0x134>
 800a414:	325b      	adds	r2, #91	; 0x5b
 800a416:	e7e8      	b.n	800a3ea <_free_r+0x106>
 800a418:	2a54      	cmp	r2, #84	; 0x54
 800a41a:	d802      	bhi.n	800a422 <_free_r+0x13e>
 800a41c:	0b22      	lsrs	r2, r4, #12
 800a41e:	326e      	adds	r2, #110	; 0x6e
 800a420:	e7e3      	b.n	800a3ea <_free_r+0x106>
 800a422:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a426:	d802      	bhi.n	800a42e <_free_r+0x14a>
 800a428:	0be2      	lsrs	r2, r4, #15
 800a42a:	3277      	adds	r2, #119	; 0x77
 800a42c:	e7dd      	b.n	800a3ea <_free_r+0x106>
 800a42e:	f240 5154 	movw	r1, #1364	; 0x554
 800a432:	428a      	cmp	r2, r1
 800a434:	bf9a      	itte	ls
 800a436:	0ca2      	lsrls	r2, r4, #18
 800a438:	327c      	addls	r2, #124	; 0x7c
 800a43a:	227e      	movhi	r2, #126	; 0x7e
 800a43c:	e7d5      	b.n	800a3ea <_free_r+0x106>
 800a43e:	6889      	ldr	r1, [r1, #8]
 800a440:	428e      	cmp	r6, r1
 800a442:	d004      	beq.n	800a44e <_free_r+0x16a>
 800a444:	684a      	ldr	r2, [r1, #4]
 800a446:	f022 0203 	bic.w	r2, r2, #3
 800a44a:	42a2      	cmp	r2, r4
 800a44c:	d8f7      	bhi.n	800a43e <_free_r+0x15a>
 800a44e:	68ce      	ldr	r6, [r1, #12]
 800a450:	e7d9      	b.n	800a406 <_free_r+0x122>
 800a452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a454:	200005a8 	.word	0x200005a8
 800a458:	200009b4 	.word	0x200009b4
 800a45c:	20000b40 	.word	0x20000b40
 800a460:	200005b0 	.word	0x200005b0

0800a464 <__sfvwrite_r>:
 800a464:	6893      	ldr	r3, [r2, #8]
 800a466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	4606      	mov	r6, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	4690      	mov	r8, r2
 800a470:	b91b      	cbnz	r3, 800a47a <__sfvwrite_r+0x16>
 800a472:	2000      	movs	r0, #0
 800a474:	b003      	add	sp, #12
 800a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47a:	898b      	ldrh	r3, [r1, #12]
 800a47c:	0718      	lsls	r0, r3, #28
 800a47e:	d550      	bpl.n	800a522 <__sfvwrite_r+0xbe>
 800a480:	690b      	ldr	r3, [r1, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d04d      	beq.n	800a522 <__sfvwrite_r+0xbe>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f8d8 7000 	ldr.w	r7, [r8]
 800a48c:	f013 0902 	ands.w	r9, r3, #2
 800a490:	d16c      	bne.n	800a56c <__sfvwrite_r+0x108>
 800a492:	f013 0301 	ands.w	r3, r3, #1
 800a496:	f000 809c 	beq.w	800a5d2 <__sfvwrite_r+0x16e>
 800a49a:	4648      	mov	r0, r9
 800a49c:	46ca      	mov	sl, r9
 800a49e:	46cb      	mov	fp, r9
 800a4a0:	f1bb 0f00 	cmp.w	fp, #0
 800a4a4:	f000 8103 	beq.w	800a6ae <__sfvwrite_r+0x24a>
 800a4a8:	b950      	cbnz	r0, 800a4c0 <__sfvwrite_r+0x5c>
 800a4aa:	465a      	mov	r2, fp
 800a4ac:	210a      	movs	r1, #10
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	f7f5 fece 	bl	8000250 <memchr>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f000 80ff 	beq.w	800a6b8 <__sfvwrite_r+0x254>
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	eba0 090a 	sub.w	r9, r0, sl
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	6921      	ldr	r1, [r4, #16]
 800a4c4:	6963      	ldr	r3, [r4, #20]
 800a4c6:	45d9      	cmp	r9, fp
 800a4c8:	464a      	mov	r2, r9
 800a4ca:	bf28      	it	cs
 800a4cc:	465a      	movcs	r2, fp
 800a4ce:	4288      	cmp	r0, r1
 800a4d0:	f240 80f5 	bls.w	800a6be <__sfvwrite_r+0x25a>
 800a4d4:	68a5      	ldr	r5, [r4, #8]
 800a4d6:	441d      	add	r5, r3
 800a4d8:	42aa      	cmp	r2, r5
 800a4da:	f340 80f0 	ble.w	800a6be <__sfvwrite_r+0x25a>
 800a4de:	4651      	mov	r1, sl
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	f000 fc53 	bl	800ad8c <memmove>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	442b      	add	r3, r5
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f7ff fd82 	bl	8009ff8 <_fflush_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d167      	bne.n	800a5c8 <__sfvwrite_r+0x164>
 800a4f8:	ebb9 0905 	subs.w	r9, r9, r5
 800a4fc:	f040 80f7 	bne.w	800a6ee <__sfvwrite_r+0x28a>
 800a500:	4621      	mov	r1, r4
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff fd78 	bl	8009ff8 <_fflush_r>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d15d      	bne.n	800a5c8 <__sfvwrite_r+0x164>
 800a50c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a510:	44aa      	add	sl, r5
 800a512:	ebab 0b05 	sub.w	fp, fp, r5
 800a516:	1b55      	subs	r5, r2, r5
 800a518:	f8c8 5008 	str.w	r5, [r8, #8]
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	d1bf      	bne.n	800a4a0 <__sfvwrite_r+0x3c>
 800a520:	e7a7      	b.n	800a472 <__sfvwrite_r+0xe>
 800a522:	4621      	mov	r1, r4
 800a524:	4630      	mov	r0, r6
 800a526:	f7fe fe8d 	bl	8009244 <__swsetup_r>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d0ab      	beq.n	800a486 <__sfvwrite_r+0x22>
 800a52e:	f04f 30ff 	mov.w	r0, #4294967295
 800a532:	e79f      	b.n	800a474 <__sfvwrite_r+0x10>
 800a534:	e9d7 b900 	ldrd	fp, r9, [r7]
 800a538:	3708      	adds	r7, #8
 800a53a:	f1b9 0f00 	cmp.w	r9, #0
 800a53e:	d0f9      	beq.n	800a534 <__sfvwrite_r+0xd0>
 800a540:	45d1      	cmp	r9, sl
 800a542:	464b      	mov	r3, r9
 800a544:	69e1      	ldr	r1, [r4, #28]
 800a546:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a548:	bf28      	it	cs
 800a54a:	4653      	movcs	r3, sl
 800a54c:	465a      	mov	r2, fp
 800a54e:	4630      	mov	r0, r6
 800a550:	47a8      	blx	r5
 800a552:	2800      	cmp	r0, #0
 800a554:	dd38      	ble.n	800a5c8 <__sfvwrite_r+0x164>
 800a556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a55a:	4483      	add	fp, r0
 800a55c:	eba9 0900 	sub.w	r9, r9, r0
 800a560:	1a18      	subs	r0, r3, r0
 800a562:	f8c8 0008 	str.w	r0, [r8, #8]
 800a566:	2800      	cmp	r0, #0
 800a568:	d1e7      	bne.n	800a53a <__sfvwrite_r+0xd6>
 800a56a:	e782      	b.n	800a472 <__sfvwrite_r+0xe>
 800a56c:	f04f 0b00 	mov.w	fp, #0
 800a570:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a6f4 <__sfvwrite_r+0x290>
 800a574:	46d9      	mov	r9, fp
 800a576:	e7e0      	b.n	800a53a <__sfvwrite_r+0xd6>
 800a578:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800a57c:	3708      	adds	r7, #8
 800a57e:	f1ba 0f00 	cmp.w	sl, #0
 800a582:	d0f9      	beq.n	800a578 <__sfvwrite_r+0x114>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	68a2      	ldr	r2, [r4, #8]
 800a58a:	0599      	lsls	r1, r3, #22
 800a58c:	d563      	bpl.n	800a656 <__sfvwrite_r+0x1f2>
 800a58e:	4552      	cmp	r2, sl
 800a590:	d836      	bhi.n	800a600 <__sfvwrite_r+0x19c>
 800a592:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a596:	d033      	beq.n	800a600 <__sfvwrite_r+0x19c>
 800a598:	6921      	ldr	r1, [r4, #16]
 800a59a:	6965      	ldr	r5, [r4, #20]
 800a59c:	eba0 0b01 	sub.w	fp, r0, r1
 800a5a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5a8:	f10b 0201 	add.w	r2, fp, #1
 800a5ac:	106d      	asrs	r5, r5, #1
 800a5ae:	4452      	add	r2, sl
 800a5b0:	4295      	cmp	r5, r2
 800a5b2:	bf38      	it	cc
 800a5b4:	4615      	movcc	r5, r2
 800a5b6:	055b      	lsls	r3, r3, #21
 800a5b8:	d53d      	bpl.n	800a636 <__sfvwrite_r+0x1d2>
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f000 f96f 	bl	800a8a0 <_malloc_r>
 800a5c2:	b948      	cbnz	r0, 800a5d8 <__sfvwrite_r+0x174>
 800a5c4:	230c      	movs	r3, #12
 800a5c6:	6033      	str	r3, [r6, #0]
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	e7ad      	b.n	800a52e <__sfvwrite_r+0xca>
 800a5d2:	4699      	mov	r9, r3
 800a5d4:	469a      	mov	sl, r3
 800a5d6:	e7d2      	b.n	800a57e <__sfvwrite_r+0x11a>
 800a5d8:	465a      	mov	r2, fp
 800a5da:	6921      	ldr	r1, [r4, #16]
 800a5dc:	9001      	str	r0, [sp, #4]
 800a5de:	f000 fbc7 	bl	800ad70 <memcpy>
 800a5e2:	89a2      	ldrh	r2, [r4, #12]
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a5ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5ee:	81a2      	strh	r2, [r4, #12]
 800a5f0:	6123      	str	r3, [r4, #16]
 800a5f2:	6165      	str	r5, [r4, #20]
 800a5f4:	445b      	add	r3, fp
 800a5f6:	eba5 050b 	sub.w	r5, r5, fp
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	4652      	mov	r2, sl
 800a5fe:	60a5      	str	r5, [r4, #8]
 800a600:	4552      	cmp	r2, sl
 800a602:	bf28      	it	cs
 800a604:	4652      	movcs	r2, sl
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	9201      	str	r2, [sp, #4]
 800a60a:	4649      	mov	r1, r9
 800a60c:	f000 fbbe 	bl	800ad8c <memmove>
 800a610:	68a3      	ldr	r3, [r4, #8]
 800a612:	9a01      	ldr	r2, [sp, #4]
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	60a3      	str	r3, [r4, #8]
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	441a      	add	r2, r3
 800a61c:	4655      	mov	r5, sl
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a624:	44a9      	add	r9, r5
 800a626:	ebaa 0a05 	sub.w	sl, sl, r5
 800a62a:	1b45      	subs	r5, r0, r5
 800a62c:	f8c8 5008 	str.w	r5, [r8, #8]
 800a630:	2d00      	cmp	r5, #0
 800a632:	d1a4      	bne.n	800a57e <__sfvwrite_r+0x11a>
 800a634:	e71d      	b.n	800a472 <__sfvwrite_r+0xe>
 800a636:	462a      	mov	r2, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f001 f845 	bl	800b6c8 <_realloc_r>
 800a63e:	4603      	mov	r3, r0
 800a640:	2800      	cmp	r0, #0
 800a642:	d1d5      	bne.n	800a5f0 <__sfvwrite_r+0x18c>
 800a644:	6921      	ldr	r1, [r4, #16]
 800a646:	4630      	mov	r0, r6
 800a648:	f7ff fe4c 	bl	800a2e4 <_free_r>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	e7b6      	b.n	800a5c4 <__sfvwrite_r+0x160>
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	4283      	cmp	r3, r0
 800a65a:	d302      	bcc.n	800a662 <__sfvwrite_r+0x1fe>
 800a65c:	6961      	ldr	r1, [r4, #20]
 800a65e:	4551      	cmp	r1, sl
 800a660:	d915      	bls.n	800a68e <__sfvwrite_r+0x22a>
 800a662:	4552      	cmp	r2, sl
 800a664:	bf28      	it	cs
 800a666:	4652      	movcs	r2, sl
 800a668:	4649      	mov	r1, r9
 800a66a:	4615      	mov	r5, r2
 800a66c:	f000 fb8e 	bl	800ad8c <memmove>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	1b5b      	subs	r3, r3, r5
 800a676:	442a      	add	r2, r5
 800a678:	60a3      	str	r3, [r4, #8]
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1cf      	bne.n	800a620 <__sfvwrite_r+0x1bc>
 800a680:	4621      	mov	r1, r4
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff fcb8 	bl	8009ff8 <_fflush_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0c9      	beq.n	800a620 <__sfvwrite_r+0x1bc>
 800a68c:	e79c      	b.n	800a5c8 <__sfvwrite_r+0x164>
 800a68e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a692:	459a      	cmp	sl, r3
 800a694:	bf38      	it	cc
 800a696:	4653      	movcc	r3, sl
 800a698:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a69a:	fb93 f3f1 	sdiv	r3, r3, r1
 800a69e:	464a      	mov	r2, r9
 800a6a0:	434b      	muls	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	69e1      	ldr	r1, [r4, #28]
 800a6a6:	47a8      	blx	r5
 800a6a8:	1e05      	subs	r5, r0, #0
 800a6aa:	dcb9      	bgt.n	800a620 <__sfvwrite_r+0x1bc>
 800a6ac:	e78c      	b.n	800a5c8 <__sfvwrite_r+0x164>
 800a6ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	e6f3      	b.n	800a4a0 <__sfvwrite_r+0x3c>
 800a6b8:	f10b 0901 	add.w	r9, fp, #1
 800a6bc:	e700      	b.n	800a4c0 <__sfvwrite_r+0x5c>
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	dc08      	bgt.n	800a6d4 <__sfvwrite_r+0x270>
 800a6c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a6c4:	69e1      	ldr	r1, [r4, #28]
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	47a8      	blx	r5
 800a6cc:	1e05      	subs	r5, r0, #0
 800a6ce:	f73f af13 	bgt.w	800a4f8 <__sfvwrite_r+0x94>
 800a6d2:	e779      	b.n	800a5c8 <__sfvwrite_r+0x164>
 800a6d4:	4651      	mov	r1, sl
 800a6d6:	9201      	str	r2, [sp, #4]
 800a6d8:	f000 fb58 	bl	800ad8c <memmove>
 800a6dc:	9a01      	ldr	r2, [sp, #4]
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	1a9b      	subs	r3, r3, r2
 800a6e2:	60a3      	str	r3, [r4, #8]
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	4615      	mov	r5, r2
 800a6ec:	e704      	b.n	800a4f8 <__sfvwrite_r+0x94>
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	e70c      	b.n	800a50c <__sfvwrite_r+0xa8>
 800a6f2:	bf00      	nop
 800a6f4:	7ffffc00 	.word	0x7ffffc00

0800a6f8 <_fwalk>:
 800a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a702:	2600      	movs	r6, #0
 800a704:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800a708:	f1b8 0801 	subs.w	r8, r8, #1
 800a70c:	d505      	bpl.n	800a71a <_fwalk+0x22>
 800a70e:	6824      	ldr	r4, [r4, #0]
 800a710:	2c00      	cmp	r4, #0
 800a712:	d1f7      	bne.n	800a704 <_fwalk+0xc>
 800a714:	4630      	mov	r0, r6
 800a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a71a:	89ab      	ldrh	r3, [r5, #12]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d906      	bls.n	800a72e <_fwalk+0x36>
 800a720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a724:	3301      	adds	r3, #1
 800a726:	d002      	beq.n	800a72e <_fwalk+0x36>
 800a728:	4628      	mov	r0, r5
 800a72a:	47b8      	blx	r7
 800a72c:	4306      	orrs	r6, r0
 800a72e:	3568      	adds	r5, #104	; 0x68
 800a730:	e7ea      	b.n	800a708 <_fwalk+0x10>

0800a732 <_fwalk_reent>:
 800a732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a736:	4606      	mov	r6, r0
 800a738:	4688      	mov	r8, r1
 800a73a:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a73e:	2700      	movs	r7, #0
 800a740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a744:	f1b9 0901 	subs.w	r9, r9, #1
 800a748:	d505      	bpl.n	800a756 <_fwalk_reent+0x24>
 800a74a:	6824      	ldr	r4, [r4, #0]
 800a74c:	2c00      	cmp	r4, #0
 800a74e:	d1f7      	bne.n	800a740 <_fwalk_reent+0xe>
 800a750:	4638      	mov	r0, r7
 800a752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d907      	bls.n	800a76c <_fwalk_reent+0x3a>
 800a75c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a760:	3301      	adds	r3, #1
 800a762:	d003      	beq.n	800a76c <_fwalk_reent+0x3a>
 800a764:	4629      	mov	r1, r5
 800a766:	4630      	mov	r0, r6
 800a768:	47c0      	blx	r8
 800a76a:	4307      	orrs	r7, r0
 800a76c:	3568      	adds	r5, #104	; 0x68
 800a76e:	e7e9      	b.n	800a744 <_fwalk_reent+0x12>

0800a770 <iswspace>:
 800a770:	2100      	movs	r1, #0
 800a772:	f000 b801 	b.w	800a778 <iswspace_l>
	...

0800a778 <iswspace_l>:
 800a778:	28ff      	cmp	r0, #255	; 0xff
 800a77a:	bf9d      	ittte	ls
 800a77c:	4b02      	ldrls	r3, [pc, #8]	; (800a788 <iswspace_l+0x10>)
 800a77e:	5cc0      	ldrbls	r0, [r0, r3]
 800a780:	f000 0008 	andls.w	r0, r0, #8
 800a784:	2000      	movhi	r0, #0
 800a786:	4770      	bx	lr
 800a788:	08010dc5 	.word	0x08010dc5

0800a78c <__locale_mb_cur_max>:
 800a78c:	4b01      	ldr	r3, [pc, #4]	; (800a794 <__locale_mb_cur_max+0x8>)
 800a78e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a792:	4770      	bx	lr
 800a794:	2000043c 	.word	0x2000043c

0800a798 <_localeconv_r>:
 800a798:	4800      	ldr	r0, [pc, #0]	; (800a79c <_localeconv_r+0x4>)
 800a79a:	4770      	bx	lr
 800a79c:	2000052c 	.word	0x2000052c

0800a7a0 <__retarget_lock_init_recursive>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__retarget_lock_close_recursive>:
 800a7a2:	4770      	bx	lr

0800a7a4 <__retarget_lock_acquire_recursive>:
 800a7a4:	4770      	bx	lr

0800a7a6 <__retarget_lock_release_recursive>:
 800a7a6:	4770      	bx	lr

0800a7a8 <__swhatbuf_r>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	460e      	mov	r6, r1
 800a7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	b096      	sub	sp, #88	; 0x58
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	461d      	mov	r5, r3
 800a7b8:	da0a      	bge.n	800a7d0 <__swhatbuf_r+0x28>
 800a7ba:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	d116      	bne.n	800a7f6 <__swhatbuf_r+0x4e>
 800a7c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	e015      	b.n	800a7fc <__swhatbuf_r+0x54>
 800a7d0:	466a      	mov	r2, sp
 800a7d2:	f004 fb6d 	bl	800eeb0 <_fstat_r>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	dbef      	blt.n	800a7ba <__swhatbuf_r+0x12>
 800a7da:	9a01      	ldr	r2, [sp, #4]
 800a7dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7e4:	425a      	negs	r2, r3
 800a7e6:	415a      	adcs	r2, r3
 800a7e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	e002      	b.n	800a7fc <__swhatbuf_r+0x54>
 800a7f6:	2240      	movs	r2, #64	; 0x40
 800a7f8:	6022      	str	r2, [r4, #0]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	b016      	add	sp, #88	; 0x58
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}

0800a800 <__smakebuf_r>:
 800a800:	898b      	ldrh	r3, [r1, #12]
 800a802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a804:	079d      	lsls	r5, r3, #30
 800a806:	4606      	mov	r6, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	d507      	bpl.n	800a81c <__smakebuf_r+0x1c>
 800a80c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	2301      	movs	r3, #1
 800a816:	6163      	str	r3, [r4, #20]
 800a818:	b002      	add	sp, #8
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	ab01      	add	r3, sp, #4
 800a81e:	466a      	mov	r2, sp
 800a820:	f7ff ffc2 	bl	800a7a8 <__swhatbuf_r>
 800a824:	9900      	ldr	r1, [sp, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f839 	bl	800a8a0 <_malloc_r>
 800a82e:	b948      	cbnz	r0, 800a844 <__smakebuf_r+0x44>
 800a830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d4ef      	bmi.n	800a818 <__smakebuf_r+0x18>
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	f043 0302 	orr.w	r3, r3, #2
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	e7e3      	b.n	800a80c <__smakebuf_r+0xc>
 800a844:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <__smakebuf_r+0x7c>)
 800a846:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	6020      	str	r0, [r4, #0]
 800a84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	9b00      	ldr	r3, [sp, #0]
 800a854:	6163      	str	r3, [r4, #20]
 800a856:	9b01      	ldr	r3, [sp, #4]
 800a858:	6120      	str	r0, [r4, #16]
 800a85a:	b15b      	cbz	r3, 800a874 <__smakebuf_r+0x74>
 800a85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a860:	4630      	mov	r0, r6
 800a862:	f004 fea7 	bl	800f5b4 <_isatty_r>
 800a866:	b128      	cbz	r0, 800a874 <__smakebuf_r+0x74>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f023 0303 	bic.w	r3, r3, #3
 800a86e:	f043 0301 	orr.w	r3, r3, #1
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	89a0      	ldrh	r0, [r4, #12]
 800a876:	4305      	orrs	r5, r0
 800a878:	81a5      	strh	r5, [r4, #12]
 800a87a:	e7cd      	b.n	800a818 <__smakebuf_r+0x18>
 800a87c:	0800a0b9 	.word	0x0800a0b9

0800a880 <malloc>:
 800a880:	4b02      	ldr	r3, [pc, #8]	; (800a88c <malloc+0xc>)
 800a882:	4601      	mov	r1, r0
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	f000 b80b 	b.w	800a8a0 <_malloc_r>
 800a88a:	bf00      	nop
 800a88c:	2000000c 	.word	0x2000000c

0800a890 <free>:
 800a890:	4b02      	ldr	r3, [pc, #8]	; (800a89c <free+0xc>)
 800a892:	4601      	mov	r1, r0
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	f7ff bd25 	b.w	800a2e4 <_free_r>
 800a89a:	bf00      	nop
 800a89c:	2000000c 	.word	0x2000000c

0800a8a0 <_malloc_r>:
 800a8a0:	f101 030b 	add.w	r3, r1, #11
 800a8a4:	2b16      	cmp	r3, #22
 800a8a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	d906      	bls.n	800a8bc <_malloc_r+0x1c>
 800a8ae:	f033 0707 	bics.w	r7, r3, #7
 800a8b2:	d504      	bpl.n	800a8be <_malloc_r+0x1e>
 800a8b4:	230c      	movs	r3, #12
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	e1a5      	b.n	800ac08 <_malloc_r+0x368>
 800a8bc:	2710      	movs	r7, #16
 800a8be:	42b9      	cmp	r1, r7
 800a8c0:	d8f8      	bhi.n	800a8b4 <_malloc_r+0x14>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 fa7c 	bl	800adc0 <__malloc_lock>
 800a8c8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a8cc:	4eb0      	ldr	r6, [pc, #704]	; (800ab90 <_malloc_r+0x2f0>)
 800a8ce:	d237      	bcs.n	800a940 <_malloc_r+0xa0>
 800a8d0:	f107 0208 	add.w	r2, r7, #8
 800a8d4:	4432      	add	r2, r6
 800a8d6:	f1a2 0108 	sub.w	r1, r2, #8
 800a8da:	6854      	ldr	r4, [r2, #4]
 800a8dc:	428c      	cmp	r4, r1
 800a8de:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a8e2:	d102      	bne.n	800a8ea <_malloc_r+0x4a>
 800a8e4:	68d4      	ldr	r4, [r2, #12]
 800a8e6:	42a2      	cmp	r2, r4
 800a8e8:	d010      	beq.n	800a90c <_malloc_r+0x6c>
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	60ca      	str	r2, [r1, #12]
 800a8f6:	4423      	add	r3, r4
 800a8f8:	6091      	str	r1, [r2, #8]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	f042 0201 	orr.w	r2, r2, #1
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	4628      	mov	r0, r5
 800a904:	f000 fa62 	bl	800adcc <__malloc_unlock>
 800a908:	3408      	adds	r4, #8
 800a90a:	e17d      	b.n	800ac08 <_malloc_r+0x368>
 800a90c:	3302      	adds	r3, #2
 800a90e:	6934      	ldr	r4, [r6, #16]
 800a910:	49a0      	ldr	r1, [pc, #640]	; (800ab94 <_malloc_r+0x2f4>)
 800a912:	428c      	cmp	r4, r1
 800a914:	d077      	beq.n	800aa06 <_malloc_r+0x166>
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	f022 0c03 	bic.w	ip, r2, #3
 800a91c:	ebac 0007 	sub.w	r0, ip, r7
 800a920:	280f      	cmp	r0, #15
 800a922:	dd48      	ble.n	800a9b6 <_malloc_r+0x116>
 800a924:	19e2      	adds	r2, r4, r7
 800a926:	f040 0301 	orr.w	r3, r0, #1
 800a92a:	f047 0701 	orr.w	r7, r7, #1
 800a92e:	6067      	str	r7, [r4, #4]
 800a930:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a934:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a938:	6053      	str	r3, [r2, #4]
 800a93a:	f844 000c 	str.w	r0, [r4, ip]
 800a93e:	e7e0      	b.n	800a902 <_malloc_r+0x62>
 800a940:	0a7b      	lsrs	r3, r7, #9
 800a942:	d02a      	beq.n	800a99a <_malloc_r+0xfa>
 800a944:	2b04      	cmp	r3, #4
 800a946:	d812      	bhi.n	800a96e <_malloc_r+0xce>
 800a948:	09bb      	lsrs	r3, r7, #6
 800a94a:	3338      	adds	r3, #56	; 0x38
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a952:	f1a2 0c08 	sub.w	ip, r2, #8
 800a956:	6854      	ldr	r4, [r2, #4]
 800a958:	4564      	cmp	r4, ip
 800a95a:	d006      	beq.n	800a96a <_malloc_r+0xca>
 800a95c:	6862      	ldr	r2, [r4, #4]
 800a95e:	f022 0203 	bic.w	r2, r2, #3
 800a962:	1bd0      	subs	r0, r2, r7
 800a964:	280f      	cmp	r0, #15
 800a966:	dd1c      	ble.n	800a9a2 <_malloc_r+0x102>
 800a968:	3b01      	subs	r3, #1
 800a96a:	3301      	adds	r3, #1
 800a96c:	e7cf      	b.n	800a90e <_malloc_r+0x6e>
 800a96e:	2b14      	cmp	r3, #20
 800a970:	d801      	bhi.n	800a976 <_malloc_r+0xd6>
 800a972:	335b      	adds	r3, #91	; 0x5b
 800a974:	e7ea      	b.n	800a94c <_malloc_r+0xac>
 800a976:	2b54      	cmp	r3, #84	; 0x54
 800a978:	d802      	bhi.n	800a980 <_malloc_r+0xe0>
 800a97a:	0b3b      	lsrs	r3, r7, #12
 800a97c:	336e      	adds	r3, #110	; 0x6e
 800a97e:	e7e5      	b.n	800a94c <_malloc_r+0xac>
 800a980:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a984:	d802      	bhi.n	800a98c <_malloc_r+0xec>
 800a986:	0bfb      	lsrs	r3, r7, #15
 800a988:	3377      	adds	r3, #119	; 0x77
 800a98a:	e7df      	b.n	800a94c <_malloc_r+0xac>
 800a98c:	f240 5254 	movw	r2, #1364	; 0x554
 800a990:	4293      	cmp	r3, r2
 800a992:	d804      	bhi.n	800a99e <_malloc_r+0xfe>
 800a994:	0cbb      	lsrs	r3, r7, #18
 800a996:	337c      	adds	r3, #124	; 0x7c
 800a998:	e7d8      	b.n	800a94c <_malloc_r+0xac>
 800a99a:	233f      	movs	r3, #63	; 0x3f
 800a99c:	e7d6      	b.n	800a94c <_malloc_r+0xac>
 800a99e:	237e      	movs	r3, #126	; 0x7e
 800a9a0:	e7d4      	b.n	800a94c <_malloc_r+0xac>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	68e1      	ldr	r1, [r4, #12]
 800a9a6:	db04      	blt.n	800a9b2 <_malloc_r+0x112>
 800a9a8:	68a3      	ldr	r3, [r4, #8]
 800a9aa:	60d9      	str	r1, [r3, #12]
 800a9ac:	608b      	str	r3, [r1, #8]
 800a9ae:	18a3      	adds	r3, r4, r2
 800a9b0:	e7a3      	b.n	800a8fa <_malloc_r+0x5a>
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	e7d0      	b.n	800a958 <_malloc_r+0xb8>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a9bc:	db07      	blt.n	800a9ce <_malloc_r+0x12e>
 800a9be:	44a4      	add	ip, r4
 800a9c0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	f8cc 3004 	str.w	r3, [ip, #4]
 800a9cc:	e799      	b.n	800a902 <_malloc_r+0x62>
 800a9ce:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a9d2:	6870      	ldr	r0, [r6, #4]
 800a9d4:	f080 8096 	bcs.w	800ab04 <_malloc_r+0x264>
 800a9d8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a9dc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a9e0:	f04f 0c01 	mov.w	ip, #1
 800a9e4:	3201      	adds	r2, #1
 800a9e6:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a9ea:	ea4c 0000 	orr.w	r0, ip, r0
 800a9ee:	6070      	str	r0, [r6, #4]
 800a9f0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a9f4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a9f8:	3808      	subs	r0, #8
 800a9fa:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a9fe:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800aa02:	f8cc 400c 	str.w	r4, [ip, #12]
 800aa06:	2001      	movs	r0, #1
 800aa08:	109a      	asrs	r2, r3, #2
 800aa0a:	fa00 f202 	lsl.w	r2, r0, r2
 800aa0e:	6870      	ldr	r0, [r6, #4]
 800aa10:	4290      	cmp	r0, r2
 800aa12:	d326      	bcc.n	800aa62 <_malloc_r+0x1c2>
 800aa14:	4210      	tst	r0, r2
 800aa16:	d106      	bne.n	800aa26 <_malloc_r+0x186>
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	0052      	lsls	r2, r2, #1
 800aa1e:	4210      	tst	r0, r2
 800aa20:	f103 0304 	add.w	r3, r3, #4
 800aa24:	d0fa      	beq.n	800aa1c <_malloc_r+0x17c>
 800aa26:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800aa2a:	46c1      	mov	r9, r8
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800aa32:	454c      	cmp	r4, r9
 800aa34:	f040 80ba 	bne.w	800abac <_malloc_r+0x30c>
 800aa38:	f10e 0e01 	add.w	lr, lr, #1
 800aa3c:	f01e 0f03 	tst.w	lr, #3
 800aa40:	f109 0908 	add.w	r9, r9, #8
 800aa44:	d1f3      	bne.n	800aa2e <_malloc_r+0x18e>
 800aa46:	0798      	lsls	r0, r3, #30
 800aa48:	f040 80e4 	bne.w	800ac14 <_malloc_r+0x374>
 800aa4c:	6873      	ldr	r3, [r6, #4]
 800aa4e:	ea23 0302 	bic.w	r3, r3, r2
 800aa52:	6073      	str	r3, [r6, #4]
 800aa54:	6870      	ldr	r0, [r6, #4]
 800aa56:	0052      	lsls	r2, r2, #1
 800aa58:	4290      	cmp	r0, r2
 800aa5a:	d302      	bcc.n	800aa62 <_malloc_r+0x1c2>
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	f040 80e6 	bne.w	800ac2e <_malloc_r+0x38e>
 800aa62:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800aa66:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aa6a:	f023 0903 	bic.w	r9, r3, #3
 800aa6e:	45b9      	cmp	r9, r7
 800aa70:	d304      	bcc.n	800aa7c <_malloc_r+0x1dc>
 800aa72:	eba9 0207 	sub.w	r2, r9, r7
 800aa76:	2a0f      	cmp	r2, #15
 800aa78:	f300 8142 	bgt.w	800ad00 <_malloc_r+0x460>
 800aa7c:	4b46      	ldr	r3, [pc, #280]	; (800ab98 <_malloc_r+0x2f8>)
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	3110      	adds	r1, #16
 800aa82:	4439      	add	r1, r7
 800aa84:	2008      	movs	r0, #8
 800aa86:	9101      	str	r1, [sp, #4]
 800aa88:	f003 fa98 	bl	800dfbc <sysconf>
 800aa8c:	4a43      	ldr	r2, [pc, #268]	; (800ab9c <_malloc_r+0x2fc>)
 800aa8e:	9901      	ldr	r1, [sp, #4]
 800aa90:	6813      	ldr	r3, [r2, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	bf1f      	itttt	ne
 800aa96:	f101 31ff 	addne.w	r1, r1, #4294967295
 800aa9a:	1809      	addne	r1, r1, r0
 800aa9c:	4243      	negne	r3, r0
 800aa9e:	4019      	andne	r1, r3
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	9101      	str	r1, [sp, #4]
 800aaa6:	f001 f877 	bl	800bb98 <_sbrk_r>
 800aaaa:	1c42      	adds	r2, r0, #1
 800aaac:	eb0a 0b09 	add.w	fp, sl, r9
 800aab0:	4604      	mov	r4, r0
 800aab2:	f000 80f8 	beq.w	800aca6 <_malloc_r+0x406>
 800aab6:	4583      	cmp	fp, r0
 800aab8:	9901      	ldr	r1, [sp, #4]
 800aaba:	4a38      	ldr	r2, [pc, #224]	; (800ab9c <_malloc_r+0x2fc>)
 800aabc:	d902      	bls.n	800aac4 <_malloc_r+0x224>
 800aabe:	45b2      	cmp	sl, r6
 800aac0:	f040 80f1 	bne.w	800aca6 <_malloc_r+0x406>
 800aac4:	4b36      	ldr	r3, [pc, #216]	; (800aba0 <_malloc_r+0x300>)
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	45a3      	cmp	fp, r4
 800aaca:	eb00 0e01 	add.w	lr, r0, r1
 800aace:	f8c3 e000 	str.w	lr, [r3]
 800aad2:	f108 3cff 	add.w	ip, r8, #4294967295
 800aad6:	f040 80ac 	bne.w	800ac32 <_malloc_r+0x392>
 800aada:	ea1b 0f0c 	tst.w	fp, ip
 800aade:	f040 80a8 	bne.w	800ac32 <_malloc_r+0x392>
 800aae2:	68b2      	ldr	r2, [r6, #8]
 800aae4:	4449      	add	r1, r9
 800aae6:	f041 0101 	orr.w	r1, r1, #1
 800aaea:	6051      	str	r1, [r2, #4]
 800aaec:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <_malloc_r+0x304>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6811      	ldr	r1, [r2, #0]
 800aaf2:	428b      	cmp	r3, r1
 800aaf4:	bf88      	it	hi
 800aaf6:	6013      	strhi	r3, [r2, #0]
 800aaf8:	4a2b      	ldr	r2, [pc, #172]	; (800aba8 <_malloc_r+0x308>)
 800aafa:	6811      	ldr	r1, [r2, #0]
 800aafc:	428b      	cmp	r3, r1
 800aafe:	bf88      	it	hi
 800ab00:	6013      	strhi	r3, [r2, #0]
 800ab02:	e0d0      	b.n	800aca6 <_malloc_r+0x406>
 800ab04:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800ab08:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800ab0c:	d218      	bcs.n	800ab40 <_malloc_r+0x2a0>
 800ab0e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800ab12:	3238      	adds	r2, #56	; 0x38
 800ab14:	f102 0e01 	add.w	lr, r2, #1
 800ab18:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800ab1c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800ab20:	45f0      	cmp	r8, lr
 800ab22:	d12b      	bne.n	800ab7c <_malloc_r+0x2dc>
 800ab24:	1092      	asrs	r2, r2, #2
 800ab26:	f04f 0c01 	mov.w	ip, #1
 800ab2a:	fa0c f202 	lsl.w	r2, ip, r2
 800ab2e:	4310      	orrs	r0, r2
 800ab30:	6070      	str	r0, [r6, #4]
 800ab32:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800ab36:	f8c8 4008 	str.w	r4, [r8, #8]
 800ab3a:	f8ce 400c 	str.w	r4, [lr, #12]
 800ab3e:	e762      	b.n	800aa06 <_malloc_r+0x166>
 800ab40:	2a14      	cmp	r2, #20
 800ab42:	d801      	bhi.n	800ab48 <_malloc_r+0x2a8>
 800ab44:	325b      	adds	r2, #91	; 0x5b
 800ab46:	e7e5      	b.n	800ab14 <_malloc_r+0x274>
 800ab48:	2a54      	cmp	r2, #84	; 0x54
 800ab4a:	d803      	bhi.n	800ab54 <_malloc_r+0x2b4>
 800ab4c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800ab50:	326e      	adds	r2, #110	; 0x6e
 800ab52:	e7df      	b.n	800ab14 <_malloc_r+0x274>
 800ab54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ab58:	d803      	bhi.n	800ab62 <_malloc_r+0x2c2>
 800ab5a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800ab5e:	3277      	adds	r2, #119	; 0x77
 800ab60:	e7d8      	b.n	800ab14 <_malloc_r+0x274>
 800ab62:	f240 5e54 	movw	lr, #1364	; 0x554
 800ab66:	4572      	cmp	r2, lr
 800ab68:	bf9a      	itte	ls
 800ab6a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800ab6e:	327c      	addls	r2, #124	; 0x7c
 800ab70:	227e      	movhi	r2, #126	; 0x7e
 800ab72:	e7cf      	b.n	800ab14 <_malloc_r+0x274>
 800ab74:	f8de e008 	ldr.w	lr, [lr, #8]
 800ab78:	45f0      	cmp	r8, lr
 800ab7a:	d005      	beq.n	800ab88 <_malloc_r+0x2e8>
 800ab7c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ab80:	f022 0203 	bic.w	r2, r2, #3
 800ab84:	4562      	cmp	r2, ip
 800ab86:	d8f5      	bhi.n	800ab74 <_malloc_r+0x2d4>
 800ab88:	f8de 800c 	ldr.w	r8, [lr, #12]
 800ab8c:	e7d1      	b.n	800ab32 <_malloc_r+0x292>
 800ab8e:	bf00      	nop
 800ab90:	200005a8 	.word	0x200005a8
 800ab94:	200005b0 	.word	0x200005b0
 800ab98:	20000b40 	.word	0x20000b40
 800ab9c:	200009b0 	.word	0x200009b0
 800aba0:	20000b10 	.word	0x20000b10
 800aba4:	20000b38 	.word	0x20000b38
 800aba8:	20000b3c 	.word	0x20000b3c
 800abac:	6860      	ldr	r0, [r4, #4]
 800abae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800abb2:	f020 0003 	bic.w	r0, r0, #3
 800abb6:	eba0 0a07 	sub.w	sl, r0, r7
 800abba:	f1ba 0f0f 	cmp.w	sl, #15
 800abbe:	dd12      	ble.n	800abe6 <_malloc_r+0x346>
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	19e2      	adds	r2, r4, r7
 800abc4:	f047 0701 	orr.w	r7, r7, #1
 800abc8:	6067      	str	r7, [r4, #4]
 800abca:	f8c3 c00c 	str.w	ip, [r3, #12]
 800abce:	f8cc 3008 	str.w	r3, [ip, #8]
 800abd2:	f04a 0301 	orr.w	r3, sl, #1
 800abd6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800abda:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800abde:	6053      	str	r3, [r2, #4]
 800abe0:	f844 a000 	str.w	sl, [r4, r0]
 800abe4:	e68d      	b.n	800a902 <_malloc_r+0x62>
 800abe6:	f1ba 0f00 	cmp.w	sl, #0
 800abea:	db11      	blt.n	800ac10 <_malloc_r+0x370>
 800abec:	4420      	add	r0, r4
 800abee:	6843      	ldr	r3, [r0, #4]
 800abf0:	f043 0301 	orr.w	r3, r3, #1
 800abf4:	6043      	str	r3, [r0, #4]
 800abf6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800abfa:	4628      	mov	r0, r5
 800abfc:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ac00:	f8cc 3008 	str.w	r3, [ip, #8]
 800ac04:	f000 f8e2 	bl	800adcc <__malloc_unlock>
 800ac08:	4620      	mov	r0, r4
 800ac0a:	b003      	add	sp, #12
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	4664      	mov	r4, ip
 800ac12:	e70e      	b.n	800aa32 <_malloc_r+0x192>
 800ac14:	f858 0908 	ldr.w	r0, [r8], #-8
 800ac18:	4540      	cmp	r0, r8
 800ac1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac1e:	f43f af12 	beq.w	800aa46 <_malloc_r+0x1a6>
 800ac22:	e717      	b.n	800aa54 <_malloc_r+0x1b4>
 800ac24:	3304      	adds	r3, #4
 800ac26:	0052      	lsls	r2, r2, #1
 800ac28:	4210      	tst	r0, r2
 800ac2a:	d0fb      	beq.n	800ac24 <_malloc_r+0x384>
 800ac2c:	e6fb      	b.n	800aa26 <_malloc_r+0x186>
 800ac2e:	4673      	mov	r3, lr
 800ac30:	e7fa      	b.n	800ac28 <_malloc_r+0x388>
 800ac32:	6810      	ldr	r0, [r2, #0]
 800ac34:	3001      	adds	r0, #1
 800ac36:	bf1b      	ittet	ne
 800ac38:	eba4 0b0b 	subne.w	fp, r4, fp
 800ac3c:	eb0b 020e 	addne.w	r2, fp, lr
 800ac40:	6014      	streq	r4, [r2, #0]
 800ac42:	601a      	strne	r2, [r3, #0]
 800ac44:	f014 0b07 	ands.w	fp, r4, #7
 800ac48:	bf1a      	itte	ne
 800ac4a:	f1cb 0008 	rsbne	r0, fp, #8
 800ac4e:	1824      	addne	r4, r4, r0
 800ac50:	4658      	moveq	r0, fp
 800ac52:	1862      	adds	r2, r4, r1
 800ac54:	ea02 010c 	and.w	r1, r2, ip
 800ac58:	4480      	add	r8, r0
 800ac5a:	eba8 0801 	sub.w	r8, r8, r1
 800ac5e:	ea08 080c 	and.w	r8, r8, ip
 800ac62:	4641      	mov	r1, r8
 800ac64:	4628      	mov	r0, r5
 800ac66:	9201      	str	r2, [sp, #4]
 800ac68:	f000 ff96 	bl	800bb98 <_sbrk_r>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	9a01      	ldr	r2, [sp, #4]
 800ac70:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <_malloc_r+0x474>)
 800ac72:	d107      	bne.n	800ac84 <_malloc_r+0x3e4>
 800ac74:	f1bb 0f00 	cmp.w	fp, #0
 800ac78:	d023      	beq.n	800acc2 <_malloc_r+0x422>
 800ac7a:	f1ab 0008 	sub.w	r0, fp, #8
 800ac7e:	4410      	add	r0, r2
 800ac80:	f04f 0800 	mov.w	r8, #0
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	60b4      	str	r4, [r6, #8]
 800ac88:	1b00      	subs	r0, r0, r4
 800ac8a:	4440      	add	r0, r8
 800ac8c:	4442      	add	r2, r8
 800ac8e:	f040 0001 	orr.w	r0, r0, #1
 800ac92:	45b2      	cmp	sl, r6
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	6060      	str	r0, [r4, #4]
 800ac98:	f43f af28 	beq.w	800aaec <_malloc_r+0x24c>
 800ac9c:	f1b9 0f0f 	cmp.w	r9, #15
 800aca0:	d812      	bhi.n	800acc8 <_malloc_r+0x428>
 800aca2:	2301      	movs	r3, #1
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	68b3      	ldr	r3, [r6, #8]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f023 0303 	bic.w	r3, r3, #3
 800acae:	42bb      	cmp	r3, r7
 800acb0:	eba3 0207 	sub.w	r2, r3, r7
 800acb4:	d301      	bcc.n	800acba <_malloc_r+0x41a>
 800acb6:	2a0f      	cmp	r2, #15
 800acb8:	dc22      	bgt.n	800ad00 <_malloc_r+0x460>
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 f886 	bl	800adcc <__malloc_unlock>
 800acc0:	e5fa      	b.n	800a8b8 <_malloc_r+0x18>
 800acc2:	4610      	mov	r0, r2
 800acc4:	46d8      	mov	r8, fp
 800acc6:	e7dd      	b.n	800ac84 <_malloc_r+0x3e4>
 800acc8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800accc:	f1a9 090c 	sub.w	r9, r9, #12
 800acd0:	f029 0907 	bic.w	r9, r9, #7
 800acd4:	f002 0201 	and.w	r2, r2, #1
 800acd8:	ea42 0209 	orr.w	r2, r2, r9
 800acdc:	f8ca 2004 	str.w	r2, [sl, #4]
 800ace0:	2105      	movs	r1, #5
 800ace2:	eb0a 0209 	add.w	r2, sl, r9
 800ace6:	f1b9 0f0f 	cmp.w	r9, #15
 800acea:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800acee:	f67f aefd 	bls.w	800aaec <_malloc_r+0x24c>
 800acf2:	f10a 0108 	add.w	r1, sl, #8
 800acf6:	4628      	mov	r0, r5
 800acf8:	f7ff faf4 	bl	800a2e4 <_free_r>
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <_malloc_r+0x474>)
 800acfe:	e6f5      	b.n	800aaec <_malloc_r+0x24c>
 800ad00:	68b4      	ldr	r4, [r6, #8]
 800ad02:	f047 0301 	orr.w	r3, r7, #1
 800ad06:	4427      	add	r7, r4
 800ad08:	f042 0201 	orr.w	r2, r2, #1
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	60b7      	str	r7, [r6, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	e5f6      	b.n	800a902 <_malloc_r+0x62>
 800ad14:	20000b10 	.word	0x20000b10

0800ad18 <_mbrtowc_r>:
 800ad18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad1a:	4c0a      	ldr	r4, [pc, #40]	; (800ad44 <_mbrtowc_r+0x2c>)
 800ad1c:	9e08      	ldr	r6, [sp, #32]
 800ad1e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800ad22:	9600      	str	r6, [sp, #0]
 800ad24:	4605      	mov	r5, r0
 800ad26:	4614      	mov	r4, r2
 800ad28:	b912      	cbnz	r2, 800ad30 <_mbrtowc_r+0x18>
 800ad2a:	4a07      	ldr	r2, [pc, #28]	; (800ad48 <_mbrtowc_r+0x30>)
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4621      	mov	r1, r4
 800ad30:	47b8      	blx	r7
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	bf01      	itttt	eq
 800ad36:	2300      	moveq	r3, #0
 800ad38:	6033      	streq	r3, [r6, #0]
 800ad3a:	238a      	moveq	r3, #138	; 0x8a
 800ad3c:	602b      	streq	r3, [r5, #0]
 800ad3e:	b003      	add	sp, #12
 800ad40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad42:	bf00      	nop
 800ad44:	2000043c 	.word	0x2000043c
 800ad48:	08011173 	.word	0x08011173

0800ad4c <__ascii_mbtowc>:
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	b901      	cbnz	r1, 800ad52 <__ascii_mbtowc+0x6>
 800ad50:	a901      	add	r1, sp, #4
 800ad52:	b142      	cbz	r2, 800ad66 <__ascii_mbtowc+0x1a>
 800ad54:	b14b      	cbz	r3, 800ad6a <__ascii_mbtowc+0x1e>
 800ad56:	7813      	ldrb	r3, [r2, #0]
 800ad58:	600b      	str	r3, [r1, #0]
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	1e10      	subs	r0, r2, #0
 800ad5e:	bf18      	it	ne
 800ad60:	2001      	movne	r0, #1
 800ad62:	b002      	add	sp, #8
 800ad64:	4770      	bx	lr
 800ad66:	4610      	mov	r0, r2
 800ad68:	e7fb      	b.n	800ad62 <__ascii_mbtowc+0x16>
 800ad6a:	f06f 0001 	mvn.w	r0, #1
 800ad6e:	e7f8      	b.n	800ad62 <__ascii_mbtowc+0x16>

0800ad70 <memcpy>:
 800ad70:	440a      	add	r2, r1
 800ad72:	4291      	cmp	r1, r2
 800ad74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad78:	d100      	bne.n	800ad7c <memcpy+0xc>
 800ad7a:	4770      	bx	lr
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad86:	4291      	cmp	r1, r2
 800ad88:	d1f9      	bne.n	800ad7e <memcpy+0xe>
 800ad8a:	bd10      	pop	{r4, pc}

0800ad8c <memmove>:
 800ad8c:	4288      	cmp	r0, r1
 800ad8e:	b510      	push	{r4, lr}
 800ad90:	eb01 0402 	add.w	r4, r1, r2
 800ad94:	d902      	bls.n	800ad9c <memmove+0x10>
 800ad96:	4284      	cmp	r4, r0
 800ad98:	4623      	mov	r3, r4
 800ad9a:	d807      	bhi.n	800adac <memmove+0x20>
 800ad9c:	1e43      	subs	r3, r0, #1
 800ad9e:	42a1      	cmp	r1, r4
 800ada0:	d008      	beq.n	800adb4 <memmove+0x28>
 800ada2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ada6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adaa:	e7f8      	b.n	800ad9e <memmove+0x12>
 800adac:	4402      	add	r2, r0
 800adae:	4601      	mov	r1, r0
 800adb0:	428a      	cmp	r2, r1
 800adb2:	d100      	bne.n	800adb6 <memmove+0x2a>
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adbe:	e7f7      	b.n	800adb0 <memmove+0x24>

0800adc0 <__malloc_lock>:
 800adc0:	4801      	ldr	r0, [pc, #4]	; (800adc8 <__malloc_lock+0x8>)
 800adc2:	f7ff bcef 	b.w	800a7a4 <__retarget_lock_acquire_recursive>
 800adc6:	bf00      	nop
 800adc8:	20000b0d 	.word	0x20000b0d

0800adcc <__malloc_unlock>:
 800adcc:	4801      	ldr	r0, [pc, #4]	; (800add4 <__malloc_unlock+0x8>)
 800adce:	f7ff bcea 	b.w	800a7a6 <__retarget_lock_release_recursive>
 800add2:	bf00      	nop
 800add4:	20000b0d 	.word	0x20000b0d

0800add8 <_Balloc>:
 800add8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	4605      	mov	r5, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	b17b      	cbz	r3, 800ae02 <_Balloc+0x2a>
 800ade2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ade4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ade8:	b9a0      	cbnz	r0, 800ae14 <_Balloc+0x3c>
 800adea:	2101      	movs	r1, #1
 800adec:	fa01 f604 	lsl.w	r6, r1, r4
 800adf0:	1d72      	adds	r2, r6, #5
 800adf2:	0092      	lsls	r2, r2, #2
 800adf4:	4628      	mov	r0, r5
 800adf6:	f003 ff3f 	bl	800ec78 <_calloc_r>
 800adfa:	b148      	cbz	r0, 800ae10 <_Balloc+0x38>
 800adfc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800ae00:	e00b      	b.n	800ae1a <_Balloc+0x42>
 800ae02:	2221      	movs	r2, #33	; 0x21
 800ae04:	2104      	movs	r1, #4
 800ae06:	f003 ff37 	bl	800ec78 <_calloc_r>
 800ae0a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1e8      	bne.n	800ade2 <_Balloc+0xa>
 800ae10:	2000      	movs	r0, #0
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	6802      	ldr	r2, [r0, #0]
 800ae16:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae20:	e7f7      	b.n	800ae12 <_Balloc+0x3a>

0800ae22 <_Bfree>:
 800ae22:	b131      	cbz	r1, 800ae32 <_Bfree+0x10>
 800ae24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ae26:	684a      	ldr	r2, [r1, #4]
 800ae28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ae2c:	6008      	str	r0, [r1, #0]
 800ae2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ae32:	4770      	bx	lr

0800ae34 <__multadd>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	690d      	ldr	r5, [r1, #16]
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	461e      	mov	r6, r3
 800ae40:	f101 0c14 	add.w	ip, r1, #20
 800ae44:	2000      	movs	r0, #0
 800ae46:	f8dc 3000 	ldr.w	r3, [ip]
 800ae4a:	b299      	uxth	r1, r3
 800ae4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae50:	0c1e      	lsrs	r6, r3, #16
 800ae52:	0c0b      	lsrs	r3, r1, #16
 800ae54:	fb02 3306 	mla	r3, r2, r6, r3
 800ae58:	b289      	uxth	r1, r1
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae60:	4285      	cmp	r5, r0
 800ae62:	f84c 1b04 	str.w	r1, [ip], #4
 800ae66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae6a:	dcec      	bgt.n	800ae46 <__multadd+0x12>
 800ae6c:	b30e      	cbz	r6, 800aeb2 <__multadd+0x7e>
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	dc19      	bgt.n	800aea8 <__multadd+0x74>
 800ae74:	6861      	ldr	r1, [r4, #4]
 800ae76:	4638      	mov	r0, r7
 800ae78:	3101      	adds	r1, #1
 800ae7a:	f7ff ffad 	bl	800add8 <_Balloc>
 800ae7e:	4680      	mov	r8, r0
 800ae80:	b928      	cbnz	r0, 800ae8e <__multadd+0x5a>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <__multadd+0x84>)
 800ae86:	480d      	ldr	r0, [pc, #52]	; (800aebc <__multadd+0x88>)
 800ae88:	21b5      	movs	r1, #181	; 0xb5
 800ae8a:	f003 fed7 	bl	800ec3c <__assert_func>
 800ae8e:	6922      	ldr	r2, [r4, #16]
 800ae90:	3202      	adds	r2, #2
 800ae92:	f104 010c 	add.w	r1, r4, #12
 800ae96:	0092      	lsls	r2, r2, #2
 800ae98:	300c      	adds	r0, #12
 800ae9a:	f7ff ff69 	bl	800ad70 <memcpy>
 800ae9e:	4621      	mov	r1, r4
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7ff ffbe 	bl	800ae22 <_Bfree>
 800aea6:	4644      	mov	r4, r8
 800aea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aeac:	3501      	adds	r5, #1
 800aeae:	615e      	str	r6, [r3, #20]
 800aeb0:	6125      	str	r5, [r4, #16]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb8:	08010ed2 	.word	0x08010ed2
 800aebc:	08010f48 	.word	0x08010f48

0800aec0 <__s2b>:
 800aec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	4615      	mov	r5, r2
 800aec8:	461f      	mov	r7, r3
 800aeca:	2209      	movs	r2, #9
 800aecc:	3308      	adds	r3, #8
 800aece:	4606      	mov	r6, r0
 800aed0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aed4:	2100      	movs	r1, #0
 800aed6:	2201      	movs	r2, #1
 800aed8:	429a      	cmp	r2, r3
 800aeda:	db09      	blt.n	800aef0 <__s2b+0x30>
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff ff7b 	bl	800add8 <_Balloc>
 800aee2:	b940      	cbnz	r0, 800aef6 <__s2b+0x36>
 800aee4:	4602      	mov	r2, r0
 800aee6:	4b19      	ldr	r3, [pc, #100]	; (800af4c <__s2b+0x8c>)
 800aee8:	4819      	ldr	r0, [pc, #100]	; (800af50 <__s2b+0x90>)
 800aeea:	21ce      	movs	r1, #206	; 0xce
 800aeec:	f003 fea6 	bl	800ec3c <__assert_func>
 800aef0:	0052      	lsls	r2, r2, #1
 800aef2:	3101      	adds	r1, #1
 800aef4:	e7f0      	b.n	800aed8 <__s2b+0x18>
 800aef6:	9b08      	ldr	r3, [sp, #32]
 800aef8:	6143      	str	r3, [r0, #20]
 800aefa:	2d09      	cmp	r5, #9
 800aefc:	f04f 0301 	mov.w	r3, #1
 800af00:	6103      	str	r3, [r0, #16]
 800af02:	dd16      	ble.n	800af32 <__s2b+0x72>
 800af04:	f104 0909 	add.w	r9, r4, #9
 800af08:	46c8      	mov	r8, r9
 800af0a:	442c      	add	r4, r5
 800af0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af10:	4601      	mov	r1, r0
 800af12:	3b30      	subs	r3, #48	; 0x30
 800af14:	220a      	movs	r2, #10
 800af16:	4630      	mov	r0, r6
 800af18:	f7ff ff8c 	bl	800ae34 <__multadd>
 800af1c:	45a0      	cmp	r8, r4
 800af1e:	d1f5      	bne.n	800af0c <__s2b+0x4c>
 800af20:	f1a5 0408 	sub.w	r4, r5, #8
 800af24:	444c      	add	r4, r9
 800af26:	1b2d      	subs	r5, r5, r4
 800af28:	1963      	adds	r3, r4, r5
 800af2a:	42bb      	cmp	r3, r7
 800af2c:	db04      	blt.n	800af38 <__s2b+0x78>
 800af2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af32:	340a      	adds	r4, #10
 800af34:	2509      	movs	r5, #9
 800af36:	e7f6      	b.n	800af26 <__s2b+0x66>
 800af38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af3c:	4601      	mov	r1, r0
 800af3e:	3b30      	subs	r3, #48	; 0x30
 800af40:	220a      	movs	r2, #10
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ff76 	bl	800ae34 <__multadd>
 800af48:	e7ee      	b.n	800af28 <__s2b+0x68>
 800af4a:	bf00      	nop
 800af4c:	08010ed2 	.word	0x08010ed2
 800af50:	08010f48 	.word	0x08010f48

0800af54 <__hi0bits>:
 800af54:	0c03      	lsrs	r3, r0, #16
 800af56:	041b      	lsls	r3, r3, #16
 800af58:	b9d3      	cbnz	r3, 800af90 <__hi0bits+0x3c>
 800af5a:	0400      	lsls	r0, r0, #16
 800af5c:	2310      	movs	r3, #16
 800af5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af62:	bf04      	itt	eq
 800af64:	0200      	lsleq	r0, r0, #8
 800af66:	3308      	addeq	r3, #8
 800af68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af6c:	bf04      	itt	eq
 800af6e:	0100      	lsleq	r0, r0, #4
 800af70:	3304      	addeq	r3, #4
 800af72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af76:	bf04      	itt	eq
 800af78:	0080      	lsleq	r0, r0, #2
 800af7a:	3302      	addeq	r3, #2
 800af7c:	2800      	cmp	r0, #0
 800af7e:	db05      	blt.n	800af8c <__hi0bits+0x38>
 800af80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af84:	f103 0301 	add.w	r3, r3, #1
 800af88:	bf08      	it	eq
 800af8a:	2320      	moveq	r3, #32
 800af8c:	4618      	mov	r0, r3
 800af8e:	4770      	bx	lr
 800af90:	2300      	movs	r3, #0
 800af92:	e7e4      	b.n	800af5e <__hi0bits+0xa>

0800af94 <__lo0bits>:
 800af94:	6803      	ldr	r3, [r0, #0]
 800af96:	f013 0207 	ands.w	r2, r3, #7
 800af9a:	4601      	mov	r1, r0
 800af9c:	d00b      	beq.n	800afb6 <__lo0bits+0x22>
 800af9e:	07da      	lsls	r2, r3, #31
 800afa0:	d423      	bmi.n	800afea <__lo0bits+0x56>
 800afa2:	0798      	lsls	r0, r3, #30
 800afa4:	bf49      	itett	mi
 800afa6:	085b      	lsrmi	r3, r3, #1
 800afa8:	089b      	lsrpl	r3, r3, #2
 800afaa:	2001      	movmi	r0, #1
 800afac:	600b      	strmi	r3, [r1, #0]
 800afae:	bf5c      	itt	pl
 800afb0:	600b      	strpl	r3, [r1, #0]
 800afb2:	2002      	movpl	r0, #2
 800afb4:	4770      	bx	lr
 800afb6:	b298      	uxth	r0, r3
 800afb8:	b9a8      	cbnz	r0, 800afe6 <__lo0bits+0x52>
 800afba:	0c1b      	lsrs	r3, r3, #16
 800afbc:	2010      	movs	r0, #16
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	b90a      	cbnz	r2, 800afc6 <__lo0bits+0x32>
 800afc2:	3008      	adds	r0, #8
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	071a      	lsls	r2, r3, #28
 800afc8:	bf04      	itt	eq
 800afca:	091b      	lsreq	r3, r3, #4
 800afcc:	3004      	addeq	r0, #4
 800afce:	079a      	lsls	r2, r3, #30
 800afd0:	bf04      	itt	eq
 800afd2:	089b      	lsreq	r3, r3, #2
 800afd4:	3002      	addeq	r0, #2
 800afd6:	07da      	lsls	r2, r3, #31
 800afd8:	d403      	bmi.n	800afe2 <__lo0bits+0x4e>
 800afda:	085b      	lsrs	r3, r3, #1
 800afdc:	f100 0001 	add.w	r0, r0, #1
 800afe0:	d005      	beq.n	800afee <__lo0bits+0x5a>
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	4770      	bx	lr
 800afe6:	4610      	mov	r0, r2
 800afe8:	e7e9      	b.n	800afbe <__lo0bits+0x2a>
 800afea:	2000      	movs	r0, #0
 800afec:	4770      	bx	lr
 800afee:	2020      	movs	r0, #32
 800aff0:	4770      	bx	lr
	...

0800aff4 <__i2b>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	460c      	mov	r4, r1
 800aff8:	2101      	movs	r1, #1
 800affa:	f7ff feed 	bl	800add8 <_Balloc>
 800affe:	4602      	mov	r2, r0
 800b000:	b928      	cbnz	r0, 800b00e <__i2b+0x1a>
 800b002:	4b05      	ldr	r3, [pc, #20]	; (800b018 <__i2b+0x24>)
 800b004:	4805      	ldr	r0, [pc, #20]	; (800b01c <__i2b+0x28>)
 800b006:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b00a:	f003 fe17 	bl	800ec3c <__assert_func>
 800b00e:	2301      	movs	r3, #1
 800b010:	6144      	str	r4, [r0, #20]
 800b012:	6103      	str	r3, [r0, #16]
 800b014:	bd10      	pop	{r4, pc}
 800b016:	bf00      	nop
 800b018:	08010ed2 	.word	0x08010ed2
 800b01c:	08010f48 	.word	0x08010f48

0800b020 <__multiply>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4691      	mov	r9, r2
 800b026:	690a      	ldr	r2, [r1, #16]
 800b028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bfb8      	it	lt
 800b030:	460b      	movlt	r3, r1
 800b032:	460c      	mov	r4, r1
 800b034:	bfbc      	itt	lt
 800b036:	464c      	movlt	r4, r9
 800b038:	4699      	movlt	r9, r3
 800b03a:	6927      	ldr	r7, [r4, #16]
 800b03c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b040:	68a3      	ldr	r3, [r4, #8]
 800b042:	6861      	ldr	r1, [r4, #4]
 800b044:	eb07 060a 	add.w	r6, r7, sl
 800b048:	42b3      	cmp	r3, r6
 800b04a:	b085      	sub	sp, #20
 800b04c:	bfb8      	it	lt
 800b04e:	3101      	addlt	r1, #1
 800b050:	f7ff fec2 	bl	800add8 <_Balloc>
 800b054:	b930      	cbnz	r0, 800b064 <__multiply+0x44>
 800b056:	4602      	mov	r2, r0
 800b058:	4b44      	ldr	r3, [pc, #272]	; (800b16c <__multiply+0x14c>)
 800b05a:	4845      	ldr	r0, [pc, #276]	; (800b170 <__multiply+0x150>)
 800b05c:	f240 115d 	movw	r1, #349	; 0x15d
 800b060:	f003 fdec 	bl	800ec3c <__assert_func>
 800b064:	f100 0514 	add.w	r5, r0, #20
 800b068:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b06c:	462b      	mov	r3, r5
 800b06e:	2200      	movs	r2, #0
 800b070:	4543      	cmp	r3, r8
 800b072:	d321      	bcc.n	800b0b8 <__multiply+0x98>
 800b074:	f104 0314 	add.w	r3, r4, #20
 800b078:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b07c:	f109 0314 	add.w	r3, r9, #20
 800b080:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	1b3a      	subs	r2, r7, r4
 800b088:	3a15      	subs	r2, #21
 800b08a:	f022 0203 	bic.w	r2, r2, #3
 800b08e:	3204      	adds	r2, #4
 800b090:	f104 0115 	add.w	r1, r4, #21
 800b094:	428f      	cmp	r7, r1
 800b096:	bf38      	it	cc
 800b098:	2204      	movcc	r2, #4
 800b09a:	9201      	str	r2, [sp, #4]
 800b09c:	9a02      	ldr	r2, [sp, #8]
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d80c      	bhi.n	800b0be <__multiply+0x9e>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	dd03      	ble.n	800b0b0 <__multiply+0x90>
 800b0a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d05a      	beq.n	800b166 <__multiply+0x146>
 800b0b0:	6106      	str	r6, [r0, #16]
 800b0b2:	b005      	add	sp, #20
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	f843 2b04 	str.w	r2, [r3], #4
 800b0bc:	e7d8      	b.n	800b070 <__multiply+0x50>
 800b0be:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d024      	beq.n	800b112 <__multiply+0xf2>
 800b0c8:	f104 0e14 	add.w	lr, r4, #20
 800b0cc:	46a9      	mov	r9, r5
 800b0ce:	f04f 0c00 	mov.w	ip, #0
 800b0d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0d6:	f8d9 1000 	ldr.w	r1, [r9]
 800b0da:	fa1f fb82 	uxth.w	fp, r2
 800b0de:	b289      	uxth	r1, r1
 800b0e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0ec:	4461      	add	r1, ip
 800b0ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0fa:	b289      	uxth	r1, r1
 800b0fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b100:	4577      	cmp	r7, lr
 800b102:	f849 1b04 	str.w	r1, [r9], #4
 800b106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b10a:	d8e2      	bhi.n	800b0d2 <__multiply+0xb2>
 800b10c:	9a01      	ldr	r2, [sp, #4]
 800b10e:	f845 c002 	str.w	ip, [r5, r2]
 800b112:	9a03      	ldr	r2, [sp, #12]
 800b114:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b118:	3304      	adds	r3, #4
 800b11a:	f1b9 0f00 	cmp.w	r9, #0
 800b11e:	d020      	beq.n	800b162 <__multiply+0x142>
 800b120:	6829      	ldr	r1, [r5, #0]
 800b122:	f104 0c14 	add.w	ip, r4, #20
 800b126:	46ae      	mov	lr, r5
 800b128:	f04f 0a00 	mov.w	sl, #0
 800b12c:	f8bc b000 	ldrh.w	fp, [ip]
 800b130:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b134:	fb09 220b 	mla	r2, r9, fp, r2
 800b138:	4492      	add	sl, r2
 800b13a:	b289      	uxth	r1, r1
 800b13c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b140:	f84e 1b04 	str.w	r1, [lr], #4
 800b144:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b148:	f8be 1000 	ldrh.w	r1, [lr]
 800b14c:	0c12      	lsrs	r2, r2, #16
 800b14e:	fb09 1102 	mla	r1, r9, r2, r1
 800b152:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b156:	4567      	cmp	r7, ip
 800b158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b15c:	d8e6      	bhi.n	800b12c <__multiply+0x10c>
 800b15e:	9a01      	ldr	r2, [sp, #4]
 800b160:	50a9      	str	r1, [r5, r2]
 800b162:	3504      	adds	r5, #4
 800b164:	e79a      	b.n	800b09c <__multiply+0x7c>
 800b166:	3e01      	subs	r6, #1
 800b168:	e79c      	b.n	800b0a4 <__multiply+0x84>
 800b16a:	bf00      	nop
 800b16c:	08010ed2 	.word	0x08010ed2
 800b170:	08010f48 	.word	0x08010f48

0800b174 <__pow5mult>:
 800b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b178:	4615      	mov	r5, r2
 800b17a:	f012 0203 	ands.w	r2, r2, #3
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	d007      	beq.n	800b194 <__pow5mult+0x20>
 800b184:	4c1a      	ldr	r4, [pc, #104]	; (800b1f0 <__pow5mult+0x7c>)
 800b186:	3a01      	subs	r2, #1
 800b188:	2300      	movs	r3, #0
 800b18a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b18e:	f7ff fe51 	bl	800ae34 <__multadd>
 800b192:	4607      	mov	r7, r0
 800b194:	10ad      	asrs	r5, r5, #2
 800b196:	d027      	beq.n	800b1e8 <__pow5mult+0x74>
 800b198:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b19a:	b944      	cbnz	r4, 800b1ae <__pow5mult+0x3a>
 800b19c:	f240 2171 	movw	r1, #625	; 0x271
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff ff27 	bl	800aff4 <__i2b>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	64b0      	str	r0, [r6, #72]	; 0x48
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	6003      	str	r3, [r0, #0]
 800b1ae:	f04f 0900 	mov.w	r9, #0
 800b1b2:	07eb      	lsls	r3, r5, #31
 800b1b4:	d50a      	bpl.n	800b1cc <__pow5mult+0x58>
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff ff30 	bl	800b020 <__multiply>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff fe2c 	bl	800ae22 <_Bfree>
 800b1ca:	4647      	mov	r7, r8
 800b1cc:	106d      	asrs	r5, r5, #1
 800b1ce:	d00b      	beq.n	800b1e8 <__pow5mult+0x74>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	b938      	cbnz	r0, 800b1e4 <__pow5mult+0x70>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff ff21 	bl	800b020 <__multiply>
 800b1de:	6020      	str	r0, [r4, #0]
 800b1e0:	f8c0 9000 	str.w	r9, [r0]
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	e7e4      	b.n	800b1b2 <__pow5mult+0x3e>
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	bf00      	nop
 800b1f0:	08011098 	.word	0x08011098

0800b1f4 <__lshift>:
 800b1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	6849      	ldr	r1, [r1, #4]
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	4607      	mov	r7, r0
 800b206:	4691      	mov	r9, r2
 800b208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b20c:	f108 0601 	add.w	r6, r8, #1
 800b210:	42b3      	cmp	r3, r6
 800b212:	db0b      	blt.n	800b22c <__lshift+0x38>
 800b214:	4638      	mov	r0, r7
 800b216:	f7ff fddf 	bl	800add8 <_Balloc>
 800b21a:	4605      	mov	r5, r0
 800b21c:	b948      	cbnz	r0, 800b232 <__lshift+0x3e>
 800b21e:	4602      	mov	r2, r0
 800b220:	4b2a      	ldr	r3, [pc, #168]	; (800b2cc <__lshift+0xd8>)
 800b222:	482b      	ldr	r0, [pc, #172]	; (800b2d0 <__lshift+0xdc>)
 800b224:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b228:	f003 fd08 	bl	800ec3c <__assert_func>
 800b22c:	3101      	adds	r1, #1
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	e7ee      	b.n	800b210 <__lshift+0x1c>
 800b232:	2300      	movs	r3, #0
 800b234:	f100 0114 	add.w	r1, r0, #20
 800b238:	f100 0210 	add.w	r2, r0, #16
 800b23c:	4618      	mov	r0, r3
 800b23e:	4553      	cmp	r3, sl
 800b240:	db37      	blt.n	800b2b2 <__lshift+0xbe>
 800b242:	6920      	ldr	r0, [r4, #16]
 800b244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b248:	f104 0314 	add.w	r3, r4, #20
 800b24c:	f019 091f 	ands.w	r9, r9, #31
 800b250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b258:	d02f      	beq.n	800b2ba <__lshift+0xc6>
 800b25a:	f1c9 0e20 	rsb	lr, r9, #32
 800b25e:	468a      	mov	sl, r1
 800b260:	f04f 0c00 	mov.w	ip, #0
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	fa02 f209 	lsl.w	r2, r2, r9
 800b26a:	ea42 020c 	orr.w	r2, r2, ip
 800b26e:	f84a 2b04 	str.w	r2, [sl], #4
 800b272:	f853 2b04 	ldr.w	r2, [r3], #4
 800b276:	4298      	cmp	r0, r3
 800b278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b27c:	d8f2      	bhi.n	800b264 <__lshift+0x70>
 800b27e:	1b03      	subs	r3, r0, r4
 800b280:	3b15      	subs	r3, #21
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	3304      	adds	r3, #4
 800b288:	f104 0215 	add.w	r2, r4, #21
 800b28c:	4290      	cmp	r0, r2
 800b28e:	bf38      	it	cc
 800b290:	2304      	movcc	r3, #4
 800b292:	f841 c003 	str.w	ip, [r1, r3]
 800b296:	f1bc 0f00 	cmp.w	ip, #0
 800b29a:	d001      	beq.n	800b2a0 <__lshift+0xac>
 800b29c:	f108 0602 	add.w	r6, r8, #2
 800b2a0:	3e01      	subs	r6, #1
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	612e      	str	r6, [r5, #16]
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	f7ff fdbb 	bl	800ae22 <_Bfree>
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	e7c1      	b.n	800b23e <__lshift+0x4a>
 800b2ba:	3904      	subs	r1, #4
 800b2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2c4:	4298      	cmp	r0, r3
 800b2c6:	d8f9      	bhi.n	800b2bc <__lshift+0xc8>
 800b2c8:	e7ea      	b.n	800b2a0 <__lshift+0xac>
 800b2ca:	bf00      	nop
 800b2cc:	08010ed2 	.word	0x08010ed2
 800b2d0:	08010f48 	.word	0x08010f48

0800b2d4 <__mcmp>:
 800b2d4:	b530      	push	{r4, r5, lr}
 800b2d6:	6902      	ldr	r2, [r0, #16]
 800b2d8:	690c      	ldr	r4, [r1, #16]
 800b2da:	1b12      	subs	r2, r2, r4
 800b2dc:	d10e      	bne.n	800b2fc <__mcmp+0x28>
 800b2de:	f100 0314 	add.w	r3, r0, #20
 800b2e2:	3114      	adds	r1, #20
 800b2e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2f4:	42a5      	cmp	r5, r4
 800b2f6:	d003      	beq.n	800b300 <__mcmp+0x2c>
 800b2f8:	d305      	bcc.n	800b306 <__mcmp+0x32>
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	bd30      	pop	{r4, r5, pc}
 800b300:	4283      	cmp	r3, r0
 800b302:	d3f3      	bcc.n	800b2ec <__mcmp+0x18>
 800b304:	e7fa      	b.n	800b2fc <__mcmp+0x28>
 800b306:	f04f 32ff 	mov.w	r2, #4294967295
 800b30a:	e7f7      	b.n	800b2fc <__mcmp+0x28>

0800b30c <__mdiff>:
 800b30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	4606      	mov	r6, r0
 800b314:	4611      	mov	r1, r2
 800b316:	4620      	mov	r0, r4
 800b318:	4690      	mov	r8, r2
 800b31a:	f7ff ffdb 	bl	800b2d4 <__mcmp>
 800b31e:	1e05      	subs	r5, r0, #0
 800b320:	d110      	bne.n	800b344 <__mdiff+0x38>
 800b322:	4629      	mov	r1, r5
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff fd57 	bl	800add8 <_Balloc>
 800b32a:	b930      	cbnz	r0, 800b33a <__mdiff+0x2e>
 800b32c:	4b3a      	ldr	r3, [pc, #232]	; (800b418 <__mdiff+0x10c>)
 800b32e:	4602      	mov	r2, r0
 800b330:	f240 2132 	movw	r1, #562	; 0x232
 800b334:	4839      	ldr	r0, [pc, #228]	; (800b41c <__mdiff+0x110>)
 800b336:	f003 fc81 	bl	800ec3c <__assert_func>
 800b33a:	2301      	movs	r3, #1
 800b33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	bfa4      	itt	ge
 800b346:	4643      	movge	r3, r8
 800b348:	46a0      	movge	r8, r4
 800b34a:	4630      	mov	r0, r6
 800b34c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b350:	bfa6      	itte	ge
 800b352:	461c      	movge	r4, r3
 800b354:	2500      	movge	r5, #0
 800b356:	2501      	movlt	r5, #1
 800b358:	f7ff fd3e 	bl	800add8 <_Balloc>
 800b35c:	b920      	cbnz	r0, 800b368 <__mdiff+0x5c>
 800b35e:	4b2e      	ldr	r3, [pc, #184]	; (800b418 <__mdiff+0x10c>)
 800b360:	4602      	mov	r2, r0
 800b362:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b366:	e7e5      	b.n	800b334 <__mdiff+0x28>
 800b368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b36c:	6926      	ldr	r6, [r4, #16]
 800b36e:	60c5      	str	r5, [r0, #12]
 800b370:	f104 0914 	add.w	r9, r4, #20
 800b374:	f108 0514 	add.w	r5, r8, #20
 800b378:	f100 0e14 	add.w	lr, r0, #20
 800b37c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b384:	f108 0210 	add.w	r2, r8, #16
 800b388:	46f2      	mov	sl, lr
 800b38a:	2100      	movs	r1, #0
 800b38c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b394:	fa1f f883 	uxth.w	r8, r3
 800b398:	fa11 f18b 	uxtah	r1, r1, fp
 800b39c:	0c1b      	lsrs	r3, r3, #16
 800b39e:	eba1 0808 	sub.w	r8, r1, r8
 800b3a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3aa:	fa1f f888 	uxth.w	r8, r8
 800b3ae:	1419      	asrs	r1, r3, #16
 800b3b0:	454e      	cmp	r6, r9
 800b3b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3b6:	f84a 3b04 	str.w	r3, [sl], #4
 800b3ba:	d8e7      	bhi.n	800b38c <__mdiff+0x80>
 800b3bc:	1b33      	subs	r3, r6, r4
 800b3be:	3b15      	subs	r3, #21
 800b3c0:	f023 0303 	bic.w	r3, r3, #3
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	3415      	adds	r4, #21
 800b3c8:	42a6      	cmp	r6, r4
 800b3ca:	bf38      	it	cc
 800b3cc:	2304      	movcc	r3, #4
 800b3ce:	441d      	add	r5, r3
 800b3d0:	4473      	add	r3, lr
 800b3d2:	469e      	mov	lr, r3
 800b3d4:	462e      	mov	r6, r5
 800b3d6:	4566      	cmp	r6, ip
 800b3d8:	d30e      	bcc.n	800b3f8 <__mdiff+0xec>
 800b3da:	f10c 0203 	add.w	r2, ip, #3
 800b3de:	1b52      	subs	r2, r2, r5
 800b3e0:	f022 0203 	bic.w	r2, r2, #3
 800b3e4:	3d03      	subs	r5, #3
 800b3e6:	45ac      	cmp	ip, r5
 800b3e8:	bf38      	it	cc
 800b3ea:	2200      	movcc	r2, #0
 800b3ec:	441a      	add	r2, r3
 800b3ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3f2:	b17b      	cbz	r3, 800b414 <__mdiff+0x108>
 800b3f4:	6107      	str	r7, [r0, #16]
 800b3f6:	e7a3      	b.n	800b340 <__mdiff+0x34>
 800b3f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3fc:	fa11 f288 	uxtah	r2, r1, r8
 800b400:	1414      	asrs	r4, r2, #16
 800b402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b406:	b292      	uxth	r2, r2
 800b408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b40c:	f84e 2b04 	str.w	r2, [lr], #4
 800b410:	1421      	asrs	r1, r4, #16
 800b412:	e7e0      	b.n	800b3d6 <__mdiff+0xca>
 800b414:	3f01      	subs	r7, #1
 800b416:	e7ea      	b.n	800b3ee <__mdiff+0xe2>
 800b418:	08010ed2 	.word	0x08010ed2
 800b41c:	08010f48 	.word	0x08010f48

0800b420 <__ulp>:
 800b420:	b082      	sub	sp, #8
 800b422:	ed8d 0b00 	vstr	d0, [sp]
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	4912      	ldr	r1, [pc, #72]	; (800b474 <__ulp+0x54>)
 800b42a:	4019      	ands	r1, r3
 800b42c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b430:	2900      	cmp	r1, #0
 800b432:	dd05      	ble.n	800b440 <__ulp+0x20>
 800b434:	2200      	movs	r2, #0
 800b436:	460b      	mov	r3, r1
 800b438:	ec43 2b10 	vmov	d0, r2, r3
 800b43c:	b002      	add	sp, #8
 800b43e:	4770      	bx	lr
 800b440:	4249      	negs	r1, r1
 800b442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b446:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	da04      	bge.n	800b45e <__ulp+0x3e>
 800b454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b458:	fa41 f300 	asr.w	r3, r1, r0
 800b45c:	e7ec      	b.n	800b438 <__ulp+0x18>
 800b45e:	f1a0 0114 	sub.w	r1, r0, #20
 800b462:	291e      	cmp	r1, #30
 800b464:	bfda      	itte	le
 800b466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b46a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b46e:	2101      	movgt	r1, #1
 800b470:	460a      	mov	r2, r1
 800b472:	e7e1      	b.n	800b438 <__ulp+0x18>
 800b474:	7ff00000 	.word	0x7ff00000

0800b478 <__b2d>:
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	6905      	ldr	r5, [r0, #16]
 800b47c:	f100 0714 	add.w	r7, r0, #20
 800b480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b484:	1f2e      	subs	r6, r5, #4
 800b486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7ff fd62 	bl	800af54 <__hi0bits>
 800b490:	f1c0 0320 	rsb	r3, r0, #32
 800b494:	280a      	cmp	r0, #10
 800b496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b514 <__b2d+0x9c>
 800b49a:	600b      	str	r3, [r1, #0]
 800b49c:	dc14      	bgt.n	800b4c8 <__b2d+0x50>
 800b49e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b4a6:	42b7      	cmp	r7, r6
 800b4a8:	ea41 030c 	orr.w	r3, r1, ip
 800b4ac:	bf34      	ite	cc
 800b4ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4b2:	2100      	movcs	r1, #0
 800b4b4:	3015      	adds	r0, #21
 800b4b6:	fa04 f000 	lsl.w	r0, r4, r0
 800b4ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800b4be:	ea40 0201 	orr.w	r2, r0, r1
 800b4c2:	ec43 2b10 	vmov	d0, r2, r3
 800b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c8:	42b7      	cmp	r7, r6
 800b4ca:	bf3a      	itte	cc
 800b4cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4d4:	2100      	movcs	r1, #0
 800b4d6:	380b      	subs	r0, #11
 800b4d8:	d017      	beq.n	800b50a <__b2d+0x92>
 800b4da:	f1c0 0c20 	rsb	ip, r0, #32
 800b4de:	fa04 f500 	lsl.w	r5, r4, r0
 800b4e2:	42be      	cmp	r6, r7
 800b4e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b4e8:	ea45 0504 	orr.w	r5, r5, r4
 800b4ec:	bf8c      	ite	hi
 800b4ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4f2:	2400      	movls	r4, #0
 800b4f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b4f8:	fa01 f000 	lsl.w	r0, r1, r0
 800b4fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b504:	ea40 0204 	orr.w	r2, r0, r4
 800b508:	e7db      	b.n	800b4c2 <__b2d+0x4a>
 800b50a:	ea44 030c 	orr.w	r3, r4, ip
 800b50e:	460a      	mov	r2, r1
 800b510:	e7d7      	b.n	800b4c2 <__b2d+0x4a>
 800b512:	bf00      	nop
 800b514:	3ff00000 	.word	0x3ff00000

0800b518 <__d2b>:
 800b518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4689      	mov	r9, r1
 800b51e:	2101      	movs	r1, #1
 800b520:	ec57 6b10 	vmov	r6, r7, d0
 800b524:	4690      	mov	r8, r2
 800b526:	f7ff fc57 	bl	800add8 <_Balloc>
 800b52a:	4604      	mov	r4, r0
 800b52c:	b930      	cbnz	r0, 800b53c <__d2b+0x24>
 800b52e:	4602      	mov	r2, r0
 800b530:	4b25      	ldr	r3, [pc, #148]	; (800b5c8 <__d2b+0xb0>)
 800b532:	4826      	ldr	r0, [pc, #152]	; (800b5cc <__d2b+0xb4>)
 800b534:	f240 310a 	movw	r1, #778	; 0x30a
 800b538:	f003 fb80 	bl	800ec3c <__assert_func>
 800b53c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b544:	bb35      	cbnz	r5, 800b594 <__d2b+0x7c>
 800b546:	2e00      	cmp	r6, #0
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	d028      	beq.n	800b59e <__d2b+0x86>
 800b54c:	4668      	mov	r0, sp
 800b54e:	9600      	str	r6, [sp, #0]
 800b550:	f7ff fd20 	bl	800af94 <__lo0bits>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	b300      	cbz	r0, 800b59a <__d2b+0x82>
 800b558:	9a01      	ldr	r2, [sp, #4]
 800b55a:	f1c0 0320 	rsb	r3, r0, #32
 800b55e:	fa02 f303 	lsl.w	r3, r2, r3
 800b562:	430b      	orrs	r3, r1
 800b564:	40c2      	lsrs	r2, r0
 800b566:	6163      	str	r3, [r4, #20]
 800b568:	9201      	str	r2, [sp, #4]
 800b56a:	9b01      	ldr	r3, [sp, #4]
 800b56c:	61a3      	str	r3, [r4, #24]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2202      	movne	r2, #2
 800b574:	2201      	moveq	r2, #1
 800b576:	6122      	str	r2, [r4, #16]
 800b578:	b1d5      	cbz	r5, 800b5b0 <__d2b+0x98>
 800b57a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b57e:	4405      	add	r5, r0
 800b580:	f8c9 5000 	str.w	r5, [r9]
 800b584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b588:	f8c8 0000 	str.w	r0, [r8]
 800b58c:	4620      	mov	r0, r4
 800b58e:	b003      	add	sp, #12
 800b590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b598:	e7d5      	b.n	800b546 <__d2b+0x2e>
 800b59a:	6161      	str	r1, [r4, #20]
 800b59c:	e7e5      	b.n	800b56a <__d2b+0x52>
 800b59e:	a801      	add	r0, sp, #4
 800b5a0:	f7ff fcf8 	bl	800af94 <__lo0bits>
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	6163      	str	r3, [r4, #20]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	6122      	str	r2, [r4, #16]
 800b5ac:	3020      	adds	r0, #32
 800b5ae:	e7e3      	b.n	800b578 <__d2b+0x60>
 800b5b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5b8:	f8c9 0000 	str.w	r0, [r9]
 800b5bc:	6918      	ldr	r0, [r3, #16]
 800b5be:	f7ff fcc9 	bl	800af54 <__hi0bits>
 800b5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5c6:	e7df      	b.n	800b588 <__d2b+0x70>
 800b5c8:	08010ed2 	.word	0x08010ed2
 800b5cc:	08010f48 	.word	0x08010f48

0800b5d0 <__ratio>:
 800b5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4688      	mov	r8, r1
 800b5d6:	4669      	mov	r1, sp
 800b5d8:	4681      	mov	r9, r0
 800b5da:	f7ff ff4d 	bl	800b478 <__b2d>
 800b5de:	a901      	add	r1, sp, #4
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	ec55 4b10 	vmov	r4, r5, d0
 800b5e6:	ee10 aa10 	vmov	sl, s0
 800b5ea:	f7ff ff45 	bl	800b478 <__b2d>
 800b5ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b5f6:	1a59      	subs	r1, r3, r1
 800b5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b602:	ec57 6b10 	vmov	r6, r7, d0
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfd6      	itet	le
 800b60a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b60e:	462a      	movgt	r2, r5
 800b610:	463a      	movle	r2, r7
 800b612:	46ab      	mov	fp, r5
 800b614:	bfd6      	itet	le
 800b616:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b61a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b61e:	ee00 3a90 	vmovle	s1, r3
 800b622:	ec4b ab17 	vmov	d7, sl, fp
 800b626:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b62a:	b003      	add	sp, #12
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b630 <__copybits>:
 800b630:	3901      	subs	r1, #1
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	1149      	asrs	r1, r1, #5
 800b636:	6914      	ldr	r4, [r2, #16]
 800b638:	3101      	adds	r1, #1
 800b63a:	f102 0314 	add.w	r3, r2, #20
 800b63e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b646:	1f05      	subs	r5, r0, #4
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d30c      	bcc.n	800b666 <__copybits+0x36>
 800b64c:	1aa3      	subs	r3, r4, r2
 800b64e:	3b11      	subs	r3, #17
 800b650:	f023 0303 	bic.w	r3, r3, #3
 800b654:	3211      	adds	r2, #17
 800b656:	42a2      	cmp	r2, r4
 800b658:	bf88      	it	hi
 800b65a:	2300      	movhi	r3, #0
 800b65c:	4418      	add	r0, r3
 800b65e:	2300      	movs	r3, #0
 800b660:	4288      	cmp	r0, r1
 800b662:	d305      	bcc.n	800b670 <__copybits+0x40>
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	f853 6b04 	ldr.w	r6, [r3], #4
 800b66a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b66e:	e7eb      	b.n	800b648 <__copybits+0x18>
 800b670:	f840 3b04 	str.w	r3, [r0], #4
 800b674:	e7f4      	b.n	800b660 <__copybits+0x30>

0800b676 <__any_on>:
 800b676:	f100 0214 	add.w	r2, r0, #20
 800b67a:	6900      	ldr	r0, [r0, #16]
 800b67c:	114b      	asrs	r3, r1, #5
 800b67e:	4298      	cmp	r0, r3
 800b680:	b510      	push	{r4, lr}
 800b682:	db11      	blt.n	800b6a8 <__any_on+0x32>
 800b684:	dd0a      	ble.n	800b69c <__any_on+0x26>
 800b686:	f011 011f 	ands.w	r1, r1, #31
 800b68a:	d007      	beq.n	800b69c <__any_on+0x26>
 800b68c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b690:	fa24 f001 	lsr.w	r0, r4, r1
 800b694:	fa00 f101 	lsl.w	r1, r0, r1
 800b698:	428c      	cmp	r4, r1
 800b69a:	d10b      	bne.n	800b6b4 <__any_on+0x3e>
 800b69c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d803      	bhi.n	800b6ac <__any_on+0x36>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd10      	pop	{r4, pc}
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	e7f7      	b.n	800b69c <__any_on+0x26>
 800b6ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d0f5      	beq.n	800b6a0 <__any_on+0x2a>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	e7f6      	b.n	800b6a6 <__any_on+0x30>

0800b6b8 <realloc>:
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <realloc+0xc>)
 800b6ba:	460a      	mov	r2, r1
 800b6bc:	4601      	mov	r1, r0
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	f000 b802 	b.w	800b6c8 <_realloc_r>
 800b6c4:	2000000c 	.word	0x2000000c

0800b6c8 <_realloc_r>:
 800b6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4681      	mov	r9, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b929      	cbnz	r1, 800b6de <_realloc_r+0x16>
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	b003      	add	sp, #12
 800b6d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f7ff b8e1 	b.w	800a8a0 <_malloc_r>
 800b6de:	9201      	str	r2, [sp, #4]
 800b6e0:	f7ff fb6e 	bl	800adc0 <__malloc_lock>
 800b6e4:	9a01      	ldr	r2, [sp, #4]
 800b6e6:	f102 080b 	add.w	r8, r2, #11
 800b6ea:	f1b8 0f16 	cmp.w	r8, #22
 800b6ee:	d90b      	bls.n	800b708 <_realloc_r+0x40>
 800b6f0:	f038 0807 	bics.w	r8, r8, #7
 800b6f4:	d50a      	bpl.n	800b70c <_realloc_r+0x44>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	f8c9 3000 	str.w	r3, [r9]
 800b6fc:	f04f 0b00 	mov.w	fp, #0
 800b700:	4658      	mov	r0, fp
 800b702:	b003      	add	sp, #12
 800b704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b708:	f04f 0810 	mov.w	r8, #16
 800b70c:	4590      	cmp	r8, r2
 800b70e:	d3f2      	bcc.n	800b6f6 <_realloc_r+0x2e>
 800b710:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b714:	f025 0603 	bic.w	r6, r5, #3
 800b718:	45b0      	cmp	r8, r6
 800b71a:	f1a4 0a08 	sub.w	sl, r4, #8
 800b71e:	f340 816e 	ble.w	800b9fe <_realloc_r+0x336>
 800b722:	499b      	ldr	r1, [pc, #620]	; (800b990 <_realloc_r+0x2c8>)
 800b724:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b728:	eb0a 0306 	add.w	r3, sl, r6
 800b72c:	459c      	cmp	ip, r3
 800b72e:	6859      	ldr	r1, [r3, #4]
 800b730:	d005      	beq.n	800b73e <_realloc_r+0x76>
 800b732:	f021 0001 	bic.w	r0, r1, #1
 800b736:	4418      	add	r0, r3
 800b738:	6840      	ldr	r0, [r0, #4]
 800b73a:	07c7      	lsls	r7, r0, #31
 800b73c:	d427      	bmi.n	800b78e <_realloc_r+0xc6>
 800b73e:	f021 0103 	bic.w	r1, r1, #3
 800b742:	459c      	cmp	ip, r3
 800b744:	eb06 0701 	add.w	r7, r6, r1
 800b748:	d119      	bne.n	800b77e <_realloc_r+0xb6>
 800b74a:	f108 0010 	add.w	r0, r8, #16
 800b74e:	42b8      	cmp	r0, r7
 800b750:	dc1f      	bgt.n	800b792 <_realloc_r+0xca>
 800b752:	eb0a 0308 	add.w	r3, sl, r8
 800b756:	4a8e      	ldr	r2, [pc, #568]	; (800b990 <_realloc_r+0x2c8>)
 800b758:	eba7 0708 	sub.w	r7, r7, r8
 800b75c:	f047 0701 	orr.w	r7, r7, #1
 800b760:	6093      	str	r3, [r2, #8]
 800b762:	605f      	str	r7, [r3, #4]
 800b764:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	ea43 0308 	orr.w	r3, r3, r8
 800b770:	f844 3c04 	str.w	r3, [r4, #-4]
 800b774:	4648      	mov	r0, r9
 800b776:	f7ff fb29 	bl	800adcc <__malloc_unlock>
 800b77a:	46a3      	mov	fp, r4
 800b77c:	e7c0      	b.n	800b700 <_realloc_r+0x38>
 800b77e:	45b8      	cmp	r8, r7
 800b780:	dc07      	bgt.n	800b792 <_realloc_r+0xca>
 800b782:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b786:	60da      	str	r2, [r3, #12]
 800b788:	6093      	str	r3, [r2, #8]
 800b78a:	4655      	mov	r5, sl
 800b78c:	e07f      	b.n	800b88e <_realloc_r+0x1c6>
 800b78e:	2100      	movs	r1, #0
 800b790:	460b      	mov	r3, r1
 800b792:	07e8      	lsls	r0, r5, #31
 800b794:	f100 80e5 	bmi.w	800b962 <_realloc_r+0x29a>
 800b798:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b79c:	ebaa 0505 	sub.w	r5, sl, r5
 800b7a0:	6868      	ldr	r0, [r5, #4]
 800b7a2:	f020 0003 	bic.w	r0, r0, #3
 800b7a6:	eb00 0b06 	add.w	fp, r0, r6
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 80a5 	beq.w	800b8fa <_realloc_r+0x232>
 800b7b0:	459c      	cmp	ip, r3
 800b7b2:	eb01 070b 	add.w	r7, r1, fp
 800b7b6:	d14a      	bne.n	800b84e <_realloc_r+0x186>
 800b7b8:	f108 0310 	add.w	r3, r8, #16
 800b7bc:	42bb      	cmp	r3, r7
 800b7be:	f300 809c 	bgt.w	800b8fa <_realloc_r+0x232>
 800b7c2:	46ab      	mov	fp, r5
 800b7c4:	68eb      	ldr	r3, [r5, #12]
 800b7c6:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800b7ca:	60d3      	str	r3, [r2, #12]
 800b7cc:	609a      	str	r2, [r3, #8]
 800b7ce:	1f32      	subs	r2, r6, #4
 800b7d0:	2a24      	cmp	r2, #36	; 0x24
 800b7d2:	d837      	bhi.n	800b844 <_realloc_r+0x17c>
 800b7d4:	2a13      	cmp	r2, #19
 800b7d6:	d933      	bls.n	800b840 <_realloc_r+0x178>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	60ab      	str	r3, [r5, #8]
 800b7dc:	6863      	ldr	r3, [r4, #4]
 800b7de:	60eb      	str	r3, [r5, #12]
 800b7e0:	2a1b      	cmp	r2, #27
 800b7e2:	d81b      	bhi.n	800b81c <_realloc_r+0x154>
 800b7e4:	3408      	adds	r4, #8
 800b7e6:	f105 0310 	add.w	r3, r5, #16
 800b7ea:	6822      	ldr	r2, [r4, #0]
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	6862      	ldr	r2, [r4, #4]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	68a2      	ldr	r2, [r4, #8]
 800b7f4:	609a      	str	r2, [r3, #8]
 800b7f6:	eb05 0308 	add.w	r3, r5, r8
 800b7fa:	4a65      	ldr	r2, [pc, #404]	; (800b990 <_realloc_r+0x2c8>)
 800b7fc:	eba7 0708 	sub.w	r7, r7, r8
 800b800:	f047 0701 	orr.w	r7, r7, #1
 800b804:	6093      	str	r3, [r2, #8]
 800b806:	605f      	str	r7, [r3, #4]
 800b808:	686b      	ldr	r3, [r5, #4]
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	ea43 0308 	orr.w	r3, r3, r8
 800b812:	606b      	str	r3, [r5, #4]
 800b814:	4648      	mov	r0, r9
 800b816:	f7ff fad9 	bl	800adcc <__malloc_unlock>
 800b81a:	e771      	b.n	800b700 <_realloc_r+0x38>
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	612b      	str	r3, [r5, #16]
 800b820:	68e3      	ldr	r3, [r4, #12]
 800b822:	616b      	str	r3, [r5, #20]
 800b824:	2a24      	cmp	r2, #36	; 0x24
 800b826:	bf01      	itttt	eq
 800b828:	6923      	ldreq	r3, [r4, #16]
 800b82a:	61ab      	streq	r3, [r5, #24]
 800b82c:	6962      	ldreq	r2, [r4, #20]
 800b82e:	61ea      	streq	r2, [r5, #28]
 800b830:	bf19      	ittee	ne
 800b832:	3410      	addne	r4, #16
 800b834:	f105 0318 	addne.w	r3, r5, #24
 800b838:	f105 0320 	addeq.w	r3, r5, #32
 800b83c:	3418      	addeq	r4, #24
 800b83e:	e7d4      	b.n	800b7ea <_realloc_r+0x122>
 800b840:	465b      	mov	r3, fp
 800b842:	e7d2      	b.n	800b7ea <_realloc_r+0x122>
 800b844:	4621      	mov	r1, r4
 800b846:	4658      	mov	r0, fp
 800b848:	f7ff faa0 	bl	800ad8c <memmove>
 800b84c:	e7d3      	b.n	800b7f6 <_realloc_r+0x12e>
 800b84e:	45b8      	cmp	r8, r7
 800b850:	dc53      	bgt.n	800b8fa <_realloc_r+0x232>
 800b852:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b856:	4628      	mov	r0, r5
 800b858:	60da      	str	r2, [r3, #12]
 800b85a:	6093      	str	r3, [r2, #8]
 800b85c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b860:	68eb      	ldr	r3, [r5, #12]
 800b862:	60d3      	str	r3, [r2, #12]
 800b864:	609a      	str	r2, [r3, #8]
 800b866:	1f32      	subs	r2, r6, #4
 800b868:	2a24      	cmp	r2, #36	; 0x24
 800b86a:	d842      	bhi.n	800b8f2 <_realloc_r+0x22a>
 800b86c:	2a13      	cmp	r2, #19
 800b86e:	d908      	bls.n	800b882 <_realloc_r+0x1ba>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	60ab      	str	r3, [r5, #8]
 800b874:	6863      	ldr	r3, [r4, #4]
 800b876:	60eb      	str	r3, [r5, #12]
 800b878:	2a1b      	cmp	r2, #27
 800b87a:	d828      	bhi.n	800b8ce <_realloc_r+0x206>
 800b87c:	3408      	adds	r4, #8
 800b87e:	f105 0010 	add.w	r0, r5, #16
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	6863      	ldr	r3, [r4, #4]
 800b888:	6043      	str	r3, [r0, #4]
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	6083      	str	r3, [r0, #8]
 800b88e:	686b      	ldr	r3, [r5, #4]
 800b890:	eba7 0008 	sub.w	r0, r7, r8
 800b894:	280f      	cmp	r0, #15
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	eb05 0207 	add.w	r2, r5, r7
 800b89e:	f240 80b0 	bls.w	800ba02 <_realloc_r+0x33a>
 800b8a2:	eb05 0108 	add.w	r1, r5, r8
 800b8a6:	ea48 0303 	orr.w	r3, r8, r3
 800b8aa:	f040 0001 	orr.w	r0, r0, #1
 800b8ae:	606b      	str	r3, [r5, #4]
 800b8b0:	6048      	str	r0, [r1, #4]
 800b8b2:	6853      	ldr	r3, [r2, #4]
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	6053      	str	r3, [r2, #4]
 800b8ba:	3108      	adds	r1, #8
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f7fe fd11 	bl	800a2e4 <_free_r>
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f7ff fa82 	bl	800adcc <__malloc_unlock>
 800b8c8:	f105 0b08 	add.w	fp, r5, #8
 800b8cc:	e718      	b.n	800b700 <_realloc_r+0x38>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	612b      	str	r3, [r5, #16]
 800b8d2:	68e3      	ldr	r3, [r4, #12]
 800b8d4:	616b      	str	r3, [r5, #20]
 800b8d6:	2a24      	cmp	r2, #36	; 0x24
 800b8d8:	bf01      	itttt	eq
 800b8da:	6923      	ldreq	r3, [r4, #16]
 800b8dc:	61ab      	streq	r3, [r5, #24]
 800b8de:	6963      	ldreq	r3, [r4, #20]
 800b8e0:	61eb      	streq	r3, [r5, #28]
 800b8e2:	bf19      	ittee	ne
 800b8e4:	3410      	addne	r4, #16
 800b8e6:	f105 0018 	addne.w	r0, r5, #24
 800b8ea:	f105 0020 	addeq.w	r0, r5, #32
 800b8ee:	3418      	addeq	r4, #24
 800b8f0:	e7c7      	b.n	800b882 <_realloc_r+0x1ba>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	f7ff fa4a 	bl	800ad8c <memmove>
 800b8f8:	e7c9      	b.n	800b88e <_realloc_r+0x1c6>
 800b8fa:	45d8      	cmp	r8, fp
 800b8fc:	dc31      	bgt.n	800b962 <_realloc_r+0x29a>
 800b8fe:	4628      	mov	r0, r5
 800b900:	68eb      	ldr	r3, [r5, #12]
 800b902:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b906:	60d3      	str	r3, [r2, #12]
 800b908:	609a      	str	r2, [r3, #8]
 800b90a:	1f32      	subs	r2, r6, #4
 800b90c:	2a24      	cmp	r2, #36	; 0x24
 800b90e:	d824      	bhi.n	800b95a <_realloc_r+0x292>
 800b910:	2a13      	cmp	r2, #19
 800b912:	d908      	bls.n	800b926 <_realloc_r+0x25e>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	60ab      	str	r3, [r5, #8]
 800b918:	6863      	ldr	r3, [r4, #4]
 800b91a:	60eb      	str	r3, [r5, #12]
 800b91c:	2a1b      	cmp	r2, #27
 800b91e:	d80a      	bhi.n	800b936 <_realloc_r+0x26e>
 800b920:	3408      	adds	r4, #8
 800b922:	f105 0010 	add.w	r0, r5, #16
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	6043      	str	r3, [r0, #4]
 800b92e:	68a3      	ldr	r3, [r4, #8]
 800b930:	6083      	str	r3, [r0, #8]
 800b932:	465f      	mov	r7, fp
 800b934:	e7ab      	b.n	800b88e <_realloc_r+0x1c6>
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	612b      	str	r3, [r5, #16]
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	616b      	str	r3, [r5, #20]
 800b93e:	2a24      	cmp	r2, #36	; 0x24
 800b940:	bf01      	itttt	eq
 800b942:	6923      	ldreq	r3, [r4, #16]
 800b944:	61ab      	streq	r3, [r5, #24]
 800b946:	6963      	ldreq	r3, [r4, #20]
 800b948:	61eb      	streq	r3, [r5, #28]
 800b94a:	bf19      	ittee	ne
 800b94c:	3410      	addne	r4, #16
 800b94e:	f105 0018 	addne.w	r0, r5, #24
 800b952:	f105 0020 	addeq.w	r0, r5, #32
 800b956:	3418      	addeq	r4, #24
 800b958:	e7e5      	b.n	800b926 <_realloc_r+0x25e>
 800b95a:	4621      	mov	r1, r4
 800b95c:	f7ff fa16 	bl	800ad8c <memmove>
 800b960:	e7e7      	b.n	800b932 <_realloc_r+0x26a>
 800b962:	4611      	mov	r1, r2
 800b964:	4648      	mov	r0, r9
 800b966:	f7fe ff9b 	bl	800a8a0 <_malloc_r>
 800b96a:	4683      	mov	fp, r0
 800b96c:	2800      	cmp	r0, #0
 800b96e:	f43f af51 	beq.w	800b814 <_realloc_r+0x14c>
 800b972:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b976:	f023 0301 	bic.w	r3, r3, #1
 800b97a:	4453      	add	r3, sl
 800b97c:	f1a0 0208 	sub.w	r2, r0, #8
 800b980:	4293      	cmp	r3, r2
 800b982:	d107      	bne.n	800b994 <_realloc_r+0x2cc>
 800b984:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b988:	f027 0703 	bic.w	r7, r7, #3
 800b98c:	4437      	add	r7, r6
 800b98e:	e6fc      	b.n	800b78a <_realloc_r+0xc2>
 800b990:	200005a8 	.word	0x200005a8
 800b994:	1f32      	subs	r2, r6, #4
 800b996:	2a24      	cmp	r2, #36	; 0x24
 800b998:	d82d      	bhi.n	800b9f6 <_realloc_r+0x32e>
 800b99a:	2a13      	cmp	r2, #19
 800b99c:	d928      	bls.n	800b9f0 <_realloc_r+0x328>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	6003      	str	r3, [r0, #0]
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	6043      	str	r3, [r0, #4]
 800b9a6:	2a1b      	cmp	r2, #27
 800b9a8:	d80e      	bhi.n	800b9c8 <_realloc_r+0x300>
 800b9aa:	f104 0208 	add.w	r2, r4, #8
 800b9ae:	f100 0308 	add.w	r3, r0, #8
 800b9b2:	6811      	ldr	r1, [r2, #0]
 800b9b4:	6019      	str	r1, [r3, #0]
 800b9b6:	6851      	ldr	r1, [r2, #4]
 800b9b8:	6059      	str	r1, [r3, #4]
 800b9ba:	6892      	ldr	r2, [r2, #8]
 800b9bc:	609a      	str	r2, [r3, #8]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4648      	mov	r0, r9
 800b9c2:	f7fe fc8f 	bl	800a2e4 <_free_r>
 800b9c6:	e725      	b.n	800b814 <_realloc_r+0x14c>
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	6083      	str	r3, [r0, #8]
 800b9cc:	68e3      	ldr	r3, [r4, #12]
 800b9ce:	60c3      	str	r3, [r0, #12]
 800b9d0:	2a24      	cmp	r2, #36	; 0x24
 800b9d2:	bf01      	itttt	eq
 800b9d4:	6923      	ldreq	r3, [r4, #16]
 800b9d6:	6103      	streq	r3, [r0, #16]
 800b9d8:	6961      	ldreq	r1, [r4, #20]
 800b9da:	6141      	streq	r1, [r0, #20]
 800b9dc:	bf19      	ittee	ne
 800b9de:	f104 0210 	addne.w	r2, r4, #16
 800b9e2:	f100 0310 	addne.w	r3, r0, #16
 800b9e6:	f104 0218 	addeq.w	r2, r4, #24
 800b9ea:	f100 0318 	addeq.w	r3, r0, #24
 800b9ee:	e7e0      	b.n	800b9b2 <_realloc_r+0x2ea>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	e7dd      	b.n	800b9b2 <_realloc_r+0x2ea>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	f7ff f9c8 	bl	800ad8c <memmove>
 800b9fc:	e7df      	b.n	800b9be <_realloc_r+0x2f6>
 800b9fe:	4637      	mov	r7, r6
 800ba00:	e6c3      	b.n	800b78a <_realloc_r+0xc2>
 800ba02:	431f      	orrs	r7, r3
 800ba04:	606f      	str	r7, [r5, #4]
 800ba06:	6853      	ldr	r3, [r2, #4]
 800ba08:	f043 0301 	orr.w	r3, r3, #1
 800ba0c:	6053      	str	r3, [r2, #4]
 800ba0e:	e758      	b.n	800b8c2 <_realloc_r+0x1fa>

0800ba10 <lflush>:
 800ba10:	8983      	ldrh	r3, [r0, #12]
 800ba12:	f003 0309 	and.w	r3, r3, #9
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d101      	bne.n	800ba1e <lflush+0xe>
 800ba1a:	f7fe bb13 	b.w	800a044 <fflush>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	4770      	bx	lr
	...

0800ba24 <__srefill_r>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	4605      	mov	r5, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <__srefill_r+0x10>
 800ba2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba2e:	b90b      	cbnz	r3, 800ba34 <__srefill_r+0x10>
 800ba30:	f7fe fb60 	bl	800a0f4 <__sinit>
 800ba34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba38:	049f      	lsls	r7, r3, #18
 800ba3a:	d406      	bmi.n	800ba4a <__srefill_r+0x26>
 800ba3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba48:	6663      	str	r3, [r4, #100]	; 0x64
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba54:	069e      	lsls	r6, r3, #26
 800ba56:	d502      	bpl.n	800ba5e <__srefill_r+0x3a>
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	e05c      	b.n	800bb18 <__srefill_r+0xf4>
 800ba5e:	0758      	lsls	r0, r3, #29
 800ba60:	d448      	bmi.n	800baf4 <__srefill_r+0xd0>
 800ba62:	06d9      	lsls	r1, r3, #27
 800ba64:	d405      	bmi.n	800ba72 <__srefill_r+0x4e>
 800ba66:	2309      	movs	r3, #9
 800ba68:	602b      	str	r3, [r5, #0]
 800ba6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	e7f2      	b.n	800ba58 <__srefill_r+0x34>
 800ba72:	071a      	lsls	r2, r3, #28
 800ba74:	d50b      	bpl.n	800ba8e <__srefill_r+0x6a>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7fe fabd 	bl	8009ff8 <_fflush_r>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d1ea      	bne.n	800ba58 <__srefill_r+0x34>
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	60a0      	str	r0, [r4, #8]
 800ba86:	f023 0308 	bic.w	r3, r3, #8
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	61a0      	str	r0, [r4, #24]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f043 0304 	orr.w	r3, r3, #4
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	b91b      	cbnz	r3, 800baa2 <__srefill_r+0x7e>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f7fe feaf 	bl	800a800 <__smakebuf_r>
 800baa2:	89a6      	ldrh	r6, [r4, #12]
 800baa4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800baa8:	07b3      	lsls	r3, r6, #30
 800baaa:	d00f      	beq.n	800bacc <__srefill_r+0xa8>
 800baac:	2301      	movs	r3, #1
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	4b1b      	ldr	r3, [pc, #108]	; (800bb20 <__srefill_r+0xfc>)
 800bab2:	491c      	ldr	r1, [pc, #112]	; (800bb24 <__srefill_r+0x100>)
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	f006 0609 	and.w	r6, r6, #9
 800baba:	f7fe fe1d 	bl	800a6f8 <_fwalk>
 800babe:	2e09      	cmp	r6, #9
 800bac0:	81a7      	strh	r7, [r4, #12]
 800bac2:	d103      	bne.n	800bacc <__srefill_r+0xa8>
 800bac4:	4621      	mov	r1, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	f7fe fa08 	bl	8009edc <__sflush_r>
 800bacc:	6922      	ldr	r2, [r4, #16]
 800bace:	6a26      	ldr	r6, [r4, #32]
 800bad0:	6963      	ldr	r3, [r4, #20]
 800bad2:	69e1      	ldr	r1, [r4, #28]
 800bad4:	6022      	str	r2, [r4, #0]
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b0      	blx	r6
 800bada:	2800      	cmp	r0, #0
 800badc:	6060      	str	r0, [r4, #4]
 800bade:	dc1c      	bgt.n	800bb1a <__srefill_r+0xf6>
 800bae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae4:	bf17      	itett	ne
 800bae6:	2200      	movne	r2, #0
 800bae8:	f043 0320 	orreq.w	r3, r3, #32
 800baec:	6062      	strne	r2, [r4, #4]
 800baee:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800baf2:	e7bc      	b.n	800ba6e <__srefill_r+0x4a>
 800baf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800baf6:	2900      	cmp	r1, #0
 800baf8:	d0cd      	beq.n	800ba96 <__srefill_r+0x72>
 800bafa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bafe:	4299      	cmp	r1, r3
 800bb00:	d002      	beq.n	800bb08 <__srefill_r+0xe4>
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7fe fbee 	bl	800a2e4 <_free_r>
 800bb08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb0a:	6063      	str	r3, [r4, #4]
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	6320      	str	r0, [r4, #48]	; 0x30
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0c0      	beq.n	800ba96 <__srefill_r+0x72>
 800bb14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e7fc      	b.n	800bb18 <__srefill_r+0xf4>
 800bb1e:	bf00      	nop
 800bb20:	08010d20 	.word	0x08010d20
 800bb24:	0800ba11 	.word	0x0800ba11

0800bb28 <frexp>:
 800bb28:	2200      	movs	r2, #0
 800bb2a:	ee10 1a90 	vmov	r1, s1
 800bb2e:	6002      	str	r2, [r0, #0]
 800bb30:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <frexp+0x68>)
 800bb32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb36:	4293      	cmp	r3, r2
 800bb38:	dc23      	bgt.n	800bb82 <frexp+0x5a>
 800bb3a:	ee10 2a10 	vmov	r2, s0
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	d01f      	beq.n	800bb82 <frexp+0x5a>
 800bb42:	4a14      	ldr	r2, [pc, #80]	; (800bb94 <frexp+0x6c>)
 800bb44:	400a      	ands	r2, r1
 800bb46:	b952      	cbnz	r2, 800bb5e <frexp+0x36>
 800bb48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800bb88 <frexp+0x60>
 800bb4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb50:	ee10 1a90 	vmov	r1, s1
 800bb54:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800bb58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb5c:	6002      	str	r2, [r0, #0]
 800bb5e:	6802      	ldr	r2, [r0, #0]
 800bb60:	151b      	asrs	r3, r3, #20
 800bb62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb66:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bb70:	6003      	str	r3, [r0, #0]
 800bb72:	ec53 2b10 	vmov	r2, r3, d0
 800bb76:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800bb7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb7e:	ec43 2b10 	vmov	d0, r2, r3
 800bb82:	4770      	bx	lr
 800bb84:	f3af 8000 	nop.w
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	43500000 	.word	0x43500000
 800bb90:	7fefffff 	.word	0x7fefffff
 800bb94:	7ff00000 	.word	0x7ff00000

0800bb98 <_sbrk_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d06      	ldr	r5, [pc, #24]	; (800bbb4 <_sbrk_r+0x1c>)
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	f7f6 fd3e 	bl	8002624 <_sbrk>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_sbrk_r+0x1a>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_sbrk_r+0x1a>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	20000b44 	.word	0x20000b44

0800bbb8 <__sccl>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	780b      	ldrb	r3, [r1, #0]
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	2b5e      	cmp	r3, #94	; 0x5e
 800bbc0:	bf0b      	itete	eq
 800bbc2:	784b      	ldrbeq	r3, [r1, #1]
 800bbc4:	1c48      	addne	r0, r1, #1
 800bbc6:	1c88      	addeq	r0, r1, #2
 800bbc8:	2200      	movne	r2, #0
 800bbca:	bf08      	it	eq
 800bbcc:	2201      	moveq	r2, #1
 800bbce:	1e61      	subs	r1, r4, #1
 800bbd0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bbd4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bbd8:	42a9      	cmp	r1, r5
 800bbda:	d1fb      	bne.n	800bbd4 <__sccl+0x1c>
 800bbdc:	b90b      	cbnz	r3, 800bbe2 <__sccl+0x2a>
 800bbde:	3801      	subs	r0, #1
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	f082 0201 	eor.w	r2, r2, #1
 800bbe6:	54e2      	strb	r2, [r4, r3]
 800bbe8:	4605      	mov	r5, r0
 800bbea:	4628      	mov	r0, r5
 800bbec:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbf0:	292d      	cmp	r1, #45	; 0x2d
 800bbf2:	d006      	beq.n	800bc02 <__sccl+0x4a>
 800bbf4:	295d      	cmp	r1, #93	; 0x5d
 800bbf6:	d0f3      	beq.n	800bbe0 <__sccl+0x28>
 800bbf8:	b909      	cbnz	r1, 800bbfe <__sccl+0x46>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	e7f0      	b.n	800bbe0 <__sccl+0x28>
 800bbfe:	460b      	mov	r3, r1
 800bc00:	e7f1      	b.n	800bbe6 <__sccl+0x2e>
 800bc02:	786e      	ldrb	r6, [r5, #1]
 800bc04:	2e5d      	cmp	r6, #93	; 0x5d
 800bc06:	d0fa      	beq.n	800bbfe <__sccl+0x46>
 800bc08:	42b3      	cmp	r3, r6
 800bc0a:	dcf8      	bgt.n	800bbfe <__sccl+0x46>
 800bc0c:	3502      	adds	r5, #2
 800bc0e:	4619      	mov	r1, r3
 800bc10:	3101      	adds	r1, #1
 800bc12:	428e      	cmp	r6, r1
 800bc14:	5462      	strb	r2, [r4, r1]
 800bc16:	dcfb      	bgt.n	800bc10 <__sccl+0x58>
 800bc18:	1af1      	subs	r1, r6, r3
 800bc1a:	3901      	subs	r1, #1
 800bc1c:	1c58      	adds	r0, r3, #1
 800bc1e:	42b3      	cmp	r3, r6
 800bc20:	bfa8      	it	ge
 800bc22:	2100      	movge	r1, #0
 800bc24:	1843      	adds	r3, r0, r1
 800bc26:	e7e0      	b.n	800bbea <__sccl+0x32>

0800bc28 <nanf>:
 800bc28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc30 <nanf+0x8>
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	7fc00000 	.word	0x7fc00000

0800bc34 <sprintf>:
 800bc34:	b40e      	push	{r1, r2, r3}
 800bc36:	b500      	push	{lr}
 800bc38:	b09c      	sub	sp, #112	; 0x70
 800bc3a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc3c:	9002      	str	r0, [sp, #8]
 800bc3e:	9006      	str	r0, [sp, #24]
 800bc40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc44:	4809      	ldr	r0, [pc, #36]	; (800bc6c <sprintf+0x38>)
 800bc46:	9107      	str	r1, [sp, #28]
 800bc48:	9104      	str	r1, [sp, #16]
 800bc4a:	4909      	ldr	r1, [pc, #36]	; (800bc70 <sprintf+0x3c>)
 800bc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc50:	9105      	str	r1, [sp, #20]
 800bc52:	6800      	ldr	r0, [r0, #0]
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	a902      	add	r1, sp, #8
 800bc58:	f000 ffe2 	bl	800cc20 <_svfprintf_r>
 800bc5c:	9b02      	ldr	r3, [sp, #8]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	701a      	strb	r2, [r3, #0]
 800bc62:	b01c      	add	sp, #112	; 0x70
 800bc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc68:	b003      	add	sp, #12
 800bc6a:	4770      	bx	lr
 800bc6c:	2000000c 	.word	0x2000000c
 800bc70:	ffff0208 	.word	0xffff0208

0800bc74 <__sread>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	460c      	mov	r4, r1
 800bc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc7c:	f003 fcbc 	bl	800f5f8 <_read_r>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	bfab      	itete	ge
 800bc84:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800bc86:	89a3      	ldrhlt	r3, [r4, #12]
 800bc88:	181b      	addge	r3, r3, r0
 800bc8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc8e:	bfac      	ite	ge
 800bc90:	6523      	strge	r3, [r4, #80]	; 0x50
 800bc92:	81a3      	strhlt	r3, [r4, #12]
 800bc94:	bd10      	pop	{r4, pc}

0800bc96 <__swrite>:
 800bc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	898b      	ldrh	r3, [r1, #12]
 800bc9e:	05db      	lsls	r3, r3, #23
 800bca0:	4605      	mov	r5, r0
 800bca2:	460c      	mov	r4, r1
 800bca4:	4616      	mov	r6, r2
 800bca6:	d505      	bpl.n	800bcb4 <__swrite+0x1e>
 800bca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcac:	2302      	movs	r3, #2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f003 fc90 	bl	800f5d4 <_lseek_r>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcbe:	81a3      	strh	r3, [r4, #12]
 800bcc0:	4632      	mov	r2, r6
 800bcc2:	463b      	mov	r3, r7
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcca:	f002 bf63 	b.w	800eb94 <_write_r>

0800bcce <__sseek>:
 800bcce:	b510      	push	{r4, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd6:	f003 fc7d 	bl	800f5d4 <_lseek_r>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	bf15      	itete	ne
 800bce0:	6520      	strne	r0, [r4, #80]	; 0x50
 800bce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcea:	81a3      	strheq	r3, [r4, #12]
 800bcec:	bf18      	it	ne
 800bcee:	81a3      	strhne	r3, [r4, #12]
 800bcf0:	bd10      	pop	{r4, pc}

0800bcf2 <__sclose>:
 800bcf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf6:	f002 bff5 	b.w	800ece4 <_close_r>

0800bcfa <strncpy>:
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	3901      	subs	r1, #1
 800bcfe:	4603      	mov	r3, r0
 800bd00:	b132      	cbz	r2, 800bd10 <strncpy+0x16>
 800bd02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bd06:	f803 4b01 	strb.w	r4, [r3], #1
 800bd0a:	3a01      	subs	r2, #1
 800bd0c:	2c00      	cmp	r4, #0
 800bd0e:	d1f7      	bne.n	800bd00 <strncpy+0x6>
 800bd10:	441a      	add	r2, r3
 800bd12:	2100      	movs	r1, #0
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d100      	bne.n	800bd1a <strncpy+0x20>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd1e:	e7f9      	b.n	800bd14 <strncpy+0x1a>

0800bd20 <sulp>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4604      	mov	r4, r0
 800bd24:	460d      	mov	r5, r1
 800bd26:	4616      	mov	r6, r2
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	f7ff fb78 	bl	800b420 <__ulp>
 800bd30:	b17e      	cbz	r6, 800bd52 <sulp+0x32>
 800bd32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dd09      	ble.n	800bd52 <sulp+0x32>
 800bd3e:	051b      	lsls	r3, r3, #20
 800bd40:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bd44:	2000      	movs	r0, #0
 800bd46:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bd4a:	ec41 0b17 	vmov	d7, r0, r1
 800bd4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	0000      	movs	r0, r0
	...

0800bd58 <_strtod_l>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	ed2d 8b0e 	vpush	{d8-d14}
 800bd60:	b097      	sub	sp, #92	; 0x5c
 800bd62:	461f      	mov	r7, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	9312      	str	r3, [sp, #72]	; 0x48
 800bd68:	4ba1      	ldr	r3, [pc, #644]	; (800bff0 <_strtod_l+0x298>)
 800bd6a:	920d      	str	r2, [sp, #52]	; 0x34
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	4604      	mov	r4, r0
 800bd72:	4618      	mov	r0, r3
 800bd74:	468b      	mov	fp, r1
 800bd76:	f7f4 fa63 	bl	8000240 <strlen>
 800bd7a:	f04f 0800 	mov.w	r8, #0
 800bd7e:	4605      	mov	r5, r0
 800bd80:	f04f 0900 	mov.w	r9, #0
 800bd84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bd88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd8a:	7813      	ldrb	r3, [r2, #0]
 800bd8c:	2b2b      	cmp	r3, #43	; 0x2b
 800bd8e:	d04d      	beq.n	800be2c <_strtod_l+0xd4>
 800bd90:	d83a      	bhi.n	800be08 <_strtod_l+0xb0>
 800bd92:	2b0d      	cmp	r3, #13
 800bd94:	d833      	bhi.n	800bdfe <_strtod_l+0xa6>
 800bd96:	2b08      	cmp	r3, #8
 800bd98:	d833      	bhi.n	800be02 <_strtod_l+0xaa>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d03d      	beq.n	800be1a <_strtod_l+0xc2>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	9308      	str	r3, [sp, #32]
 800bda2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bda4:	7833      	ldrb	r3, [r6, #0]
 800bda6:	2b30      	cmp	r3, #48	; 0x30
 800bda8:	f040 80b0 	bne.w	800bf0c <_strtod_l+0x1b4>
 800bdac:	7873      	ldrb	r3, [r6, #1]
 800bdae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdb2:	2b58      	cmp	r3, #88	; 0x58
 800bdb4:	d167      	bne.n	800be86 <_strtod_l+0x12e>
 800bdb6:	9b08      	ldr	r3, [sp, #32]
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	ab12      	add	r3, sp, #72	; 0x48
 800bdbc:	9702      	str	r7, [sp, #8]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	4a8c      	ldr	r2, [pc, #560]	; (800bff4 <_strtod_l+0x29c>)
 800bdc2:	ab13      	add	r3, sp, #76	; 0x4c
 800bdc4:	a911      	add	r1, sp, #68	; 0x44
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f003 f8ec 	bl	800efa4 <__gethex>
 800bdcc:	f010 0507 	ands.w	r5, r0, #7
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	d005      	beq.n	800bde0 <_strtod_l+0x88>
 800bdd4:	2d06      	cmp	r5, #6
 800bdd6:	d12b      	bne.n	800be30 <_strtod_l+0xd8>
 800bdd8:	3601      	adds	r6, #1
 800bdda:	2300      	movs	r3, #0
 800bddc:	9611      	str	r6, [sp, #68]	; 0x44
 800bdde:	9308      	str	r3, [sp, #32]
 800bde0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f040 854e 	bne.w	800c884 <_strtod_l+0xb2c>
 800bde8:	9b08      	ldr	r3, [sp, #32]
 800bdea:	b1e3      	cbz	r3, 800be26 <_strtod_l+0xce>
 800bdec:	ec49 8b17 	vmov	d7, r8, r9
 800bdf0:	eeb1 0b47 	vneg.f64	d0, d7
 800bdf4:	b017      	add	sp, #92	; 0x5c
 800bdf6:	ecbd 8b0e 	vpop	{d8-d14}
 800bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d1cd      	bne.n	800bd9e <_strtod_l+0x46>
 800be02:	3201      	adds	r2, #1
 800be04:	9211      	str	r2, [sp, #68]	; 0x44
 800be06:	e7bf      	b.n	800bd88 <_strtod_l+0x30>
 800be08:	2b2d      	cmp	r3, #45	; 0x2d
 800be0a:	d1c8      	bne.n	800bd9e <_strtod_l+0x46>
 800be0c:	2301      	movs	r3, #1
 800be0e:	9308      	str	r3, [sp, #32]
 800be10:	1c53      	adds	r3, r2, #1
 800be12:	9311      	str	r3, [sp, #68]	; 0x44
 800be14:	7853      	ldrb	r3, [r2, #1]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1c3      	bne.n	800bda2 <_strtod_l+0x4a>
 800be1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800be20:	2b00      	cmp	r3, #0
 800be22:	f040 852d 	bne.w	800c880 <_strtod_l+0xb28>
 800be26:	ec49 8b10 	vmov	d0, r8, r9
 800be2a:	e7e3      	b.n	800bdf4 <_strtod_l+0x9c>
 800be2c:	2300      	movs	r3, #0
 800be2e:	e7ee      	b.n	800be0e <_strtod_l+0xb6>
 800be30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be32:	b13a      	cbz	r2, 800be44 <_strtod_l+0xec>
 800be34:	2135      	movs	r1, #53	; 0x35
 800be36:	a814      	add	r0, sp, #80	; 0x50
 800be38:	f7ff fbfa 	bl	800b630 <__copybits>
 800be3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be3e:	4620      	mov	r0, r4
 800be40:	f7fe ffef 	bl	800ae22 <_Bfree>
 800be44:	3d01      	subs	r5, #1
 800be46:	2d04      	cmp	r5, #4
 800be48:	d806      	bhi.n	800be58 <_strtod_l+0x100>
 800be4a:	e8df f005 	tbb	[pc, r5]
 800be4e:	030a      	.short	0x030a
 800be50:	1714      	.short	0x1714
 800be52:	0a          	.byte	0x0a
 800be53:	00          	.byte	0x00
 800be54:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800be58:	073f      	lsls	r7, r7, #28
 800be5a:	d5c1      	bpl.n	800bde0 <_strtod_l+0x88>
 800be5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800be60:	e7be      	b.n	800bde0 <_strtod_l+0x88>
 800be62:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800be66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be74:	e7f0      	b.n	800be58 <_strtod_l+0x100>
 800be76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800bff8 <_strtod_l+0x2a0>
 800be7a:	e7ed      	b.n	800be58 <_strtod_l+0x100>
 800be7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be80:	f04f 38ff 	mov.w	r8, #4294967295
 800be84:	e7e8      	b.n	800be58 <_strtod_l+0x100>
 800be86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	9211      	str	r2, [sp, #68]	; 0x44
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	2b30      	cmp	r3, #48	; 0x30
 800be90:	d0f9      	beq.n	800be86 <_strtod_l+0x12e>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0a4      	beq.n	800bde0 <_strtod_l+0x88>
 800be96:	2301      	movs	r3, #1
 800be98:	f04f 0a00 	mov.w	sl, #0
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea0:	930a      	str	r3, [sp, #40]	; 0x28
 800bea2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bea6:	f8cd a018 	str.w	sl, [sp, #24]
 800beaa:	220a      	movs	r2, #10
 800beac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800beae:	7807      	ldrb	r7, [r0, #0]
 800beb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800beb4:	b2d9      	uxtb	r1, r3
 800beb6:	2909      	cmp	r1, #9
 800beb8:	d92a      	bls.n	800bf10 <_strtod_l+0x1b8>
 800beba:	9907      	ldr	r1, [sp, #28]
 800bebc:	462a      	mov	r2, r5
 800bebe:	f003 fbb7 	bl	800f630 <strncmp>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d033      	beq.n	800bf2e <_strtod_l+0x1d6>
 800bec6:	2000      	movs	r0, #0
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	463a      	mov	r2, r7
 800becc:	4601      	mov	r1, r0
 800bece:	4607      	mov	r7, r0
 800bed0:	2a65      	cmp	r2, #101	; 0x65
 800bed2:	d001      	beq.n	800bed8 <_strtod_l+0x180>
 800bed4:	2a45      	cmp	r2, #69	; 0x45
 800bed6:	d117      	bne.n	800bf08 <_strtod_l+0x1b0>
 800bed8:	b91b      	cbnz	r3, 800bee2 <_strtod_l+0x18a>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	4303      	orrs	r3, r0
 800bede:	d09c      	beq.n	800be1a <_strtod_l+0xc2>
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bee6:	f10b 0201 	add.w	r2, fp, #1
 800beea:	9211      	str	r2, [sp, #68]	; 0x44
 800beec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bef0:	2a2b      	cmp	r2, #43	; 0x2b
 800bef2:	d071      	beq.n	800bfd8 <_strtod_l+0x280>
 800bef4:	2a2d      	cmp	r2, #45	; 0x2d
 800bef6:	d077      	beq.n	800bfe8 <_strtod_l+0x290>
 800bef8:	f04f 0e00 	mov.w	lr, #0
 800befc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bf00:	2d09      	cmp	r5, #9
 800bf02:	d97f      	bls.n	800c004 <_strtod_l+0x2ac>
 800bf04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bf08:	2500      	movs	r5, #0
 800bf0a:	e09b      	b.n	800c044 <_strtod_l+0x2ec>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e7c3      	b.n	800be98 <_strtod_l+0x140>
 800bf10:	9906      	ldr	r1, [sp, #24]
 800bf12:	2908      	cmp	r1, #8
 800bf14:	bfdd      	ittte	le
 800bf16:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bf18:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf1c:	9309      	strle	r3, [sp, #36]	; 0x24
 800bf1e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	3001      	adds	r0, #1
 800bf26:	3301      	adds	r3, #1
 800bf28:	9306      	str	r3, [sp, #24]
 800bf2a:	9011      	str	r0, [sp, #68]	; 0x44
 800bf2c:	e7be      	b.n	800beac <_strtod_l+0x154>
 800bf2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf30:	195a      	adds	r2, r3, r5
 800bf32:	9211      	str	r2, [sp, #68]	; 0x44
 800bf34:	5d5a      	ldrb	r2, [r3, r5]
 800bf36:	9b06      	ldr	r3, [sp, #24]
 800bf38:	b3a3      	cbz	r3, 800bfa4 <_strtod_l+0x24c>
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf40:	2909      	cmp	r1, #9
 800bf42:	d912      	bls.n	800bf6a <_strtod_l+0x212>
 800bf44:	2101      	movs	r1, #1
 800bf46:	e7c3      	b.n	800bed0 <_strtod_l+0x178>
 800bf48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	9211      	str	r2, [sp, #68]	; 0x44
 800bf4e:	785a      	ldrb	r2, [r3, #1]
 800bf50:	3001      	adds	r0, #1
 800bf52:	2a30      	cmp	r2, #48	; 0x30
 800bf54:	d0f8      	beq.n	800bf48 <_strtod_l+0x1f0>
 800bf56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf5a:	2b08      	cmp	r3, #8
 800bf5c:	f200 8497 	bhi.w	800c88e <_strtod_l+0xb36>
 800bf60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf62:	930a      	str	r3, [sp, #40]	; 0x28
 800bf64:	4607      	mov	r7, r0
 800bf66:	2000      	movs	r0, #0
 800bf68:	4603      	mov	r3, r0
 800bf6a:	3a30      	subs	r2, #48	; 0x30
 800bf6c:	f100 0101 	add.w	r1, r0, #1
 800bf70:	d012      	beq.n	800bf98 <_strtod_l+0x240>
 800bf72:	440f      	add	r7, r1
 800bf74:	eb00 0c03 	add.w	ip, r0, r3
 800bf78:	4619      	mov	r1, r3
 800bf7a:	250a      	movs	r5, #10
 800bf7c:	4561      	cmp	r1, ip
 800bf7e:	d113      	bne.n	800bfa8 <_strtod_l+0x250>
 800bf80:	1819      	adds	r1, r3, r0
 800bf82:	2908      	cmp	r1, #8
 800bf84:	f103 0301 	add.w	r3, r3, #1
 800bf88:	4403      	add	r3, r0
 800bf8a:	dc1c      	bgt.n	800bfc6 <_strtod_l+0x26e>
 800bf8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf8e:	210a      	movs	r1, #10
 800bf90:	fb01 2200 	mla	r2, r1, r0, r2
 800bf94:	9209      	str	r2, [sp, #36]	; 0x24
 800bf96:	2100      	movs	r1, #0
 800bf98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bf9a:	1c50      	adds	r0, r2, #1
 800bf9c:	9011      	str	r0, [sp, #68]	; 0x44
 800bf9e:	7852      	ldrb	r2, [r2, #1]
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	e7cb      	b.n	800bf3c <_strtod_l+0x1e4>
 800bfa4:	9806      	ldr	r0, [sp, #24]
 800bfa6:	e7d4      	b.n	800bf52 <_strtod_l+0x1fa>
 800bfa8:	2908      	cmp	r1, #8
 800bfaa:	dc04      	bgt.n	800bfb6 <_strtod_l+0x25e>
 800bfac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bfae:	436e      	muls	r6, r5
 800bfb0:	9609      	str	r6, [sp, #36]	; 0x24
 800bfb2:	3101      	adds	r1, #1
 800bfb4:	e7e2      	b.n	800bf7c <_strtod_l+0x224>
 800bfb6:	f101 0e01 	add.w	lr, r1, #1
 800bfba:	f1be 0f10 	cmp.w	lr, #16
 800bfbe:	bfd8      	it	le
 800bfc0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800bfc4:	e7f5      	b.n	800bfb2 <_strtod_l+0x25a>
 800bfc6:	2b10      	cmp	r3, #16
 800bfc8:	bfdc      	itt	le
 800bfca:	210a      	movle	r1, #10
 800bfcc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800bfd0:	e7e1      	b.n	800bf96 <_strtod_l+0x23e>
 800bfd2:	2700      	movs	r7, #0
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	e780      	b.n	800beda <_strtod_l+0x182>
 800bfd8:	f04f 0e00 	mov.w	lr, #0
 800bfdc:	f10b 0202 	add.w	r2, fp, #2
 800bfe0:	9211      	str	r2, [sp, #68]	; 0x44
 800bfe2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800bfe6:	e789      	b.n	800befc <_strtod_l+0x1a4>
 800bfe8:	f04f 0e01 	mov.w	lr, #1
 800bfec:	e7f6      	b.n	800bfdc <_strtod_l+0x284>
 800bfee:	bf00      	nop
 800bff0:	080111d8 	.word	0x080111d8
 800bff4:	080110a4 	.word	0x080110a4
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bffe:	1c55      	adds	r5, r2, #1
 800c000:	9511      	str	r5, [sp, #68]	; 0x44
 800c002:	7852      	ldrb	r2, [r2, #1]
 800c004:	2a30      	cmp	r2, #48	; 0x30
 800c006:	d0f9      	beq.n	800bffc <_strtod_l+0x2a4>
 800c008:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c00c:	2d08      	cmp	r5, #8
 800c00e:	f63f af7b 	bhi.w	800bf08 <_strtod_l+0x1b0>
 800c012:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c016:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c018:	9207      	str	r2, [sp, #28]
 800c01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c01c:	1c55      	adds	r5, r2, #1
 800c01e:	9511      	str	r5, [sp, #68]	; 0x44
 800c020:	7852      	ldrb	r2, [r2, #1]
 800c022:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c026:	2e09      	cmp	r6, #9
 800c028:	d937      	bls.n	800c09a <_strtod_l+0x342>
 800c02a:	9e07      	ldr	r6, [sp, #28]
 800c02c:	1bad      	subs	r5, r5, r6
 800c02e:	2d08      	cmp	r5, #8
 800c030:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c034:	dc02      	bgt.n	800c03c <_strtod_l+0x2e4>
 800c036:	4565      	cmp	r5, ip
 800c038:	bfa8      	it	ge
 800c03a:	4665      	movge	r5, ip
 800c03c:	f1be 0f00 	cmp.w	lr, #0
 800c040:	d000      	beq.n	800c044 <_strtod_l+0x2ec>
 800c042:	426d      	negs	r5, r5
 800c044:	2b00      	cmp	r3, #0
 800c046:	d14d      	bne.n	800c0e4 <_strtod_l+0x38c>
 800c048:	9b04      	ldr	r3, [sp, #16]
 800c04a:	4303      	orrs	r3, r0
 800c04c:	f47f aec8 	bne.w	800bde0 <_strtod_l+0x88>
 800c050:	2900      	cmp	r1, #0
 800c052:	f47f aee2 	bne.w	800be1a <_strtod_l+0xc2>
 800c056:	2a69      	cmp	r2, #105	; 0x69
 800c058:	d027      	beq.n	800c0aa <_strtod_l+0x352>
 800c05a:	dc24      	bgt.n	800c0a6 <_strtod_l+0x34e>
 800c05c:	2a49      	cmp	r2, #73	; 0x49
 800c05e:	d024      	beq.n	800c0aa <_strtod_l+0x352>
 800c060:	2a4e      	cmp	r2, #78	; 0x4e
 800c062:	f47f aeda 	bne.w	800be1a <_strtod_l+0xc2>
 800c066:	4996      	ldr	r1, [pc, #600]	; (800c2c0 <_strtod_l+0x568>)
 800c068:	a811      	add	r0, sp, #68	; 0x44
 800c06a:	f003 f9f3 	bl	800f454 <__match>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f43f aed3 	beq.w	800be1a <_strtod_l+0xc2>
 800c074:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	2b28      	cmp	r3, #40	; 0x28
 800c07a:	d12d      	bne.n	800c0d8 <_strtod_l+0x380>
 800c07c:	4991      	ldr	r1, [pc, #580]	; (800c2c4 <_strtod_l+0x56c>)
 800c07e:	aa14      	add	r2, sp, #80	; 0x50
 800c080:	a811      	add	r0, sp, #68	; 0x44
 800c082:	f003 f9fb 	bl	800f47c <__hexnan>
 800c086:	2805      	cmp	r0, #5
 800c088:	d126      	bne.n	800c0d8 <_strtod_l+0x380>
 800c08a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c08c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c090:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c094:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c098:	e6a2      	b.n	800bde0 <_strtod_l+0x88>
 800c09a:	250a      	movs	r5, #10
 800c09c:	fb05 250c 	mla	r5, r5, ip, r2
 800c0a0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c0a4:	e7b9      	b.n	800c01a <_strtod_l+0x2c2>
 800c0a6:	2a6e      	cmp	r2, #110	; 0x6e
 800c0a8:	e7db      	b.n	800c062 <_strtod_l+0x30a>
 800c0aa:	4987      	ldr	r1, [pc, #540]	; (800c2c8 <_strtod_l+0x570>)
 800c0ac:	a811      	add	r0, sp, #68	; 0x44
 800c0ae:	f003 f9d1 	bl	800f454 <__match>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f aeb1 	beq.w	800be1a <_strtod_l+0xc2>
 800c0b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ba:	4984      	ldr	r1, [pc, #528]	; (800c2cc <_strtod_l+0x574>)
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	a811      	add	r0, sp, #68	; 0x44
 800c0c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c0c2:	f003 f9c7 	bl	800f454 <__match>
 800c0c6:	b910      	cbnz	r0, 800c0ce <_strtod_l+0x376>
 800c0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9311      	str	r3, [sp, #68]	; 0x44
 800c0ce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800c2e0 <_strtod_l+0x588>
 800c0d2:	f04f 0800 	mov.w	r8, #0
 800c0d6:	e683      	b.n	800bde0 <_strtod_l+0x88>
 800c0d8:	487d      	ldr	r0, [pc, #500]	; (800c2d0 <_strtod_l+0x578>)
 800c0da:	f003 faa1 	bl	800f620 <nan>
 800c0de:	ec59 8b10 	vmov	r8, r9, d0
 800c0e2:	e67d      	b.n	800bde0 <_strtod_l+0x88>
 800c0e4:	1bea      	subs	r2, r5, r7
 800c0e6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c0ea:	9207      	str	r2, [sp, #28]
 800c0ec:	9a06      	ldr	r2, [sp, #24]
 800c0ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	bf08      	it	eq
 800c0f6:	461a      	moveq	r2, r3
 800c0f8:	2b10      	cmp	r3, #16
 800c0fa:	9206      	str	r2, [sp, #24]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	bfa8      	it	ge
 800c100:	2210      	movge	r2, #16
 800c102:	2b09      	cmp	r3, #9
 800c104:	ec59 8b17 	vmov	r8, r9, d7
 800c108:	dd0c      	ble.n	800c124 <_strtod_l+0x3cc>
 800c10a:	4972      	ldr	r1, [pc, #456]	; (800c2d4 <_strtod_l+0x57c>)
 800c10c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c110:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c114:	ee06 aa90 	vmov	s13, sl
 800c118:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c11c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c120:	ec59 8b16 	vmov	r8, r9, d6
 800c124:	2b0f      	cmp	r3, #15
 800c126:	dc36      	bgt.n	800c196 <_strtod_l+0x43e>
 800c128:	9907      	ldr	r1, [sp, #28]
 800c12a:	2900      	cmp	r1, #0
 800c12c:	f43f ae58 	beq.w	800bde0 <_strtod_l+0x88>
 800c130:	dd23      	ble.n	800c17a <_strtod_l+0x422>
 800c132:	2916      	cmp	r1, #22
 800c134:	dc0b      	bgt.n	800c14e <_strtod_l+0x3f6>
 800c136:	4b67      	ldr	r3, [pc, #412]	; (800c2d4 <_strtod_l+0x57c>)
 800c138:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c13c:	ed93 7b00 	vldr	d7, [r3]
 800c140:	ec49 8b16 	vmov	d6, r8, r9
 800c144:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c148:	ec59 8b17 	vmov	r8, r9, d7
 800c14c:	e648      	b.n	800bde0 <_strtod_l+0x88>
 800c14e:	9807      	ldr	r0, [sp, #28]
 800c150:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c154:	4281      	cmp	r1, r0
 800c156:	db1e      	blt.n	800c196 <_strtod_l+0x43e>
 800c158:	4a5e      	ldr	r2, [pc, #376]	; (800c2d4 <_strtod_l+0x57c>)
 800c15a:	f1c3 030f 	rsb	r3, r3, #15
 800c15e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c162:	ed91 7b00 	vldr	d7, [r1]
 800c166:	ec49 8b16 	vmov	d6, r8, r9
 800c16a:	1ac3      	subs	r3, r0, r3
 800c16c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c170:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c174:	ed92 6b00 	vldr	d6, [r2]
 800c178:	e7e4      	b.n	800c144 <_strtod_l+0x3ec>
 800c17a:	9907      	ldr	r1, [sp, #28]
 800c17c:	3116      	adds	r1, #22
 800c17e:	db0a      	blt.n	800c196 <_strtod_l+0x43e>
 800c180:	4b54      	ldr	r3, [pc, #336]	; (800c2d4 <_strtod_l+0x57c>)
 800c182:	1b7d      	subs	r5, r7, r5
 800c184:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c188:	ed95 7b00 	vldr	d7, [r5]
 800c18c:	ec49 8b16 	vmov	d6, r8, r9
 800c190:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c194:	e7d8      	b.n	800c148 <_strtod_l+0x3f0>
 800c196:	9907      	ldr	r1, [sp, #28]
 800c198:	1a9a      	subs	r2, r3, r2
 800c19a:	440a      	add	r2, r1
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	dd6f      	ble.n	800c280 <_strtod_l+0x528>
 800c1a0:	f012 000f 	ands.w	r0, r2, #15
 800c1a4:	d00a      	beq.n	800c1bc <_strtod_l+0x464>
 800c1a6:	494b      	ldr	r1, [pc, #300]	; (800c2d4 <_strtod_l+0x57c>)
 800c1a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c1ac:	ed91 7b00 	vldr	d7, [r1]
 800c1b0:	ec49 8b16 	vmov	d6, r8, r9
 800c1b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1b8:	ec59 8b17 	vmov	r8, r9, d7
 800c1bc:	f032 020f 	bics.w	r2, r2, #15
 800c1c0:	d04f      	beq.n	800c262 <_strtod_l+0x50a>
 800c1c2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c1c6:	dd22      	ble.n	800c20e <_strtod_l+0x4b6>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	462e      	mov	r6, r5
 800c1cc:	9506      	str	r5, [sp, #24]
 800c1ce:	462f      	mov	r7, r5
 800c1d0:	2322      	movs	r3, #34	; 0x22
 800c1d2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800c2e0 <_strtod_l+0x588>
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	f04f 0800 	mov.w	r8, #0
 800c1dc:	9b06      	ldr	r3, [sp, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f43f adfe 	beq.w	800bde0 <_strtod_l+0x88>
 800c1e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7fe fe1b 	bl	800ae22 <_Bfree>
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7fe fe17 	bl	800ae22 <_Bfree>
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7fe fe13 	bl	800ae22 <_Bfree>
 800c1fc:	9906      	ldr	r1, [sp, #24]
 800c1fe:	4620      	mov	r0, r4
 800c200:	f7fe fe0f 	bl	800ae22 <_Bfree>
 800c204:	4629      	mov	r1, r5
 800c206:	4620      	mov	r0, r4
 800c208:	f7fe fe0b 	bl	800ae22 <_Bfree>
 800c20c:	e5e8      	b.n	800bde0 <_strtod_l+0x88>
 800c20e:	2000      	movs	r0, #0
 800c210:	ec49 8b17 	vmov	d7, r8, r9
 800c214:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800c2d8 <_strtod_l+0x580>
 800c218:	1112      	asrs	r2, r2, #4
 800c21a:	4601      	mov	r1, r0
 800c21c:	2a01      	cmp	r2, #1
 800c21e:	dc23      	bgt.n	800c268 <_strtod_l+0x510>
 800c220:	b108      	cbz	r0, 800c226 <_strtod_l+0x4ce>
 800c222:	ec59 8b17 	vmov	r8, r9, d7
 800c226:	4a2c      	ldr	r2, [pc, #176]	; (800c2d8 <_strtod_l+0x580>)
 800c228:	482c      	ldr	r0, [pc, #176]	; (800c2dc <_strtod_l+0x584>)
 800c22a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c22e:	ed92 7b00 	vldr	d7, [r2]
 800c232:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c236:	ec49 8b16 	vmov	d6, r8, r9
 800c23a:	4a29      	ldr	r2, [pc, #164]	; (800c2e0 <_strtod_l+0x588>)
 800c23c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c240:	ee17 1a90 	vmov	r1, s15
 800c244:	400a      	ands	r2, r1
 800c246:	4282      	cmp	r2, r0
 800c248:	ec59 8b17 	vmov	r8, r9, d7
 800c24c:	d8bc      	bhi.n	800c1c8 <_strtod_l+0x470>
 800c24e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c252:	4282      	cmp	r2, r0
 800c254:	bf86      	itte	hi
 800c256:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c2e4 <_strtod_l+0x58c>
 800c25a:	f04f 38ff 	movhi.w	r8, #4294967295
 800c25e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c262:	2200      	movs	r2, #0
 800c264:	9204      	str	r2, [sp, #16]
 800c266:	e078      	b.n	800c35a <_strtod_l+0x602>
 800c268:	07d6      	lsls	r6, r2, #31
 800c26a:	d504      	bpl.n	800c276 <_strtod_l+0x51e>
 800c26c:	ed9c 6b00 	vldr	d6, [ip]
 800c270:	2001      	movs	r0, #1
 800c272:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c276:	3101      	adds	r1, #1
 800c278:	1052      	asrs	r2, r2, #1
 800c27a:	f10c 0c08 	add.w	ip, ip, #8
 800c27e:	e7cd      	b.n	800c21c <_strtod_l+0x4c4>
 800c280:	d0ef      	beq.n	800c262 <_strtod_l+0x50a>
 800c282:	4252      	negs	r2, r2
 800c284:	f012 000f 	ands.w	r0, r2, #15
 800c288:	d00a      	beq.n	800c2a0 <_strtod_l+0x548>
 800c28a:	4912      	ldr	r1, [pc, #72]	; (800c2d4 <_strtod_l+0x57c>)
 800c28c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c290:	ed91 7b00 	vldr	d7, [r1]
 800c294:	ec49 8b16 	vmov	d6, r8, r9
 800c298:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c29c:	ec59 8b17 	vmov	r8, r9, d7
 800c2a0:	1112      	asrs	r2, r2, #4
 800c2a2:	d0de      	beq.n	800c262 <_strtod_l+0x50a>
 800c2a4:	2a1f      	cmp	r2, #31
 800c2a6:	dd1f      	ble.n	800c2e8 <_strtod_l+0x590>
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	462e      	mov	r6, r5
 800c2ac:	9506      	str	r5, [sp, #24]
 800c2ae:	462f      	mov	r7, r5
 800c2b0:	2322      	movs	r3, #34	; 0x22
 800c2b2:	f04f 0800 	mov.w	r8, #0
 800c2b6:	f04f 0900 	mov.w	r9, #0
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	e78e      	b.n	800c1dc <_strtod_l+0x484>
 800c2be:	bf00      	nop
 800c2c0:	08010d56 	.word	0x08010d56
 800c2c4:	080110b8 	.word	0x080110b8
 800c2c8:	08010d4e 	.word	0x08010d4e
 800c2cc:	08010ecc 	.word	0x08010ecc
 800c2d0:	08011173 	.word	0x08011173
 800c2d4:	08010fd0 	.word	0x08010fd0
 800c2d8:	08010fa8 	.word	0x08010fa8
 800c2dc:	7ca00000 	.word	0x7ca00000
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	7fefffff 	.word	0x7fefffff
 800c2e8:	f012 0110 	ands.w	r1, r2, #16
 800c2ec:	bf18      	it	ne
 800c2ee:	216a      	movne	r1, #106	; 0x6a
 800c2f0:	9104      	str	r1, [sp, #16]
 800c2f2:	ec49 8b17 	vmov	d7, r8, r9
 800c2f6:	49be      	ldr	r1, [pc, #760]	; (800c5f0 <_strtod_l+0x898>)
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	07d6      	lsls	r6, r2, #31
 800c2fc:	d504      	bpl.n	800c308 <_strtod_l+0x5b0>
 800c2fe:	ed91 6b00 	vldr	d6, [r1]
 800c302:	2001      	movs	r0, #1
 800c304:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c308:	1052      	asrs	r2, r2, #1
 800c30a:	f101 0108 	add.w	r1, r1, #8
 800c30e:	d1f4      	bne.n	800c2fa <_strtod_l+0x5a2>
 800c310:	b108      	cbz	r0, 800c316 <_strtod_l+0x5be>
 800c312:	ec59 8b17 	vmov	r8, r9, d7
 800c316:	9a04      	ldr	r2, [sp, #16]
 800c318:	b1c2      	cbz	r2, 800c34c <_strtod_l+0x5f4>
 800c31a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c31e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c322:	2a00      	cmp	r2, #0
 800c324:	4648      	mov	r0, r9
 800c326:	dd11      	ble.n	800c34c <_strtod_l+0x5f4>
 800c328:	2a1f      	cmp	r2, #31
 800c32a:	f340 812e 	ble.w	800c58a <_strtod_l+0x832>
 800c32e:	2a34      	cmp	r2, #52	; 0x34
 800c330:	bfde      	ittt	le
 800c332:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c336:	f04f 32ff 	movle.w	r2, #4294967295
 800c33a:	fa02 f101 	lslle.w	r1, r2, r1
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	bfcc      	ite	gt
 800c344:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c348:	ea01 0900 	andle.w	r9, r1, r0
 800c34c:	ec49 8b17 	vmov	d7, r8, r9
 800c350:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c358:	d0a6      	beq.n	800c2a8 <_strtod_l+0x550>
 800c35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c35c:	9200      	str	r2, [sp, #0]
 800c35e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c360:	9a06      	ldr	r2, [sp, #24]
 800c362:	4620      	mov	r0, r4
 800c364:	f7fe fdac 	bl	800aec0 <__s2b>
 800c368:	9006      	str	r0, [sp, #24]
 800c36a:	2800      	cmp	r0, #0
 800c36c:	f43f af2c 	beq.w	800c1c8 <_strtod_l+0x470>
 800c370:	9b07      	ldr	r3, [sp, #28]
 800c372:	1b7d      	subs	r5, r7, r5
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfb4      	ite	lt
 800c378:	462b      	movlt	r3, r5
 800c37a:	2300      	movge	r3, #0
 800c37c:	9309      	str	r3, [sp, #36]	; 0x24
 800c37e:	9b07      	ldr	r3, [sp, #28]
 800c380:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c5d0 <_strtod_l+0x878>
 800c384:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c5d8 <_strtod_l+0x880>
 800c388:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c5e0 <_strtod_l+0x888>
 800c38c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c390:	2500      	movs	r5, #0
 800c392:	930c      	str	r3, [sp, #48]	; 0x30
 800c394:	462e      	mov	r6, r5
 800c396:	9b06      	ldr	r3, [sp, #24]
 800c398:	4620      	mov	r0, r4
 800c39a:	6859      	ldr	r1, [r3, #4]
 800c39c:	f7fe fd1c 	bl	800add8 <_Balloc>
 800c3a0:	4607      	mov	r7, r0
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f43f af14 	beq.w	800c1d0 <_strtod_l+0x478>
 800c3a8:	9b06      	ldr	r3, [sp, #24]
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	3202      	adds	r2, #2
 800c3ae:	f103 010c 	add.w	r1, r3, #12
 800c3b2:	0092      	lsls	r2, r2, #2
 800c3b4:	300c      	adds	r0, #12
 800c3b6:	f7fe fcdb 	bl	800ad70 <memcpy>
 800c3ba:	ec49 8b10 	vmov	d0, r8, r9
 800c3be:	aa14      	add	r2, sp, #80	; 0x50
 800c3c0:	a913      	add	r1, sp, #76	; 0x4c
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f7ff f8a8 	bl	800b518 <__d2b>
 800c3c8:	ec49 8b18 	vmov	d8, r8, r9
 800c3cc:	9012      	str	r0, [sp, #72]	; 0x48
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f43f aefe 	beq.w	800c1d0 <_strtod_l+0x478>
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f7fe fe0c 	bl	800aff4 <__i2b>
 800c3dc:	4606      	mov	r6, r0
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f43f aef6 	beq.w	800c1d0 <_strtod_l+0x478>
 800c3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	bfab      	itete	ge
 800c3ec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c3ee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c3f0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c3f4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c3f8:	bfac      	ite	ge
 800c3fa:	eb03 0b02 	addge.w	fp, r3, r2
 800c3fe:	eba2 0a03 	sublt.w	sl, r2, r3
 800c402:	9a04      	ldr	r2, [sp, #16]
 800c404:	1a9b      	subs	r3, r3, r2
 800c406:	440b      	add	r3, r1
 800c408:	4a7a      	ldr	r2, [pc, #488]	; (800c5f4 <_strtod_l+0x89c>)
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4293      	cmp	r3, r2
 800c40e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c412:	f280 80cd 	bge.w	800c5b0 <_strtod_l+0x858>
 800c416:	1ad2      	subs	r2, r2, r3
 800c418:	2a1f      	cmp	r2, #31
 800c41a:	eba1 0102 	sub.w	r1, r1, r2
 800c41e:	f04f 0001 	mov.w	r0, #1
 800c422:	f300 80b9 	bgt.w	800c598 <_strtod_l+0x840>
 800c426:	fa00 f302 	lsl.w	r3, r0, r2
 800c42a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c42c:	2300      	movs	r3, #0
 800c42e:	930a      	str	r3, [sp, #40]	; 0x28
 800c430:	eb0b 0301 	add.w	r3, fp, r1
 800c434:	9a04      	ldr	r2, [sp, #16]
 800c436:	459b      	cmp	fp, r3
 800c438:	448a      	add	sl, r1
 800c43a:	4492      	add	sl, r2
 800c43c:	465a      	mov	r2, fp
 800c43e:	bfa8      	it	ge
 800c440:	461a      	movge	r2, r3
 800c442:	4552      	cmp	r2, sl
 800c444:	bfa8      	it	ge
 800c446:	4652      	movge	r2, sl
 800c448:	2a00      	cmp	r2, #0
 800c44a:	bfc2      	ittt	gt
 800c44c:	1a9b      	subgt	r3, r3, r2
 800c44e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c452:	ebab 0b02 	subgt.w	fp, fp, r2
 800c456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c458:	2a00      	cmp	r2, #0
 800c45a:	dd18      	ble.n	800c48e <_strtod_l+0x736>
 800c45c:	4631      	mov	r1, r6
 800c45e:	4620      	mov	r0, r4
 800c460:	930f      	str	r3, [sp, #60]	; 0x3c
 800c462:	f7fe fe87 	bl	800b174 <__pow5mult>
 800c466:	4606      	mov	r6, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	f43f aeb1 	beq.w	800c1d0 <_strtod_l+0x478>
 800c46e:	4601      	mov	r1, r0
 800c470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c472:	4620      	mov	r0, r4
 800c474:	f7fe fdd4 	bl	800b020 <__multiply>
 800c478:	900e      	str	r0, [sp, #56]	; 0x38
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f43f aea8 	beq.w	800c1d0 <_strtod_l+0x478>
 800c480:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c482:	4620      	mov	r0, r4
 800c484:	f7fe fccd 	bl	800ae22 <_Bfree>
 800c488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c48c:	9212      	str	r2, [sp, #72]	; 0x48
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f300 8093 	bgt.w	800c5ba <_strtod_l+0x862>
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	2b00      	cmp	r3, #0
 800c498:	dd08      	ble.n	800c4ac <_strtod_l+0x754>
 800c49a:	4639      	mov	r1, r7
 800c49c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f7fe fe68 	bl	800b174 <__pow5mult>
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	f43f ae92 	beq.w	800c1d0 <_strtod_l+0x478>
 800c4ac:	f1ba 0f00 	cmp.w	sl, #0
 800c4b0:	dd08      	ble.n	800c4c4 <_strtod_l+0x76c>
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	4652      	mov	r2, sl
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f7fe fe9c 	bl	800b1f4 <__lshift>
 800c4bc:	4607      	mov	r7, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f43f ae86 	beq.w	800c1d0 <_strtod_l+0x478>
 800c4c4:	f1bb 0f00 	cmp.w	fp, #0
 800c4c8:	dd08      	ble.n	800c4dc <_strtod_l+0x784>
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	465a      	mov	r2, fp
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7fe fe90 	bl	800b1f4 <__lshift>
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f ae7a 	beq.w	800c1d0 <_strtod_l+0x478>
 800c4dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c4de:	463a      	mov	r2, r7
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7fe ff13 	bl	800b30c <__mdiff>
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f ae71 	beq.w	800c1d0 <_strtod_l+0x478>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c4f4:	60c3      	str	r3, [r0, #12]
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	f7fe feec 	bl	800b2d4 <__mcmp>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	da7d      	bge.n	800c5fc <_strtod_l+0x8a4>
 800c500:	ea5a 0308 	orrs.w	r3, sl, r8
 800c504:	f040 80a3 	bne.w	800c64e <_strtod_l+0x8f6>
 800c508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 809e 	bne.w	800c64e <_strtod_l+0x8f6>
 800c512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c516:	0d1b      	lsrs	r3, r3, #20
 800c518:	051b      	lsls	r3, r3, #20
 800c51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c51e:	f240 8096 	bls.w	800c64e <_strtod_l+0x8f6>
 800c522:	696b      	ldr	r3, [r5, #20]
 800c524:	b91b      	cbnz	r3, 800c52e <_strtod_l+0x7d6>
 800c526:	692b      	ldr	r3, [r5, #16]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	f340 8090 	ble.w	800c64e <_strtod_l+0x8f6>
 800c52e:	4629      	mov	r1, r5
 800c530:	2201      	movs	r2, #1
 800c532:	4620      	mov	r0, r4
 800c534:	f7fe fe5e 	bl	800b1f4 <__lshift>
 800c538:	4631      	mov	r1, r6
 800c53a:	4605      	mov	r5, r0
 800c53c:	f7fe feca 	bl	800b2d4 <__mcmp>
 800c540:	2800      	cmp	r0, #0
 800c542:	f340 8084 	ble.w	800c64e <_strtod_l+0x8f6>
 800c546:	9904      	ldr	r1, [sp, #16]
 800c548:	4a2b      	ldr	r2, [pc, #172]	; (800c5f8 <_strtod_l+0x8a0>)
 800c54a:	464b      	mov	r3, r9
 800c54c:	2900      	cmp	r1, #0
 800c54e:	f000 809d 	beq.w	800c68c <_strtod_l+0x934>
 800c552:	ea02 0109 	and.w	r1, r2, r9
 800c556:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c55a:	f300 8097 	bgt.w	800c68c <_strtod_l+0x934>
 800c55e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c562:	f77f aea5 	ble.w	800c2b0 <_strtod_l+0x558>
 800c566:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5e8 <_strtod_l+0x890>
 800c56a:	ec49 8b16 	vmov	d6, r8, r9
 800c56e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c572:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c576:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	bf08      	it	eq
 800c57e:	2322      	moveq	r3, #34	; 0x22
 800c580:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c584:	bf08      	it	eq
 800c586:	6023      	streq	r3, [r4, #0]
 800c588:	e62c      	b.n	800c1e4 <_strtod_l+0x48c>
 800c58a:	f04f 31ff 	mov.w	r1, #4294967295
 800c58e:	fa01 f202 	lsl.w	r2, r1, r2
 800c592:	ea02 0808 	and.w	r8, r2, r8
 800c596:	e6d9      	b.n	800c34c <_strtod_l+0x5f4>
 800c598:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c59c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c5a0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c5a4:	33e2      	adds	r3, #226	; 0xe2
 800c5a6:	fa00 f303 	lsl.w	r3, r0, r3
 800c5aa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c5ae:	e73f      	b.n	800c430 <_strtod_l+0x6d8>
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c5b8:	e73a      	b.n	800c430 <_strtod_l+0x6d8>
 800c5ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7fe fe18 	bl	800b1f4 <__lshift>
 800c5c4:	9012      	str	r0, [sp, #72]	; 0x48
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f47f af64 	bne.w	800c494 <_strtod_l+0x73c>
 800c5cc:	e600      	b.n	800c1d0 <_strtod_l+0x478>
 800c5ce:	bf00      	nop
 800c5d0:	94a03595 	.word	0x94a03595
 800c5d4:	3fcfffff 	.word	0x3fcfffff
 800c5d8:	94a03595 	.word	0x94a03595
 800c5dc:	3fdfffff 	.word	0x3fdfffff
 800c5e0:	35afe535 	.word	0x35afe535
 800c5e4:	3fe00000 	.word	0x3fe00000
 800c5e8:	00000000 	.word	0x00000000
 800c5ec:	39500000 	.word	0x39500000
 800c5f0:	080110d0 	.word	0x080110d0
 800c5f4:	fffffc02 	.word	0xfffffc02
 800c5f8:	7ff00000 	.word	0x7ff00000
 800c5fc:	46cb      	mov	fp, r9
 800c5fe:	d15f      	bne.n	800c6c0 <_strtod_l+0x968>
 800c600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c604:	f1ba 0f00 	cmp.w	sl, #0
 800c608:	d02a      	beq.n	800c660 <_strtod_l+0x908>
 800c60a:	4aa7      	ldr	r2, [pc, #668]	; (800c8a8 <_strtod_l+0xb50>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d12b      	bne.n	800c668 <_strtod_l+0x910>
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	4642      	mov	r2, r8
 800c614:	b1fb      	cbz	r3, 800c656 <_strtod_l+0x8fe>
 800c616:	4ba5      	ldr	r3, [pc, #660]	; (800c8ac <_strtod_l+0xb54>)
 800c618:	ea09 0303 	and.w	r3, r9, r3
 800c61c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c620:	f04f 31ff 	mov.w	r1, #4294967295
 800c624:	d81a      	bhi.n	800c65c <_strtod_l+0x904>
 800c626:	0d1b      	lsrs	r3, r3, #20
 800c628:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c62c:	fa01 f303 	lsl.w	r3, r1, r3
 800c630:	429a      	cmp	r2, r3
 800c632:	d119      	bne.n	800c668 <_strtod_l+0x910>
 800c634:	4b9e      	ldr	r3, [pc, #632]	; (800c8b0 <_strtod_l+0xb58>)
 800c636:	459b      	cmp	fp, r3
 800c638:	d102      	bne.n	800c640 <_strtod_l+0x8e8>
 800c63a:	3201      	adds	r2, #1
 800c63c:	f43f adc8 	beq.w	800c1d0 <_strtod_l+0x478>
 800c640:	4b9a      	ldr	r3, [pc, #616]	; (800c8ac <_strtod_l+0xb54>)
 800c642:	ea0b 0303 	and.w	r3, fp, r3
 800c646:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c64a:	f04f 0800 	mov.w	r8, #0
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d188      	bne.n	800c566 <_strtod_l+0x80e>
 800c654:	e5c6      	b.n	800c1e4 <_strtod_l+0x48c>
 800c656:	f04f 33ff 	mov.w	r3, #4294967295
 800c65a:	e7e9      	b.n	800c630 <_strtod_l+0x8d8>
 800c65c:	460b      	mov	r3, r1
 800c65e:	e7e7      	b.n	800c630 <_strtod_l+0x8d8>
 800c660:	ea53 0308 	orrs.w	r3, r3, r8
 800c664:	f43f af6f 	beq.w	800c546 <_strtod_l+0x7ee>
 800c668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c66a:	b1cb      	cbz	r3, 800c6a0 <_strtod_l+0x948>
 800c66c:	ea13 0f0b 	tst.w	r3, fp
 800c670:	d0ed      	beq.n	800c64e <_strtod_l+0x8f6>
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	4640      	mov	r0, r8
 800c676:	4649      	mov	r1, r9
 800c678:	f1ba 0f00 	cmp.w	sl, #0
 800c67c:	d014      	beq.n	800c6a8 <_strtod_l+0x950>
 800c67e:	f7ff fb4f 	bl	800bd20 <sulp>
 800c682:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c686:	ec59 8b17 	vmov	r8, r9, d7
 800c68a:	e7e0      	b.n	800c64e <_strtod_l+0x8f6>
 800c68c:	4013      	ands	r3, r2
 800c68e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c692:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c696:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c69a:	f04f 38ff 	mov.w	r8, #4294967295
 800c69e:	e7d6      	b.n	800c64e <_strtod_l+0x8f6>
 800c6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a2:	ea13 0f08 	tst.w	r3, r8
 800c6a6:	e7e3      	b.n	800c670 <_strtod_l+0x918>
 800c6a8:	f7ff fb3a 	bl	800bd20 <sulp>
 800c6ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c6b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b8:	ec59 8b10 	vmov	r8, r9, d0
 800c6bc:	d1c7      	bne.n	800c64e <_strtod_l+0x8f6>
 800c6be:	e5f7      	b.n	800c2b0 <_strtod_l+0x558>
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f7fe ff84 	bl	800b5d0 <__ratio>
 800c6c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c6cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d4:	d865      	bhi.n	800c7a2 <_strtod_l+0xa4a>
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	d042      	beq.n	800c762 <_strtod_l+0xa0a>
 800c6dc:	4b75      	ldr	r3, [pc, #468]	; (800c8b4 <_strtod_l+0xb5c>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c6e4:	4871      	ldr	r0, [pc, #452]	; (800c8ac <_strtod_l+0xb54>)
 800c6e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c8c0 <_strtod_l+0xb68>
 800c6ea:	ea0b 0100 	and.w	r1, fp, r0
 800c6ee:	4561      	cmp	r1, ip
 800c6f0:	f040 808e 	bne.w	800c810 <_strtod_l+0xab8>
 800c6f4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c6f8:	ec49 8b10 	vmov	d0, r8, r9
 800c6fc:	ec43 2b1c 	vmov	d12, r2, r3
 800c700:	910a      	str	r1, [sp, #40]	; 0x28
 800c702:	f7fe fe8d 	bl	800b420 <__ulp>
 800c706:	ec49 8b1e 	vmov	d14, r8, r9
 800c70a:	4868      	ldr	r0, [pc, #416]	; (800c8ac <_strtod_l+0xb54>)
 800c70c:	eeac eb00 	vfma.f64	d14, d12, d0
 800c710:	ee1e 3a90 	vmov	r3, s29
 800c714:	4a68      	ldr	r2, [pc, #416]	; (800c8b8 <_strtod_l+0xb60>)
 800c716:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c718:	4018      	ands	r0, r3
 800c71a:	4290      	cmp	r0, r2
 800c71c:	ec59 8b1e 	vmov	r8, r9, d14
 800c720:	d94e      	bls.n	800c7c0 <_strtod_l+0xa68>
 800c722:	ee18 3a90 	vmov	r3, s17
 800c726:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d104      	bne.n	800c738 <_strtod_l+0x9e0>
 800c72e:	ee18 3a10 	vmov	r3, s16
 800c732:	3301      	adds	r3, #1
 800c734:	f43f ad4c 	beq.w	800c1d0 <_strtod_l+0x478>
 800c738:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c8b0 <_strtod_l+0xb58>
 800c73c:	f04f 38ff 	mov.w	r8, #4294967295
 800c740:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c742:	4620      	mov	r0, r4
 800c744:	f7fe fb6d 	bl	800ae22 <_Bfree>
 800c748:	4639      	mov	r1, r7
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7fe fb69 	bl	800ae22 <_Bfree>
 800c750:	4631      	mov	r1, r6
 800c752:	4620      	mov	r0, r4
 800c754:	f7fe fb65 	bl	800ae22 <_Bfree>
 800c758:	4629      	mov	r1, r5
 800c75a:	4620      	mov	r0, r4
 800c75c:	f7fe fb61 	bl	800ae22 <_Bfree>
 800c760:	e619      	b.n	800c396 <_strtod_l+0x63e>
 800c762:	f1b8 0f00 	cmp.w	r8, #0
 800c766:	d112      	bne.n	800c78e <_strtod_l+0xa36>
 800c768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c76c:	b9b3      	cbnz	r3, 800c79c <_strtod_l+0xa44>
 800c76e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c772:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c77e:	bf58      	it	pl
 800c780:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c784:	eeb1 7b4d 	vneg.f64	d7, d13
 800c788:	ec53 2b17 	vmov	r2, r3, d7
 800c78c:	e7aa      	b.n	800c6e4 <_strtod_l+0x98c>
 800c78e:	f1b8 0f01 	cmp.w	r8, #1
 800c792:	d103      	bne.n	800c79c <_strtod_l+0xa44>
 800c794:	f1b9 0f00 	cmp.w	r9, #0
 800c798:	f43f ad8a 	beq.w	800c2b0 <_strtod_l+0x558>
 800c79c:	4b47      	ldr	r3, [pc, #284]	; (800c8bc <_strtod_l+0xb64>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	e79e      	b.n	800c6e0 <_strtod_l+0x988>
 800c7a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c7a6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c7aa:	f1ba 0f00 	cmp.w	sl, #0
 800c7ae:	d104      	bne.n	800c7ba <_strtod_l+0xa62>
 800c7b0:	eeb1 7b4d 	vneg.f64	d7, d13
 800c7b4:	ec53 2b17 	vmov	r2, r3, d7
 800c7b8:	e794      	b.n	800c6e4 <_strtod_l+0x98c>
 800c7ba:	eeb0 7b4d 	vmov.f64	d7, d13
 800c7be:	e7f9      	b.n	800c7b4 <_strtod_l+0xa5c>
 800c7c0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c7c4:	9b04      	ldr	r3, [sp, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1ba      	bne.n	800c740 <_strtod_l+0x9e8>
 800c7ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7ce:	0d1b      	lsrs	r3, r3, #20
 800c7d0:	051b      	lsls	r3, r3, #20
 800c7d2:	4299      	cmp	r1, r3
 800c7d4:	d1b4      	bne.n	800c740 <_strtod_l+0x9e8>
 800c7d6:	ec51 0b1d 	vmov	r0, r1, d13
 800c7da:	f7f3 ff5d 	bl	8000698 <__aeabi_d2lz>
 800c7de:	f7f3 ff15 	bl	800060c <__aeabi_l2d>
 800c7e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7e6:	ec41 0b17 	vmov	d7, r0, r1
 800c7ea:	ea43 0308 	orr.w	r3, r3, r8
 800c7ee:	ea53 030a 	orrs.w	r3, r3, sl
 800c7f2:	ee3d db47 	vsub.f64	d13, d13, d7
 800c7f6:	d03c      	beq.n	800c872 <_strtod_l+0xb1a>
 800c7f8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c800:	f53f acf0 	bmi.w	800c1e4 <_strtod_l+0x48c>
 800c804:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80c:	dd98      	ble.n	800c740 <_strtod_l+0x9e8>
 800c80e:	e4e9      	b.n	800c1e4 <_strtod_l+0x48c>
 800c810:	9804      	ldr	r0, [sp, #16]
 800c812:	b1f0      	cbz	r0, 800c852 <_strtod_l+0xafa>
 800c814:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c818:	d81b      	bhi.n	800c852 <_strtod_l+0xafa>
 800c81a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c8a0 <_strtod_l+0xb48>
 800c81e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c826:	d811      	bhi.n	800c84c <_strtod_l+0xaf4>
 800c828:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c82c:	ee1d 3a10 	vmov	r3, s26
 800c830:	2b01      	cmp	r3, #1
 800c832:	bf38      	it	cc
 800c834:	2301      	movcc	r3, #1
 800c836:	ee0d 3a10 	vmov	s26, r3
 800c83a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c83e:	f1ba 0f00 	cmp.w	sl, #0
 800c842:	d113      	bne.n	800c86c <_strtod_l+0xb14>
 800c844:	eeb1 7b4d 	vneg.f64	d7, d13
 800c848:	ec53 2b17 	vmov	r2, r3, d7
 800c84c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c850:	1a43      	subs	r3, r0, r1
 800c852:	eeb0 0b48 	vmov.f64	d0, d8
 800c856:	ec43 2b1c 	vmov	d12, r2, r3
 800c85a:	910a      	str	r1, [sp, #40]	; 0x28
 800c85c:	f7fe fde0 	bl	800b420 <__ulp>
 800c860:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c862:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c866:	ec59 8b18 	vmov	r8, r9, d8
 800c86a:	e7ab      	b.n	800c7c4 <_strtod_l+0xa6c>
 800c86c:	eeb0 7b4d 	vmov.f64	d7, d13
 800c870:	e7ea      	b.n	800c848 <_strtod_l+0xaf0>
 800c872:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87a:	f57f af61 	bpl.w	800c740 <_strtod_l+0x9e8>
 800c87e:	e4b1      	b.n	800c1e4 <_strtod_l+0x48c>
 800c880:	2300      	movs	r3, #0
 800c882:	9308      	str	r3, [sp, #32]
 800c884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c888:	6013      	str	r3, [r2, #0]
 800c88a:	f7ff baad 	b.w	800bde8 <_strtod_l+0x90>
 800c88e:	2a65      	cmp	r2, #101	; 0x65
 800c890:	f43f ab9f 	beq.w	800bfd2 <_strtod_l+0x27a>
 800c894:	2a45      	cmp	r2, #69	; 0x45
 800c896:	f43f ab9c 	beq.w	800bfd2 <_strtod_l+0x27a>
 800c89a:	2101      	movs	r1, #1
 800c89c:	f7ff bbd4 	b.w	800c048 <_strtod_l+0x2f0>
 800c8a0:	ffc00000 	.word	0xffc00000
 800c8a4:	41dfffff 	.word	0x41dfffff
 800c8a8:	000fffff 	.word	0x000fffff
 800c8ac:	7ff00000 	.word	0x7ff00000
 800c8b0:	7fefffff 	.word	0x7fefffff
 800c8b4:	3ff00000 	.word	0x3ff00000
 800c8b8:	7c9fffff 	.word	0x7c9fffff
 800c8bc:	bff00000 	.word	0xbff00000
 800c8c0:	7fe00000 	.word	0x7fe00000

0800c8c4 <_strtod_r>:
 800c8c4:	4b01      	ldr	r3, [pc, #4]	; (800c8cc <_strtod_r+0x8>)
 800c8c6:	f7ff ba47 	b.w	800bd58 <_strtod_l>
 800c8ca:	bf00      	nop
 800c8cc:	2000043c 	.word	0x2000043c

0800c8d0 <_strtoll_l.constprop.0>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	4688      	mov	r8, r1
 800c8d8:	9201      	str	r2, [sp, #4]
 800c8da:	4a47      	ldr	r2, [pc, #284]	; (800c9f8 <_strtoll_l.constprop.0+0x128>)
 800c8dc:	9003      	str	r0, [sp, #12]
 800c8de:	461e      	mov	r6, r3
 800c8e0:	460d      	mov	r5, r1
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8e8:	5ca7      	ldrb	r7, [r4, r2]
 800c8ea:	f017 0708 	ands.w	r7, r7, #8
 800c8ee:	d1f8      	bne.n	800c8e2 <_strtoll_l.constprop.0+0x12>
 800c8f0:	2c2d      	cmp	r4, #45	; 0x2d
 800c8f2:	d147      	bne.n	800c984 <_strtoll_l.constprop.0+0xb4>
 800c8f4:	782c      	ldrb	r4, [r5, #0]
 800c8f6:	2701      	movs	r7, #1
 800c8f8:	1c9d      	adds	r5, r3, #2
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d077      	beq.n	800c9ee <_strtoll_l.constprop.0+0x11e>
 800c8fe:	2e10      	cmp	r6, #16
 800c900:	d109      	bne.n	800c916 <_strtoll_l.constprop.0+0x46>
 800c902:	2c30      	cmp	r4, #48	; 0x30
 800c904:	d107      	bne.n	800c916 <_strtoll_l.constprop.0+0x46>
 800c906:	782b      	ldrb	r3, [r5, #0]
 800c908:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c90c:	2b58      	cmp	r3, #88	; 0x58
 800c90e:	d169      	bne.n	800c9e4 <_strtoll_l.constprop.0+0x114>
 800c910:	786c      	ldrb	r4, [r5, #1]
 800c912:	2610      	movs	r6, #16
 800c914:	3502      	adds	r5, #2
 800c916:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800c91a:	f107 3bff 	add.w	fp, r7, #4294967295
 800c91e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c922:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800c926:	4632      	mov	r2, r6
 800c928:	464b      	mov	r3, r9
 800c92a:	4658      	mov	r0, fp
 800c92c:	4651      	mov	r1, sl
 800c92e:	f7f3 fe9b 	bl	8000668 <__aeabi_uldivmod>
 800c932:	2300      	movs	r3, #0
 800c934:	9202      	str	r2, [sp, #8]
 800c936:	468c      	mov	ip, r1
 800c938:	4602      	mov	r2, r0
 800c93a:	4619      	mov	r1, r3
 800c93c:	4618      	mov	r0, r3
 800c93e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c942:	f1be 0f09 	cmp.w	lr, #9
 800c946:	d822      	bhi.n	800c98e <_strtoll_l.constprop.0+0xbe>
 800c948:	4674      	mov	r4, lr
 800c94a:	42a6      	cmp	r6, r4
 800c94c:	dd30      	ble.n	800c9b0 <_strtoll_l.constprop.0+0xe0>
 800c94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c952:	d014      	beq.n	800c97e <_strtoll_l.constprop.0+0xae>
 800c954:	4282      	cmp	r2, r0
 800c956:	eb7c 0301 	sbcs.w	r3, ip, r1
 800c95a:	d326      	bcc.n	800c9aa <_strtoll_l.constprop.0+0xda>
 800c95c:	458c      	cmp	ip, r1
 800c95e:	bf08      	it	eq
 800c960:	4282      	cmpeq	r2, r0
 800c962:	d102      	bne.n	800c96a <_strtoll_l.constprop.0+0x9a>
 800c964:	9b02      	ldr	r3, [sp, #8]
 800c966:	42a3      	cmp	r3, r4
 800c968:	db1f      	blt.n	800c9aa <_strtoll_l.constprop.0+0xda>
 800c96a:	4371      	muls	r1, r6
 800c96c:	fb00 1109 	mla	r1, r0, r9, r1
 800c970:	fba6 0300 	umull	r0, r3, r6, r0
 800c974:	4419      	add	r1, r3
 800c976:	1820      	adds	r0, r4, r0
 800c978:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800c97c:	2301      	movs	r3, #1
 800c97e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c982:	e7dc      	b.n	800c93e <_strtoll_l.constprop.0+0x6e>
 800c984:	2c2b      	cmp	r4, #43	; 0x2b
 800c986:	bf04      	itt	eq
 800c988:	782c      	ldrbeq	r4, [r5, #0]
 800c98a:	1c9d      	addeq	r5, r3, #2
 800c98c:	e7b5      	b.n	800c8fa <_strtoll_l.constprop.0+0x2a>
 800c98e:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c992:	f1be 0f19 	cmp.w	lr, #25
 800c996:	d801      	bhi.n	800c99c <_strtoll_l.constprop.0+0xcc>
 800c998:	3c37      	subs	r4, #55	; 0x37
 800c99a:	e7d6      	b.n	800c94a <_strtoll_l.constprop.0+0x7a>
 800c99c:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9a0:	f1be 0f19 	cmp.w	lr, #25
 800c9a4:	d804      	bhi.n	800c9b0 <_strtoll_l.constprop.0+0xe0>
 800c9a6:	3c57      	subs	r4, #87	; 0x57
 800c9a8:	e7cf      	b.n	800c94a <_strtoll_l.constprop.0+0x7a>
 800c9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ae:	e7e6      	b.n	800c97e <_strtoll_l.constprop.0+0xae>
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	d109      	bne.n	800c9c8 <_strtoll_l.constprop.0+0xf8>
 800c9b4:	9a03      	ldr	r2, [sp, #12]
 800c9b6:	2322      	movs	r3, #34	; 0x22
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	9b01      	ldr	r3, [sp, #4]
 800c9bc:	4658      	mov	r0, fp
 800c9be:	4651      	mov	r1, sl
 800c9c0:	b953      	cbnz	r3, 800c9d8 <_strtoll_l.constprop.0+0x108>
 800c9c2:	b005      	add	sp, #20
 800c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c8:	b117      	cbz	r7, 800c9d0 <_strtoll_l.constprop.0+0x100>
 800c9ca:	4240      	negs	r0, r0
 800c9cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c9d0:	9a01      	ldr	r2, [sp, #4]
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d0f5      	beq.n	800c9c2 <_strtoll_l.constprop.0+0xf2>
 800c9d6:	b10b      	cbz	r3, 800c9dc <_strtoll_l.constprop.0+0x10c>
 800c9d8:	f105 38ff 	add.w	r8, r5, #4294967295
 800c9dc:	9b01      	ldr	r3, [sp, #4]
 800c9de:	f8c3 8000 	str.w	r8, [r3]
 800c9e2:	e7ee      	b.n	800c9c2 <_strtoll_l.constprop.0+0xf2>
 800c9e4:	2430      	movs	r4, #48	; 0x30
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d195      	bne.n	800c916 <_strtoll_l.constprop.0+0x46>
 800c9ea:	2608      	movs	r6, #8
 800c9ec:	e793      	b.n	800c916 <_strtoll_l.constprop.0+0x46>
 800c9ee:	2c30      	cmp	r4, #48	; 0x30
 800c9f0:	d089      	beq.n	800c906 <_strtoll_l.constprop.0+0x36>
 800c9f2:	260a      	movs	r6, #10
 800c9f4:	e78f      	b.n	800c916 <_strtoll_l.constprop.0+0x46>
 800c9f6:	bf00      	nop
 800c9f8:	08010dc5 	.word	0x08010dc5

0800c9fc <_strtoll_r>:
 800c9fc:	f7ff bf68 	b.w	800c8d0 <_strtoll_l.constprop.0>

0800ca00 <_strtoul_l.constprop.0>:
 800ca00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca04:	4f36      	ldr	r7, [pc, #216]	; (800cae0 <_strtoul_l.constprop.0+0xe0>)
 800ca06:	4686      	mov	lr, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca10:	5de6      	ldrb	r6, [r4, r7]
 800ca12:	f016 0608 	ands.w	r6, r6, #8
 800ca16:	d1f8      	bne.n	800ca0a <_strtoul_l.constprop.0+0xa>
 800ca18:	2c2d      	cmp	r4, #45	; 0x2d
 800ca1a:	d12f      	bne.n	800ca7c <_strtoul_l.constprop.0+0x7c>
 800ca1c:	782c      	ldrb	r4, [r5, #0]
 800ca1e:	2601      	movs	r6, #1
 800ca20:	1c85      	adds	r5, r0, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d057      	beq.n	800cad6 <_strtoul_l.constprop.0+0xd6>
 800ca26:	2b10      	cmp	r3, #16
 800ca28:	d109      	bne.n	800ca3e <_strtoul_l.constprop.0+0x3e>
 800ca2a:	2c30      	cmp	r4, #48	; 0x30
 800ca2c:	d107      	bne.n	800ca3e <_strtoul_l.constprop.0+0x3e>
 800ca2e:	7828      	ldrb	r0, [r5, #0]
 800ca30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca34:	2858      	cmp	r0, #88	; 0x58
 800ca36:	d149      	bne.n	800cacc <_strtoul_l.constprop.0+0xcc>
 800ca38:	786c      	ldrb	r4, [r5, #1]
 800ca3a:	2310      	movs	r3, #16
 800ca3c:	3502      	adds	r5, #2
 800ca3e:	f04f 38ff 	mov.w	r8, #4294967295
 800ca42:	2700      	movs	r7, #0
 800ca44:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca48:	fb03 f908 	mul.w	r9, r3, r8
 800ca4c:	ea6f 0909 	mvn.w	r9, r9
 800ca50:	4638      	mov	r0, r7
 800ca52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca56:	f1bc 0f09 	cmp.w	ip, #9
 800ca5a:	d814      	bhi.n	800ca86 <_strtoul_l.constprop.0+0x86>
 800ca5c:	4664      	mov	r4, ip
 800ca5e:	42a3      	cmp	r3, r4
 800ca60:	dd22      	ble.n	800caa8 <_strtoul_l.constprop.0+0xa8>
 800ca62:	2f00      	cmp	r7, #0
 800ca64:	db1d      	blt.n	800caa2 <_strtoul_l.constprop.0+0xa2>
 800ca66:	4580      	cmp	r8, r0
 800ca68:	d31b      	bcc.n	800caa2 <_strtoul_l.constprop.0+0xa2>
 800ca6a:	d101      	bne.n	800ca70 <_strtoul_l.constprop.0+0x70>
 800ca6c:	45a1      	cmp	r9, r4
 800ca6e:	db18      	blt.n	800caa2 <_strtoul_l.constprop.0+0xa2>
 800ca70:	fb00 4003 	mla	r0, r0, r3, r4
 800ca74:	2701      	movs	r7, #1
 800ca76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca7a:	e7ea      	b.n	800ca52 <_strtoul_l.constprop.0+0x52>
 800ca7c:	2c2b      	cmp	r4, #43	; 0x2b
 800ca7e:	bf04      	itt	eq
 800ca80:	782c      	ldrbeq	r4, [r5, #0]
 800ca82:	1c85      	addeq	r5, r0, #2
 800ca84:	e7cd      	b.n	800ca22 <_strtoul_l.constprop.0+0x22>
 800ca86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca8a:	f1bc 0f19 	cmp.w	ip, #25
 800ca8e:	d801      	bhi.n	800ca94 <_strtoul_l.constprop.0+0x94>
 800ca90:	3c37      	subs	r4, #55	; 0x37
 800ca92:	e7e4      	b.n	800ca5e <_strtoul_l.constprop.0+0x5e>
 800ca94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca98:	f1bc 0f19 	cmp.w	ip, #25
 800ca9c:	d804      	bhi.n	800caa8 <_strtoul_l.constprop.0+0xa8>
 800ca9e:	3c57      	subs	r4, #87	; 0x57
 800caa0:	e7dd      	b.n	800ca5e <_strtoul_l.constprop.0+0x5e>
 800caa2:	f04f 37ff 	mov.w	r7, #4294967295
 800caa6:	e7e6      	b.n	800ca76 <_strtoul_l.constprop.0+0x76>
 800caa8:	2f00      	cmp	r7, #0
 800caaa:	da07      	bge.n	800cabc <_strtoul_l.constprop.0+0xbc>
 800caac:	2322      	movs	r3, #34	; 0x22
 800caae:	f8ce 3000 	str.w	r3, [lr]
 800cab2:	f04f 30ff 	mov.w	r0, #4294967295
 800cab6:	b932      	cbnz	r2, 800cac6 <_strtoul_l.constprop.0+0xc6>
 800cab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cabc:	b106      	cbz	r6, 800cac0 <_strtoul_l.constprop.0+0xc0>
 800cabe:	4240      	negs	r0, r0
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	d0f9      	beq.n	800cab8 <_strtoul_l.constprop.0+0xb8>
 800cac4:	b107      	cbz	r7, 800cac8 <_strtoul_l.constprop.0+0xc8>
 800cac6:	1e69      	subs	r1, r5, #1
 800cac8:	6011      	str	r1, [r2, #0]
 800caca:	e7f5      	b.n	800cab8 <_strtoul_l.constprop.0+0xb8>
 800cacc:	2430      	movs	r4, #48	; 0x30
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1b5      	bne.n	800ca3e <_strtoul_l.constprop.0+0x3e>
 800cad2:	2308      	movs	r3, #8
 800cad4:	e7b3      	b.n	800ca3e <_strtoul_l.constprop.0+0x3e>
 800cad6:	2c30      	cmp	r4, #48	; 0x30
 800cad8:	d0a9      	beq.n	800ca2e <_strtoul_l.constprop.0+0x2e>
 800cada:	230a      	movs	r3, #10
 800cadc:	e7af      	b.n	800ca3e <_strtoul_l.constprop.0+0x3e>
 800cade:	bf00      	nop
 800cae0:	08010dc5 	.word	0x08010dc5

0800cae4 <_strtoul_r>:
 800cae4:	f7ff bf8c 	b.w	800ca00 <_strtoul_l.constprop.0>

0800cae8 <_strtoull_l.constprop.0>:
 800cae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	4692      	mov	sl, r2
 800caee:	4a49      	ldr	r2, [pc, #292]	; (800cc14 <_strtoull_l.constprop.0+0x12c>)
 800caf0:	9001      	str	r0, [sp, #4]
 800caf2:	4689      	mov	r9, r1
 800caf4:	461d      	mov	r5, r3
 800caf6:	460e      	mov	r6, r1
 800caf8:	4633      	mov	r3, r6
 800cafa:	f816 4b01 	ldrb.w	r4, [r6], #1
 800cafe:	5ca7      	ldrb	r7, [r4, r2]
 800cb00:	f017 0708 	ands.w	r7, r7, #8
 800cb04:	d1f8      	bne.n	800caf8 <_strtoull_l.constprop.0+0x10>
 800cb06:	2c2d      	cmp	r4, #45	; 0x2d
 800cb08:	d14a      	bne.n	800cba0 <_strtoull_l.constprop.0+0xb8>
 800cb0a:	7834      	ldrb	r4, [r6, #0]
 800cb0c:	2701      	movs	r7, #1
 800cb0e:	1c9e      	adds	r6, r3, #2
 800cb10:	2d00      	cmp	r5, #0
 800cb12:	d07b      	beq.n	800cc0c <_strtoull_l.constprop.0+0x124>
 800cb14:	2d10      	cmp	r5, #16
 800cb16:	d109      	bne.n	800cb2c <_strtoull_l.constprop.0+0x44>
 800cb18:	2c30      	cmp	r4, #48	; 0x30
 800cb1a:	d107      	bne.n	800cb2c <_strtoull_l.constprop.0+0x44>
 800cb1c:	7833      	ldrb	r3, [r6, #0]
 800cb1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb22:	2b58      	cmp	r3, #88	; 0x58
 800cb24:	d16d      	bne.n	800cc02 <_strtoull_l.constprop.0+0x11a>
 800cb26:	7874      	ldrb	r4, [r6, #1]
 800cb28:	2510      	movs	r5, #16
 800cb2a:	3602      	adds	r6, #2
 800cb2c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800cb30:	462a      	mov	r2, r5
 800cb32:	465b      	mov	r3, fp
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	f04f 31ff 	mov.w	r1, #4294967295
 800cb3c:	f7f3 fd94 	bl	8000668 <__aeabi_uldivmod>
 800cb40:	462a      	mov	r2, r5
 800cb42:	9000      	str	r0, [sp, #0]
 800cb44:	4688      	mov	r8, r1
 800cb46:	465b      	mov	r3, fp
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	f04f 31ff 	mov.w	r1, #4294967295
 800cb50:	f7f3 fd8a 	bl	8000668 <__aeabi_uldivmod>
 800cb54:	2300      	movs	r3, #0
 800cb56:	4618      	mov	r0, r3
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb5e:	f1bc 0f09 	cmp.w	ip, #9
 800cb62:	d822      	bhi.n	800cbaa <_strtoull_l.constprop.0+0xc2>
 800cb64:	4664      	mov	r4, ip
 800cb66:	42a5      	cmp	r5, r4
 800cb68:	dd30      	ble.n	800cbcc <_strtoull_l.constprop.0+0xe4>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	db2b      	blt.n	800cbc6 <_strtoull_l.constprop.0+0xde>
 800cb6e:	9b00      	ldr	r3, [sp, #0]
 800cb70:	4283      	cmp	r3, r0
 800cb72:	eb78 0301 	sbcs.w	r3, r8, r1
 800cb76:	d326      	bcc.n	800cbc6 <_strtoull_l.constprop.0+0xde>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	4588      	cmp	r8, r1
 800cb7c:	bf08      	it	eq
 800cb7e:	4283      	cmpeq	r3, r0
 800cb80:	d101      	bne.n	800cb86 <_strtoull_l.constprop.0+0x9e>
 800cb82:	42a2      	cmp	r2, r4
 800cb84:	db1f      	blt.n	800cbc6 <_strtoull_l.constprop.0+0xde>
 800cb86:	4369      	muls	r1, r5
 800cb88:	fb00 110b 	mla	r1, r0, fp, r1
 800cb8c:	fba5 0300 	umull	r0, r3, r5, r0
 800cb90:	4419      	add	r1, r3
 800cb92:	1820      	adds	r0, r4, r0
 800cb94:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800cb9e:	e7dc      	b.n	800cb5a <_strtoull_l.constprop.0+0x72>
 800cba0:	2c2b      	cmp	r4, #43	; 0x2b
 800cba2:	bf04      	itt	eq
 800cba4:	7834      	ldrbeq	r4, [r6, #0]
 800cba6:	1c9e      	addeq	r6, r3, #2
 800cba8:	e7b2      	b.n	800cb10 <_strtoull_l.constprop.0+0x28>
 800cbaa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cbae:	f1bc 0f19 	cmp.w	ip, #25
 800cbb2:	d801      	bhi.n	800cbb8 <_strtoull_l.constprop.0+0xd0>
 800cbb4:	3c37      	subs	r4, #55	; 0x37
 800cbb6:	e7d6      	b.n	800cb66 <_strtoull_l.constprop.0+0x7e>
 800cbb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cbbc:	f1bc 0f19 	cmp.w	ip, #25
 800cbc0:	d804      	bhi.n	800cbcc <_strtoull_l.constprop.0+0xe4>
 800cbc2:	3c57      	subs	r4, #87	; 0x57
 800cbc4:	e7cf      	b.n	800cb66 <_strtoull_l.constprop.0+0x7e>
 800cbc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbca:	e7e6      	b.n	800cb9a <_strtoull_l.constprop.0+0xb2>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da0b      	bge.n	800cbe8 <_strtoull_l.constprop.0+0x100>
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	2322      	movs	r3, #34	; 0x22
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	4601      	mov	r1, r0
 800cbdc:	f1ba 0f00 	cmp.w	sl, #0
 800cbe0:	d10a      	bne.n	800cbf8 <_strtoull_l.constprop.0+0x110>
 800cbe2:	b003      	add	sp, #12
 800cbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe8:	b117      	cbz	r7, 800cbf0 <_strtoull_l.constprop.0+0x108>
 800cbea:	4240      	negs	r0, r0
 800cbec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800cbf0:	f1ba 0f00 	cmp.w	sl, #0
 800cbf4:	d0f5      	beq.n	800cbe2 <_strtoull_l.constprop.0+0xfa>
 800cbf6:	b10b      	cbz	r3, 800cbfc <_strtoull_l.constprop.0+0x114>
 800cbf8:	f106 39ff 	add.w	r9, r6, #4294967295
 800cbfc:	f8ca 9000 	str.w	r9, [sl]
 800cc00:	e7ef      	b.n	800cbe2 <_strtoull_l.constprop.0+0xfa>
 800cc02:	2430      	movs	r4, #48	; 0x30
 800cc04:	2d00      	cmp	r5, #0
 800cc06:	d191      	bne.n	800cb2c <_strtoull_l.constprop.0+0x44>
 800cc08:	2508      	movs	r5, #8
 800cc0a:	e78f      	b.n	800cb2c <_strtoull_l.constprop.0+0x44>
 800cc0c:	2c30      	cmp	r4, #48	; 0x30
 800cc0e:	d085      	beq.n	800cb1c <_strtoull_l.constprop.0+0x34>
 800cc10:	250a      	movs	r5, #10
 800cc12:	e78b      	b.n	800cb2c <_strtoull_l.constprop.0+0x44>
 800cc14:	08010dc5 	.word	0x08010dc5

0800cc18 <_strtoull_r>:
 800cc18:	f7ff bf66 	b.w	800cae8 <_strtoull_l.constprop.0>
 800cc1c:	0000      	movs	r0, r0
	...

0800cc20 <_svfprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ed2d 8b04 	vpush	{d8-d9}
 800cc28:	b0cb      	sub	sp, #300	; 0x12c
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	4692      	mov	sl, r2
 800cc2e:	4698      	mov	r8, r3
 800cc30:	4607      	mov	r7, r0
 800cc32:	f7fd fdb1 	bl	800a798 <_localeconv_r>
 800cc36:	6803      	ldr	r3, [r0, #0]
 800cc38:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f3 fb00 	bl	8000240 <strlen>
 800cc40:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800cc44:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc46:	061a      	lsls	r2, r3, #24
 800cc48:	d519      	bpl.n	800cc7e <_svfprintf_r+0x5e>
 800cc4a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cc4e:	b9b3      	cbnz	r3, 800cc7e <_svfprintf_r+0x5e>
 800cc50:	2140      	movs	r1, #64	; 0x40
 800cc52:	4638      	mov	r0, r7
 800cc54:	f7fd fe24 	bl	800a8a0 <_malloc_r>
 800cc58:	f8cb 0000 	str.w	r0, [fp]
 800cc5c:	f8cb 0010 	str.w	r0, [fp, #16]
 800cc60:	b950      	cbnz	r0, 800cc78 <_svfprintf_r+0x58>
 800cc62:	230c      	movs	r3, #12
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc6e:	b04b      	add	sp, #300	; 0x12c
 800cc70:	ecbd 8b04 	vpop	{d8-d9}
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	f8cb 3014 	str.w	r3, [fp, #20]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 800cc84:	ed9f 8b96 	vldr	d8, [pc, #600]	; 800cee0 <_svfprintf_r+0x2c0>
 800cc88:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800cc8c:	ac21      	add	r4, sp, #132	; 0x84
 800cc8e:	941e      	str	r4, [sp, #120]	; 0x78
 800cc90:	9303      	str	r3, [sp, #12]
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	930e      	str	r3, [sp, #56]	; 0x38
 800cc96:	9310      	str	r3, [sp, #64]	; 0x40
 800cc98:	930a      	str	r3, [sp, #40]	; 0x28
 800cc9a:	4653      	mov	r3, sl
 800cc9c:	461d      	mov	r5, r3
 800cc9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca2:	b10a      	cbz	r2, 800cca8 <_svfprintf_r+0x88>
 800cca4:	2a25      	cmp	r2, #37	; 0x25
 800cca6:	d1f9      	bne.n	800cc9c <_svfprintf_r+0x7c>
 800cca8:	ebb5 060a 	subs.w	r6, r5, sl
 800ccac:	d00d      	beq.n	800ccca <_svfprintf_r+0xaa>
 800ccae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccb0:	4433      	add	r3, r6
 800ccb2:	9320      	str	r3, [sp, #128]	; 0x80
 800ccb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	2b07      	cmp	r3, #7
 800ccba:	e9c4 a600 	strd	sl, r6, [r4]
 800ccbe:	931f      	str	r3, [sp, #124]	; 0x7c
 800ccc0:	dc77      	bgt.n	800cdb2 <_svfprintf_r+0x192>
 800ccc2:	3408      	adds	r4, #8
 800ccc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc6:	4433      	add	r3, r6
 800ccc8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccca:	782b      	ldrb	r3, [r5, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f001 8135 	beq.w	800df3c <_svfprintf_r+0x131c>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	1c6b      	adds	r3, r5, #1
 800ccd6:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800ccda:	f04f 36ff 	mov.w	r6, #4294967295
 800ccde:	920c      	str	r2, [sp, #48]	; 0x30
 800cce0:	4615      	mov	r5, r2
 800cce2:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800cce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccea:	9204      	str	r2, [sp, #16]
 800ccec:	9309      	str	r3, [sp, #36]	; 0x24
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	3b20      	subs	r3, #32
 800ccf2:	2b5a      	cmp	r3, #90	; 0x5a
 800ccf4:	f200 8590 	bhi.w	800d818 <_svfprintf_r+0xbf8>
 800ccf8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ccfc:	058e007d 	.word	0x058e007d
 800cd00:	0085058e 	.word	0x0085058e
 800cd04:	058e058e 	.word	0x058e058e
 800cd08:	0065058e 	.word	0x0065058e
 800cd0c:	058e058e 	.word	0x058e058e
 800cd10:	00920088 	.word	0x00920088
 800cd14:	008f058e 	.word	0x008f058e
 800cd18:	058e0095 	.word	0x058e0095
 800cd1c:	00b200af 	.word	0x00b200af
 800cd20:	00b200b2 	.word	0x00b200b2
 800cd24:	00b200b2 	.word	0x00b200b2
 800cd28:	00b200b2 	.word	0x00b200b2
 800cd2c:	00b200b2 	.word	0x00b200b2
 800cd30:	058e058e 	.word	0x058e058e
 800cd34:	058e058e 	.word	0x058e058e
 800cd38:	058e058e 	.word	0x058e058e
 800cd3c:	012d058e 	.word	0x012d058e
 800cd40:	00e0058e 	.word	0x00e0058e
 800cd44:	012d00fa 	.word	0x012d00fa
 800cd48:	012d012d 	.word	0x012d012d
 800cd4c:	058e058e 	.word	0x058e058e
 800cd50:	058e058e 	.word	0x058e058e
 800cd54:	058e00c3 	.word	0x058e00c3
 800cd58:	0455058e 	.word	0x0455058e
 800cd5c:	058e058e 	.word	0x058e058e
 800cd60:	04a3058e 	.word	0x04a3058e
 800cd64:	04c7058e 	.word	0x04c7058e
 800cd68:	058e058e 	.word	0x058e058e
 800cd6c:	058e04ed 	.word	0x058e04ed
 800cd70:	058e058e 	.word	0x058e058e
 800cd74:	058e058e 	.word	0x058e058e
 800cd78:	058e058e 	.word	0x058e058e
 800cd7c:	012d058e 	.word	0x012d058e
 800cd80:	00e0058e 	.word	0x00e0058e
 800cd84:	012d00fc 	.word	0x012d00fc
 800cd88:	012d012d 	.word	0x012d012d
 800cd8c:	00fc00c6 	.word	0x00fc00c6
 800cd90:	058e00da 	.word	0x058e00da
 800cd94:	058e00d3 	.word	0x058e00d3
 800cd98:	0457042e 	.word	0x0457042e
 800cd9c:	00da0490 	.word	0x00da0490
 800cda0:	04a3058e 	.word	0x04a3058e
 800cda4:	04c9007b 	.word	0x04c9007b
 800cda8:	058e058e 	.word	0x058e058e
 800cdac:	058e050d 	.word	0x058e050d
 800cdb0:	007b      	.short	0x007b
 800cdb2:	aa1e      	add	r2, sp, #120	; 0x78
 800cdb4:	4659      	mov	r1, fp
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	f002 fc4e 	bl	800f658 <__ssprint_r>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f040 8126 	bne.w	800d00e <_svfprintf_r+0x3ee>
 800cdc2:	ac21      	add	r4, sp, #132	; 0x84
 800cdc4:	e77e      	b.n	800ccc4 <_svfprintf_r+0xa4>
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f7fd fce6 	bl	800a798 <_localeconv_r>
 800cdcc:	6843      	ldr	r3, [r0, #4]
 800cdce:	9310      	str	r3, [sp, #64]	; 0x40
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7f3 fa35 	bl	8000240 <strlen>
 800cdd6:	900e      	str	r0, [sp, #56]	; 0x38
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7fd fcdd 	bl	800a798 <_localeconv_r>
 800cdde:	6883      	ldr	r3, [r0, #8]
 800cde0:	9308      	str	r3, [sp, #32]
 800cde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cde4:	b12b      	cbz	r3, 800cdf2 <_svfprintf_r+0x1d2>
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	b11b      	cbz	r3, 800cdf2 <_svfprintf_r+0x1d2>
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	b10b      	cbz	r3, 800cdf2 <_svfprintf_r+0x1d2>
 800cdee:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800cdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf4:	e777      	b.n	800cce6 <_svfprintf_r+0xc6>
 800cdf6:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f9      	bne.n	800cdf2 <_svfprintf_r+0x1d2>
 800cdfe:	2320      	movs	r3, #32
 800ce00:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800ce04:	e7f5      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce06:	f045 0501 	orr.w	r5, r5, #1
 800ce0a:	e7f2      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce0c:	f858 3b04 	ldr.w	r3, [r8], #4
 800ce10:	930c      	str	r3, [sp, #48]	; 0x30
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	daed      	bge.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce16:	425b      	negs	r3, r3
 800ce18:	930c      	str	r3, [sp, #48]	; 0x30
 800ce1a:	f045 0504 	orr.w	r5, r5, #4
 800ce1e:	e7e8      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce20:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 800ce24:	e7e5      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce28:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ce2c:	9304      	str	r3, [sp, #16]
 800ce2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce30:	d111      	bne.n	800ce56 <_svfprintf_r+0x236>
 800ce32:	f858 6b04 	ldr.w	r6, [r8], #4
 800ce36:	9209      	str	r2, [sp, #36]	; 0x24
 800ce38:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800ce3c:	e7d9      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce3e:	210a      	movs	r1, #10
 800ce40:	fb01 3606 	mla	r6, r1, r6, r3
 800ce44:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ce48:	9304      	str	r3, [sp, #16]
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	3b30      	subs	r3, #48	; 0x30
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	d9f5      	bls.n	800ce3e <_svfprintf_r+0x21e>
 800ce52:	9209      	str	r2, [sp, #36]	; 0x24
 800ce54:	e74b      	b.n	800ccee <_svfprintf_r+0xce>
 800ce56:	2600      	movs	r6, #0
 800ce58:	e7f7      	b.n	800ce4a <_svfprintf_r+0x22a>
 800ce5a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ce5e:	e7c8      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce60:	2300      	movs	r3, #0
 800ce62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce64:	930c      	str	r3, [sp, #48]	; 0x30
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce6a:	3b30      	subs	r3, #48	; 0x30
 800ce6c:	200a      	movs	r0, #10
 800ce6e:	fb00 3301 	mla	r3, r0, r1, r3
 800ce72:	930c      	str	r3, [sp, #48]	; 0x30
 800ce74:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	3b30      	subs	r3, #48	; 0x30
 800ce7c:	2b09      	cmp	r3, #9
 800ce7e:	d9f2      	bls.n	800ce66 <_svfprintf_r+0x246>
 800ce80:	e7e7      	b.n	800ce52 <_svfprintf_r+0x232>
 800ce82:	f045 0508 	orr.w	r5, r5, #8
 800ce86:	e7b4      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ce88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b68      	cmp	r3, #104	; 0x68
 800ce8e:	bf01      	itttt	eq
 800ce90:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800ce92:	3301      	addeq	r3, #1
 800ce94:	9309      	streq	r3, [sp, #36]	; 0x24
 800ce96:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800ce9a:	bf18      	it	ne
 800ce9c:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800cea0:	e7a7      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b6c      	cmp	r3, #108	; 0x6c
 800cea8:	d105      	bne.n	800ceb6 <_svfprintf_r+0x296>
 800ceaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceac:	3301      	adds	r3, #1
 800ceae:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb0:	f045 0520 	orr.w	r5, r5, #32
 800ceb4:	e79d      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800ceb6:	f045 0510 	orr.w	r5, r5, #16
 800ceba:	e79a      	b.n	800cdf2 <_svfprintf_r+0x1d2>
 800cebc:	4642      	mov	r2, r8
 800cebe:	2000      	movs	r0, #0
 800cec0:	f852 3b04 	ldr.w	r3, [r2], #4
 800cec4:	9205      	str	r2, [sp, #20]
 800cec6:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800ceca:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800cece:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800ced2:	9002      	str	r0, [sp, #8]
 800ced4:	2601      	movs	r6, #1
 800ced6:	4681      	mov	r9, r0
 800ced8:	4680      	mov	r8, r0
 800ceda:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800cede:	e18e      	b.n	800d1fe <_svfprintf_r+0x5de>
	...
 800cee8:	ffffffff 	.word	0xffffffff
 800ceec:	7fefffff 	.word	0x7fefffff
 800cef0:	f045 0510 	orr.w	r5, r5, #16
 800cef4:	06ab      	lsls	r3, r5, #26
 800cef6:	d516      	bpl.n	800cf26 <_svfprintf_r+0x306>
 800cef8:	f108 0307 	add.w	r3, r8, #7
 800cefc:	f023 0307 	bic.w	r3, r3, #7
 800cf00:	461a      	mov	r2, r3
 800cf02:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800cf06:	f852 8b08 	ldr.w	r8, [r2], #8
 800cf0a:	9205      	str	r2, [sp, #20]
 800cf0c:	f1b9 0f00 	cmp.w	r9, #0
 800cf10:	da07      	bge.n	800cf22 <_svfprintf_r+0x302>
 800cf12:	f1d8 0800 	rsbs	r8, r8, #0
 800cf16:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800cf1a:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 800cf1e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800cf22:	2301      	movs	r3, #1
 800cf24:	e354      	b.n	800d5d0 <_svfprintf_r+0x9b0>
 800cf26:	4642      	mov	r2, r8
 800cf28:	06e8      	lsls	r0, r5, #27
 800cf2a:	f852 3b04 	ldr.w	r3, [r2], #4
 800cf2e:	9205      	str	r2, [sp, #20]
 800cf30:	d503      	bpl.n	800cf3a <_svfprintf_r+0x31a>
 800cf32:	4698      	mov	r8, r3
 800cf34:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800cf38:	e7e8      	b.n	800cf0c <_svfprintf_r+0x2ec>
 800cf3a:	0669      	lsls	r1, r5, #25
 800cf3c:	d504      	bpl.n	800cf48 <_svfprintf_r+0x328>
 800cf3e:	fa0f f883 	sxth.w	r8, r3
 800cf42:	f343 39c0 	sbfx	r9, r3, #15, #1
 800cf46:	e7e1      	b.n	800cf0c <_svfprintf_r+0x2ec>
 800cf48:	05aa      	lsls	r2, r5, #22
 800cf4a:	d5f2      	bpl.n	800cf32 <_svfprintf_r+0x312>
 800cf4c:	fa4f f883 	sxtb.w	r8, r3
 800cf50:	f343 19c0 	sbfx	r9, r3, #7, #1
 800cf54:	e7da      	b.n	800cf0c <_svfprintf_r+0x2ec>
 800cf56:	f108 0807 	add.w	r8, r8, #7
 800cf5a:	f028 0307 	bic.w	r3, r8, #7
 800cf5e:	ecb3 8b02 	vldmia	r3!, {d8}
 800cf62:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 800cee8 <_svfprintf_r+0x2c8>
 800cf66:	eeb0 6bc8 	vabs.f64	d6, d8
 800cf6a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	dd18      	ble.n	800cfa8 <_svfprintf_r+0x388>
 800cf76:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	d502      	bpl.n	800cf86 <_svfprintf_r+0x366>
 800cf80:	232d      	movs	r3, #45	; 0x2d
 800cf82:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800cf86:	4a26      	ldr	r2, [pc, #152]	; (800d020 <_svfprintf_r+0x400>)
 800cf88:	4826      	ldr	r0, [pc, #152]	; (800d024 <_svfprintf_r+0x404>)
 800cf8a:	9b04      	ldr	r3, [sp, #16]
 800cf8c:	2b47      	cmp	r3, #71	; 0x47
 800cf8e:	bfd4      	ite	le
 800cf90:	4692      	movle	sl, r2
 800cf92:	4682      	movgt	sl, r0
 800cf94:	2300      	movs	r3, #0
 800cf96:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	2603      	movs	r6, #3
 800cf9e:	4699      	mov	r9, r3
 800cfa0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800cfa4:	4698      	mov	r8, r3
 800cfa6:	e12a      	b.n	800d1fe <_svfprintf_r+0x5de>
 800cfa8:	eeb4 8b48 	vcmp.f64	d8, d8
 800cfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb0:	d70a      	bvc.n	800cfc8 <_svfprintf_r+0x3a8>
 800cfb2:	ee18 3a90 	vmov	r3, s17
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfb8      	it	lt
 800cfba:	232d      	movlt	r3, #45	; 0x2d
 800cfbc:	4a1a      	ldr	r2, [pc, #104]	; (800d028 <_svfprintf_r+0x408>)
 800cfbe:	481b      	ldr	r0, [pc, #108]	; (800d02c <_svfprintf_r+0x40c>)
 800cfc0:	bfb8      	it	lt
 800cfc2:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800cfc6:	e7e0      	b.n	800cf8a <_svfprintf_r+0x36a>
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	f023 0920 	bic.w	r9, r3, #32
 800cfce:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800cfd2:	d12d      	bne.n	800d030 <_svfprintf_r+0x410>
 800cfd4:	2330      	movs	r3, #48	; 0x30
 800cfd6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800cfda:	9b04      	ldr	r3, [sp, #16]
 800cfdc:	2b61      	cmp	r3, #97	; 0x61
 800cfde:	bf0c      	ite	eq
 800cfe0:	2378      	moveq	r3, #120	; 0x78
 800cfe2:	2358      	movne	r3, #88	; 0x58
 800cfe4:	2e63      	cmp	r6, #99	; 0x63
 800cfe6:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800cfea:	f045 0502 	orr.w	r5, r5, #2
 800cfee:	f340 81db 	ble.w	800d3a8 <_svfprintf_r+0x788>
 800cff2:	1c71      	adds	r1, r6, #1
 800cff4:	4638      	mov	r0, r7
 800cff6:	f7fd fc53 	bl	800a8a0 <_malloc_r>
 800cffa:	4682      	mov	sl, r0
 800cffc:	2800      	cmp	r0, #0
 800cffe:	f040 81d8 	bne.w	800d3b2 <_svfprintf_r+0x792>
 800d002:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d00a:	f8ab 300c 	strh.w	r3, [fp, #12]
 800d00e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d012:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d018:	bf18      	it	ne
 800d01a:	f04f 33ff 	movne.w	r3, #4294967295
 800d01e:	e624      	b.n	800cc6a <_svfprintf_r+0x4a>
 800d020:	08010d49 	.word	0x08010d49
 800d024:	08010d4d 	.word	0x08010d4d
 800d028:	08010d51 	.word	0x08010d51
 800d02c:	08010d55 	.word	0x08010d55
 800d030:	1c73      	adds	r3, r6, #1
 800d032:	f000 81c0 	beq.w	800d3b6 <_svfprintf_r+0x796>
 800d036:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d03a:	f040 81c0 	bne.w	800d3be <_svfprintf_r+0x79e>
 800d03e:	2e00      	cmp	r6, #0
 800d040:	f040 81bd 	bne.w	800d3be <_svfprintf_r+0x79e>
 800d044:	9602      	str	r6, [sp, #8]
 800d046:	2601      	movs	r6, #1
 800d048:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800d04c:	930d      	str	r3, [sp, #52]	; 0x34
 800d04e:	ee18 3a90 	vmov	r3, s17
 800d052:	2b00      	cmp	r3, #0
 800d054:	f280 81b6 	bge.w	800d3c4 <_svfprintf_r+0x7a4>
 800d058:	eeb1 9b48 	vneg.f64	d9, d8
 800d05c:	232d      	movs	r3, #45	; 0x2d
 800d05e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800d062:	9313      	str	r3, [sp, #76]	; 0x4c
 800d064:	f040 81c7 	bne.w	800d3f6 <_svfprintf_r+0x7d6>
 800d068:	eeb0 0b49 	vmov.f64	d0, d9
 800d06c:	a818      	add	r0, sp, #96	; 0x60
 800d06e:	f7fe fd5b 	bl	800bb28 <frexp>
 800d072:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 800d076:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d07a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d082:	bf08      	it	eq
 800d084:	2301      	moveq	r3, #1
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	bf08      	it	eq
 800d08a:	9318      	streq	r3, [sp, #96]	; 0x60
 800d08c:	49b5      	ldr	r1, [pc, #724]	; (800d364 <_svfprintf_r+0x744>)
 800d08e:	4bb6      	ldr	r3, [pc, #728]	; (800d368 <_svfprintf_r+0x748>)
 800d090:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 800d094:	2a61      	cmp	r2, #97	; 0x61
 800d096:	bf18      	it	ne
 800d098:	4619      	movne	r1, r3
 800d09a:	1e72      	subs	r2, r6, #1
 800d09c:	4653      	mov	r3, sl
 800d09e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0a2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d0a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0aa:	ee16 ca90 	vmov	ip, s13
 800d0ae:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d0b2:	f803 0b01 	strb.w	r0, [r3], #1
 800d0b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d0c0:	d006      	beq.n	800d0d0 <_svfprintf_r+0x4b0>
 800d0c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ca:	f102 32ff 	add.w	r2, r2, #4294967295
 800d0ce:	d1e6      	bne.n	800d09e <_svfprintf_r+0x47e>
 800d0d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d0d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0dc:	dc09      	bgt.n	800d0f2 <_svfprintf_r+0x4d2>
 800d0de:	eeb4 0b47 	vcmp.f64	d0, d7
 800d0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e6:	f040 8180 	bne.w	800d3ea <_svfprintf_r+0x7ca>
 800d0ea:	f01c 0f01 	tst.w	ip, #1
 800d0ee:	f000 817c 	beq.w	800d3ea <_svfprintf_r+0x7ca>
 800d0f2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 800d0f6:	931c      	str	r3, [sp, #112]	; 0x70
 800d0f8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800d0fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d0fe:	1e42      	subs	r2, r0, #1
 800d100:	921c      	str	r2, [sp, #112]	; 0x70
 800d102:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800d106:	4562      	cmp	r2, ip
 800d108:	f000 8160 	beq.w	800d3cc <_svfprintf_r+0x7ac>
 800d10c:	2a39      	cmp	r2, #57	; 0x39
 800d10e:	bf16      	itet	ne
 800d110:	3201      	addne	r2, #1
 800d112:	7a8a      	ldrbeq	r2, [r1, #10]
 800d114:	b2d2      	uxtbne	r2, r2
 800d116:	f800 2c01 	strb.w	r2, [r0, #-1]
 800d11a:	eba3 030a 	sub.w	r3, r3, sl
 800d11e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d122:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d126:	9303      	str	r3, [sp, #12]
 800d128:	f040 81a7 	bne.w	800d47a <_svfprintf_r+0x85a>
 800d12c:	f118 0f03 	cmn.w	r8, #3
 800d130:	db02      	blt.n	800d138 <_svfprintf_r+0x518>
 800d132:	4546      	cmp	r6, r8
 800d134:	f280 81c9 	bge.w	800d4ca <_svfprintf_r+0x8aa>
 800d138:	9b04      	ldr	r3, [sp, #16]
 800d13a:	3b02      	subs	r3, #2
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	9904      	ldr	r1, [sp, #16]
 800d140:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800d144:	f021 0120 	bic.w	r1, r1, #32
 800d148:	2941      	cmp	r1, #65	; 0x41
 800d14a:	bf08      	it	eq
 800d14c:	320f      	addeq	r2, #15
 800d14e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d152:	bf06      	itte	eq
 800d154:	b2d2      	uxtbeq	r2, r2
 800d156:	2101      	moveq	r1, #1
 800d158:	2100      	movne	r1, #0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	9318      	str	r3, [sp, #96]	; 0x60
 800d15e:	bfb8      	it	lt
 800d160:	f1c8 0301 	rsblt	r3, r8, #1
 800d164:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800d168:	bfb4      	ite	lt
 800d16a:	222d      	movlt	r2, #45	; 0x2d
 800d16c:	222b      	movge	r2, #43	; 0x2b
 800d16e:	2b09      	cmp	r3, #9
 800d170:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800d174:	f340 8198 	ble.w	800d4a8 <_svfprintf_r+0x888>
 800d178:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800d17c:	200a      	movs	r0, #10
 800d17e:	4611      	mov	r1, r2
 800d180:	fb93 f6f0 	sdiv	r6, r3, r0
 800d184:	fb00 3016 	mls	r0, r0, r6, r3
 800d188:	3030      	adds	r0, #48	; 0x30
 800d18a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800d18e:	4618      	mov	r0, r3
 800d190:	2863      	cmp	r0, #99	; 0x63
 800d192:	f102 32ff 	add.w	r2, r2, #4294967295
 800d196:	4633      	mov	r3, r6
 800d198:	dcf0      	bgt.n	800d17c <_svfprintf_r+0x55c>
 800d19a:	3330      	adds	r3, #48	; 0x30
 800d19c:	1e88      	subs	r0, r1, #2
 800d19e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d1a2:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 800d1a6:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	42b3      	cmp	r3, r6
 800d1ae:	f0c0 8176 	bcc.w	800d49e <_svfprintf_r+0x87e>
 800d1b2:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 800d1b6:	1a52      	subs	r2, r2, r1
 800d1b8:	42b0      	cmp	r0, r6
 800d1ba:	bf88      	it	hi
 800d1bc:	2200      	movhi	r2, #0
 800d1be:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 800d1c2:	441a      	add	r2, r3
 800d1c4:	ab1a      	add	r3, sp, #104	; 0x68
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	9a03      	ldr	r2, [sp, #12]
 800d1ca:	9311      	str	r3, [sp, #68]	; 0x44
 800d1cc:	2a01      	cmp	r2, #1
 800d1ce:	eb03 0602 	add.w	r6, r3, r2
 800d1d2:	dc01      	bgt.n	800d1d8 <_svfprintf_r+0x5b8>
 800d1d4:	07e8      	lsls	r0, r5, #31
 800d1d6:	d501      	bpl.n	800d1dc <_svfprintf_r+0x5bc>
 800d1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1da:	441e      	add	r6, r3
 800d1dc:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800d1e0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800d1e4:	930d      	str	r3, [sp, #52]	; 0x34
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800d1ec:	4698      	mov	r8, r3
 800d1ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1f0:	b113      	cbz	r3, 800d1f8 <_svfprintf_r+0x5d8>
 800d1f2:	232d      	movs	r3, #45	; 0x2d
 800d1f4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800d1f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	45b1      	cmp	r9, r6
 800d200:	464b      	mov	r3, r9
 800d202:	bfb8      	it	lt
 800d204:	4633      	movlt	r3, r6
 800d206:	930d      	str	r3, [sp, #52]	; 0x34
 800d208:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800d20c:	b113      	cbz	r3, 800d214 <_svfprintf_r+0x5f4>
 800d20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d210:	3301      	adds	r3, #1
 800d212:	930d      	str	r3, [sp, #52]	; 0x34
 800d214:	f015 0302 	ands.w	r3, r5, #2
 800d218:	9313      	str	r3, [sp, #76]	; 0x4c
 800d21a:	bf1e      	ittt	ne
 800d21c:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800d21e:	3302      	addne	r3, #2
 800d220:	930d      	strne	r3, [sp, #52]	; 0x34
 800d222:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800d226:	9314      	str	r3, [sp, #80]	; 0x50
 800d228:	d120      	bne.n	800d26c <_svfprintf_r+0x64c>
 800d22a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d22e:	1a9b      	subs	r3, r3, r2
 800d230:	2b00      	cmp	r3, #0
 800d232:	dd1b      	ble.n	800d26c <_svfprintf_r+0x64c>
 800d234:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800d238:	494c      	ldr	r1, [pc, #304]	; (800d36c <_svfprintf_r+0x74c>)
 800d23a:	6021      	str	r1, [r4, #0]
 800d23c:	2b10      	cmp	r3, #16
 800d23e:	f102 0201 	add.w	r2, r2, #1
 800d242:	f104 0008 	add.w	r0, r4, #8
 800d246:	f300 82f7 	bgt.w	800d838 <_svfprintf_r+0xc18>
 800d24a:	eb0c 0103 	add.w	r1, ip, r3
 800d24e:	2a07      	cmp	r2, #7
 800d250:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d254:	6063      	str	r3, [r4, #4]
 800d256:	f340 8304 	ble.w	800d862 <_svfprintf_r+0xc42>
 800d25a:	aa1e      	add	r2, sp, #120	; 0x78
 800d25c:	4659      	mov	r1, fp
 800d25e:	4638      	mov	r0, r7
 800d260:	f002 f9fa 	bl	800f658 <__ssprint_r>
 800d264:	2800      	cmp	r0, #0
 800d266:	f040 8646 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d26a:	ac21      	add	r4, sp, #132	; 0x84
 800d26c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800d270:	b173      	cbz	r3, 800d290 <_svfprintf_r+0x670>
 800d272:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 800d276:	6023      	str	r3, [r4, #0]
 800d278:	2301      	movs	r3, #1
 800d27a:	6063      	str	r3, [r4, #4]
 800d27c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d27e:	3301      	adds	r3, #1
 800d280:	9320      	str	r3, [sp, #128]	; 0x80
 800d282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d284:	3301      	adds	r3, #1
 800d286:	2b07      	cmp	r3, #7
 800d288:	931f      	str	r3, [sp, #124]	; 0x7c
 800d28a:	f300 82ec 	bgt.w	800d866 <_svfprintf_r+0xc46>
 800d28e:	3408      	adds	r4, #8
 800d290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d292:	b16b      	cbz	r3, 800d2b0 <_svfprintf_r+0x690>
 800d294:	ab17      	add	r3, sp, #92	; 0x5c
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	2302      	movs	r3, #2
 800d29a:	6063      	str	r3, [r4, #4]
 800d29c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d29e:	3302      	adds	r3, #2
 800d2a0:	9320      	str	r3, [sp, #128]	; 0x80
 800d2a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	2b07      	cmp	r3, #7
 800d2a8:	931f      	str	r3, [sp, #124]	; 0x7c
 800d2aa:	f300 82e6 	bgt.w	800d87a <_svfprintf_r+0xc5a>
 800d2ae:	3408      	adds	r4, #8
 800d2b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2b2:	2b80      	cmp	r3, #128	; 0x80
 800d2b4:	d120      	bne.n	800d2f8 <_svfprintf_r+0x6d8>
 800d2b6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	dd1b      	ble.n	800d2f8 <_svfprintf_r+0x6d8>
 800d2c0:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800d2c4:	492a      	ldr	r1, [pc, #168]	; (800d370 <_svfprintf_r+0x750>)
 800d2c6:	6021      	str	r1, [r4, #0]
 800d2c8:	2b10      	cmp	r3, #16
 800d2ca:	f102 0201 	add.w	r2, r2, #1
 800d2ce:	f104 0008 	add.w	r0, r4, #8
 800d2d2:	f300 82dc 	bgt.w	800d88e <_svfprintf_r+0xc6e>
 800d2d6:	eb0c 0103 	add.w	r1, ip, r3
 800d2da:	2a07      	cmp	r2, #7
 800d2dc:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d2e0:	6063      	str	r3, [r4, #4]
 800d2e2:	f340 82e9 	ble.w	800d8b8 <_svfprintf_r+0xc98>
 800d2e6:	aa1e      	add	r2, sp, #120	; 0x78
 800d2e8:	4659      	mov	r1, fp
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f002 f9b4 	bl	800f658 <__ssprint_r>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	f040 8600 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d2f6:	ac21      	add	r4, sp, #132	; 0x84
 800d2f8:	eba9 0906 	sub.w	r9, r9, r6
 800d2fc:	f1b9 0f00 	cmp.w	r9, #0
 800d300:	dd1c      	ble.n	800d33c <_svfprintf_r+0x71c>
 800d302:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800d306:	481a      	ldr	r0, [pc, #104]	; (800d370 <_svfprintf_r+0x750>)
 800d308:	6020      	str	r0, [r4, #0]
 800d30a:	f1b9 0f10 	cmp.w	r9, #16
 800d30e:	f102 0201 	add.w	r2, r2, #1
 800d312:	f104 0108 	add.w	r1, r4, #8
 800d316:	f300 82d1 	bgt.w	800d8bc <_svfprintf_r+0xc9c>
 800d31a:	444b      	add	r3, r9
 800d31c:	2a07      	cmp	r2, #7
 800d31e:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800d322:	f8c4 9004 	str.w	r9, [r4, #4]
 800d326:	f340 82dd 	ble.w	800d8e4 <_svfprintf_r+0xcc4>
 800d32a:	aa1e      	add	r2, sp, #120	; 0x78
 800d32c:	4659      	mov	r1, fp
 800d32e:	4638      	mov	r0, r7
 800d330:	f002 f992 	bl	800f658 <__ssprint_r>
 800d334:	2800      	cmp	r0, #0
 800d336:	f040 85de 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d33a:	ac21      	add	r4, sp, #132	; 0x84
 800d33c:	05e9      	lsls	r1, r5, #23
 800d33e:	9820      	ldr	r0, [sp, #128]	; 0x80
 800d340:	f100 82d6 	bmi.w	800d8f0 <_svfprintf_r+0xcd0>
 800d344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d346:	3301      	adds	r3, #1
 800d348:	4430      	add	r0, r6
 800d34a:	2b07      	cmp	r3, #7
 800d34c:	e9c4 a600 	strd	sl, r6, [r4]
 800d350:	9020      	str	r0, [sp, #128]	; 0x80
 800d352:	931f      	str	r3, [sp, #124]	; 0x7c
 800d354:	f300 8310 	bgt.w	800d978 <_svfprintf_r+0xd58>
 800d358:	3408      	adds	r4, #8
 800d35a:	076b      	lsls	r3, r5, #29
 800d35c:	f100 85ac 	bmi.w	800deb8 <_svfprintf_r+0x1298>
 800d360:	e008      	b.n	800d374 <_svfprintf_r+0x754>
 800d362:	bf00      	nop
 800d364:	08010d59 	.word	0x08010d59
 800d368:	08010d6a 	.word	0x08010d6a
 800d36c:	080110f8 	.word	0x080110f8
 800d370:	08011108 	.word	0x08011108
 800d374:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800d378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37a:	428a      	cmp	r2, r1
 800d37c:	bfac      	ite	ge
 800d37e:	189b      	addge	r3, r3, r2
 800d380:	185b      	addlt	r3, r3, r1
 800d382:	930a      	str	r3, [sp, #40]	; 0x28
 800d384:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d386:	b13b      	cbz	r3, 800d398 <_svfprintf_r+0x778>
 800d388:	aa1e      	add	r2, sp, #120	; 0x78
 800d38a:	4659      	mov	r1, fp
 800d38c:	4638      	mov	r0, r7
 800d38e:	f002 f963 	bl	800f658 <__ssprint_r>
 800d392:	2800      	cmp	r0, #0
 800d394:	f040 85af 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d398:	2300      	movs	r3, #0
 800d39a:	931f      	str	r3, [sp, #124]	; 0x7c
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f040 85c6 	bne.w	800df30 <_svfprintf_r+0x1310>
 800d3a4:	ac21      	add	r4, sp, #132	; 0x84
 800d3a6:	e0e3      	b.n	800d570 <_svfprintf_r+0x950>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9302      	str	r3, [sp, #8]
 800d3ac:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800d3b0:	e64a      	b.n	800d048 <_svfprintf_r+0x428>
 800d3b2:	9002      	str	r0, [sp, #8]
 800d3b4:	e648      	b.n	800d048 <_svfprintf_r+0x428>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9302      	str	r3, [sp, #8]
 800d3ba:	2606      	movs	r6, #6
 800d3bc:	e644      	b.n	800d048 <_svfprintf_r+0x428>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	e641      	b.n	800d048 <_svfprintf_r+0x428>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	eeb0 9b48 	vmov.f64	d9, d8
 800d3ca:	e648      	b.n	800d05e <_svfprintf_r+0x43e>
 800d3cc:	f800 ec01 	strb.w	lr, [r0, #-1]
 800d3d0:	e694      	b.n	800d0fc <_svfprintf_r+0x4dc>
 800d3d2:	f802 eb01 	strb.w	lr, [r2], #1
 800d3d6:	ebac 0102 	sub.w	r1, ip, r2
 800d3da:	2900      	cmp	r1, #0
 800d3dc:	daf9      	bge.n	800d3d2 <_svfprintf_r+0x7b2>
 800d3de:	1c42      	adds	r2, r0, #1
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	bfb8      	it	lt
 800d3e4:	2200      	movlt	r2, #0
 800d3e6:	4413      	add	r3, r2
 800d3e8:	e697      	b.n	800d11a <_svfprintf_r+0x4fa>
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	eb03 0c00 	add.w	ip, r3, r0
 800d3f0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800d3f4:	e7ef      	b.n	800d3d6 <_svfprintf_r+0x7b6>
 800d3f6:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d3fa:	d006      	beq.n	800d40a <_svfprintf_r+0x7ea>
 800d3fc:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 800d400:	d118      	bne.n	800d434 <_svfprintf_r+0x814>
 800d402:	f106 0801 	add.w	r8, r6, #1
 800d406:	2102      	movs	r1, #2
 800d408:	e001      	b.n	800d40e <_svfprintf_r+0x7ee>
 800d40a:	46b0      	mov	r8, r6
 800d40c:	2103      	movs	r1, #3
 800d40e:	ab1c      	add	r3, sp, #112	; 0x70
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	ab19      	add	r3, sp, #100	; 0x64
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	4642      	mov	r2, r8
 800d418:	ab18      	add	r3, sp, #96	; 0x60
 800d41a:	4638      	mov	r0, r7
 800d41c:	eeb0 0b49 	vmov.f64	d0, d9
 800d420:	f7fc f806 	bl	8009430 <_dtoa_r>
 800d424:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d428:	4682      	mov	sl, r0
 800d42a:	d105      	bne.n	800d438 <_svfprintf_r+0x818>
 800d42c:	07eb      	lsls	r3, r5, #31
 800d42e:	d403      	bmi.n	800d438 <_svfprintf_r+0x818>
 800d430:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d432:	e672      	b.n	800d11a <_svfprintf_r+0x4fa>
 800d434:	46b0      	mov	r8, r6
 800d436:	e7e6      	b.n	800d406 <_svfprintf_r+0x7e6>
 800d438:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d43c:	eb0a 0308 	add.w	r3, sl, r8
 800d440:	d10d      	bne.n	800d45e <_svfprintf_r+0x83e>
 800d442:	f89a 2000 	ldrb.w	r2, [sl]
 800d446:	2a30      	cmp	r2, #48	; 0x30
 800d448:	d107      	bne.n	800d45a <_svfprintf_r+0x83a>
 800d44a:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	bf1c      	itt	ne
 800d454:	f1c8 0201 	rsbne	r2, r8, #1
 800d458:	9218      	strne	r2, [sp, #96]	; 0x60
 800d45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d45c:	4413      	add	r3, r2
 800d45e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800d462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d466:	bf08      	it	eq
 800d468:	931c      	streq	r3, [sp, #112]	; 0x70
 800d46a:	2130      	movs	r1, #48	; 0x30
 800d46c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d46e:	4293      	cmp	r3, r2
 800d470:	d9de      	bls.n	800d430 <_svfprintf_r+0x810>
 800d472:	1c50      	adds	r0, r2, #1
 800d474:	901c      	str	r0, [sp, #112]	; 0x70
 800d476:	7011      	strb	r1, [r2, #0]
 800d478:	e7f8      	b.n	800d46c <_svfprintf_r+0x84c>
 800d47a:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d47e:	f47f ae5e 	bne.w	800d13e <_svfprintf_r+0x51e>
 800d482:	f005 0301 	and.w	r3, r5, #1
 800d486:	f1b8 0f00 	cmp.w	r8, #0
 800d48a:	ea43 0306 	orr.w	r3, r3, r6
 800d48e:	dd18      	ble.n	800d4c2 <_svfprintf_r+0x8a2>
 800d490:	b383      	cbz	r3, 800d4f4 <_svfprintf_r+0x8d4>
 800d492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d494:	4443      	add	r3, r8
 800d496:	441e      	add	r6, r3
 800d498:	2366      	movs	r3, #102	; 0x66
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	e02f      	b.n	800d4fe <_svfprintf_r+0x8de>
 800d49e:	f813 cb01 	ldrb.w	ip, [r3], #1
 800d4a2:	f802 cb01 	strb.w	ip, [r2], #1
 800d4a6:	e681      	b.n	800d1ac <_svfprintf_r+0x58c>
 800d4a8:	b941      	cbnz	r1, 800d4bc <_svfprintf_r+0x89c>
 800d4aa:	2230      	movs	r2, #48	; 0x30
 800d4ac:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800d4b0:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800d4b4:	3330      	adds	r3, #48	; 0x30
 800d4b6:	f802 3b01 	strb.w	r3, [r2], #1
 800d4ba:	e683      	b.n	800d1c4 <_svfprintf_r+0x5a4>
 800d4bc:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800d4c0:	e7f8      	b.n	800d4b4 <_svfprintf_r+0x894>
 800d4c2:	b1cb      	cbz	r3, 800d4f8 <_svfprintf_r+0x8d8>
 800d4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	e7e5      	b.n	800d496 <_svfprintf_r+0x876>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	4598      	cmp	r8, r3
 800d4ce:	db06      	blt.n	800d4de <_svfprintf_r+0x8be>
 800d4d0:	07e9      	lsls	r1, r5, #31
 800d4d2:	d52a      	bpl.n	800d52a <_svfprintf_r+0x90a>
 800d4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4d6:	eb08 0603 	add.w	r6, r8, r3
 800d4da:	2367      	movs	r3, #103	; 0x67
 800d4dc:	e7dd      	b.n	800d49a <_svfprintf_r+0x87a>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4e2:	f1b8 0f00 	cmp.w	r8, #0
 800d4e6:	eb03 0602 	add.w	r6, r3, r2
 800d4ea:	dcf6      	bgt.n	800d4da <_svfprintf_r+0x8ba>
 800d4ec:	f1c8 0301 	rsb	r3, r8, #1
 800d4f0:	441e      	add	r6, r3
 800d4f2:	e7f2      	b.n	800d4da <_svfprintf_r+0x8ba>
 800d4f4:	4646      	mov	r6, r8
 800d4f6:	e7cf      	b.n	800d498 <_svfprintf_r+0x878>
 800d4f8:	2366      	movs	r3, #102	; 0x66
 800d4fa:	9304      	str	r3, [sp, #16]
 800d4fc:	2601      	movs	r6, #1
 800d4fe:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 800d502:	9307      	str	r3, [sp, #28]
 800d504:	d025      	beq.n	800d552 <_svfprintf_r+0x932>
 800d506:	2300      	movs	r3, #0
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800d510:	f77f ae6d 	ble.w	800d1ee <_svfprintf_r+0x5ce>
 800d514:	9b08      	ldr	r3, [sp, #32]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2bff      	cmp	r3, #255	; 0xff
 800d51a:	d108      	bne.n	800d52e <_svfprintf_r+0x90e>
 800d51c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d520:	4413      	add	r3, r2
 800d522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d524:	fb02 6603 	mla	r6, r2, r3, r6
 800d528:	e661      	b.n	800d1ee <_svfprintf_r+0x5ce>
 800d52a:	4646      	mov	r6, r8
 800d52c:	e7d5      	b.n	800d4da <_svfprintf_r+0x8ba>
 800d52e:	4543      	cmp	r3, r8
 800d530:	daf4      	bge.n	800d51c <_svfprintf_r+0x8fc>
 800d532:	eba8 0803 	sub.w	r8, r8, r3
 800d536:	9b08      	ldr	r3, [sp, #32]
 800d538:	785b      	ldrb	r3, [r3, #1]
 800d53a:	b133      	cbz	r3, 800d54a <_svfprintf_r+0x92a>
 800d53c:	9b07      	ldr	r3, [sp, #28]
 800d53e:	3301      	adds	r3, #1
 800d540:	9307      	str	r3, [sp, #28]
 800d542:	9b08      	ldr	r3, [sp, #32]
 800d544:	3301      	adds	r3, #1
 800d546:	9308      	str	r3, [sp, #32]
 800d548:	e7e4      	b.n	800d514 <_svfprintf_r+0x8f4>
 800d54a:	9b06      	ldr	r3, [sp, #24]
 800d54c:	3301      	adds	r3, #1
 800d54e:	9306      	str	r3, [sp, #24]
 800d550:	e7e0      	b.n	800d514 <_svfprintf_r+0x8f4>
 800d552:	9b07      	ldr	r3, [sp, #28]
 800d554:	9306      	str	r3, [sp, #24]
 800d556:	e64a      	b.n	800d1ee <_svfprintf_r+0x5ce>
 800d558:	f108 0304 	add.w	r3, r8, #4
 800d55c:	06aa      	lsls	r2, r5, #26
 800d55e:	9305      	str	r3, [sp, #20]
 800d560:	d50c      	bpl.n	800d57c <_svfprintf_r+0x95c>
 800d562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d564:	f8d8 3000 	ldr.w	r3, [r8]
 800d568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d56a:	17d2      	asrs	r2, r2, #31
 800d56c:	e9c3 1200 	strd	r1, r2, [r3]
 800d570:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d574:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d578:	f7ff bb8f 	b.w	800cc9a <_svfprintf_r+0x7a>
 800d57c:	06eb      	lsls	r3, r5, #27
 800d57e:	d504      	bpl.n	800d58a <_svfprintf_r+0x96a>
 800d580:	f8d8 3000 	ldr.w	r3, [r8]
 800d584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	e7f2      	b.n	800d570 <_svfprintf_r+0x950>
 800d58a:	066e      	lsls	r6, r5, #25
 800d58c:	d504      	bpl.n	800d598 <_svfprintf_r+0x978>
 800d58e:	f8d8 3000 	ldr.w	r3, [r8]
 800d592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d594:	801a      	strh	r2, [r3, #0]
 800d596:	e7eb      	b.n	800d570 <_svfprintf_r+0x950>
 800d598:	05ad      	lsls	r5, r5, #22
 800d59a:	d5f1      	bpl.n	800d580 <_svfprintf_r+0x960>
 800d59c:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	e7e4      	b.n	800d570 <_svfprintf_r+0x950>
 800d5a6:	f045 0510 	orr.w	r5, r5, #16
 800d5aa:	f015 0320 	ands.w	r3, r5, #32
 800d5ae:	d020      	beq.n	800d5f2 <_svfprintf_r+0x9d2>
 800d5b0:	f108 0307 	add.w	r3, r8, #7
 800d5b4:	f023 0307 	bic.w	r3, r3, #7
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d5be:	f852 8b08 	ldr.w	r8, [r2], #8
 800d5c2:	9205      	str	r2, [sp, #20]
 800d5c4:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800d5d0:	1c72      	adds	r2, r6, #1
 800d5d2:	f000 84c3 	beq.w	800df5c <_svfprintf_r+0x133c>
 800d5d6:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800d5da:	9202      	str	r2, [sp, #8]
 800d5dc:	ea58 0209 	orrs.w	r2, r8, r9
 800d5e0:	f040 84c1 	bne.w	800df66 <_svfprintf_r+0x1346>
 800d5e4:	2e00      	cmp	r6, #0
 800d5e6:	f000 810d 	beq.w	800d804 <_svfprintf_r+0xbe4>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	f040 84be 	bne.w	800df6c <_svfprintf_r+0x134c>
 800d5f0:	e0ad      	b.n	800d74e <_svfprintf_r+0xb2e>
 800d5f2:	4642      	mov	r2, r8
 800d5f4:	f015 0910 	ands.w	r9, r5, #16
 800d5f8:	f852 8b04 	ldr.w	r8, [r2], #4
 800d5fc:	9205      	str	r2, [sp, #20]
 800d5fe:	d001      	beq.n	800d604 <_svfprintf_r+0x9e4>
 800d600:	4699      	mov	r9, r3
 800d602:	e7df      	b.n	800d5c4 <_svfprintf_r+0x9a4>
 800d604:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800d608:	d002      	beq.n	800d610 <_svfprintf_r+0x9f0>
 800d60a:	fa1f f888 	uxth.w	r8, r8
 800d60e:	e7d9      	b.n	800d5c4 <_svfprintf_r+0x9a4>
 800d610:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800d614:	d0d6      	beq.n	800d5c4 <_svfprintf_r+0x9a4>
 800d616:	fa5f f888 	uxtb.w	r8, r8
 800d61a:	e7f1      	b.n	800d600 <_svfprintf_r+0x9e0>
 800d61c:	4643      	mov	r3, r8
 800d61e:	2278      	movs	r2, #120	; 0x78
 800d620:	f853 8b04 	ldr.w	r8, [r3], #4
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	2330      	movs	r3, #48	; 0x30
 800d628:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800d62c:	4bae      	ldr	r3, [pc, #696]	; (800d8e8 <_svfprintf_r+0xcc8>)
 800d62e:	9312      	str	r3, [sp, #72]	; 0x48
 800d630:	f04f 0900 	mov.w	r9, #0
 800d634:	f045 0502 	orr.w	r5, r5, #2
 800d638:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 800d63c:	2302      	movs	r3, #2
 800d63e:	9204      	str	r2, [sp, #16]
 800d640:	e7c3      	b.n	800d5ca <_svfprintf_r+0x9aa>
 800d642:	4643      	mov	r3, r8
 800d644:	1c70      	adds	r0, r6, #1
 800d646:	f853 ab04 	ldr.w	sl, [r3], #4
 800d64a:	9305      	str	r3, [sp, #20]
 800d64c:	f04f 0800 	mov.w	r8, #0
 800d650:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 800d654:	d010      	beq.n	800d678 <_svfprintf_r+0xa58>
 800d656:	4632      	mov	r2, r6
 800d658:	4641      	mov	r1, r8
 800d65a:	4650      	mov	r0, sl
 800d65c:	f7f2 fdf8 	bl	8000250 <memchr>
 800d660:	9002      	str	r0, [sp, #8]
 800d662:	2800      	cmp	r0, #0
 800d664:	f000 80e5 	beq.w	800d832 <_svfprintf_r+0xc12>
 800d668:	e9cd 8806 	strd	r8, r8, [sp, #24]
 800d66c:	eba0 060a 	sub.w	r6, r0, sl
 800d670:	f8cd 8008 	str.w	r8, [sp, #8]
 800d674:	46c1      	mov	r9, r8
 800d676:	e5c2      	b.n	800d1fe <_svfprintf_r+0x5de>
 800d678:	4650      	mov	r0, sl
 800d67a:	f7f2 fde1 	bl	8000240 <strlen>
 800d67e:	46c1      	mov	r9, r8
 800d680:	4606      	mov	r6, r0
 800d682:	f8cd 8008 	str.w	r8, [sp, #8]
 800d686:	464b      	mov	r3, r9
 800d688:	e48a      	b.n	800cfa0 <_svfprintf_r+0x380>
 800d68a:	f045 0510 	orr.w	r5, r5, #16
 800d68e:	f015 0320 	ands.w	r3, r5, #32
 800d692:	d00b      	beq.n	800d6ac <_svfprintf_r+0xa8c>
 800d694:	f108 0307 	add.w	r3, r8, #7
 800d698:	f023 0307 	bic.w	r3, r3, #7
 800d69c:	461a      	mov	r2, r3
 800d69e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d6a2:	f852 8b08 	ldr.w	r8, [r2], #8
 800d6a6:	9205      	str	r2, [sp, #20]
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e78e      	b.n	800d5ca <_svfprintf_r+0x9aa>
 800d6ac:	4642      	mov	r2, r8
 800d6ae:	f015 0910 	ands.w	r9, r5, #16
 800d6b2:	f852 8b04 	ldr.w	r8, [r2], #4
 800d6b6:	9205      	str	r2, [sp, #20]
 800d6b8:	d001      	beq.n	800d6be <_svfprintf_r+0xa9e>
 800d6ba:	4699      	mov	r9, r3
 800d6bc:	e7f4      	b.n	800d6a8 <_svfprintf_r+0xa88>
 800d6be:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800d6c2:	d002      	beq.n	800d6ca <_svfprintf_r+0xaaa>
 800d6c4:	fa1f f888 	uxth.w	r8, r8
 800d6c8:	e7ee      	b.n	800d6a8 <_svfprintf_r+0xa88>
 800d6ca:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800d6ce:	d0eb      	beq.n	800d6a8 <_svfprintf_r+0xa88>
 800d6d0:	fa5f f888 	uxtb.w	r8, r8
 800d6d4:	e7f1      	b.n	800d6ba <_svfprintf_r+0xa9a>
 800d6d6:	4b85      	ldr	r3, [pc, #532]	; (800d8ec <_svfprintf_r+0xccc>)
 800d6d8:	9312      	str	r3, [sp, #72]	; 0x48
 800d6da:	f015 0320 	ands.w	r3, r5, #32
 800d6de:	d01c      	beq.n	800d71a <_svfprintf_r+0xafa>
 800d6e0:	f108 0307 	add.w	r3, r8, #7
 800d6e4:	f023 0307 	bic.w	r3, r3, #7
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d6ee:	f852 8b08 	ldr.w	r8, [r2], #8
 800d6f2:	9205      	str	r2, [sp, #20]
 800d6f4:	07e9      	lsls	r1, r5, #31
 800d6f6:	d50a      	bpl.n	800d70e <_svfprintf_r+0xaee>
 800d6f8:	ea58 0309 	orrs.w	r3, r8, r9
 800d6fc:	d007      	beq.n	800d70e <_svfprintf_r+0xaee>
 800d6fe:	2330      	movs	r3, #48	; 0x30
 800d700:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800d70a:	f045 0502 	orr.w	r5, r5, #2
 800d70e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800d712:	2302      	movs	r3, #2
 800d714:	e759      	b.n	800d5ca <_svfprintf_r+0x9aa>
 800d716:	4b74      	ldr	r3, [pc, #464]	; (800d8e8 <_svfprintf_r+0xcc8>)
 800d718:	e7de      	b.n	800d6d8 <_svfprintf_r+0xab8>
 800d71a:	4642      	mov	r2, r8
 800d71c:	f015 0910 	ands.w	r9, r5, #16
 800d720:	f852 8b04 	ldr.w	r8, [r2], #4
 800d724:	9205      	str	r2, [sp, #20]
 800d726:	d001      	beq.n	800d72c <_svfprintf_r+0xb0c>
 800d728:	4699      	mov	r9, r3
 800d72a:	e7e3      	b.n	800d6f4 <_svfprintf_r+0xad4>
 800d72c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800d730:	d002      	beq.n	800d738 <_svfprintf_r+0xb18>
 800d732:	fa1f f888 	uxth.w	r8, r8
 800d736:	e7dd      	b.n	800d6f4 <_svfprintf_r+0xad4>
 800d738:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800d73c:	d0da      	beq.n	800d6f4 <_svfprintf_r+0xad4>
 800d73e:	fa5f f888 	uxtb.w	r8, r8
 800d742:	e7f1      	b.n	800d728 <_svfprintf_r+0xb08>
 800d744:	f1b8 0f0a 	cmp.w	r8, #10
 800d748:	f179 0300 	sbcs.w	r3, r9, #0
 800d74c:	d207      	bcs.n	800d75e <_svfprintf_r+0xb3e>
 800d74e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800d752:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 800d756:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 800d75a:	f000 bc25 	b.w	800dfa8 <_svfprintf_r+0x1388>
 800d75e:	2300      	movs	r3, #0
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	9b02      	ldr	r3, [sp, #8]
 800d764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d768:	ad4a      	add	r5, sp, #296	; 0x128
 800d76a:	9306      	str	r3, [sp, #24]
 800d76c:	220a      	movs	r2, #10
 800d76e:	2300      	movs	r3, #0
 800d770:	4640      	mov	r0, r8
 800d772:	4649      	mov	r1, r9
 800d774:	f7f2 ff78 	bl	8000668 <__aeabi_uldivmod>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	3301      	adds	r3, #1
 800d77c:	9303      	str	r3, [sp, #12]
 800d77e:	9b06      	ldr	r3, [sp, #24]
 800d780:	3230      	adds	r2, #48	; 0x30
 800d782:	f105 3aff 	add.w	sl, r5, #4294967295
 800d786:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d78a:	b1db      	cbz	r3, 800d7c4 <_svfprintf_r+0xba4>
 800d78c:	9b08      	ldr	r3, [sp, #32]
 800d78e:	9a03      	ldr	r2, [sp, #12]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d116      	bne.n	800d7c4 <_svfprintf_r+0xba4>
 800d796:	2aff      	cmp	r2, #255	; 0xff
 800d798:	d014      	beq.n	800d7c4 <_svfprintf_r+0xba4>
 800d79a:	f1b8 0f0a 	cmp.w	r8, #10
 800d79e:	f179 0300 	sbcs.w	r3, r9, #0
 800d7a2:	d30f      	bcc.n	800d7c4 <_svfprintf_r+0xba4>
 800d7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d7a8:	ebaa 0a03 	sub.w	sl, sl, r3
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	f7fe faa3 	bl	800bcfa <strncpy>
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	785b      	ldrb	r3, [r3, #1]
 800d7b8:	b11b      	cbz	r3, 800d7c2 <_svfprintf_r+0xba2>
 800d7ba:	9b08      	ldr	r3, [sp, #32]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	9308      	str	r3, [sp, #32]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9303      	str	r3, [sp, #12]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	220a      	movs	r2, #10
 800d7c8:	4640      	mov	r0, r8
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	f7f2 ff4c 	bl	8000668 <__aeabi_uldivmod>
 800d7d0:	f1b8 0f0a 	cmp.w	r8, #10
 800d7d4:	f179 0300 	sbcs.w	r3, r9, #0
 800d7d8:	f0c0 83e6 	bcc.w	800dfa8 <_svfprintf_r+0x1388>
 800d7dc:	4680      	mov	r8, r0
 800d7de:	4689      	mov	r9, r1
 800d7e0:	4655      	mov	r5, sl
 800d7e2:	e7c3      	b.n	800d76c <_svfprintf_r+0xb4c>
 800d7e4:	f008 030f 	and.w	r3, r8, #15
 800d7e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7ea:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800d7ee:	5cd3      	ldrb	r3, [r2, r3]
 800d7f0:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800d7f4:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 800d7f8:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800d7fc:	ea58 0309 	orrs.w	r3, r8, r9
 800d800:	d1f0      	bne.n	800d7e4 <_svfprintf_r+0xbc4>
 800d802:	e3d1      	b.n	800dfa8 <_svfprintf_r+0x1388>
 800d804:	b92b      	cbnz	r3, 800d812 <_svfprintf_r+0xbf2>
 800d806:	07e8      	lsls	r0, r5, #31
 800d808:	d503      	bpl.n	800d812 <_svfprintf_r+0xbf2>
 800d80a:	2330      	movs	r3, #48	; 0x30
 800d80c:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 800d810:	e7a1      	b.n	800d756 <_svfprintf_r+0xb36>
 800d812:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800d816:	e3c7      	b.n	800dfa8 <_svfprintf_r+0x1388>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 838e 	beq.w	800df3c <_svfprintf_r+0x131c>
 800d820:	2000      	movs	r0, #0
 800d822:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800d826:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800d82a:	f8cd 8014 	str.w	r8, [sp, #20]
 800d82e:	f7ff bb4e 	b.w	800cece <_svfprintf_r+0x2ae>
 800d832:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d836:	e726      	b.n	800d686 <_svfprintf_r+0xa66>
 800d838:	2110      	movs	r1, #16
 800d83a:	6061      	str	r1, [r4, #4]
 800d83c:	2a07      	cmp	r2, #7
 800d83e:	4461      	add	r1, ip
 800d840:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d844:	dd0a      	ble.n	800d85c <_svfprintf_r+0xc3c>
 800d846:	aa1e      	add	r2, sp, #120	; 0x78
 800d848:	4659      	mov	r1, fp
 800d84a:	4638      	mov	r0, r7
 800d84c:	9315      	str	r3, [sp, #84]	; 0x54
 800d84e:	f001 ff03 	bl	800f658 <__ssprint_r>
 800d852:	2800      	cmp	r0, #0
 800d854:	f040 834f 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d85a:	a821      	add	r0, sp, #132	; 0x84
 800d85c:	3b10      	subs	r3, #16
 800d85e:	4604      	mov	r4, r0
 800d860:	e4e8      	b.n	800d234 <_svfprintf_r+0x614>
 800d862:	4604      	mov	r4, r0
 800d864:	e502      	b.n	800d26c <_svfprintf_r+0x64c>
 800d866:	aa1e      	add	r2, sp, #120	; 0x78
 800d868:	4659      	mov	r1, fp
 800d86a:	4638      	mov	r0, r7
 800d86c:	f001 fef4 	bl	800f658 <__ssprint_r>
 800d870:	2800      	cmp	r0, #0
 800d872:	f040 8340 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d876:	ac21      	add	r4, sp, #132	; 0x84
 800d878:	e50a      	b.n	800d290 <_svfprintf_r+0x670>
 800d87a:	aa1e      	add	r2, sp, #120	; 0x78
 800d87c:	4659      	mov	r1, fp
 800d87e:	4638      	mov	r0, r7
 800d880:	f001 feea 	bl	800f658 <__ssprint_r>
 800d884:	2800      	cmp	r0, #0
 800d886:	f040 8336 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d88a:	ac21      	add	r4, sp, #132	; 0x84
 800d88c:	e510      	b.n	800d2b0 <_svfprintf_r+0x690>
 800d88e:	2110      	movs	r1, #16
 800d890:	6061      	str	r1, [r4, #4]
 800d892:	2a07      	cmp	r2, #7
 800d894:	4461      	add	r1, ip
 800d896:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d89a:	dd0a      	ble.n	800d8b2 <_svfprintf_r+0xc92>
 800d89c:	aa1e      	add	r2, sp, #120	; 0x78
 800d89e:	4659      	mov	r1, fp
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8a4:	f001 fed8 	bl	800f658 <__ssprint_r>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	f040 8324 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d8ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8b0:	a821      	add	r0, sp, #132	; 0x84
 800d8b2:	3b10      	subs	r3, #16
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	e503      	b.n	800d2c0 <_svfprintf_r+0x6a0>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	e51d      	b.n	800d2f8 <_svfprintf_r+0x6d8>
 800d8bc:	2010      	movs	r0, #16
 800d8be:	4403      	add	r3, r0
 800d8c0:	2a07      	cmp	r2, #7
 800d8c2:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800d8c6:	6060      	str	r0, [r4, #4]
 800d8c8:	dd08      	ble.n	800d8dc <_svfprintf_r+0xcbc>
 800d8ca:	aa1e      	add	r2, sp, #120	; 0x78
 800d8cc:	4659      	mov	r1, fp
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	f001 fec2 	bl	800f658 <__ssprint_r>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	f040 830e 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d8da:	a921      	add	r1, sp, #132	; 0x84
 800d8dc:	f1a9 0910 	sub.w	r9, r9, #16
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	e50e      	b.n	800d302 <_svfprintf_r+0x6e2>
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	e529      	b.n	800d33c <_svfprintf_r+0x71c>
 800d8e8:	08010d59 	.word	0x08010d59
 800d8ec:	08010d6a 	.word	0x08010d6a
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	2b65      	cmp	r3, #101	; 0x65
 800d8f4:	f340 8252 	ble.w	800dd9c <_svfprintf_r+0x117c>
 800d8f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d900:	d16b      	bne.n	800d9da <_svfprintf_r+0xdba>
 800d902:	4b74      	ldr	r3, [pc, #464]	; (800dad4 <_svfprintf_r+0xeb4>)
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	2301      	movs	r3, #1
 800d908:	4418      	add	r0, r3
 800d90a:	6063      	str	r3, [r4, #4]
 800d90c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d90e:	9020      	str	r0, [sp, #128]	; 0x80
 800d910:	3301      	adds	r3, #1
 800d912:	2b07      	cmp	r3, #7
 800d914:	931f      	str	r3, [sp, #124]	; 0x7c
 800d916:	dc39      	bgt.n	800d98c <_svfprintf_r+0xd6c>
 800d918:	3408      	adds	r4, #8
 800d91a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d91c:	9a03      	ldr	r2, [sp, #12]
 800d91e:	4293      	cmp	r3, r2
 800d920:	db02      	blt.n	800d928 <_svfprintf_r+0xd08>
 800d922:	07ea      	lsls	r2, r5, #31
 800d924:	f57f ad19 	bpl.w	800d35a <_svfprintf_r+0x73a>
 800d928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d92e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d930:	6063      	str	r3, [r4, #4]
 800d932:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d934:	4413      	add	r3, r2
 800d936:	9320      	str	r3, [sp, #128]	; 0x80
 800d938:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d93a:	3301      	adds	r3, #1
 800d93c:	2b07      	cmp	r3, #7
 800d93e:	931f      	str	r3, [sp, #124]	; 0x7c
 800d940:	dc2e      	bgt.n	800d9a0 <_svfprintf_r+0xd80>
 800d942:	3408      	adds	r4, #8
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	1e5e      	subs	r6, r3, #1
 800d948:	2e00      	cmp	r6, #0
 800d94a:	f77f ad06 	ble.w	800d35a <_svfprintf_r+0x73a>
 800d94e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800dad8 <_svfprintf_r+0xeb8>
 800d952:	f04f 0910 	mov.w	r9, #16
 800d956:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800d95a:	2e10      	cmp	r6, #16
 800d95c:	f103 0301 	add.w	r3, r3, #1
 800d960:	f104 0108 	add.w	r1, r4, #8
 800d964:	f8c4 8000 	str.w	r8, [r4]
 800d968:	dc24      	bgt.n	800d9b4 <_svfprintf_r+0xd94>
 800d96a:	6066      	str	r6, [r4, #4]
 800d96c:	2b07      	cmp	r3, #7
 800d96e:	4416      	add	r6, r2
 800d970:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800d974:	f340 829d 	ble.w	800deb2 <_svfprintf_r+0x1292>
 800d978:	aa1e      	add	r2, sp, #120	; 0x78
 800d97a:	4659      	mov	r1, fp
 800d97c:	4638      	mov	r0, r7
 800d97e:	f001 fe6b 	bl	800f658 <__ssprint_r>
 800d982:	2800      	cmp	r0, #0
 800d984:	f040 82b7 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d988:	ac21      	add	r4, sp, #132	; 0x84
 800d98a:	e4e6      	b.n	800d35a <_svfprintf_r+0x73a>
 800d98c:	aa1e      	add	r2, sp, #120	; 0x78
 800d98e:	4659      	mov	r1, fp
 800d990:	4638      	mov	r0, r7
 800d992:	f001 fe61 	bl	800f658 <__ssprint_r>
 800d996:	2800      	cmp	r0, #0
 800d998:	f040 82ad 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d99c:	ac21      	add	r4, sp, #132	; 0x84
 800d99e:	e7bc      	b.n	800d91a <_svfprintf_r+0xcfa>
 800d9a0:	aa1e      	add	r2, sp, #120	; 0x78
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f001 fe57 	bl	800f658 <__ssprint_r>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	f040 82a3 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d9b0:	ac21      	add	r4, sp, #132	; 0x84
 800d9b2:	e7c7      	b.n	800d944 <_svfprintf_r+0xd24>
 800d9b4:	3210      	adds	r2, #16
 800d9b6:	2b07      	cmp	r3, #7
 800d9b8:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800d9bc:	f8c4 9004 	str.w	r9, [r4, #4]
 800d9c0:	dd08      	ble.n	800d9d4 <_svfprintf_r+0xdb4>
 800d9c2:	aa1e      	add	r2, sp, #120	; 0x78
 800d9c4:	4659      	mov	r1, fp
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	f001 fe46 	bl	800f658 <__ssprint_r>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	f040 8292 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800d9d2:	a921      	add	r1, sp, #132	; 0x84
 800d9d4:	3e10      	subs	r6, #16
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	e7bd      	b.n	800d956 <_svfprintf_r+0xd36>
 800d9da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc7d      	bgt.n	800dadc <_svfprintf_r+0xebc>
 800d9e0:	4b3c      	ldr	r3, [pc, #240]	; (800dad4 <_svfprintf_r+0xeb4>)
 800d9e2:	6023      	str	r3, [r4, #0]
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	4418      	add	r0, r3
 800d9e8:	6063      	str	r3, [r4, #4]
 800d9ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9ec:	9020      	str	r0, [sp, #128]	; 0x80
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	2b07      	cmp	r3, #7
 800d9f2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d9f4:	dc47      	bgt.n	800da86 <_svfprintf_r+0xe66>
 800d9f6:	3408      	adds	r4, #8
 800d9f8:	9903      	ldr	r1, [sp, #12]
 800d9fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9fe:	430a      	orrs	r2, r1
 800da00:	f005 0101 	and.w	r1, r5, #1
 800da04:	430a      	orrs	r2, r1
 800da06:	f43f aca8 	beq.w	800d35a <_svfprintf_r+0x73a>
 800da0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da0c:	6022      	str	r2, [r4, #0]
 800da0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da10:	6062      	str	r2, [r4, #4]
 800da12:	4413      	add	r3, r2
 800da14:	9320      	str	r3, [sp, #128]	; 0x80
 800da16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da18:	3301      	adds	r3, #1
 800da1a:	2b07      	cmp	r3, #7
 800da1c:	931f      	str	r3, [sp, #124]	; 0x7c
 800da1e:	dc3c      	bgt.n	800da9a <_svfprintf_r+0xe7a>
 800da20:	f104 0308 	add.w	r3, r4, #8
 800da24:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800da26:	2e00      	cmp	r6, #0
 800da28:	da1c      	bge.n	800da64 <_svfprintf_r+0xe44>
 800da2a:	4c2b      	ldr	r4, [pc, #172]	; (800dad8 <_svfprintf_r+0xeb8>)
 800da2c:	4276      	negs	r6, r6
 800da2e:	461a      	mov	r2, r3
 800da30:	f04f 0810 	mov.w	r8, #16
 800da34:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800da38:	2e10      	cmp	r6, #16
 800da3a:	f101 0101 	add.w	r1, r1, #1
 800da3e:	f103 0308 	add.w	r3, r3, #8
 800da42:	6014      	str	r4, [r2, #0]
 800da44:	dc33      	bgt.n	800daae <_svfprintf_r+0xe8e>
 800da46:	6056      	str	r6, [r2, #4]
 800da48:	2907      	cmp	r1, #7
 800da4a:	4406      	add	r6, r0
 800da4c:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 800da50:	dd08      	ble.n	800da64 <_svfprintf_r+0xe44>
 800da52:	aa1e      	add	r2, sp, #120	; 0x78
 800da54:	4659      	mov	r1, fp
 800da56:	4638      	mov	r0, r7
 800da58:	f001 fdfe 	bl	800f658 <__ssprint_r>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f040 824a 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800da62:	ab21      	add	r3, sp, #132	; 0x84
 800da64:	9a03      	ldr	r2, [sp, #12]
 800da66:	605a      	str	r2, [r3, #4]
 800da68:	9903      	ldr	r1, [sp, #12]
 800da6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da6c:	f8c3 a000 	str.w	sl, [r3]
 800da70:	440a      	add	r2, r1
 800da72:	9220      	str	r2, [sp, #128]	; 0x80
 800da74:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800da76:	3201      	adds	r2, #1
 800da78:	2a07      	cmp	r2, #7
 800da7a:	921f      	str	r2, [sp, #124]	; 0x7c
 800da7c:	f73f af7c 	bgt.w	800d978 <_svfprintf_r+0xd58>
 800da80:	f103 0408 	add.w	r4, r3, #8
 800da84:	e469      	b.n	800d35a <_svfprintf_r+0x73a>
 800da86:	aa1e      	add	r2, sp, #120	; 0x78
 800da88:	4659      	mov	r1, fp
 800da8a:	4638      	mov	r0, r7
 800da8c:	f001 fde4 	bl	800f658 <__ssprint_r>
 800da90:	2800      	cmp	r0, #0
 800da92:	f040 8230 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800da96:	ac21      	add	r4, sp, #132	; 0x84
 800da98:	e7ae      	b.n	800d9f8 <_svfprintf_r+0xdd8>
 800da9a:	aa1e      	add	r2, sp, #120	; 0x78
 800da9c:	4659      	mov	r1, fp
 800da9e:	4638      	mov	r0, r7
 800daa0:	f001 fdda 	bl	800f658 <__ssprint_r>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	f040 8226 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800daaa:	ab21      	add	r3, sp, #132	; 0x84
 800daac:	e7ba      	b.n	800da24 <_svfprintf_r+0xe04>
 800daae:	3010      	adds	r0, #16
 800dab0:	2907      	cmp	r1, #7
 800dab2:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800dab6:	f8c2 8004 	str.w	r8, [r2, #4]
 800daba:	dd08      	ble.n	800dace <_svfprintf_r+0xeae>
 800dabc:	aa1e      	add	r2, sp, #120	; 0x78
 800dabe:	4659      	mov	r1, fp
 800dac0:	4638      	mov	r0, r7
 800dac2:	f001 fdc9 	bl	800f658 <__ssprint_r>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	f040 8215 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dacc:	ab21      	add	r3, sp, #132	; 0x84
 800dace:	3e10      	subs	r6, #16
 800dad0:	461a      	mov	r2, r3
 800dad2:	e7af      	b.n	800da34 <_svfprintf_r+0xe14>
 800dad4:	08010d7b 	.word	0x08010d7b
 800dad8:	08011108 	.word	0x08011108
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	4543      	cmp	r3, r8
 800dae0:	bfa8      	it	ge
 800dae2:	4643      	movge	r3, r8
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	4699      	mov	r9, r3
 800dae8:	dd0a      	ble.n	800db00 <_svfprintf_r+0xee0>
 800daea:	4418      	add	r0, r3
 800daec:	e9c4 a300 	strd	sl, r3, [r4]
 800daf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800daf2:	9020      	str	r0, [sp, #128]	; 0x80
 800daf4:	3301      	adds	r3, #1
 800daf6:	2b07      	cmp	r3, #7
 800daf8:	931f      	str	r3, [sp, #124]	; 0x7c
 800dafa:	f300 8094 	bgt.w	800dc26 <_svfprintf_r+0x1006>
 800dafe:	3408      	adds	r4, #8
 800db00:	f1b9 0f00 	cmp.w	r9, #0
 800db04:	bfac      	ite	ge
 800db06:	eba8 0609 	subge.w	r6, r8, r9
 800db0a:	4646      	movlt	r6, r8
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	dd1c      	ble.n	800db4a <_svfprintf_r+0xf2a>
 800db10:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 800df54 <_svfprintf_r+0x1334>
 800db14:	f8c4 9000 	str.w	r9, [r4]
 800db18:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800db1c:	2e10      	cmp	r6, #16
 800db1e:	f103 0301 	add.w	r3, r3, #1
 800db22:	f104 0108 	add.w	r1, r4, #8
 800db26:	f300 8088 	bgt.w	800dc3a <_svfprintf_r+0x101a>
 800db2a:	6066      	str	r6, [r4, #4]
 800db2c:	2b07      	cmp	r3, #7
 800db2e:	4416      	add	r6, r2
 800db30:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800db34:	f340 8094 	ble.w	800dc60 <_svfprintf_r+0x1040>
 800db38:	aa1e      	add	r2, sp, #120	; 0x78
 800db3a:	4659      	mov	r1, fp
 800db3c:	4638      	mov	r0, r7
 800db3e:	f001 fd8b 	bl	800f658 <__ssprint_r>
 800db42:	2800      	cmp	r0, #0
 800db44:	f040 81d7 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800db48:	ac21      	add	r4, sp, #132	; 0x84
 800db4a:	056b      	lsls	r3, r5, #21
 800db4c:	eb0a 0608 	add.w	r6, sl, r8
 800db50:	d50c      	bpl.n	800db6c <_svfprintf_r+0xf4c>
 800db52:	9b07      	ldr	r3, [sp, #28]
 800db54:	2b00      	cmp	r3, #0
 800db56:	f040 8085 	bne.w	800dc64 <_svfprintf_r+0x1044>
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8084 	bne.w	800dc6a <_svfprintf_r+0x104a>
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	4453      	add	r3, sl
 800db66:	429e      	cmp	r6, r3
 800db68:	bf28      	it	cs
 800db6a:	461e      	movcs	r6, r3
 800db6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db6e:	9a03      	ldr	r2, [sp, #12]
 800db70:	4293      	cmp	r3, r2
 800db72:	db01      	blt.n	800db78 <_svfprintf_r+0xf58>
 800db74:	07e8      	lsls	r0, r5, #31
 800db76:	d50e      	bpl.n	800db96 <_svfprintf_r+0xf76>
 800db78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db80:	6063      	str	r3, [r4, #4]
 800db82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db84:	4413      	add	r3, r2
 800db86:	9320      	str	r3, [sp, #128]	; 0x80
 800db88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db8a:	3301      	adds	r3, #1
 800db8c:	2b07      	cmp	r3, #7
 800db8e:	931f      	str	r3, [sp, #124]	; 0x7c
 800db90:	f300 80f0 	bgt.w	800dd74 <_svfprintf_r+0x1154>
 800db94:	3408      	adds	r4, #8
 800db96:	9b03      	ldr	r3, [sp, #12]
 800db98:	9903      	ldr	r1, [sp, #12]
 800db9a:	eb0a 0203 	add.w	r2, sl, r3
 800db9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dba0:	1b92      	subs	r2, r2, r6
 800dba2:	eba1 0803 	sub.w	r8, r1, r3
 800dba6:	4590      	cmp	r8, r2
 800dba8:	bfa8      	it	ge
 800dbaa:	4690      	movge	r8, r2
 800dbac:	f1b8 0f00 	cmp.w	r8, #0
 800dbb0:	dd0b      	ble.n	800dbca <_svfprintf_r+0xfaa>
 800dbb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dbb4:	4443      	add	r3, r8
 800dbb6:	9320      	str	r3, [sp, #128]	; 0x80
 800dbb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dbba:	3301      	adds	r3, #1
 800dbbc:	2b07      	cmp	r3, #7
 800dbbe:	e9c4 6800 	strd	r6, r8, [r4]
 800dbc2:	931f      	str	r3, [sp, #124]	; 0x7c
 800dbc4:	f300 80e0 	bgt.w	800dd88 <_svfprintf_r+0x1168>
 800dbc8:	3408      	adds	r4, #8
 800dbca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	f1b8 0f00 	cmp.w	r8, #0
 800dbd2:	eba3 0606 	sub.w	r6, r3, r6
 800dbd6:	bfa8      	it	ge
 800dbd8:	eba6 0608 	subge.w	r6, r6, r8
 800dbdc:	2e00      	cmp	r6, #0
 800dbde:	f77f abbc 	ble.w	800d35a <_svfprintf_r+0x73a>
 800dbe2:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800df54 <_svfprintf_r+0x1334>
 800dbe6:	f04f 0910 	mov.w	r9, #16
 800dbea:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800dbee:	2e10      	cmp	r6, #16
 800dbf0:	f103 0301 	add.w	r3, r3, #1
 800dbf4:	f104 0108 	add.w	r1, r4, #8
 800dbf8:	f8c4 8000 	str.w	r8, [r4]
 800dbfc:	f77f aeb5 	ble.w	800d96a <_svfprintf_r+0xd4a>
 800dc00:	3210      	adds	r2, #16
 800dc02:	2b07      	cmp	r3, #7
 800dc04:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800dc08:	f8c4 9004 	str.w	r9, [r4, #4]
 800dc0c:	dd08      	ble.n	800dc20 <_svfprintf_r+0x1000>
 800dc0e:	aa1e      	add	r2, sp, #120	; 0x78
 800dc10:	4659      	mov	r1, fp
 800dc12:	4638      	mov	r0, r7
 800dc14:	f001 fd20 	bl	800f658 <__ssprint_r>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	f040 816c 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dc1e:	a921      	add	r1, sp, #132	; 0x84
 800dc20:	3e10      	subs	r6, #16
 800dc22:	460c      	mov	r4, r1
 800dc24:	e7e1      	b.n	800dbea <_svfprintf_r+0xfca>
 800dc26:	aa1e      	add	r2, sp, #120	; 0x78
 800dc28:	4659      	mov	r1, fp
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f001 fd14 	bl	800f658 <__ssprint_r>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	f040 8160 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dc36:	ac21      	add	r4, sp, #132	; 0x84
 800dc38:	e762      	b.n	800db00 <_svfprintf_r+0xee0>
 800dc3a:	2010      	movs	r0, #16
 800dc3c:	4402      	add	r2, r0
 800dc3e:	2b07      	cmp	r3, #7
 800dc40:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800dc44:	6060      	str	r0, [r4, #4]
 800dc46:	dd08      	ble.n	800dc5a <_svfprintf_r+0x103a>
 800dc48:	aa1e      	add	r2, sp, #120	; 0x78
 800dc4a:	4659      	mov	r1, fp
 800dc4c:	4638      	mov	r0, r7
 800dc4e:	f001 fd03 	bl	800f658 <__ssprint_r>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f040 814f 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dc58:	a921      	add	r1, sp, #132	; 0x84
 800dc5a:	3e10      	subs	r6, #16
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	e759      	b.n	800db14 <_svfprintf_r+0xef4>
 800dc60:	460c      	mov	r4, r1
 800dc62:	e772      	b.n	800db4a <_svfprintf_r+0xf2a>
 800dc64:	9b06      	ldr	r3, [sp, #24]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d053      	beq.n	800dd12 <_svfprintf_r+0x10f2>
 800dc6a:	9b06      	ldr	r3, [sp, #24]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	9306      	str	r3, [sp, #24]
 800dc70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc78:	6063      	str	r3, [r4, #4]
 800dc7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc7c:	4413      	add	r3, r2
 800dc7e:	9320      	str	r3, [sp, #128]	; 0x80
 800dc80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc82:	3301      	adds	r3, #1
 800dc84:	2b07      	cmp	r3, #7
 800dc86:	931f      	str	r3, [sp, #124]	; 0x7c
 800dc88:	dc4a      	bgt.n	800dd20 <_svfprintf_r+0x1100>
 800dc8a:	3408      	adds	r4, #8
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	9a08      	ldr	r2, [sp, #32]
 800dc90:	eb0a 0903 	add.w	r9, sl, r3
 800dc94:	eba9 0306 	sub.w	r3, r9, r6
 800dc98:	f892 9000 	ldrb.w	r9, [r2]
 800dc9c:	4599      	cmp	r9, r3
 800dc9e:	bfa8      	it	ge
 800dca0:	4699      	movge	r9, r3
 800dca2:	f1b9 0f00 	cmp.w	r9, #0
 800dca6:	dd0a      	ble.n	800dcbe <_svfprintf_r+0x109e>
 800dca8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dcaa:	444b      	add	r3, r9
 800dcac:	9320      	str	r3, [sp, #128]	; 0x80
 800dcae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	2b07      	cmp	r3, #7
 800dcb4:	e9c4 6900 	strd	r6, r9, [r4]
 800dcb8:	931f      	str	r3, [sp, #124]	; 0x7c
 800dcba:	dc3b      	bgt.n	800dd34 <_svfprintf_r+0x1114>
 800dcbc:	3408      	adds	r4, #8
 800dcbe:	9b08      	ldr	r3, [sp, #32]
 800dcc0:	f893 8000 	ldrb.w	r8, [r3]
 800dcc4:	f1b9 0f00 	cmp.w	r9, #0
 800dcc8:	bfa8      	it	ge
 800dcca:	eba8 0809 	subge.w	r8, r8, r9
 800dcce:	f1b8 0f00 	cmp.w	r8, #0
 800dcd2:	dd1a      	ble.n	800dd0a <_svfprintf_r+0x10ea>
 800dcd4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800dcd8:	489e      	ldr	r0, [pc, #632]	; (800df54 <_svfprintf_r+0x1334>)
 800dcda:	6020      	str	r0, [r4, #0]
 800dcdc:	f1b8 0f10 	cmp.w	r8, #16
 800dce0:	f103 0301 	add.w	r3, r3, #1
 800dce4:	f104 0108 	add.w	r1, r4, #8
 800dce8:	dc2e      	bgt.n	800dd48 <_svfprintf_r+0x1128>
 800dcea:	4442      	add	r2, r8
 800dcec:	2b07      	cmp	r3, #7
 800dcee:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800dcf2:	f8c4 8004 	str.w	r8, [r4, #4]
 800dcf6:	dd3b      	ble.n	800dd70 <_svfprintf_r+0x1150>
 800dcf8:	aa1e      	add	r2, sp, #120	; 0x78
 800dcfa:	4659      	mov	r1, fp
 800dcfc:	4638      	mov	r0, r7
 800dcfe:	f001 fcab 	bl	800f658 <__ssprint_r>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	f040 80f7 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd08:	ac21      	add	r4, sp, #132	; 0x84
 800dd0a:	9b08      	ldr	r3, [sp, #32]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	441e      	add	r6, r3
 800dd10:	e71f      	b.n	800db52 <_svfprintf_r+0xf32>
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	9308      	str	r3, [sp, #32]
 800dd18:	9b07      	ldr	r3, [sp, #28]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	9307      	str	r3, [sp, #28]
 800dd1e:	e7a7      	b.n	800dc70 <_svfprintf_r+0x1050>
 800dd20:	aa1e      	add	r2, sp, #120	; 0x78
 800dd22:	4659      	mov	r1, fp
 800dd24:	4638      	mov	r0, r7
 800dd26:	f001 fc97 	bl	800f658 <__ssprint_r>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	f040 80e3 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd30:	ac21      	add	r4, sp, #132	; 0x84
 800dd32:	e7ab      	b.n	800dc8c <_svfprintf_r+0x106c>
 800dd34:	aa1e      	add	r2, sp, #120	; 0x78
 800dd36:	4659      	mov	r1, fp
 800dd38:	4638      	mov	r0, r7
 800dd3a:	f001 fc8d 	bl	800f658 <__ssprint_r>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f040 80d9 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd44:	ac21      	add	r4, sp, #132	; 0x84
 800dd46:	e7ba      	b.n	800dcbe <_svfprintf_r+0x109e>
 800dd48:	2010      	movs	r0, #16
 800dd4a:	4402      	add	r2, r0
 800dd4c:	2b07      	cmp	r3, #7
 800dd4e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800dd52:	6060      	str	r0, [r4, #4]
 800dd54:	dd08      	ble.n	800dd68 <_svfprintf_r+0x1148>
 800dd56:	aa1e      	add	r2, sp, #120	; 0x78
 800dd58:	4659      	mov	r1, fp
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f001 fc7c 	bl	800f658 <__ssprint_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	f040 80c8 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd66:	a921      	add	r1, sp, #132	; 0x84
 800dd68:	f1a8 0810 	sub.w	r8, r8, #16
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	e7b1      	b.n	800dcd4 <_svfprintf_r+0x10b4>
 800dd70:	460c      	mov	r4, r1
 800dd72:	e7ca      	b.n	800dd0a <_svfprintf_r+0x10ea>
 800dd74:	aa1e      	add	r2, sp, #120	; 0x78
 800dd76:	4659      	mov	r1, fp
 800dd78:	4638      	mov	r0, r7
 800dd7a:	f001 fc6d 	bl	800f658 <__ssprint_r>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f040 80b9 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd84:	ac21      	add	r4, sp, #132	; 0x84
 800dd86:	e706      	b.n	800db96 <_svfprintf_r+0xf76>
 800dd88:	aa1e      	add	r2, sp, #120	; 0x78
 800dd8a:	4659      	mov	r1, fp
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f001 fc63 	bl	800f658 <__ssprint_r>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f040 80af 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800dd98:	ac21      	add	r4, sp, #132	; 0x84
 800dd9a:	e716      	b.n	800dbca <_svfprintf_r+0xfaa>
 800dd9c:	9903      	ldr	r1, [sp, #12]
 800dd9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dda0:	2901      	cmp	r1, #1
 800dda2:	f100 0001 	add.w	r0, r0, #1
 800dda6:	f102 0201 	add.w	r2, r2, #1
 800ddaa:	f104 0308 	add.w	r3, r4, #8
 800ddae:	dc01      	bgt.n	800ddb4 <_svfprintf_r+0x1194>
 800ddb0:	07e9      	lsls	r1, r5, #31
 800ddb2:	d573      	bpl.n	800de9c <_svfprintf_r+0x127c>
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	2a07      	cmp	r2, #7
 800ddb8:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800ddbc:	f8c4 a000 	str.w	sl, [r4]
 800ddc0:	6061      	str	r1, [r4, #4]
 800ddc2:	dd08      	ble.n	800ddd6 <_svfprintf_r+0x11b6>
 800ddc4:	aa1e      	add	r2, sp, #120	; 0x78
 800ddc6:	4659      	mov	r1, fp
 800ddc8:	4638      	mov	r0, r7
 800ddca:	f001 fc45 	bl	800f658 <__ssprint_r>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f040 8091 	bne.w	800def6 <_svfprintf_r+0x12d6>
 800ddd4:	ab21      	add	r3, sp, #132	; 0x84
 800ddd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddde:	605a      	str	r2, [r3, #4]
 800dde0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dde2:	440a      	add	r2, r1
 800dde4:	9220      	str	r2, [sp, #128]	; 0x80
 800dde6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dde8:	3201      	adds	r2, #1
 800ddea:	2a07      	cmp	r2, #7
 800ddec:	921f      	str	r2, [sp, #124]	; 0x7c
 800ddee:	dc25      	bgt.n	800de3c <_svfprintf_r+0x121c>
 800ddf0:	3308      	adds	r3, #8
 800ddf2:	9a03      	ldr	r2, [sp, #12]
 800ddf4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfc:	f102 34ff 	add.w	r4, r2, #4294967295
 800de00:	d025      	beq.n	800de4e <_svfprintf_r+0x122e>
 800de02:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800de04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de06:	f10a 0001 	add.w	r0, sl, #1
 800de0a:	e9c3 0400 	strd	r0, r4, [r3]
 800de0e:	9803      	ldr	r0, [sp, #12]
 800de10:	3101      	adds	r1, #1
 800de12:	3a01      	subs	r2, #1
 800de14:	4402      	add	r2, r0
 800de16:	2907      	cmp	r1, #7
 800de18:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800de1c:	dd47      	ble.n	800deae <_svfprintf_r+0x128e>
 800de1e:	aa1e      	add	r2, sp, #120	; 0x78
 800de20:	4659      	mov	r1, fp
 800de22:	4638      	mov	r0, r7
 800de24:	f001 fc18 	bl	800f658 <__ssprint_r>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d164      	bne.n	800def6 <_svfprintf_r+0x12d6>
 800de2c:	ab21      	add	r3, sp, #132	; 0x84
 800de2e:	aa1a      	add	r2, sp, #104	; 0x68
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de34:	605a      	str	r2, [r3, #4]
 800de36:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de3a:	e619      	b.n	800da70 <_svfprintf_r+0xe50>
 800de3c:	aa1e      	add	r2, sp, #120	; 0x78
 800de3e:	4659      	mov	r1, fp
 800de40:	4638      	mov	r0, r7
 800de42:	f001 fc09 	bl	800f658 <__ssprint_r>
 800de46:	2800      	cmp	r0, #0
 800de48:	d155      	bne.n	800def6 <_svfprintf_r+0x12d6>
 800de4a:	ab21      	add	r3, sp, #132	; 0x84
 800de4c:	e7d1      	b.n	800ddf2 <_svfprintf_r+0x11d2>
 800de4e:	2c00      	cmp	r4, #0
 800de50:	dded      	ble.n	800de2e <_svfprintf_r+0x120e>
 800de52:	4e40      	ldr	r6, [pc, #256]	; (800df54 <_svfprintf_r+0x1334>)
 800de54:	f04f 0810 	mov.w	r8, #16
 800de58:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800de5c:	2c10      	cmp	r4, #16
 800de5e:	f102 0201 	add.w	r2, r2, #1
 800de62:	f103 0008 	add.w	r0, r3, #8
 800de66:	601e      	str	r6, [r3, #0]
 800de68:	dc07      	bgt.n	800de7a <_svfprintf_r+0x125a>
 800de6a:	605c      	str	r4, [r3, #4]
 800de6c:	2a07      	cmp	r2, #7
 800de6e:	440c      	add	r4, r1
 800de70:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800de74:	dcd3      	bgt.n	800de1e <_svfprintf_r+0x11fe>
 800de76:	4603      	mov	r3, r0
 800de78:	e7d9      	b.n	800de2e <_svfprintf_r+0x120e>
 800de7a:	3110      	adds	r1, #16
 800de7c:	2a07      	cmp	r2, #7
 800de7e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800de82:	f8c3 8004 	str.w	r8, [r3, #4]
 800de86:	dd06      	ble.n	800de96 <_svfprintf_r+0x1276>
 800de88:	aa1e      	add	r2, sp, #120	; 0x78
 800de8a:	4659      	mov	r1, fp
 800de8c:	4638      	mov	r0, r7
 800de8e:	f001 fbe3 	bl	800f658 <__ssprint_r>
 800de92:	bb80      	cbnz	r0, 800def6 <_svfprintf_r+0x12d6>
 800de94:	a821      	add	r0, sp, #132	; 0x84
 800de96:	3c10      	subs	r4, #16
 800de98:	4603      	mov	r3, r0
 800de9a:	e7dd      	b.n	800de58 <_svfprintf_r+0x1238>
 800de9c:	2101      	movs	r1, #1
 800de9e:	2a07      	cmp	r2, #7
 800dea0:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800dea4:	f8c4 a000 	str.w	sl, [r4]
 800dea8:	6061      	str	r1, [r4, #4]
 800deaa:	ddc0      	ble.n	800de2e <_svfprintf_r+0x120e>
 800deac:	e7b7      	b.n	800de1e <_svfprintf_r+0x11fe>
 800deae:	3308      	adds	r3, #8
 800deb0:	e7bd      	b.n	800de2e <_svfprintf_r+0x120e>
 800deb2:	460c      	mov	r4, r1
 800deb4:	f7ff ba51 	b.w	800d35a <_svfprintf_r+0x73a>
 800deb8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800debc:	1a9d      	subs	r5, r3, r2
 800debe:	2d00      	cmp	r5, #0
 800dec0:	f77f aa58 	ble.w	800d374 <_svfprintf_r+0x754>
 800dec4:	4e24      	ldr	r6, [pc, #144]	; (800df58 <_svfprintf_r+0x1338>)
 800dec6:	f04f 0810 	mov.w	r8, #16
 800deca:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800dece:	2d10      	cmp	r5, #16
 800ded0:	f103 0301 	add.w	r3, r3, #1
 800ded4:	6026      	str	r6, [r4, #0]
 800ded6:	dc18      	bgt.n	800df0a <_svfprintf_r+0x12ea>
 800ded8:	6065      	str	r5, [r4, #4]
 800deda:	2b07      	cmp	r3, #7
 800dedc:	4415      	add	r5, r2
 800dede:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 800dee2:	f77f aa47 	ble.w	800d374 <_svfprintf_r+0x754>
 800dee6:	aa1e      	add	r2, sp, #120	; 0x78
 800dee8:	4659      	mov	r1, fp
 800deea:	4638      	mov	r0, r7
 800deec:	f001 fbb4 	bl	800f658 <__ssprint_r>
 800def0:	2800      	cmp	r0, #0
 800def2:	f43f aa3f 	beq.w	800d374 <_svfprintf_r+0x754>
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f43f a888 	beq.w	800d00e <_svfprintf_r+0x3ee>
 800defe:	4619      	mov	r1, r3
 800df00:	4638      	mov	r0, r7
 800df02:	f7fc f9ef 	bl	800a2e4 <_free_r>
 800df06:	f7ff b882 	b.w	800d00e <_svfprintf_r+0x3ee>
 800df0a:	3210      	adds	r2, #16
 800df0c:	2b07      	cmp	r3, #7
 800df0e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800df12:	f8c4 8004 	str.w	r8, [r4, #4]
 800df16:	dc02      	bgt.n	800df1e <_svfprintf_r+0x12fe>
 800df18:	3408      	adds	r4, #8
 800df1a:	3d10      	subs	r5, #16
 800df1c:	e7d5      	b.n	800deca <_svfprintf_r+0x12aa>
 800df1e:	aa1e      	add	r2, sp, #120	; 0x78
 800df20:	4659      	mov	r1, fp
 800df22:	4638      	mov	r0, r7
 800df24:	f001 fb98 	bl	800f658 <__ssprint_r>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d1e4      	bne.n	800def6 <_svfprintf_r+0x12d6>
 800df2c:	ac21      	add	r4, sp, #132	; 0x84
 800df2e:	e7f4      	b.n	800df1a <_svfprintf_r+0x12fa>
 800df30:	9902      	ldr	r1, [sp, #8]
 800df32:	4638      	mov	r0, r7
 800df34:	f7fc f9d6 	bl	800a2e4 <_free_r>
 800df38:	f7ff ba34 	b.w	800d3a4 <_svfprintf_r+0x784>
 800df3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f43f a865 	beq.w	800d00e <_svfprintf_r+0x3ee>
 800df44:	aa1e      	add	r2, sp, #120	; 0x78
 800df46:	4659      	mov	r1, fp
 800df48:	4638      	mov	r0, r7
 800df4a:	f001 fb85 	bl	800f658 <__ssprint_r>
 800df4e:	f7ff b85e 	b.w	800d00e <_svfprintf_r+0x3ee>
 800df52:	bf00      	nop
 800df54:	08011108 	.word	0x08011108
 800df58:	080110f8 	.word	0x080110f8
 800df5c:	ea58 0209 	orrs.w	r2, r8, r9
 800df60:	9502      	str	r5, [sp, #8]
 800df62:	f43f ab42 	beq.w	800d5ea <_svfprintf_r+0x9ca>
 800df66:	2b01      	cmp	r3, #1
 800df68:	f43f abec 	beq.w	800d744 <_svfprintf_r+0xb24>
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800df72:	f43f ac37 	beq.w	800d7e4 <_svfprintf_r+0xbc4>
 800df76:	f008 0307 	and.w	r3, r8, #7
 800df7a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800df7e:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800df82:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800df86:	3330      	adds	r3, #48	; 0x30
 800df88:	ea58 0109 	orrs.w	r1, r8, r9
 800df8c:	4652      	mov	r2, sl
 800df8e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800df92:	d1f0      	bne.n	800df76 <_svfprintf_r+0x1356>
 800df94:	9902      	ldr	r1, [sp, #8]
 800df96:	07cd      	lsls	r5, r1, #31
 800df98:	d506      	bpl.n	800dfa8 <_svfprintf_r+0x1388>
 800df9a:	2b30      	cmp	r3, #48	; 0x30
 800df9c:	d004      	beq.n	800dfa8 <_svfprintf_r+0x1388>
 800df9e:	2330      	movs	r3, #48	; 0x30
 800dfa0:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800dfa4:	f1a2 0a02 	sub.w	sl, r2, #2
 800dfa8:	ab4a      	add	r3, sp, #296	; 0x128
 800dfaa:	46b1      	mov	r9, r6
 800dfac:	eba3 060a 	sub.w	r6, r3, sl
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9d02      	ldr	r5, [sp, #8]
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	f7fe bff3 	b.w	800cfa0 <_svfprintf_r+0x380>
 800dfba:	bf00      	nop

0800dfbc <sysconf>:
 800dfbc:	2808      	cmp	r0, #8
 800dfbe:	b508      	push	{r3, lr}
 800dfc0:	d006      	beq.n	800dfd0 <sysconf+0x14>
 800dfc2:	f7f8 fac1 	bl	8006548 <__errno>
 800dfc6:	2316      	movs	r3, #22
 800dfc8:	6003      	str	r3, [r0, #0]
 800dfca:	f04f 30ff 	mov.w	r0, #4294967295
 800dfce:	bd08      	pop	{r3, pc}
 800dfd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dfd4:	e7fb      	b.n	800dfce <sysconf+0x12>

0800dfd6 <__submore>:
 800dfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfda:	460c      	mov	r4, r1
 800dfdc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dfde:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800dfe2:	4299      	cmp	r1, r3
 800dfe4:	d11d      	bne.n	800e022 <__submore+0x4c>
 800dfe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dfea:	f7fc fc59 	bl	800a8a0 <_malloc_r>
 800dfee:	b918      	cbnz	r0, 800dff8 <__submore+0x22>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dffc:	6363      	str	r3, [r4, #52]	; 0x34
 800dffe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e002:	6320      	str	r0, [r4, #48]	; 0x30
 800e004:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e008:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e00c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e010:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e014:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e018:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e01c:	6020      	str	r0, [r4, #0]
 800e01e:	2000      	movs	r0, #0
 800e020:	e7e8      	b.n	800dff4 <__submore+0x1e>
 800e022:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800e024:	0077      	lsls	r7, r6, #1
 800e026:	463a      	mov	r2, r7
 800e028:	f7fd fb4e 	bl	800b6c8 <_realloc_r>
 800e02c:	4605      	mov	r5, r0
 800e02e:	2800      	cmp	r0, #0
 800e030:	d0de      	beq.n	800dff0 <__submore+0x1a>
 800e032:	eb00 0806 	add.w	r8, r0, r6
 800e036:	4601      	mov	r1, r0
 800e038:	4632      	mov	r2, r6
 800e03a:	4640      	mov	r0, r8
 800e03c:	f7fc fe98 	bl	800ad70 <memcpy>
 800e040:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800e044:	f8c4 8000 	str.w	r8, [r4]
 800e048:	e7e9      	b.n	800e01e <__submore+0x48>

0800e04a <_ungetc_r>:
 800e04a:	b570      	push	{r4, r5, r6, lr}
 800e04c:	460d      	mov	r5, r1
 800e04e:	1c69      	adds	r1, r5, #1
 800e050:	4606      	mov	r6, r0
 800e052:	4614      	mov	r4, r2
 800e054:	d103      	bne.n	800e05e <_ungetc_r+0x14>
 800e056:	f04f 35ff 	mov.w	r5, #4294967295
 800e05a:	4628      	mov	r0, r5
 800e05c:	bd70      	pop	{r4, r5, r6, pc}
 800e05e:	b118      	cbz	r0, 800e068 <_ungetc_r+0x1e>
 800e060:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e062:	b90b      	cbnz	r3, 800e068 <_ungetc_r+0x1e>
 800e064:	f7fc f846 	bl	800a0f4 <__sinit>
 800e068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e06a:	07da      	lsls	r2, r3, #31
 800e06c:	d405      	bmi.n	800e07a <_ungetc_r+0x30>
 800e06e:	89a3      	ldrh	r3, [r4, #12]
 800e070:	059b      	lsls	r3, r3, #22
 800e072:	d402      	bmi.n	800e07a <_ungetc_r+0x30>
 800e074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e076:	f7fc fb95 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800e07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e07e:	0498      	lsls	r0, r3, #18
 800e080:	d406      	bmi.n	800e090 <_ungetc_r+0x46>
 800e082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e086:	81a3      	strh	r3, [r4, #12]
 800e088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e08a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e08e:	6663      	str	r3, [r4, #100]	; 0x64
 800e090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e094:	f023 0320 	bic.w	r3, r3, #32
 800e098:	0759      	lsls	r1, r3, #29
 800e09a:	81a3      	strh	r3, [r4, #12]
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	d423      	bmi.n	800e0e8 <_ungetc_r+0x9e>
 800e0a0:	06d3      	lsls	r3, r2, #27
 800e0a2:	d409      	bmi.n	800e0b8 <_ungetc_r+0x6e>
 800e0a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a6:	07dd      	lsls	r5, r3, #31
 800e0a8:	d4d5      	bmi.n	800e056 <_ungetc_r+0xc>
 800e0aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e0ae:	d1d2      	bne.n	800e056 <_ungetc_r+0xc>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f7fc fb78 	bl	800a7a6 <__retarget_lock_release_recursive>
 800e0b6:	e7ce      	b.n	800e056 <_ungetc_r+0xc>
 800e0b8:	0710      	lsls	r0, r2, #28
 800e0ba:	d511      	bpl.n	800e0e0 <_ungetc_r+0x96>
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7fb ff9a 	bl	8009ff8 <_fflush_r>
 800e0c4:	b130      	cbz	r0, 800e0d4 <_ungetc_r+0x8a>
 800e0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0c8:	07d9      	lsls	r1, r3, #31
 800e0ca:	d4c4      	bmi.n	800e056 <_ungetc_r+0xc>
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e0d2:	e7ec      	b.n	800e0ae <_ungetc_r+0x64>
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	60a0      	str	r0, [r4, #8]
 800e0d8:	f023 0308 	bic.w	r3, r3, #8
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	61a0      	str	r0, [r4, #24]
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	f043 0304 	orr.w	r3, r3, #4
 800e0e6:	81a3      	strh	r3, [r4, #12]
 800e0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e0ea:	6862      	ldr	r2, [r4, #4]
 800e0ec:	b2ed      	uxtb	r5, r5
 800e0ee:	b1d3      	cbz	r3, 800e126 <_ungetc_r+0xdc>
 800e0f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	dc05      	bgt.n	800e102 <_ungetc_r+0xb8>
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7ff ff6c 	bl	800dfd6 <__submore>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d1e1      	bne.n	800e0c6 <_ungetc_r+0x7c>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	1e5a      	subs	r2, r3, #1
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	3301      	adds	r3, #1
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e114:	07da      	lsls	r2, r3, #31
 800e116:	d4a0      	bmi.n	800e05a <_ungetc_r+0x10>
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	059b      	lsls	r3, r3, #22
 800e11c:	d49d      	bmi.n	800e05a <_ungetc_r+0x10>
 800e11e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e120:	f7fc fb41 	bl	800a7a6 <__retarget_lock_release_recursive>
 800e124:	e799      	b.n	800e05a <_ungetc_r+0x10>
 800e126:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e128:	6920      	ldr	r0, [r4, #16]
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	f001 0101 	and.w	r1, r1, #1
 800e130:	b160      	cbz	r0, 800e14c <_ungetc_r+0x102>
 800e132:	4298      	cmp	r0, r3
 800e134:	d20a      	bcs.n	800e14c <_ungetc_r+0x102>
 800e136:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800e13a:	4285      	cmp	r5, r0
 800e13c:	d106      	bne.n	800e14c <_ungetc_r+0x102>
 800e13e:	3b01      	subs	r3, #1
 800e140:	3201      	adds	r2, #1
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	6062      	str	r2, [r4, #4]
 800e146:	2900      	cmp	r1, #0
 800e148:	d187      	bne.n	800e05a <_ungetc_r+0x10>
 800e14a:	e7e5      	b.n	800e118 <_ungetc_r+0xce>
 800e14c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800e150:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e154:	6323      	str	r3, [r4, #48]	; 0x30
 800e156:	2303      	movs	r3, #3
 800e158:	6363      	str	r3, [r4, #52]	; 0x34
 800e15a:	4623      	mov	r3, r4
 800e15c:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	2301      	movs	r3, #1
 800e164:	6063      	str	r3, [r4, #4]
 800e166:	e7ee      	b.n	800e146 <_ungetc_r+0xfc>

0800e168 <__sprint_r>:
 800e168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	6893      	ldr	r3, [r2, #8]
 800e16e:	4680      	mov	r8, r0
 800e170:	460f      	mov	r7, r1
 800e172:	4614      	mov	r4, r2
 800e174:	b91b      	cbnz	r3, 800e17e <__sprint_r+0x16>
 800e176:	6053      	str	r3, [r2, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e180:	049d      	lsls	r5, r3, #18
 800e182:	d520      	bpl.n	800e1c6 <__sprint_r+0x5e>
 800e184:	6815      	ldr	r5, [r2, #0]
 800e186:	3508      	adds	r5, #8
 800e188:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800e18c:	f04f 0900 	mov.w	r9, #0
 800e190:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800e194:	45ca      	cmp	sl, r9
 800e196:	dc0b      	bgt.n	800e1b0 <__sprint_r+0x48>
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	f026 0003 	bic.w	r0, r6, #3
 800e19e:	1a18      	subs	r0, r3, r0
 800e1a0:	60a0      	str	r0, [r4, #8]
 800e1a2:	3508      	adds	r5, #8
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d1ef      	bne.n	800e188 <__sprint_r+0x20>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e1ae:	e7e4      	b.n	800e17a <__sprint_r+0x12>
 800e1b0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e1b4:	463a      	mov	r2, r7
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f000 fe4f 	bl	800ee5a <_fputwc_r>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d0f3      	beq.n	800e1a8 <__sprint_r+0x40>
 800e1c0:	f109 0901 	add.w	r9, r9, #1
 800e1c4:	e7e6      	b.n	800e194 <__sprint_r+0x2c>
 800e1c6:	f7fc f94d 	bl	800a464 <__sfvwrite_r>
 800e1ca:	e7ed      	b.n	800e1a8 <__sprint_r+0x40>

0800e1cc <_vfiprintf_r>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	ed2d 8b02 	vpush	{d8}
 800e1d4:	b0b9      	sub	sp, #228	; 0xe4
 800e1d6:	460f      	mov	r7, r1
 800e1d8:	9201      	str	r2, [sp, #4]
 800e1da:	461d      	mov	r5, r3
 800e1dc:	461c      	mov	r4, r3
 800e1de:	4681      	mov	r9, r0
 800e1e0:	b118      	cbz	r0, 800e1ea <_vfiprintf_r+0x1e>
 800e1e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e1e4:	b90b      	cbnz	r3, 800e1ea <_vfiprintf_r+0x1e>
 800e1e6:	f7fb ff85 	bl	800a0f4 <__sinit>
 800e1ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1ec:	07d8      	lsls	r0, r3, #31
 800e1ee:	d405      	bmi.n	800e1fc <_vfiprintf_r+0x30>
 800e1f0:	89bb      	ldrh	r3, [r7, #12]
 800e1f2:	0599      	lsls	r1, r3, #22
 800e1f4:	d402      	bmi.n	800e1fc <_vfiprintf_r+0x30>
 800e1f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e1f8:	f7fc fad4 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800e1fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e200:	049a      	lsls	r2, r3, #18
 800e202:	d406      	bmi.n	800e212 <_vfiprintf_r+0x46>
 800e204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e208:	81bb      	strh	r3, [r7, #12]
 800e20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e20c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e210:	667b      	str	r3, [r7, #100]	; 0x64
 800e212:	89bb      	ldrh	r3, [r7, #12]
 800e214:	071e      	lsls	r6, r3, #28
 800e216:	d501      	bpl.n	800e21c <_vfiprintf_r+0x50>
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	b9bb      	cbnz	r3, 800e24c <_vfiprintf_r+0x80>
 800e21c:	4639      	mov	r1, r7
 800e21e:	4648      	mov	r0, r9
 800e220:	f7fb f810 	bl	8009244 <__swsetup_r>
 800e224:	b190      	cbz	r0, 800e24c <_vfiprintf_r+0x80>
 800e226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e228:	07d8      	lsls	r0, r3, #31
 800e22a:	d508      	bpl.n	800e23e <_vfiprintf_r+0x72>
 800e22c:	f04f 33ff 	mov.w	r3, #4294967295
 800e230:	9302      	str	r3, [sp, #8]
 800e232:	9802      	ldr	r0, [sp, #8]
 800e234:	b039      	add	sp, #228	; 0xe4
 800e236:	ecbd 8b02 	vpop	{d8}
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	89bb      	ldrh	r3, [r7, #12]
 800e240:	0599      	lsls	r1, r3, #22
 800e242:	d4f3      	bmi.n	800e22c <_vfiprintf_r+0x60>
 800e244:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e246:	f7fc faae 	bl	800a7a6 <__retarget_lock_release_recursive>
 800e24a:	e7ef      	b.n	800e22c <_vfiprintf_r+0x60>
 800e24c:	89bb      	ldrh	r3, [r7, #12]
 800e24e:	f003 021a 	and.w	r2, r3, #26
 800e252:	2a0a      	cmp	r2, #10
 800e254:	d116      	bne.n	800e284 <_vfiprintf_r+0xb8>
 800e256:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e25a:	2a00      	cmp	r2, #0
 800e25c:	db12      	blt.n	800e284 <_vfiprintf_r+0xb8>
 800e25e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e260:	07d2      	lsls	r2, r2, #31
 800e262:	d404      	bmi.n	800e26e <_vfiprintf_r+0xa2>
 800e264:	059e      	lsls	r6, r3, #22
 800e266:	d402      	bmi.n	800e26e <_vfiprintf_r+0xa2>
 800e268:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e26a:	f7fc fa9c 	bl	800a7a6 <__retarget_lock_release_recursive>
 800e26e:	9a01      	ldr	r2, [sp, #4]
 800e270:	462b      	mov	r3, r5
 800e272:	4639      	mov	r1, r7
 800e274:	4648      	mov	r0, r9
 800e276:	b039      	add	sp, #228	; 0xe4
 800e278:	ecbd 8b02 	vpop	{d8}
 800e27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	f000 bc3a 	b.w	800eaf8 <__sbprintf>
 800e284:	2300      	movs	r3, #0
 800e286:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800e28a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e28e:	ae0f      	add	r6, sp, #60	; 0x3c
 800e290:	ee08 3a10 	vmov	s16, r3
 800e294:	960c      	str	r6, [sp, #48]	; 0x30
 800e296:	9307      	str	r3, [sp, #28]
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	9b01      	ldr	r3, [sp, #4]
 800e29c:	461d      	mov	r5, r3
 800e29e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2a2:	b10a      	cbz	r2, 800e2a8 <_vfiprintf_r+0xdc>
 800e2a4:	2a25      	cmp	r2, #37	; 0x25
 800e2a6:	d1f9      	bne.n	800e29c <_vfiprintf_r+0xd0>
 800e2a8:	9b01      	ldr	r3, [sp, #4]
 800e2aa:	ebb5 0803 	subs.w	r8, r5, r3
 800e2ae:	d00d      	beq.n	800e2cc <_vfiprintf_r+0x100>
 800e2b0:	e9c6 3800 	strd	r3, r8, [r6]
 800e2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2b6:	4443      	add	r3, r8
 800e2b8:	930e      	str	r3, [sp, #56]	; 0x38
 800e2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2bc:	3301      	adds	r3, #1
 800e2be:	2b07      	cmp	r3, #7
 800e2c0:	930d      	str	r3, [sp, #52]	; 0x34
 800e2c2:	dc75      	bgt.n	800e3b0 <_vfiprintf_r+0x1e4>
 800e2c4:	3608      	adds	r6, #8
 800e2c6:	9b02      	ldr	r3, [sp, #8]
 800e2c8:	4443      	add	r3, r8
 800e2ca:	9302      	str	r3, [sp, #8]
 800e2cc:	782b      	ldrb	r3, [r5, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 83d6 	beq.w	800ea80 <_vfiprintf_r+0x8b4>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f04f 31ff 	mov.w	r1, #4294967295
 800e2da:	1c6a      	adds	r2, r5, #1
 800e2dc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e2e0:	9100      	str	r1, [sp, #0]
 800e2e2:	9303      	str	r3, [sp, #12]
 800e2e4:	469a      	mov	sl, r3
 800e2e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e2ea:	9201      	str	r2, [sp, #4]
 800e2ec:	f1a3 0220 	sub.w	r2, r3, #32
 800e2f0:	2a5a      	cmp	r2, #90	; 0x5a
 800e2f2:	f200 831f 	bhi.w	800e934 <_vfiprintf_r+0x768>
 800e2f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e2fa:	009b      	.short	0x009b
 800e2fc:	031d031d 	.word	0x031d031d
 800e300:	031d00a3 	.word	0x031d00a3
 800e304:	031d031d 	.word	0x031d031d
 800e308:	031d0082 	.word	0x031d0082
 800e30c:	00a6031d 	.word	0x00a6031d
 800e310:	031d00b0 	.word	0x031d00b0
 800e314:	00b200ad 	.word	0x00b200ad
 800e318:	00cd031d 	.word	0x00cd031d
 800e31c:	00d000d0 	.word	0x00d000d0
 800e320:	00d000d0 	.word	0x00d000d0
 800e324:	00d000d0 	.word	0x00d000d0
 800e328:	00d000d0 	.word	0x00d000d0
 800e32c:	031d00d0 	.word	0x031d00d0
 800e330:	031d031d 	.word	0x031d031d
 800e334:	031d031d 	.word	0x031d031d
 800e338:	031d031d 	.word	0x031d031d
 800e33c:	031d031d 	.word	0x031d031d
 800e340:	010800fa 	.word	0x010800fa
 800e344:	031d031d 	.word	0x031d031d
 800e348:	031d031d 	.word	0x031d031d
 800e34c:	031d031d 	.word	0x031d031d
 800e350:	031d031d 	.word	0x031d031d
 800e354:	031d031d 	.word	0x031d031d
 800e358:	031d0158 	.word	0x031d0158
 800e35c:	031d031d 	.word	0x031d031d
 800e360:	031d01a1 	.word	0x031d01a1
 800e364:	031d027e 	.word	0x031d027e
 800e368:	029e031d 	.word	0x029e031d
 800e36c:	031d031d 	.word	0x031d031d
 800e370:	031d031d 	.word	0x031d031d
 800e374:	031d031d 	.word	0x031d031d
 800e378:	031d031d 	.word	0x031d031d
 800e37c:	031d031d 	.word	0x031d031d
 800e380:	010a00fa 	.word	0x010a00fa
 800e384:	031d031d 	.word	0x031d031d
 800e388:	00e0031d 	.word	0x00e0031d
 800e38c:	00f4010a 	.word	0x00f4010a
 800e390:	00ed031d 	.word	0x00ed031d
 800e394:	0136031d 	.word	0x0136031d
 800e398:	018f015a 	.word	0x018f015a
 800e39c:	031d00f4 	.word	0x031d00f4
 800e3a0:	009901a1 	.word	0x009901a1
 800e3a4:	031d0280 	.word	0x031d0280
 800e3a8:	0065031d 	.word	0x0065031d
 800e3ac:	0099031d 	.word	0x0099031d
 800e3b0:	aa0c      	add	r2, sp, #48	; 0x30
 800e3b2:	4639      	mov	r1, r7
 800e3b4:	4648      	mov	r0, r9
 800e3b6:	f7ff fed7 	bl	800e168 <__sprint_r>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	f040 833f 	bne.w	800ea3e <_vfiprintf_r+0x872>
 800e3c0:	ae0f      	add	r6, sp, #60	; 0x3c
 800e3c2:	e780      	b.n	800e2c6 <_vfiprintf_r+0xfa>
 800e3c4:	4a9c      	ldr	r2, [pc, #624]	; (800e638 <_vfiprintf_r+0x46c>)
 800e3c6:	9205      	str	r2, [sp, #20]
 800e3c8:	f01a 0220 	ands.w	r2, sl, #32
 800e3cc:	f000 8235 	beq.w	800e83a <_vfiprintf_r+0x66e>
 800e3d0:	3407      	adds	r4, #7
 800e3d2:	f024 0207 	bic.w	r2, r4, #7
 800e3d6:	4693      	mov	fp, r2
 800e3d8:	6855      	ldr	r5, [r2, #4]
 800e3da:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e3de:	f01a 0f01 	tst.w	sl, #1
 800e3e2:	d009      	beq.n	800e3f8 <_vfiprintf_r+0x22c>
 800e3e4:	ea54 0205 	orrs.w	r2, r4, r5
 800e3e8:	bf1f      	itttt	ne
 800e3ea:	2230      	movne	r2, #48	; 0x30
 800e3ec:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800e3f0:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800e3f4:	f04a 0a02 	orrne.w	sl, sl, #2
 800e3f8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e3fc:	e11a      	b.n	800e634 <_vfiprintf_r+0x468>
 800e3fe:	4648      	mov	r0, r9
 800e400:	f7fc f9ca 	bl	800a798 <_localeconv_r>
 800e404:	6843      	ldr	r3, [r0, #4]
 800e406:	4618      	mov	r0, r3
 800e408:	ee08 3a10 	vmov	s16, r3
 800e40c:	f7f1 ff18 	bl	8000240 <strlen>
 800e410:	9007      	str	r0, [sp, #28]
 800e412:	4648      	mov	r0, r9
 800e414:	f7fc f9c0 	bl	800a798 <_localeconv_r>
 800e418:	6883      	ldr	r3, [r0, #8]
 800e41a:	9306      	str	r3, [sp, #24]
 800e41c:	9b07      	ldr	r3, [sp, #28]
 800e41e:	b12b      	cbz	r3, 800e42c <_vfiprintf_r+0x260>
 800e420:	9b06      	ldr	r3, [sp, #24]
 800e422:	b11b      	cbz	r3, 800e42c <_vfiprintf_r+0x260>
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	b10b      	cbz	r3, 800e42c <_vfiprintf_r+0x260>
 800e428:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800e42c:	9a01      	ldr	r2, [sp, #4]
 800e42e:	e75a      	b.n	800e2e6 <_vfiprintf_r+0x11a>
 800e430:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1f9      	bne.n	800e42c <_vfiprintf_r+0x260>
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e43e:	e7f5      	b.n	800e42c <_vfiprintf_r+0x260>
 800e440:	f04a 0a01 	orr.w	sl, sl, #1
 800e444:	e7f2      	b.n	800e42c <_vfiprintf_r+0x260>
 800e446:	f854 3b04 	ldr.w	r3, [r4], #4
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	daed      	bge.n	800e42c <_vfiprintf_r+0x260>
 800e450:	425b      	negs	r3, r3
 800e452:	9303      	str	r3, [sp, #12]
 800e454:	f04a 0a04 	orr.w	sl, sl, #4
 800e458:	e7e8      	b.n	800e42c <_vfiprintf_r+0x260>
 800e45a:	232b      	movs	r3, #43	; 0x2b
 800e45c:	e7ed      	b.n	800e43a <_vfiprintf_r+0x26e>
 800e45e:	9a01      	ldr	r2, [sp, #4]
 800e460:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e464:	2b2a      	cmp	r3, #42	; 0x2a
 800e466:	d112      	bne.n	800e48e <_vfiprintf_r+0x2c2>
 800e468:	f854 0b04 	ldr.w	r0, [r4], #4
 800e46c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800e470:	e9cd 3200 	strd	r3, r2, [sp]
 800e474:	e7da      	b.n	800e42c <_vfiprintf_r+0x260>
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	200a      	movs	r0, #10
 800e47a:	fb00 1303 	mla	r3, r0, r3, r1
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e484:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e488:	2909      	cmp	r1, #9
 800e48a:	d9f4      	bls.n	800e476 <_vfiprintf_r+0x2aa>
 800e48c:	e72d      	b.n	800e2ea <_vfiprintf_r+0x11e>
 800e48e:	2100      	movs	r1, #0
 800e490:	9100      	str	r1, [sp, #0]
 800e492:	e7f7      	b.n	800e484 <_vfiprintf_r+0x2b8>
 800e494:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800e498:	e7c8      	b.n	800e42c <_vfiprintf_r+0x260>
 800e49a:	2100      	movs	r1, #0
 800e49c:	9a01      	ldr	r2, [sp, #4]
 800e49e:	9103      	str	r1, [sp, #12]
 800e4a0:	9903      	ldr	r1, [sp, #12]
 800e4a2:	3b30      	subs	r3, #48	; 0x30
 800e4a4:	200a      	movs	r0, #10
 800e4a6:	fb00 3301 	mla	r3, r0, r1, r3
 800e4aa:	9303      	str	r3, [sp, #12]
 800e4ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e4b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e4b4:	2909      	cmp	r1, #9
 800e4b6:	d9f3      	bls.n	800e4a0 <_vfiprintf_r+0x2d4>
 800e4b8:	e717      	b.n	800e2ea <_vfiprintf_r+0x11e>
 800e4ba:	9b01      	ldr	r3, [sp, #4]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	2b68      	cmp	r3, #104	; 0x68
 800e4c0:	bf01      	itttt	eq
 800e4c2:	9b01      	ldreq	r3, [sp, #4]
 800e4c4:	3301      	addeq	r3, #1
 800e4c6:	9301      	streq	r3, [sp, #4]
 800e4c8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800e4cc:	bf18      	it	ne
 800e4ce:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800e4d2:	e7ab      	b.n	800e42c <_vfiprintf_r+0x260>
 800e4d4:	9b01      	ldr	r3, [sp, #4]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b6c      	cmp	r3, #108	; 0x6c
 800e4da:	d105      	bne.n	800e4e8 <_vfiprintf_r+0x31c>
 800e4dc:	9b01      	ldr	r3, [sp, #4]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	f04a 0a20 	orr.w	sl, sl, #32
 800e4e6:	e7a1      	b.n	800e42c <_vfiprintf_r+0x260>
 800e4e8:	f04a 0a10 	orr.w	sl, sl, #16
 800e4ec:	e79e      	b.n	800e42c <_vfiprintf_r+0x260>
 800e4ee:	46a3      	mov	fp, r4
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	f85b 3b04 	ldr.w	r3, [fp], #4
 800e4f6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800e4fa:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800e4fe:	2301      	movs	r3, #1
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	460d      	mov	r5, r1
 800e504:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800e508:	e0ad      	b.n	800e666 <_vfiprintf_r+0x49a>
 800e50a:	f04a 0a10 	orr.w	sl, sl, #16
 800e50e:	f01a 0f20 	tst.w	sl, #32
 800e512:	d011      	beq.n	800e538 <_vfiprintf_r+0x36c>
 800e514:	3407      	adds	r4, #7
 800e516:	f024 0307 	bic.w	r3, r4, #7
 800e51a:	469b      	mov	fp, r3
 800e51c:	685d      	ldr	r5, [r3, #4]
 800e51e:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e522:	2d00      	cmp	r5, #0
 800e524:	da06      	bge.n	800e534 <_vfiprintf_r+0x368>
 800e526:	4264      	negs	r4, r4
 800e528:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e52c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800e530:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e534:	2301      	movs	r3, #1
 800e536:	e04a      	b.n	800e5ce <_vfiprintf_r+0x402>
 800e538:	46a3      	mov	fp, r4
 800e53a:	f01a 0f10 	tst.w	sl, #16
 800e53e:	f85b 5b04 	ldr.w	r5, [fp], #4
 800e542:	d002      	beq.n	800e54a <_vfiprintf_r+0x37e>
 800e544:	462c      	mov	r4, r5
 800e546:	17ed      	asrs	r5, r5, #31
 800e548:	e7eb      	b.n	800e522 <_vfiprintf_r+0x356>
 800e54a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e54e:	d003      	beq.n	800e558 <_vfiprintf_r+0x38c>
 800e550:	b22c      	sxth	r4, r5
 800e552:	f345 35c0 	sbfx	r5, r5, #15, #1
 800e556:	e7e4      	b.n	800e522 <_vfiprintf_r+0x356>
 800e558:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e55c:	d0f2      	beq.n	800e544 <_vfiprintf_r+0x378>
 800e55e:	b26c      	sxtb	r4, r5
 800e560:	f345 15c0 	sbfx	r5, r5, #7, #1
 800e564:	e7dd      	b.n	800e522 <_vfiprintf_r+0x356>
 800e566:	f01a 0f20 	tst.w	sl, #32
 800e56a:	f104 0b04 	add.w	fp, r4, #4
 800e56e:	d007      	beq.n	800e580 <_vfiprintf_r+0x3b4>
 800e570:	9a02      	ldr	r2, [sp, #8]
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	9902      	ldr	r1, [sp, #8]
 800e576:	17d2      	asrs	r2, r2, #31
 800e578:	e9c3 1200 	strd	r1, r2, [r3]
 800e57c:	465c      	mov	r4, fp
 800e57e:	e68c      	b.n	800e29a <_vfiprintf_r+0xce>
 800e580:	f01a 0f10 	tst.w	sl, #16
 800e584:	d003      	beq.n	800e58e <_vfiprintf_r+0x3c2>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	9a02      	ldr	r2, [sp, #8]
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	e7f6      	b.n	800e57c <_vfiprintf_r+0x3b0>
 800e58e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e592:	d003      	beq.n	800e59c <_vfiprintf_r+0x3d0>
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	9a02      	ldr	r2, [sp, #8]
 800e598:	801a      	strh	r2, [r3, #0]
 800e59a:	e7ef      	b.n	800e57c <_vfiprintf_r+0x3b0>
 800e59c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e5a0:	d0f1      	beq.n	800e586 <_vfiprintf_r+0x3ba>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	9a02      	ldr	r2, [sp, #8]
 800e5a6:	701a      	strb	r2, [r3, #0]
 800e5a8:	e7e8      	b.n	800e57c <_vfiprintf_r+0x3b0>
 800e5aa:	f04a 0a10 	orr.w	sl, sl, #16
 800e5ae:	f01a 0320 	ands.w	r3, sl, #32
 800e5b2:	d01f      	beq.n	800e5f4 <_vfiprintf_r+0x428>
 800e5b4:	3407      	adds	r4, #7
 800e5b6:	f024 0307 	bic.w	r3, r4, #7
 800e5ba:	469b      	mov	fp, r3
 800e5bc:	685d      	ldr	r5, [r3, #4]
 800e5be:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e5c2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800e5ce:	9a00      	ldr	r2, [sp, #0]
 800e5d0:	3201      	adds	r2, #1
 800e5d2:	f000 8262 	beq.w	800ea9a <_vfiprintf_r+0x8ce>
 800e5d6:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800e5da:	9204      	str	r2, [sp, #16]
 800e5dc:	ea54 0205 	orrs.w	r2, r4, r5
 800e5e0:	f040 8261 	bne.w	800eaa6 <_vfiprintf_r+0x8da>
 800e5e4:	9a00      	ldr	r2, [sp, #0]
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	f000 8199 	beq.w	800e91e <_vfiprintf_r+0x752>
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	f040 825d 	bne.w	800eaac <_vfiprintf_r+0x8e0>
 800e5f2:	e139      	b.n	800e868 <_vfiprintf_r+0x69c>
 800e5f4:	46a3      	mov	fp, r4
 800e5f6:	f01a 0510 	ands.w	r5, sl, #16
 800e5fa:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e5fe:	d001      	beq.n	800e604 <_vfiprintf_r+0x438>
 800e600:	461d      	mov	r5, r3
 800e602:	e7de      	b.n	800e5c2 <_vfiprintf_r+0x3f6>
 800e604:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800e608:	d001      	beq.n	800e60e <_vfiprintf_r+0x442>
 800e60a:	b2a4      	uxth	r4, r4
 800e60c:	e7d9      	b.n	800e5c2 <_vfiprintf_r+0x3f6>
 800e60e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800e612:	d0d6      	beq.n	800e5c2 <_vfiprintf_r+0x3f6>
 800e614:	b2e4      	uxtb	r4, r4
 800e616:	e7f3      	b.n	800e600 <_vfiprintf_r+0x434>
 800e618:	2330      	movs	r3, #48	; 0x30
 800e61a:	46a3      	mov	fp, r4
 800e61c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800e620:	2378      	movs	r3, #120	; 0x78
 800e622:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800e626:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e62a:	4b03      	ldr	r3, [pc, #12]	; (800e638 <_vfiprintf_r+0x46c>)
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	2500      	movs	r5, #0
 800e630:	f04a 0a02 	orr.w	sl, sl, #2
 800e634:	2302      	movs	r3, #2
 800e636:	e7c7      	b.n	800e5c8 <_vfiprintf_r+0x3fc>
 800e638:	08010d59 	.word	0x08010d59
 800e63c:	9b00      	ldr	r3, [sp, #0]
 800e63e:	46a3      	mov	fp, r4
 800e640:	2500      	movs	r5, #0
 800e642:	1c5c      	adds	r4, r3, #1
 800e644:	f85b 8b04 	ldr.w	r8, [fp], #4
 800e648:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e64c:	f000 80ce 	beq.w	800e7ec <_vfiprintf_r+0x620>
 800e650:	461a      	mov	r2, r3
 800e652:	4629      	mov	r1, r5
 800e654:	4640      	mov	r0, r8
 800e656:	f7f1 fdfb 	bl	8000250 <memchr>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	f000 8174 	beq.w	800e948 <_vfiprintf_r+0x77c>
 800e660:	eba0 0308 	sub.w	r3, r0, r8
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	42ab      	cmp	r3, r5
 800e66a:	bfb8      	it	lt
 800e66c:	462b      	movlt	r3, r5
 800e66e:	9304      	str	r3, [sp, #16]
 800e670:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e674:	b113      	cbz	r3, 800e67c <_vfiprintf_r+0x4b0>
 800e676:	9b04      	ldr	r3, [sp, #16]
 800e678:	3301      	adds	r3, #1
 800e67a:	9304      	str	r3, [sp, #16]
 800e67c:	f01a 0302 	ands.w	r3, sl, #2
 800e680:	9308      	str	r3, [sp, #32]
 800e682:	bf1e      	ittt	ne
 800e684:	9b04      	ldrne	r3, [sp, #16]
 800e686:	3302      	addne	r3, #2
 800e688:	9304      	strne	r3, [sp, #16]
 800e68a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800e68e:	9309      	str	r3, [sp, #36]	; 0x24
 800e690:	d11f      	bne.n	800e6d2 <_vfiprintf_r+0x506>
 800e692:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e696:	1a9c      	subs	r4, r3, r2
 800e698:	2c00      	cmp	r4, #0
 800e69a:	dd1a      	ble.n	800e6d2 <_vfiprintf_r+0x506>
 800e69c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800e6a0:	48aa      	ldr	r0, [pc, #680]	; (800e94c <_vfiprintf_r+0x780>)
 800e6a2:	6030      	str	r0, [r6, #0]
 800e6a4:	2c10      	cmp	r4, #16
 800e6a6:	f103 0301 	add.w	r3, r3, #1
 800e6aa:	f106 0108 	add.w	r1, r6, #8
 800e6ae:	f300 8153 	bgt.w	800e958 <_vfiprintf_r+0x78c>
 800e6b2:	6074      	str	r4, [r6, #4]
 800e6b4:	2b07      	cmp	r3, #7
 800e6b6:	4414      	add	r4, r2
 800e6b8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e6bc:	f340 815e 	ble.w	800e97c <_vfiprintf_r+0x7b0>
 800e6c0:	aa0c      	add	r2, sp, #48	; 0x30
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	4648      	mov	r0, r9
 800e6c6:	f7ff fd4f 	bl	800e168 <__sprint_r>
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	f040 81b7 	bne.w	800ea3e <_vfiprintf_r+0x872>
 800e6d0:	ae0f      	add	r6, sp, #60	; 0x3c
 800e6d2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e6d6:	b173      	cbz	r3, 800e6f6 <_vfiprintf_r+0x52a>
 800e6d8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800e6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6de:	6032      	str	r2, [r6, #0]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	6072      	str	r2, [r6, #4]
 800e6e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	3201      	adds	r2, #1
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e6f0:	f300 8146 	bgt.w	800e980 <_vfiprintf_r+0x7b4>
 800e6f4:	3608      	adds	r6, #8
 800e6f6:	9b08      	ldr	r3, [sp, #32]
 800e6f8:	b16b      	cbz	r3, 800e716 <_vfiprintf_r+0x54a>
 800e6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6fe:	6032      	str	r2, [r6, #0]
 800e700:	2202      	movs	r2, #2
 800e702:	6072      	str	r2, [r6, #4]
 800e704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e706:	3301      	adds	r3, #1
 800e708:	3202      	adds	r2, #2
 800e70a:	2b07      	cmp	r3, #7
 800e70c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e710:	f300 813f 	bgt.w	800e992 <_vfiprintf_r+0x7c6>
 800e714:	3608      	adds	r6, #8
 800e716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e718:	2b80      	cmp	r3, #128	; 0x80
 800e71a:	d11f      	bne.n	800e75c <_vfiprintf_r+0x590>
 800e71c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e720:	1a9c      	subs	r4, r3, r2
 800e722:	2c00      	cmp	r4, #0
 800e724:	dd1a      	ble.n	800e75c <_vfiprintf_r+0x590>
 800e726:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800e72a:	4889      	ldr	r0, [pc, #548]	; (800e950 <_vfiprintf_r+0x784>)
 800e72c:	6030      	str	r0, [r6, #0]
 800e72e:	2c10      	cmp	r4, #16
 800e730:	f103 0301 	add.w	r3, r3, #1
 800e734:	f106 0108 	add.w	r1, r6, #8
 800e738:	f300 8134 	bgt.w	800e9a4 <_vfiprintf_r+0x7d8>
 800e73c:	6074      	str	r4, [r6, #4]
 800e73e:	2b07      	cmp	r3, #7
 800e740:	4414      	add	r4, r2
 800e742:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e746:	f340 813f 	ble.w	800e9c8 <_vfiprintf_r+0x7fc>
 800e74a:	aa0c      	add	r2, sp, #48	; 0x30
 800e74c:	4639      	mov	r1, r7
 800e74e:	4648      	mov	r0, r9
 800e750:	f7ff fd0a 	bl	800e168 <__sprint_r>
 800e754:	2800      	cmp	r0, #0
 800e756:	f040 8172 	bne.w	800ea3e <_vfiprintf_r+0x872>
 800e75a:	ae0f      	add	r6, sp, #60	; 0x3c
 800e75c:	9b00      	ldr	r3, [sp, #0]
 800e75e:	1aec      	subs	r4, r5, r3
 800e760:	2c00      	cmp	r4, #0
 800e762:	dd1a      	ble.n	800e79a <_vfiprintf_r+0x5ce>
 800e764:	4d7a      	ldr	r5, [pc, #488]	; (800e950 <_vfiprintf_r+0x784>)
 800e766:	6035      	str	r5, [r6, #0]
 800e768:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800e76c:	2c10      	cmp	r4, #16
 800e76e:	f103 0301 	add.w	r3, r3, #1
 800e772:	f106 0208 	add.w	r2, r6, #8
 800e776:	f300 8129 	bgt.w	800e9cc <_vfiprintf_r+0x800>
 800e77a:	6074      	str	r4, [r6, #4]
 800e77c:	2b07      	cmp	r3, #7
 800e77e:	440c      	add	r4, r1
 800e780:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e784:	f340 8133 	ble.w	800e9ee <_vfiprintf_r+0x822>
 800e788:	aa0c      	add	r2, sp, #48	; 0x30
 800e78a:	4639      	mov	r1, r7
 800e78c:	4648      	mov	r0, r9
 800e78e:	f7ff fceb 	bl	800e168 <__sprint_r>
 800e792:	2800      	cmp	r0, #0
 800e794:	f040 8153 	bne.w	800ea3e <_vfiprintf_r+0x872>
 800e798:	ae0f      	add	r6, sp, #60	; 0x3c
 800e79a:	9b00      	ldr	r3, [sp, #0]
 800e79c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e79e:	6073      	str	r3, [r6, #4]
 800e7a0:	4418      	add	r0, r3
 800e7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7a4:	f8c6 8000 	str.w	r8, [r6]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	2b07      	cmp	r3, #7
 800e7ac:	900e      	str	r0, [sp, #56]	; 0x38
 800e7ae:	930d      	str	r3, [sp, #52]	; 0x34
 800e7b0:	f300 811f 	bgt.w	800e9f2 <_vfiprintf_r+0x826>
 800e7b4:	f106 0308 	add.w	r3, r6, #8
 800e7b8:	f01a 0f04 	tst.w	sl, #4
 800e7bc:	f040 8121 	bne.w	800ea02 <_vfiprintf_r+0x836>
 800e7c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7c4:	9904      	ldr	r1, [sp, #16]
 800e7c6:	428a      	cmp	r2, r1
 800e7c8:	bfac      	ite	ge
 800e7ca:	189b      	addge	r3, r3, r2
 800e7cc:	185b      	addlt	r3, r3, r1
 800e7ce:	9302      	str	r3, [sp, #8]
 800e7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d2:	b13b      	cbz	r3, 800e7e4 <_vfiprintf_r+0x618>
 800e7d4:	aa0c      	add	r2, sp, #48	; 0x30
 800e7d6:	4639      	mov	r1, r7
 800e7d8:	4648      	mov	r0, r9
 800e7da:	f7ff fcc5 	bl	800e168 <__sprint_r>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f040 812d 	bne.w	800ea3e <_vfiprintf_r+0x872>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	930d      	str	r3, [sp, #52]	; 0x34
 800e7e8:	ae0f      	add	r6, sp, #60	; 0x3c
 800e7ea:	e6c7      	b.n	800e57c <_vfiprintf_r+0x3b0>
 800e7ec:	4640      	mov	r0, r8
 800e7ee:	f7f1 fd27 	bl	8000240 <strlen>
 800e7f2:	9000      	str	r0, [sp, #0]
 800e7f4:	e737      	b.n	800e666 <_vfiprintf_r+0x49a>
 800e7f6:	f04a 0a10 	orr.w	sl, sl, #16
 800e7fa:	f01a 0320 	ands.w	r3, sl, #32
 800e7fe:	d008      	beq.n	800e812 <_vfiprintf_r+0x646>
 800e800:	3407      	adds	r4, #7
 800e802:	f024 0307 	bic.w	r3, r4, #7
 800e806:	469b      	mov	fp, r3
 800e808:	685d      	ldr	r5, [r3, #4]
 800e80a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e80e:	2301      	movs	r3, #1
 800e810:	e6da      	b.n	800e5c8 <_vfiprintf_r+0x3fc>
 800e812:	46a3      	mov	fp, r4
 800e814:	f01a 0510 	ands.w	r5, sl, #16
 800e818:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e81c:	d001      	beq.n	800e822 <_vfiprintf_r+0x656>
 800e81e:	461d      	mov	r5, r3
 800e820:	e7f5      	b.n	800e80e <_vfiprintf_r+0x642>
 800e822:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800e826:	d001      	beq.n	800e82c <_vfiprintf_r+0x660>
 800e828:	b2a4      	uxth	r4, r4
 800e82a:	e7f0      	b.n	800e80e <_vfiprintf_r+0x642>
 800e82c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800e830:	d0ed      	beq.n	800e80e <_vfiprintf_r+0x642>
 800e832:	b2e4      	uxtb	r4, r4
 800e834:	e7f3      	b.n	800e81e <_vfiprintf_r+0x652>
 800e836:	4a47      	ldr	r2, [pc, #284]	; (800e954 <_vfiprintf_r+0x788>)
 800e838:	e5c5      	b.n	800e3c6 <_vfiprintf_r+0x1fa>
 800e83a:	46a3      	mov	fp, r4
 800e83c:	f01a 0510 	ands.w	r5, sl, #16
 800e840:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e844:	d001      	beq.n	800e84a <_vfiprintf_r+0x67e>
 800e846:	4615      	mov	r5, r2
 800e848:	e5c9      	b.n	800e3de <_vfiprintf_r+0x212>
 800e84a:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800e84e:	d001      	beq.n	800e854 <_vfiprintf_r+0x688>
 800e850:	b2a4      	uxth	r4, r4
 800e852:	e5c4      	b.n	800e3de <_vfiprintf_r+0x212>
 800e854:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800e858:	f43f adc1 	beq.w	800e3de <_vfiprintf_r+0x212>
 800e85c:	b2e4      	uxtb	r4, r4
 800e85e:	e7f2      	b.n	800e846 <_vfiprintf_r+0x67a>
 800e860:	2c0a      	cmp	r4, #10
 800e862:	f175 0300 	sbcs.w	r3, r5, #0
 800e866:	d205      	bcs.n	800e874 <_vfiprintf_r+0x6a8>
 800e868:	3430      	adds	r4, #48	; 0x30
 800e86a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800e86e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800e872:	e137      	b.n	800eae4 <_vfiprintf_r+0x918>
 800e874:	ab38      	add	r3, sp, #224	; 0xe0
 800e876:	9308      	str	r3, [sp, #32]
 800e878:	9b04      	ldr	r3, [sp, #16]
 800e87a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e87e:	f04f 0a00 	mov.w	sl, #0
 800e882:	9309      	str	r3, [sp, #36]	; 0x24
 800e884:	9b08      	ldr	r3, [sp, #32]
 800e886:	220a      	movs	r2, #10
 800e888:	f103 38ff 	add.w	r8, r3, #4294967295
 800e88c:	4620      	mov	r0, r4
 800e88e:	2300      	movs	r3, #0
 800e890:	4629      	mov	r1, r5
 800e892:	f7f1 fee9 	bl	8000668 <__aeabi_uldivmod>
 800e896:	9b08      	ldr	r3, [sp, #32]
 800e898:	3230      	adds	r2, #48	; 0x30
 800e89a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a0:	f10a 0a01 	add.w	sl, sl, #1
 800e8a4:	b1db      	cbz	r3, 800e8de <_vfiprintf_r+0x712>
 800e8a6:	9b06      	ldr	r3, [sp, #24]
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	4553      	cmp	r3, sl
 800e8ac:	d117      	bne.n	800e8de <_vfiprintf_r+0x712>
 800e8ae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e8b2:	d014      	beq.n	800e8de <_vfiprintf_r+0x712>
 800e8b4:	2c0a      	cmp	r4, #10
 800e8b6:	f175 0300 	sbcs.w	r3, r5, #0
 800e8ba:	d310      	bcc.n	800e8de <_vfiprintf_r+0x712>
 800e8bc:	9b07      	ldr	r3, [sp, #28]
 800e8be:	eba8 0803 	sub.w	r8, r8, r3
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	ee18 1a10 	vmov	r1, s16
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	f7fd fa16 	bl	800bcfa <strncpy>
 800e8ce:	9b06      	ldr	r3, [sp, #24]
 800e8d0:	785b      	ldrb	r3, [r3, #1]
 800e8d2:	b1a3      	cbz	r3, 800e8fe <_vfiprintf_r+0x732>
 800e8d4:	9b06      	ldr	r3, [sp, #24]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	9306      	str	r3, [sp, #24]
 800e8da:	f04f 0a00 	mov.w	sl, #0
 800e8de:	2300      	movs	r3, #0
 800e8e0:	220a      	movs	r2, #10
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	f7f1 febf 	bl	8000668 <__aeabi_uldivmod>
 800e8ea:	2c0a      	cmp	r4, #10
 800e8ec:	f175 0300 	sbcs.w	r3, r5, #0
 800e8f0:	f0c0 80f8 	bcc.w	800eae4 <_vfiprintf_r+0x918>
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	460d      	mov	r5, r1
 800e8f8:	f8cd 8020 	str.w	r8, [sp, #32]
 800e8fc:	e7c2      	b.n	800e884 <_vfiprintf_r+0x6b8>
 800e8fe:	469a      	mov	sl, r3
 800e900:	e7ed      	b.n	800e8de <_vfiprintf_r+0x712>
 800e902:	f004 030f 	and.w	r3, r4, #15
 800e906:	9a05      	ldr	r2, [sp, #20]
 800e908:	0924      	lsrs	r4, r4, #4
 800e90a:	5cd3      	ldrb	r3, [r2, r3]
 800e90c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e910:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800e914:	092d      	lsrs	r5, r5, #4
 800e916:	ea54 0305 	orrs.w	r3, r4, r5
 800e91a:	d1f2      	bne.n	800e902 <_vfiprintf_r+0x736>
 800e91c:	e0e2      	b.n	800eae4 <_vfiprintf_r+0x918>
 800e91e:	b933      	cbnz	r3, 800e92e <_vfiprintf_r+0x762>
 800e920:	f01a 0f01 	tst.w	sl, #1
 800e924:	d003      	beq.n	800e92e <_vfiprintf_r+0x762>
 800e926:	2330      	movs	r3, #48	; 0x30
 800e928:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800e92c:	e79f      	b.n	800e86e <_vfiprintf_r+0x6a2>
 800e92e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800e932:	e0d7      	b.n	800eae4 <_vfiprintf_r+0x918>
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 80a3 	beq.w	800ea80 <_vfiprintf_r+0x8b4>
 800e93a:	2100      	movs	r1, #0
 800e93c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800e940:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800e944:	46a3      	mov	fp, r4
 800e946:	e5da      	b.n	800e4fe <_vfiprintf_r+0x332>
 800e948:	4605      	mov	r5, r0
 800e94a:	e68c      	b.n	800e666 <_vfiprintf_r+0x49a>
 800e94c:	08011118 	.word	0x08011118
 800e950:	08011128 	.word	0x08011128
 800e954:	08010d6a 	.word	0x08010d6a
 800e958:	2010      	movs	r0, #16
 800e95a:	4402      	add	r2, r0
 800e95c:	2b07      	cmp	r3, #7
 800e95e:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e962:	6070      	str	r0, [r6, #4]
 800e964:	dd07      	ble.n	800e976 <_vfiprintf_r+0x7aa>
 800e966:	aa0c      	add	r2, sp, #48	; 0x30
 800e968:	4639      	mov	r1, r7
 800e96a:	4648      	mov	r0, r9
 800e96c:	f7ff fbfc 	bl	800e168 <__sprint_r>
 800e970:	2800      	cmp	r0, #0
 800e972:	d164      	bne.n	800ea3e <_vfiprintf_r+0x872>
 800e974:	a90f      	add	r1, sp, #60	; 0x3c
 800e976:	3c10      	subs	r4, #16
 800e978:	460e      	mov	r6, r1
 800e97a:	e68f      	b.n	800e69c <_vfiprintf_r+0x4d0>
 800e97c:	460e      	mov	r6, r1
 800e97e:	e6a8      	b.n	800e6d2 <_vfiprintf_r+0x506>
 800e980:	aa0c      	add	r2, sp, #48	; 0x30
 800e982:	4639      	mov	r1, r7
 800e984:	4648      	mov	r0, r9
 800e986:	f7ff fbef 	bl	800e168 <__sprint_r>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d157      	bne.n	800ea3e <_vfiprintf_r+0x872>
 800e98e:	ae0f      	add	r6, sp, #60	; 0x3c
 800e990:	e6b1      	b.n	800e6f6 <_vfiprintf_r+0x52a>
 800e992:	aa0c      	add	r2, sp, #48	; 0x30
 800e994:	4639      	mov	r1, r7
 800e996:	4648      	mov	r0, r9
 800e998:	f7ff fbe6 	bl	800e168 <__sprint_r>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d14e      	bne.n	800ea3e <_vfiprintf_r+0x872>
 800e9a0:	ae0f      	add	r6, sp, #60	; 0x3c
 800e9a2:	e6b8      	b.n	800e716 <_vfiprintf_r+0x54a>
 800e9a4:	2010      	movs	r0, #16
 800e9a6:	4402      	add	r2, r0
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e9ae:	6070      	str	r0, [r6, #4]
 800e9b0:	dd07      	ble.n	800e9c2 <_vfiprintf_r+0x7f6>
 800e9b2:	aa0c      	add	r2, sp, #48	; 0x30
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	4648      	mov	r0, r9
 800e9b8:	f7ff fbd6 	bl	800e168 <__sprint_r>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d13e      	bne.n	800ea3e <_vfiprintf_r+0x872>
 800e9c0:	a90f      	add	r1, sp, #60	; 0x3c
 800e9c2:	3c10      	subs	r4, #16
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	e6ae      	b.n	800e726 <_vfiprintf_r+0x55a>
 800e9c8:	460e      	mov	r6, r1
 800e9ca:	e6c7      	b.n	800e75c <_vfiprintf_r+0x590>
 800e9cc:	2010      	movs	r0, #16
 800e9ce:	4401      	add	r1, r0
 800e9d0:	2b07      	cmp	r3, #7
 800e9d2:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e9d6:	6070      	str	r0, [r6, #4]
 800e9d8:	dd06      	ble.n	800e9e8 <_vfiprintf_r+0x81c>
 800e9da:	aa0c      	add	r2, sp, #48	; 0x30
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4648      	mov	r0, r9
 800e9e0:	f7ff fbc2 	bl	800e168 <__sprint_r>
 800e9e4:	bb58      	cbnz	r0, 800ea3e <_vfiprintf_r+0x872>
 800e9e6:	aa0f      	add	r2, sp, #60	; 0x3c
 800e9e8:	3c10      	subs	r4, #16
 800e9ea:	4616      	mov	r6, r2
 800e9ec:	e6bb      	b.n	800e766 <_vfiprintf_r+0x59a>
 800e9ee:	4616      	mov	r6, r2
 800e9f0:	e6d3      	b.n	800e79a <_vfiprintf_r+0x5ce>
 800e9f2:	aa0c      	add	r2, sp, #48	; 0x30
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	4648      	mov	r0, r9
 800e9f8:	f7ff fbb6 	bl	800e168 <__sprint_r>
 800e9fc:	b9f8      	cbnz	r0, 800ea3e <_vfiprintf_r+0x872>
 800e9fe:	ab0f      	add	r3, sp, #60	; 0x3c
 800ea00:	e6da      	b.n	800e7b8 <_vfiprintf_r+0x5ec>
 800ea02:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ea06:	1a54      	subs	r4, r2, r1
 800ea08:	2c00      	cmp	r4, #0
 800ea0a:	f77f aed9 	ble.w	800e7c0 <_vfiprintf_r+0x5f4>
 800ea0e:	4d39      	ldr	r5, [pc, #228]	; (800eaf4 <_vfiprintf_r+0x928>)
 800ea10:	2610      	movs	r6, #16
 800ea12:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ea16:	2c10      	cmp	r4, #16
 800ea18:	f102 0201 	add.w	r2, r2, #1
 800ea1c:	601d      	str	r5, [r3, #0]
 800ea1e:	dc1d      	bgt.n	800ea5c <_vfiprintf_r+0x890>
 800ea20:	605c      	str	r4, [r3, #4]
 800ea22:	2a07      	cmp	r2, #7
 800ea24:	440c      	add	r4, r1
 800ea26:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800ea2a:	f77f aec9 	ble.w	800e7c0 <_vfiprintf_r+0x5f4>
 800ea2e:	aa0c      	add	r2, sp, #48	; 0x30
 800ea30:	4639      	mov	r1, r7
 800ea32:	4648      	mov	r0, r9
 800ea34:	f7ff fb98 	bl	800e168 <__sprint_r>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f43f aec1 	beq.w	800e7c0 <_vfiprintf_r+0x5f4>
 800ea3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea40:	07d9      	lsls	r1, r3, #31
 800ea42:	d405      	bmi.n	800ea50 <_vfiprintf_r+0x884>
 800ea44:	89bb      	ldrh	r3, [r7, #12]
 800ea46:	059a      	lsls	r2, r3, #22
 800ea48:	d402      	bmi.n	800ea50 <_vfiprintf_r+0x884>
 800ea4a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea4c:	f7fb feab 	bl	800a7a6 <__retarget_lock_release_recursive>
 800ea50:	89bb      	ldrh	r3, [r7, #12]
 800ea52:	065b      	lsls	r3, r3, #25
 800ea54:	f57f abed 	bpl.w	800e232 <_vfiprintf_r+0x66>
 800ea58:	f7ff bbe8 	b.w	800e22c <_vfiprintf_r+0x60>
 800ea5c:	3110      	adds	r1, #16
 800ea5e:	2a07      	cmp	r2, #7
 800ea60:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800ea64:	605e      	str	r6, [r3, #4]
 800ea66:	dc02      	bgt.n	800ea6e <_vfiprintf_r+0x8a2>
 800ea68:	3308      	adds	r3, #8
 800ea6a:	3c10      	subs	r4, #16
 800ea6c:	e7d1      	b.n	800ea12 <_vfiprintf_r+0x846>
 800ea6e:	aa0c      	add	r2, sp, #48	; 0x30
 800ea70:	4639      	mov	r1, r7
 800ea72:	4648      	mov	r0, r9
 800ea74:	f7ff fb78 	bl	800e168 <__sprint_r>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d1e0      	bne.n	800ea3e <_vfiprintf_r+0x872>
 800ea7c:	ab0f      	add	r3, sp, #60	; 0x3c
 800ea7e:	e7f4      	b.n	800ea6a <_vfiprintf_r+0x89e>
 800ea80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea82:	b913      	cbnz	r3, 800ea8a <_vfiprintf_r+0x8be>
 800ea84:	2300      	movs	r3, #0
 800ea86:	930d      	str	r3, [sp, #52]	; 0x34
 800ea88:	e7d9      	b.n	800ea3e <_vfiprintf_r+0x872>
 800ea8a:	aa0c      	add	r2, sp, #48	; 0x30
 800ea8c:	4639      	mov	r1, r7
 800ea8e:	4648      	mov	r0, r9
 800ea90:	f7ff fb6a 	bl	800e168 <__sprint_r>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0f5      	beq.n	800ea84 <_vfiprintf_r+0x8b8>
 800ea98:	e7d1      	b.n	800ea3e <_vfiprintf_r+0x872>
 800ea9a:	ea54 0205 	orrs.w	r2, r4, r5
 800ea9e:	f8cd a010 	str.w	sl, [sp, #16]
 800eaa2:	f43f ada3 	beq.w	800e5ec <_vfiprintf_r+0x420>
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	f43f aeda 	beq.w	800e860 <_vfiprintf_r+0x694>
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800eab2:	f43f af26 	beq.w	800e902 <_vfiprintf_r+0x736>
 800eab6:	f004 0307 	and.w	r3, r4, #7
 800eaba:	08e4      	lsrs	r4, r4, #3
 800eabc:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800eac0:	08ed      	lsrs	r5, r5, #3
 800eac2:	3330      	adds	r3, #48	; 0x30
 800eac4:	ea54 0105 	orrs.w	r1, r4, r5
 800eac8:	4642      	mov	r2, r8
 800eaca:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800eace:	d1f2      	bne.n	800eab6 <_vfiprintf_r+0x8ea>
 800ead0:	9904      	ldr	r1, [sp, #16]
 800ead2:	07c8      	lsls	r0, r1, #31
 800ead4:	d506      	bpl.n	800eae4 <_vfiprintf_r+0x918>
 800ead6:	2b30      	cmp	r3, #48	; 0x30
 800ead8:	d004      	beq.n	800eae4 <_vfiprintf_r+0x918>
 800eada:	2330      	movs	r3, #48	; 0x30
 800eadc:	f808 3c01 	strb.w	r3, [r8, #-1]
 800eae0:	f1a2 0802 	sub.w	r8, r2, #2
 800eae4:	ab38      	add	r3, sp, #224	; 0xe0
 800eae6:	eba3 0308 	sub.w	r3, r3, r8
 800eaea:	9d00      	ldr	r5, [sp, #0]
 800eaec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	e5b8      	b.n	800e666 <_vfiprintf_r+0x49a>
 800eaf4:	08011118 	.word	0x08011118

0800eaf8 <__sbprintf>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	460c      	mov	r4, r1
 800eafc:	8989      	ldrh	r1, [r1, #12]
 800eafe:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800eb02:	f021 0102 	bic.w	r1, r1, #2
 800eb06:	f8ad 1014 	strh.w	r1, [sp, #20]
 800eb0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800eb0c:	911b      	str	r1, [sp, #108]	; 0x6c
 800eb0e:	89e1      	ldrh	r1, [r4, #14]
 800eb10:	f8ad 1016 	strh.w	r1, [sp, #22]
 800eb14:	69e1      	ldr	r1, [r4, #28]
 800eb16:	9109      	str	r1, [sp, #36]	; 0x24
 800eb18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb1a:	910b      	str	r1, [sp, #44]	; 0x2c
 800eb1c:	a91c      	add	r1, sp, #112	; 0x70
 800eb1e:	9102      	str	r1, [sp, #8]
 800eb20:	9106      	str	r1, [sp, #24]
 800eb22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb26:	4606      	mov	r6, r0
 800eb28:	9104      	str	r1, [sp, #16]
 800eb2a:	9107      	str	r1, [sp, #28]
 800eb2c:	a818      	add	r0, sp, #96	; 0x60
 800eb2e:	2100      	movs	r1, #0
 800eb30:	e9cd 3200 	strd	r3, r2, [sp]
 800eb34:	9108      	str	r1, [sp, #32]
 800eb36:	f7fb fe33 	bl	800a7a0 <__retarget_lock_init_recursive>
 800eb3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb3e:	a902      	add	r1, sp, #8
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7ff fb43 	bl	800e1cc <_vfiprintf_r>
 800eb46:	1e05      	subs	r5, r0, #0
 800eb48:	db07      	blt.n	800eb5a <__sbprintf+0x62>
 800eb4a:	a902      	add	r1, sp, #8
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7fb fa53 	bl	8009ff8 <_fflush_r>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	bf18      	it	ne
 800eb56:	f04f 35ff 	movne.w	r5, #4294967295
 800eb5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800eb5e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800eb60:	065b      	lsls	r3, r3, #25
 800eb62:	bf42      	ittt	mi
 800eb64:	89a3      	ldrhmi	r3, [r4, #12]
 800eb66:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800eb6a:	81a3      	strhmi	r3, [r4, #12]
 800eb6c:	f7fb fe19 	bl	800a7a2 <__retarget_lock_close_recursive>
 800eb70:	4628      	mov	r0, r5
 800eb72:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800eb76:	bd70      	pop	{r4, r5, r6, pc}

0800eb78 <__ascii_wctomb>:
 800eb78:	b149      	cbz	r1, 800eb8e <__ascii_wctomb+0x16>
 800eb7a:	2aff      	cmp	r2, #255	; 0xff
 800eb7c:	bf85      	ittet	hi
 800eb7e:	238a      	movhi	r3, #138	; 0x8a
 800eb80:	6003      	strhi	r3, [r0, #0]
 800eb82:	700a      	strbls	r2, [r1, #0]
 800eb84:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb88:	bf98      	it	ls
 800eb8a:	2001      	movls	r0, #1
 800eb8c:	4770      	bx	lr
 800eb8e:	4608      	mov	r0, r1
 800eb90:	4770      	bx	lr
	...

0800eb94 <_write_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d07      	ldr	r5, [pc, #28]	; (800ebb4 <_write_r+0x20>)
 800eb98:	4604      	mov	r4, r0
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	2200      	movs	r2, #0
 800eba0:	602a      	str	r2, [r5, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f7f3 fb68 	bl	8002278 <_write>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_write_r+0x1e>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_write_r+0x1e>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	20000b44 	.word	0x20000b44

0800ebb8 <__register_exitproc>:
 800ebb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebbc:	f8df a078 	ldr.w	sl, [pc, #120]	; 800ec38 <__register_exitproc+0x80>
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	f8da 0000 	ldr.w	r0, [sl]
 800ebc6:	4698      	mov	r8, r3
 800ebc8:	460f      	mov	r7, r1
 800ebca:	4691      	mov	r9, r2
 800ebcc:	f7fb fdea 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800ebd0:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <__register_exitproc+0x7c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800ebd8:	b91c      	cbnz	r4, 800ebe2 <__register_exitproc+0x2a>
 800ebda:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800ebde:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800ebe2:	6865      	ldr	r5, [r4, #4]
 800ebe4:	f8da 0000 	ldr.w	r0, [sl]
 800ebe8:	2d1f      	cmp	r5, #31
 800ebea:	dd05      	ble.n	800ebf8 <__register_exitproc+0x40>
 800ebec:	f7fb fddb 	bl	800a7a6 <__retarget_lock_release_recursive>
 800ebf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf8:	b19e      	cbz	r6, 800ec22 <__register_exitproc+0x6a>
 800ebfa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800ec04:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800ec08:	40aa      	lsls	r2, r5
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800ec10:	2e02      	cmp	r6, #2
 800ec12:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800ec16:	bf02      	ittt	eq
 800ec18:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800ec1c:	4313      	orreq	r3, r2
 800ec1e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800ec22:	1c6b      	adds	r3, r5, #1
 800ec24:	3502      	adds	r5, #2
 800ec26:	6063      	str	r3, [r4, #4]
 800ec28:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800ec2c:	f7fb fdbb 	bl	800a7a6 <__retarget_lock_release_recursive>
 800ec30:	2000      	movs	r0, #0
 800ec32:	e7df      	b.n	800ebf4 <__register_exitproc+0x3c>
 800ec34:	08010d20 	.word	0x08010d20
 800ec38:	20000438 	.word	0x20000438

0800ec3c <__assert_func>:
 800ec3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec3e:	4614      	mov	r4, r2
 800ec40:	461a      	mov	r2, r3
 800ec42:	4b09      	ldr	r3, [pc, #36]	; (800ec68 <__assert_func+0x2c>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4605      	mov	r5, r0
 800ec48:	68d8      	ldr	r0, [r3, #12]
 800ec4a:	b14c      	cbz	r4, 800ec60 <__assert_func+0x24>
 800ec4c:	4b07      	ldr	r3, [pc, #28]	; (800ec6c <__assert_func+0x30>)
 800ec4e:	9100      	str	r1, [sp, #0]
 800ec50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec54:	4906      	ldr	r1, [pc, #24]	; (800ec70 <__assert_func+0x34>)
 800ec56:	462b      	mov	r3, r5
 800ec58:	f000 f8ac 	bl	800edb4 <fiprintf>
 800ec5c:	f000 fdd6 	bl	800f80c <abort>
 800ec60:	4b04      	ldr	r3, [pc, #16]	; (800ec74 <__assert_func+0x38>)
 800ec62:	461c      	mov	r4, r3
 800ec64:	e7f3      	b.n	800ec4e <__assert_func+0x12>
 800ec66:	bf00      	nop
 800ec68:	2000000c 	.word	0x2000000c
 800ec6c:	08011138 	.word	0x08011138
 800ec70:	08011145 	.word	0x08011145
 800ec74:	08011173 	.word	0x08011173

0800ec78 <_calloc_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	fba1 1502 	umull	r1, r5, r1, r2
 800ec7e:	b92d      	cbnz	r5, 800ec8c <_calloc_r+0x14>
 800ec80:	f7fb fe0e 	bl	800a8a0 <_malloc_r>
 800ec84:	4604      	mov	r4, r0
 800ec86:	b938      	cbnz	r0, 800ec98 <_calloc_r+0x20>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	f7f7 fc5c 	bl	8006548 <__errno>
 800ec90:	230c      	movs	r3, #12
 800ec92:	6003      	str	r3, [r0, #0]
 800ec94:	2400      	movs	r4, #0
 800ec96:	e7f7      	b.n	800ec88 <_calloc_r+0x10>
 800ec98:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ec9c:	f022 0203 	bic.w	r2, r2, #3
 800eca0:	3a04      	subs	r2, #4
 800eca2:	2a24      	cmp	r2, #36	; 0x24
 800eca4:	d819      	bhi.n	800ecda <_calloc_r+0x62>
 800eca6:	2a13      	cmp	r2, #19
 800eca8:	d915      	bls.n	800ecd6 <_calloc_r+0x5e>
 800ecaa:	2a1b      	cmp	r2, #27
 800ecac:	e9c0 5500 	strd	r5, r5, [r0]
 800ecb0:	d806      	bhi.n	800ecc0 <_calloc_r+0x48>
 800ecb2:	f100 0308 	add.w	r3, r0, #8
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	e9c3 2200 	strd	r2, r2, [r3]
 800ecbc:	609a      	str	r2, [r3, #8]
 800ecbe:	e7e3      	b.n	800ec88 <_calloc_r+0x10>
 800ecc0:	2a24      	cmp	r2, #36	; 0x24
 800ecc2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ecc6:	bf11      	iteee	ne
 800ecc8:	f100 0310 	addne.w	r3, r0, #16
 800eccc:	6105      	streq	r5, [r0, #16]
 800ecce:	f100 0318 	addeq.w	r3, r0, #24
 800ecd2:	6145      	streq	r5, [r0, #20]
 800ecd4:	e7ef      	b.n	800ecb6 <_calloc_r+0x3e>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	e7ed      	b.n	800ecb6 <_calloc_r+0x3e>
 800ecda:	4629      	mov	r1, r5
 800ecdc:	f7f7 fc88 	bl	80065f0 <memset>
 800ece0:	e7d2      	b.n	800ec88 <_calloc_r+0x10>
	...

0800ece4 <_close_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4d06      	ldr	r5, [pc, #24]	; (800ed00 <_close_r+0x1c>)
 800ece8:	2300      	movs	r3, #0
 800ecea:	4604      	mov	r4, r0
 800ecec:	4608      	mov	r0, r1
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	f7f3 faee 	bl	80022d0 <_close>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_close_r+0x1a>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	b103      	cbz	r3, 800ecfe <_close_r+0x1a>
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	20000b44 	.word	0x20000b44

0800ed04 <_fclose_r>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	4606      	mov	r6, r0
 800ed08:	460c      	mov	r4, r1
 800ed0a:	b911      	cbnz	r1, 800ed12 <_fclose_r+0xe>
 800ed0c:	2500      	movs	r5, #0
 800ed0e:	4628      	mov	r0, r5
 800ed10:	bd70      	pop	{r4, r5, r6, pc}
 800ed12:	b118      	cbz	r0, 800ed1c <_fclose_r+0x18>
 800ed14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ed16:	b90b      	cbnz	r3, 800ed1c <_fclose_r+0x18>
 800ed18:	f7fb f9ec 	bl	800a0f4 <__sinit>
 800ed1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed1e:	07d8      	lsls	r0, r3, #31
 800ed20:	d405      	bmi.n	800ed2e <_fclose_r+0x2a>
 800ed22:	89a3      	ldrh	r3, [r4, #12]
 800ed24:	0599      	lsls	r1, r3, #22
 800ed26:	d402      	bmi.n	800ed2e <_fclose_r+0x2a>
 800ed28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed2a:	f7fb fd3b 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800ed2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed32:	b93b      	cbnz	r3, 800ed44 <_fclose_r+0x40>
 800ed34:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ed36:	f015 0501 	ands.w	r5, r5, #1
 800ed3a:	d1e7      	bne.n	800ed0c <_fclose_r+0x8>
 800ed3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed3e:	f7fb fd32 	bl	800a7a6 <__retarget_lock_release_recursive>
 800ed42:	e7e4      	b.n	800ed0e <_fclose_r+0xa>
 800ed44:	4621      	mov	r1, r4
 800ed46:	4630      	mov	r0, r6
 800ed48:	f7fb f8c8 	bl	8009edc <__sflush_r>
 800ed4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed4e:	4605      	mov	r5, r0
 800ed50:	b133      	cbz	r3, 800ed60 <_fclose_r+0x5c>
 800ed52:	69e1      	ldr	r1, [r4, #28]
 800ed54:	4630      	mov	r0, r6
 800ed56:	4798      	blx	r3
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	bfb8      	it	lt
 800ed5c:	f04f 35ff 	movlt.w	r5, #4294967295
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	061a      	lsls	r2, r3, #24
 800ed64:	d503      	bpl.n	800ed6e <_fclose_r+0x6a>
 800ed66:	6921      	ldr	r1, [r4, #16]
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7fb fabb 	bl	800a2e4 <_free_r>
 800ed6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ed70:	b141      	cbz	r1, 800ed84 <_fclose_r+0x80>
 800ed72:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ed76:	4299      	cmp	r1, r3
 800ed78:	d002      	beq.n	800ed80 <_fclose_r+0x7c>
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7fb fab2 	bl	800a2e4 <_free_r>
 800ed80:	2300      	movs	r3, #0
 800ed82:	6323      	str	r3, [r4, #48]	; 0x30
 800ed84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ed86:	b121      	cbz	r1, 800ed92 <_fclose_r+0x8e>
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7fb faab 	bl	800a2e4 <_free_r>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	6463      	str	r3, [r4, #68]	; 0x44
 800ed92:	f7fb f997 	bl	800a0c4 <__sfp_lock_acquire>
 800ed96:	2300      	movs	r3, #0
 800ed98:	81a3      	strh	r3, [r4, #12]
 800ed9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed9c:	07db      	lsls	r3, r3, #31
 800ed9e:	d402      	bmi.n	800eda6 <_fclose_r+0xa2>
 800eda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eda2:	f7fb fd00 	bl	800a7a6 <__retarget_lock_release_recursive>
 800eda6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eda8:	f7fb fcfb 	bl	800a7a2 <__retarget_lock_close_recursive>
 800edac:	f7fb f990 	bl	800a0d0 <__sfp_lock_release>
 800edb0:	e7ad      	b.n	800ed0e <_fclose_r+0xa>
	...

0800edb4 <fiprintf>:
 800edb4:	b40e      	push	{r1, r2, r3}
 800edb6:	b503      	push	{r0, r1, lr}
 800edb8:	4601      	mov	r1, r0
 800edba:	ab03      	add	r3, sp, #12
 800edbc:	4805      	ldr	r0, [pc, #20]	; (800edd4 <fiprintf+0x20>)
 800edbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc2:	6800      	ldr	r0, [r0, #0]
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	f7ff fa01 	bl	800e1cc <_vfiprintf_r>
 800edca:	b002      	add	sp, #8
 800edcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd0:	b003      	add	sp, #12
 800edd2:	4770      	bx	lr
 800edd4:	2000000c 	.word	0x2000000c

0800edd8 <__fputwc>:
 800edd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eddc:	4680      	mov	r8, r0
 800edde:	460e      	mov	r6, r1
 800ede0:	4615      	mov	r5, r2
 800ede2:	f7fb fcd3 	bl	800a78c <__locale_mb_cur_max>
 800ede6:	2801      	cmp	r0, #1
 800ede8:	d11c      	bne.n	800ee24 <__fputwc+0x4c>
 800edea:	1e73      	subs	r3, r6, #1
 800edec:	2bfe      	cmp	r3, #254	; 0xfe
 800edee:	d819      	bhi.n	800ee24 <__fputwc+0x4c>
 800edf0:	f88d 6004 	strb.w	r6, [sp, #4]
 800edf4:	4604      	mov	r4, r0
 800edf6:	2700      	movs	r7, #0
 800edf8:	f10d 0904 	add.w	r9, sp, #4
 800edfc:	42a7      	cmp	r7, r4
 800edfe:	d020      	beq.n	800ee42 <__fputwc+0x6a>
 800ee00:	68ab      	ldr	r3, [r5, #8]
 800ee02:	f817 1009 	ldrb.w	r1, [r7, r9]
 800ee06:	3b01      	subs	r3, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	60ab      	str	r3, [r5, #8]
 800ee0c:	da04      	bge.n	800ee18 <__fputwc+0x40>
 800ee0e:	69aa      	ldr	r2, [r5, #24]
 800ee10:	4293      	cmp	r3, r2
 800ee12:	db1a      	blt.n	800ee4a <__fputwc+0x72>
 800ee14:	290a      	cmp	r1, #10
 800ee16:	d018      	beq.n	800ee4a <__fputwc+0x72>
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	602a      	str	r2, [r5, #0]
 800ee1e:	7019      	strb	r1, [r3, #0]
 800ee20:	3701      	adds	r7, #1
 800ee22:	e7eb      	b.n	800edfc <__fputwc+0x24>
 800ee24:	a901      	add	r1, sp, #4
 800ee26:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800ee2a:	4632      	mov	r2, r6
 800ee2c:	4640      	mov	r0, r8
 800ee2e:	f000 fcd7 	bl	800f7e0 <_wcrtomb_r>
 800ee32:	1c41      	adds	r1, r0, #1
 800ee34:	4604      	mov	r4, r0
 800ee36:	d1de      	bne.n	800edf6 <__fputwc+0x1e>
 800ee38:	89ab      	ldrh	r3, [r5, #12]
 800ee3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3e:	81ab      	strh	r3, [r5, #12]
 800ee40:	4606      	mov	r6, r0
 800ee42:	4630      	mov	r0, r6
 800ee44:	b003      	add	sp, #12
 800ee46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee4a:	462a      	mov	r2, r5
 800ee4c:	4640      	mov	r0, r8
 800ee4e:	f000 fc7e 	bl	800f74e <__swbuf_r>
 800ee52:	1c42      	adds	r2, r0, #1
 800ee54:	d1e4      	bne.n	800ee20 <__fputwc+0x48>
 800ee56:	4606      	mov	r6, r0
 800ee58:	e7f3      	b.n	800ee42 <__fputwc+0x6a>

0800ee5a <_fputwc_r>:
 800ee5a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ee5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee5e:	4614      	mov	r4, r2
 800ee60:	07da      	lsls	r2, r3, #31
 800ee62:	4605      	mov	r5, r0
 800ee64:	d407      	bmi.n	800ee76 <_fputwc_r+0x1c>
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	059b      	lsls	r3, r3, #22
 800ee6a:	d404      	bmi.n	800ee76 <_fputwc_r+0x1c>
 800ee6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee6e:	9101      	str	r1, [sp, #4]
 800ee70:	f7fb fc98 	bl	800a7a4 <__retarget_lock_acquire_recursive>
 800ee74:	9901      	ldr	r1, [sp, #4]
 800ee76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7a:	0498      	lsls	r0, r3, #18
 800ee7c:	d406      	bmi.n	800ee8c <_fputwc_r+0x32>
 800ee7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ee82:	81a3      	strh	r3, [r4, #12]
 800ee84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ee8a:	6663      	str	r3, [r4, #100]	; 0x64
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7ff ffa2 	bl	800edd8 <__fputwc>
 800ee94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee96:	07da      	lsls	r2, r3, #31
 800ee98:	4605      	mov	r5, r0
 800ee9a:	d405      	bmi.n	800eea8 <_fputwc_r+0x4e>
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	059b      	lsls	r3, r3, #22
 800eea0:	d402      	bmi.n	800eea8 <_fputwc_r+0x4e>
 800eea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eea4:	f7fb fc7f 	bl	800a7a6 <__retarget_lock_release_recursive>
 800eea8:	4628      	mov	r0, r5
 800eeaa:	b003      	add	sp, #12
 800eeac:	bd30      	pop	{r4, r5, pc}
	...

0800eeb0 <_fstat_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	; (800eed0 <_fstat_r+0x20>)
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	4611      	mov	r1, r2
 800eebc:	602b      	str	r3, [r5, #0]
 800eebe:	f7f3 fa57 	bl	8002370 <_fstat>
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	d102      	bne.n	800eecc <_fstat_r+0x1c>
 800eec6:	682b      	ldr	r3, [r5, #0]
 800eec8:	b103      	cbz	r3, 800eecc <_fstat_r+0x1c>
 800eeca:	6023      	str	r3, [r4, #0]
 800eecc:	bd38      	pop	{r3, r4, r5, pc}
 800eece:	bf00      	nop
 800eed0:	20000b44 	.word	0x20000b44

0800eed4 <rshift>:
 800eed4:	6903      	ldr	r3, [r0, #16]
 800eed6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eeda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eede:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eee2:	f100 0414 	add.w	r4, r0, #20
 800eee6:	dd45      	ble.n	800ef74 <rshift+0xa0>
 800eee8:	f011 011f 	ands.w	r1, r1, #31
 800eeec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eef0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eef4:	d10c      	bne.n	800ef10 <rshift+0x3c>
 800eef6:	f100 0710 	add.w	r7, r0, #16
 800eefa:	4629      	mov	r1, r5
 800eefc:	42b1      	cmp	r1, r6
 800eefe:	d334      	bcc.n	800ef6a <rshift+0x96>
 800ef00:	1a9b      	subs	r3, r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	1eea      	subs	r2, r5, #3
 800ef06:	4296      	cmp	r6, r2
 800ef08:	bf38      	it	cc
 800ef0a:	2300      	movcc	r3, #0
 800ef0c:	4423      	add	r3, r4
 800ef0e:	e015      	b.n	800ef3c <rshift+0x68>
 800ef10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef14:	f1c1 0820 	rsb	r8, r1, #32
 800ef18:	40cf      	lsrs	r7, r1
 800ef1a:	f105 0e04 	add.w	lr, r5, #4
 800ef1e:	46a1      	mov	r9, r4
 800ef20:	4576      	cmp	r6, lr
 800ef22:	46f4      	mov	ip, lr
 800ef24:	d815      	bhi.n	800ef52 <rshift+0x7e>
 800ef26:	1a9a      	subs	r2, r3, r2
 800ef28:	0092      	lsls	r2, r2, #2
 800ef2a:	3a04      	subs	r2, #4
 800ef2c:	3501      	adds	r5, #1
 800ef2e:	42ae      	cmp	r6, r5
 800ef30:	bf38      	it	cc
 800ef32:	2200      	movcc	r2, #0
 800ef34:	18a3      	adds	r3, r4, r2
 800ef36:	50a7      	str	r7, [r4, r2]
 800ef38:	b107      	cbz	r7, 800ef3c <rshift+0x68>
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	1b1a      	subs	r2, r3, r4
 800ef3e:	42a3      	cmp	r3, r4
 800ef40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef44:	bf08      	it	eq
 800ef46:	2300      	moveq	r3, #0
 800ef48:	6102      	str	r2, [r0, #16]
 800ef4a:	bf08      	it	eq
 800ef4c:	6143      	streq	r3, [r0, #20]
 800ef4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef52:	f8dc c000 	ldr.w	ip, [ip]
 800ef56:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef5a:	ea4c 0707 	orr.w	r7, ip, r7
 800ef5e:	f849 7b04 	str.w	r7, [r9], #4
 800ef62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef66:	40cf      	lsrs	r7, r1
 800ef68:	e7da      	b.n	800ef20 <rshift+0x4c>
 800ef6a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef6e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef72:	e7c3      	b.n	800eefc <rshift+0x28>
 800ef74:	4623      	mov	r3, r4
 800ef76:	e7e1      	b.n	800ef3c <rshift+0x68>

0800ef78 <__hexdig_fun>:
 800ef78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef7c:	2b09      	cmp	r3, #9
 800ef7e:	d802      	bhi.n	800ef86 <__hexdig_fun+0xe>
 800ef80:	3820      	subs	r0, #32
 800ef82:	b2c0      	uxtb	r0, r0
 800ef84:	4770      	bx	lr
 800ef86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef8a:	2b05      	cmp	r3, #5
 800ef8c:	d801      	bhi.n	800ef92 <__hexdig_fun+0x1a>
 800ef8e:	3847      	subs	r0, #71	; 0x47
 800ef90:	e7f7      	b.n	800ef82 <__hexdig_fun+0xa>
 800ef92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef96:	2b05      	cmp	r3, #5
 800ef98:	d801      	bhi.n	800ef9e <__hexdig_fun+0x26>
 800ef9a:	3827      	subs	r0, #39	; 0x27
 800ef9c:	e7f1      	b.n	800ef82 <__hexdig_fun+0xa>
 800ef9e:	2000      	movs	r0, #0
 800efa0:	4770      	bx	lr
	...

0800efa4 <__gethex>:
 800efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa8:	ed2d 8b02 	vpush	{d8}
 800efac:	b089      	sub	sp, #36	; 0x24
 800efae:	ee08 0a10 	vmov	s16, r0
 800efb2:	9304      	str	r3, [sp, #16]
 800efb4:	4bb4      	ldr	r3, [pc, #720]	; (800f288 <__gethex+0x2e4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	4618      	mov	r0, r3
 800efbc:	468b      	mov	fp, r1
 800efbe:	4690      	mov	r8, r2
 800efc0:	f7f1 f93e 	bl	8000240 <strlen>
 800efc4:	9b01      	ldr	r3, [sp, #4]
 800efc6:	f8db 2000 	ldr.w	r2, [fp]
 800efca:	4403      	add	r3, r0
 800efcc:	4682      	mov	sl, r0
 800efce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	1c93      	adds	r3, r2, #2
 800efd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efde:	32fe      	adds	r2, #254	; 0xfe
 800efe0:	18d1      	adds	r1, r2, r3
 800efe2:	461f      	mov	r7, r3
 800efe4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efe8:	9100      	str	r1, [sp, #0]
 800efea:	2830      	cmp	r0, #48	; 0x30
 800efec:	d0f8      	beq.n	800efe0 <__gethex+0x3c>
 800efee:	f7ff ffc3 	bl	800ef78 <__hexdig_fun>
 800eff2:	4604      	mov	r4, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d13a      	bne.n	800f06e <__gethex+0xca>
 800eff8:	9901      	ldr	r1, [sp, #4]
 800effa:	4652      	mov	r2, sl
 800effc:	4638      	mov	r0, r7
 800effe:	f000 fb17 	bl	800f630 <strncmp>
 800f002:	4605      	mov	r5, r0
 800f004:	2800      	cmp	r0, #0
 800f006:	d168      	bne.n	800f0da <__gethex+0x136>
 800f008:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f00c:	eb07 060a 	add.w	r6, r7, sl
 800f010:	f7ff ffb2 	bl	800ef78 <__hexdig_fun>
 800f014:	2800      	cmp	r0, #0
 800f016:	d062      	beq.n	800f0de <__gethex+0x13a>
 800f018:	4633      	mov	r3, r6
 800f01a:	7818      	ldrb	r0, [r3, #0]
 800f01c:	2830      	cmp	r0, #48	; 0x30
 800f01e:	461f      	mov	r7, r3
 800f020:	f103 0301 	add.w	r3, r3, #1
 800f024:	d0f9      	beq.n	800f01a <__gethex+0x76>
 800f026:	f7ff ffa7 	bl	800ef78 <__hexdig_fun>
 800f02a:	2301      	movs	r3, #1
 800f02c:	fab0 f480 	clz	r4, r0
 800f030:	0964      	lsrs	r4, r4, #5
 800f032:	4635      	mov	r5, r6
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	463a      	mov	r2, r7
 800f038:	4616      	mov	r6, r2
 800f03a:	3201      	adds	r2, #1
 800f03c:	7830      	ldrb	r0, [r6, #0]
 800f03e:	f7ff ff9b 	bl	800ef78 <__hexdig_fun>
 800f042:	2800      	cmp	r0, #0
 800f044:	d1f8      	bne.n	800f038 <__gethex+0x94>
 800f046:	9901      	ldr	r1, [sp, #4]
 800f048:	4652      	mov	r2, sl
 800f04a:	4630      	mov	r0, r6
 800f04c:	f000 faf0 	bl	800f630 <strncmp>
 800f050:	b980      	cbnz	r0, 800f074 <__gethex+0xd0>
 800f052:	b94d      	cbnz	r5, 800f068 <__gethex+0xc4>
 800f054:	eb06 050a 	add.w	r5, r6, sl
 800f058:	462a      	mov	r2, r5
 800f05a:	4616      	mov	r6, r2
 800f05c:	3201      	adds	r2, #1
 800f05e:	7830      	ldrb	r0, [r6, #0]
 800f060:	f7ff ff8a 	bl	800ef78 <__hexdig_fun>
 800f064:	2800      	cmp	r0, #0
 800f066:	d1f8      	bne.n	800f05a <__gethex+0xb6>
 800f068:	1bad      	subs	r5, r5, r6
 800f06a:	00ad      	lsls	r5, r5, #2
 800f06c:	e004      	b.n	800f078 <__gethex+0xd4>
 800f06e:	2400      	movs	r4, #0
 800f070:	4625      	mov	r5, r4
 800f072:	e7e0      	b.n	800f036 <__gethex+0x92>
 800f074:	2d00      	cmp	r5, #0
 800f076:	d1f7      	bne.n	800f068 <__gethex+0xc4>
 800f078:	7833      	ldrb	r3, [r6, #0]
 800f07a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f07e:	2b50      	cmp	r3, #80	; 0x50
 800f080:	d13b      	bne.n	800f0fa <__gethex+0x156>
 800f082:	7873      	ldrb	r3, [r6, #1]
 800f084:	2b2b      	cmp	r3, #43	; 0x2b
 800f086:	d02c      	beq.n	800f0e2 <__gethex+0x13e>
 800f088:	2b2d      	cmp	r3, #45	; 0x2d
 800f08a:	d02e      	beq.n	800f0ea <__gethex+0x146>
 800f08c:	1c71      	adds	r1, r6, #1
 800f08e:	f04f 0900 	mov.w	r9, #0
 800f092:	7808      	ldrb	r0, [r1, #0]
 800f094:	f7ff ff70 	bl	800ef78 <__hexdig_fun>
 800f098:	1e43      	subs	r3, r0, #1
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	2b18      	cmp	r3, #24
 800f09e:	d82c      	bhi.n	800f0fa <__gethex+0x156>
 800f0a0:	f1a0 0210 	sub.w	r2, r0, #16
 800f0a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0a8:	f7ff ff66 	bl	800ef78 <__hexdig_fun>
 800f0ac:	1e43      	subs	r3, r0, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b18      	cmp	r3, #24
 800f0b2:	d91d      	bls.n	800f0f0 <__gethex+0x14c>
 800f0b4:	f1b9 0f00 	cmp.w	r9, #0
 800f0b8:	d000      	beq.n	800f0bc <__gethex+0x118>
 800f0ba:	4252      	negs	r2, r2
 800f0bc:	4415      	add	r5, r2
 800f0be:	f8cb 1000 	str.w	r1, [fp]
 800f0c2:	b1e4      	cbz	r4, 800f0fe <__gethex+0x15a>
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	bf14      	ite	ne
 800f0ca:	2700      	movne	r7, #0
 800f0cc:	2706      	moveq	r7, #6
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	b009      	add	sp, #36	; 0x24
 800f0d2:	ecbd 8b02 	vpop	{d8}
 800f0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0da:	463e      	mov	r6, r7
 800f0dc:	4625      	mov	r5, r4
 800f0de:	2401      	movs	r4, #1
 800f0e0:	e7ca      	b.n	800f078 <__gethex+0xd4>
 800f0e2:	f04f 0900 	mov.w	r9, #0
 800f0e6:	1cb1      	adds	r1, r6, #2
 800f0e8:	e7d3      	b.n	800f092 <__gethex+0xee>
 800f0ea:	f04f 0901 	mov.w	r9, #1
 800f0ee:	e7fa      	b.n	800f0e6 <__gethex+0x142>
 800f0f0:	230a      	movs	r3, #10
 800f0f2:	fb03 0202 	mla	r2, r3, r2, r0
 800f0f6:	3a10      	subs	r2, #16
 800f0f8:	e7d4      	b.n	800f0a4 <__gethex+0x100>
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	e7df      	b.n	800f0be <__gethex+0x11a>
 800f0fe:	1bf3      	subs	r3, r6, r7
 800f100:	3b01      	subs	r3, #1
 800f102:	4621      	mov	r1, r4
 800f104:	2b07      	cmp	r3, #7
 800f106:	dc0b      	bgt.n	800f120 <__gethex+0x17c>
 800f108:	ee18 0a10 	vmov	r0, s16
 800f10c:	f7fb fe64 	bl	800add8 <_Balloc>
 800f110:	4604      	mov	r4, r0
 800f112:	b940      	cbnz	r0, 800f126 <__gethex+0x182>
 800f114:	4b5d      	ldr	r3, [pc, #372]	; (800f28c <__gethex+0x2e8>)
 800f116:	4602      	mov	r2, r0
 800f118:	21de      	movs	r1, #222	; 0xde
 800f11a:	485d      	ldr	r0, [pc, #372]	; (800f290 <__gethex+0x2ec>)
 800f11c:	f7ff fd8e 	bl	800ec3c <__assert_func>
 800f120:	3101      	adds	r1, #1
 800f122:	105b      	asrs	r3, r3, #1
 800f124:	e7ee      	b.n	800f104 <__gethex+0x160>
 800f126:	f100 0914 	add.w	r9, r0, #20
 800f12a:	f04f 0b00 	mov.w	fp, #0
 800f12e:	f1ca 0301 	rsb	r3, sl, #1
 800f132:	f8cd 9008 	str.w	r9, [sp, #8]
 800f136:	f8cd b000 	str.w	fp, [sp]
 800f13a:	9306      	str	r3, [sp, #24]
 800f13c:	42b7      	cmp	r7, r6
 800f13e:	d340      	bcc.n	800f1c2 <__gethex+0x21e>
 800f140:	9802      	ldr	r0, [sp, #8]
 800f142:	9b00      	ldr	r3, [sp, #0]
 800f144:	f840 3b04 	str.w	r3, [r0], #4
 800f148:	eba0 0009 	sub.w	r0, r0, r9
 800f14c:	1080      	asrs	r0, r0, #2
 800f14e:	0146      	lsls	r6, r0, #5
 800f150:	6120      	str	r0, [r4, #16]
 800f152:	4618      	mov	r0, r3
 800f154:	f7fb fefe 	bl	800af54 <__hi0bits>
 800f158:	1a30      	subs	r0, r6, r0
 800f15a:	f8d8 6000 	ldr.w	r6, [r8]
 800f15e:	42b0      	cmp	r0, r6
 800f160:	dd63      	ble.n	800f22a <__gethex+0x286>
 800f162:	1b87      	subs	r7, r0, r6
 800f164:	4639      	mov	r1, r7
 800f166:	4620      	mov	r0, r4
 800f168:	f7fc fa85 	bl	800b676 <__any_on>
 800f16c:	4682      	mov	sl, r0
 800f16e:	b1a8      	cbz	r0, 800f19c <__gethex+0x1f8>
 800f170:	1e7b      	subs	r3, r7, #1
 800f172:	1159      	asrs	r1, r3, #5
 800f174:	f003 021f 	and.w	r2, r3, #31
 800f178:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f17c:	f04f 0a01 	mov.w	sl, #1
 800f180:	fa0a f202 	lsl.w	r2, sl, r2
 800f184:	420a      	tst	r2, r1
 800f186:	d009      	beq.n	800f19c <__gethex+0x1f8>
 800f188:	4553      	cmp	r3, sl
 800f18a:	dd05      	ble.n	800f198 <__gethex+0x1f4>
 800f18c:	1eb9      	subs	r1, r7, #2
 800f18e:	4620      	mov	r0, r4
 800f190:	f7fc fa71 	bl	800b676 <__any_on>
 800f194:	2800      	cmp	r0, #0
 800f196:	d145      	bne.n	800f224 <__gethex+0x280>
 800f198:	f04f 0a02 	mov.w	sl, #2
 800f19c:	4639      	mov	r1, r7
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f7ff fe98 	bl	800eed4 <rshift>
 800f1a4:	443d      	add	r5, r7
 800f1a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1aa:	42ab      	cmp	r3, r5
 800f1ac:	da4c      	bge.n	800f248 <__gethex+0x2a4>
 800f1ae:	ee18 0a10 	vmov	r0, s16
 800f1b2:	4621      	mov	r1, r4
 800f1b4:	f7fb fe35 	bl	800ae22 <_Bfree>
 800f1b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	6013      	str	r3, [r2, #0]
 800f1be:	27a3      	movs	r7, #163	; 0xa3
 800f1c0:	e785      	b.n	800f0ce <__gethex+0x12a>
 800f1c2:	1e73      	subs	r3, r6, #1
 800f1c4:	9a05      	ldr	r2, [sp, #20]
 800f1c6:	9303      	str	r3, [sp, #12]
 800f1c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d019      	beq.n	800f204 <__gethex+0x260>
 800f1d0:	f1bb 0f20 	cmp.w	fp, #32
 800f1d4:	d107      	bne.n	800f1e6 <__gethex+0x242>
 800f1d6:	9b02      	ldr	r3, [sp, #8]
 800f1d8:	9a00      	ldr	r2, [sp, #0]
 800f1da:	f843 2b04 	str.w	r2, [r3], #4
 800f1de:	9302      	str	r3, [sp, #8]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	469b      	mov	fp, r3
 800f1e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1ea:	f7ff fec5 	bl	800ef78 <__hexdig_fun>
 800f1ee:	9b00      	ldr	r3, [sp, #0]
 800f1f0:	f000 000f 	and.w	r0, r0, #15
 800f1f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1f8:	4303      	orrs	r3, r0
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	f10b 0b04 	add.w	fp, fp, #4
 800f200:	9b03      	ldr	r3, [sp, #12]
 800f202:	e00d      	b.n	800f220 <__gethex+0x27c>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	9a06      	ldr	r2, [sp, #24]
 800f208:	4413      	add	r3, r2
 800f20a:	42bb      	cmp	r3, r7
 800f20c:	d3e0      	bcc.n	800f1d0 <__gethex+0x22c>
 800f20e:	4618      	mov	r0, r3
 800f210:	9901      	ldr	r1, [sp, #4]
 800f212:	9307      	str	r3, [sp, #28]
 800f214:	4652      	mov	r2, sl
 800f216:	f000 fa0b 	bl	800f630 <strncmp>
 800f21a:	9b07      	ldr	r3, [sp, #28]
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d1d7      	bne.n	800f1d0 <__gethex+0x22c>
 800f220:	461e      	mov	r6, r3
 800f222:	e78b      	b.n	800f13c <__gethex+0x198>
 800f224:	f04f 0a03 	mov.w	sl, #3
 800f228:	e7b8      	b.n	800f19c <__gethex+0x1f8>
 800f22a:	da0a      	bge.n	800f242 <__gethex+0x29e>
 800f22c:	1a37      	subs	r7, r6, r0
 800f22e:	4621      	mov	r1, r4
 800f230:	ee18 0a10 	vmov	r0, s16
 800f234:	463a      	mov	r2, r7
 800f236:	f7fb ffdd 	bl	800b1f4 <__lshift>
 800f23a:	1bed      	subs	r5, r5, r7
 800f23c:	4604      	mov	r4, r0
 800f23e:	f100 0914 	add.w	r9, r0, #20
 800f242:	f04f 0a00 	mov.w	sl, #0
 800f246:	e7ae      	b.n	800f1a6 <__gethex+0x202>
 800f248:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f24c:	42a8      	cmp	r0, r5
 800f24e:	dd72      	ble.n	800f336 <__gethex+0x392>
 800f250:	1b45      	subs	r5, r0, r5
 800f252:	42ae      	cmp	r6, r5
 800f254:	dc36      	bgt.n	800f2c4 <__gethex+0x320>
 800f256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d02a      	beq.n	800f2b4 <__gethex+0x310>
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d02c      	beq.n	800f2bc <__gethex+0x318>
 800f262:	2b01      	cmp	r3, #1
 800f264:	d11c      	bne.n	800f2a0 <__gethex+0x2fc>
 800f266:	42ae      	cmp	r6, r5
 800f268:	d11a      	bne.n	800f2a0 <__gethex+0x2fc>
 800f26a:	2e01      	cmp	r6, #1
 800f26c:	d112      	bne.n	800f294 <__gethex+0x2f0>
 800f26e:	9a04      	ldr	r2, [sp, #16]
 800f270:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f274:	6013      	str	r3, [r2, #0]
 800f276:	2301      	movs	r3, #1
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	f8c9 3000 	str.w	r3, [r9]
 800f27e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f280:	2762      	movs	r7, #98	; 0x62
 800f282:	601c      	str	r4, [r3, #0]
 800f284:	e723      	b.n	800f0ce <__gethex+0x12a>
 800f286:	bf00      	nop
 800f288:	080111d8 	.word	0x080111d8
 800f28c:	08010ed2 	.word	0x08010ed2
 800f290:	08011174 	.word	0x08011174
 800f294:	1e71      	subs	r1, r6, #1
 800f296:	4620      	mov	r0, r4
 800f298:	f7fc f9ed 	bl	800b676 <__any_on>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d1e6      	bne.n	800f26e <__gethex+0x2ca>
 800f2a0:	ee18 0a10 	vmov	r0, s16
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	f7fb fdbc 	bl	800ae22 <_Bfree>
 800f2aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	6013      	str	r3, [r2, #0]
 800f2b0:	2750      	movs	r7, #80	; 0x50
 800f2b2:	e70c      	b.n	800f0ce <__gethex+0x12a>
 800f2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1f2      	bne.n	800f2a0 <__gethex+0x2fc>
 800f2ba:	e7d8      	b.n	800f26e <__gethex+0x2ca>
 800f2bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1d5      	bne.n	800f26e <__gethex+0x2ca>
 800f2c2:	e7ed      	b.n	800f2a0 <__gethex+0x2fc>
 800f2c4:	1e6f      	subs	r7, r5, #1
 800f2c6:	f1ba 0f00 	cmp.w	sl, #0
 800f2ca:	d131      	bne.n	800f330 <__gethex+0x38c>
 800f2cc:	b127      	cbz	r7, 800f2d8 <__gethex+0x334>
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f7fc f9d0 	bl	800b676 <__any_on>
 800f2d6:	4682      	mov	sl, r0
 800f2d8:	117b      	asrs	r3, r7, #5
 800f2da:	2101      	movs	r1, #1
 800f2dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f2e0:	f007 071f 	and.w	r7, r7, #31
 800f2e4:	fa01 f707 	lsl.w	r7, r1, r7
 800f2e8:	421f      	tst	r7, r3
 800f2ea:	4629      	mov	r1, r5
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	bf18      	it	ne
 800f2f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2f4:	1b76      	subs	r6, r6, r5
 800f2f6:	f7ff fded 	bl	800eed4 <rshift>
 800f2fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2fe:	2702      	movs	r7, #2
 800f300:	f1ba 0f00 	cmp.w	sl, #0
 800f304:	d048      	beq.n	800f398 <__gethex+0x3f4>
 800f306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d015      	beq.n	800f33a <__gethex+0x396>
 800f30e:	2b03      	cmp	r3, #3
 800f310:	d017      	beq.n	800f342 <__gethex+0x39e>
 800f312:	2b01      	cmp	r3, #1
 800f314:	d109      	bne.n	800f32a <__gethex+0x386>
 800f316:	f01a 0f02 	tst.w	sl, #2
 800f31a:	d006      	beq.n	800f32a <__gethex+0x386>
 800f31c:	f8d9 0000 	ldr.w	r0, [r9]
 800f320:	ea4a 0a00 	orr.w	sl, sl, r0
 800f324:	f01a 0f01 	tst.w	sl, #1
 800f328:	d10e      	bne.n	800f348 <__gethex+0x3a4>
 800f32a:	f047 0710 	orr.w	r7, r7, #16
 800f32e:	e033      	b.n	800f398 <__gethex+0x3f4>
 800f330:	f04f 0a01 	mov.w	sl, #1
 800f334:	e7d0      	b.n	800f2d8 <__gethex+0x334>
 800f336:	2701      	movs	r7, #1
 800f338:	e7e2      	b.n	800f300 <__gethex+0x35c>
 800f33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f33c:	f1c3 0301 	rsb	r3, r3, #1
 800f340:	9315      	str	r3, [sp, #84]	; 0x54
 800f342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0f0      	beq.n	800f32a <__gethex+0x386>
 800f348:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f34c:	f104 0314 	add.w	r3, r4, #20
 800f350:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f354:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f358:	f04f 0c00 	mov.w	ip, #0
 800f35c:	4618      	mov	r0, r3
 800f35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f362:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f366:	d01c      	beq.n	800f3a2 <__gethex+0x3fe>
 800f368:	3201      	adds	r2, #1
 800f36a:	6002      	str	r2, [r0, #0]
 800f36c:	2f02      	cmp	r7, #2
 800f36e:	f104 0314 	add.w	r3, r4, #20
 800f372:	d13f      	bne.n	800f3f4 <__gethex+0x450>
 800f374:	f8d8 2000 	ldr.w	r2, [r8]
 800f378:	3a01      	subs	r2, #1
 800f37a:	42b2      	cmp	r2, r6
 800f37c:	d10a      	bne.n	800f394 <__gethex+0x3f0>
 800f37e:	1171      	asrs	r1, r6, #5
 800f380:	2201      	movs	r2, #1
 800f382:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f386:	f006 061f 	and.w	r6, r6, #31
 800f38a:	fa02 f606 	lsl.w	r6, r2, r6
 800f38e:	421e      	tst	r6, r3
 800f390:	bf18      	it	ne
 800f392:	4617      	movne	r7, r2
 800f394:	f047 0720 	orr.w	r7, r7, #32
 800f398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f39a:	601c      	str	r4, [r3, #0]
 800f39c:	9b04      	ldr	r3, [sp, #16]
 800f39e:	601d      	str	r5, [r3, #0]
 800f3a0:	e695      	b.n	800f0ce <__gethex+0x12a>
 800f3a2:	4299      	cmp	r1, r3
 800f3a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f3a8:	d8d8      	bhi.n	800f35c <__gethex+0x3b8>
 800f3aa:	68a3      	ldr	r3, [r4, #8]
 800f3ac:	459b      	cmp	fp, r3
 800f3ae:	db19      	blt.n	800f3e4 <__gethex+0x440>
 800f3b0:	6861      	ldr	r1, [r4, #4]
 800f3b2:	ee18 0a10 	vmov	r0, s16
 800f3b6:	3101      	adds	r1, #1
 800f3b8:	f7fb fd0e 	bl	800add8 <_Balloc>
 800f3bc:	4681      	mov	r9, r0
 800f3be:	b918      	cbnz	r0, 800f3c8 <__gethex+0x424>
 800f3c0:	4b1a      	ldr	r3, [pc, #104]	; (800f42c <__gethex+0x488>)
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	2184      	movs	r1, #132	; 0x84
 800f3c6:	e6a8      	b.n	800f11a <__gethex+0x176>
 800f3c8:	6922      	ldr	r2, [r4, #16]
 800f3ca:	3202      	adds	r2, #2
 800f3cc:	f104 010c 	add.w	r1, r4, #12
 800f3d0:	0092      	lsls	r2, r2, #2
 800f3d2:	300c      	adds	r0, #12
 800f3d4:	f7fb fccc 	bl	800ad70 <memcpy>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	ee18 0a10 	vmov	r0, s16
 800f3de:	f7fb fd20 	bl	800ae22 <_Bfree>
 800f3e2:	464c      	mov	r4, r9
 800f3e4:	6923      	ldr	r3, [r4, #16]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3ec:	6122      	str	r2, [r4, #16]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	615a      	str	r2, [r3, #20]
 800f3f2:	e7bb      	b.n	800f36c <__gethex+0x3c8>
 800f3f4:	6922      	ldr	r2, [r4, #16]
 800f3f6:	455a      	cmp	r2, fp
 800f3f8:	dd0b      	ble.n	800f412 <__gethex+0x46e>
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f7ff fd69 	bl	800eed4 <rshift>
 800f402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f406:	3501      	adds	r5, #1
 800f408:	42ab      	cmp	r3, r5
 800f40a:	f6ff aed0 	blt.w	800f1ae <__gethex+0x20a>
 800f40e:	2701      	movs	r7, #1
 800f410:	e7c0      	b.n	800f394 <__gethex+0x3f0>
 800f412:	f016 061f 	ands.w	r6, r6, #31
 800f416:	d0fa      	beq.n	800f40e <__gethex+0x46a>
 800f418:	4453      	add	r3, sl
 800f41a:	f1c6 0620 	rsb	r6, r6, #32
 800f41e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f422:	f7fb fd97 	bl	800af54 <__hi0bits>
 800f426:	42b0      	cmp	r0, r6
 800f428:	dbe7      	blt.n	800f3fa <__gethex+0x456>
 800f42a:	e7f0      	b.n	800f40e <__gethex+0x46a>
 800f42c:	08010ed2 	.word	0x08010ed2

0800f430 <L_shift>:
 800f430:	f1c2 0208 	rsb	r2, r2, #8
 800f434:	0092      	lsls	r2, r2, #2
 800f436:	b570      	push	{r4, r5, r6, lr}
 800f438:	f1c2 0620 	rsb	r6, r2, #32
 800f43c:	6843      	ldr	r3, [r0, #4]
 800f43e:	6804      	ldr	r4, [r0, #0]
 800f440:	fa03 f506 	lsl.w	r5, r3, r6
 800f444:	432c      	orrs	r4, r5
 800f446:	40d3      	lsrs	r3, r2
 800f448:	6004      	str	r4, [r0, #0]
 800f44a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f44e:	4288      	cmp	r0, r1
 800f450:	d3f4      	bcc.n	800f43c <L_shift+0xc>
 800f452:	bd70      	pop	{r4, r5, r6, pc}

0800f454 <__match>:
 800f454:	b530      	push	{r4, r5, lr}
 800f456:	6803      	ldr	r3, [r0, #0]
 800f458:	3301      	adds	r3, #1
 800f45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f45e:	b914      	cbnz	r4, 800f466 <__match+0x12>
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	2001      	movs	r0, #1
 800f464:	bd30      	pop	{r4, r5, pc}
 800f466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f46e:	2d19      	cmp	r5, #25
 800f470:	bf98      	it	ls
 800f472:	3220      	addls	r2, #32
 800f474:	42a2      	cmp	r2, r4
 800f476:	d0f0      	beq.n	800f45a <__match+0x6>
 800f478:	2000      	movs	r0, #0
 800f47a:	e7f3      	b.n	800f464 <__match+0x10>

0800f47c <__hexnan>:
 800f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f480:	680b      	ldr	r3, [r1, #0]
 800f482:	115e      	asrs	r6, r3, #5
 800f484:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f488:	f013 031f 	ands.w	r3, r3, #31
 800f48c:	b087      	sub	sp, #28
 800f48e:	bf18      	it	ne
 800f490:	3604      	addne	r6, #4
 800f492:	2500      	movs	r5, #0
 800f494:	1f37      	subs	r7, r6, #4
 800f496:	4690      	mov	r8, r2
 800f498:	6802      	ldr	r2, [r0, #0]
 800f49a:	9301      	str	r3, [sp, #4]
 800f49c:	4682      	mov	sl, r0
 800f49e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4a2:	46b9      	mov	r9, r7
 800f4a4:	463c      	mov	r4, r7
 800f4a6:	9502      	str	r5, [sp, #8]
 800f4a8:	46ab      	mov	fp, r5
 800f4aa:	7851      	ldrb	r1, [r2, #1]
 800f4ac:	1c53      	adds	r3, r2, #1
 800f4ae:	9303      	str	r3, [sp, #12]
 800f4b0:	b341      	cbz	r1, 800f504 <__hexnan+0x88>
 800f4b2:	4608      	mov	r0, r1
 800f4b4:	9205      	str	r2, [sp, #20]
 800f4b6:	9104      	str	r1, [sp, #16]
 800f4b8:	f7ff fd5e 	bl	800ef78 <__hexdig_fun>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d14f      	bne.n	800f560 <__hexnan+0xe4>
 800f4c0:	9904      	ldr	r1, [sp, #16]
 800f4c2:	9a05      	ldr	r2, [sp, #20]
 800f4c4:	2920      	cmp	r1, #32
 800f4c6:	d818      	bhi.n	800f4fa <__hexnan+0x7e>
 800f4c8:	9b02      	ldr	r3, [sp, #8]
 800f4ca:	459b      	cmp	fp, r3
 800f4cc:	dd13      	ble.n	800f4f6 <__hexnan+0x7a>
 800f4ce:	454c      	cmp	r4, r9
 800f4d0:	d206      	bcs.n	800f4e0 <__hexnan+0x64>
 800f4d2:	2d07      	cmp	r5, #7
 800f4d4:	dc04      	bgt.n	800f4e0 <__hexnan+0x64>
 800f4d6:	462a      	mov	r2, r5
 800f4d8:	4649      	mov	r1, r9
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f7ff ffa8 	bl	800f430 <L_shift>
 800f4e0:	4544      	cmp	r4, r8
 800f4e2:	d950      	bls.n	800f586 <__hexnan+0x10a>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f1a4 0904 	sub.w	r9, r4, #4
 800f4ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4ee:	f8cd b008 	str.w	fp, [sp, #8]
 800f4f2:	464c      	mov	r4, r9
 800f4f4:	461d      	mov	r5, r3
 800f4f6:	9a03      	ldr	r2, [sp, #12]
 800f4f8:	e7d7      	b.n	800f4aa <__hexnan+0x2e>
 800f4fa:	2929      	cmp	r1, #41	; 0x29
 800f4fc:	d156      	bne.n	800f5ac <__hexnan+0x130>
 800f4fe:	3202      	adds	r2, #2
 800f500:	f8ca 2000 	str.w	r2, [sl]
 800f504:	f1bb 0f00 	cmp.w	fp, #0
 800f508:	d050      	beq.n	800f5ac <__hexnan+0x130>
 800f50a:	454c      	cmp	r4, r9
 800f50c:	d206      	bcs.n	800f51c <__hexnan+0xa0>
 800f50e:	2d07      	cmp	r5, #7
 800f510:	dc04      	bgt.n	800f51c <__hexnan+0xa0>
 800f512:	462a      	mov	r2, r5
 800f514:	4649      	mov	r1, r9
 800f516:	4620      	mov	r0, r4
 800f518:	f7ff ff8a 	bl	800f430 <L_shift>
 800f51c:	4544      	cmp	r4, r8
 800f51e:	d934      	bls.n	800f58a <__hexnan+0x10e>
 800f520:	f1a8 0204 	sub.w	r2, r8, #4
 800f524:	4623      	mov	r3, r4
 800f526:	f853 1b04 	ldr.w	r1, [r3], #4
 800f52a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f52e:	429f      	cmp	r7, r3
 800f530:	d2f9      	bcs.n	800f526 <__hexnan+0xaa>
 800f532:	1b3b      	subs	r3, r7, r4
 800f534:	f023 0303 	bic.w	r3, r3, #3
 800f538:	3304      	adds	r3, #4
 800f53a:	3401      	adds	r4, #1
 800f53c:	3e03      	subs	r6, #3
 800f53e:	42b4      	cmp	r4, r6
 800f540:	bf88      	it	hi
 800f542:	2304      	movhi	r3, #4
 800f544:	4443      	add	r3, r8
 800f546:	2200      	movs	r2, #0
 800f548:	f843 2b04 	str.w	r2, [r3], #4
 800f54c:	429f      	cmp	r7, r3
 800f54e:	d2fb      	bcs.n	800f548 <__hexnan+0xcc>
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	b91b      	cbnz	r3, 800f55c <__hexnan+0xe0>
 800f554:	4547      	cmp	r7, r8
 800f556:	d127      	bne.n	800f5a8 <__hexnan+0x12c>
 800f558:	2301      	movs	r3, #1
 800f55a:	603b      	str	r3, [r7, #0]
 800f55c:	2005      	movs	r0, #5
 800f55e:	e026      	b.n	800f5ae <__hexnan+0x132>
 800f560:	3501      	adds	r5, #1
 800f562:	2d08      	cmp	r5, #8
 800f564:	f10b 0b01 	add.w	fp, fp, #1
 800f568:	dd06      	ble.n	800f578 <__hexnan+0xfc>
 800f56a:	4544      	cmp	r4, r8
 800f56c:	d9c3      	bls.n	800f4f6 <__hexnan+0x7a>
 800f56e:	2300      	movs	r3, #0
 800f570:	f844 3c04 	str.w	r3, [r4, #-4]
 800f574:	2501      	movs	r5, #1
 800f576:	3c04      	subs	r4, #4
 800f578:	6822      	ldr	r2, [r4, #0]
 800f57a:	f000 000f 	and.w	r0, r0, #15
 800f57e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f582:	6022      	str	r2, [r4, #0]
 800f584:	e7b7      	b.n	800f4f6 <__hexnan+0x7a>
 800f586:	2508      	movs	r5, #8
 800f588:	e7b5      	b.n	800f4f6 <__hexnan+0x7a>
 800f58a:	9b01      	ldr	r3, [sp, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d0df      	beq.n	800f550 <__hexnan+0xd4>
 800f590:	f04f 32ff 	mov.w	r2, #4294967295
 800f594:	f1c3 0320 	rsb	r3, r3, #32
 800f598:	fa22 f303 	lsr.w	r3, r2, r3
 800f59c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f5a0:	401a      	ands	r2, r3
 800f5a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f5a6:	e7d3      	b.n	800f550 <__hexnan+0xd4>
 800f5a8:	3f04      	subs	r7, #4
 800f5aa:	e7d1      	b.n	800f550 <__hexnan+0xd4>
 800f5ac:	2004      	movs	r0, #4
 800f5ae:	b007      	add	sp, #28
 800f5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5b4 <_isatty_r>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	4d06      	ldr	r5, [pc, #24]	; (800f5d0 <_isatty_r+0x1c>)
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4608      	mov	r0, r1
 800f5be:	602b      	str	r3, [r5, #0]
 800f5c0:	f7f2 fe44 	bl	800224c <_isatty>
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	d102      	bne.n	800f5ce <_isatty_r+0x1a>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b103      	cbz	r3, 800f5ce <_isatty_r+0x1a>
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	20000b44 	.word	0x20000b44

0800f5d4 <_lseek_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	; (800f5f4 <_lseek_r+0x20>)
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	602a      	str	r2, [r5, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f7f2 fe8b 	bl	80022fe <_lseek>
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	d102      	bne.n	800f5f2 <_lseek_r+0x1e>
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	b103      	cbz	r3, 800f5f2 <_lseek_r+0x1e>
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	20000b44 	.word	0x20000b44

0800f5f8 <_read_r>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	4d07      	ldr	r5, [pc, #28]	; (800f618 <_read_r+0x20>)
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	4608      	mov	r0, r1
 800f600:	4611      	mov	r1, r2
 800f602:	2200      	movs	r2, #0
 800f604:	602a      	str	r2, [r5, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	f7f2 fe8a 	bl	8002320 <_read>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_read_r+0x1e>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_read_r+0x1e>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	20000b44 	.word	0x20000b44
 800f61c:	00000000 	.word	0x00000000

0800f620 <nan>:
 800f620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f628 <nan+0x8>
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	00000000 	.word	0x00000000
 800f62c:	7ff80000 	.word	0x7ff80000

0800f630 <strncmp>:
 800f630:	b510      	push	{r4, lr}
 800f632:	b17a      	cbz	r2, 800f654 <strncmp+0x24>
 800f634:	4603      	mov	r3, r0
 800f636:	3901      	subs	r1, #1
 800f638:	1884      	adds	r4, r0, r2
 800f63a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f63e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f642:	4290      	cmp	r0, r2
 800f644:	d101      	bne.n	800f64a <strncmp+0x1a>
 800f646:	42a3      	cmp	r3, r4
 800f648:	d101      	bne.n	800f64e <strncmp+0x1e>
 800f64a:	1a80      	subs	r0, r0, r2
 800f64c:	bd10      	pop	{r4, pc}
 800f64e:	2800      	cmp	r0, #0
 800f650:	d1f3      	bne.n	800f63a <strncmp+0xa>
 800f652:	e7fa      	b.n	800f64a <strncmp+0x1a>
 800f654:	4610      	mov	r0, r2
 800f656:	e7f9      	b.n	800f64c <strncmp+0x1c>

0800f658 <__ssprint_r>:
 800f658:	6893      	ldr	r3, [r2, #8]
 800f65a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65e:	4680      	mov	r8, r0
 800f660:	460c      	mov	r4, r1
 800f662:	4617      	mov	r7, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d061      	beq.n	800f72c <__ssprint_r+0xd4>
 800f668:	2300      	movs	r3, #0
 800f66a:	f8d2 a000 	ldr.w	sl, [r2]
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	469b      	mov	fp, r3
 800f672:	f1bb 0f00 	cmp.w	fp, #0
 800f676:	d02b      	beq.n	800f6d0 <__ssprint_r+0x78>
 800f678:	68a6      	ldr	r6, [r4, #8]
 800f67a:	455e      	cmp	r6, fp
 800f67c:	d844      	bhi.n	800f708 <__ssprint_r+0xb0>
 800f67e:	89a2      	ldrh	r2, [r4, #12]
 800f680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f684:	d03e      	beq.n	800f704 <__ssprint_r+0xac>
 800f686:	6820      	ldr	r0, [r4, #0]
 800f688:	6921      	ldr	r1, [r4, #16]
 800f68a:	6965      	ldr	r5, [r4, #20]
 800f68c:	eba0 0901 	sub.w	r9, r0, r1
 800f690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f698:	f109 0001 	add.w	r0, r9, #1
 800f69c:	106d      	asrs	r5, r5, #1
 800f69e:	4458      	add	r0, fp
 800f6a0:	4285      	cmp	r5, r0
 800f6a2:	bf38      	it	cc
 800f6a4:	4605      	movcc	r5, r0
 800f6a6:	0553      	lsls	r3, r2, #21
 800f6a8:	d545      	bpl.n	800f736 <__ssprint_r+0xde>
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	f7fb f8f7 	bl	800a8a0 <_malloc_r>
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	b9a0      	cbnz	r0, 800f6e0 <__ssprint_r+0x88>
 800f6b6:	230c      	movs	r3, #12
 800f6b8:	f8c8 3000 	str.w	r3, [r8]
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6c2:	81a3      	strh	r3, [r4, #12]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800f6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ce:	e02f      	b.n	800f730 <__ssprint_r+0xd8>
 800f6d0:	f8da 3000 	ldr.w	r3, [sl]
 800f6d4:	f8da b004 	ldr.w	fp, [sl, #4]
 800f6d8:	9301      	str	r3, [sp, #4]
 800f6da:	f10a 0a08 	add.w	sl, sl, #8
 800f6de:	e7c8      	b.n	800f672 <__ssprint_r+0x1a>
 800f6e0:	464a      	mov	r2, r9
 800f6e2:	6921      	ldr	r1, [r4, #16]
 800f6e4:	f7fb fb44 	bl	800ad70 <memcpy>
 800f6e8:	89a2      	ldrh	r2, [r4, #12]
 800f6ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f6ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f6f2:	81a2      	strh	r2, [r4, #12]
 800f6f4:	6126      	str	r6, [r4, #16]
 800f6f6:	6165      	str	r5, [r4, #20]
 800f6f8:	444e      	add	r6, r9
 800f6fa:	eba5 0509 	sub.w	r5, r5, r9
 800f6fe:	6026      	str	r6, [r4, #0]
 800f700:	60a5      	str	r5, [r4, #8]
 800f702:	465e      	mov	r6, fp
 800f704:	455e      	cmp	r6, fp
 800f706:	d900      	bls.n	800f70a <__ssprint_r+0xb2>
 800f708:	465e      	mov	r6, fp
 800f70a:	4632      	mov	r2, r6
 800f70c:	9901      	ldr	r1, [sp, #4]
 800f70e:	6820      	ldr	r0, [r4, #0]
 800f710:	f7fb fb3c 	bl	800ad8c <memmove>
 800f714:	68a2      	ldr	r2, [r4, #8]
 800f716:	1b92      	subs	r2, r2, r6
 800f718:	60a2      	str	r2, [r4, #8]
 800f71a:	6822      	ldr	r2, [r4, #0]
 800f71c:	4432      	add	r2, r6
 800f71e:	6022      	str	r2, [r4, #0]
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	eba2 030b 	sub.w	r3, r2, fp
 800f726:	60bb      	str	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1d1      	bne.n	800f6d0 <__ssprint_r+0x78>
 800f72c:	2000      	movs	r0, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	b003      	add	sp, #12
 800f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f736:	462a      	mov	r2, r5
 800f738:	4640      	mov	r0, r8
 800f73a:	f7fb ffc5 	bl	800b6c8 <_realloc_r>
 800f73e:	4606      	mov	r6, r0
 800f740:	2800      	cmp	r0, #0
 800f742:	d1d7      	bne.n	800f6f4 <__ssprint_r+0x9c>
 800f744:	6921      	ldr	r1, [r4, #16]
 800f746:	4640      	mov	r0, r8
 800f748:	f7fa fdcc 	bl	800a2e4 <_free_r>
 800f74c:	e7b3      	b.n	800f6b6 <__ssprint_r+0x5e>

0800f74e <__swbuf_r>:
 800f74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f750:	460e      	mov	r6, r1
 800f752:	4614      	mov	r4, r2
 800f754:	4605      	mov	r5, r0
 800f756:	b118      	cbz	r0, 800f760 <__swbuf_r+0x12>
 800f758:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f75a:	b90b      	cbnz	r3, 800f760 <__swbuf_r+0x12>
 800f75c:	f7fa fcca 	bl	800a0f4 <__sinit>
 800f760:	69a3      	ldr	r3, [r4, #24]
 800f762:	60a3      	str	r3, [r4, #8]
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	0719      	lsls	r1, r3, #28
 800f768:	d529      	bpl.n	800f7be <__swbuf_r+0x70>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	b33b      	cbz	r3, 800f7be <__swbuf_r+0x70>
 800f76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f772:	b2f6      	uxtb	r6, r6
 800f774:	049a      	lsls	r2, r3, #18
 800f776:	4637      	mov	r7, r6
 800f778:	d52a      	bpl.n	800f7d0 <__swbuf_r+0x82>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	6920      	ldr	r0, [r4, #16]
 800f77e:	1a18      	subs	r0, r3, r0
 800f780:	6963      	ldr	r3, [r4, #20]
 800f782:	4283      	cmp	r3, r0
 800f784:	dc04      	bgt.n	800f790 <__swbuf_r+0x42>
 800f786:	4621      	mov	r1, r4
 800f788:	4628      	mov	r0, r5
 800f78a:	f7fa fc35 	bl	8009ff8 <_fflush_r>
 800f78e:	b9e0      	cbnz	r0, 800f7ca <__swbuf_r+0x7c>
 800f790:	68a3      	ldr	r3, [r4, #8]
 800f792:	3b01      	subs	r3, #1
 800f794:	60a3      	str	r3, [r4, #8]
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	6022      	str	r2, [r4, #0]
 800f79c:	701e      	strb	r6, [r3, #0]
 800f79e:	6962      	ldr	r2, [r4, #20]
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d004      	beq.n	800f7b0 <__swbuf_r+0x62>
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	07db      	lsls	r3, r3, #31
 800f7aa:	d506      	bpl.n	800f7ba <__swbuf_r+0x6c>
 800f7ac:	2e0a      	cmp	r6, #10
 800f7ae:	d104      	bne.n	800f7ba <__swbuf_r+0x6c>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f7fa fc20 	bl	8009ff8 <_fflush_r>
 800f7b8:	b938      	cbnz	r0, 800f7ca <__swbuf_r+0x7c>
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f7f9 fd3f 	bl	8009244 <__swsetup_r>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d0d1      	beq.n	800f76e <__swbuf_r+0x20>
 800f7ca:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ce:	e7f4      	b.n	800f7ba <__swbuf_r+0x6c>
 800f7d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f7d4:	81a3      	strh	r3, [r4, #12]
 800f7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7dc:	6663      	str	r3, [r4, #100]	; 0x64
 800f7de:	e7cc      	b.n	800f77a <__swbuf_r+0x2c>

0800f7e0 <_wcrtomb_r>:
 800f7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7e2:	4c09      	ldr	r4, [pc, #36]	; (800f808 <_wcrtomb_r+0x28>)
 800f7e4:	b085      	sub	sp, #20
 800f7e6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	461e      	mov	r6, r3
 800f7ee:	b909      	cbnz	r1, 800f7f4 <_wcrtomb_r+0x14>
 800f7f0:	460a      	mov	r2, r1
 800f7f2:	a901      	add	r1, sp, #4
 800f7f4:	47b8      	blx	r7
 800f7f6:	1c43      	adds	r3, r0, #1
 800f7f8:	bf01      	itttt	eq
 800f7fa:	2300      	moveq	r3, #0
 800f7fc:	6033      	streq	r3, [r6, #0]
 800f7fe:	238a      	moveq	r3, #138	; 0x8a
 800f800:	602b      	streq	r3, [r5, #0]
 800f802:	b005      	add	sp, #20
 800f804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f806:	bf00      	nop
 800f808:	2000043c 	.word	0x2000043c

0800f80c <abort>:
 800f80c:	b508      	push	{r3, lr}
 800f80e:	2006      	movs	r0, #6
 800f810:	f000 f82c 	bl	800f86c <raise>
 800f814:	2001      	movs	r0, #1
 800f816:	f000 fb4f 	bl	800feb8 <_exit>

0800f81a <_raise_r>:
 800f81a:	291f      	cmp	r1, #31
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4604      	mov	r4, r0
 800f820:	460d      	mov	r5, r1
 800f822:	d904      	bls.n	800f82e <_raise_r+0x14>
 800f824:	2316      	movs	r3, #22
 800f826:	6003      	str	r3, [r0, #0]
 800f828:	f04f 30ff 	mov.w	r0, #4294967295
 800f82c:	bd38      	pop	{r3, r4, r5, pc}
 800f82e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800f832:	b112      	cbz	r2, 800f83a <_raise_r+0x20>
 800f834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f838:	b94b      	cbnz	r3, 800f84e <_raise_r+0x34>
 800f83a:	4620      	mov	r0, r4
 800f83c:	f000 f830 	bl	800f8a0 <_getpid_r>
 800f840:	462a      	mov	r2, r5
 800f842:	4601      	mov	r1, r0
 800f844:	4620      	mov	r0, r4
 800f846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f84a:	f000 b817 	b.w	800f87c <_kill_r>
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d00a      	beq.n	800f868 <_raise_r+0x4e>
 800f852:	1c59      	adds	r1, r3, #1
 800f854:	d103      	bne.n	800f85e <_raise_r+0x44>
 800f856:	2316      	movs	r3, #22
 800f858:	6003      	str	r3, [r0, #0]
 800f85a:	2001      	movs	r0, #1
 800f85c:	e7e6      	b.n	800f82c <_raise_r+0x12>
 800f85e:	2400      	movs	r4, #0
 800f860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f864:	4628      	mov	r0, r5
 800f866:	4798      	blx	r3
 800f868:	2000      	movs	r0, #0
 800f86a:	e7df      	b.n	800f82c <_raise_r+0x12>

0800f86c <raise>:
 800f86c:	4b02      	ldr	r3, [pc, #8]	; (800f878 <raise+0xc>)
 800f86e:	4601      	mov	r1, r0
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f7ff bfd2 	b.w	800f81a <_raise_r>
 800f876:	bf00      	nop
 800f878:	2000000c 	.word	0x2000000c

0800f87c <_kill_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4d07      	ldr	r5, [pc, #28]	; (800f89c <_kill_r+0x20>)
 800f880:	2300      	movs	r3, #0
 800f882:	4604      	mov	r4, r0
 800f884:	4608      	mov	r0, r1
 800f886:	4611      	mov	r1, r2
 800f888:	602b      	str	r3, [r5, #0]
 800f88a:	f000 fb0d 	bl	800fea8 <_kill>
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	d102      	bne.n	800f898 <_kill_r+0x1c>
 800f892:	682b      	ldr	r3, [r5, #0]
 800f894:	b103      	cbz	r3, 800f898 <_kill_r+0x1c>
 800f896:	6023      	str	r3, [r4, #0]
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	bf00      	nop
 800f89c:	20000b44 	.word	0x20000b44

0800f8a0 <_getpid_r>:
 800f8a0:	f000 bafa 	b.w	800fe98 <_getpid>

0800f8a4 <checkint>:
 800f8a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f8a8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	b570      	push	{r4, r5, r6, lr}
 800f8b0:	dd2a      	ble.n	800f908 <checkint+0x64>
 800f8b2:	f240 4333 	movw	r3, #1075	; 0x433
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	dc24      	bgt.n	800f904 <checkint+0x60>
 800f8ba:	1a9b      	subs	r3, r3, r2
 800f8bc:	f1a3 0620 	sub.w	r6, r3, #32
 800f8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8c4:	fa02 f403 	lsl.w	r4, r2, r3
 800f8c8:	fa02 f606 	lsl.w	r6, r2, r6
 800f8cc:	f1c3 0520 	rsb	r5, r3, #32
 800f8d0:	fa22 f505 	lsr.w	r5, r2, r5
 800f8d4:	4334      	orrs	r4, r6
 800f8d6:	432c      	orrs	r4, r5
 800f8d8:	409a      	lsls	r2, r3
 800f8da:	ea20 0202 	bic.w	r2, r0, r2
 800f8de:	ea21 0404 	bic.w	r4, r1, r4
 800f8e2:	4322      	orrs	r2, r4
 800f8e4:	f1a3 0420 	sub.w	r4, r3, #32
 800f8e8:	f1c3 0220 	rsb	r2, r3, #32
 800f8ec:	d10c      	bne.n	800f908 <checkint+0x64>
 800f8ee:	40d8      	lsrs	r0, r3
 800f8f0:	fa01 f302 	lsl.w	r3, r1, r2
 800f8f4:	4318      	orrs	r0, r3
 800f8f6:	40e1      	lsrs	r1, r4
 800f8f8:	4308      	orrs	r0, r1
 800f8fa:	f000 0001 	and.w	r0, r0, #1
 800f8fe:	f1d0 0002 	rsbs	r0, r0, #2
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	2002      	movs	r0, #2
 800f906:	e7fc      	b.n	800f902 <checkint+0x5e>
 800f908:	2000      	movs	r0, #0
 800f90a:	e7fa      	b.n	800f902 <checkint+0x5e>
 800f90c:	0000      	movs	r0, r0
	...

0800f910 <pow>:
 800f910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f914:	ee10 4a90 	vmov	r4, s1
 800f918:	ed2d 8b0a 	vpush	{d8-d12}
 800f91c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800f920:	ee11 7a90 	vmov	r7, s3
 800f924:	f10a 32ff 	add.w	r2, sl, #4294967295
 800f928:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800f92c:	429a      	cmp	r2, r3
 800f92e:	ee10 6a10 	vmov	r6, s0
 800f932:	ee11 0a10 	vmov	r0, s2
 800f936:	b086      	sub	sp, #24
 800f938:	46d4      	mov	ip, sl
 800f93a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800f93e:	d806      	bhi.n	800f94e <pow+0x3e>
 800f940:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800f944:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800f948:	2b7f      	cmp	r3, #127	; 0x7f
 800f94a:	f240 8156 	bls.w	800fbfa <pow+0x2ea>
 800f94e:	1802      	adds	r2, r0, r0
 800f950:	eb47 0107 	adc.w	r1, r7, r7
 800f954:	f06f 0e01 	mvn.w	lr, #1
 800f958:	f112 39ff 	adds.w	r9, r2, #4294967295
 800f95c:	f141 38ff 	adc.w	r8, r1, #4294967295
 800f960:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800f964:	45ce      	cmp	lr, r9
 800f966:	eb73 0808 	sbcs.w	r8, r3, r8
 800f96a:	d23f      	bcs.n	800f9ec <pow+0xdc>
 800f96c:	ea52 0301 	orrs.w	r3, r2, r1
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	d10c      	bne.n	800f990 <pow+0x80>
 800f976:	19b6      	adds	r6, r6, r6
 800f978:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800f97c:	4164      	adcs	r4, r4
 800f97e:	42b3      	cmp	r3, r6
 800f980:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f984:	41a3      	sbcs	r3, r4
 800f986:	f0c0 808c 	bcc.w	800faa2 <pow+0x192>
 800f98a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f98e:	e028      	b.n	800f9e2 <pow+0xd2>
 800f990:	4da3      	ldr	r5, [pc, #652]	; (800fc20 <pow+0x310>)
 800f992:	42ac      	cmp	r4, r5
 800f994:	bf08      	it	eq
 800f996:	429e      	cmpeq	r6, r3
 800f998:	d107      	bne.n	800f9aa <pow+0x9a>
 800f99a:	1800      	adds	r0, r0, r0
 800f99c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800f9a0:	417f      	adcs	r7, r7
 800f9a2:	4283      	cmp	r3, r0
 800f9a4:	4b9f      	ldr	r3, [pc, #636]	; (800fc24 <pow+0x314>)
 800f9a6:	41bb      	sbcs	r3, r7
 800f9a8:	e7ed      	b.n	800f986 <pow+0x76>
 800f9aa:	19b6      	adds	r6, r6, r6
 800f9ac:	489e      	ldr	r0, [pc, #632]	; (800fc28 <pow+0x318>)
 800f9ae:	4164      	adcs	r4, r4
 800f9b0:	42b3      	cmp	r3, r6
 800f9b2:	eb70 0504 	sbcs.w	r5, r0, r4
 800f9b6:	d374      	bcc.n	800faa2 <pow+0x192>
 800f9b8:	4281      	cmp	r1, r0
 800f9ba:	bf08      	it	eq
 800f9bc:	429a      	cmpeq	r2, r3
 800f9be:	d170      	bne.n	800faa2 <pow+0x192>
 800f9c0:	4a9a      	ldr	r2, [pc, #616]	; (800fc2c <pow+0x31c>)
 800f9c2:	4294      	cmp	r4, r2
 800f9c4:	bf08      	it	eq
 800f9c6:	429e      	cmpeq	r6, r3
 800f9c8:	d0df      	beq.n	800f98a <pow+0x7a>
 800f9ca:	4294      	cmp	r4, r2
 800f9cc:	ea6f 0707 	mvn.w	r7, r7
 800f9d0:	bf34      	ite	cc
 800f9d2:	2400      	movcc	r4, #0
 800f9d4:	2401      	movcs	r4, #1
 800f9d6:	0fff      	lsrs	r7, r7, #31
 800f9d8:	42bc      	cmp	r4, r7
 800f9da:	f040 81d9 	bne.w	800fd90 <pow+0x480>
 800f9de:	ee21 0b01 	vmul.f64	d0, d1, d1
 800f9e2:	b006      	add	sp, #24
 800f9e4:	ecbd 8b0a 	vpop	{d8-d12}
 800f9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ec:	eb16 0806 	adds.w	r8, r6, r6
 800f9f0:	eb44 0904 	adc.w	r9, r4, r4
 800f9f4:	f118 31ff 	adds.w	r1, r8, #4294967295
 800f9f8:	f169 0200 	sbc.w	r2, r9, #0
 800f9fc:	458e      	cmp	lr, r1
 800f9fe:	4193      	sbcs	r3, r2
 800fa00:	d223      	bcs.n	800fa4a <pow+0x13a>
 800fa02:	ee20 0b00 	vmul.f64	d0, d0, d0
 800fa06:	2c00      	cmp	r4, #0
 800fa08:	da12      	bge.n	800fa30 <pow+0x120>
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	f7ff ff4a 	bl	800f8a4 <checkint>
 800fa10:	2801      	cmp	r0, #1
 800fa12:	d10d      	bne.n	800fa30 <pow+0x120>
 800fa14:	eeb1 0b40 	vneg.f64	d0, d0
 800fa18:	ea58 0309 	orrs.w	r3, r8, r9
 800fa1c:	d10a      	bne.n	800fa34 <pow+0x124>
 800fa1e:	2f00      	cmp	r7, #0
 800fa20:	dadf      	bge.n	800f9e2 <pow+0xd2>
 800fa22:	b006      	add	sp, #24
 800fa24:	ecbd 8b0a 	vpop	{d8-d12}
 800fa28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa2c:	f000 b9f0 	b.w	800fe10 <__math_divzero>
 800fa30:	2000      	movs	r0, #0
 800fa32:	e7f1      	b.n	800fa18 <pow+0x108>
 800fa34:	2f00      	cmp	r7, #0
 800fa36:	dad4      	bge.n	800f9e2 <pow+0xd2>
 800fa38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fa3c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800fa40:	ed8d 7b00 	vstr	d7, [sp]
 800fa44:	ed9d 0b00 	vldr	d0, [sp]
 800fa48:	e7cb      	b.n	800f9e2 <pow+0xd2>
 800fa4a:	2c00      	cmp	r4, #0
 800fa4c:	da2c      	bge.n	800faa8 <pow+0x198>
 800fa4e:	4639      	mov	r1, r7
 800fa50:	f7ff ff28 	bl	800f8a4 <checkint>
 800fa54:	b930      	cbnz	r0, 800fa64 <pow+0x154>
 800fa56:	b006      	add	sp, #24
 800fa58:	ecbd 8b0a 	vpop	{d8-d12}
 800fa5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa60:	f000 b9ee 	b.w	800fe40 <__math_invalid>
 800fa64:	2801      	cmp	r0, #1
 800fa66:	bf14      	ite	ne
 800fa68:	2000      	movne	r0, #0
 800fa6a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800fa6e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fa72:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800fa76:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800fa7a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800fa7e:	2b7f      	cmp	r3, #127	; 0x7f
 800fa80:	d92d      	bls.n	800fade <pow+0x1ce>
 800fa82:	4b67      	ldr	r3, [pc, #412]	; (800fc20 <pow+0x310>)
 800fa84:	2000      	movs	r0, #0
 800fa86:	429c      	cmp	r4, r3
 800fa88:	bf08      	it	eq
 800fa8a:	4286      	cmpeq	r6, r0
 800fa8c:	f43f af7d 	beq.w	800f98a <pow+0x7a>
 800fa90:	f240 31bd 	movw	r1, #957	; 0x3bd
 800fa94:	428a      	cmp	r2, r1
 800fa96:	d80c      	bhi.n	800fab2 <pow+0x1a2>
 800fa98:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fa9c:	42b0      	cmp	r0, r6
 800fa9e:	41a3      	sbcs	r3, r4
 800faa0:	d204      	bcs.n	800faac <pow+0x19c>
 800faa2:	ee31 0b00 	vadd.f64	d0, d1, d0
 800faa6:	e79c      	b.n	800f9e2 <pow+0xd2>
 800faa8:	2000      	movs	r0, #0
 800faaa:	e7e4      	b.n	800fa76 <pow+0x166>
 800faac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fab0:	e797      	b.n	800f9e2 <pow+0xd2>
 800fab2:	2e01      	cmp	r6, #1
 800fab4:	eb74 0303 	sbcs.w	r3, r4, r3
 800fab8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fabc:	bf34      	ite	cc
 800fabe:	2301      	movcc	r3, #1
 800fac0:	2300      	movcs	r3, #0
 800fac2:	4295      	cmp	r5, r2
 800fac4:	bf8c      	ite	hi
 800fac6:	2500      	movhi	r5, #0
 800fac8:	2501      	movls	r5, #1
 800faca:	42ab      	cmp	r3, r5
 800facc:	f000 809d 	beq.w	800fc0a <pow+0x2fa>
 800fad0:	b006      	add	sp, #24
 800fad2:	ecbd 8b0a 	vpop	{d8-d12}
 800fad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fada:	f000 b991 	b.w	800fe00 <__math_oflow>
 800fade:	f1bc 0f00 	cmp.w	ip, #0
 800fae2:	d10b      	bne.n	800fafc <pow+0x1ec>
 800fae4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800fc18 <pow+0x308>
 800fae8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800faec:	ec53 2b17 	vmov	r2, r3, d7
 800faf0:	ee17 6a10 	vmov	r6, s14
 800faf4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800faf8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800fafc:	4b4c      	ldr	r3, [pc, #304]	; (800fc30 <pow+0x320>)
 800fafe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800fb02:	4423      	add	r3, r4
 800fb04:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800fb08:	1519      	asrs	r1, r3, #20
 800fb0a:	0d1b      	lsrs	r3, r3, #20
 800fb0c:	051b      	lsls	r3, r3, #20
 800fb0e:	eba4 0903 	sub.w	r9, r4, r3
 800fb12:	4b48      	ldr	r3, [pc, #288]	; (800fc34 <pow+0x324>)
 800fb14:	ee04 1a10 	vmov	s8, r1
 800fb18:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800fb1c:	f1b6 0800 	subs.w	r8, r6, #0
 800fb20:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800fb24:	ec49 8b15 	vmov	d5, r8, r9
 800fb28:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800fb2c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800fb30:	ed93 7b00 	vldr	d7, [r3]
 800fb34:	ed93 5b02 	vldr	d5, [r3, #8]
 800fb38:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800fb3c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800fb40:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800fb44:	ee36 ab02 	vadd.f64	d10, d6, d2
 800fb48:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800fb4c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fb50:	ed93 5b04 	vldr	d5, [r3, #16]
 800fb54:	ee32 2b06 	vadd.f64	d2, d2, d6
 800fb58:	ee37 7b02 	vadd.f64	d7, d7, d2
 800fb5c:	ee26 5b05 	vmul.f64	d5, d6, d5
 800fb60:	ed93 4b08 	vldr	d4, [r3, #32]
 800fb64:	ee26 0b05 	vmul.f64	d0, d6, d5
 800fb68:	eeb0 9b40 	vmov.f64	d9, d0
 800fb6c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800fb70:	ed93 5b06 	vldr	d5, [r3, #24]
 800fb74:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800fb78:	ee26 bb00 	vmul.f64	d11, d6, d0
 800fb7c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800fb80:	eea6 5b04 	vfma.f64	d5, d6, d4
 800fb84:	ee3a ab48 	vsub.f64	d10, d10, d8
 800fb88:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800fb8c:	ee37 9b09 	vadd.f64	d9, d7, d9
 800fb90:	ee3a ab00 	vadd.f64	d10, d10, d0
 800fb94:	eea6 4b03 	vfma.f64	d4, d6, d3
 800fb98:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800fb9c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800fba0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800fba4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800fba8:	eea0 4b03 	vfma.f64	d4, d0, d3
 800fbac:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fbb0:	eeab ab05 	vfma.f64	d10, d11, d5
 800fbb4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800fbb8:	ee21 7b06 	vmul.f64	d7, d1, d6
 800fbbc:	ee17 3a90 	vmov	r3, s15
 800fbc0:	eeb0 5b47 	vmov.f64	d5, d7
 800fbc4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800fbc8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800fbcc:	18b2      	adds	r2, r6, r2
 800fbce:	2a3e      	cmp	r2, #62	; 0x3e
 800fbd0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800fbd4:	ee38 8b46 	vsub.f64	d8, d8, d6
 800fbd8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800fbdc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800fbe0:	d92b      	bls.n	800fc3a <pow+0x32a>
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	da0b      	bge.n	800fbfe <pow+0x2ee>
 800fbe6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fbea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	f43f aef7 	beq.w	800f9e2 <pow+0xd2>
 800fbf4:	eeb1 0b40 	vneg.f64	d0, d0
 800fbf8:	e6f3      	b.n	800f9e2 <pow+0xd2>
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	e77e      	b.n	800fafc <pow+0x1ec>
 800fbfe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800fc02:	d919      	bls.n	800fc38 <pow+0x328>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f6bf af63 	bge.w	800fad0 <pow+0x1c0>
 800fc0a:	b006      	add	sp, #24
 800fc0c:	ecbd 8b0a 	vpop	{d8-d12}
 800fc10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc14:	f000 b8ec 	b.w	800fdf0 <__math_uflow>
 800fc18:	00000000 	.word	0x00000000
 800fc1c:	43300000 	.word	0x43300000
 800fc20:	3ff00000 	.word	0x3ff00000
 800fc24:	fff00000 	.word	0xfff00000
 800fc28:	ffe00000 	.word	0xffe00000
 800fc2c:	7fe00000 	.word	0x7fe00000
 800fc30:	c0196aab 	.word	0xc0196aab
 800fc34:	080111e8 	.word	0x080111e8
 800fc38:	2600      	movs	r6, #0
 800fc3a:	495d      	ldr	r1, [pc, #372]	; (800fdb0 <pow+0x4a0>)
 800fc3c:	ed91 4b02 	vldr	d4, [r1, #8]
 800fc40:	ed91 3b00 	vldr	d3, [r1]
 800fc44:	eeb0 6b44 	vmov.f64	d6, d4
 800fc48:	eea7 6b03 	vfma.f64	d6, d7, d3
 800fc4c:	ee16 5a10 	vmov	r5, s12
 800fc50:	ee36 6b44 	vsub.f64	d6, d6, d4
 800fc54:	ed91 4b04 	vldr	d4, [r1, #16]
 800fc58:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800fc5c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800fc60:	eeb0 0b47 	vmov.f64	d0, d7
 800fc64:	ed91 7b06 	vldr	d7, [r1, #24]
 800fc68:	18dc      	adds	r4, r3, r3
 800fc6a:	f104 030f 	add.w	r3, r4, #15
 800fc6e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800fc72:	eea6 0b07 	vfma.f64	d0, d6, d7
 800fc76:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800fc7a:	ee35 0b00 	vadd.f64	d0, d5, d0
 800fc7e:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fc82:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800fc86:	ed91 5b08 	vldr	d5, [r1, #32]
 800fc8a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800fc8e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800fc92:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fc96:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800fc9a:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fc9e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800fca2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800fca6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800fcaa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800fcae:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fcb2:	1940      	adds	r0, r0, r5
 800fcb4:	2700      	movs	r7, #0
 800fcb6:	eb17 020c 	adds.w	r2, r7, ip
 800fcba:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800fcbe:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fcc2:	2e00      	cmp	r6, #0
 800fcc4:	d15f      	bne.n	800fd86 <pow+0x476>
 800fcc6:	42bd      	cmp	r5, r7
 800fcc8:	db13      	blt.n	800fcf2 <pow+0x3e2>
 800fcca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800fcce:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	ec41 0b10 	vmov	d0, r0, r1
 800fcd8:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fcdc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800fd98 <pow+0x488>
 800fce0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fce4:	b006      	add	sp, #24
 800fce6:	ecbd 8b0a 	vpop	{d8-d12}
 800fcea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcee:	f000 b8bf 	b.w	800fe70 <__math_check_oflow>
 800fcf2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800fcf6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800fcfa:	4610      	mov	r0, r2
 800fcfc:	ec41 0b15 	vmov	d5, r0, r1
 800fd00:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fd04:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fd08:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fd0c:	eeb0 3bc7 	vabs.f64	d3, d7
 800fd10:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd18:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800fda0 <pow+0x490>
 800fd1c:	d52a      	bpl.n	800fd74 <pow+0x464>
 800fd1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fd22:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fd2e:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fd32:	bf48      	it	mi
 800fd34:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fd38:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fd3c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fd40:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fd44:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd48:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fd4c:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fd50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd58:	d104      	bne.n	800fd64 <pow+0x454>
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fd60:	ec43 2b17 	vmov	d7, r2, r3
 800fd64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd68:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd6c:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fd70:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fd74:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fd78:	b006      	add	sp, #24
 800fd7a:	ecbd 8b0a 	vpop	{d8-d12}
 800fd7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd82:	f000 b86c 	b.w	800fe5e <__math_check_uflow>
 800fd86:	ec43 2b10 	vmov	d0, r2, r3
 800fd8a:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fd8e:	e628      	b.n	800f9e2 <pow+0xd2>
 800fd90:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800fda8 <pow+0x498>
 800fd94:	e625      	b.n	800f9e2 <pow+0xd2>
 800fd96:	bf00      	nop
 800fd98:	00000000 	.word	0x00000000
 800fd9c:	7f000000 	.word	0x7f000000
 800fda0:	00000000 	.word	0x00000000
 800fda4:	00100000 	.word	0x00100000
	...
 800fdb0:	08012230 	.word	0x08012230

0800fdb4 <with_errno>:
 800fdb4:	b513      	push	{r0, r1, r4, lr}
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	ed8d 0b00 	vstr	d0, [sp]
 800fdbc:	f7f6 fbc4 	bl	8006548 <__errno>
 800fdc0:	ed9d 0b00 	vldr	d0, [sp]
 800fdc4:	6004      	str	r4, [r0, #0]
 800fdc6:	b002      	add	sp, #8
 800fdc8:	bd10      	pop	{r4, pc}

0800fdca <xflow>:
 800fdca:	b082      	sub	sp, #8
 800fdcc:	b158      	cbz	r0, 800fde6 <xflow+0x1c>
 800fdce:	eeb1 7b40 	vneg.f64	d7, d0
 800fdd2:	ed8d 7b00 	vstr	d7, [sp]
 800fdd6:	ed9d 7b00 	vldr	d7, [sp]
 800fdda:	2022      	movs	r0, #34	; 0x22
 800fddc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fde0:	b002      	add	sp, #8
 800fde2:	f7ff bfe7 	b.w	800fdb4 <with_errno>
 800fde6:	eeb0 7b40 	vmov.f64	d7, d0
 800fdea:	e7f2      	b.n	800fdd2 <xflow+0x8>
 800fdec:	0000      	movs	r0, r0
	...

0800fdf0 <__math_uflow>:
 800fdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fdf8 <__math_uflow+0x8>
 800fdf4:	f7ff bfe9 	b.w	800fdca <xflow>
 800fdf8:	00000000 	.word	0x00000000
 800fdfc:	10000000 	.word	0x10000000

0800fe00 <__math_oflow>:
 800fe00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe08 <__math_oflow+0x8>
 800fe04:	f7ff bfe1 	b.w	800fdca <xflow>
 800fe08:	00000000 	.word	0x00000000
 800fe0c:	70000000 	.word	0x70000000

0800fe10 <__math_divzero>:
 800fe10:	b082      	sub	sp, #8
 800fe12:	2800      	cmp	r0, #0
 800fe14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fe18:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800fe1c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800fe20:	ed8d 7b00 	vstr	d7, [sp]
 800fe24:	ed9d 0b00 	vldr	d0, [sp]
 800fe28:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800fe38 <__math_divzero+0x28>
 800fe2c:	2022      	movs	r0, #34	; 0x22
 800fe2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800fe32:	b002      	add	sp, #8
 800fe34:	f7ff bfbe 	b.w	800fdb4 <with_errno>
	...

0800fe40 <__math_invalid>:
 800fe40:	eeb0 7b40 	vmov.f64	d7, d0
 800fe44:	eeb4 7b47 	vcmp.f64	d7, d7
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800fe50:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800fe54:	d602      	bvs.n	800fe5c <__math_invalid+0x1c>
 800fe56:	2021      	movs	r0, #33	; 0x21
 800fe58:	f7ff bfac 	b.w	800fdb4 <with_errno>
 800fe5c:	4770      	bx	lr

0800fe5e <__math_check_uflow>:
 800fe5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fe62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe66:	d102      	bne.n	800fe6e <__math_check_uflow+0x10>
 800fe68:	2022      	movs	r0, #34	; 0x22
 800fe6a:	f7ff bfa3 	b.w	800fdb4 <with_errno>
 800fe6e:	4770      	bx	lr

0800fe70 <__math_check_oflow>:
 800fe70:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800fe90 <__math_check_oflow+0x20>
 800fe74:	eeb0 7bc0 	vabs.f64	d7, d0
 800fe78:	eeb4 7b46 	vcmp.f64	d7, d6
 800fe7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe80:	dd02      	ble.n	800fe88 <__math_check_oflow+0x18>
 800fe82:	2022      	movs	r0, #34	; 0x22
 800fe84:	f7ff bf96 	b.w	800fdb4 <with_errno>
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	f3af 8000 	nop.w
 800fe90:	ffffffff 	.word	0xffffffff
 800fe94:	7fefffff 	.word	0x7fefffff

0800fe98 <_getpid>:
 800fe98:	4b02      	ldr	r3, [pc, #8]	; (800fea4 <_getpid+0xc>)
 800fe9a:	2258      	movs	r2, #88	; 0x58
 800fe9c:	601a      	str	r2, [r3, #0]
 800fe9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fea2:	4770      	bx	lr
 800fea4:	20000b44 	.word	0x20000b44

0800fea8 <_kill>:
 800fea8:	4b02      	ldr	r3, [pc, #8]	; (800feb4 <_kill+0xc>)
 800feaa:	2258      	movs	r2, #88	; 0x58
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	f04f 30ff 	mov.w	r0, #4294967295
 800feb2:	4770      	bx	lr
 800feb4:	20000b44 	.word	0x20000b44

0800feb8 <_exit>:
 800feb8:	e7fe      	b.n	800feb8 <_exit>
	...

0800febc <_init>:
 800febc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febe:	bf00      	nop
 800fec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec2:	bc08      	pop	{r3}
 800fec4:	469e      	mov	lr, r3
 800fec6:	4770      	bx	lr

0800fec8 <_fini>:
 800fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feca:	bf00      	nop
 800fecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fece:	bc08      	pop	{r3}
 800fed0:	469e      	mov	lr, r3
 800fed2:	4770      	bx	lr
