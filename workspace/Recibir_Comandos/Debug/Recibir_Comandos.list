
Recibir_Comandos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf8  08004bf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004c70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004c70  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001019e  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e10  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00032d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027524  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103f9  00000000  00000000  0005aecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd9d7  00000000  00000000  0006b2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  00168cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ac4 	.word	0x08004ac4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004ac4 	.word	0x08004ac4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0a8      	sub	sp, #160	; 0xa0
 80005f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fa:	f000 fcd6 	bl	8000faa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fe:	f000 f977 	bl	80008f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000602:	f000 fa63 	bl	8000acc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000606:	f000 fa31 	bl	8000a6c <MX_USART3_UART_Init>
	MX_TIM2_Init();
 800060a:	f000 f9e1 	bl	80009d0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	RetargetInit(&huart3);
 800060e:	48ad      	ldr	r0, [pc, #692]	; (80008c4 <main+0x2d0>)
 8000610:	f000 fac8 	bl	8000ba4 <RetargetInit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t rx[2]={0};
 8000614:	2300      	movs	r3, #0
 8000616:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	uint8_t buff[100]={0};
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
 800061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000622:	2260      	movs	r2, #96	; 0x60
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 f9e8 	bl	80039fc <memset>

	char saludo[] = "jhan";
 800062c:	4aa6      	ldr	r2, [pc, #664]	; (80008c8 <main+0x2d4>)
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000636:	6018      	str	r0, [r3, #0]
 8000638:	3304      	adds	r3, #4
 800063a:	7019      	strb	r1, [r3, #0]
	char help[] = "help";
 800063c:	4aa3      	ldr	r2, [pc, #652]	; (80008cc <main+0x2d8>)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	3304      	adds	r3, #4
 800064a:	7019      	strb	r1, [r3, #0]
	char temp[] = "temp";
 800064c:	4aa0      	ldr	r2, [pc, #640]	; (80008d0 <main+0x2dc>)
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000656:	6018      	str	r0, [r3, #0]
 8000658:	3304      	adds	r3, #4
 800065a:	7019      	strb	r1, [r3, #0]
	char led[] = "led";
 800065c:	4b9d      	ldr	r3, [pc, #628]	; (80008d4 <main+0x2e0>)
 800065e:	607b      	str	r3, [r7, #4]
	uint8_t i = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

			  }
		  } */

//////////////////////////RECIBIMOS EL TECLADO/////////////////////////
				while(rx[0] != 0x0A){
 8000666:	e014      	b.n	8000692 <main+0x9e>
					  HAL_UART_Receive(&huart3, rx, 1, HAL_MAX_DELAY);
 8000668:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	2201      	movs	r2, #1
 8000672:	4894      	ldr	r0, [pc, #592]	; (80008c4 <main+0x2d0>)
 8000674:	f002 fca9 	bl	8002fca <HAL_UART_Receive>
					  buff[i]=rx[0];
 8000678:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800067c:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000680:	33a0      	adds	r3, #160	; 0xa0
 8000682:	443b      	add	r3, r7
 8000684:	f803 2c80 	strb.w	r2, [r3, #-128]
					  i++;
 8000688:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800068c:	3301      	adds	r3, #1
 800068e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				while(rx[0] != 0x0A){
 8000692:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000696:	2b0a      	cmp	r3, #10
 8000698:	d1e6      	bne.n	8000668 <main+0x74>
				  }
//////////////////////////TRANSMITIMOS LO QUE RECIBIMOS DEL TECLADO, SOLO PARA PROBAR, LUEGO SE QUITA//////
				  HAL_UART_Transmit(&huart3, buff, i, HAL_MAX_DELAY);
 800069a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f107 0120 	add.w	r1, r7, #32
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	4886      	ldr	r0, [pc, #536]	; (80008c4 <main+0x2d0>)
 80006aa:	f002 fc0b 	bl	8002ec4 <HAL_UART_Transmit>
				  i=0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  rx[0]=0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
//////////////////////DETERMINAMOS QUÉ COMANDO RECIBIMOS////////////////
				  /////FALTA PONER LA PARTE DE PROCESAR EL PARÁMETRO
				  ///// ES SOLO PARA TENER LISTA LA PARTE DE TERMINAR COMANDOS
				  if(!memcmp(buff,saludo,strlen(saludo))){
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fdbe 	bl	8000240 <strlen>
 80006c4:	4602      	mov	r2, r0
 80006c6:	f107 0118 	add.w	r1, r7, #24
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f984 	bl	80039dc <memcmp>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d12b      	bne.n	8000732 <main+0x13e>

					  printf("es saludo\n\r");
 80006da:	487f      	ldr	r0, [pc, #508]	; (80008d8 <main+0x2e4>)
 80006dc:	f003 f996 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen(saludo));
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fdab 	bl	8000240 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4619      	mov	r1, r3
 80006ee:	487b      	ldr	r0, [pc, #492]	; (80008dc <main+0x2e8>)
 80006f0:	f003 f98c 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fda1 	bl	8000240 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	4619      	mov	r1, r3
 8000702:	4876      	ldr	r0, [pc, #472]	; (80008dc <main+0x2e8>)
 8000704:	f003 f982 	bl	8003a0c <iprintf>

					  for(int w = 0; w<sizeof(buff); w++){
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800070e:	e00b      	b.n	8000728 <main+0x134>
					 				  		  			  buff[w]=0;}
 8000710:	f107 0220 	add.w	r2, r7, #32
 8000714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 800071e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000722:	3301      	adds	r3, #1
 8000724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800072c:	2b63      	cmp	r3, #99	; 0x63
 800072e:	d9ef      	bls.n	8000710 <main+0x11c>
 8000730:	e7af      	b.n	8000692 <main+0x9e>
				  }


				  else if(!memcmp(buff,help,strlen(help))){
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd82 	bl	8000240 <strlen>
 800073c:	4602      	mov	r2, r0
 800073e:	f107 0110 	add.w	r1, r7, #16
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4618      	mov	r0, r3
 8000748:	f003 f948 	bl	80039dc <memcmp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d12b      	bne.n	80007aa <main+0x1b6>
					  printf("es help\n\r");
 8000752:	4863      	ldr	r0, [pc, #396]	; (80008e0 <main+0x2ec>)
 8000754:	f003 f95a 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen(help));
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd6f 	bl	8000240 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	4619      	mov	r1, r3
 8000766:	485d      	ldr	r0, [pc, #372]	; (80008dc <main+0x2e8>)
 8000768:	f003 f950 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd65 	bl	8000240 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	4619      	mov	r1, r3
 800077a:	4858      	ldr	r0, [pc, #352]	; (80008dc <main+0x2e8>)
 800077c:	f003 f946 	bl	8003a0c <iprintf>

					  for(int w = 0; w<sizeof(buff); w++){
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000786:	e00b      	b.n	80007a0 <main+0x1ac>
					  					 			buff[w]=0;}
 8000788:	f107 0220 	add.w	r2, r7, #32
 800078c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000790:	4413      	add	r3, r2
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007a4:	2b63      	cmp	r3, #99	; 0x63
 80007a6:	d9ef      	bls.n	8000788 <main+0x194>
 80007a8:	e773      	b.n	8000692 <main+0x9e>

				  }

				  else if(!memcmp(buff,temp,strlen(temp))){
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd46 	bl	8000240 <strlen>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f107 0108 	add.w	r1, r7, #8
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 f90c 	bl	80039dc <memcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d12b      	bne.n	8000822 <main+0x22e>
					  printf("es temp\n\r");
 80007ca:	4846      	ldr	r0, [pc, #280]	; (80008e4 <main+0x2f0>)
 80007cc:	f003 f91e 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen(temp));
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd33 	bl	8000240 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	483f      	ldr	r0, [pc, #252]	; (80008dc <main+0x2e8>)
 80007e0:	f003 f914 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd29 	bl	8000240 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	483a      	ldr	r0, [pc, #232]	; (80008dc <main+0x2e8>)
 80007f4:	f003 f90a 	bl	8003a0c <iprintf>

					  for(int w = 0; w<sizeof(buff); w++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007fe:	e00b      	b.n	8000818 <main+0x224>
													buff[w]=0;
 8000800:	f107 0220 	add.w	r2, r7, #32
 8000804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000808:	4413      	add	r3, r2
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 800080e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000812:	3301      	adds	r3, #1
 8000814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	d9ef      	bls.n	8000800 <main+0x20c>
 8000820:	e737      	b.n	8000692 <main+0x9e>

					  }

				  }

				  else if(!memcmp(buff,led,strlen(led))){
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fd0b 	bl	8000240 <strlen>
 800082a:	4602      	mov	r2, r0
 800082c:	1d39      	adds	r1, r7, #4
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4618      	mov	r0, r3
 8000834:	f003 f8d2 	bl	80039dc <memcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d12a      	bne.n	8000894 <main+0x2a0>
					  printf("es led\n\r");
 800083e:	482a      	ldr	r0, [pc, #168]	; (80008e8 <main+0x2f4>)
 8000840:	f003 f8e4 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen(led));
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcfa 	bl	8000240 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	4619      	mov	r1, r3
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <main+0x2e8>)
 8000852:	f003 f8db 	bl	8003a0c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcf0 	bl	8000240 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	4619      	mov	r1, r3
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <main+0x2e8>)
 8000866:	f003 f8d1 	bl	8003a0c <iprintf>

					  for(int w = 0; w<sizeof(buff); w++){
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000870:	e00b      	b.n	800088a <main+0x296>
												buff[w]=0;}
 8000872:	f107 0220 	add.w	r2, r7, #32
 8000876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000884:	3301      	adds	r3, #1
 8000886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800088a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800088e:	2b63      	cmp	r3, #99	; 0x63
 8000890:	d9ef      	bls.n	8000872 <main+0x27e>
 8000892:	e6fe      	b.n	8000692 <main+0x9e>

				  }

				  else{
					  printf("ningun comando\n\r");
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <main+0x2f8>)
 8000896:	f003 f8b9 	bl	8003a0c <iprintf>
					  for(int w = 0; w<sizeof(buff); w++){
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008a0:	e00b      	b.n	80008ba <main+0x2c6>
					 				  		  			  buff[w]=0;}
 80008a2:	f107 0220 	add.w	r2, r7, #32
 80008a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008aa:	4413      	add	r3, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 80008b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008b4:	3301      	adds	r3, #1
 80008b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008be:	2b63      	cmp	r3, #99	; 0x63
 80008c0:	d9ef      	bls.n	80008a2 <main+0x2ae>
				while(rx[0] != 0x0A){
 80008c2:	e6e6      	b.n	8000692 <main+0x9e>
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	08004b28 	.word	0x08004b28
 80008cc:	08004b30 	.word	0x08004b30
 80008d0:	08004b38 	.word	0x08004b38
 80008d4:	0064656c 	.word	0x0064656c
 80008d8:	08004adc 	.word	0x08004adc
 80008dc:	08004ae8 	.word	0x08004ae8
 80008e0:	08004af0 	.word	0x08004af0
 80008e4:	08004afc 	.word	0x08004afc
 80008e8:	08004b08 	.word	0x08004b08
 80008ec:	08004b14 	.word	0x08004b14

080008f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 f87c 	bl	80039fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <SystemClock_Config+0xd8>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <SystemClock_Config+0xd8>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <SystemClock_Config+0xd8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <SystemClock_Config+0xdc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <SystemClock_Config+0xdc>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <SystemClock_Config+0xdc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800096c:	2302      	movs	r3, #2
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fe71 	bl	800165c <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000980:	f000 f90a 	bl	8000b98 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000984:	f000 fe1a 	bl	80015bc <HAL_PWREx_EnableOverDrive>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800098e:	f000 f903 	bl	8000b98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2103      	movs	r1, #3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f902 	bl	8001bb8 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xce>
	{
		Error_Handler();
 80009ba:	f000 f8ed 	bl	8000b98 <Error_Handler>
	}
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_TIM2_Init+0x98>)
 80009f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000-1;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_TIM2_Init+0x98>)
 80009f8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80009fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5000-1;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a06:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a0a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a1a:	f001 ff1b 	bl	8002854 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8000a24:	f000 f8b8 	bl	8000b98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a36:	f001 ff65 	bl	8002904 <HAL_TIM_ConfigClockSource>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000a40:	f000 f8aa 	bl	8000b98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_TIM2_Init+0x98>)
 8000a52:	f002 f95b 	bl	8002d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000a5c:	f000 f89c 	bl	8000b98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART3_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	f002 f9ba 	bl	8002e28 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000aba:	f000 f86d 	bl	8000b98 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d8 	.word	0x200000d8
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_GPIO_Init+0xc0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	4812      	ldr	r0, [pc, #72]	; (8000b90 <MX_GPIO_Init+0xc4>)
 8000b48:	f000 fd1e 	bl	8001588 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : btn_Pin */
	GPIO_InitStruct.Pin = btn_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_GPIO_Init+0xc8>)
 8000b62:	f000 fb65 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0xc4>)
 8000b7e:	f000 fb57 	bl	8001230 <HAL_GPIO_Init>

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800

08000b98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <RetargetInit+0x28>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <RetargetInit+0x2c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6898      	ldr	r0, [r3, #8]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2202      	movs	r2, #2
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f002 ff3d 	bl	8003a3c <setvbuf>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000160 	.word	0x20000160
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <_isatty>:

int _isatty(int fd) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db04      	blt.n	8000bec <_isatty+0x18>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	dc01      	bgt.n	8000bec <_isatty+0x18>
    return 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e005      	b.n	8000bf8 <_isatty+0x24>

  errno = EBADF;
 8000bec:	f002 fecc 	bl	8003988 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	601a      	str	r2, [r3, #0]
  return 0;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d002      	beq.n	8000c18 <_write+0x18>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d111      	bne.n	8000c3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <_write+0x54>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	f002 f94d 	bl	8002ec4 <HAL_UART_Transmit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <_write+0x38>
      return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	e008      	b.n	8000c4a <_write+0x4a>
    else
      return EIO;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e006      	b.n	8000c4a <_write+0x4a>
  }
  errno = EBADF;
 8000c3c:	f002 fea4 	bl	8003988 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2209      	movs	r2, #9
 8000c44:	601a      	str	r2, [r3, #0]
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000160 	.word	0x20000160

08000c58 <_close>:

int _close(int fd) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db04      	blt.n	8000c70 <_close+0x18>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	dc01      	bgt.n	8000c70 <_close+0x18>
    return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e006      	b.n	8000c7e <_close+0x26>

  errno = EBADF;
 8000c70:	f002 fe8a 	bl	8003988 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2209      	movs	r2, #9
 8000c78:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c92:	f002 fe79 	bl	8003988 <__errno>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2209      	movs	r2, #9
 8000c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d110      	bne.n	8000cdc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <_read+0x4c>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	f002 f980 	bl	8002fca <HAL_UART_Receive>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <_read+0x30>
      return 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e008      	b.n	8000cea <_read+0x42>
    else
      return EIO;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	e006      	b.n	8000cea <_read+0x42>
  }
  errno = EBADF;
 8000cdc:	f002 fe54 	bl	8003988 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2209      	movs	r2, #9
 8000ce4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000160 	.word	0x20000160

08000cf8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db08      	blt.n	8000d1a <_fstat+0x22>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc05      	bgt.n	8000d1a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d14:	605a      	str	r2, [r3, #4]
    return 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e005      	b.n	8000d26 <_fstat+0x2e>
  }

  errno = EBADF;
 8000d1a:	f002 fe35 	bl	8003988 <__errno>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2209      	movs	r2, #9
 8000d22:	601a      	str	r2, [r3, #0]
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d10b      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ae      	sub	sp, #184	; 0xb8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2290      	movs	r2, #144	; 0x90
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fe11 	bl	80039fc <memset>
  if(huart->Instance==USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d13c      	bne.n	8000e5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 f906 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfe:	f7ff fecb 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e5a:	f000 f9e9 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	37b8      	adds	r7, #184	; 0xb8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8b0 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f002 fd46 	bl	8003988 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20080000 	.word	0x20080000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000164 	.word	0x20000164
 8000f30:	20000180 	.word	0x20000180

08000f34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 fd05 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb33 	bl	80005f4 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f9c:	08004c00 	.word	0x08004c00
  ldr r2, =_sbss
 8000fa0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fa4:	2000017c 	.word	0x2000017c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>

08000faa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f90a 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f805 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff feb9 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f917 	bl	8001216 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f8ed 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000168 	.word	0x20000168

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000168 	.word	0x20000168

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0000 	.word	0x05fa0000

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff5c 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffb0 	bl	8001184 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e175      	b.n	800153c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8164 	bne.w	8001536 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_GPIO_Init+0x56>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80be 	beq.w	8001536 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_GPIO_Init+0x324>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_GPIO_Init+0x324>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_GPIO_Init+0x324>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013d2:	4a61      	ldr	r2, [pc, #388]	; (8001558 <HAL_GPIO_Init+0x328>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_Init+0x32c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d037      	beq.n	800146e <HAL_GPIO_Init+0x23e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_GPIO_Init+0x330>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0x23a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x334>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d02b      	beq.n	8001466 <HAL_GPIO_Init+0x236>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_Init+0x338>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d025      	beq.n	8001462 <HAL_GPIO_Init+0x232>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_GPIO_Init+0x33c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01f      	beq.n	800145e <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a53      	ldr	r2, [pc, #332]	; (8001570 <HAL_GPIO_Init+0x340>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0x22a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x344>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a51      	ldr	r2, [pc, #324]	; (8001578 <HAL_GPIO_Init+0x348>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a50      	ldr	r2, [pc, #320]	; (800157c <HAL_GPIO_Init+0x34c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x21a>
 8001446:	2309      	movs	r3, #9
 8001448:	e012      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800144a:	230a      	movs	r3, #10
 800144c:	e010      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800144e:	2308      	movs	r3, #8
 8001450:	e00e      	b.n	8001470 <HAL_GPIO_Init+0x240>
 8001452:	2307      	movs	r3, #7
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x240>
 8001456:	2306      	movs	r3, #6
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x240>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x240>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x240>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x328>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_GPIO_Init+0x354>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a34      	ldr	r2, [pc, #208]	; (8001584 <HAL_GPIO_Init+0x354>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_GPIO_Init+0x354>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_GPIO_Init+0x354>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x354>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_GPIO_Init+0x354>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_GPIO_Init+0x354>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <HAL_GPIO_Init+0x354>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f ae86 	bls.w	8001250 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40022000 	.word	0x40022000
 8001580:	40022400 	.word	0x40022400
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_PWREx_EnableOverDrive+0x98>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_PWREx_EnableOverDrive+0x98>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_PWREx_EnableOverDrive+0x98>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ea:	f7ff fd2f 	bl	800104c <HAL_GetTick>
 80015ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015f0:	e009      	b.n	8001606 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015f2:	f7ff fd2b 	bl	800104c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001600:	d901      	bls.n	8001606 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e022      	b.n	800164c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d1ee      	bne.n	80015f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800161a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001620:	f7ff fd14 	bl	800104c <HAL_GetTick>
 8001624:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001626:	e009      	b.n	800163c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001628:	f7ff fd10 	bl	800104c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001636:	d901      	bls.n	800163c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e007      	b.n	800164c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001648:	d1ee      	bne.n	8001628 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e29b      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	4b96      	ldr	r3, [pc, #600]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b04      	cmp	r3, #4
 800168a:	d00c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168c:	4b93      	ldr	r3, [pc, #588]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x62>
 8001698:	4b90      	ldr	r3, [pc, #576]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b8d      	ldr	r3, [pc, #564]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d06c      	beq.n	800178c <HAL_RCC_OscConfig+0x130>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d168      	bne.n	800178c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e275      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x7a>
 80016c8:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a83      	ldr	r2, [pc, #524]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e02e      	b.n	8001734 <HAL_RCC_OscConfig+0xd8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x9c>
 80016de:	4b7f      	ldr	r3, [pc, #508]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7e      	ldr	r2, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80016f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xd8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0xc0>
 8001702:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a75      	ldr	r2, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a72      	ldr	r2, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xd8>
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b6c      	ldr	r3, [pc, #432]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a6b      	ldr	r2, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc86 	bl	800104c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc82 	bl	800104c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e229      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xe8>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fc72 	bl	800104c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc6e 	bl	800104c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e215      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x110>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d069      	beq.n	800186e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x190>
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x17a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1e9      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	493d      	ldr	r1, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e040      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fc24 	bl	800104c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fc20 	bl	800104c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1c7      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4929      	ldr	r1, [pc, #164]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	e018      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fc00 	bl	800104c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fbfc 	bl	800104c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1a3      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d038      	beq.n	80018ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d019      	beq.n	80018b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fbdd 	bl	800104c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001896:	f7ff fbd9 	bl	800104c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e180      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80018aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x23a>
 80018b4:	e01a      	b.n	80018ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_RCC_OscConfig+0x280>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fbc3 	bl	800104c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fbbf 	bl	800104c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d903      	bls.n	80018e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e166      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
 80018dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a4 	beq.w	8001a42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10d      	bne.n	8001922 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a88      	ldr	r2, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <HAL_RCC_OscConfig+0x4d4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800192e:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x4d4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7f      	ldr	r2, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x4d4>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb87 	bl	800104c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fb83 	bl	800104c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e12a      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	4b76      	ldr	r3, [pc, #472]	; (8001b30 <HAL_RCC_OscConfig+0x4d4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x31a>
 8001968:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a6f      	ldr	r2, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	e02d      	b.n	80019d2 <HAL_RCC_OscConfig+0x376>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x33c>
 800197e:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a6a      	ldr	r2, [pc, #424]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a67      	ldr	r2, [pc, #412]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	e01c      	b.n	80019d2 <HAL_RCC_OscConfig+0x376>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x35e>
 80019a0:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a61      	ldr	r2, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	e00b      	b.n	80019d2 <HAL_RCC_OscConfig+0x376>
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	4a5b      	ldr	r2, [pc, #364]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6713      	str	r3, [r2, #112]	; 0x70
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fb37 	bl	800104c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fb33 	bl	800104c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0d8      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ee      	beq.n	80019e2 <HAL_RCC_OscConfig+0x386>
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb21 	bl	800104c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fb1d 	bl	800104c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0c2      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80ae 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d06d      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d14b      	bne.n	8001af8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff faee 	bl	800104c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff faea 	bl	800104c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e091      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	071b      	lsls	r3, r3, #28
 8001abe:	491b      	ldr	r1, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fabc 	bl	800104c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fab8 	bl	800104c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e05f      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
 8001af6:	e057      	b.n	8001ba8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff faa2 	bl	800104c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fa9e 	bl	800104c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e045      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4b0>
 8001b2a:	e03d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x54c>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_RCC_OscConfig+0x558>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d030      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d129      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d122      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d119      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d10f      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d0      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 020f 	bic.w	r2, r3, #15
 8001be6:	4965      	ldr	r1, [pc, #404]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b8      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	494d      	ldr	r1, [pc, #308]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d040      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d115      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e073      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06b      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4936      	ldr	r1, [pc, #216]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cac:	f7ff f9ce 	bl	800104c <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f9ca 	bl	800104c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e053      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d210      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e032      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4916      	ldr	r1, [pc, #88]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4a:	f000 f821 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	490a      	ldr	r1, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d5c:	5ccb      	ldrb	r3, [r1, r3]
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1d4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f92a 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08004b40 	.word	0x08004b40
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d94:	b094      	sub	sp, #80	; 0x50
 8001d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d00d      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	f200 80e1 	bhi.w	8001f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x3a>
 8001dc2:	e0db      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc8:	e0db      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dce:	e0d8      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de6:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	2200      	movs	r2, #0
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	0159      	lsls	r1, r3, #5
 8001e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e14:	0150      	lsls	r0, r2, #5
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	1a51      	subs	r1, r2, r1
 8001e1e:	6139      	str	r1, [r7, #16]
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb63 0301 	sbc.w	r3, r3, r1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e34:	4659      	mov	r1, fp
 8001e36:	018b      	lsls	r3, r1, #6
 8001e38:	4651      	mov	r1, sl
 8001e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3e:	4651      	mov	r1, sl
 8001e40:	018a      	lsls	r2, r1, #6
 8001e42:	4651      	mov	r1, sl
 8001e44:	ebb2 0801 	subs.w	r8, r2, r1
 8001e48:	4659      	mov	r1, fp
 8001e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	eb18 0303 	adds.w	r3, r8, r3
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	462b      	mov	r3, r5
 8001e70:	eb49 0303 	adc.w	r3, r9, r3
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e82:	4629      	mov	r1, r5
 8001e84:	024b      	lsls	r3, r1, #9
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	024a      	lsls	r2, r1, #9
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	2200      	movs	r2, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea0:	f7fe fa26 	bl	80002f0 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eac:	e058      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4611      	mov	r1, r2
 8001eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ec8:	4642      	mov	r2, r8
 8001eca:	464b      	mov	r3, r9
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0159      	lsls	r1, r3, #5
 8001ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eda:	0150      	lsls	r0, r2, #5
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f00:	ebb2 040a 	subs.w	r4, r2, sl
 8001f04:	eb63 050b 	sbc.w	r5, r3, fp
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	00eb      	lsls	r3, r5, #3
 8001f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f16:	00e2      	lsls	r2, r4, #3
 8001f18:	4614      	mov	r4, r2
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	18e3      	adds	r3, r4, r3
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	464b      	mov	r3, r9
 8001f24:	eb45 0303 	adc.w	r3, r5, r3
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f36:	4629      	mov	r1, r5
 8001f38:	028b      	lsls	r3, r1, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f40:	4621      	mov	r1, r4
 8001f42:	028a      	lsls	r2, r1, #10
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	61fa      	str	r2, [r7, #28]
 8001f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f54:	f7fe f9cc 	bl	80002f0 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3750      	adds	r7, #80	; 0x50
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08004b50 	.word	0x08004b50

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffdc 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0b5b      	lsrs	r3, r3, #13
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08004b50 	.word	0x08004b50

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800202c:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a68      	ldr	r2, [pc, #416]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	4964      	ldr	r1, [pc, #400]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d017      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	4959      	ldr	r1, [pc, #356]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d017      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	494a      	ldr	r1, [pc, #296]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 808b 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210c:	f7fe ff9e 	bl	800104c <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe ff9a 	bl	800104c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e38f      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d035      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d02e      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d114      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ff62 	bl	800104c <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe ff5e 	bl	800104c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e351      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ba:	d111      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	4901      	ldr	r1, [pc, #4]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
 80021d2:	e00b      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
 80021dc:	0ffffcff 	.word	0x0ffffcff
 80021e0:	4bac      	ldr	r3, [pc, #688]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4aab      	ldr	r2, [pc, #684]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	4ba9      	ldr	r3, [pc, #676]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	49a6      	ldr	r1, [pc, #664]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800220a:	4ba2      	ldr	r3, [pc, #648]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002210:	4aa0      	ldr	r2, [pc, #640]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800221a:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	499b      	ldr	r1, [pc, #620]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002238:	4b96      	ldr	r3, [pc, #600]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002246:	4993      	ldr	r1, [pc, #588]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800225a:	4b8e      	ldr	r3, [pc, #568]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002268:	498a      	ldr	r1, [pc, #552]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800227c:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228a:	4982      	ldr	r1, [pc, #520]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800229e:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4979      	ldr	r1, [pc, #484]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c0:	4b74      	ldr	r3, [pc, #464]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4971      	ldr	r1, [pc, #452]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e2:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f023 020c 	bic.w	r2, r3, #12
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	4968      	ldr	r1, [pc, #416]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002304:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4960      	ldr	r1, [pc, #384]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	4957      	ldr	r1, [pc, #348]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002348:	4b52      	ldr	r3, [pc, #328]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	494f      	ldr	r1, [pc, #316]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	4946      	ldr	r1, [pc, #280]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800238c:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	493e      	ldr	r1, [pc, #248]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023ae:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023bc:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023de:	492d      	ldr	r1, [pc, #180]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d011      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	4924      	ldr	r1, [pc, #144]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800240c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	4914      	ldr	r1, [pc, #80]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002464:	490b      	ldr	r1, [pc, #44]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00f      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	4902      	ldr	r1, [pc, #8]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002490:	e002      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024a4:	4b8a      	ldr	r3, [pc, #552]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	4986      	ldr	r1, [pc, #536]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024c8:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d8:	497d      	ldr	r1, [pc, #500]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d006      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80d6 	beq.w	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002500:	f7fe fda4 	bl	800104c <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002508:	f7fe fda0 	bl	800104c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e195      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800251a:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d021      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0e1b      	lsrs	r3, r3, #24
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	019a      	lsls	r2, r3, #6
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	071b      	lsls	r3, r3, #28
 800256e:	4958      	ldr	r1, [pc, #352]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02e      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a0:	d129      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b6:	0f1b      	lsrs	r3, r3, #28
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	019a      	lsls	r2, r3, #6
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	493e      	ldr	r1, [pc, #248]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e4:	f023 021f 	bic.w	r2, r3, #31
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	3b01      	subs	r3, #1
 80025ee:	4938      	ldr	r1, [pc, #224]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01d      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002608:	0e1b      	lsrs	r3, r3, #24
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002616:	0f1b      	lsrs	r3, r3, #28
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	019a      	lsls	r2, r3, #6
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	061b      	lsls	r3, r3, #24
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	071b      	lsls	r3, r3, #28
 8002636:	4926      	ldr	r1, [pc, #152]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d011      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	019a      	lsls	r2, r3, #6
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	491a      	ldr	r1, [pc, #104]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267a:	f7fe fce7 	bl	800104c <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002682:	f7fe fce3 	bl	800104c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	; 0x64
 800268e:	d901      	bls.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0d8      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f040 80ce 	bne.w	8002844 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fcca 	bl	800104c <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ba:	e00b      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026bc:	f7fe fcc6 	bl	800104c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d904      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0bb      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026d4:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e0:	d0ec      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02e      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12a      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002718:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	0f1b      	lsrs	r3, r3, #28
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	019a      	lsls	r2, r3, #6
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	071b      	lsls	r3, r3, #28
 800273e:	4944      	ldr	r1, [pc, #272]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002746:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	493d      	ldr	r1, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d022      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002774:	d11d      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	0e1b      	lsrs	r3, r3, #24
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	0f1b      	lsrs	r3, r3, #28
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	019a      	lsls	r2, r3, #6
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	4929      	ldr	r1, [pc, #164]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	0e1b      	lsrs	r3, r3, #24
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	0c1b      	lsrs	r3, r3, #16
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	019a      	lsls	r2, r3, #6
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	071b      	lsls	r3, r3, #28
 80027f2:	4917      	ldr	r1, [pc, #92]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	4911      	ldr	r1, [pc, #68]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fc16 	bl	800104c <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002824:	f7fe fc12 	bl	800104c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e007      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800283e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002842:	d1ef      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e049      	b.n	80028fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fa7c 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f900 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIM_ConfigClockSource+0x1c>
 800291c:	2302      	movs	r3, #2
 800291e:	e0b4      	b.n	8002a8a <HAL_TIM_ConfigClockSource+0x186>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <HAL_TIM_ConfigClockSource+0x190>)
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002958:	d03e      	beq.n	80029d8 <HAL_TIM_ConfigClockSource+0xd4>
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295e:	f200 8087 	bhi.w	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	f000 8086 	beq.w	8002a76 <HAL_TIM_ConfigClockSource+0x172>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	d87f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b70      	cmp	r3, #112	; 0x70
 8002972:	d01a      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0xa6>
 8002974:	2b70      	cmp	r3, #112	; 0x70
 8002976:	d87b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d050      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x11a>
 800297c:	2b60      	cmp	r3, #96	; 0x60
 800297e:	d877      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b50      	cmp	r3, #80	; 0x50
 8002982:	d03c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xfa>
 8002984:	2b50      	cmp	r3, #80	; 0x50
 8002986:	d873      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d058      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x13a>
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d86f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b30      	cmp	r3, #48	; 0x30
 8002992:	d064      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b30      	cmp	r3, #48	; 0x30
 8002996:	d86b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d060      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d867      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05c      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d05a      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	e062      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f000 f987 	bl	8002ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	609a      	str	r2, [r3, #8]
      break;
 80029d6:	e04f      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f000 f970 	bl	8002ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029fa:	609a      	str	r2, [r3, #8]
      break;
 80029fc:	e03c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f8e4 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2150      	movs	r1, #80	; 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f93d 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e02c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f000 f903 	bl	8002c36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2160      	movs	r1, #96	; 0x60
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f92d 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a3c:	e01c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 f8c4 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f91d 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e00c      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 f914 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a6e:	e003      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e000      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	fffeff88 	.word	0xfffeff88

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a40      	ldr	r2, [pc, #256]	; (8002bac <TIM_Base_SetConfig+0x114>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3d      	ldr	r2, [pc, #244]	; (8002bb0 <TIM_Base_SetConfig+0x118>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <TIM_Base_SetConfig+0x11c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <TIM_Base_SetConfig+0x120>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3a      	ldr	r2, [pc, #232]	; (8002bbc <TIM_Base_SetConfig+0x124>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <TIM_Base_SetConfig+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d02b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d027      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <TIM_Base_SetConfig+0x118>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d023      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <TIM_Base_SetConfig+0x11c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <TIM_Base_SetConfig+0x120>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <TIM_Base_SetConfig+0x124>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d017      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <TIM_Base_SetConfig+0x128>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a27      	ldr	r2, [pc, #156]	; (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00f      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a26      	ldr	r2, [pc, #152]	; (8002bc8 <TIM_Base_SetConfig+0x130>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <TIM_Base_SetConfig+0x134>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <TIM_Base_SetConfig+0x138>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <TIM_Base_SetConfig+0x13c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <TIM_Base_SetConfig+0x114>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0xf8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <TIM_Base_SetConfig+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40000c00 	.word	0x40000c00
 8002bbc:	40010400 	.word	0x40010400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800
 8002bcc:	40001800 	.word	0x40001800
 8002bd0:	40001c00 	.word	0x40001c00
 8002bd4:	40002000 	.word	0x40002000

08002bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0201 	bic.w	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 030a 	bic.w	r3, r3, #10
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0210 	bic.w	r2, r3, #16
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	031b      	lsls	r3, r3, #12
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f043 0307 	orr.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	021a      	lsls	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e06d      	b.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d01d      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10c      	bne.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40010400 	.word	0x40010400
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40001800 	.word	0x40001800

08002e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e040      	b.n	8002ebc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd ffb2 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f974 	bl	8003154 <UART_SetConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e022      	b.n	8002ebc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fbcc 	bl	800361c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fc53 	bl	8003760 <UART_CheckIdleState>
 8002eba:	4603      	mov	r3, r0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d171      	bne.n	8002fc0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Transmit+0x24>
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e06a      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2221      	movs	r2, #33	; 0x21
 8002ef8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002efa:	f7fe f8a7 	bl	800104c <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d108      	bne.n	8002f2c <HAL_UART_Transmit+0x68>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e003      	b.n	8002f34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f34:	e02c      	b.n	8002f90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fc5a 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e038      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e007      	b.n	8002f7e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1cc      	bne.n	8002f36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	; 0x40
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fc27 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e005      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	; 0x28
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f040 80b1 	bne.w	8003148 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Receive+0x28>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0a9      	b.n	800314a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2222      	movs	r2, #34	; 0x22
 8003002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300c:	f7fe f81e 	bl	800104c <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d10e      	bne.n	800304a <HAL_UART_Receive+0x80>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_UART_Receive+0x76>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f240 12ff 	movw	r2, #511	; 0x1ff
 800303a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800303e:	e02d      	b.n	800309c <HAL_UART_Receive+0xd2>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	22ff      	movs	r2, #255	; 0xff
 8003044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003048:	e028      	b.n	800309c <HAL_UART_Receive+0xd2>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <HAL_UART_Receive+0xa4>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <HAL_UART_Receive+0x9a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003062:	e01b      	b.n	800309c <HAL_UART_Receive+0xd2>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	227f      	movs	r2, #127	; 0x7f
 8003068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800306c:	e016      	b.n	800309c <HAL_UART_Receive+0xd2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003076:	d10d      	bne.n	8003094 <HAL_UART_Receive+0xca>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <HAL_UART_Receive+0xc0>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	227f      	movs	r2, #127	; 0x7f
 8003084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003088:	e008      	b.n	800309c <HAL_UART_Receive+0xd2>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003092:	e003      	b.n	800309c <HAL_UART_Receive+0xd2>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d108      	bne.n	80030c0 <HAL_UART_Receive+0xf6>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e003      	b.n	80030c8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030c8:	e032      	b.n	8003130 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2120      	movs	r1, #32
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb90 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e032      	b.n	800314a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	8a7b      	ldrh	r3, [r7, #18]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3302      	adds	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e00c      	b.n	800311e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8a7b      	ldrh	r3, [r7, #18]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4013      	ands	r3, r2
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1c6      	bne.n	80030ca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4ba6      	ldr	r3, [pc, #664]	; (8003418 <UART_SetConfig+0x2c4>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	430b      	orrs	r3, r1
 800318a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a94      	ldr	r2, [pc, #592]	; (800341c <UART_SetConfig+0x2c8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d120      	bne.n	8003212 <UART_SetConfig+0xbe>
 80031d0:	4b93      	ldr	r3, [pc, #588]	; (8003420 <UART_SetConfig+0x2cc>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d816      	bhi.n	800320c <UART_SetConfig+0xb8>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x90>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003201 	.word	0x08003201
 80031ec:	080031fb 	.word	0x080031fb
 80031f0:	08003207 	.word	0x08003207
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e150      	b.n	800349c <UART_SetConfig+0x348>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e14d      	b.n	800349c <UART_SetConfig+0x348>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e14a      	b.n	800349c <UART_SetConfig+0x348>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e147      	b.n	800349c <UART_SetConfig+0x348>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e144      	b.n	800349c <UART_SetConfig+0x348>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a83      	ldr	r2, [pc, #524]	; (8003424 <UART_SetConfig+0x2d0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d132      	bne.n	8003282 <UART_SetConfig+0x12e>
 800321c:	4b80      	ldr	r3, [pc, #512]	; (8003420 <UART_SetConfig+0x2cc>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d828      	bhi.n	800327c <UART_SetConfig+0x128>
 800322a:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <UART_SetConfig+0xdc>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003265 	.word	0x08003265
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800327d 	.word	0x0800327d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	08003271 	.word	0x08003271
 8003244:	0800327d 	.word	0x0800327d
 8003248:	0800327d 	.word	0x0800327d
 800324c:	0800327d 	.word	0x0800327d
 8003250:	0800326b 	.word	0x0800326b
 8003254:	0800327d 	.word	0x0800327d
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800327d 	.word	0x0800327d
 8003260:	08003277 	.word	0x08003277
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e118      	b.n	800349c <UART_SetConfig+0x348>
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e115      	b.n	800349c <UART_SetConfig+0x348>
 8003270:	2304      	movs	r3, #4
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e112      	b.n	800349c <UART_SetConfig+0x348>
 8003276:	2308      	movs	r3, #8
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e10f      	b.n	800349c <UART_SetConfig+0x348>
 800327c:	2310      	movs	r3, #16
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e10c      	b.n	800349c <UART_SetConfig+0x348>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a68      	ldr	r2, [pc, #416]	; (8003428 <UART_SetConfig+0x2d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d120      	bne.n	80032ce <UART_SetConfig+0x17a>
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <UART_SetConfig+0x2cc>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003296:	2b30      	cmp	r3, #48	; 0x30
 8003298:	d013      	beq.n	80032c2 <UART_SetConfig+0x16e>
 800329a:	2b30      	cmp	r3, #48	; 0x30
 800329c:	d814      	bhi.n	80032c8 <UART_SetConfig+0x174>
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d009      	beq.n	80032b6 <UART_SetConfig+0x162>
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d810      	bhi.n	80032c8 <UART_SetConfig+0x174>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <UART_SetConfig+0x15c>
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d006      	beq.n	80032bc <UART_SetConfig+0x168>
 80032ae:	e00b      	b.n	80032c8 <UART_SetConfig+0x174>
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e0f2      	b.n	800349c <UART_SetConfig+0x348>
 80032b6:	2302      	movs	r3, #2
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e0ef      	b.n	800349c <UART_SetConfig+0x348>
 80032bc:	2304      	movs	r3, #4
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e0ec      	b.n	800349c <UART_SetConfig+0x348>
 80032c2:	2308      	movs	r3, #8
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e0e9      	b.n	800349c <UART_SetConfig+0x348>
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0e6      	b.n	800349c <UART_SetConfig+0x348>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a56      	ldr	r2, [pc, #344]	; (800342c <UART_SetConfig+0x2d8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d120      	bne.n	800331a <UART_SetConfig+0x1c6>
 80032d8:	4b51      	ldr	r3, [pc, #324]	; (8003420 <UART_SetConfig+0x2cc>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032e2:	2bc0      	cmp	r3, #192	; 0xc0
 80032e4:	d013      	beq.n	800330e <UART_SetConfig+0x1ba>
 80032e6:	2bc0      	cmp	r3, #192	; 0xc0
 80032e8:	d814      	bhi.n	8003314 <UART_SetConfig+0x1c0>
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d009      	beq.n	8003302 <UART_SetConfig+0x1ae>
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d810      	bhi.n	8003314 <UART_SetConfig+0x1c0>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <UART_SetConfig+0x1a8>
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d006      	beq.n	8003308 <UART_SetConfig+0x1b4>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x1c0>
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0cc      	b.n	800349c <UART_SetConfig+0x348>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e0c9      	b.n	800349c <UART_SetConfig+0x348>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e0c6      	b.n	800349c <UART_SetConfig+0x348>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e0c3      	b.n	800349c <UART_SetConfig+0x348>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0c0      	b.n	800349c <UART_SetConfig+0x348>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a44      	ldr	r2, [pc, #272]	; (8003430 <UART_SetConfig+0x2dc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d125      	bne.n	8003370 <UART_SetConfig+0x21c>
 8003324:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <UART_SetConfig+0x2cc>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003332:	d017      	beq.n	8003364 <UART_SetConfig+0x210>
 8003334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003338:	d817      	bhi.n	800336a <UART_SetConfig+0x216>
 800333a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333e:	d00b      	beq.n	8003358 <UART_SetConfig+0x204>
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d811      	bhi.n	800336a <UART_SetConfig+0x216>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <UART_SetConfig+0x1fe>
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	d006      	beq.n	800335e <UART_SetConfig+0x20a>
 8003350:	e00b      	b.n	800336a <UART_SetConfig+0x216>
 8003352:	2300      	movs	r3, #0
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e0a1      	b.n	800349c <UART_SetConfig+0x348>
 8003358:	2302      	movs	r3, #2
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e09e      	b.n	800349c <UART_SetConfig+0x348>
 800335e:	2304      	movs	r3, #4
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e09b      	b.n	800349c <UART_SetConfig+0x348>
 8003364:	2308      	movs	r3, #8
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e098      	b.n	800349c <UART_SetConfig+0x348>
 800336a:	2310      	movs	r3, #16
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e095      	b.n	800349c <UART_SetConfig+0x348>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <UART_SetConfig+0x2e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d125      	bne.n	80033c6 <UART_SetConfig+0x272>
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <UART_SetConfig+0x2cc>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d017      	beq.n	80033ba <UART_SetConfig+0x266>
 800338a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800338e:	d817      	bhi.n	80033c0 <UART_SetConfig+0x26c>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d00b      	beq.n	80033ae <UART_SetConfig+0x25a>
 8003396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339a:	d811      	bhi.n	80033c0 <UART_SetConfig+0x26c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <UART_SetConfig+0x254>
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d006      	beq.n	80033b4 <UART_SetConfig+0x260>
 80033a6:	e00b      	b.n	80033c0 <UART_SetConfig+0x26c>
 80033a8:	2301      	movs	r3, #1
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e076      	b.n	800349c <UART_SetConfig+0x348>
 80033ae:	2302      	movs	r3, #2
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e073      	b.n	800349c <UART_SetConfig+0x348>
 80033b4:	2304      	movs	r3, #4
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e070      	b.n	800349c <UART_SetConfig+0x348>
 80033ba:	2308      	movs	r3, #8
 80033bc:	77fb      	strb	r3, [r7, #31]
 80033be:	e06d      	b.n	800349c <UART_SetConfig+0x348>
 80033c0:	2310      	movs	r3, #16
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e06a      	b.n	800349c <UART_SetConfig+0x348>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <UART_SetConfig+0x2e4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d138      	bne.n	8003442 <UART_SetConfig+0x2ee>
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <UART_SetConfig+0x2cc>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033de:	d017      	beq.n	8003410 <UART_SetConfig+0x2bc>
 80033e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e4:	d82a      	bhi.n	800343c <UART_SetConfig+0x2e8>
 80033e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ea:	d00b      	beq.n	8003404 <UART_SetConfig+0x2b0>
 80033ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f0:	d824      	bhi.n	800343c <UART_SetConfig+0x2e8>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <UART_SetConfig+0x2aa>
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fa:	d006      	beq.n	800340a <UART_SetConfig+0x2b6>
 80033fc:	e01e      	b.n	800343c <UART_SetConfig+0x2e8>
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e04b      	b.n	800349c <UART_SetConfig+0x348>
 8003404:	2302      	movs	r3, #2
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e048      	b.n	800349c <UART_SetConfig+0x348>
 800340a:	2304      	movs	r3, #4
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e045      	b.n	800349c <UART_SetConfig+0x348>
 8003410:	2308      	movs	r3, #8
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e042      	b.n	800349c <UART_SetConfig+0x348>
 8003416:	bf00      	nop
 8003418:	efff69f3 	.word	0xefff69f3
 800341c:	40011000 	.word	0x40011000
 8003420:	40023800 	.word	0x40023800
 8003424:	40004400 	.word	0x40004400
 8003428:	40004800 	.word	0x40004800
 800342c:	40004c00 	.word	0x40004c00
 8003430:	40005000 	.word	0x40005000
 8003434:	40011400 	.word	0x40011400
 8003438:	40007800 	.word	0x40007800
 800343c:	2310      	movs	r3, #16
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e02c      	b.n	800349c <UART_SetConfig+0x348>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a72      	ldr	r2, [pc, #456]	; (8003610 <UART_SetConfig+0x4bc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d125      	bne.n	8003498 <UART_SetConfig+0x344>
 800344c:	4b71      	ldr	r3, [pc, #452]	; (8003614 <UART_SetConfig+0x4c0>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003456:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800345a:	d017      	beq.n	800348c <UART_SetConfig+0x338>
 800345c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003460:	d817      	bhi.n	8003492 <UART_SetConfig+0x33e>
 8003462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003466:	d00b      	beq.n	8003480 <UART_SetConfig+0x32c>
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346c:	d811      	bhi.n	8003492 <UART_SetConfig+0x33e>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <UART_SetConfig+0x326>
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003476:	d006      	beq.n	8003486 <UART_SetConfig+0x332>
 8003478:	e00b      	b.n	8003492 <UART_SetConfig+0x33e>
 800347a:	2300      	movs	r3, #0
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e00d      	b.n	800349c <UART_SetConfig+0x348>
 8003480:	2302      	movs	r3, #2
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e00a      	b.n	800349c <UART_SetConfig+0x348>
 8003486:	2304      	movs	r3, #4
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e007      	b.n	800349c <UART_SetConfig+0x348>
 800348c:	2308      	movs	r3, #8
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e004      	b.n	800349c <UART_SetConfig+0x348>
 8003492:	2310      	movs	r3, #16
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e001      	b.n	800349c <UART_SetConfig+0x348>
 8003498:	2310      	movs	r3, #16
 800349a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a4:	d15b      	bne.n	800355e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d828      	bhi.n	80034fe <UART_SetConfig+0x3aa>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0x360>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034ef 	.word	0x080034ef
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ff 	.word	0x080034ff
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d8:	f7fe fd6c 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80034dc:	61b8      	str	r0, [r7, #24]
        break;
 80034de:	e013      	b.n	8003508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7fe fd7c 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80034e4:	61b8      	str	r0, [r7, #24]
        break;
 80034e6:	e00f      	b.n	8003508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <UART_SetConfig+0x4c4>)
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e00c      	b.n	8003508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7fe fc4f 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 80034f2:	61b8      	str	r0, [r7, #24]
        break;
 80034f4:	e008      	b.n	8003508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	61bb      	str	r3, [r7, #24]
        break;
 80034fc:	e004      	b.n	8003508 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77bb      	strb	r3, [r7, #30]
        break;
 8003506:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d074      	beq.n	80035f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	005a      	lsls	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	d916      	bls.n	8003558 <UART_SetConfig+0x404>
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003530:	d212      	bcs.n	8003558 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f023 030f 	bic.w	r3, r3, #15
 800353a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	b29b      	uxth	r3, r3
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	b29a      	uxth	r2, r3
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	4313      	orrs	r3, r2
 800354c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	89fa      	ldrh	r2, [r7, #14]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e04f      	b.n	80035f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	77bb      	strb	r3, [r7, #30]
 800355c:	e04c      	b.n	80035f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800355e:	7ffb      	ldrb	r3, [r7, #31]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d828      	bhi.n	80035b6 <UART_SetConfig+0x462>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0x418>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	08003591 	.word	0x08003591
 8003570:	08003599 	.word	0x08003599
 8003574:	080035a1 	.word	0x080035a1
 8003578:	080035b7 	.word	0x080035b7
 800357c:	080035a7 	.word	0x080035a7
 8003580:	080035b7 	.word	0x080035b7
 8003584:	080035b7 	.word	0x080035b7
 8003588:	080035b7 	.word	0x080035b7
 800358c:	080035af 	.word	0x080035af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003590:	f7fe fd10 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003594:	61b8      	str	r0, [r7, #24]
        break;
 8003596:	e013      	b.n	80035c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fd20 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 800359c:	61b8      	str	r0, [r7, #24]
        break;
 800359e:	e00f      	b.n	80035c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <UART_SetConfig+0x4c4>)
 80035a2:	61bb      	str	r3, [r7, #24]
        break;
 80035a4:	e00c      	b.n	80035c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a6:	f7fe fbf3 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 80035aa:	61b8      	str	r0, [r7, #24]
        break;
 80035ac:	e008      	b.n	80035c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b2:	61bb      	str	r3, [r7, #24]
        break;
 80035b4:	e004      	b.n	80035c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	77bb      	strb	r3, [r7, #30]
        break;
 80035be:	bf00      	nop
    }

    if (pclk != 0U)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085a      	lsrs	r2, r3, #1
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b0f      	cmp	r3, #15
 80035de:	d909      	bls.n	80035f4 <UART_SetConfig+0x4a0>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d205      	bcs.n	80035f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e001      	b.n	80035f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003604:	7fbb      	ldrb	r3, [r7, #30]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40007c00 	.word	0x40007c00
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400

0800361c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01a      	beq.n	8003732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371a:	d10a      	bne.n	8003732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003770:	f7fd fc6c 	bl	800104c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d10e      	bne.n	80037a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f831 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e027      	b.n	80037f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d10e      	bne.n	80037ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f81b 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e011      	b.n	80037f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b09c      	sub	sp, #112	; 0x70
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380a:	e0a7      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	f000 80a3 	beq.w	800395c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fd fc19 	bl	800104c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <UART_WaitOnFlagUntilTimeout+0x32>
 8003826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13f      	bne.n	80038ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003840:	667b      	str	r3, [r7, #100]	; 0x64
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e6      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800387e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e068      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d050      	beq.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d148      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
 80038f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	613b      	str	r3, [r7, #16]
   return(result);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	66bb      	str	r3, [r7, #104]	; 0x68
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003926:	623a      	str	r2, [r7, #32]
 8003928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	61bb      	str	r3, [r7, #24]
   return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e010      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	429a      	cmp	r2, r3
 8003978:	f43f af48 	beq.w	800380c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3770      	adds	r7, #112	; 0x70
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <__errno>:
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <__errno+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4d0d      	ldr	r5, [pc, #52]	; (80039cc <__libc_init_array+0x38>)
 8003998:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <__libc_init_array+0x3c>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	2600      	movs	r6, #0
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	4d0b      	ldr	r5, [pc, #44]	; (80039d4 <__libc_init_array+0x40>)
 80039a6:	4c0c      	ldr	r4, [pc, #48]	; (80039d8 <__libc_init_array+0x44>)
 80039a8:	f001 f88c 	bl	8004ac4 <_init>
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	2600      	movs	r6, #0
 80039b2:	42a6      	cmp	r6, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039bc:	4798      	blx	r3
 80039be:	3601      	adds	r6, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c6:	4798      	blx	r3
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	08004bf8 	.word	0x08004bf8
 80039d0:	08004bf8 	.word	0x08004bf8
 80039d4:	08004bf8 	.word	0x08004bf8
 80039d8:	08004bfc 	.word	0x08004bfc

080039dc <memcmp>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	3901      	subs	r1, #1
 80039e0:	4402      	add	r2, r0
 80039e2:	4290      	cmp	r0, r2
 80039e4:	d101      	bne.n	80039ea <memcmp+0xe>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e005      	b.n	80039f6 <memcmp+0x1a>
 80039ea:	7803      	ldrb	r3, [r0, #0]
 80039ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d001      	beq.n	80039f8 <memcmp+0x1c>
 80039f4:	1b18      	subs	r0, r3, r4
 80039f6:	bd10      	pop	{r4, pc}
 80039f8:	3001      	adds	r0, #1
 80039fa:	e7f2      	b.n	80039e2 <memcmp+0x6>

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <iprintf>:
 8003a0c:	b40f      	push	{r0, r1, r2, r3}
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <iprintf+0x2c>)
 8003a10:	b513      	push	{r0, r1, r4, lr}
 8003a12:	681c      	ldr	r4, [r3, #0]
 8003a14:	b124      	cbz	r4, 8003a20 <iprintf+0x14>
 8003a16:	69a3      	ldr	r3, [r4, #24]
 8003a18:	b913      	cbnz	r3, 8003a20 <iprintf+0x14>
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 faae 	bl	8003f7c <__sinit>
 8003a20:	ab05      	add	r3, sp, #20
 8003a22:	9a04      	ldr	r2, [sp, #16]
 8003a24:	68a1      	ldr	r1, [r4, #8]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 fcbf 	bl	80043ac <_vfiprintf_r>
 8003a2e:	b002      	add	sp, #8
 8003a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a34:	b004      	add	sp, #16
 8003a36:	4770      	bx	lr
 8003a38:	2000000c 	.word	0x2000000c

08003a3c <setvbuf>:
 8003a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a40:	461d      	mov	r5, r3
 8003a42:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <setvbuf+0x17c>)
 8003a44:	681f      	ldr	r7, [r3, #0]
 8003a46:	4604      	mov	r4, r0
 8003a48:	460e      	mov	r6, r1
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	b127      	cbz	r7, 8003a58 <setvbuf+0x1c>
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	b913      	cbnz	r3, 8003a58 <setvbuf+0x1c>
 8003a52:	4638      	mov	r0, r7
 8003a54:	f000 fa92 	bl	8003f7c <__sinit>
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <setvbuf+0x180>)
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d167      	bne.n	8003b2e <setvbuf+0xf2>
 8003a5e:	687c      	ldr	r4, [r7, #4]
 8003a60:	f1b8 0f02 	cmp.w	r8, #2
 8003a64:	d006      	beq.n	8003a74 <setvbuf+0x38>
 8003a66:	f1b8 0f01 	cmp.w	r8, #1
 8003a6a:	f200 809f 	bhi.w	8003bac <setvbuf+0x170>
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	f2c0 809c 	blt.w	8003bac <setvbuf+0x170>
 8003a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a76:	07db      	lsls	r3, r3, #31
 8003a78:	d405      	bmi.n	8003a86 <setvbuf+0x4a>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	0598      	lsls	r0, r3, #22
 8003a7e:	d402      	bmi.n	8003a86 <setvbuf+0x4a>
 8003a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a82:	f000 fb19 	bl	80040b8 <__retarget_lock_acquire_recursive>
 8003a86:	4621      	mov	r1, r4
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f000 f9e3 	bl	8003e54 <_fflush_r>
 8003a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a90:	b141      	cbz	r1, 8003aa4 <setvbuf+0x68>
 8003a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a96:	4299      	cmp	r1, r3
 8003a98:	d002      	beq.n	8003aa0 <setvbuf+0x64>
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f000 fb7c 	bl	8004198 <_free_r>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6363      	str	r3, [r4, #52]	; 0x34
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61a3      	str	r3, [r4, #24]
 8003aa8:	6063      	str	r3, [r4, #4]
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	0619      	lsls	r1, r3, #24
 8003aae:	d503      	bpl.n	8003ab8 <setvbuf+0x7c>
 8003ab0:	6921      	ldr	r1, [r4, #16]
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	f000 fb70 	bl	8004198 <_free_r>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	f1b8 0f02 	cmp.w	r8, #2
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	d06c      	beq.n	8003ba4 <setvbuf+0x168>
 8003aca:	ab01      	add	r3, sp, #4
 8003acc:	466a      	mov	r2, sp
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f000 faf3 	bl	80040bc <__swhatbuf_r>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	4318      	orrs	r0, r3
 8003ada:	81a0      	strh	r0, [r4, #12]
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	d130      	bne.n	8003b42 <setvbuf+0x106>
 8003ae0:	9d00      	ldr	r5, [sp, #0]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fb50 	bl	8004188 <malloc>
 8003ae8:	4606      	mov	r6, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d155      	bne.n	8003b9a <setvbuf+0x15e>
 8003aee:	f8dd 9000 	ldr.w	r9, [sp]
 8003af2:	45a9      	cmp	r9, r5
 8003af4:	d14a      	bne.n	8003b8c <setvbuf+0x150>
 8003af6:	f04f 35ff 	mov.w	r5, #4294967295
 8003afa:	2200      	movs	r2, #0
 8003afc:	60a2      	str	r2, [r4, #8]
 8003afe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	6122      	str	r2, [r4, #16]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0c:	6162      	str	r2, [r4, #20]
 8003b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	07d2      	lsls	r2, r2, #31
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	d405      	bmi.n	8003b26 <setvbuf+0xea>
 8003b1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003b1e:	d102      	bne.n	8003b26 <setvbuf+0xea>
 8003b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b22:	f000 faca 	bl	80040ba <__retarget_lock_release_recursive>
 8003b26:	4628      	mov	r0, r5
 8003b28:	b003      	add	sp, #12
 8003b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <setvbuf+0x184>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d101      	bne.n	8003b38 <setvbuf+0xfc>
 8003b34:	68bc      	ldr	r4, [r7, #8]
 8003b36:	e793      	b.n	8003a60 <setvbuf+0x24>
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <setvbuf+0x188>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	bf08      	it	eq
 8003b3e:	68fc      	ldreq	r4, [r7, #12]
 8003b40:	e78e      	b.n	8003a60 <setvbuf+0x24>
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	d0cd      	beq.n	8003ae2 <setvbuf+0xa6>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	b913      	cbnz	r3, 8003b50 <setvbuf+0x114>
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f000 fa16 	bl	8003f7c <__sinit>
 8003b50:	f1b8 0f01 	cmp.w	r8, #1
 8003b54:	bf08      	it	eq
 8003b56:	89a3      	ldrheq	r3, [r4, #12]
 8003b58:	6026      	str	r6, [r4, #0]
 8003b5a:	bf04      	itt	eq
 8003b5c:	f043 0301 	orreq.w	r3, r3, #1
 8003b60:	81a3      	strheq	r3, [r4, #12]
 8003b62:	89a2      	ldrh	r2, [r4, #12]
 8003b64:	f012 0308 	ands.w	r3, r2, #8
 8003b68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003b6c:	d01c      	beq.n	8003ba8 <setvbuf+0x16c>
 8003b6e:	07d3      	lsls	r3, r2, #31
 8003b70:	bf41      	itttt	mi
 8003b72:	2300      	movmi	r3, #0
 8003b74:	426d      	negmi	r5, r5
 8003b76:	60a3      	strmi	r3, [r4, #8]
 8003b78:	61a5      	strmi	r5, [r4, #24]
 8003b7a:	bf58      	it	pl
 8003b7c:	60a5      	strpl	r5, [r4, #8]
 8003b7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003b80:	f015 0501 	ands.w	r5, r5, #1
 8003b84:	d115      	bne.n	8003bb2 <setvbuf+0x176>
 8003b86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003b8a:	e7c8      	b.n	8003b1e <setvbuf+0xe2>
 8003b8c:	4648      	mov	r0, r9
 8003b8e:	f000 fafb 	bl	8004188 <malloc>
 8003b92:	4606      	mov	r6, r0
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d0ae      	beq.n	8003af6 <setvbuf+0xba>
 8003b98:	464d      	mov	r5, r9
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	e7d0      	b.n	8003b46 <setvbuf+0x10a>
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	e7a8      	b.n	8003afa <setvbuf+0xbe>
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	e7e8      	b.n	8003b7e <setvbuf+0x142>
 8003bac:	f04f 35ff 	mov.w	r5, #4294967295
 8003bb0:	e7b9      	b.n	8003b26 <setvbuf+0xea>
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	e7b7      	b.n	8003b26 <setvbuf+0xea>
 8003bb6:	bf00      	nop
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	08004b7c 	.word	0x08004b7c
 8003bc0:	08004b9c 	.word	0x08004b9c
 8003bc4:	08004b5c 	.word	0x08004b5c

08003bc8 <__swbuf_r>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	460e      	mov	r6, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	4605      	mov	r5, r0
 8003bd0:	b118      	cbz	r0, 8003bda <__swbuf_r+0x12>
 8003bd2:	6983      	ldr	r3, [r0, #24]
 8003bd4:	b90b      	cbnz	r3, 8003bda <__swbuf_r+0x12>
 8003bd6:	f000 f9d1 	bl	8003f7c <__sinit>
 8003bda:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <__swbuf_r+0x98>)
 8003bdc:	429c      	cmp	r4, r3
 8003bde:	d12b      	bne.n	8003c38 <__swbuf_r+0x70>
 8003be0:	686c      	ldr	r4, [r5, #4]
 8003be2:	69a3      	ldr	r3, [r4, #24]
 8003be4:	60a3      	str	r3, [r4, #8]
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	071a      	lsls	r2, r3, #28
 8003bea:	d52f      	bpl.n	8003c4c <__swbuf_r+0x84>
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	b36b      	cbz	r3, 8003c4c <__swbuf_r+0x84>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	b2f6      	uxtb	r6, r6
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	4637      	mov	r7, r6
 8003bfe:	dc04      	bgt.n	8003c0a <__swbuf_r+0x42>
 8003c00:	4621      	mov	r1, r4
 8003c02:	4628      	mov	r0, r5
 8003c04:	f000 f926 	bl	8003e54 <_fflush_r>
 8003c08:	bb30      	cbnz	r0, 8003c58 <__swbuf_r+0x90>
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	6022      	str	r2, [r4, #0]
 8003c16:	701e      	strb	r6, [r3, #0]
 8003c18:	6963      	ldr	r3, [r4, #20]
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	4283      	cmp	r3, r0
 8003c1e:	d004      	beq.n	8003c2a <__swbuf_r+0x62>
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	07db      	lsls	r3, r3, #31
 8003c24:	d506      	bpl.n	8003c34 <__swbuf_r+0x6c>
 8003c26:	2e0a      	cmp	r6, #10
 8003c28:	d104      	bne.n	8003c34 <__swbuf_r+0x6c>
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f000 f911 	bl	8003e54 <_fflush_r>
 8003c32:	b988      	cbnz	r0, 8003c58 <__swbuf_r+0x90>
 8003c34:	4638      	mov	r0, r7
 8003c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <__swbuf_r+0x9c>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d101      	bne.n	8003c42 <__swbuf_r+0x7a>
 8003c3e:	68ac      	ldr	r4, [r5, #8]
 8003c40:	e7cf      	b.n	8003be2 <__swbuf_r+0x1a>
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <__swbuf_r+0xa0>)
 8003c44:	429c      	cmp	r4, r3
 8003c46:	bf08      	it	eq
 8003c48:	68ec      	ldreq	r4, [r5, #12]
 8003c4a:	e7ca      	b.n	8003be2 <__swbuf_r+0x1a>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f80c 	bl	8003c6c <__swsetup_r>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d0cb      	beq.n	8003bf0 <__swbuf_r+0x28>
 8003c58:	f04f 37ff 	mov.w	r7, #4294967295
 8003c5c:	e7ea      	b.n	8003c34 <__swbuf_r+0x6c>
 8003c5e:	bf00      	nop
 8003c60:	08004b7c 	.word	0x08004b7c
 8003c64:	08004b9c 	.word	0x08004b9c
 8003c68:	08004b5c 	.word	0x08004b5c

08003c6c <__swsetup_r>:
 8003c6c:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <__swsetup_r+0xcc>)
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	681d      	ldr	r5, [r3, #0]
 8003c72:	4606      	mov	r6, r0
 8003c74:	460c      	mov	r4, r1
 8003c76:	b125      	cbz	r5, 8003c82 <__swsetup_r+0x16>
 8003c78:	69ab      	ldr	r3, [r5, #24]
 8003c7a:	b913      	cbnz	r3, 8003c82 <__swsetup_r+0x16>
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f97d 	bl	8003f7c <__sinit>
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <__swsetup_r+0xd0>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d10f      	bne.n	8003ca8 <__swsetup_r+0x3c>
 8003c88:	686c      	ldr	r4, [r5, #4]
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c90:	0719      	lsls	r1, r3, #28
 8003c92:	d42c      	bmi.n	8003cee <__swsetup_r+0x82>
 8003c94:	06dd      	lsls	r5, r3, #27
 8003c96:	d411      	bmi.n	8003cbc <__swsetup_r+0x50>
 8003c98:	2309      	movs	r3, #9
 8003c9a:	6033      	str	r3, [r6, #0]
 8003c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca6:	e03e      	b.n	8003d26 <__swsetup_r+0xba>
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <__swsetup_r+0xd4>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d101      	bne.n	8003cb2 <__swsetup_r+0x46>
 8003cae:	68ac      	ldr	r4, [r5, #8]
 8003cb0:	e7eb      	b.n	8003c8a <__swsetup_r+0x1e>
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <__swsetup_r+0xd8>)
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	bf08      	it	eq
 8003cb8:	68ec      	ldreq	r4, [r5, #12]
 8003cba:	e7e6      	b.n	8003c8a <__swsetup_r+0x1e>
 8003cbc:	0758      	lsls	r0, r3, #29
 8003cbe:	d512      	bpl.n	8003ce6 <__swsetup_r+0x7a>
 8003cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc2:	b141      	cbz	r1, 8003cd6 <__swsetup_r+0x6a>
 8003cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc8:	4299      	cmp	r1, r3
 8003cca:	d002      	beq.n	8003cd2 <__swsetup_r+0x66>
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f000 fa63 	bl	8004198 <_free_r>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cdc:	81a3      	strh	r3, [r4, #12]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6063      	str	r3, [r4, #4]
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	81a3      	strh	r3, [r4, #12]
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	b94b      	cbnz	r3, 8003d06 <__swsetup_r+0x9a>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d003      	beq.n	8003d06 <__swsetup_r+0x9a>
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4630      	mov	r0, r6
 8003d02:	f000 fa01 	bl	8004108 <__smakebuf_r>
 8003d06:	89a0      	ldrh	r0, [r4, #12]
 8003d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d0c:	f010 0301 	ands.w	r3, r0, #1
 8003d10:	d00a      	beq.n	8003d28 <__swsetup_r+0xbc>
 8003d12:	2300      	movs	r3, #0
 8003d14:	60a3      	str	r3, [r4, #8]
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	425b      	negs	r3, r3
 8003d1a:	61a3      	str	r3, [r4, #24]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	b943      	cbnz	r3, 8003d32 <__swsetup_r+0xc6>
 8003d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d24:	d1ba      	bne.n	8003c9c <__swsetup_r+0x30>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	0781      	lsls	r1, r0, #30
 8003d2a:	bf58      	it	pl
 8003d2c:	6963      	ldrpl	r3, [r4, #20]
 8003d2e:	60a3      	str	r3, [r4, #8]
 8003d30:	e7f4      	b.n	8003d1c <__swsetup_r+0xb0>
 8003d32:	2000      	movs	r0, #0
 8003d34:	e7f7      	b.n	8003d26 <__swsetup_r+0xba>
 8003d36:	bf00      	nop
 8003d38:	2000000c 	.word	0x2000000c
 8003d3c:	08004b7c 	.word	0x08004b7c
 8003d40:	08004b9c 	.word	0x08004b9c
 8003d44:	08004b5c 	.word	0x08004b5c

08003d48 <__sflush_r>:
 8003d48:	898a      	ldrh	r2, [r1, #12]
 8003d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4e:	4605      	mov	r5, r0
 8003d50:	0710      	lsls	r0, r2, #28
 8003d52:	460c      	mov	r4, r1
 8003d54:	d458      	bmi.n	8003e08 <__sflush_r+0xc0>
 8003d56:	684b      	ldr	r3, [r1, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	dc05      	bgt.n	8003d68 <__sflush_r+0x20>
 8003d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dc02      	bgt.n	8003d68 <__sflush_r+0x20>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d6a:	2e00      	cmp	r6, #0
 8003d6c:	d0f9      	beq.n	8003d62 <__sflush_r+0x1a>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d74:	682f      	ldr	r7, [r5, #0]
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	d032      	beq.n	8003de0 <__sflush_r+0x98>
 8003d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	075a      	lsls	r2, r3, #29
 8003d80:	d505      	bpl.n	8003d8e <__sflush_r+0x46>
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	1ac0      	subs	r0, r0, r3
 8003d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d88:	b10b      	cbz	r3, 8003d8e <__sflush_r+0x46>
 8003d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8c:	1ac0      	subs	r0, r0, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4602      	mov	r2, r0
 8003d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d94:	6a21      	ldr	r1, [r4, #32]
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b0      	blx	r6
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	d106      	bne.n	8003dae <__sflush_r+0x66>
 8003da0:	6829      	ldr	r1, [r5, #0]
 8003da2:	291d      	cmp	r1, #29
 8003da4:	d82c      	bhi.n	8003e00 <__sflush_r+0xb8>
 8003da6:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <__sflush_r+0x108>)
 8003da8:	40ca      	lsrs	r2, r1
 8003daa:	07d6      	lsls	r6, r2, #31
 8003dac:	d528      	bpl.n	8003e00 <__sflush_r+0xb8>
 8003dae:	2200      	movs	r2, #0
 8003db0:	6062      	str	r2, [r4, #4]
 8003db2:	04d9      	lsls	r1, r3, #19
 8003db4:	6922      	ldr	r2, [r4, #16]
 8003db6:	6022      	str	r2, [r4, #0]
 8003db8:	d504      	bpl.n	8003dc4 <__sflush_r+0x7c>
 8003dba:	1c42      	adds	r2, r0, #1
 8003dbc:	d101      	bne.n	8003dc2 <__sflush_r+0x7a>
 8003dbe:	682b      	ldr	r3, [r5, #0]
 8003dc0:	b903      	cbnz	r3, 8003dc4 <__sflush_r+0x7c>
 8003dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc6:	602f      	str	r7, [r5, #0]
 8003dc8:	2900      	cmp	r1, #0
 8003dca:	d0ca      	beq.n	8003d62 <__sflush_r+0x1a>
 8003dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <__sflush_r+0x92>
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 f9df 	bl	8004198 <_free_r>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8003dde:	e7c1      	b.n	8003d64 <__sflush_r+0x1c>
 8003de0:	6a21      	ldr	r1, [r4, #32]
 8003de2:	2301      	movs	r3, #1
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b0      	blx	r6
 8003de8:	1c41      	adds	r1, r0, #1
 8003dea:	d1c7      	bne.n	8003d7c <__sflush_r+0x34>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0c4      	beq.n	8003d7c <__sflush_r+0x34>
 8003df2:	2b1d      	cmp	r3, #29
 8003df4:	d001      	beq.n	8003dfa <__sflush_r+0xb2>
 8003df6:	2b16      	cmp	r3, #22
 8003df8:	d101      	bne.n	8003dfe <__sflush_r+0xb6>
 8003dfa:	602f      	str	r7, [r5, #0]
 8003dfc:	e7b1      	b.n	8003d62 <__sflush_r+0x1a>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e7ad      	b.n	8003d64 <__sflush_r+0x1c>
 8003e08:	690f      	ldr	r7, [r1, #16]
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	d0a9      	beq.n	8003d62 <__sflush_r+0x1a>
 8003e0e:	0793      	lsls	r3, r2, #30
 8003e10:	680e      	ldr	r6, [r1, #0]
 8003e12:	bf08      	it	eq
 8003e14:	694b      	ldreq	r3, [r1, #20]
 8003e16:	600f      	str	r7, [r1, #0]
 8003e18:	bf18      	it	ne
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	eba6 0807 	sub.w	r8, r6, r7
 8003e20:	608b      	str	r3, [r1, #8]
 8003e22:	f1b8 0f00 	cmp.w	r8, #0
 8003e26:	dd9c      	ble.n	8003d62 <__sflush_r+0x1a>
 8003e28:	6a21      	ldr	r1, [r4, #32]
 8003e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	463a      	mov	r2, r7
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	2800      	cmp	r0, #0
 8003e36:	dc06      	bgt.n	8003e46 <__sflush_r+0xfe>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	e78e      	b.n	8003d64 <__sflush_r+0x1c>
 8003e46:	4407      	add	r7, r0
 8003e48:	eba8 0800 	sub.w	r8, r8, r0
 8003e4c:	e7e9      	b.n	8003e22 <__sflush_r+0xda>
 8003e4e:	bf00      	nop
 8003e50:	20400001 	.word	0x20400001

08003e54 <_fflush_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	4605      	mov	r5, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b913      	cbnz	r3, 8003e64 <_fflush_r+0x10>
 8003e5e:	2500      	movs	r5, #0
 8003e60:	4628      	mov	r0, r5
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	b118      	cbz	r0, 8003e6e <_fflush_r+0x1a>
 8003e66:	6983      	ldr	r3, [r0, #24]
 8003e68:	b90b      	cbnz	r3, 8003e6e <_fflush_r+0x1a>
 8003e6a:	f000 f887 	bl	8003f7c <__sinit>
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <_fflush_r+0x6c>)
 8003e70:	429c      	cmp	r4, r3
 8003e72:	d11b      	bne.n	8003eac <_fflush_r+0x58>
 8003e74:	686c      	ldr	r4, [r5, #4]
 8003e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <_fflush_r+0xa>
 8003e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e80:	07d0      	lsls	r0, r2, #31
 8003e82:	d404      	bmi.n	8003e8e <_fflush_r+0x3a>
 8003e84:	0599      	lsls	r1, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_fflush_r+0x3a>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f000 f915 	bl	80040b8 <__retarget_lock_acquire_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	4621      	mov	r1, r4
 8003e92:	f7ff ff59 	bl	8003d48 <__sflush_r>
 8003e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e98:	07da      	lsls	r2, r3, #31
 8003e9a:	4605      	mov	r5, r0
 8003e9c:	d4e0      	bmi.n	8003e60 <_fflush_r+0xc>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	059b      	lsls	r3, r3, #22
 8003ea2:	d4dd      	bmi.n	8003e60 <_fflush_r+0xc>
 8003ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea6:	f000 f908 	bl	80040ba <__retarget_lock_release_recursive>
 8003eaa:	e7d9      	b.n	8003e60 <_fflush_r+0xc>
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <_fflush_r+0x70>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d101      	bne.n	8003eb6 <_fflush_r+0x62>
 8003eb2:	68ac      	ldr	r4, [r5, #8]
 8003eb4:	e7df      	b.n	8003e76 <_fflush_r+0x22>
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <_fflush_r+0x74>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	bf08      	it	eq
 8003ebc:	68ec      	ldreq	r4, [r5, #12]
 8003ebe:	e7da      	b.n	8003e76 <_fflush_r+0x22>
 8003ec0:	08004b7c 	.word	0x08004b7c
 8003ec4:	08004b9c 	.word	0x08004b9c
 8003ec8:	08004b5c 	.word	0x08004b5c

08003ecc <std>:
 8003ecc:	2300      	movs	r3, #0
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eda:	6083      	str	r3, [r0, #8]
 8003edc:	8181      	strh	r1, [r0, #12]
 8003ede:	6643      	str	r3, [r0, #100]	; 0x64
 8003ee0:	81c2      	strh	r2, [r0, #14]
 8003ee2:	6183      	str	r3, [r0, #24]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	305c      	adds	r0, #92	; 0x5c
 8003eea:	f7ff fd87 	bl	80039fc <memset>
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <std+0x38>)
 8003ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <std+0x3c>)
 8003ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <std+0x40>)
 8003ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <std+0x44>)
 8003efc:	6224      	str	r4, [r4, #32]
 8003efe:	6323      	str	r3, [r4, #48]	; 0x30
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	bf00      	nop
 8003f04:	08004955 	.word	0x08004955
 8003f08:	08004977 	.word	0x08004977
 8003f0c:	080049af 	.word	0x080049af
 8003f10:	080049d3 	.word	0x080049d3

08003f14 <_cleanup_r>:
 8003f14:	4901      	ldr	r1, [pc, #4]	; (8003f1c <_cleanup_r+0x8>)
 8003f16:	f000 b8af 	b.w	8004078 <_fwalk_reent>
 8003f1a:	bf00      	nop
 8003f1c:	08003e55 	.word	0x08003e55

08003f20 <__sfmoreglue>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2268      	movs	r2, #104	; 0x68
 8003f24:	1e4d      	subs	r5, r1, #1
 8003f26:	4355      	muls	r5, r2
 8003f28:	460e      	mov	r6, r1
 8003f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f2e:	f000 f99f 	bl	8004270 <_malloc_r>
 8003f32:	4604      	mov	r4, r0
 8003f34:	b140      	cbz	r0, 8003f48 <__sfmoreglue+0x28>
 8003f36:	2100      	movs	r1, #0
 8003f38:	e9c0 1600 	strd	r1, r6, [r0]
 8003f3c:	300c      	adds	r0, #12
 8003f3e:	60a0      	str	r0, [r4, #8]
 8003f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f44:	f7ff fd5a 	bl	80039fc <memset>
 8003f48:	4620      	mov	r0, r4
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}

08003f4c <__sfp_lock_acquire>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <__sfp_lock_acquire+0x8>)
 8003f4e:	f000 b8b3 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8003f52:	bf00      	nop
 8003f54:	2000016d 	.word	0x2000016d

08003f58 <__sfp_lock_release>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__sfp_lock_release+0x8>)
 8003f5a:	f000 b8ae 	b.w	80040ba <__retarget_lock_release_recursive>
 8003f5e:	bf00      	nop
 8003f60:	2000016d 	.word	0x2000016d

08003f64 <__sinit_lock_acquire>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sinit_lock_acquire+0x8>)
 8003f66:	f000 b8a7 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	2000016e 	.word	0x2000016e

08003f70 <__sinit_lock_release>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sinit_lock_release+0x8>)
 8003f72:	f000 b8a2 	b.w	80040ba <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	2000016e 	.word	0x2000016e

08003f7c <__sinit>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff fff0 	bl	8003f64 <__sinit_lock_acquire>
 8003f84:	69a3      	ldr	r3, [r4, #24]
 8003f86:	b11b      	cbz	r3, 8003f90 <__sinit+0x14>
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f7ff bff0 	b.w	8003f70 <__sinit_lock_release>
 8003f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f94:	6523      	str	r3, [r4, #80]	; 0x50
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <__sinit+0x68>)
 8003f98:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <__sinit+0x6c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	bf04      	itt	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	61a3      	streq	r3, [r4, #24]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 f820 	bl	8003fec <__sfp>
 8003fac:	6060      	str	r0, [r4, #4]
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f000 f81c 	bl	8003fec <__sfp>
 8003fb4:	60a0      	str	r0, [r4, #8]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f000 f818 	bl	8003fec <__sfp>
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60e0      	str	r0, [r4, #12]
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	6860      	ldr	r0, [r4, #4]
 8003fc4:	f7ff ff82 	bl	8003ecc <std>
 8003fc8:	68a0      	ldr	r0, [r4, #8]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2109      	movs	r1, #9
 8003fce:	f7ff ff7d 	bl	8003ecc <std>
 8003fd2:	68e0      	ldr	r0, [r4, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	2112      	movs	r1, #18
 8003fd8:	f7ff ff78 	bl	8003ecc <std>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61a3      	str	r3, [r4, #24]
 8003fe0:	e7d2      	b.n	8003f88 <__sinit+0xc>
 8003fe2:	bf00      	nop
 8003fe4:	08004b58 	.word	0x08004b58
 8003fe8:	08003f15 	.word	0x08003f15

08003fec <__sfp>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	4607      	mov	r7, r0
 8003ff0:	f7ff ffac 	bl	8003f4c <__sfp_lock_acquire>
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <__sfp+0x84>)
 8003ff6:	681e      	ldr	r6, [r3, #0]
 8003ff8:	69b3      	ldr	r3, [r6, #24]
 8003ffa:	b913      	cbnz	r3, 8004002 <__sfp+0x16>
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f7ff ffbd 	bl	8003f7c <__sinit>
 8004002:	3648      	adds	r6, #72	; 0x48
 8004004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	d503      	bpl.n	8004014 <__sfp+0x28>
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	b30b      	cbz	r3, 8004054 <__sfp+0x68>
 8004010:	6836      	ldr	r6, [r6, #0]
 8004012:	e7f7      	b.n	8004004 <__sfp+0x18>
 8004014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004018:	b9d5      	cbnz	r5, 8004050 <__sfp+0x64>
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <__sfp+0x88>)
 800401c:	60e3      	str	r3, [r4, #12]
 800401e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004022:	6665      	str	r5, [r4, #100]	; 0x64
 8004024:	f000 f847 	bl	80040b6 <__retarget_lock_init_recursive>
 8004028:	f7ff ff96 	bl	8003f58 <__sfp_lock_release>
 800402c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004034:	6025      	str	r5, [r4, #0]
 8004036:	61a5      	str	r5, [r4, #24]
 8004038:	2208      	movs	r2, #8
 800403a:	4629      	mov	r1, r5
 800403c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004040:	f7ff fcdc 	bl	80039fc <memset>
 8004044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800404c:	4620      	mov	r0, r4
 800404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004050:	3468      	adds	r4, #104	; 0x68
 8004052:	e7d9      	b.n	8004008 <__sfp+0x1c>
 8004054:	2104      	movs	r1, #4
 8004056:	4638      	mov	r0, r7
 8004058:	f7ff ff62 	bl	8003f20 <__sfmoreglue>
 800405c:	4604      	mov	r4, r0
 800405e:	6030      	str	r0, [r6, #0]
 8004060:	2800      	cmp	r0, #0
 8004062:	d1d5      	bne.n	8004010 <__sfp+0x24>
 8004064:	f7ff ff78 	bl	8003f58 <__sfp_lock_release>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	e7ee      	b.n	800404c <__sfp+0x60>
 800406e:	bf00      	nop
 8004070:	08004b58 	.word	0x08004b58
 8004074:	ffff0001 	.word	0xffff0001

08004078 <_fwalk_reent>:
 8004078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800407c:	4606      	mov	r6, r0
 800407e:	4688      	mov	r8, r1
 8004080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004084:	2700      	movs	r7, #0
 8004086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800408a:	f1b9 0901 	subs.w	r9, r9, #1
 800408e:	d505      	bpl.n	800409c <_fwalk_reent+0x24>
 8004090:	6824      	ldr	r4, [r4, #0]
 8004092:	2c00      	cmp	r4, #0
 8004094:	d1f7      	bne.n	8004086 <_fwalk_reent+0xe>
 8004096:	4638      	mov	r0, r7
 8004098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800409c:	89ab      	ldrh	r3, [r5, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d907      	bls.n	80040b2 <_fwalk_reent+0x3a>
 80040a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040a6:	3301      	adds	r3, #1
 80040a8:	d003      	beq.n	80040b2 <_fwalk_reent+0x3a>
 80040aa:	4629      	mov	r1, r5
 80040ac:	4630      	mov	r0, r6
 80040ae:	47c0      	blx	r8
 80040b0:	4307      	orrs	r7, r0
 80040b2:	3568      	adds	r5, #104	; 0x68
 80040b4:	e7e9      	b.n	800408a <_fwalk_reent+0x12>

080040b6 <__retarget_lock_init_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <__retarget_lock_acquire_recursive>:
 80040b8:	4770      	bx	lr

080040ba <__retarget_lock_release_recursive>:
 80040ba:	4770      	bx	lr

080040bc <__swhatbuf_r>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c4:	2900      	cmp	r1, #0
 80040c6:	b096      	sub	sp, #88	; 0x58
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	da08      	bge.n	80040e0 <__swhatbuf_r+0x24>
 80040ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	061a      	lsls	r2, r3, #24
 80040d8:	d410      	bmi.n	80040fc <__swhatbuf_r+0x40>
 80040da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040de:	e00e      	b.n	80040fe <__swhatbuf_r+0x42>
 80040e0:	466a      	mov	r2, sp
 80040e2:	f000 fc9d 	bl	8004a20 <_fstat_r>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	dbf1      	blt.n	80040ce <__swhatbuf_r+0x12>
 80040ea:	9a01      	ldr	r2, [sp, #4]
 80040ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040f4:	425a      	negs	r2, r3
 80040f6:	415a      	adcs	r2, r3
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	e7ee      	b.n	80040da <__swhatbuf_r+0x1e>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	2000      	movs	r0, #0
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	b016      	add	sp, #88	; 0x58
 8004104:	bd70      	pop	{r4, r5, r6, pc}
	...

08004108 <__smakebuf_r>:
 8004108:	898b      	ldrh	r3, [r1, #12]
 800410a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800410c:	079d      	lsls	r5, r3, #30
 800410e:	4606      	mov	r6, r0
 8004110:	460c      	mov	r4, r1
 8004112:	d507      	bpl.n	8004124 <__smakebuf_r+0x1c>
 8004114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	2301      	movs	r3, #1
 800411e:	6163      	str	r3, [r4, #20]
 8004120:	b002      	add	sp, #8
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	ab01      	add	r3, sp, #4
 8004126:	466a      	mov	r2, sp
 8004128:	f7ff ffc8 	bl	80040bc <__swhatbuf_r>
 800412c:	9900      	ldr	r1, [sp, #0]
 800412e:	4605      	mov	r5, r0
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f89d 	bl	8004270 <_malloc_r>
 8004136:	b948      	cbnz	r0, 800414c <__smakebuf_r+0x44>
 8004138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413c:	059a      	lsls	r2, r3, #22
 800413e:	d4ef      	bmi.n	8004120 <__smakebuf_r+0x18>
 8004140:	f023 0303 	bic.w	r3, r3, #3
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	e7e3      	b.n	8004114 <__smakebuf_r+0xc>
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <__smakebuf_r+0x7c>)
 800414e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	6020      	str	r0, [r4, #0]
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	9b00      	ldr	r3, [sp, #0]
 800415c:	6163      	str	r3, [r4, #20]
 800415e:	9b01      	ldr	r3, [sp, #4]
 8004160:	6120      	str	r0, [r4, #16]
 8004162:	b15b      	cbz	r3, 800417c <__smakebuf_r+0x74>
 8004164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004168:	4630      	mov	r0, r6
 800416a:	f000 fc6b 	bl	8004a44 <_isatty_r>
 800416e:	b128      	cbz	r0, 800417c <__smakebuf_r+0x74>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	81a3      	strh	r3, [r4, #12]
 800417c:	89a0      	ldrh	r0, [r4, #12]
 800417e:	4305      	orrs	r5, r0
 8004180:	81a5      	strh	r5, [r4, #12]
 8004182:	e7cd      	b.n	8004120 <__smakebuf_r+0x18>
 8004184:	08003f15 	.word	0x08003f15

08004188 <malloc>:
 8004188:	4b02      	ldr	r3, [pc, #8]	; (8004194 <malloc+0xc>)
 800418a:	4601      	mov	r1, r0
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f000 b86f 	b.w	8004270 <_malloc_r>
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c

08004198 <_free_r>:
 8004198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800419a:	2900      	cmp	r1, #0
 800419c:	d044      	beq.n	8004228 <_free_r+0x90>
 800419e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f1a1 0404 	sub.w	r4, r1, #4
 80041aa:	bfb8      	it	lt
 80041ac:	18e4      	addlt	r4, r4, r3
 80041ae:	f000 fc6b 	bl	8004a88 <__malloc_lock>
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <_free_r+0x94>)
 80041b4:	9801      	ldr	r0, [sp, #4]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x30>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	b003      	add	sp, #12
 80041c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041c4:	f000 bc66 	b.w	8004a94 <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x46>
 80041cc:	6825      	ldr	r5, [r4, #0]
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1949      	addeq	r1, r1, r5
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x22>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x50>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x46>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1855      	adds	r5, r2, r1
 80041ec:	42a5      	cmp	r5, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x70>
 80041f0:	6824      	ldr	r4, [r4, #0]
 80041f2:	4421      	add	r1, r4
 80041f4:	1854      	adds	r4, r2, r1
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x26>
 80041fc:	681c      	ldr	r4, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	4421      	add	r1, r4
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	e7da      	b.n	80041be <_free_r+0x26>
 8004208:	d902      	bls.n	8004210 <_free_r+0x78>
 800420a:	230c      	movs	r3, #12
 800420c:	6003      	str	r3, [r0, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x26>
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	1961      	adds	r1, r4, r5
 8004214:	428b      	cmp	r3, r1
 8004216:	bf04      	itt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	bf04      	itt	eq
 8004220:	1949      	addeq	r1, r1, r5
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	6054      	str	r4, [r2, #4]
 8004226:	e7ca      	b.n	80041be <_free_r+0x26>
 8004228:	b003      	add	sp, #12
 800422a:	bd30      	pop	{r4, r5, pc}
 800422c:	20000170 	.word	0x20000170

08004230 <sbrk_aligned>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0e      	ldr	r6, [pc, #56]	; (800426c <sbrk_aligned+0x3c>)
 8004234:	460c      	mov	r4, r1
 8004236:	6831      	ldr	r1, [r6, #0]
 8004238:	4605      	mov	r5, r0
 800423a:	b911      	cbnz	r1, 8004242 <sbrk_aligned+0x12>
 800423c:	f000 fb7a 	bl	8004934 <_sbrk_r>
 8004240:	6030      	str	r0, [r6, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fb75 	bl	8004934 <_sbrk_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d00a      	beq.n	8004264 <sbrk_aligned+0x34>
 800424e:	1cc4      	adds	r4, r0, #3
 8004250:	f024 0403 	bic.w	r4, r4, #3
 8004254:	42a0      	cmp	r0, r4
 8004256:	d007      	beq.n	8004268 <sbrk_aligned+0x38>
 8004258:	1a21      	subs	r1, r4, r0
 800425a:	4628      	mov	r0, r5
 800425c:	f000 fb6a 	bl	8004934 <_sbrk_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d101      	bne.n	8004268 <sbrk_aligned+0x38>
 8004264:	f04f 34ff 	mov.w	r4, #4294967295
 8004268:	4620      	mov	r0, r4
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	20000174 	.word	0x20000174

08004270 <_malloc_r>:
 8004270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4607      	mov	r7, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d905      	bls.n	8004298 <_malloc_r+0x28>
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	2600      	movs	r6, #0
 8004292:	4630      	mov	r0, r6
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	4e2e      	ldr	r6, [pc, #184]	; (8004354 <_malloc_r+0xe4>)
 800429a:	f000 fbf5 	bl	8004a88 <__malloc_lock>
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	461c      	mov	r4, r3
 80042a2:	bb34      	cbnz	r4, 80042f2 <_malloc_r+0x82>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ffc2 	bl	8004230 <sbrk_aligned>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	4604      	mov	r4, r0
 80042b0:	d14d      	bne.n	800434e <_malloc_r+0xde>
 80042b2:	6834      	ldr	r4, [r6, #0]
 80042b4:	4626      	mov	r6, r4
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d140      	bne.n	800433c <_malloc_r+0xcc>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4631      	mov	r1, r6
 80042be:	4638      	mov	r0, r7
 80042c0:	eb04 0803 	add.w	r8, r4, r3
 80042c4:	f000 fb36 	bl	8004934 <_sbrk_r>
 80042c8:	4580      	cmp	r8, r0
 80042ca:	d13a      	bne.n	8004342 <_malloc_r+0xd2>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	3503      	adds	r5, #3
 80042d0:	1a6d      	subs	r5, r5, r1
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	4629      	mov	r1, r5
 80042e0:	4638      	mov	r0, r7
 80042e2:	f7ff ffa5 	bl	8004230 <sbrk_aligned>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d02b      	beq.n	8004342 <_malloc_r+0xd2>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	442b      	add	r3, r5
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	e00e      	b.n	8004310 <_malloc_r+0xa0>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	1b52      	subs	r2, r2, r5
 80042f6:	d41e      	bmi.n	8004336 <_malloc_r+0xc6>
 80042f8:	2a0b      	cmp	r2, #11
 80042fa:	d916      	bls.n	800432a <_malloc_r+0xba>
 80042fc:	1961      	adds	r1, r4, r5
 80042fe:	42a3      	cmp	r3, r4
 8004300:	6025      	str	r5, [r4, #0]
 8004302:	bf18      	it	ne
 8004304:	6059      	strne	r1, [r3, #4]
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	bf08      	it	eq
 800430a:	6031      	streq	r1, [r6, #0]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4638      	mov	r0, r7
 8004312:	f104 060b 	add.w	r6, r4, #11
 8004316:	f000 fbbd 	bl	8004a94 <__malloc_unlock>
 800431a:	f026 0607 	bic.w	r6, r6, #7
 800431e:	1d23      	adds	r3, r4, #4
 8004320:	1af2      	subs	r2, r6, r3
 8004322:	d0b6      	beq.n	8004292 <_malloc_r+0x22>
 8004324:	1b9b      	subs	r3, r3, r6
 8004326:	50a3      	str	r3, [r4, r2]
 8004328:	e7b3      	b.n	8004292 <_malloc_r+0x22>
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	bf0c      	ite	eq
 8004330:	6032      	streq	r2, [r6, #0]
 8004332:	605a      	strne	r2, [r3, #4]
 8004334:	e7ec      	b.n	8004310 <_malloc_r+0xa0>
 8004336:	4623      	mov	r3, r4
 8004338:	6864      	ldr	r4, [r4, #4]
 800433a:	e7b2      	b.n	80042a2 <_malloc_r+0x32>
 800433c:	4634      	mov	r4, r6
 800433e:	6876      	ldr	r6, [r6, #4]
 8004340:	e7b9      	b.n	80042b6 <_malloc_r+0x46>
 8004342:	230c      	movs	r3, #12
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4638      	mov	r0, r7
 8004348:	f000 fba4 	bl	8004a94 <__malloc_unlock>
 800434c:	e7a1      	b.n	8004292 <_malloc_r+0x22>
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	e7de      	b.n	8004310 <_malloc_r+0xa0>
 8004352:	bf00      	nop
 8004354:	20000170 	.word	0x20000170

08004358 <__sfputc_r>:
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	b410      	push	{r4}
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	da08      	bge.n	8004376 <__sfputc_r+0x1e>
 8004364:	6994      	ldr	r4, [r2, #24]
 8004366:	42a3      	cmp	r3, r4
 8004368:	db01      	blt.n	800436e <__sfputc_r+0x16>
 800436a:	290a      	cmp	r1, #10
 800436c:	d103      	bne.n	8004376 <__sfputc_r+0x1e>
 800436e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004372:	f7ff bc29 	b.w	8003bc8 <__swbuf_r>
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	1c58      	adds	r0, r3, #1
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	7019      	strb	r1, [r3, #0]
 800437e:	4608      	mov	r0, r1
 8004380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004384:	4770      	bx	lr

08004386 <__sfputs_r>:
 8004386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	460f      	mov	r7, r1
 800438c:	4614      	mov	r4, r2
 800438e:	18d5      	adds	r5, r2, r3
 8004390:	42ac      	cmp	r4, r5
 8004392:	d101      	bne.n	8004398 <__sfputs_r+0x12>
 8004394:	2000      	movs	r0, #0
 8004396:	e007      	b.n	80043a8 <__sfputs_r+0x22>
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	463a      	mov	r2, r7
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ffda 	bl	8004358 <__sfputc_r>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d1f3      	bne.n	8004390 <__sfputs_r+0xa>
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ac <_vfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	460d      	mov	r5, r1
 80043b2:	b09d      	sub	sp, #116	; 0x74
 80043b4:	4614      	mov	r4, r2
 80043b6:	4698      	mov	r8, r3
 80043b8:	4606      	mov	r6, r0
 80043ba:	b118      	cbz	r0, 80043c4 <_vfiprintf_r+0x18>
 80043bc:	6983      	ldr	r3, [r0, #24]
 80043be:	b90b      	cbnz	r3, 80043c4 <_vfiprintf_r+0x18>
 80043c0:	f7ff fddc 	bl	8003f7c <__sinit>
 80043c4:	4b89      	ldr	r3, [pc, #548]	; (80045ec <_vfiprintf_r+0x240>)
 80043c6:	429d      	cmp	r5, r3
 80043c8:	d11b      	bne.n	8004402 <_vfiprintf_r+0x56>
 80043ca:	6875      	ldr	r5, [r6, #4]
 80043cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ce:	07d9      	lsls	r1, r3, #31
 80043d0:	d405      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d2:	89ab      	ldrh	r3, [r5, #12]
 80043d4:	059a      	lsls	r2, r3, #22
 80043d6:	d402      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043da:	f7ff fe6d 	bl	80040b8 <__retarget_lock_acquire_recursive>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	d501      	bpl.n	80043e8 <_vfiprintf_r+0x3c>
 80043e4:	692b      	ldr	r3, [r5, #16]
 80043e6:	b9eb      	cbnz	r3, 8004424 <_vfiprintf_r+0x78>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff fc3e 	bl	8003c6c <__swsetup_r>
 80043f0:	b1c0      	cbz	r0, 8004424 <_vfiprintf_r+0x78>
 80043f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f4:	07dc      	lsls	r4, r3, #31
 80043f6:	d50e      	bpl.n	8004416 <_vfiprintf_r+0x6a>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	b01d      	add	sp, #116	; 0x74
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <_vfiprintf_r+0x244>)
 8004404:	429d      	cmp	r5, r3
 8004406:	d101      	bne.n	800440c <_vfiprintf_r+0x60>
 8004408:	68b5      	ldr	r5, [r6, #8]
 800440a:	e7df      	b.n	80043cc <_vfiprintf_r+0x20>
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <_vfiprintf_r+0x248>)
 800440e:	429d      	cmp	r5, r3
 8004410:	bf08      	it	eq
 8004412:	68f5      	ldreq	r5, [r6, #12]
 8004414:	e7da      	b.n	80043cc <_vfiprintf_r+0x20>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4ed      	bmi.n	80043f8 <_vfiprintf_r+0x4c>
 800441c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800441e:	f7ff fe4c 	bl	80040ba <__retarget_lock_release_recursive>
 8004422:	e7e9      	b.n	80043f8 <_vfiprintf_r+0x4c>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	; 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	; 0x30
 8004434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045f8 <_vfiprintf_r+0x24c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0xa2>
 800444a:	2a25      	cmp	r2, #37	; 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x96>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xc0>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ff93 	bl	8004386 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80aa 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	; 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a2 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448c:	931a      	str	r3, [sp, #104]	; 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4858      	ldr	r0, [pc, #352]	; (80045f8 <_vfiprintf_r+0x24c>)
 8004498:	f7fb feda 	bl	8000250 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x12c>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	; 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x13c>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	; 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94e      	bls.n	8004570 <_vfiprintf_r+0x1c4>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x156>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x156>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xe2>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	; 0x2e
 8004506:	d10c      	bne.n	8004522 <_vfiprintf_r+0x176>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	; 0x2a
 800450c:	d135      	bne.n	800457a <_vfiprintf_r+0x1ce>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	f04f 33ff 	movlt.w	r3, #4294967295
 800451e:	3402      	adds	r4, #2
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004608 <_vfiprintf_r+0x25c>
 8004526:	7821      	ldrb	r1, [r4, #0]
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	f7fb fe90 	bl	8000250 <memchr>
 8004530:	b140      	cbz	r0, 8004544 <_vfiprintf_r+0x198>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	eba0 000a 	sub.w	r0, r0, sl
 8004538:	fa03 f000 	lsl.w	r0, r3, r0
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	4303      	orrs	r3, r0
 8004540:	3401      	adds	r4, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004548:	482c      	ldr	r0, [pc, #176]	; (80045fc <_vfiprintf_r+0x250>)
 800454a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800454e:	2206      	movs	r2, #6
 8004550:	f7fb fe7e 	bl	8000250 <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d03f      	beq.n	80045d8 <_vfiprintf_r+0x22c>
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <_vfiprintf_r+0x254>)
 800455a:	bb1b      	cbnz	r3, 80045a4 <_vfiprintf_r+0x1f8>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	9303      	str	r3, [sp, #12]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	443b      	add	r3, r7
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	e767      	b.n	8004440 <_vfiprintf_r+0x94>
 8004570:	fb0c 3202 	mla	r2, ip, r2, r3
 8004574:	460c      	mov	r4, r1
 8004576:	2001      	movs	r0, #1
 8004578:	e7a5      	b.n	80044c6 <_vfiprintf_r+0x11a>
 800457a:	2300      	movs	r3, #0
 800457c:	3401      	adds	r4, #1
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	4619      	mov	r1, r3
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4620      	mov	r0, r4
 8004588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458c:	3a30      	subs	r2, #48	; 0x30
 800458e:	2a09      	cmp	r2, #9
 8004590:	d903      	bls.n	800459a <_vfiprintf_r+0x1ee>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c5      	beq.n	8004522 <_vfiprintf_r+0x176>
 8004596:	9105      	str	r1, [sp, #20]
 8004598:	e7c3      	b.n	8004522 <_vfiprintf_r+0x176>
 800459a:	fb0c 2101 	mla	r1, ip, r1, r2
 800459e:	4604      	mov	r4, r0
 80045a0:	2301      	movs	r3, #1
 80045a2:	e7f0      	b.n	8004586 <_vfiprintf_r+0x1da>
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	462a      	mov	r2, r5
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <_vfiprintf_r+0x258>)
 80045ac:	a904      	add	r1, sp, #16
 80045ae:	4630      	mov	r0, r6
 80045b0:	f3af 8000 	nop.w
 80045b4:	4607      	mov	r7, r0
 80045b6:	1c78      	adds	r0, r7, #1
 80045b8:	d1d6      	bne.n	8004568 <_vfiprintf_r+0x1bc>
 80045ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045bc:	07d9      	lsls	r1, r3, #31
 80045be:	d405      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c0:	89ab      	ldrh	r3, [r5, #12]
 80045c2:	059a      	lsls	r2, r3, #22
 80045c4:	d402      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045c8:	f7ff fd77 	bl	80040ba <__retarget_lock_release_recursive>
 80045cc:	89ab      	ldrh	r3, [r5, #12]
 80045ce:	065b      	lsls	r3, r3, #25
 80045d0:	f53f af12 	bmi.w	80043f8 <_vfiprintf_r+0x4c>
 80045d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d6:	e711      	b.n	80043fc <_vfiprintf_r+0x50>
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	462a      	mov	r2, r5
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <_vfiprintf_r+0x258>)
 80045e0:	a904      	add	r1, sp, #16
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f880 	bl	80046e8 <_printf_i>
 80045e8:	e7e4      	b.n	80045b4 <_vfiprintf_r+0x208>
 80045ea:	bf00      	nop
 80045ec:	08004b7c 	.word	0x08004b7c
 80045f0:	08004b9c 	.word	0x08004b9c
 80045f4:	08004b5c 	.word	0x08004b5c
 80045f8:	08004bbc 	.word	0x08004bbc
 80045fc:	08004bc6 	.word	0x08004bc6
 8004600:	00000000 	.word	0x00000000
 8004604:	08004387 	.word	0x08004387
 8004608:	08004bc2 	.word	0x08004bc2

0800460c <_printf_common>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	4616      	mov	r6, r2
 8004612:	4699      	mov	r9, r3
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800461c:	4293      	cmp	r3, r2
 800461e:	bfb8      	it	lt
 8004620:	4613      	movlt	r3, r2
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004628:	4607      	mov	r7, r0
 800462a:	460c      	mov	r4, r1
 800462c:	b10a      	cbz	r2, 8004632 <_printf_common+0x26>
 800462e:	3301      	adds	r3, #1
 8004630:	6033      	str	r3, [r6, #0]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	0699      	lsls	r1, r3, #26
 8004636:	bf42      	ittt	mi
 8004638:	6833      	ldrmi	r3, [r6, #0]
 800463a:	3302      	addmi	r3, #2
 800463c:	6033      	strmi	r3, [r6, #0]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	f015 0506 	ands.w	r5, r5, #6
 8004644:	d106      	bne.n	8004654 <_printf_common+0x48>
 8004646:	f104 0a19 	add.w	sl, r4, #25
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	6832      	ldr	r2, [r6, #0]
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	42ab      	cmp	r3, r5
 8004652:	dc26      	bgt.n	80046a2 <_printf_common+0x96>
 8004654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004658:	1e13      	subs	r3, r2, #0
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	2301      	movne	r3, #1
 8004660:	0692      	lsls	r2, r2, #26
 8004662:	d42b      	bmi.n	80046bc <_printf_common+0xb0>
 8004664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d01e      	beq.n	80046b0 <_printf_common+0xa4>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	68e5      	ldr	r5, [r4, #12]
 8004676:	6832      	ldr	r2, [r6, #0]
 8004678:	f003 0306 	and.w	r3, r3, #6
 800467c:	2b04      	cmp	r3, #4
 800467e:	bf08      	it	eq
 8004680:	1aad      	subeq	r5, r5, r2
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	bf0c      	ite	eq
 8004688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800468c:	2500      	movne	r5, #0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfc4      	itt	gt
 8004692:	1a9b      	subgt	r3, r3, r2
 8004694:	18ed      	addgt	r5, r5, r3
 8004696:	2600      	movs	r6, #0
 8004698:	341a      	adds	r4, #26
 800469a:	42b5      	cmp	r5, r6
 800469c:	d11a      	bne.n	80046d4 <_printf_common+0xc8>
 800469e:	2000      	movs	r0, #0
 80046a0:	e008      	b.n	80046b4 <_printf_common+0xa8>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4649      	mov	r1, r9
 80046a8:	4638      	mov	r0, r7
 80046aa:	47c0      	blx	r8
 80046ac:	3001      	adds	r0, #1
 80046ae:	d103      	bne.n	80046b8 <_printf_common+0xac>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	3501      	adds	r5, #1
 80046ba:	e7c6      	b.n	800464a <_printf_common+0x3e>
 80046bc:	18e1      	adds	r1, r4, r3
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	2030      	movs	r0, #48	; 0x30
 80046c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046c6:	4422      	add	r2, r4
 80046c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d0:	3302      	adds	r3, #2
 80046d2:	e7c7      	b.n	8004664 <_printf_common+0x58>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4622      	mov	r2, r4
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	47c0      	blx	r8
 80046de:	3001      	adds	r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa4>
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7d9      	b.n	800469a <_printf_common+0x8e>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	7e0f      	ldrb	r7, [r1, #24]
 80046ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046f0:	2f78      	cmp	r7, #120	; 0x78
 80046f2:	4691      	mov	r9, r2
 80046f4:	4680      	mov	r8, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	469a      	mov	sl, r3
 80046fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046fe:	d807      	bhi.n	8004710 <_printf_i+0x28>
 8004700:	2f62      	cmp	r7, #98	; 0x62
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x32>
 8004704:	2f00      	cmp	r7, #0
 8004706:	f000 80d8 	beq.w	80048ba <_printf_i+0x1d2>
 800470a:	2f58      	cmp	r7, #88	; 0x58
 800470c:	f000 80a3 	beq.w	8004856 <_printf_i+0x16e>
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004718:	e03a      	b.n	8004790 <_printf_i+0xa8>
 800471a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800471e:	2b15      	cmp	r3, #21
 8004720:	d8f6      	bhi.n	8004710 <_printf_i+0x28>
 8004722:	a101      	add	r1, pc, #4	; (adr r1, 8004728 <_printf_i+0x40>)
 8004724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004728:	08004781 	.word	0x08004781
 800472c:	08004795 	.word	0x08004795
 8004730:	08004711 	.word	0x08004711
 8004734:	08004711 	.word	0x08004711
 8004738:	08004711 	.word	0x08004711
 800473c:	08004711 	.word	0x08004711
 8004740:	08004795 	.word	0x08004795
 8004744:	08004711 	.word	0x08004711
 8004748:	08004711 	.word	0x08004711
 800474c:	08004711 	.word	0x08004711
 8004750:	08004711 	.word	0x08004711
 8004754:	080048a1 	.word	0x080048a1
 8004758:	080047c5 	.word	0x080047c5
 800475c:	08004883 	.word	0x08004883
 8004760:	08004711 	.word	0x08004711
 8004764:	08004711 	.word	0x08004711
 8004768:	080048c3 	.word	0x080048c3
 800476c:	08004711 	.word	0x08004711
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004711 	.word	0x08004711
 8004778:	08004711 	.word	0x08004711
 800477c:	0800488b 	.word	0x0800488b
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e0a3      	b.n	80048dc <_printf_i+0x1f4>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	0606      	lsls	r6, r0, #24
 800479a:	f101 0304 	add.w	r3, r1, #4
 800479e:	d50a      	bpl.n	80047b6 <_printf_i+0xce>
 80047a0:	680e      	ldr	r6, [r1, #0]
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xc8>
 80047a8:	232d      	movs	r3, #45	; 0x2d
 80047aa:	4276      	negs	r6, r6
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b0:	485e      	ldr	r0, [pc, #376]	; (800492c <_printf_i+0x244>)
 80047b2:	230a      	movs	r3, #10
 80047b4:	e019      	b.n	80047ea <_printf_i+0x102>
 80047b6:	680e      	ldr	r6, [r1, #0]
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047be:	bf18      	it	ne
 80047c0:	b236      	sxthne	r6, r6
 80047c2:	e7ef      	b.n	80047a4 <_printf_i+0xbc>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	6029      	str	r1, [r5, #0]
 80047cc:	0601      	lsls	r1, r0, #24
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0xec>
 80047d0:	681e      	ldr	r6, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0xf2>
 80047d4:	0646      	lsls	r6, r0, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0xe8>
 80047d8:	881e      	ldrh	r6, [r3, #0]
 80047da:	4854      	ldr	r0, [pc, #336]	; (800492c <_printf_i+0x244>)
 80047dc:	2f6f      	cmp	r7, #111	; 0x6f
 80047de:	bf0c      	ite	eq
 80047e0:	2308      	moveq	r3, #8
 80047e2:	230a      	movne	r3, #10
 80047e4:	2100      	movs	r1, #0
 80047e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ea:	6865      	ldr	r5, [r4, #4]
 80047ec:	60a5      	str	r5, [r4, #8]
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	bfa2      	ittt	ge
 80047f2:	6821      	ldrge	r1, [r4, #0]
 80047f4:	f021 0104 	bicge.w	r1, r1, #4
 80047f8:	6021      	strge	r1, [r4, #0]
 80047fa:	b90e      	cbnz	r6, 8004800 <_printf_i+0x118>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d04d      	beq.n	800489c <_printf_i+0x1b4>
 8004800:	4615      	mov	r5, r2
 8004802:	fbb6 f1f3 	udiv	r1, r6, r3
 8004806:	fb03 6711 	mls	r7, r3, r1, r6
 800480a:	5dc7      	ldrb	r7, [r0, r7]
 800480c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004810:	4637      	mov	r7, r6
 8004812:	42bb      	cmp	r3, r7
 8004814:	460e      	mov	r6, r1
 8004816:	d9f4      	bls.n	8004802 <_printf_i+0x11a>
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <_printf_i+0x14c>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07de      	lsls	r6, r3, #31
 8004820:	d508      	bpl.n	8004834 <_printf_i+0x14c>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6861      	ldr	r1, [r4, #4]
 8004826:	4299      	cmp	r1, r3
 8004828:	bfde      	ittt	le
 800482a:	2330      	movle	r3, #48	; 0x30
 800482c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004834:	1b52      	subs	r2, r2, r5
 8004836:	6122      	str	r2, [r4, #16]
 8004838:	f8cd a000 	str.w	sl, [sp]
 800483c:	464b      	mov	r3, r9
 800483e:	aa03      	add	r2, sp, #12
 8004840:	4621      	mov	r1, r4
 8004842:	4640      	mov	r0, r8
 8004844:	f7ff fee2 	bl	800460c <_printf_common>
 8004848:	3001      	adds	r0, #1
 800484a:	d14c      	bne.n	80048e6 <_printf_i+0x1fe>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	b004      	add	sp, #16
 8004852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004856:	4835      	ldr	r0, [pc, #212]	; (800492c <_printf_i+0x244>)
 8004858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800485c:	6829      	ldr	r1, [r5, #0]
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	f851 6b04 	ldr.w	r6, [r1], #4
 8004864:	6029      	str	r1, [r5, #0]
 8004866:	061d      	lsls	r5, r3, #24
 8004868:	d514      	bpl.n	8004894 <_printf_i+0x1ac>
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	bf44      	itt	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6023      	strmi	r3, [r4, #0]
 8004874:	b91e      	cbnz	r6, 800487e <_printf_i+0x196>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	f023 0320 	bic.w	r3, r3, #32
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	2310      	movs	r3, #16
 8004880:	e7b0      	b.n	80047e4 <_printf_i+0xfc>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	f043 0320 	orr.w	r3, r3, #32
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	2378      	movs	r3, #120	; 0x78
 800488c:	4828      	ldr	r0, [pc, #160]	; (8004930 <_printf_i+0x248>)
 800488e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004892:	e7e3      	b.n	800485c <_printf_i+0x174>
 8004894:	0659      	lsls	r1, r3, #25
 8004896:	bf48      	it	mi
 8004898:	b2b6      	uxthmi	r6, r6
 800489a:	e7e6      	b.n	800486a <_printf_i+0x182>
 800489c:	4615      	mov	r5, r2
 800489e:	e7bb      	b.n	8004818 <_printf_i+0x130>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	6826      	ldr	r6, [r4, #0]
 80048a4:	6961      	ldr	r1, [r4, #20]
 80048a6:	1d18      	adds	r0, r3, #4
 80048a8:	6028      	str	r0, [r5, #0]
 80048aa:	0635      	lsls	r5, r6, #24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0x1cc>
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0x1d2>
 80048b4:	0670      	lsls	r0, r6, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0x1c8>
 80048b8:	8019      	strh	r1, [r3, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	4615      	mov	r5, r2
 80048c0:	e7ba      	b.n	8004838 <_printf_i+0x150>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	602a      	str	r2, [r5, #0]
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	2100      	movs	r1, #0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7fb fcbe 	bl	8000250 <memchr>
 80048d4:	b108      	cbz	r0, 80048da <_printf_i+0x1f2>
 80048d6:	1b40      	subs	r0, r0, r5
 80048d8:	6060      	str	r0, [r4, #4]
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	2300      	movs	r3, #0
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e4:	e7a8      	b.n	8004838 <_printf_i+0x150>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0ab      	beq.n	800484c <_printf_i+0x164>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	079b      	lsls	r3, r3, #30
 80048f8:	d413      	bmi.n	8004922 <_printf_i+0x23a>
 80048fa:	68e0      	ldr	r0, [r4, #12]
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	4298      	cmp	r0, r3
 8004900:	bfb8      	it	lt
 8004902:	4618      	movlt	r0, r3
 8004904:	e7a4      	b.n	8004850 <_printf_i+0x168>
 8004906:	2301      	movs	r3, #1
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d09b      	beq.n	800484c <_printf_i+0x164>
 8004914:	3501      	adds	r5, #1
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	1a5b      	subs	r3, r3, r1
 800491c:	42ab      	cmp	r3, r5
 800491e:	dcf2      	bgt.n	8004906 <_printf_i+0x21e>
 8004920:	e7eb      	b.n	80048fa <_printf_i+0x212>
 8004922:	2500      	movs	r5, #0
 8004924:	f104 0619 	add.w	r6, r4, #25
 8004928:	e7f5      	b.n	8004916 <_printf_i+0x22e>
 800492a:	bf00      	nop
 800492c:	08004bcd 	.word	0x08004bcd
 8004930:	08004bde 	.word	0x08004bde

08004934 <_sbrk_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d06      	ldr	r5, [pc, #24]	; (8004950 <_sbrk_r+0x1c>)
 8004938:	2300      	movs	r3, #0
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	602b      	str	r3, [r5, #0]
 8004940:	f7fc fac2 	bl	8000ec8 <_sbrk>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d102      	bne.n	800494e <_sbrk_r+0x1a>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b103      	cbz	r3, 800494e <_sbrk_r+0x1a>
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	20000178 	.word	0x20000178

08004954 <__sread>:
 8004954:	b510      	push	{r4, lr}
 8004956:	460c      	mov	r4, r1
 8004958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495c:	f000 f8a0 	bl	8004aa0 <_read_r>
 8004960:	2800      	cmp	r0, #0
 8004962:	bfab      	itete	ge
 8004964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004966:	89a3      	ldrhlt	r3, [r4, #12]
 8004968:	181b      	addge	r3, r3, r0
 800496a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800496e:	bfac      	ite	ge
 8004970:	6563      	strge	r3, [r4, #84]	; 0x54
 8004972:	81a3      	strhlt	r3, [r4, #12]
 8004974:	bd10      	pop	{r4, pc}

08004976 <__swrite>:
 8004976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497a:	461f      	mov	r7, r3
 800497c:	898b      	ldrh	r3, [r1, #12]
 800497e:	05db      	lsls	r3, r3, #23
 8004980:	4605      	mov	r5, r0
 8004982:	460c      	mov	r4, r1
 8004984:	4616      	mov	r6, r2
 8004986:	d505      	bpl.n	8004994 <__swrite+0x1e>
 8004988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498c:	2302      	movs	r3, #2
 800498e:	2200      	movs	r2, #0
 8004990:	f000 f868 	bl	8004a64 <_lseek_r>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800499a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	4628      	mov	r0, r5
 80049a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049aa:	f000 b817 	b.w	80049dc <_write_r>

080049ae <__sseek>:
 80049ae:	b510      	push	{r4, lr}
 80049b0:	460c      	mov	r4, r1
 80049b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b6:	f000 f855 	bl	8004a64 <_lseek_r>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	bf15      	itete	ne
 80049c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80049c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049ca:	81a3      	strheq	r3, [r4, #12]
 80049cc:	bf18      	it	ne
 80049ce:	81a3      	strhne	r3, [r4, #12]
 80049d0:	bd10      	pop	{r4, pc}

080049d2 <__sclose>:
 80049d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d6:	f000 b813 	b.w	8004a00 <_close_r>
	...

080049dc <_write_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	; (80049fc <_write_r+0x20>)
 80049e0:	4604      	mov	r4, r0
 80049e2:	4608      	mov	r0, r1
 80049e4:	4611      	mov	r1, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc f908 	bl	8000c00 <_write>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_write_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_write_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000178 	.word	0x20000178

08004a00 <_close_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_close_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc f924 	bl	8000c58 <_close>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_close_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_close_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	20000178 	.word	0x20000178

08004a20 <_fstat_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4d07      	ldr	r5, [pc, #28]	; (8004a40 <_fstat_r+0x20>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	f7fc f963 	bl	8000cf8 <_fstat>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	d102      	bne.n	8004a3c <_fstat_r+0x1c>
 8004a36:	682b      	ldr	r3, [r5, #0]
 8004a38:	b103      	cbz	r3, 8004a3c <_fstat_r+0x1c>
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000178 	.word	0x20000178

08004a44 <_isatty_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d06      	ldr	r5, [pc, #24]	; (8004a60 <_isatty_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fc f8c0 	bl	8000bd4 <_isatty>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_isatty_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_isatty_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000178 	.word	0x20000178

08004a64 <_lseek_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d07      	ldr	r5, [pc, #28]	; (8004a84 <_lseek_r+0x20>)
 8004a68:	4604      	mov	r4, r0
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	602a      	str	r2, [r5, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f7fc f907 	bl	8000c86 <_lseek>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_lseek_r+0x1e>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_lseek_r+0x1e>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000178 	.word	0x20000178

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff bb15 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	2000016c 	.word	0x2000016c

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff bb10 	b.w	80040ba <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	2000016c 	.word	0x2000016c

08004aa0 <_read_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	; (8004ac0 <_read_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fc f8fa 	bl	8000ca8 <_read>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_read_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_read_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000178 	.word	0x20000178

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
