
Recibir_Comandos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bd0  080103e0  080103e0  000203e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fb0  08012fb0  000309bc  2**0
                  CONTENTS
  4 .ARM          00000008  08012fb0  08012fb0  00022fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fb8  08012fb8  000309bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012fb8  08012fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fc0  08012fc0  00022fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  08012fc4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200009bc  08013980  000309bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08013980  00030b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f9  00000000  00000000  000309ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  00045ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  000481d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  000492e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296e6  00000000  00000000  0004a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cf7  00000000  00000000  000739ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe9b4  00000000  00000000  000896c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a8  00000000  00000000  001880cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0018e774  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0018e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009bc 	.word	0x200009bc
 800021c:	00000000 	.word	0x00000000
 8000220:	080103c4 	.word	0x080103c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009c0 	.word	0x200009c0
 800023c:	080103c4 	.word	0x080103c4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <Saludo>:

/**
 *
 */

void Saludo(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	printf("\x1b[2J"); //Clear the screen
 80009e0:	4814      	ldr	r0, [pc, #80]	; (8000a34 <Saludo+0x58>)
 80009e2:	f006 f88f 	bl	8006b04 <printf>
	printf("\n\r***************************************************************");
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <Saludo+0x5c>)
 80009e8:	f006 f88c 	bl	8006b04 <printf>
	printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <Saludo+0x60>)
 80009ee:	f006 f889 	bl	8006b04 <printf>
	printf("\n\r*                    DMIC - B - 2022                          *");
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <Saludo+0x64>)
 80009f4:	f006 f886 	bl	8006b04 <printf>
	printf("\n\r*\t Jose De La Hoz                                       *");
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <Saludo+0x68>)
 80009fa:	f006 f883 	bl	8006b04 <printf>
	printf("\n\r*\t Jhan Carlos Reyes                                    *");
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <Saludo+0x6c>)
 8000a00:	f006 f880 	bl	8006b04 <printf>
	printf("\n\r*\t Esneider Silva                                       *");
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Saludo+0x70>)
 8000a06:	f006 f87d 	bl	8006b04 <printf>
	printf("\n\r*\t\t'GENERADOR DE NUMEROS PSEUDOALEATORIO'        *");
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <Saludo+0x74>)
 8000a0c:	f006 f87a 	bl	8006b04 <printf>
	printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <Saludo+0x78>)
 8000a12:	f006 f877 	bl	8006b04 <printf>
	printf("\n\r***************************************************************");
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <Saludo+0x5c>)
 8000a18:	f006 f874 	bl	8006b04 <printf>
	printf("\r\n");
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <Saludo+0x7c>)
 8000a1e:	f006 f8c9 	bl	8006bb4 <puts>
	printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <Saludo+0x80>)
 8000a24:	f006 f86e 	bl	8006b04 <printf>
	printf("\r\n");
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <Saludo+0x7c>)
 8000a2a:	f006 f8c3 	bl	8006bb4 <puts>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	080103e0 	.word	0x080103e0
 8000a38:	080103e8 	.word	0x080103e8
 8000a3c:	0801042c 	.word	0x0801042c
 8000a40:	08010470 	.word	0x08010470
 8000a44:	080104b4 	.word	0x080104b4
 8000a48:	080104f0 	.word	0x080104f0
 8000a4c:	0801052c 	.word	0x0801052c
 8000a50:	08010568 	.word	0x08010568
 8000a54:	080105a0 	.word	0x080105a0
 8000a58:	080105e4 	.word	0x080105e4
 8000a5c:	080105e8 	.word	0x080105e8

08000a60 <Help>:
    printf("\r\n");
    printf("\r\nDato ingresado invalido !!!");

}

void Help(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	printf("\n\rPara mÃ¡s informaciÃ³n de un comando especÃ­fico, escriba 'help <comando>'");
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <Help+0x40>)
 8000a66:	f006 f84d 	bl	8006b04 <printf>
	printf("\n\r Donde <comando> es uno de los siguientes:");
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <Help+0x44>)
 8000a6c:	f006 f84a 	bl	8006b04 <printf>
	printf("\n\r\t ledc");
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <Help+0x48>)
 8000a72:	f006 f847 	bl	8006b04 <printf>
	printf("\n\r\t lfsr");
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <Help+0x4c>)
 8000a78:	f006 f844 	bl	8006b04 <printf>
	printf("\n\r\t time");
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <Help+0x50>)
 8000a7e:	f006 f841 	bl	8006b04 <printf>
	printf("\n\r\t temp");
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <Help+0x54>)
 8000a84:	f006 f83e 	bl	8006b04 <printf>
	printf("\n\r\t rege");
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <Help+0x58>)
 8000a8a:	f006 f83b 	bl	8006b04 <printf>
	printf("\n\r\t prin");
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <Help+0x5c>)
 8000a90:	f006 f838 	bl	8006b04 <printf>
	printf("\r\n");
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <Help+0x60>)
 8000a96:	f006 f88d 	bl	8006bb4 <puts>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08010718 	.word	0x08010718
 8000aa4:	0801076c 	.word	0x0801076c
 8000aa8:	0801079c 	.word	0x0801079c
 8000aac:	080107a8 	.word	0x080107a8
 8000ab0:	080107b4 	.word	0x080107b4
 8000ab4:	080107c0 	.word	0x080107c0
 8000ab8:	080107cc 	.word	0x080107cc
 8000abc:	080107d8 	.word	0x080107d8
 8000ac0:	080105e4 	.word	0x080105e4

08000ac4 <H_Ledc>:

void H_Ledc(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	printf("\n\r Hace titilar un led a una velocidad configurable.");
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <H_Ledc+0x28>)
 8000aca:	f006 f81b 	bl	8006b04 <printf>
	printf("\n\r ledcontrol <argumento>");
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <H_Ledc+0x2c>)
 8000ad0:	f006 f818 	bl	8006b04 <printf>
	printf("\n\r\t    argumento\t determina la frecuencia de encendido y apagado del led (0.1, 0.2,..., 1,.., 10) Hz");
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <H_Ledc+0x30>)
 8000ad6:	f006 f815 	bl	8006b04 <printf>
	printf("\n\r\t    los posibles valores del argumento estÃ¡n entre 1 y 100");
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <H_Ledc+0x34>)
 8000adc:	f006 f812 	bl	8006b04 <printf>
	printf("\r\n");
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <H_Ledc+0x38>)
 8000ae2:	f006 f867 	bl	8006bb4 <puts>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	080107e4 	.word	0x080107e4
 8000af0:	0801081c 	.word	0x0801081c
 8000af4:	08010838 	.word	0x08010838
 8000af8:	080108a0 	.word	0x080108a0
 8000afc:	080105e4 	.word	0x080105e4

08000b00 <H_Time>:




void H_Time(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	printf("\n\r Toma la fecha y hora del RTC y lo presenta en pantalla.");
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <H_Time+0x20>)
 8000b06:	f005 fffd 	bl	8006b04 <printf>
	printf("\n\r\t tiempo [vacio]");
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <H_Time+0x24>)
 8000b0c:	f005 fffa 	bl	8006b04 <printf>
	printf("\n\r\t\t  este comando no requiere de un argumentos");
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <H_Time+0x28>)
 8000b12:	f005 fff7 	bl	8006b04 <printf>
	printf("\r\n");
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <H_Time+0x2c>)
 8000b18:	f006 f84c 	bl	8006bb4 <puts>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080108e4 	.word	0x080108e4
 8000b24:	08010920 	.word	0x08010920
 8000b28:	08010934 	.word	0x08010934
 8000b2c:	080105e4 	.word	0x080105e4

08000b30 <H_Temp>:

void H_Temp(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	printf("\n\r Toma la temperatura del perifÃ©rico de la tarjeta nÃºcleo y la presenta en la terminal.");
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <H_Temp+0x20>)
 8000b36:	f005 ffe5 	bl	8006b04 <printf>
	printf("\n\r\t temp [vacio]");
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <H_Temp+0x24>)
 8000b3c:	f005 ffe2 	bl	8006b04 <printf>
	printf("\n\r\t\t este comando no requiere de un argumentos");
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <H_Temp+0x28>)
 8000b42:	f005 ffdf 	bl	8006b04 <printf>
	printf("\r\n");
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <H_Temp+0x2c>)
 8000b48:	f006 f834 	bl	8006bb4 <puts>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08010964 	.word	0x08010964
 8000b54:	080109c4 	.word	0x080109c4
 8000b58:	080109d8 	.word	0x080109d8
 8000b5c:	080105e4 	.word	0x080105e4

08000b60 <H_Rege>:

void H_Rege(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	printf("\n\r Permite gestionar los registros de ejecuciÃ³n almacenados en la memoria no volÃ¡til.");
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <H_Rege+0x2c>)
 8000b66:	f005 ffcd 	bl	8006b04 <printf>
	printf("\n\r\t rege <argumento>");
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <H_Rege+0x30>)
 8000b6c:	f005 ffca 	bl	8006b04 <printf>
	printf("\n\r\t\t    r  permite leer los datos guardados en los registros");
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <H_Rege+0x34>)
 8000b72:	f005 ffc7 	bl	8006b04 <printf>
	printf("\n\r\t\t    w  permite modificar o escribir por primera vez en los registros");
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <H_Rege+0x38>)
 8000b78:	f005 ffc4 	bl	8006b04 <printf>
	printf("\n\r\t\t    s  muestra el estado de los registros");
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <H_Rege+0x3c>)
 8000b7e:	f005 ffc1 	bl	8006b04 <printf>
	printf("\r\n");
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <H_Rege+0x40>)
 8000b84:	f006 f816 	bl	8006bb4 <puts>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08010a08 	.word	0x08010a08
 8000b90:	08010a64 	.word	0x08010a64
 8000b94:	08010a7c 	.word	0x08010a7c
 8000b98:	08010abc 	.word	0x08010abc
 8000b9c:	08010b08 	.word	0x08010b08
 8000ba0:	080105e4 	.word	0x080105e4

08000ba4 <H_Prin>:

void H_Prin(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	printf("\n\r Permite determinar si durante la ejecuciÃ³n de al secuencia pseudoaleatoria se imprimen");
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <H_Prin+0x2c>)
 8000baa:	f005 ffab 	bl	8006b04 <printf>
	printf("\n\r los nÃºmeros o solo se indica que se estÃ¡ corriendo la secuencia.");
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <H_Prin+0x30>)
 8000bb0:	f005 ffa8 	bl	8006b04 <printf>
	printf("\n\r\t impresion <argumento>");
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <H_Prin+0x34>)
 8000bb6:	f005 ffa5 	bl	8006b04 <printf>
	printf("\n\r\t\t    d deshabilita la impresiÃ³n de los nÃºmeros de la secuencia y emite una seÃ±al de ejecuciÃ³n");
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <H_Prin+0x38>)
 8000bbc:	f005 ffa2 	bl	8006b04 <printf>
	printf("\n\r\t\t    e  habilita la impresiÃ³n de los nÃºmeros de la secuencia");
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <H_Prin+0x3c>)
 8000bc2:	f005 ff9f 	bl	8006b04 <printf>
	printf("\r\n");
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <H_Prin+0x40>)
 8000bc8:	f005 fff4 	bl	8006bb4 <puts>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08010b38 	.word	0x08010b38
 8000bd4:	08010b98 	.word	0x08010b98
 8000bd8:	08010be4 	.word	0x08010be4
 8000bdc:	08010c00 	.word	0x08010c00
 8000be0:	08010c70 	.word	0x08010c70
 8000be4:	080105e4 	.word	0x080105e4

08000be8 <H_Lfsr>:

void H_Lfsr(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	printf("\n\r Genera una secuencia de números pseudoaleatorios.");
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <H_Lfsr+0x2c>)
 8000bee:	f005 ff89 	bl	8006b04 <printf>
	printf("\n\r LFSR <argumento>");
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <H_Lfsr+0x30>)
 8000bf4:	f005 ff86 	bl	8006b04 <printf>
	printf("\n\r\t argumento:\t permite escoger el algoritmo de generación de la secuencia de números");
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <H_Lfsr+0x34>)
 8000bfa:	f005 ff83 	bl	8006b04 <printf>
	printf("\n\r\t\t x genera la secuencia de números con la técnica de XOR's");
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <H_Lfsr+0x38>)
 8000c00:	f005 ff80 	bl	8006b04 <printf>
	printf("\n\r\t\t p genera la secuencia de números con la técnica dada por la página");
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <H_Lfsr+0x3c>)
 8000c06:	f005 ff7d 	bl	8006b04 <printf>
	printf("\r\n");
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <H_Lfsr+0x40>)
 8000c0c:	f005 ffd2 	bl	8006bb4 <puts>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08010cb8 	.word	0x08010cb8
 8000c18:	08010cf0 	.word	0x08010cf0
 8000c1c:	08010d04 	.word	0x08010d04
 8000c20:	08010d5c 	.word	0x08010d5c
 8000c24:	08010d9c 	.word	0x08010d9c
 8000c28:	080105e4 	.word	0x080105e4

08000c2c <Lfsr>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Lfsr(void){
 8000c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c30:	ed2d 8b02 	vpush	{d8}
 8000c34:	b0e0      	sub	sp, #384	; 0x180
 8000c36:	af00      	add	r7, sp, #0

				char buf_lfsr[10];
				uint8_t receive[32] = { 0 }; // Arreglo para recibir
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000c3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]
				uint8_t seed[32] = { 0 };	//Arreglo semilla
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c58:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]
				uint8_t seed_init[32] = { 0 }; //Arreglo semilla inicial
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]
				uint8_t pol[32] = { 0 }; // Almacenar polinomio
 8000c86:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	3304      	adds	r3, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]
				uint8_t aux[32] = { 0 }; // Auxiliar para invertir
 8000ca4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ca8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]
				uint8_t xor[32] = { 0 }; // Almacena las xor
 8000cc2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cc6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]
				uint8_t buffer_lfsr[16]={0};	//Transmitir
 8000ce0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ce4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
				uint8_t band = 1;		//bandera de ciclo max
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f




				//Mensaje de saludo
				Saludo();
 8000cfc:	f7ff fe6e 	bl	80009dc <Saludo>

				//Etiqueta para reiniciar

				printf("\n\rNumero de bits termino de realimentacion\n\r");
 8000d00:	48de      	ldr	r0, [pc, #888]	; (800107c <Lfsr+0x450>)
 8000d02:	f005 feff 	bl	8006b04 <printf>
				scanf("%s", buf_lfsr);
 8000d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	48dc      	ldr	r0, [pc, #880]	; (8001080 <Lfsr+0x454>)
 8000d0e:	f005 ff59 	bl	8006bc4 <scanf>
				int numbits = atoi(buf_lfsr);
 8000d12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fe94 	bl	8006a44 <atoi>
 8000d1c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				printf("\n\rNumero de bits - Decimals: %d\n\r", numbits);
 8000d20:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000d24:	48d7      	ldr	r0, [pc, #860]	; (8001084 <Lfsr+0x458>)
 8000d26:	f005 feed 	bl	8006b04 <printf>

				printf("\n\rIngrese el polinomio de %d bits en binario\n\r", numbits);
 8000d2a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000d2e:	48d6      	ldr	r0, [pc, #856]	; (8001088 <Lfsr+0x45c>)
 8000d30:	f005 fee8 	bl	8006b04 <printf>
				if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits,
 8000d34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	48d2      	ldr	r0, [pc, #840]	; (800108c <Lfsr+0x460>)
 8000d44:	f004 fb79 	bl	800543a <HAL_UART_Receive>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d11f      	bne.n	8000d8e <Lfsr+0x162>
						HAL_MAX_DELAY)) {

					for (int i = 0; (i < numbits); i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000d54:	e015      	b.n	8000d82 <Lfsr+0x156>
						pol[i] = (receive[i] - 48);
 8000d56:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000d5a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	3b30      	subs	r3, #48	; 0x30
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d6a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8000d6e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000d72:	4413      	add	r3, r2
 8000d74:	460a      	mov	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
					for (int i = 0; (i < numbits); i++) {
 8000d78:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000d82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbe3      	blt.n	8000d56 <Lfsr+0x12a>
				}


				///////////

			printf("\n\rIngrese el numero de la semilla de %d bits en binario\n\r",
 8000d8e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000d92:	48bf      	ldr	r0, [pc, #764]	; (8001090 <Lfsr+0x464>)
 8000d94:	f005 feb6 	bl	8006b04 <printf>
					numbits);
			if (!HAL_UART_Receive(&huart3, (uint8_t*) receive, numbits, HAL_MAX_DELAY)) {
 8000d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	48b9      	ldr	r0, [pc, #740]	; (800108c <Lfsr+0x460>)
 8000da8:	f004 fb47 	bl	800543a <HAL_UART_Receive>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 813a 	bne.w	8001028 <Lfsr+0x3fc>

				//Recibe una semilla del tamaño de bits anteriormente especificado en binario
				for (int i = 0; (i < numbits); i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000dba:	e020      	b.n	8000dfe <Lfsr+0x1d2>
					seed[i] = (receive[i] - 48);
 8000dbc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000dc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3b30      	subs	r3, #48	; 0x30
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000dd0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000dd4:	4413      	add	r3, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
					seed_init[i] = seed[i];
 8000dda:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000dde:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000de2:	4413      	add	r3, r2
 8000de4:	7819      	ldrb	r1, [r3, #0]
 8000de6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000dea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; (i < numbits); i++) {
 8000df4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8000dfe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbd8      	blt.n	8000dbc <Lfsr+0x190>
				}
				band = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
				//Convertir de arreglo a byte
				uint64_t usr = 0;
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
				for (int i = 0; (i < numbits); i++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000e22:	e032      	b.n	8000e8a <Lfsr+0x25e>
					usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 8000e24:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8000e28:	f7ff fbe8 	bl	80005fc <__aeabi_ul2d>
 8000e2c:	ec41 0b18 	vmov	d8, r0, r1
 8000e30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e44:	eeb0 1b47 	vmov.f64	d1, d7
 8000e48:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000e4c:	f00e ffe4 	bl	800fe18 <pow>
 8000e50:	eeb0 6b40 	vmov.f64	d6, d0
 8000e54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000e58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e6c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e70:	ec51 0b17 	vmov	r0, r1, d7
 8000e74:	f7ff fc28 	bl	80006c8 <__aeabi_d2ulz>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
				for (int i = 0; (i < numbits); i++) {
 8000e80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e84:	3301      	adds	r3, #1
 8000e86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000e8a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbc6      	blt.n	8000e24 <Lfsr+0x1f8>
				}

				uint64_t taps = 0;
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
				for (int i = 0; (i < numbits); i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000ea8:	e037      	b.n	8000f1a <Lfsr+0x2ee>
					taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 8000eaa:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8000eae:	f7ff fba5 	bl	80005fc <__aeabi_ul2d>
 8000eb2:	ec41 0b18 	vmov	d8, r0, r1
 8000eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eca:	eeb0 1b47 	vmov.f64	d1, d7
 8000ece:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000ed2:	f00e ffa1 	bl	800fe18 <pow>
 8000ed6:	eeb0 6b40 	vmov.f64	d6, d0
 8000eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000eea:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000efc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f00:	ec51 0b17 	vmov	r0, r1, d7
 8000f04:	f7ff fbe0 	bl	80006c8 <__aeabi_d2ulz>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
				for (int i = 0; (i < numbits); i++) {
 8000f10:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f1a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbc1      	blt.n	8000eaa <Lfsr+0x27e>
				}

				HAL_UART_Receive_IT(&huart3, tx_int, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	495a      	ldr	r1, [pc, #360]	; (8001094 <Lfsr+0x468>)
 8000f2a:	4858      	ldr	r0, [pc, #352]	; (800108c <Lfsr+0x460>)
 8000f2c:	f004 fb49 	bl	80055c2 <HAL_UART_Receive_IT>


				printf("\n\r\n\r***************************************************************");
 8000f30:	4859      	ldr	r0, [pc, #356]	; (8001098 <Lfsr+0x46c>)
 8000f32:	f005 fde7 	bl	8006b04 <printf>
				printf("\n\r\t*\t RESUMEN INICIAL DE LA SECUENCIA \t*\n\r");
 8000f36:	4859      	ldr	r0, [pc, #356]	; (800109c <Lfsr+0x470>)
 8000f38:	f005 fde4 	bl	8006b04 <printf>
				printf("***************************************************************");
 8000f3c:	4858      	ldr	r0, [pc, #352]	; (80010a0 <Lfsr+0x474>)
 8000f3e:	f005 fde1 	bl	8006b04 <printf>
				printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000f42:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000f46:	4857      	ldr	r0, [pc, #348]	; (80010a4 <Lfsr+0x478>)
 8000f48:	f005 fddc 	bl	8006b04 <printf>
				printf("Funcion de realimentacion: BIN ");
 8000f4c:	4856      	ldr	r0, [pc, #344]	; (80010a8 <Lfsr+0x47c>)
 8000f4e:	f005 fdd9 	bl	8006b04 <printf>

				printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 8000f52:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000f56:	4853      	ldr	r0, [pc, #332]	; (80010a4 <Lfsr+0x478>)
 8000f58:	f005 fdd4 	bl	8006b04 <printf>
				printf("Funcion de realimentacion; ");
 8000f5c:	4853      	ldr	r0, [pc, #332]	; (80010ac <Lfsr+0x480>)
 8000f5e:	f005 fdd1 	bl	8006b04 <printf>
				itoa(taps, (char*) buffer_lfsr, 2);
 8000f62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f66:	f107 0114 	add.w	r1, r7, #20
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 fdaf 	bl	8006ad0 <itoa>
				printf("%s", buffer_lfsr);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4841      	ldr	r0, [pc, #260]	; (8001080 <Lfsr+0x454>)
 8000f7a:	f005 fdc3 	bl	8006b04 <printf>
				printf(" - ");
 8000f7e:	484c      	ldr	r0, [pc, #304]	; (80010b0 <Lfsr+0x484>)
 8000f80:	f005 fdc0 	bl	8006b04 <printf>
				itoa(taps, (char*) buffer_lfsr, 16);
 8000f84:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fd9e 	bl	8006ad0 <itoa>
				printf("%s", buffer_lfsr);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4839      	ldr	r0, [pc, #228]	; (8001080 <Lfsr+0x454>)
 8000f9c:	f005 fdb2 	bl	8006b04 <printf>

				printf("\n\rValor inicial - Semilla : ");
 8000fa0:	4844      	ldr	r0, [pc, #272]	; (80010b4 <Lfsr+0x488>)
 8000fa2:	f005 fdaf 	bl	8006b04 <printf>
				itoa(usr, (char*) buffer_lfsr, 2);
 8000fa6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000faa:	f107 0114 	add.w	r1, r7, #20
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fd8d 	bl	8006ad0 <itoa>
				printf("%s", buffer_lfsr);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4830      	ldr	r0, [pc, #192]	; (8001080 <Lfsr+0x454>)
 8000fbe:	f005 fda1 	bl	8006b04 <printf>
				printf(" - ");
 8000fc2:	483b      	ldr	r0, [pc, #236]	; (80010b0 <Lfsr+0x484>)
 8000fc4:	f005 fd9e 	bl	8006b04 <printf>
				itoa(usr, (char*) buffer_lfsr, 16);
 8000fc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fcc:	f107 0114 	add.w	r1, r7, #20
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fd7c 	bl	8006ad0 <itoa>
				printf("%s", buffer_lfsr);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4828      	ldr	r0, [pc, #160]	; (8001080 <Lfsr+0x454>)
 8000fe0:	f005 fd90 	bl	8006b04 <printf>

				uint64_t a = pow(2,numbits)-1;
 8000fe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff0:	eeb0 1b47 	vmov.f64	d1, d7
 8000ff4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000ff8:	f00e ff0e 	bl	800fe18 <pow>
 8000ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8001000:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001004:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001008:	ec51 0b17 	vmov	r0, r1, d7
 800100c:	f7ff fb5c 	bl	80006c8 <__aeabi_d2ulz>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				printf("\n\rTotal de numeros esperados en la secuencia: %llu ", a);
 8001018:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800101c:	4826      	ldr	r0, [pc, #152]	; (80010b8 <Lfsr+0x48c>)
 800101e:	f005 fd71 	bl	8006b04 <printf>
				printf("\r\n");
 8001022:	4826      	ldr	r0, [pc, #152]	; (80010bc <Lfsr+0x490>)
 8001024:	f005 fdc6 	bl	8006bb4 <puts>

			}

			printf("\n\r");
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <Lfsr+0x494>)
 800102a:	f005 fd6b 	bl	8006b04 <printf>
			//////////////////////////////////////////////////////
			//Invertir el polinomio de acuerdo con los parámetros establecidos
				for (int w = 0; w < numbits; w++) {
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001034:	e018      	b.n	8001068 <Lfsr+0x43c>
					aux[w] = pol[numbits - 1 - w];
 8001036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001046:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800104a:	5cd1      	ldrb	r1, [r2, r3]
 800104c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001050:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001054:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001058:	4413      	add	r3, r2
 800105a:	460a      	mov	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
				for (int w = 0; w < numbits; w++) {
 800105e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001068:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800106c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001070:	429a      	cmp	r2, r3
 8001072:	dbe0      	blt.n	8001036 <Lfsr+0x40a>
				}

				for (int w = 0; w < numbits; w++) {
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800107a:	e039      	b.n	80010f0 <Lfsr+0x4c4>
 800107c:	08010de8 	.word	0x08010de8
 8001080:	08010e18 	.word	0x08010e18
 8001084:	08010e1c 	.word	0x08010e1c
 8001088:	08010e40 	.word	0x08010e40
 800108c:	20000a80 	.word	0x20000a80
 8001090:	08010e70 	.word	0x08010e70
 8001094:	200009d8 	.word	0x200009d8
 8001098:	08010eac 	.word	0x08010eac
 800109c:	08010ef0 	.word	0x08010ef0
 80010a0:	08010f1c 	.word	0x08010f1c
 80010a4:	08010f5c 	.word	0x08010f5c
 80010a8:	08010f90 	.word	0x08010f90
 80010ac:	08010fb0 	.word	0x08010fb0
 80010b0:	08010fcc 	.word	0x08010fcc
 80010b4:	08010fd0 	.word	0x08010fd0
 80010b8:	08010ff0 	.word	0x08010ff0
 80010bc:	08011024 	.word	0x08011024
 80010c0:	08011028 	.word	0x08011028
					pol[w] = aux[w];
 80010c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010c8:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80010cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010d0:	4413      	add	r3, r2
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010d8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80010dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010e0:	4413      	add	r3, r2
 80010e2:	460a      	mov	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
				for (int w = 0; w < numbits; w++) {
 80010e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010ea:	3301      	adds	r3, #1
 80010ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80010f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbe3      	blt.n	80010c4 <Lfsr+0x498>
				}

			uint64_t k = 0;
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			while (k < pow(2, numbits)) {
 8001108:	e183      	b.n	8001412 <Lfsr+0x7e6>



				for (int i = 0; (i < numbits); i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001110:	e027      	b.n	8001162 <Lfsr+0x536>
					if (pol[i] == 1) {
 8001112:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001116:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800111a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10f      	bne.n	8001146 <Lfsr+0x51a>
						xor[i] = seed[i];
 8001126:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800112a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800112e:	4413      	add	r3, r2
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001136:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800113a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800113e:	4413      	add	r3, r2
 8001140:	460a      	mov	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e008      	b.n	8001158 <Lfsr+0x52c>
					} else {
						xor[i] = 0;
 8001146:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800114a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800114e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001152:	4413      	add	r3, r2
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
				for (int i = 0; (i < numbits); i++) {
 8001158:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800115c:	3301      	adds	r3, #1
 800115e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001162:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800116a:	429a      	cmp	r2, r3
 800116c:	dbd1      	blt.n	8001112 <Lfsr+0x4e6>
				}
				////////////////////////////////////////////////////////

				/////////////////////////////////////////////////////////////////////////////////
				//Determinar cuantos 1's tiene
				uint64_t res = 0;
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
				for (int i = 0; (i < numbits); i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001180:	e018      	b.n	80011b4 <Lfsr+0x588>
					res = res + xor[i];
 8001182:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001186:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800118a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2200      	movs	r2, #0
 8001196:	4698      	mov	r8, r3
 8001198:	4691      	mov	r9, r2
 800119a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800119e:	eb12 0a08 	adds.w	sl, r2, r8
 80011a2:	eb43 0b09 	adc.w	fp, r3, r9
 80011a6:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	; 0x130
				for (int i = 0; (i < numbits); i++) {
 80011aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011ae:	3301      	adds	r3, #1
 80011b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbe0      	blt.n	8001182 <Lfsr+0x556>
				// Función utilizada en DEBUGG
				// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);//envia el valor de la suma para determinar valor XOR

				////////DETERMINAMOS SI ES PAR O IMPAR////////////////////////////////

				if (res % 2 == 0) {
 80011c0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80011c4:	f002 0401 	and.w	r4, r2, #1
 80011c8:	2500      	movs	r5, #0
 80011ca:	ea54 0305 	orrs.w	r3, r4, r5
 80011ce:	d106      	bne.n	80011de <Lfsr+0x5b2>
					res = 0;
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 80011dc:	e005      	b.n	80011ea <Lfsr+0x5be>
				} else {
					res = 1;
 80011de:	f04f 0201 	mov.w	r2, #1
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
				}
				///////////////////////////////////////////////
				// HAL_UART_Transmit(&huart3, &res, sizeof(res), HAL_MAX_DELAY);

				///mover y poner el valor xor en la cabeza
				for (int i = numbits - 1; i > 0; i--) {
 80011ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80011f4:	e015      	b.n	8001222 <Lfsr+0x5f6>
					seed[i] = seed[i - 1];
 80011f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001200:	f107 0210 	add.w	r2, r7, #16
 8001204:	4413      	add	r3, r2
 8001206:	f813 1cdc 	ldrb.w	r1, [r3, #-220]
 800120a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800120e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001212:	4413      	add	r3, r2
 8001214:	460a      	mov	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
				for (int i = numbits - 1; i > 0; i--) {
 8001218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800121c:	3b01      	subs	r3, #1
 800121e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001226:	2b00      	cmp	r3, #0
 8001228:	dce5      	bgt.n	80011f6 <Lfsr+0x5ca>
				}

				seed[0] = res;
 800122a:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 800122e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

				uint64_t usr = 0;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
				for (int i = 0; (i < numbits); i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001244:	e032      	b.n	80012ac <Lfsr+0x680>
					usr = usr + pow(2, ((numbits - 1) - i)) * seed[i];
 8001246:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800124a:	f7ff f9d7 	bl	80005fc <__aeabi_ul2d>
 800124e:	ec41 0b18 	vmov	d8, r0, r1
 8001252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001266:	eeb0 1b47 	vmov.f64	d1, d7
 800126a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800126e:	f00e fdd3 	bl	800fe18 <pow>
 8001272:	eeb0 6b40 	vmov.f64	d6, d0
 8001276:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800127a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800128a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800128e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001292:	ec51 0b17 	vmov	r0, r1, d7
 8001296:	f7ff fa17 	bl	80006c8 <__aeabi_d2ulz>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
				for (int i = 0; (i < numbits); i++) {
 80012a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012a6:	3301      	adds	r3, #1
 80012a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbc6      	blt.n	8001246 <Lfsr+0x61a>
				}
				// Línea equivalente al anterior ciclo pero con tamaño de 4 bits
				//int usr = 16 * seed[0] + 8 * seed[1] + 4 * seed[2] + 2 * seed[3] + seed[4];


				itoa(usr, (char*) buffer_lfsr, 16);
 80012b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012bc:	f107 0114 	add.w	r1, r7, #20
 80012c0:	2210      	movs	r2, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fc04 	bl	8006ad0 <itoa>
				printf("\n\r%s", buffer_lfsr);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	488d      	ldr	r0, [pc, #564]	; (8001504 <Lfsr+0x8d8>)
 80012d0:	f005 fc18 	bl	8006b04 <printf>



				if(buf_int[0] == 0x1b){
 80012d4:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <Lfsr+0x8dc>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b1b      	cmp	r3, #27
 80012da:	d10e      	bne.n	80012fa <Lfsr+0x6ce>
					printf("\n\r\n\r***************************************************************");
 80012dc:	488b      	ldr	r0, [pc, #556]	; (800150c <Lfsr+0x8e0>)
 80012de:	f005 fc11 	bl	8006b04 <printf>
					printf("\n\r\t*\t DETENER LA SECUENCIA POR EL USUARIO\t*\n\r");
 80012e2:	488b      	ldr	r0, [pc, #556]	; (8001510 <Lfsr+0x8e4>)
 80012e4:	f005 fc0e 	bl	8006b04 <printf>
					printf("***************************************************************");
 80012e8:	488a      	ldr	r0, [pc, #552]	; (8001514 <Lfsr+0x8e8>)
 80012ea:	f005 fc0b 	bl	8006b04 <printf>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2101      	movs	r1, #1
 80012f2:	4889      	ldr	r0, [pc, #548]	; (8001518 <Lfsr+0x8ec>)
 80012f4:	f001 fe02 	bl	8002efc <HAL_GPIO_WritePin>
					goto last;
 80012f8:	e0a6      	b.n	8001448 <Lfsr+0x81c>
				}

				if(buf_int[0] != 0x1b){
 80012fa:	4b83      	ldr	r3, [pc, #524]	; (8001508 <Lfsr+0x8dc>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b1b      	cmp	r3, #27
 8001300:	d004      	beq.n	800130c <Lfsr+0x6e0>
					HAL_UART_Receive_IT(&huart3, tx_int, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	4985      	ldr	r1, [pc, #532]	; (800151c <Lfsr+0x8f0>)
 8001306:	4886      	ldr	r0, [pc, #536]	; (8001520 <Lfsr+0x8f4>)
 8001308:	f004 f95b 	bl	80055c2 <HAL_UART_Receive_IT>
				}


				if (band == 1) {
 800130c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001310:	2b01      	cmp	r3, #1
 8001312:	d103      	bne.n	800131c <Lfsr+0x6f0>
					band = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800131a:	e022      	b.n	8001362 <Lfsr+0x736>
				} else {
					band = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
					for (int i = 0; i < numbits; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001328:	e015      	b.n	8001356 <Lfsr+0x72a>
						if (seed[i] != seed_init[i]) {
 800132a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800132e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001332:	4413      	add	r3, r2
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800133a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800133e:	440b      	add	r3, r1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d002      	beq.n	800134c <Lfsr+0x720>
							band = 2;
 8001346:	2302      	movs	r3, #2
 8001348:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
					for (int i = 0; i < numbits; i++) {
 800134c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001350:	3301      	adds	r3, #1
 8001352:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001356:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800135a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800135e:	429a      	cmp	r2, r3
 8001360:	dbe3      	blt.n	800132a <Lfsr+0x6fe>
						}
					}
				}

				if (band == 0) {
 8001362:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001366:	2b00      	cmp	r3, #0
 8001368:	d124      	bne.n	80013b4 <Lfsr+0x788>
					if (k == pow(2, numbits) - 2) {
 800136a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800136e:	f7ff f945 	bl	80005fc <__aeabi_ul2d>
 8001372:	ec41 0b18 	vmov	d8, r0, r1
 8001376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001382:	eeb0 1b47 	vmov.f64	d1, d7
 8001386:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800138a:	f00e fd45 	bl	800fe18 <pow>
 800138e:	eeb0 7b40 	vmov.f64	d7, d0
 8001392:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001396:	ee37 7b46 	vsub.f64	d7, d7, d6
 800139a:	eeb4 8b47 	vcmp.f64	d8, d7
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d103      	bne.n	80013ac <Lfsr+0x780>
						printf("\n\rMAXIMO\n\r");
 80013a4:	485f      	ldr	r0, [pc, #380]	; (8001524 <Lfsr+0x8f8>)
 80013a6:	f005 fbad 	bl	8006b04 <printf>
					} else {
						printf("\n\rNO MAX\n\r");
					}
					break;
 80013aa:	e04d      	b.n	8001448 <Lfsr+0x81c>
						printf("\n\rNO MAX\n\r");
 80013ac:	485e      	ldr	r0, [pc, #376]	; (8001528 <Lfsr+0x8fc>)
 80013ae:	f005 fba9 	bl	8006b04 <printf>
					break;
 80013b2:	e049      	b.n	8001448 <Lfsr+0x81c>
				}
				if (band == 2 && k== pow(2, numbits) - 1) {
 80013b4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d11f      	bne.n	80013fc <Lfsr+0x7d0>
 80013bc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80013c0:	f7ff f91c 	bl	80005fc <__aeabi_ul2d>
 80013c4:	ec41 0b18 	vmov	d8, r0, r1
 80013c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013d4:	eeb0 1b47 	vmov.f64	d1, d7
 80013d8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80013dc:	f00e fd1c 	bl	800fe18 <pow>
 80013e0:	eeb0 7b40 	vmov.f64	d7, d0
 80013e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013ec:	eeb4 8b47 	vcmp.f64	d8, d7
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d102      	bne.n	80013fc <Lfsr+0x7d0>
					printf("\n\rNO MAX\n\r");
 80013f6:	484c      	ldr	r0, [pc, #304]	; (8001528 <Lfsr+0x8fc>)
 80013f8:	f005 fb84 	bl	8006b04 <printf>
				}
				k++;
 80013fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001400:	1c51      	adds	r1, r2, #1
 8001402:	6039      	str	r1, [r7, #0]
 8001404:	f143 0300 	adc.w	r3, r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800140e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			while (k < pow(2, numbits)) {
 8001412:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001416:	f7ff f8f1 	bl	80005fc <__aeabi_ul2d>
 800141a:	ec41 0b18 	vmov	d8, r0, r1
 800141e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800142a:	eeb0 1b47 	vmov.f64	d1, d7
 800142e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001432:	f00e fcf1 	bl	800fe18 <pow>
 8001436:	eeb0 7b40 	vmov.f64	d7, d0
 800143a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	f53f ae62 	bmi.w	800110a <Lfsr+0x4de>
			}
			last:
 8001446:	bf00      	nop
			printf("\n\r\n\r***************************************************************");
 8001448:	4830      	ldr	r0, [pc, #192]	; (800150c <Lfsr+0x8e0>)
 800144a:	f005 fb5b 	bl	8006b04 <printf>
			printf("\n\r\t*\t RESUMEN FINAL DE LA SECUENCIA \t*\n\r");
 800144e:	4837      	ldr	r0, [pc, #220]	; (800152c <Lfsr+0x900>)
 8001450:	f005 fb58 	bl	8006b04 <printf>
			printf("***************************************************************");
 8001454:	482f      	ldr	r0, [pc, #188]	; (8001514 <Lfsr+0x8e8>)
 8001456:	f005 fb55 	bl	8006b04 <printf>
			printf("\n\rNumero de bits termino de realimentacion: %d \n\r",numbits);
 800145a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800145e:	4834      	ldr	r0, [pc, #208]	; (8001530 <Lfsr+0x904>)
 8001460:	f005 fb50 	bl	8006b04 <printf>
			printf("Funcion de realimentacion: BIN ");
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <Lfsr+0x908>)
 8001466:	f005 fb4d 	bl	8006b04 <printf>

			uint64_t usr = 0;
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			for (int i = 0; (i < numbits); i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800147c:	e032      	b.n	80014e4 <Lfsr+0x8b8>
				usr = usr + pow(2, ((numbits - 1) - i)) * seed_init[i];
 800147e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001482:	f7ff f8bb 	bl	80005fc <__aeabi_ul2d>
 8001486:	ec41 0b18 	vmov	d8, r0, r1
 800148a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800149e:	eeb0 1b47 	vmov.f64	d1, d7
 80014a2:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80014a6:	f00e fcb7 	bl	800fe18 <pow>
 80014aa:	eeb0 6b40 	vmov.f64	d6, d0
 80014ae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014c6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80014ca:	ec51 0b17 	vmov	r0, r1, d7
 80014ce:	f7ff f8fb 	bl	80006c8 <__aeabi_d2ulz>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			for (int i = 0; (i < numbits); i++) {
 80014da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80014e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbc6      	blt.n	800147e <Lfsr+0x852>
			}

			uint64_t taps = 0;
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			for (int i = 0; (i < numbits); i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001502:	e051      	b.n	80015a8 <Lfsr+0x97c>
 8001504:	0801102c 	.word	0x0801102c
 8001508:	200009dc 	.word	0x200009dc
 800150c:	08010eac 	.word	0x08010eac
 8001510:	08011034 	.word	0x08011034
 8001514:	08010f1c 	.word	0x08010f1c
 8001518:	40020400 	.word	0x40020400
 800151c:	200009d8 	.word	0x200009d8
 8001520:	20000a80 	.word	0x20000a80
 8001524:	08011064 	.word	0x08011064
 8001528:	08011070 	.word	0x08011070
 800152c:	0801107c 	.word	0x0801107c
 8001530:	08010f5c 	.word	0x08010f5c
 8001534:	08010f90 	.word	0x08010f90
				taps = taps + pow(2, (numbits-1)-i) * pol[(numbits-1)-i];
 8001538:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800153c:	f7ff f85e 	bl	80005fc <__aeabi_ul2d>
 8001540:	ec41 0b18 	vmov	d8, r0, r1
 8001544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001558:	eeb0 1b47 	vmov.f64	d1, d7
 800155c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001560:	f00e fc5a 	bl	800fe18 <pow>
 8001564:	eeb0 6b40 	vmov.f64	d6, d0
 8001568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001578:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001586:	ee26 7b07 	vmul.f64	d7, d6, d7
 800158a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800158e:	ec51 0b17 	vmov	r0, r1, d7
 8001592:	f7ff f899 	bl	80006c8 <__aeabi_d2ulz>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			for (int i = 0; (i < numbits); i++) {
 800159e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbc1      	blt.n	8001538 <Lfsr+0x90c>

				for (int w = 0; w < numbits; w++) {
					pol[w] = aux[w];
				}
			 */
			itoa(taps, (char*) buffer_lfsr, 2);
 80015b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015b8:	f107 0114 	add.w	r1, r7, #20
 80015bc:	2202      	movs	r2, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fa86 	bl	8006ad0 <itoa>
			printf("%s", buffer_lfsr);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4854      	ldr	r0, [pc, #336]	; (800171c <Lfsr+0xaf0>)
 80015cc:	f005 fa9a 	bl	8006b04 <printf>
			printf(" - HEX ");
 80015d0:	4853      	ldr	r0, [pc, #332]	; (8001720 <Lfsr+0xaf4>)
 80015d2:	f005 fa97 	bl	8006b04 <printf>
			itoa(taps, (char*) buffer_lfsr, 16);
 80015d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015da:	f107 0114 	add.w	r1, r7, #20
 80015de:	2210      	movs	r2, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fa75 	bl	8006ad0 <itoa>
			printf("%s", buffer_lfsr);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	484b      	ldr	r0, [pc, #300]	; (800171c <Lfsr+0xaf0>)
 80015ee:	f005 fa89 	bl	8006b04 <printf>

			printf("\n\rValor inicial - Semilla : ");
 80015f2:	484c      	ldr	r0, [pc, #304]	; (8001724 <Lfsr+0xaf8>)
 80015f4:	f005 fa86 	bl	8006b04 <printf>
			itoa(usr, (char*) buffer_lfsr, 2);
 80015f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015fc:	f107 0114 	add.w	r1, r7, #20
 8001600:	2202      	movs	r2, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fa64 	bl	8006ad0 <itoa>
			printf("%s", buffer_lfsr);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4843      	ldr	r0, [pc, #268]	; (800171c <Lfsr+0xaf0>)
 8001610:	f005 fa78 	bl	8006b04 <printf>
			printf(" - ");
 8001614:	4844      	ldr	r0, [pc, #272]	; (8001728 <Lfsr+0xafc>)
 8001616:	f005 fa75 	bl	8006b04 <printf>
			itoa(usr, (char*) buffer_lfsr, 16);
 800161a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800161e:	f107 0114 	add.w	r1, r7, #20
 8001622:	2210      	movs	r2, #16
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fa53 	bl	8006ad0 <itoa>
			printf("%s", buffer_lfsr);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	483a      	ldr	r0, [pc, #232]	; (800171c <Lfsr+0xaf0>)
 8001632:	f005 fa67 	bl	8006b04 <printf>


			printf("\n\rNumero de valores calculados en la secuencia: %llu ", k+1);
 8001636:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800163a:	1c51      	adds	r1, r2, #1
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	f143 0300 	adc.w	r3, r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001648:	4838      	ldr	r0, [pc, #224]	; (800172c <Lfsr+0xb00>)
 800164a:	f005 fa5b 	bl	8006b04 <printf>
			if (band == 0) {
 800164e:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001652:	2b00      	cmp	r3, #0
 8001654:	d12d      	bne.n	80016b2 <Lfsr+0xa86>
				if (k == pow(2, numbits) - 2) {
 8001656:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800165a:	f7fe ffcf 	bl	80005fc <__aeabi_ul2d>
 800165e:	ec41 0b18 	vmov	d8, r0, r1
 8001662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800166e:	eeb0 1b47 	vmov.f64	d1, d7
 8001672:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001676:	f00e fbcf 	bl	800fe18 <pow>
 800167a:	eeb0 7b40 	vmov.f64	d7, d0
 800167e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001682:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001686:	eeb4 8b47 	vcmp.f64	d8, d7
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	d108      	bne.n	80016a2 <Lfsr+0xa76>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	4826      	ldr	r0, [pc, #152]	; (8001730 <Lfsr+0xb04>)
 8001696:	f001 fc31 	bl	8002efc <HAL_GPIO_WritePin>
					printf("\n\rMAXIMO\n\r");
 800169a:	4826      	ldr	r0, [pc, #152]	; (8001734 <Lfsr+0xb08>)
 800169c:	f005 fa32 	bl	8006b04 <printf>
 80016a0:	e007      	b.n	80016b2 <Lfsr+0xa86>
				} else {
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	4822      	ldr	r0, [pc, #136]	; (8001730 <Lfsr+0xb04>)
 80016a8:	f001 fc28 	bl	8002efc <HAL_GPIO_WritePin>
					printf("\n\rNO MAX\n\r");
 80016ac:	4822      	ldr	r0, [pc, #136]	; (8001738 <Lfsr+0xb0c>)
 80016ae:	f005 fa29 	bl	8006b04 <printf>
				}
			}
			if (band == 2 && k== pow(2, numbits) - 1) {
 80016b2:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d124      	bne.n	8001704 <Lfsr+0xad8>
 80016ba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80016be:	f7fe ff9d 	bl	80005fc <__aeabi_ul2d>
 80016c2:	ec41 0b18 	vmov	d8, r0, r1
 80016c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016d2:	eeb0 1b47 	vmov.f64	d1, d7
 80016d6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80016da:	f00e fb9d 	bl	800fe18 <pow>
 80016de:	eeb0 7b40 	vmov.f64	d7, d0
 80016e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80016e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016ea:	eeb4 8b47 	vcmp.f64	d8, d7
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d107      	bne.n	8001704 <Lfsr+0xad8>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2101      	movs	r1, #1
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <Lfsr+0xb04>)
 80016fa:	f001 fbff 	bl	8002efc <HAL_GPIO_WritePin>
				printf("\n\rNO MAX\n\r");
 80016fe:	480e      	ldr	r0, [pc, #56]	; (8001738 <Lfsr+0xb0c>)
 8001700:	f005 fa00 	bl	8006b04 <printf>
			}
			printf("\n\r***************************************************************\n\r");
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <Lfsr+0xb10>)
 8001706:	f005 f9fd 	bl	8006b04 <printf>




			}
 800170a:	bf00      	nop
 800170c:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8001710:	46bd      	mov	sp, r7
 8001712:	ecbd 8b02 	vpop	{d8}
 8001716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171a:	bf00      	nop
 800171c:	08010e18 	.word	0x08010e18
 8001720:	080110a8 	.word	0x080110a8
 8001724:	08010fd0 	.word	0x08010fd0
 8001728:	08010fcc 	.word	0x08010fcc
 800172c:	080110b0 	.word	0x080110b0
 8001730:	40020400 	.word	0x40020400
 8001734:	08011064 	.word	0x08011064
 8001738:	08011070 	.word	0x08011070
 800173c:	080110e8 	.word	0x080110e8

08001740 <Temp>:


void Temp(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af02      	add	r7, sp, #8
	uint8_t bufe_tmp[] = "error\r\n";
 8001746:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <Temp+0xf8>)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001750:	e883 0003 	stmia.w	r3, {r0, r1}

	   uint8_t buff_rx_tmp[2] = {0};
 8001754:	2300      	movs	r3, #0
 8001756:	813b      	strh	r3, [r7, #8]
	   uint8_t buff_tx_tmp[2] = {0};
 8001758:	2300      	movs	r3, #0
 800175a:	80bb      	strh	r3, [r7, #4]
	   static const uint8_t ADDR_W = 0x90;
	   static const uint8_t POINTER_Temp = 0x00;
	   uint16_t val = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	83bb      	strh	r3, [r7, #28]
	   uint16_t a1 = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	837b      	strh	r3, [r7, #26]
	   uint16_t a0 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	833b      	strh	r3, [r7, #24]
	   float temp;
	   HAL_StatusTypeDef ret;

	   buff_tx_tmp[0]= POINTER_Temp;
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <Temp+0xfc>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	713b      	strb	r3, [r7, #4]


		uint8_t buff_temp[4]={0};	//Transmitir
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]

		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx_tmp, 1, HAL_MAX_DELAY);
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <Temp+0x100>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b299      	uxth	r1, r3
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <Temp+0x104>)
 8001784:	f001 fc64 	bl	8003050 <HAL_I2C_Master_Transmit>
 8001788:	4603      	mov	r3, r0
 800178a:	77fb      	strb	r3, [r7, #31]

					  if (ret == HAL_OK){
 800178c:	7ffb      	ldrb	r3, [r7, #31]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d13e      	bne.n	8001810 <Temp+0xd0>

						  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_W, buff_rx_tmp, 2, HAL_MAX_DELAY);
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <Temp+0x100>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b299      	uxth	r1, r3
 8001798:	f107 0208 	add.w	r2, r7, #8
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2302      	movs	r3, #2
 80017a4:	4827      	ldr	r0, [pc, #156]	; (8001844 <Temp+0x104>)
 80017a6:	f001 fd47 	bl	8003238 <HAL_I2C_Master_Receive>
 80017aa:	4603      	mov	r3, r0
 80017ac:	77fb      	strb	r3, [r7, #31]

						  if(ret == HAL_OK){
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12d      	bne.n	8001810 <Temp+0xd0>

							  a1 = buff_rx_tmp[1];
 80017b4:	7a7b      	ldrb	r3, [r7, #9]
 80017b6:	837b      	strh	r3, [r7, #26]
							  a1 = (a1 >> 5);
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	837b      	strh	r3, [r7, #26]

							  a0 = buff_rx_tmp[0];
 80017be:	7a3b      	ldrb	r3, [r7, #8]
 80017c0:	833b      	strh	r3, [r7, #24]
							  a0 = (a0 << 3);
 80017c2:	8b3b      	ldrh	r3, [r7, #24]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	833b      	strh	r3, [r7, #24]

							  val = (a0 | a1);
 80017c8:	8b3a      	ldrh	r2, [r7, #24]
 80017ca:	8b7b      	ldrh	r3, [r7, #26]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	83bb      	strh	r3, [r7, #28]

							  temp = val*0.125;
 80017d0:	8bbb      	ldrh	r3, [r7, #28]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017da:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 80017de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017e6:	edc7 7a05 	vstr	s15, [r7, #20]


							  itoa(val, (char*) buff_temp, 10);
 80017ea:	8bbb      	ldrh	r3, [r7, #28]
 80017ec:	4639      	mov	r1, r7
 80017ee:	220a      	movs	r2, #10
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 f96d 	bl	8006ad0 <itoa>


							  printf("%.6f\r\n", temp);
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fe:	ec53 2b17 	vmov	r2, r3, d7
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <Temp+0x108>)
 8001804:	f005 f97e 	bl	8006b04 <printf>
							  HAL_Delay(500);
 8001808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180c:	f001 f802 	bl	8002814 <HAL_Delay>
						  }
					  }

					  if (ret != HAL_OK){
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <Temp+0xee>
						  HAL_UART_Transmit(&huart3, bufe_tmp, sizeof(bufe_tmp), HAL_MAX_DELAY);
 8001816:	f107 010c 	add.w	r1, r7, #12
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	2208      	movs	r2, #8
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <Temp+0x10c>)
 8001822:	f003 fd87 	bl	8005334 <HAL_UART_Transmit>
						  HAL_Delay(300);
 8001826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800182a:	f000 fff3 	bl	8002814 <HAL_Delay>
					  }

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08011134 	.word	0x08011134
 800183c:	08011215 	.word	0x08011215
 8001840:	08011216 	.word	0x08011216
 8001844:	200009e0 	.word	0x200009e0
 8001848:	0801112c 	.word	0x0801112c
 800184c:	20000a80 	.word	0x20000a80

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0b6      	sub	sp, #216	; 0xd8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001856:	f000 ff80 	bl	800275a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185a:	f000 fb5d 	bl	8001f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185e:	f000 fc89 	bl	8002174 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001862:	f000 fc57 	bl	8002114 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001866:	f000 fc07 	bl	8002078 <MX_TIM2_Init>
  MX_I2C1_Init();
 800186a:	f000 fbc5 	bl	8001ff8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	RetargetInit(&huart3);
 800186e:	48cb      	ldr	r0, [pc, #812]	; (8001b9c <main+0x34c>)
 8001870:	f000 fcfe 	bl	8002270 <RetargetInit>
  /* USER CODE BEGIN WHILE */




	uint8_t rx[2]={0};
 8001874:	2300      	movs	r3, #0
 8001876:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t buffin[100]={0};
 800187a:	2300      	movs	r3, #0
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
 800187e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001882:	2260      	movs	r2, #96	; 0x60
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f934 	bl	8006af4 <memset>

	char saludo[] = "jhan";
 800188c:	4ac4      	ldr	r2, [pc, #784]	; (8001ba0 <main+0x350>)
 800188e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001896:	6018      	str	r0, [r3, #0]
 8001898:	3304      	adds	r3, #4
 800189a:	7019      	strb	r1, [r3, #0]
	char help[] = "help";
 800189c:	4ac1      	ldr	r2, [pc, #772]	; (8001ba4 <main+0x354>)
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a6:	6018      	str	r0, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	7019      	strb	r1, [r3, #0]
	char temp[] = "temp";
 80018ac:	4abe      	ldr	r2, [pc, #760]	; (8001ba8 <main+0x358>)
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b6:	6018      	str	r0, [r3, #0]
 80018b8:	3304      	adds	r3, #4
 80018ba:	7019      	strb	r1, [r3, #0]
	char ledc[] = "ledc";
 80018bc:	4abb      	ldr	r2, [pc, #748]	; (8001bac <main+0x35c>)
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c6:	6018      	str	r0, [r3, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	7019      	strb	r1, [r3, #0]
	char lfsr[] = "lfsr";
 80018cc:	4ab8      	ldr	r2, [pc, #736]	; (8001bb0 <main+0x360>)
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d6:	6018      	str	r0, [r3, #0]
 80018d8:	3304      	adds	r3, #4
 80018da:	7019      	strb	r1, [r3, #0]
	char time[] = "time";
 80018dc:	4ab5      	ldr	r2, [pc, #724]	; (8001bb4 <main+0x364>)
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e6:	6018      	str	r0, [r3, #0]
 80018e8:	3304      	adds	r3, #4
 80018ea:	7019      	strb	r1, [r3, #0]
	char rege[] = "rege";
 80018ec:	4ab2      	ldr	r2, [pc, #712]	; (8001bb8 <main+0x368>)
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f6:	6018      	str	r0, [r3, #0]
 80018f8:	3304      	adds	r3, #4
 80018fa:	7019      	strb	r1, [r3, #0]
	char prin[] = "prin";
 80018fc:	4aaf      	ldr	r2, [pc, #700]	; (8001bbc <main+0x36c>)
 80018fe:	463b      	mov	r3, r7
 8001900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001904:	6018      	str	r0, [r3, #0]
 8001906:	3304      	adds	r3, #4
 8001908:	7019      	strb	r1, [r3, #0]

	uint8_t i = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	while (1)
	{

//////////////////////////RECIBIMOS EL TECLADO/////////////////////////
				while(rx[0] != 0x0A){
 8001910:	e014      	b.n	800193c <main+0xec>
					  HAL_UART_Receive(&huart3, rx, 1, HAL_MAX_DELAY);
 8001912:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	2201      	movs	r2, #1
 800191c:	489f      	ldr	r0, [pc, #636]	; (8001b9c <main+0x34c>)
 800191e:	f003 fd8c 	bl	800543a <HAL_UART_Receive>
					  buffin[i]=rx[0];
 8001922:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001926:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 800192a:	33d8      	adds	r3, #216	; 0xd8
 800192c:	443b      	add	r3, r7
 800192e:	f803 2c98 	strb.w	r2, [r3, #-152]
					  i++;
 8001932:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001936:	3301      	adds	r3, #1
 8001938:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				while(rx[0] != 0x0A){
 800193c:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d1e6      	bne.n	8001912 <main+0xc2>
				  }
//////////////////////////TRANSMITIMOS LO QUE RECIBIMOS DEL TECLADO, SOLO PARA PROBAR, LUEGO SE QUITA//////
				  HAL_UART_Transmit(&huart3, buffin, i, HAL_MAX_DELAY);
 8001944:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001948:	b29a      	uxth	r2, r3
 800194a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	4892      	ldr	r0, [pc, #584]	; (8001b9c <main+0x34c>)
 8001954:	f003 fcee 	bl	8005334 <HAL_UART_Transmit>
				  i=0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				  rx[0]=0;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
//////////////////////DETERMINAMOS QUÉ COMANDO RECIBIMOS////////////////
				  /////FALTA PONER LA PARTE DE PROCESAR EL PAR�?METRO
				  ///// ES SOLO PARA TENER LISTA LA PARTE DE TERMINAR COMANDOS
				  if(!memcmp(buffin,saludo,strlen(saludo))){
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fc69 	bl	8000240 <strlen>
 800196e:	4602      	mov	r2, r0
 8001970:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001978:	4618      	mov	r0, r3
 800197a:	f005 f8ab 	bl	8006ad4 <memcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d12b      	bne.n	80019dc <main+0x18c>

					  printf("es saludo\n\r");
 8001984:	488e      	ldr	r0, [pc, #568]	; (8001bc0 <main+0x370>)
 8001986:	f005 f8bd 	bl	8006b04 <printf>
					  printf(" %d\n",strlen(saludo));
 800198a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc56 	bl	8000240 <strlen>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	488a      	ldr	r0, [pc, #552]	; (8001bc4 <main+0x374>)
 800199a:	f005 f8b3 	bl	8006b04 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 800199e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fc4c 	bl	8000240 <strlen>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4885      	ldr	r0, [pc, #532]	; (8001bc4 <main+0x374>)
 80019ae:	f005 f8a9 	bl	8006b04 <printf>

					  for(int w = 0; w<sizeof(buffin); w++){
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80019b8:	e00b      	b.n	80019d2 <main+0x182>
					 				  		  			  buffin[w]=0;}
 80019ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019c2:	4413      	add	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 80019c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019cc:	3301      	adds	r3, #1
 80019ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80019d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019d6:	2b63      	cmp	r3, #99	; 0x63
 80019d8:	d9ef      	bls.n	80019ba <main+0x16a>
 80019da:	e7af      	b.n	800193c <main+0xec>
				  }


				  else if(!memcmp(buffin,help,strlen(help))){
 80019dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fc2d 	bl	8000240 <strlen>
 80019e6:	4602      	mov	r2, r0
 80019e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80019ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 f86f 	bl	8006ad4 <memcmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 80a2 	bne.w	8001b42 <main+0x2f2>
					  printf("es help\n\r");
 80019fe:	4872      	ldr	r0, [pc, #456]	; (8001bc8 <main+0x378>)
 8001a00:	f005 f880 	bl	8006b04 <printf>
					  printf(" %d\n",strlen(help));
 8001a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc19 	bl	8000240 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	486c      	ldr	r0, [pc, #432]	; (8001bc4 <main+0x374>)
 8001a14:	f005 f876 	bl	8006b04 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fc0f 	bl	8000240 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4867      	ldr	r0, [pc, #412]	; (8001bc4 <main+0x374>)
 8001a28:	f005 f86c 	bl	8006b04 <printf>


					  if((buffin[5]==0)&&(buffin[6]==0)){
 8001a2c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <main+0x1f0>
 8001a34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <main+0x1f0>
						  Help();
 8001a3c:	f7ff f810 	bl	8000a60 <Help>
					  }

					  if((buffin[5]=='t')&&(buffin[6]==0x65)&&(buffin[7]==0x6d)&&(buffin[8]==0x70)){
 8001a40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a44:	2b74      	cmp	r3, #116	; 0x74
 8001a46:	d10d      	bne.n	8001a64 <main+0x214>
 8001a48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a4c:	2b65      	cmp	r3, #101	; 0x65
 8001a4e:	d109      	bne.n	8001a64 <main+0x214>
 8001a50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a54:	2b6d      	cmp	r3, #109	; 0x6d
 8001a56:	d105      	bne.n	8001a64 <main+0x214>
 8001a58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a5c:	2b70      	cmp	r3, #112	; 0x70
 8001a5e:	d101      	bne.n	8001a64 <main+0x214>
						  H_Temp();
 8001a60:	f7ff f866 	bl	8000b30 <H_Temp>
					  }

					  if((buffin[5]=='l')&&(buffin[6]=='e')&&(buffin[7]=='d')&&(buffin[8]=='c')){
 8001a64:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a68:	2b6c      	cmp	r3, #108	; 0x6c
 8001a6a:	d10d      	bne.n	8001a88 <main+0x238>
 8001a6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a70:	2b65      	cmp	r3, #101	; 0x65
 8001a72:	d109      	bne.n	8001a88 <main+0x238>
 8001a74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d105      	bne.n	8001a88 <main+0x238>
 8001a7c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a80:	2b63      	cmp	r3, #99	; 0x63
 8001a82:	d101      	bne.n	8001a88 <main+0x238>
						  H_Ledc();
 8001a84:	f7ff f81e 	bl	8000ac4 <H_Ledc>
					  }

					  if((buffin[5]=='l')&&(buffin[6]=='f')&&(buffin[7]=='s')&&(buffin[8]=='r')){
 8001a88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a8c:	2b6c      	cmp	r3, #108	; 0x6c
 8001a8e:	d10d      	bne.n	8001aac <main+0x25c>
 8001a90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a94:	2b66      	cmp	r3, #102	; 0x66
 8001a96:	d109      	bne.n	8001aac <main+0x25c>
 8001a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a9c:	2b73      	cmp	r3, #115	; 0x73
 8001a9e:	d105      	bne.n	8001aac <main+0x25c>
 8001aa0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001aa4:	2b72      	cmp	r3, #114	; 0x72
 8001aa6:	d101      	bne.n	8001aac <main+0x25c>
						  H_Lfsr();
 8001aa8:	f7ff f89e 	bl	8000be8 <H_Lfsr>
					  }

					  if((buffin[5]==0x74)&&(buffin[6]==0x69)&&(buffin[7]==0x6d)&&(buffin[8]==0x65)){
 8001aac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ab0:	2b74      	cmp	r3, #116	; 0x74
 8001ab2:	d10d      	bne.n	8001ad0 <main+0x280>
 8001ab4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ab8:	2b69      	cmp	r3, #105	; 0x69
 8001aba:	d109      	bne.n	8001ad0 <main+0x280>
 8001abc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac0:	2b6d      	cmp	r3, #109	; 0x6d
 8001ac2:	d105      	bne.n	8001ad0 <main+0x280>
 8001ac4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ac8:	2b65      	cmp	r3, #101	; 0x65
 8001aca:	d101      	bne.n	8001ad0 <main+0x280>
						  H_Time();
 8001acc:	f7ff f818 	bl	8000b00 <H_Time>
					  }

					  if((buffin[5]==0x72)&&(buffin[6]==0x65)&&(buffin[7]==0x67)&&(buffin[8]==0x65)){
 8001ad0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ad4:	2b72      	cmp	r3, #114	; 0x72
 8001ad6:	d10d      	bne.n	8001af4 <main+0x2a4>
 8001ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001adc:	2b65      	cmp	r3, #101	; 0x65
 8001ade:	d109      	bne.n	8001af4 <main+0x2a4>
 8001ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae4:	2b67      	cmp	r3, #103	; 0x67
 8001ae6:	d105      	bne.n	8001af4 <main+0x2a4>
 8001ae8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001aec:	2b65      	cmp	r3, #101	; 0x65
 8001aee:	d101      	bne.n	8001af4 <main+0x2a4>
						  H_Rege();
 8001af0:	f7ff f836 	bl	8000b60 <H_Rege>
					  }

					  if((buffin[5]==0x70)&&(buffin[6]==0x72)&&(buffin[7]==0x69)&&(buffin[8]==0x6e)){
 8001af4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001af8:	2b70      	cmp	r3, #112	; 0x70
 8001afa:	d10d      	bne.n	8001b18 <main+0x2c8>
 8001afc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b00:	2b72      	cmp	r3, #114	; 0x72
 8001b02:	d109      	bne.n	8001b18 <main+0x2c8>
 8001b04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b08:	2b69      	cmp	r3, #105	; 0x69
 8001b0a:	d105      	bne.n	8001b18 <main+0x2c8>
 8001b0c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b10:	2b6e      	cmp	r3, #110	; 0x6e
 8001b12:	d101      	bne.n	8001b18 <main+0x2c8>
						  H_Prin();
 8001b14:	f7ff f846 	bl	8000ba4 <H_Prin>





					  for(int w = 0; w<sizeof(buffin); w++){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b1e:	e00b      	b.n	8001b38 <main+0x2e8>
					  					 			buffin[w]=0;}
 8001b20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b28:	4413      	add	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001b2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b3c:	2b63      	cmp	r3, #99	; 0x63
 8001b3e:	d9ef      	bls.n	8001b20 <main+0x2d0>
 8001b40:	e6fc      	b.n	800193c <main+0xec>

				  }

				  else if(!memcmp(buffin,temp,strlen(temp))){
 8001b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb7a 	bl	8000240 <strlen>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 ffbc 	bl	8006ad4 <memcmp>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d147      	bne.n	8001bf2 <main+0x3a2>
					  printf("es temp\n\r");
 8001b62:	481a      	ldr	r0, [pc, #104]	; (8001bcc <main+0x37c>)
 8001b64:	f004 ffce 	bl	8006b04 <printf>
					  printf(" %d\n",strlen(temp));
 8001b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb67 	bl	8000240 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <main+0x374>)
 8001b78:	f004 ffc4 	bl	8006b04 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb5d 	bl	8000240 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <main+0x374>)
 8001b8c:	f004 ffba 	bl	8006b04 <printf>

					  //PONER LA FUNCION PARA LEER TEMPERATURA, YA QUE AC�? NO SE RECIBE PAR�?METRO//
					  Temp();
 8001b90:	f7ff fdd6 	bl	8001740 <Temp>

					  for(int w = 0; w<sizeof(buffin); w++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b9a:	e025      	b.n	8001be8 <main+0x398>
 8001b9c:	20000a80 	.word	0x20000a80
 8001ba0:	080111d8 	.word	0x080111d8
 8001ba4:	080111e0 	.word	0x080111e0
 8001ba8:	080111e8 	.word	0x080111e8
 8001bac:	080111f0 	.word	0x080111f0
 8001bb0:	080111f8 	.word	0x080111f8
 8001bb4:	08011200 	.word	0x08011200
 8001bb8:	08011208 	.word	0x08011208
 8001bbc:	08011210 	.word	0x08011210
 8001bc0:	0801113c 	.word	0x0801113c
 8001bc4:	08011148 	.word	0x08011148
 8001bc8:	08011150 	.word	0x08011150
 8001bcc:	0801115c 	.word	0x0801115c
													buffin[w]=0;
 8001bd0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001be2:	3301      	adds	r3, #1
 8001be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bec:	2b63      	cmp	r3, #99	; 0x63
 8001bee:	d9ef      	bls.n	8001bd0 <main+0x380>
 8001bf0:	e6a4      	b.n	800193c <main+0xec>

					  }

				  }

				  else if(!memcmp(buffin,ledc,strlen(ledc))){
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb22 	bl	8000240 <strlen>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f107 0120 	add.w	r1, r7, #32
 8001c02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 ff64 	bl	8006ad4 <memcmp>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d145      	bne.n	8001c9e <main+0x44e>
					  printf("es led\n\r");
 8001c12:	48b6      	ldr	r0, [pc, #728]	; (8001eec <main+0x69c>)
 8001c14:	f004 ff76 	bl	8006b04 <printf>
					  printf(" %d\n",strlen(ledc));
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fb0f 	bl	8000240 <strlen>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	48b2      	ldr	r0, [pc, #712]	; (8001ef0 <main+0x6a0>)
 8001c28:	f004 ff6c 	bl	8006b04 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fb05 	bl	8000240 <strlen>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	48ad      	ldr	r0, [pc, #692]	; (8001ef0 <main+0x6a0>)
 8001c3c:	f004 ff62 	bl	8006b04 <printf>

					  //PONER LA FUNCIÓN PARA CONFIGURAR LA FRECUANCIA DEL LED//


					  if((buffin[5]== 'o') && (buffin[6]== 'n')){
 8001c40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c44:	2b6f      	cmp	r3, #111	; 0x6f
 8001c46:	d108      	bne.n	8001c5a <main+0x40a>
 8001c48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c4c:	2b6e      	cmp	r3, #110	; 0x6e
 8001c4e:	d104      	bne.n	8001c5a <main+0x40a>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2101      	movs	r1, #1
 8001c54:	48a7      	ldr	r0, [pc, #668]	; (8001ef4 <main+0x6a4>)
 8001c56:	f001 f951 	bl	8002efc <HAL_GPIO_WritePin>
					  }

					  if((buffin[5] == 'o') && (buffin[6]=='f')){
 8001c5a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001c5e:	2b6f      	cmp	r3, #111	; 0x6f
 8001c60:	d108      	bne.n	8001c74 <main+0x424>
 8001c62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001c66:	2b66      	cmp	r3, #102	; 0x66
 8001c68:	d104      	bne.n	8001c74 <main+0x424>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	48a1      	ldr	r0, [pc, #644]	; (8001ef4 <main+0x6a4>)
 8001c70:	f001 f944 	bl	8002efc <HAL_GPIO_WritePin>
					  }


					  for(int w = 0; w<sizeof(buffin); w++){
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c7a:	e00b      	b.n	8001c94 <main+0x444>
												buffin[w]=0;}
 8001c7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c84:	4413      	add	r3, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c98:	2b63      	cmp	r3, #99	; 0x63
 8001c9a:	d9ef      	bls.n	8001c7c <main+0x42c>
 8001c9c:	e64e      	b.n	800193c <main+0xec>
				  }




				  else if(!memcmp(buffin,lfsr,strlen(lfsr))){
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe facc 	bl	8000240 <strlen>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f107 0118 	add.w	r1, r7, #24
 8001cae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 ff0e 	bl	8006ad4 <memcmp>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d13b      	bne.n	8001d36 <main+0x4e6>
					  printf("es lfsr\n\r");
 8001cbe:	488e      	ldr	r0, [pc, #568]	; (8001ef8 <main+0x6a8>)
 8001cc0:	f004 ff20 	bl	8006b04 <printf>
					  printf(" %d\n",strlen(lfsr));
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fab9 	bl	8000240 <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4887      	ldr	r0, [pc, #540]	; (8001ef0 <main+0x6a0>)
 8001cd4:	f004 ff16 	bl	8006b04 <printf>
					  printf(" %d\n",strlen((char*)buffin));
 8001cd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe faaf 	bl	8000240 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4882      	ldr	r0, [pc, #520]	; (8001ef0 <main+0x6a0>)
 8001ce8:	f004 ff0c 	bl	8006b04 <printf>

					  if(buffin[5]=='x'){
 8001cec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001cf0:	2b78      	cmp	r3, #120	; 0x78
 8001cf2:	d104      	bne.n	8001cfe <main+0x4ae>
						  buf_int[0] = 0;
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <main+0x6ac>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

						  Lfsr();
 8001cfa:	f7fe ff97 	bl	8000c2c <Lfsr>


					  }

					  if(buffin[5]=='p'){
 8001cfe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001d02:	2b70      	cmp	r3, #112	; 0x70
 8001d04:	d102      	bne.n	8001d0c <main+0x4bc>
						  printf("es lfsr con pagina\n\r");
 8001d06:	487e      	ldr	r0, [pc, #504]	; (8001f00 <main+0x6b0>)
 8001d08:	f004 fefc 	bl	8006b04 <printf>
					  }



					  for(int w = 0; w<sizeof(buffin); w++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d12:	e00b      	b.n	8001d2c <main+0x4dc>
					  							buffin[w]=0;}
 8001d14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d26:	3301      	adds	r3, #1
 8001d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d30:	2b63      	cmp	r3, #99	; 0x63
 8001d32:	d9ef      	bls.n	8001d14 <main+0x4c4>
 8001d34:	e602      	b.n	800193c <main+0xec>

				  }



				  else if(!memcmp(buffin,time,strlen(time))){
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fa80 	bl	8000240 <strlen>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f107 0110 	add.w	r1, r7, #16
 8001d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fec2 	bl	8006ad4 <memcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d13c      	bne.n	8001dd0 <main+0x580>
					  	  uint64_t r =0;
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
					  	  r = pow(2,32);
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0301 	mov.w	r3, #1
 8001d6a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 		printf("es time\n\r");
 8001d6e:	4865      	ldr	r0, [pc, #404]	; (8001f04 <main+0x6b4>)
 8001d70:	f004 fec8 	bl	8006b04 <printf>
				 		printf(" %d\n",strlen(time));
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fa61 	bl	8000240 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	485b      	ldr	r0, [pc, #364]	; (8001ef0 <main+0x6a0>)
 8001d84:	f004 febe 	bl	8006b04 <printf>
				 		printf(" %d\n",strlen((char*)buffin));
 8001d88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa57 	bl	8000240 <strlen>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4856      	ldr	r0, [pc, #344]	; (8001ef0 <main+0x6a0>)
 8001d98:	f004 feb4 	bl	8006b04 <printf>
				 		printf(" %llu",r);
 8001d9c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001da0:	4859      	ldr	r0, [pc, #356]	; (8001f08 <main+0x6b8>)
 8001da2:	f004 feaf 	bl	8006b04 <printf>



				 		for(int w = 0; w<sizeof(buffin); w++){
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dac:	e00b      	b.n	8001dc6 <main+0x576>
				 					  			buffin[w]=0;}
 8001dae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001db6:	4413      	add	r3, r2
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
				 		for(int w = 0; w<sizeof(buffin); w++){
 8001dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dca:	2b63      	cmp	r3, #99	; 0x63
 8001dcc:	d9ef      	bls.n	8001dae <main+0x55e>
 8001dce:	e5b5      	b.n	800193c <main+0xec>

				  }


				  else if(!memcmp(buffin,rege,strlen(rege))){
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa33 	bl	8000240 <strlen>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f107 0108 	add.w	r1, r7, #8
 8001de0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fe75 	bl	8006ad4 <memcmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d12b      	bne.n	8001e48 <main+0x5f8>
				  	printf("es rege\n\r");
 8001df0:	4846      	ldr	r0, [pc, #280]	; (8001f0c <main+0x6bc>)
 8001df2:	f004 fe87 	bl	8006b04 <printf>
				  	printf(" %d\n",strlen(rege));
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fa20 	bl	8000240 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4619      	mov	r1, r3
 8001e04:	483a      	ldr	r0, [pc, #232]	; (8001ef0 <main+0x6a0>)
 8001e06:	f004 fe7d 	bl	8006b04 <printf>
				  	printf(" %d\n",strlen((char*)buffin));
 8001e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fa16 	bl	8000240 <strlen>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <main+0x6a0>)
 8001e1a:	f004 fe73 	bl	8006b04 <printf>



				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e24:	e00b      	b.n	8001e3e <main+0x5ee>
				  				 			buffin[w]=0;}
 8001e26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e2e:	4413      	add	r3, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e42:	2b63      	cmp	r3, #99	; 0x63
 8001e44:	d9ef      	bls.n	8001e26 <main+0x5d6>
 8001e46:	e579      	b.n	800193c <main+0xec>

				  }



				  else if(!memcmp(buffin,prin,strlen(prin))){
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe f9f8 	bl	8000240 <strlen>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4639      	mov	r1, r7
 8001e54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 fe3b 	bl	8006ad4 <memcmp>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12a      	bne.n	8001eba <main+0x66a>
				  	printf("es prin\n\r");
 8001e64:	482a      	ldr	r0, [pc, #168]	; (8001f10 <main+0x6c0>)
 8001e66:	f004 fe4d 	bl	8006b04 <printf>
				  	printf(" %d\n",strlen(prin));
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe f9e7 	bl	8000240 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4619      	mov	r1, r3
 8001e76:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <main+0x6a0>)
 8001e78:	f004 fe44 	bl	8006b04 <printf>
				  	printf(" %d\n",strlen((char*)buffin));
 8001e7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe f9dd 	bl	8000240 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <main+0x6a0>)
 8001e8c:	f004 fe3a 	bl	8006b04 <printf>



				  	for(int w = 0; w<sizeof(buffin); w++){
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e96:	e00b      	b.n	8001eb0 <main+0x660>
				  				 			buffin[w]=0;}
 8001e98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buffin); w++){
 8001ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eb4:	2b63      	cmp	r3, #99	; 0x63
 8001eb6:	d9ef      	bls.n	8001e98 <main+0x648>
 8001eb8:	e540      	b.n	800193c <main+0xec>

				  }

				  else{
					  printf("ningun comando\n\r");
 8001eba:	4816      	ldr	r0, [pc, #88]	; (8001f14 <main+0x6c4>)
 8001ebc:	f004 fe22 	bl	8006b04 <printf>
					  for(int w = 0; w<sizeof(buffin); w++){
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ec6:	e00b      	b.n	8001ee0 <main+0x690>
					 				  		  			  buffin[w]=0;}
 8001ec8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buffin); w++){
 8001ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eda:	3301      	adds	r3, #1
 8001edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ee4:	2b63      	cmp	r3, #99	; 0x63
 8001ee6:	d9ef      	bls.n	8001ec8 <main+0x678>
				while(rx[0] != 0x0A){
 8001ee8:	e528      	b.n	800193c <main+0xec>
 8001eea:	bf00      	nop
 8001eec:	08011168 	.word	0x08011168
 8001ef0:	08011148 	.word	0x08011148
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	08011174 	.word	0x08011174
 8001efc:	200009dc 	.word	0x200009dc
 8001f00:	08011180 	.word	0x08011180
 8001f04:	08011198 	.word	0x08011198
 8001f08:	080111a4 	.word	0x080111a4
 8001f0c:	080111ac 	.word	0x080111ac
 8001f10:	080111b8 	.word	0x080111b8
 8001f14:	080111c4 	.word	0x080111c4

08001f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b094      	sub	sp, #80	; 0x50
 8001f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	2234      	movs	r2, #52	; 0x34
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fde4 	bl	8006af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <SystemClock_Config+0xd8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <SystemClock_Config+0xd8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <SystemClock_Config+0xd8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <SystemClock_Config+0xdc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <SystemClock_Config+0xdc>)
 8001f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <SystemClock_Config+0xdc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001f88:	2360      	movs	r3, #96	; 0x60
 8001f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fd95 	bl	8003acc <HAL_RCC_OscConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa8:	f000 f95c 	bl	8002264 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fac:	f001 fd3e 	bl	8003a2c <HAL_PWREx_EnableOverDrive>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001fb6:	f000 f955 	bl	8002264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fba:	230f      	movs	r3, #15
 8001fbc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 f826 	bl	8004028 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001fe2:	f000 f93f 	bl	8002264 <Error_Handler>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3750      	adds	r7, #80	; 0x50
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_I2C1_Init+0x74>)
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <MX_I2C1_Init+0x78>)
 8002000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_I2C1_Init+0x74>)
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <MX_I2C1_Init+0x7c>)
 8002006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_I2C1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_I2C1_Init+0x74>)
 8002010:	2201      	movs	r2, #1
 8002012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_I2C1_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_I2C1_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_I2C1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_I2C1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_I2C1_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002032:	480e      	ldr	r0, [pc, #56]	; (800206c <MX_I2C1_Init+0x74>)
 8002034:	f000 ff7c 	bl	8002f30 <HAL_I2C_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800203e:	f000 f911 	bl	8002264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <MX_I2C1_Init+0x74>)
 8002046:	f001 fc59 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002050:	f000 f908 	bl	8002264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002054:	2100      	movs	r1, #0
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_I2C1_Init+0x74>)
 8002058:	f001 fc9b 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002062:	f000 f8ff 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200009e0 	.word	0x200009e0
 8002070:	40005400 	.word	0x40005400
 8002074:	10805d88 	.word	0x10805d88

08002078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM2_Init+0x98>)
 8002098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_TIM2_Init+0x98>)
 80020a0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM2_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM2_Init+0x98>)
 80020ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80020b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM2_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_TIM2_Init+0x98>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_TIM2_Init+0x98>)
 80020c2:	f002 fdff 	bl	8004cc4 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020cc:	f000 f8ca 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <MX_TIM2_Init+0x98>)
 80020de:	f002 fe49 	bl	8004d74 <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80020e8:	f000 f8bc 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_TIM2_Init+0x98>)
 80020fa:	f003 f83f 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002104:	f000 f8ae 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000a34 	.word	0x20000a34

08002114 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_USART3_UART_Init+0x58>)
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <MX_USART3_UART_Init+0x5c>)
 800211c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002120:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_USART3_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART3_UART_Init+0x58>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_USART3_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_USART3_UART_Init+0x58>)
 8002158:	f003 f89e 	bl	8005298 <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002162:	f000 f87f 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000a80 	.word	0x20000a80
 8002170:	40004800 	.word	0x40004800

08002174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <MX_GPIO_Init+0xc0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a29      	ldr	r2, [pc, #164]	; (8002234 <MX_GPIO_Init+0xc0>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <MX_GPIO_Init+0xc0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2101      	movs	r1, #1
 80021ee:	4812      	ldr	r0, [pc, #72]	; (8002238 <MX_GPIO_Init+0xc4>)
 80021f0:	f000 fe84 	bl	8002efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021fe:	2302      	movs	r3, #2
 8002200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <MX_GPIO_Init+0xc8>)
 800220a:	f000 fccb 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_GPIO_Init+0xc4>)
 8002226:	f000 fcbd 	bl	8002ba4 <HAL_GPIO_Init>

}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800

08002240 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    buf_int[0]=tx_int[0];
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_UART_RxCpltCallback+0x1c>)
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_UART_RxCpltCallback+0x20>)
 800224e:	701a      	strb	r2, [r3, #0]


}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	200009d8 	.word	0x200009d8
 8002260:	200009dc 	.word	0x200009dc

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <RetargetInit+0x28>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <RetargetInit+0x2c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6898      	ldr	r0, [r3, #8]
 8002284:	2300      	movs	r3, #0
 8002286:	2202      	movs	r2, #2
 8002288:	2100      	movs	r1, #0
 800228a:	f004 fcad 	bl	8006be8 <setvbuf>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000b08 	.word	0x20000b08
 800229c:	2000000c 	.word	0x2000000c

080022a0 <_isatty>:

int _isatty(int fd) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db04      	blt.n	80022b8 <_isatty+0x18>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	dc01      	bgt.n	80022b8 <_isatty+0x18>
    return 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e005      	b.n	80022c4 <_isatty+0x24>

  errno = EBADF;
 80022b8:	f004 fbc8 	bl	8006a4c <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	2209      	movs	r2, #9
 80022c0:	601a      	str	r2, [r3, #0]
  return 0;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_write>:

int _write(int fd, char* ptr, int len) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d002      	beq.n	80022e4 <_write+0x18>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d111      	bne.n	8002308 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <_write+0x54>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	f003 f81f 	bl	8005334 <HAL_UART_Transmit>
 80022f6:	4603      	mov	r3, r0
 80022f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <_write+0x38>
      return len;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e008      	b.n	8002316 <_write+0x4a>
    else
      return EIO;
 8002304:	2305      	movs	r3, #5
 8002306:	e006      	b.n	8002316 <_write+0x4a>
  }
  errno = EBADF;
 8002308:	f004 fba0 	bl	8006a4c <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	2209      	movs	r2, #9
 8002310:	601a      	str	r2, [r3, #0]
  return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000b08 	.word	0x20000b08

08002324 <_close>:

int _close(int fd) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db04      	blt.n	800233c <_close+0x18>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	dc01      	bgt.n	800233c <_close+0x18>
    return 0;
 8002338:	2300      	movs	r3, #0
 800233a:	e006      	b.n	800234a <_close+0x26>

  errno = EBADF;
 800233c:	f004 fb86 	bl	8006a4c <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	2209      	movs	r2, #9
 8002344:	601a      	str	r2, [r3, #0]
  return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800235e:	f004 fb75 	bl	8006a4c <__errno>
 8002362:	4603      	mov	r3, r0
 8002364:	2209      	movs	r2, #9
 8002366:	601a      	str	r2, [r3, #0]
  return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_read>:

int _read(int fd, char* ptr, int len) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d110      	bne.n	80023a8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <_read+0x4c>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	2201      	movs	r2, #1
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	f003 f852 	bl	800543a <HAL_UART_Receive>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <_read+0x30>
      return 1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e008      	b.n	80023b6 <_read+0x42>
    else
      return EIO;
 80023a4:	2305      	movs	r3, #5
 80023a6:	e006      	b.n	80023b6 <_read+0x42>
  }
  errno = EBADF;
 80023a8:	f004 fb50 	bl	8006a4c <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2209      	movs	r2, #9
 80023b0:	601a      	str	r2, [r3, #0]
  return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000b08 	.word	0x20000b08

080023c4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db08      	blt.n	80023e6 <_fstat+0x22>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	dc05      	bgt.n	80023e6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e0:	605a      	str	r2, [r3, #4]
    return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e005      	b.n	80023f2 <_fstat+0x2e>
  }

  errno = EBADF;
 80023e6:	f004 fb31 	bl	8006a4c <__errno>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2209      	movs	r2, #9
 80023ee:	601a      	str	r2, [r3, #0]
  return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_MspInit+0x44>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_MspInit+0x44>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_MspInit+0x44>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x44>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x44>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x44>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0ae      	sub	sp, #184	; 0xb8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2290      	movs	r2, #144	; 0x90
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fb45 	bl	8006af4 <memset>
  if(hi2c->Instance==I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_I2C_MspInit+0xb4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d13c      	bne.n	80024ee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002478:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800247a:	2300      	movs	r3, #0
 800247c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fff6 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800248e:	f7ff fee9 	bl	8002264 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b2:	2312      	movs	r3, #18
 80024b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c4:	2304      	movs	r3, #4
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024ce:	4619      	mov	r1, r3
 80024d0:	480b      	ldr	r0, [pc, #44]	; (8002500 <HAL_I2C_MspInit+0xbc>)
 80024d2:	f000 fb67 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 80024dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_I2C_MspInit+0xb8>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	37b8      	adds	r7, #184	; 0xb8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020400 	.word	0x40020400

08002504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d10b      	bne.n	800252e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0ae      	sub	sp, #184	; 0xb8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2290      	movs	r2, #144	; 0x90
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f004 fac7 	bl	8006af4 <memset>
  if(huart->Instance==USART3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_UART_MspInit+0xc4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d144      	bne.n	80025fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002574:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002576:	2300      	movs	r3, #0
 8002578:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4618      	mov	r0, r3
 8002580:	f001 ff78 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800258a:	f7ff fe6b 	bl	8002264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_UART_MspInit+0xc8>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_UART_MspInit+0xc8>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_UART_MspInit+0xc8>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_UART_MspInit+0xc8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_UART_MspInit+0xc8>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_UART_MspInit+0xc8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <HAL_UART_MspInit+0xcc>)
 80025e6:	f000 fadd 	bl	8002ba4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2027      	movs	r0, #39	; 0x27
 80025f0:	f000 fa0f 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025f4:	2027      	movs	r0, #39	; 0x27
 80025f6:	f000 fa28 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	37b8      	adds	r7, #184	; 0xb8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40004800 	.word	0x40004800
 8002608:	40023800 	.word	0x40023800
 800260c:	40020c00 	.word	0x40020c00

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f8ba 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <USART3_IRQHandler+0x10>)
 800266a:	f002 ffef 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000a80 	.word	0x20000a80

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f004 f9d0 	bl	8006a4c <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20080000 	.word	0x20080000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	20000b0c 	.word	0x20000b0c
 80026e0:	20000b50 	.word	0x20000b50

080026e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002724:	4c0b      	ldr	r4, [pc, #44]	; (8002754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002732:	f7ff ffd7 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f004 f98f 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273a:	f7ff f889 	bl	8001850 <main>
  bx  lr    
 800273e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002740:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002748:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 800274c:	08012fc4 	.word	0x08012fc4
  ldr r2, =_sbss
 8002750:	200009bc 	.word	0x200009bc
  ldr r4, =_ebss
 8002754:	20000b50 	.word	0x20000b50

08002758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC_IRQHandler>

0800275a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275e:	2003      	movs	r0, #3
 8002760:	f000 f94c 	bl	80029fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002764:	2000      	movs	r0, #0
 8002766:	f000 f805 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276a:	f7ff fe47 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f967 	bl	8002a66 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f000 f92f 	bl	8002a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000b10 	.word	0x20000b10

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000b10 	.word	0x20000b10

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000008 	.word	0x20000008

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <__NVIC_SetPriorityGrouping+0x40>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x40>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00
 80028a0:	05fa0000 	.word	0x05fa0000

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c8:	d301      	bcc.n	80029ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <SysTick_Config+0x40>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d6:	210f      	movs	r1, #15
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f7ff ff8e 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <SysTick_Config+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SysTick_Config+0x40>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff29 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a24:	f7ff ff3e 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 8002a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7ff ff8e 	bl	8002950 <NVIC_EncodePriority>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff5d 	bl	80028fc <__NVIC_SetPriority>
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff31 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa2 	bl	80029b8 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff feb6 	bl	80027fc <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d008      	beq.n	8002ab0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e052      	b.n	8002b56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0216 	bic.w	r2, r2, #22
 8002abe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ace:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <HAL_DMA_Abort+0x62>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0208 	bic.w	r2, r2, #8
 8002aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b00:	e013      	b.n	8002b2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b02:	f7ff fe7b 	bl	80027fc <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d90c      	bls.n	8002b2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e015      	b.n	8002b56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e4      	bne.n	8002b02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	223f      	movs	r2, #63	; 0x3f
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e00c      	b.n	8002b96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2205      	movs	r2, #5
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e175      	b.n	8002eb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8164 	bne.w	8002eaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x56>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80be 	beq.w	8002eaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d46:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <HAL_GPIO_Init+0x328>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_GPIO_Init+0x32c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d037      	beq.n	8002de2 <HAL_GPIO_Init+0x23e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_GPIO_Init+0x23a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_GPIO_Init+0x334>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02b      	beq.n	8002dda <HAL_GPIO_Init+0x236>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a55      	ldr	r2, [pc, #340]	; (8002edc <HAL_GPIO_Init+0x338>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d025      	beq.n	8002dd6 <HAL_GPIO_Init+0x232>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_GPIO_Init+0x33c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <HAL_GPIO_Init+0x22e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a53      	ldr	r2, [pc, #332]	; (8002ee4 <HAL_GPIO_Init+0x340>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x22a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_GPIO_Init+0x344>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x226>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_GPIO_Init+0x348>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x222>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a50      	ldr	r2, [pc, #320]	; (8002ef0 <HAL_GPIO_Init+0x34c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x21e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4f      	ldr	r2, [pc, #316]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x21a>
 8002dba:	2309      	movs	r3, #9
 8002dbc:	e012      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	e010      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	e00e      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x328>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae86 	bls.w	8002bc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022400 	.word	0x40022400
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f0c:	787b      	ldrb	r3, [r7, #1]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f18:	e003      	b.n	8002f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f1a:	887b      	ldrh	r3, [r7, #2]
 8002f1c:	041a      	lsls	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fa74 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e006      	b.n	8002fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d104      	bne.n	8002fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_I2C_Init+0x11c>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	02008000 	.word	0x02008000

08003050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	f040 80da 	bne.w	8003226 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_Master_Transmit+0x30>
 800307c:	2302      	movs	r3, #2
 800307e:	e0d3      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003088:	f7ff fbb8 	bl	80027fc <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2319      	movs	r3, #25
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f9e6 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0be      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2210      	movs	r2, #16
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2bff      	cmp	r3, #255	; 0xff
 80030da:	d90e      	bls.n	80030fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	22ff      	movs	r2, #255	; 0xff
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_I2C_Master_Transmit+0x1e0>)
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fbd0 	bl	8003898 <I2C_TransferConfig>
 80030f8:	e06c      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	8979      	ldrh	r1, [r7, #10]
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_I2C_Master_Transmit+0x1e0>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fbbf 	bl	8003898 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800311a:	e05b      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	6a39      	ldr	r1, [r7, #32]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f9e3 	bl	80034ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e07b      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d034      	beq.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d130      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f975 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04d      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d90e      	bls.n	80031b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	2300      	movs	r3, #0
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fb73 	bl	8003898 <I2C_TransferConfig>
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fb62 	bl	8003898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d19e      	bne.n	800311c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	6a39      	ldr	r1, [r7, #32]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9c2 	bl	800356c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01a      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2220      	movs	r2, #32
 80031f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_I2C_Master_Transmit+0x1e4>)
 8003206:	400b      	ands	r3, r1
 8003208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	80002000 	.word	0x80002000
 8003234:	fe00e800 	.word	0xfe00e800

08003238 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b20      	cmp	r3, #32
 8003256:	f040 80db 	bne.w	8003410 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_I2C_Master_Receive+0x30>
 8003264:	2302      	movs	r3, #2
 8003266:	e0d4      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003270:	f7ff fac4 	bl	80027fc <HAL_GetTick>
 8003274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2319      	movs	r3, #25
 800327c:	2201      	movs	r2, #1
 800327e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8f2 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0bf      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2222      	movs	r2, #34	; 0x22
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2210      	movs	r2, #16
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	893a      	ldrh	r2, [r7, #8]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2bff      	cmp	r3, #255	; 0xff
 80032c2:	d90e      	bls.n	80032e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_I2C_Master_Receive+0x1e4>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fadc 	bl	8003898 <I2C_TransferConfig>
 80032e0:	e06d      	b.n	80033be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_I2C_Master_Receive+0x1e4>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 facb 	bl	8003898 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003302:	e05c      	b.n	80033be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	6a39      	ldr	r1, [r7, #32]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f96b 	bl	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e07c      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d034      	beq.n	80033be <HAL_I2C_Master_Receive+0x186>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d130      	bne.n	80033be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2200      	movs	r2, #0
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f880 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e04d      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	2bff      	cmp	r3, #255	; 0xff
 800337e:	d90e      	bls.n	800339e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	b2da      	uxtb	r2, r3
 800338c:	8979      	ldrh	r1, [r7, #10]
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa7e 	bl	8003898 <I2C_TransferConfig>
 800339c:	e00f      	b.n	80033be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa6d 	bl	8003898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d19d      	bne.n	8003304 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8cd 	bl	800356c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01a      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2220      	movs	r2, #32
 80033e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_I2C_Master_Receive+0x1e8>)
 80033f0:	400b      	ands	r3, r1
 80033f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	80002400 	.word	0x80002400
 8003420:	fe00e800 	.word	0xfe00e800

08003424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d103      	bne.n	8003442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d007      	beq.n	8003460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	619a      	str	r2, [r3, #24]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347c:	e022      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d01e      	beq.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7ff f9b9 	bl	80027fc <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d113      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e00f      	b.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d0cd      	beq.n	800347e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f8:	e02c      	b.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8ea 	bl	80036d8 <I2C_IsErrorOccurred>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02a      	b.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d01e      	beq.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7ff f971 	bl	80027fc <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d113      	bne.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d1cb      	bne.n	80034fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	e028      	b.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8aa 	bl	80036d8 <I2C_IsErrorOccurred>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e026      	b.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7ff f935 	bl	80027fc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d113      	bne.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e007      	b.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d1cf      	bne.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035f0:	e064      	b.n	80036bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f86e 	bl	80036d8 <I2C_IsErrorOccurred>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e062      	b.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d138      	bne.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d105      	bne.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e04e      	b.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b10      	cmp	r3, #16
 800363a:	d107      	bne.n	800364c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2210      	movs	r2, #16
 8003642:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2204      	movs	r2, #4
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
 800364a:	e002      	b.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2220      	movs	r2, #32
 8003658:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003666:	400b      	ands	r3, r1
 8003668:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e022      	b.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7ff f8b9 	bl	80027fc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e007      	b.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d193      	bne.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d068      	beq.n	80037d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2210      	movs	r2, #16
 800370a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800370c:	e049      	b.n	80037a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d045      	beq.n	80037a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7ff f871 	bl	80027fc <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_IsErrorOccurred+0x54>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13a      	bne.n	80037a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800373e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800374a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374e:	d121      	bne.n	8003794 <I2C_IsErrorOccurred+0xbc>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003756:	d01d      	beq.n	8003794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b20      	cmp	r3, #32
 800375c:	d01a      	beq.n	8003794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800376e:	f7ff f845 	bl	80027fc <HAL_GetTick>
 8003772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003774:	e00e      	b.n	8003794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003776:	f7ff f841 	bl	80027fc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b19      	cmp	r3, #25
 8003782:	d907      	bls.n	8003794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f043 0320 	orr.w	r3, r3, #32
 800378a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003792:	e006      	b.n	80037a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d1e9      	bne.n	8003776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d003      	beq.n	80037b8 <I2C_IsErrorOccurred+0xe0>
 80037b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0aa      	beq.n	800370e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2220      	movs	r2, #32
 80037c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff fde9 	bl	8003424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <I2C_IsErrorOccurred+0x1bc>)
 800385e:	400b      	ands	r3, r1
 8003860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800388a:	4618      	mov	r0, r3
 800388c:	3728      	adds	r7, #40	; 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	4613      	mov	r3, r2
 80038a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0d5b      	lsrs	r3, r3, #21
 80038d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <I2C_TransferConfig+0x60>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	43db      	mvns	r3, r3
 80038dc:	ea02 0103 	and.w	r1, r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	03ff63ff 	.word	0x03ff63ff

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5a:	f7fe fecf 	bl	80027fc <HAL_GetTick>
 8003a5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a60:	e009      	b.n	8003a76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a62:	f7fe fecb 	bl	80027fc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a70:	d901      	bls.n	8003a76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e022      	b.n	8003abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a82:	d1ee      	bne.n	8003a62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7fe feb4 	bl	80027fc <HAL_GetTick>
 8003a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a96:	e009      	b.n	8003aac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a98:	f7fe feb0 	bl	80027fc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa6:	d901      	bls.n	8003aac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e007      	b.n	8003abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000

08003acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e29b      	b.n	800401a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afc:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b08:	4b90      	ldr	r3, [pc, #576]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x130>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e275      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a>
 8003b38:	4b84      	ldr	r3, [pc, #528]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a83      	ldr	r2, [pc, #524]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x9c>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003b72:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a75      	ldr	r2, [pc, #468]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b73      	ldr	r3, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a72      	ldr	r2, [pc, #456]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b8c:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6e      	ldr	r2, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6b      	ldr	r2, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe fe26 	bl	80027fc <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fe22 	bl	80027fc <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e229      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fe12 	bl	80027fc <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fe0e 	bl	80027fc <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e215      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x110>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d069      	beq.n	8003cde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1e9      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	493d      	ldr	r1, [pc, #244]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e040      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fdc4 	bl	80027fc <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe fdc0 	bl	80027fc <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fda0 	bl	80027fc <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fd9c 	bl	80027fc <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1a3      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d038      	beq.n	8003d5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d019      	beq.n	8003d26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fd7d 	bl	80027fc <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe fd79 	bl	80027fc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e180      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x23a>
 8003d24:	e01a      	b.n	8003d5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe fd63 	bl	80027fc <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fd5f 	bl	80027fc <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d903      	bls.n	8003d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e166      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
 8003d4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ee      	bne.n	8003d3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a4 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a88      	ldr	r2, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	4b83      	ldr	r3, [pc, #524]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d9e:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7f      	ldr	r2, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fd27 	bl	80027fc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fe fd23 	bl	80027fc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e12a      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x31a>
 8003dd8:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a6f      	ldr	r2, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x33c>
 8003dee:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x35e>
 8003e10:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fcd7 	bl	80027fc <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe fcd3 	bl	80027fc <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0d8      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCC_OscConfig+0x386>
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fe fcc1 	bl	80027fc <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe fcbd 	bl	80027fc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0c2      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80ae 	beq.w	8004018 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d06d      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d14b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a31      	ldr	r2, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fc8e 	bl	80027fc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe fc8a 	bl	80027fc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e091      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	071b      	lsls	r3, r3, #28
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc5c 	bl	80027fc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fc58 	bl	80027fc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e05f      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x47c>
 8003f66:	e057      	b.n	8004018 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fc42 	bl	80027fc <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fc3e 	bl	80027fc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4b0>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x54c>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x558>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d030      	beq.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d129      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d122      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d119      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10f      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0d0      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d910      	bls.n	8004070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 020f 	bic.w	r2, r3, #15
 8004056:	4965      	ldr	r1, [pc, #404]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b8      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a52      	ldr	r2, [pc, #328]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d040      	beq.n	800414c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e073      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e06b      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4936      	ldr	r1, [pc, #216]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fe fb6e 	bl	80027fc <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe fb6a 	bl	80027fc <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e053      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d210      	bcs.n	800417c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	4922      	ldr	r1, [pc, #136]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e032      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4916      	ldr	r1, [pc, #88]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ba:	f000 f821 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	490a      	ldr	r1, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x1cc>)
 80041cc:	5ccb      	ldrb	r3, [r1, r3]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1d0>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe faca 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	08011218 	.word	0x08011218
 80041f8:	20000000 	.word	0x20000000
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b094      	sub	sp, #80	; 0x50
 8004206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
 800420c:	2300      	movs	r3, #0
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	2300      	movs	r3, #0
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004218:	4b79      	ldr	r3, [pc, #484]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d00d      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x40>
 8004224:	2b08      	cmp	r3, #8
 8004226:	f200 80e1 	bhi.w	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x34>
 800422e:	2b04      	cmp	r3, #4
 8004230:	d003      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x3a>
 8004232:	e0db      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004238:	e0db      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_GetSysClockFreq+0x208>)
 800423c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423e:	e0d8      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004240:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004256:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	2200      	movs	r2, #0
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004260:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
 800426e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	0159      	lsls	r1, r3, #5
 8004280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004284:	0150      	lsls	r0, r2, #5
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4621      	mov	r1, r4
 800428c:	1a51      	subs	r1, r2, r1
 800428e:	6139      	str	r1, [r7, #16]
 8004290:	4629      	mov	r1, r5
 8004292:	eb63 0301 	sbc.w	r3, r3, r1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a4:	4659      	mov	r1, fp
 80042a6:	018b      	lsls	r3, r1, #6
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ae:	4651      	mov	r1, sl
 80042b0:	018a      	lsls	r2, r1, #6
 80042b2:	4651      	mov	r1, sl
 80042b4:	ebb2 0801 	subs.w	r8, r2, r1
 80042b8:	4659      	mov	r1, fp
 80042ba:	eb63 0901 	sbc.w	r9, r3, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d2:	4690      	mov	r8, r2
 80042d4:	4699      	mov	r9, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	eb18 0303 	adds.w	r3, r8, r3
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	462b      	mov	r3, r5
 80042e0:	eb49 0303 	adc.w	r3, r9, r3
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042f2:	4629      	mov	r1, r5
 80042f4:	024b      	lsls	r3, r1, #9
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042fc:	4621      	mov	r1, r4
 80042fe:	024a      	lsls	r2, r1, #9
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800430c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004310:	f7fc f9aa 	bl	8000668 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431c:	e058      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	2200      	movs	r2, #0
 8004326:	4618      	mov	r0, r3
 8004328:	4611      	mov	r1, r2
 800432a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	f04f 0000 	mov.w	r0, #0
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	0159      	lsls	r1, r3, #5
 8004346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434a:	0150      	lsls	r0, r2, #5
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4641      	mov	r1, r8
 8004352:	ebb2 0a01 	subs.w	sl, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb63 0b01 	sbc.w	fp, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800436c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004370:	ebb2 040a 	subs.w	r4, r2, sl
 8004374:	eb63 050b 	sbc.w	r5, r3, fp
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	464b      	mov	r3, r9
 8004394:	eb45 0303 	adc.w	r3, r5, r3
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a6:	4629      	mov	r1, r5
 80043a8:	028b      	lsls	r3, r1, #10
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b0:	4621      	mov	r1, r4
 80043b2:	028a      	lsls	r2, r1, #10
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	61fa      	str	r2, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	f7fc f950 	bl	8000668 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80043e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3750      	adds	r7, #80	; 0x50
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08011228 	.word	0x08011228

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08011228 	.word	0x08011228

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d012      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800449c:	4b69      	ldr	r3, [pc, #420]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a68      	ldr	r2, [pc, #416]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044a6:	6093      	str	r3, [r2, #8]
 80044a8:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	4964      	ldr	r1, [pc, #400]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	4959      	ldr	r1, [pc, #356]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ec:	d101      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800450a:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	494a      	ldr	r1, [pc, #296]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 808b 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4a39      	ldr	r2, [pc, #228]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	6413      	str	r3, [r2, #64]	; 0x40
 8004564:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457c:	f7fe f93e 	bl	80027fc <HAL_GetTick>
 8004580:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004584:	f7fe f93a 	bl	80027fc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e38f      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d035      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d02e      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ca:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045e8:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d114      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe f902 	bl	80027fc <HAL_GetTick>
 80045f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fe f8fe 	bl	80027fc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e351      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ee      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462a:	d111      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800463a:	400b      	ands	r3, r1
 800463c:	4901      	ldr	r1, [pc, #4]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
 8004642:	e00b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
 800464c:	0ffffcff 	.word	0x0ffffcff
 8004650:	4bac      	ldr	r3, [pc, #688]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4aab      	ldr	r2, [pc, #684]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	4ba9      	ldr	r3, [pc, #676]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004668:	49a6      	ldr	r1, [pc, #664]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	4313      	orrs	r3, r2
 800466c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800467a:	4ba2      	ldr	r3, [pc, #648]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	4aa0      	ldr	r2, [pc, #640]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800468a:	4b9e      	ldr	r3, [pc, #632]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	499b      	ldr	r1, [pc, #620]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a8:	4b96      	ldr	r3, [pc, #600]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b6:	4993      	ldr	r1, [pc, #588]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ca:	4b8e      	ldr	r3, [pc, #568]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d8:	498a      	ldr	r1, [pc, #552]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ec:	4b85      	ldr	r3, [pc, #532]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fa:	4982      	ldr	r1, [pc, #520]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4979      	ldr	r1, [pc, #484]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004730:	4b74      	ldr	r3, [pc, #464]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	4971      	ldr	r1, [pc, #452]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004752:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f023 020c 	bic.w	r2, r3, #12
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004760:	4968      	ldr	r1, [pc, #416]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	4960      	ldr	r1, [pc, #384]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004796:	4b5b      	ldr	r3, [pc, #364]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	4957      	ldr	r1, [pc, #348]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047b8:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	494f      	ldr	r1, [pc, #316]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047da:	4b4a      	ldr	r3, [pc, #296]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	4946      	ldr	r1, [pc, #280]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047fc:	4b41      	ldr	r3, [pc, #260]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	493e      	ldr	r1, [pc, #248]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800481e:	4b39      	ldr	r3, [pc, #228]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482c:	4935      	ldr	r1, [pc, #212]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004840:	4b30      	ldr	r3, [pc, #192]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484e:	492d      	ldr	r1, [pc, #180]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d011      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004862:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004870:	4924      	ldr	r1, [pc, #144]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004880:	d101      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004882:	2301      	movs	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	4914      	ldr	r1, [pc, #80]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d4:	490b      	ldr	r1, [pc, #44]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	4902      	ldr	r1, [pc, #8]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004914:	4b8a      	ldr	r3, [pc, #552]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	4986      	ldr	r1, [pc, #536]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004938:	4b81      	ldr	r3, [pc, #516]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004948:	497d      	ldr	r1, [pc, #500]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d006      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80d6 	beq.w	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004964:	4b76      	ldr	r3, [pc, #472]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a75      	ldr	r2, [pc, #468]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800496e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd ff44 	bl	80027fc <HAL_GetTick>
 8004974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004978:	f7fd ff40 	bl	80027fc <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e195      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498a:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d021      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11d      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049b8:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	0e1b      	lsrs	r3, r3, #24
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	019a      	lsls	r2, r3, #6
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	4958      	ldr	r1, [pc, #352]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d02e      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a10:	d129      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a12:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a20:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a26:	0f1b      	lsrs	r3, r3, #28
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	019a      	lsls	r2, r3, #6
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	071b      	lsls	r3, r3, #28
 8004a46:	493e      	ldr	r1, [pc, #248]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a4e:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a54:	f023 021f 	bic.w	r2, r3, #31
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4938      	ldr	r1, [pc, #224]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01d      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	0f1b      	lsrs	r3, r3, #28
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d011      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	019a      	lsls	r2, r3, #6
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	071b      	lsls	r3, r3, #28
 8004ad6:	491a      	ldr	r1, [pc, #104]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aea:	f7fd fe87 	bl	80027fc <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004af2:	f7fd fe83 	bl	80027fc <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b64      	cmp	r3, #100	; 0x64
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0d8      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 80ce 	bne.w	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fd fe6a 	bl	80027fc <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b2c:	f7fd fe66 	bl	80027fc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d904      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0bb      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b3e:	bf00      	nop
 8004b40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b44:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b50:	d0ec      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d02e      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d12a      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b7a:	4b51      	ldr	r3, [pc, #324]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b88:	4b4d      	ldr	r3, [pc, #308]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	0f1b      	lsrs	r3, r3, #28
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	019a      	lsls	r2, r3, #6
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	4944      	ldr	r1, [pc, #272]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bb6:	4b42      	ldr	r3, [pc, #264]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	493d      	ldr	r1, [pc, #244]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be4:	d11d      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	0f1b      	lsrs	r3, r3, #28
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	019a      	lsls	r2, r3, #6
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	4929      	ldr	r1, [pc, #164]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d028      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4917      	ldr	r1, [pc, #92]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4911      	ldr	r1, [pc, #68]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fd fdb6 	bl	80027fc <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c94:	f7fd fdb2 	bl	80027fc <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e007      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb2:	d1ef      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800

08004cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e049      	b.n	8004d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fc0a 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 f900 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0b4      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x186>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4b56      	ldr	r3, [pc, #344]	; (8004f04 <HAL_TIM_ConfigClockSource+0x190>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d03e      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0xd4>
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	f200 8087 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	f000 8086 	beq.w	8004ee6 <HAL_TIM_ConfigClockSource+0x172>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d87f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d01a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0xa6>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d87b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d050      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x11a>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d877      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d03c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0xfa>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d873      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d058      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x13a>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d86f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	d064      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d86b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d060      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d867      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05c      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d05a      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	e062      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6899      	ldr	r1, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f000 f987 	bl	800513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	609a      	str	r2, [r3, #8]
      break;
 8004e46:	e04f      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6899      	ldr	r1, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f000 f970 	bl	800513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6a:	609a      	str	r2, [r3, #8]
      break;
 8004e6c:	e03c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 f8e4 	bl	8005048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f93d 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e02c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 f903 	bl	80050a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2160      	movs	r1, #96	; 0x60
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f92d 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e01c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 f8c4 	bl	8005048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f91d 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e00c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 f914 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e003      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	fffeff88 	.word	0xfffeff88

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d027      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d023      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40001800 	.word	0x40001800
 8005040:	40001c00 	.word	0x40001c00
 8005044:	40002000 	.word	0x40002000

08005048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 030a 	bic.w	r3, r3, #10
 8005084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b087      	sub	sp, #28
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0210 	bic.w	r2, r3, #16
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	f043 0307 	orr.w	r3, r3, #7
 8005128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	431a      	orrs	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e06d      	b.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d108      	bne.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a20      	ldr	r2, [pc, #128]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005206:	d01d      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1a      	ldr	r2, [pc, #104]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10c      	bne.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40010000 	.word	0x40010000
 8005280:	40010400 	.word	0x40010400
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800

08005298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e040      	b.n	800532c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fd f940 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fcca 	bl	8005c70 <UART_SetConfig>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e022      	b.n	800532c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 ff22 	bl	8006138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 ffa9 	bl	800627c <UART_CheckIdleState>
 800532a:	4603      	mov	r3, r0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005348:	2b20      	cmp	r3, #32
 800534a:	d171      	bne.n	8005430 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_UART_Transmit+0x24>
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e06a      	b.n	8005432 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536a:	f7fd fa47 	bl	80027fc <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d108      	bne.n	800539c <HAL_UART_Transmit+0x68>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e003      	b.n	80053a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a4:	e02c      	b.n	8005400 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 ffb0 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e038      	b.n	8005432 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	3302      	adds	r3, #2
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	e007      	b.n	80053ee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	3301      	adds	r3, #1
 80053ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1cc      	bne.n	80053a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2200      	movs	r2, #0
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 ff7d 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e005      	b.n	8005432 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b08a      	sub	sp, #40	; 0x28
 800543e:	af02      	add	r7, sp, #8
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	2b20      	cmp	r3, #32
 8005452:	f040 80b1 	bne.w	80055b8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_UART_Receive+0x28>
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0a9      	b.n	80055ba <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2222      	movs	r2, #34	; 0x22
 8005472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800547c:	f7fd f9be 	bl	80027fc <HAL_GetTick>
 8005480:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	d10e      	bne.n	80054ba <HAL_UART_Receive+0x80>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_UART_Receive+0x76>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ae:	e02d      	b.n	800550c <HAL_UART_Receive+0xd2>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b8:	e028      	b.n	800550c <HAL_UART_Receive+0xd2>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <HAL_UART_Receive+0xa4>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <HAL_UART_Receive+0x9a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d2:	e01b      	b.n	800550c <HAL_UART_Receive+0xd2>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	227f      	movs	r2, #127	; 0x7f
 80054d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054dc:	e016      	b.n	800550c <HAL_UART_Receive+0xd2>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d10d      	bne.n	8005504 <HAL_UART_Receive+0xca>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_UART_Receive+0xc0>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	227f      	movs	r2, #127	; 0x7f
 80054f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f8:	e008      	b.n	800550c <HAL_UART_Receive+0xd2>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	223f      	movs	r2, #63	; 0x3f
 80054fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005502:	e003      	b.n	800550c <HAL_UART_Receive+0xd2>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005512:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d108      	bne.n	8005530 <HAL_UART_Receive+0xf6>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	e003      	b.n	8005538 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005538:	e032      	b.n	80055a0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	2120      	movs	r1, #32
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fee6 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e032      	b.n	80055ba <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10c      	bne.n	8005574 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b29a      	uxth	r2, r3
 8005562:	8a7b      	ldrh	r3, [r7, #18]
 8005564:	4013      	ands	r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3302      	adds	r3, #2
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e00c      	b.n	800558e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2da      	uxtb	r2, r3
 800557c:	8a7b      	ldrh	r3, [r7, #18]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	4013      	ands	r3, r2
 8005582:	b2da      	uxtb	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1c6      	bne.n	800553a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08a      	sub	sp, #40	; 0x28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	4613      	mov	r3, r2
 80055ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d132      	bne.n	8005640 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_UART_Receive_IT+0x24>
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e02b      	b.n	8005642 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	61bb      	str	r3, [r7, #24]
   return(result);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	461a      	mov	r2, r3
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 ff34 	bl	80064a4 <UART_Start_Receive_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	e000      	b.n	8005642 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b0ba      	sub	sp, #232	; 0xe8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005676:	f640 030f 	movw	r3, #2063	; 0x80f
 800567a:	4013      	ands	r3, r2
 800567c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d115      	bne.n	80056b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00f      	beq.n	80056b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 82ac 	beq.w	8005c02 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
      }
      return;
 80056b2:	e2a6      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8117 	beq.w	80058ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056ce:	4b85      	ldr	r3, [pc, #532]	; (80058e4 <HAL_UART_IRQHandler+0x298>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 810a 	beq.w	80058ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d011      	beq.n	8005708 <HAL_UART_IRQHandler+0xbc>
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d011      	beq.n	8005738 <HAL_UART_IRQHandler+0xec>
 8005714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2202      	movs	r2, #2
 8005726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572e:	f043 0204 	orr.w	r2, r3, #4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d011      	beq.n	8005768 <HAL_UART_IRQHandler+0x11c>
 8005744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2204      	movs	r2, #4
 8005756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005784:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579a:	f043 0208 	orr.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d012      	beq.n	80057d6 <HAL_UART_IRQHandler+0x18a>
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8212 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d005      	beq.n	800582e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d04f      	beq.n	80058ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fefe 	bl	8006630 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d141      	bne.n	80058c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800585c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800586e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800587a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d9      	bne.n	8005842 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005892:	2b00      	cmp	r3, #0
 8005894:	d013      	beq.n	80058be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <HAL_UART_IRQHandler+0x29c>)
 800589c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd f95b 	bl	8002b5e <HAL_DMA_Abort_IT>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	e00f      	b.n	80058de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f9b6 	bl	8005c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00b      	b.n	80058de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9b2 	bl	8005c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e007      	b.n	80058de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9ae 	bl	8005c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80058dc:	e193      	b.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058de:	bf00      	nop
    return;
 80058e0:	e191      	b.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
 80058e2:	bf00      	nop
 80058e4:	04000120 	.word	0x04000120
 80058e8:	080066f9 	.word	0x080066f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f040 814c 	bne.w	8005b8e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8145 	beq.w	8005b8e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 813e 	beq.w	8005b8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	f040 80b6 	bne.w	8005a96 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005936:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8165 	beq.w	8005c0a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800594a:	429a      	cmp	r2, r3
 800594c:	f080 815d 	bcs.w	8005c0a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	f000 8086 	beq.w	8005a74 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800597c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005996:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800599e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1da      	bne.n	8005968 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e1      	bne.n	80059b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a44:	f023 0310 	bic.w	r3, r3, #16
 8005a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e4      	bne.n	8005a34 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fd f805 	bl	8002a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8d8 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a94:	e0b9      	b.n	8005c0a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80ab 	beq.w	8005c0e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a6 	beq.w	8005c0e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	623b      	str	r3, [r7, #32]
   return(result);
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e3      	bne.n	8005af8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f023 0310 	bic.w	r3, r3, #16
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	69b9      	ldr	r1, [r7, #24]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	617b      	str	r3, [r7, #20]
   return(result);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e4      	bne.n	8005b44 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f85c 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b8c:	e03f      	b.n	8005c0e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x56c>
 8005b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f853 	bl	8005c5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb6:	e02d      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01c      	beq.n	8005c12 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
    }
    return;
 8005be0:	e017      	b.n	8005c12 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d012      	beq.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
 8005bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fd92 	bl	8006724 <UART_EndTransmit_IT>
    return;
 8005c00:	e008      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c02:	bf00      	nop
 8005c04:	e006      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c06:	bf00      	nop
 8005c08:	e004      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c12:	bf00      	nop
  }

}
 8005c14:	37e8      	adds	r7, #232	; 0xe8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop

08005c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4ba6      	ldr	r3, [pc, #664]	; (8005f34 <UART_SetConfig+0x2c4>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	6979      	ldr	r1, [r7, #20]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a94      	ldr	r2, [pc, #592]	; (8005f38 <UART_SetConfig+0x2c8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d120      	bne.n	8005d2e <UART_SetConfig+0xbe>
 8005cec:	4b93      	ldr	r3, [pc, #588]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d816      	bhi.n	8005d28 <UART_SetConfig+0xb8>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0x90>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d17 	.word	0x08005d17
 8005d0c:	08005d23 	.word	0x08005d23
 8005d10:	2301      	movs	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e150      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d16:	2302      	movs	r3, #2
 8005d18:	77fb      	strb	r3, [r7, #31]
 8005d1a:	e14d      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e14a      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d22:	2308      	movs	r3, #8
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e147      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e144      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a83      	ldr	r2, [pc, #524]	; (8005f40 <UART_SetConfig+0x2d0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d132      	bne.n	8005d9e <UART_SetConfig+0x12e>
 8005d38:	4b80      	ldr	r3, [pc, #512]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d828      	bhi.n	8005d98 <UART_SetConfig+0x128>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0xdc>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005d87 	.word	0x08005d87
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	2300      	movs	r3, #0
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e118      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d86:	2302      	movs	r3, #2
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e115      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e112      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d92:	2308      	movs	r3, #8
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e10f      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e10c      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a68      	ldr	r2, [pc, #416]	; (8005f44 <UART_SetConfig+0x2d4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d120      	bne.n	8005dea <UART_SetConfig+0x17a>
 8005da8:	4b64      	ldr	r3, [pc, #400]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005db2:	2b30      	cmp	r3, #48	; 0x30
 8005db4:	d013      	beq.n	8005dde <UART_SetConfig+0x16e>
 8005db6:	2b30      	cmp	r3, #48	; 0x30
 8005db8:	d814      	bhi.n	8005de4 <UART_SetConfig+0x174>
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x162>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d810      	bhi.n	8005de4 <UART_SetConfig+0x174>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x15c>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d006      	beq.n	8005dd8 <UART_SetConfig+0x168>
 8005dca:	e00b      	b.n	8005de4 <UART_SetConfig+0x174>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e0f2      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e0ef      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e0ec      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005dde:	2308      	movs	r3, #8
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e0e9      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005de4:	2310      	movs	r3, #16
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e0e6      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a56      	ldr	r2, [pc, #344]	; (8005f48 <UART_SetConfig+0x2d8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d120      	bne.n	8005e36 <UART_SetConfig+0x1c6>
 8005df4:	4b51      	ldr	r3, [pc, #324]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005e00:	d013      	beq.n	8005e2a <UART_SetConfig+0x1ba>
 8005e02:	2bc0      	cmp	r3, #192	; 0xc0
 8005e04:	d814      	bhi.n	8005e30 <UART_SetConfig+0x1c0>
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d009      	beq.n	8005e1e <UART_SetConfig+0x1ae>
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d810      	bhi.n	8005e30 <UART_SetConfig+0x1c0>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <UART_SetConfig+0x1a8>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d006      	beq.n	8005e24 <UART_SetConfig+0x1b4>
 8005e16:	e00b      	b.n	8005e30 <UART_SetConfig+0x1c0>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e0cc      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e0c9      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e24:	2304      	movs	r3, #4
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e0c6      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e0c3      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e30:	2310      	movs	r3, #16
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e0c0      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a44      	ldr	r2, [pc, #272]	; (8005f4c <UART_SetConfig+0x2dc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d125      	bne.n	8005e8c <UART_SetConfig+0x21c>
 8005e40:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4e:	d017      	beq.n	8005e80 <UART_SetConfig+0x210>
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d817      	bhi.n	8005e86 <UART_SetConfig+0x216>
 8005e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5a:	d00b      	beq.n	8005e74 <UART_SetConfig+0x204>
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d811      	bhi.n	8005e86 <UART_SetConfig+0x216>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <UART_SetConfig+0x1fe>
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d006      	beq.n	8005e7a <UART_SetConfig+0x20a>
 8005e6c:	e00b      	b.n	8005e86 <UART_SetConfig+0x216>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e0a1      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e74:	2302      	movs	r3, #2
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e09e      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e09b      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e80:	2308      	movs	r3, #8
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e098      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e86:	2310      	movs	r3, #16
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e095      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2f      	ldr	r2, [pc, #188]	; (8005f50 <UART_SetConfig+0x2e0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d125      	bne.n	8005ee2 <UART_SetConfig+0x272>
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea4:	d017      	beq.n	8005ed6 <UART_SetConfig+0x266>
 8005ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eaa:	d817      	bhi.n	8005edc <UART_SetConfig+0x26c>
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d00b      	beq.n	8005eca <UART_SetConfig+0x25a>
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d811      	bhi.n	8005edc <UART_SetConfig+0x26c>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <UART_SetConfig+0x254>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d006      	beq.n	8005ed0 <UART_SetConfig+0x260>
 8005ec2:	e00b      	b.n	8005edc <UART_SetConfig+0x26c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e076      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e073      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e070      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e06d      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005edc:	2310      	movs	r3, #16
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e06a      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <UART_SetConfig+0x2e4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d138      	bne.n	8005f5e <UART_SetConfig+0x2ee>
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <UART_SetConfig+0x2cc>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ef6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efa:	d017      	beq.n	8005f2c <UART_SetConfig+0x2bc>
 8005efc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f00:	d82a      	bhi.n	8005f58 <UART_SetConfig+0x2e8>
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	d00b      	beq.n	8005f20 <UART_SetConfig+0x2b0>
 8005f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0c:	d824      	bhi.n	8005f58 <UART_SetConfig+0x2e8>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <UART_SetConfig+0x2aa>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d006      	beq.n	8005f26 <UART_SetConfig+0x2b6>
 8005f18:	e01e      	b.n	8005f58 <UART_SetConfig+0x2e8>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e04b      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f20:	2302      	movs	r3, #2
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e048      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f26:	2304      	movs	r3, #4
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e045      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e042      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f32:	bf00      	nop
 8005f34:	efff69f3 	.word	0xefff69f3
 8005f38:	40011000 	.word	0x40011000
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40004400 	.word	0x40004400
 8005f44:	40004800 	.word	0x40004800
 8005f48:	40004c00 	.word	0x40004c00
 8005f4c:	40005000 	.word	0x40005000
 8005f50:	40011400 	.word	0x40011400
 8005f54:	40007800 	.word	0x40007800
 8005f58:	2310      	movs	r3, #16
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e02c      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a72      	ldr	r2, [pc, #456]	; (800612c <UART_SetConfig+0x4bc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d125      	bne.n	8005fb4 <UART_SetConfig+0x344>
 8005f68:	4b71      	ldr	r3, [pc, #452]	; (8006130 <UART_SetConfig+0x4c0>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f76:	d017      	beq.n	8005fa8 <UART_SetConfig+0x338>
 8005f78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f7c:	d817      	bhi.n	8005fae <UART_SetConfig+0x33e>
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f82:	d00b      	beq.n	8005f9c <UART_SetConfig+0x32c>
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f88:	d811      	bhi.n	8005fae <UART_SetConfig+0x33e>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <UART_SetConfig+0x326>
 8005f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f92:	d006      	beq.n	8005fa2 <UART_SetConfig+0x332>
 8005f94:	e00b      	b.n	8005fae <UART_SetConfig+0x33e>
 8005f96:	2300      	movs	r3, #0
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e00d      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e00a      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e007      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e004      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005fae:	2310      	movs	r3, #16
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e001      	b.n	8005fb8 <UART_SetConfig+0x348>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d15b      	bne.n	800607a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d828      	bhi.n	800601a <UART_SetConfig+0x3aa>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x360>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	0800601b 	.word	0x0800601b
 8005fe0:	0800600b 	.word	0x0800600b
 8005fe4:	0800601b 	.word	0x0800601b
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	0800601b 	.word	0x0800601b
 8005ff0:	08006013 	.word	0x08006013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe fa16 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	61b8      	str	r0, [r7, #24]
        break;
 8005ffa:	e013      	b.n	8006024 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7fe fa26 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8006000:	61b8      	str	r0, [r7, #24]
        break;
 8006002:	e00f      	b.n	8006024 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006004:	4b4b      	ldr	r3, [pc, #300]	; (8006134 <UART_SetConfig+0x4c4>)
 8006006:	61bb      	str	r3, [r7, #24]
        break;
 8006008:	e00c      	b.n	8006024 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600a:	f7fe f8f9 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 800600e:	61b8      	str	r0, [r7, #24]
        break;
 8006010:	e008      	b.n	8006024 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006016:	61bb      	str	r3, [r7, #24]
        break;
 8006018:	e004      	b.n	8006024 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	77bb      	strb	r3, [r7, #30]
        break;
 8006022:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d074      	beq.n	8006114 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	005a      	lsls	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0f      	cmp	r3, #15
 8006044:	d916      	bls.n	8006074 <UART_SetConfig+0x404>
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d212      	bcs.n	8006074 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f023 030f 	bic.w	r3, r3, #15
 8006056:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b29a      	uxth	r2, r3
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	4313      	orrs	r3, r2
 8006068:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	89fa      	ldrh	r2, [r7, #14]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e04f      	b.n	8006114 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	77bb      	strb	r3, [r7, #30]
 8006078:	e04c      	b.n	8006114 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800607a:	7ffb      	ldrb	r3, [r7, #31]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d828      	bhi.n	80060d2 <UART_SetConfig+0x462>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x418>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060b5 	.word	0x080060b5
 8006090:	080060bd 	.word	0x080060bd
 8006094:	080060d3 	.word	0x080060d3
 8006098:	080060c3 	.word	0x080060c3
 800609c:	080060d3 	.word	0x080060d3
 80060a0:	080060d3 	.word	0x080060d3
 80060a4:	080060d3 	.word	0x080060d3
 80060a8:	080060cb 	.word	0x080060cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ac:	f7fe f9ba 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80060b0:	61b8      	str	r0, [r7, #24]
        break;
 80060b2:	e013      	b.n	80060dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b4:	f7fe f9ca 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 80060b8:	61b8      	str	r0, [r7, #24]
        break;
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <UART_SetConfig+0x4c4>)
 80060be:	61bb      	str	r3, [r7, #24]
        break;
 80060c0:	e00c      	b.n	80060dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c2:	f7fe f89d 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80060c6:	61b8      	str	r0, [r7, #24]
        break;
 80060c8:	e008      	b.n	80060dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ce:	61bb      	str	r3, [r7, #24]
        break;
 80060d0:	e004      	b.n	80060dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	77bb      	strb	r3, [r7, #30]
        break;
 80060da:	bf00      	nop
    }

    if (pclk != 0U)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d018      	beq.n	8006114 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	085a      	lsrs	r2, r3, #1
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	441a      	add	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b0f      	cmp	r3, #15
 80060fa:	d909      	bls.n	8006110 <UART_SetConfig+0x4a0>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006102:	d205      	bcs.n	8006110 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	e001      	b.n	8006114 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006120:	7fbb      	ldrb	r3, [r7, #30]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40007c00 	.word	0x40007c00
 8006130:	40023800 	.word	0x40023800
 8006134:	00f42400 	.word	0x00f42400

08006138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006236:	d10a      	bne.n	800624e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800628c:	f7fc fab6 	bl	80027fc <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10e      	bne.n	80062be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f831 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e027      	b.n	800630e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f81b 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e011      	b.n	800630e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b09c      	sub	sp, #112	; 0x70
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006326:	e0a7      	b.n	8006478 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	f000 80a3 	beq.w	8006478 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fc fa63 	bl	80027fc <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
 8006342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006344:	2b00      	cmp	r3, #0
 8006346:	d13f      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800635c:	667b      	str	r3, [r7, #100]	; 0x64
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006368:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800636c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e6      	bne.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	663b      	str	r3, [r7, #96]	; 0x60
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800639a:	64ba      	str	r2, [r7, #72]	; 0x48
 800639c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e068      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d050      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e4:	d148      	bne.n	8006478 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
 8006410:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	613b      	str	r3, [r7, #16]
   return(result);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	66bb      	str	r3, [r7, #104]	; 0x68
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006442:	623a      	str	r2, [r7, #32]
 8006444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e010      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	429a      	cmp	r2, r3
 8006494:	f43f af48 	beq.w	8006328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3770      	adds	r7, #112	; 0x70
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b097      	sub	sp, #92	; 0x5c
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d10e      	bne.n	80064f6 <UART_Start_Receive_IT+0x52>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <UART_Start_Receive_IT+0x48>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ea:	e02d      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	22ff      	movs	r2, #255	; 0xff
 80064f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064f4:	e028      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10d      	bne.n	800651a <UART_Start_Receive_IT+0x76>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <UART_Start_Receive_IT+0x6c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	22ff      	movs	r2, #255	; 0xff
 800650a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800650e:	e01b      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	227f      	movs	r2, #127	; 0x7f
 8006514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006518:	e016      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006522:	d10d      	bne.n	8006540 <UART_Start_Receive_IT+0x9c>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <UART_Start_Receive_IT+0x92>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	227f      	movs	r2, #127	; 0x7f
 8006530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006534:	e008      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	223f      	movs	r2, #63	; 0x3f
 800653a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800653e:	e003      	b.n	8006548 <UART_Start_Receive_IT+0xa4>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2222      	movs	r2, #34	; 0x22
 8006554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	657b      	str	r3, [r7, #84]	; 0x54
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006578:	64ba      	str	r2, [r7, #72]	; 0x48
 800657a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800657e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006594:	d107      	bne.n	80065a6 <UART_Start_Receive_IT+0x102>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a21      	ldr	r2, [pc, #132]	; (8006628 <UART_Start_Receive_IT+0x184>)
 80065a2:	669a      	str	r2, [r3, #104]	; 0x68
 80065a4:	e002      	b.n	80065ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <UART_Start_Receive_IT+0x188>)
 80065aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d019      	beq.n	80065e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80065c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e6      	bne.n	80065b4 <UART_Start_Receive_IT+0x110>
 80065e6:	e018      	b.n	800661a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	613b      	str	r3, [r7, #16]
   return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	653b      	str	r3, [r7, #80]	; 0x50
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006606:	623b      	str	r3, [r7, #32]
 8006608:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	6a3a      	ldr	r2, [r7, #32]
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	61bb      	str	r3, [r7, #24]
   return(result);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e6      	bne.n	80065e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	375c      	adds	r7, #92	; 0x5c
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	080068df 	.word	0x080068df
 800662c:	08006779 	.word	0x08006779

08006630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b095      	sub	sp, #84	; 0x54
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800664c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006656:	643b      	str	r3, [r7, #64]	; 0x40
 8006658:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800665c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e6      	bne.n	8006638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	61fb      	str	r3, [r7, #28]
   return(result);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	64bb      	str	r3, [r7, #72]	; 0x48
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800668a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e5      	bne.n	800666a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d118      	bne.n	80066d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	647b      	str	r3, [r7, #68]	; 0x44
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6979      	ldr	r1, [r7, #20]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	613b      	str	r3, [r7, #16]
   return(result);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066ec:	bf00      	nop
 80066ee:	3754      	adds	r7, #84	; 0x54
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fa8a 	bl	8005c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	60bb      	str	r3, [r7, #8]
   return(result);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	613b      	str	r3, [r7, #16]
   return(result);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e6      	bne.n	800672c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fa56 	bl	8005c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006770:	bf00      	nop
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b096      	sub	sp, #88	; 0x58
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006786:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	f040 8098 	bne.w	80068c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80067a4:	b2d9      	uxtb	r1, r3
 80067a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b0:	400a      	ands	r2, r1
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d17b      	bne.n	80068d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f2:	653b      	str	r3, [r7, #80]	; 0x50
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
 80067fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	623b      	str	r3, [r7, #32]
   return(result);
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006830:	633a      	str	r2, [r7, #48]	; 0x30
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685c:	2b01      	cmp	r3, #1
 800685e:	d12e      	bne.n	80068be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60fb      	str	r3, [r7, #12]
   return(result);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0310 	bic.w	r3, r3, #16
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d103      	bne.n	80068ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2210      	movs	r2, #16
 80068ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff f9c4 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068bc:	e00b      	b.n	80068d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb fcbe 	bl	8002240 <HAL_UART_RxCpltCallback>
}
 80068c4:	e007      	b.n	80068d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0208 	orr.w	r2, r2, #8
 80068d4:	619a      	str	r2, [r3, #24]
}
 80068d6:	bf00      	nop
 80068d8:	3758      	adds	r7, #88	; 0x58
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b096      	sub	sp, #88	; 0x58
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	2b22      	cmp	r3, #34	; 0x22
 80068f8:	f040 8098 	bne.w	8006a2c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800690c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006910:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006914:	4013      	ands	r3, r2
 8006916:	b29a      	uxth	r2, r3
 8006918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006920:	1c9a      	adds	r2, r3, #2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d17b      	bne.n	8006a3c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006962:	643b      	str	r3, [r7, #64]	; 0x40
 8006964:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e6      	bne.n	8006944 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	61fb      	str	r3, [r7, #28]
   return(result);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	64bb      	str	r3, [r7, #72]	; 0x48
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800699c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e5      	bne.n	8006976 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d12e      	bne.n	8006a24 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f023 0310 	bic.w	r3, r3, #16
 80069e0:	647b      	str	r3, [r7, #68]	; 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6979      	ldr	r1, [r7, #20]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	613b      	str	r3, [r7, #16]
   return(result);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e6      	bne.n	80069cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d103      	bne.n	8006a14 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2210      	movs	r2, #16
 8006a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff f911 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a22:	e00b      	b.n	8006a3c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fb fc0b 	bl	8002240 <HAL_UART_RxCpltCallback>
}
 8006a2a:	e007      	b.n	8006a3c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	619a      	str	r2, [r3, #24]
}
 8006a3c:	bf00      	nop
 8006a3e:	3758      	adds	r7, #88	; 0x58
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <atoi>:
 8006a44:	220a      	movs	r2, #10
 8006a46:	2100      	movs	r1, #0
 8006a48:	f000 ba08 	b.w	8006e5c <strtol>

08006a4c <__errno>:
 8006a4c:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <__errno+0x8>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2600      	movs	r6, #0
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4d0b      	ldr	r5, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f009 fcaa 	bl	80103c4 <_init>
 8006a70:	1b64      	subs	r4, r4, r5
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2600      	movs	r6, #0
 8006a76:	42a6      	cmp	r6, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a80:	4798      	blx	r3
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8a:	4798      	blx	r3
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	08012fb8 	.word	0x08012fb8
 8006a94:	08012fb8 	.word	0x08012fb8
 8006a98:	08012fb8 	.word	0x08012fb8
 8006a9c:	08012fc0 	.word	0x08012fc0

08006aa0 <__itoa>:
 8006aa0:	1e93      	subs	r3, r2, #2
 8006aa2:	2b22      	cmp	r3, #34	; 0x22
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	d904      	bls.n	8006ab4 <__itoa+0x14>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	700b      	strb	r3, [r1, #0]
 8006aae:	461c      	mov	r4, r3
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	2a0a      	cmp	r2, #10
 8006ab6:	d109      	bne.n	8006acc <__itoa+0x2c>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	da07      	bge.n	8006acc <__itoa+0x2c>
 8006abc:	232d      	movs	r3, #45	; 0x2d
 8006abe:	700b      	strb	r3, [r1, #0]
 8006ac0:	4240      	negs	r0, r0
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4421      	add	r1, r4
 8006ac6:	f000 f9d3 	bl	8006e70 <__utoa>
 8006aca:	e7f1      	b.n	8006ab0 <__itoa+0x10>
 8006acc:	2100      	movs	r1, #0
 8006ace:	e7f9      	b.n	8006ac4 <__itoa+0x24>

08006ad0 <itoa>:
 8006ad0:	f7ff bfe6 	b.w	8006aa0 <__itoa>

08006ad4 <memcmp>:
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	3901      	subs	r1, #1
 8006ad8:	4402      	add	r2, r0
 8006ada:	4290      	cmp	r0, r2
 8006adc:	d101      	bne.n	8006ae2 <memcmp+0xe>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	e005      	b.n	8006aee <memcmp+0x1a>
 8006ae2:	7803      	ldrb	r3, [r0, #0]
 8006ae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d001      	beq.n	8006af0 <memcmp+0x1c>
 8006aec:	1b18      	subs	r0, r3, r4
 8006aee:	bd10      	pop	{r4, pc}
 8006af0:	3001      	adds	r0, #1
 8006af2:	e7f2      	b.n	8006ada <memcmp+0x6>

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>

08006b04 <printf>:
 8006b04:	b40f      	push	{r0, r1, r2, r3}
 8006b06:	b507      	push	{r0, r1, r2, lr}
 8006b08:	4906      	ldr	r1, [pc, #24]	; (8006b24 <printf+0x20>)
 8006b0a:	ab04      	add	r3, sp, #16
 8006b0c:	6808      	ldr	r0, [r1, #0]
 8006b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b12:	6881      	ldr	r1, [r0, #8]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	f000 f9ef 	bl	8006ef8 <_vfprintf_r>
 8006b1a:	b003      	add	sp, #12
 8006b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b20:	b004      	add	sp, #16
 8006b22:	4770      	bx	lr
 8006b24:	2000000c 	.word	0x2000000c

08006b28 <_puts_r>:
 8006b28:	b530      	push	{r4, r5, lr}
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	b089      	sub	sp, #36	; 0x24
 8006b2e:	4608      	mov	r0, r1
 8006b30:	460c      	mov	r4, r1
 8006b32:	f7f9 fb85 	bl	8000240 <strlen>
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <_puts_r+0x88>)
 8006b38:	9306      	str	r3, [sp, #24]
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8006b40:	9307      	str	r3, [sp, #28]
 8006b42:	4418      	add	r0, r3
 8006b44:	ab04      	add	r3, sp, #16
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	2302      	movs	r3, #2
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006b4e:	68ac      	ldr	r4, [r5, #8]
 8006b50:	9003      	str	r0, [sp, #12]
 8006b52:	b913      	cbnz	r3, 8006b5a <_puts_r+0x32>
 8006b54:	4628      	mov	r0, r5
 8006b56:	f003 fd51 	bl	800a5fc <__sinit>
 8006b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b5c:	07db      	lsls	r3, r3, #31
 8006b5e:	d405      	bmi.n	8006b6c <_puts_r+0x44>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	0598      	lsls	r0, r3, #22
 8006b64:	d402      	bmi.n	8006b6c <_puts_r+0x44>
 8006b66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b68:	f004 f8a0 	bl	800acac <__retarget_lock_acquire_recursive>
 8006b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b70:	0499      	lsls	r1, r3, #18
 8006b72:	d406      	bmi.n	8006b82 <_puts_r+0x5a>
 8006b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b80:	6663      	str	r3, [r4, #100]	; 0x64
 8006b82:	4628      	mov	r0, r5
 8006b84:	aa01      	add	r2, sp, #4
 8006b86:	4621      	mov	r1, r4
 8006b88:	f003 fef0 	bl	800a96c <__sfvwrite_r>
 8006b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	bf14      	ite	ne
 8006b92:	f04f 35ff 	movne.w	r5, #4294967295
 8006b96:	250a      	moveq	r5, #10
 8006b98:	07da      	lsls	r2, r3, #31
 8006b9a:	d405      	bmi.n	8006ba8 <_puts_r+0x80>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	059b      	lsls	r3, r3, #22
 8006ba0:	d402      	bmi.n	8006ba8 <_puts_r+0x80>
 8006ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba4:	f004 f883 	bl	800acae <__retarget_lock_release_recursive>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	b009      	add	sp, #36	; 0x24
 8006bac:	bd30      	pop	{r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	08011682 	.word	0x08011682

08006bb4 <puts>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <puts+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfb5 	b.w	8006b28 <_puts_r>
 8006bbe:	bf00      	nop
 8006bc0:	2000000c 	.word	0x2000000c

08006bc4 <scanf>:
 8006bc4:	b40f      	push	{r0, r1, r2, r3}
 8006bc6:	b507      	push	{r0, r1, r2, lr}
 8006bc8:	4906      	ldr	r1, [pc, #24]	; (8006be4 <scanf+0x20>)
 8006bca:	ab04      	add	r3, sp, #16
 8006bcc:	6808      	ldr	r0, [r1, #0]
 8006bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd2:	6841      	ldr	r1, [r0, #4]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	f002 fda5 	bl	8009724 <_vfscanf_r>
 8006bda:	b003      	add	sp, #12
 8006bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be0:	b004      	add	sp, #16
 8006be2:	4770      	bx	lr
 8006be4:	2000000c 	.word	0x2000000c

08006be8 <setvbuf>:
 8006be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bec:	461d      	mov	r5, r3
 8006bee:	4b58      	ldr	r3, [pc, #352]	; (8006d50 <setvbuf+0x168>)
 8006bf0:	681f      	ldr	r7, [r3, #0]
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	460e      	mov	r6, r1
 8006bf6:	4690      	mov	r8, r2
 8006bf8:	b127      	cbz	r7, 8006c04 <setvbuf+0x1c>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	b913      	cbnz	r3, 8006c04 <setvbuf+0x1c>
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f003 fcfc 	bl	800a5fc <__sinit>
 8006c04:	f1b8 0f02 	cmp.w	r8, #2
 8006c08:	d006      	beq.n	8006c18 <setvbuf+0x30>
 8006c0a:	f1b8 0f01 	cmp.w	r8, #1
 8006c0e:	f200 809a 	bhi.w	8006d46 <setvbuf+0x15e>
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	f2c0 8097 	blt.w	8006d46 <setvbuf+0x15e>
 8006c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1a:	07db      	lsls	r3, r3, #31
 8006c1c:	d405      	bmi.n	8006c2a <setvbuf+0x42>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	0598      	lsls	r0, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <setvbuf+0x42>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f004 f841 	bl	800acac <__retarget_lock_acquire_recursive>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f003 fc67 	bl	800a500 <_fflush_r>
 8006c32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c34:	b141      	cbz	r1, 8006c48 <setvbuf+0x60>
 8006c36:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <setvbuf+0x5c>
 8006c3e:	4638      	mov	r0, r7
 8006c40:	f003 fdd4 	bl	800a7ec <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6323      	str	r3, [r4, #48]	; 0x30
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61a3      	str	r3, [r4, #24]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	0619      	lsls	r1, r3, #24
 8006c52:	d503      	bpl.n	8006c5c <setvbuf+0x74>
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	4638      	mov	r0, r7
 8006c58:	f003 fdc8 	bl	800a7ec <_free_r>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	f1b8 0f02 	cmp.w	r8, #2
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	d067      	beq.n	8006d3e <setvbuf+0x156>
 8006c6e:	ab01      	add	r3, sp, #4
 8006c70:	466a      	mov	r2, sp
 8006c72:	4621      	mov	r1, r4
 8006c74:	4638      	mov	r0, r7
 8006c76:	f004 f81b 	bl	800acb0 <__swhatbuf_r>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	4318      	orrs	r0, r3
 8006c7e:	81a0      	strh	r0, [r4, #12]
 8006c80:	bb35      	cbnz	r5, 8006cd0 <setvbuf+0xe8>
 8006c82:	9d00      	ldr	r5, [sp, #0]
 8006c84:	4628      	mov	r0, r5
 8006c86:	f004 f87f 	bl	800ad88 <malloc>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d151      	bne.n	8006d34 <setvbuf+0x14c>
 8006c90:	f8dd 9000 	ldr.w	r9, [sp]
 8006c94:	45a9      	cmp	r9, r5
 8006c96:	d146      	bne.n	8006d26 <setvbuf+0x13e>
 8006c98:	f04f 35ff 	mov.w	r5, #4294967295
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	60a2      	str	r2, [r4, #8]
 8006ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	6122      	str	r2, [r4, #16]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cae:	6162      	str	r2, [r4, #20]
 8006cb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb2:	f043 0302 	orr.w	r3, r3, #2
 8006cb6:	07d2      	lsls	r2, r2, #31
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	d405      	bmi.n	8006cc8 <setvbuf+0xe0>
 8006cbc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006cc0:	d102      	bne.n	8006cc8 <setvbuf+0xe0>
 8006cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc4:	f003 fff3 	bl	800acae <__retarget_lock_release_recursive>
 8006cc8:	4628      	mov	r0, r5
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	d0d7      	beq.n	8006c84 <setvbuf+0x9c>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	b913      	cbnz	r3, 8006cde <setvbuf+0xf6>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f003 fc8f 	bl	800a5fc <__sinit>
 8006cde:	9b00      	ldr	r3, [sp, #0]
 8006ce0:	6026      	str	r6, [r4, #0]
 8006ce2:	42ab      	cmp	r3, r5
 8006ce4:	bf1e      	ittt	ne
 8006ce6:	89a3      	ldrhne	r3, [r4, #12]
 8006ce8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8006cec:	81a3      	strhne	r3, [r4, #12]
 8006cee:	f1b8 0f01 	cmp.w	r8, #1
 8006cf2:	bf02      	ittt	eq
 8006cf4:	89a3      	ldrheq	r3, [r4, #12]
 8006cf6:	f043 0301 	orreq.w	r3, r3, #1
 8006cfa:	81a3      	strheq	r3, [r4, #12]
 8006cfc:	89a2      	ldrh	r2, [r4, #12]
 8006cfe:	f012 0308 	ands.w	r3, r2, #8
 8006d02:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006d06:	d01c      	beq.n	8006d42 <setvbuf+0x15a>
 8006d08:	07d3      	lsls	r3, r2, #31
 8006d0a:	bf41      	itttt	mi
 8006d0c:	2300      	movmi	r3, #0
 8006d0e:	426d      	negmi	r5, r5
 8006d10:	60a3      	strmi	r3, [r4, #8]
 8006d12:	61a5      	strmi	r5, [r4, #24]
 8006d14:	bf58      	it	pl
 8006d16:	60a5      	strpl	r5, [r4, #8]
 8006d18:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006d1a:	f015 0501 	ands.w	r5, r5, #1
 8006d1e:	d115      	bne.n	8006d4c <setvbuf+0x164>
 8006d20:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006d24:	e7cc      	b.n	8006cc0 <setvbuf+0xd8>
 8006d26:	4648      	mov	r0, r9
 8006d28:	f004 f82e 	bl	800ad88 <malloc>
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d0b2      	beq.n	8006c98 <setvbuf+0xb0>
 8006d32:	464d      	mov	r5, r9
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	e7ca      	b.n	8006cd4 <setvbuf+0xec>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	e7ac      	b.n	8006c9c <setvbuf+0xb4>
 8006d42:	60a3      	str	r3, [r4, #8]
 8006d44:	e7e8      	b.n	8006d18 <setvbuf+0x130>
 8006d46:	f04f 35ff 	mov.w	r5, #4294967295
 8006d4a:	e7bd      	b.n	8006cc8 <setvbuf+0xe0>
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	e7bb      	b.n	8006cc8 <setvbuf+0xe0>
 8006d50:	2000000c 	.word	0x2000000c

08006d54 <_strtol_l.constprop.0>:
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5a:	d001      	beq.n	8006d60 <_strtol_l.constprop.0+0xc>
 8006d5c:	2b24      	cmp	r3, #36	; 0x24
 8006d5e:	d906      	bls.n	8006d6e <_strtol_l.constprop.0+0x1a>
 8006d60:	f7ff fe74 	bl	8006a4c <__errno>
 8006d64:	2316      	movs	r3, #22
 8006d66:	6003      	str	r3, [r0, #0]
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e54 <_strtol_l.constprop.0+0x100>
 8006d72:	460d      	mov	r5, r1
 8006d74:	462e      	mov	r6, r5
 8006d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d7a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d7e:	f017 0708 	ands.w	r7, r7, #8
 8006d82:	d1f7      	bne.n	8006d74 <_strtol_l.constprop.0+0x20>
 8006d84:	2c2d      	cmp	r4, #45	; 0x2d
 8006d86:	d132      	bne.n	8006dee <_strtol_l.constprop.0+0x9a>
 8006d88:	782c      	ldrb	r4, [r5, #0]
 8006d8a:	2701      	movs	r7, #1
 8006d8c:	1cb5      	adds	r5, r6, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d05b      	beq.n	8006e4a <_strtol_l.constprop.0+0xf6>
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d109      	bne.n	8006daa <_strtol_l.constprop.0+0x56>
 8006d96:	2c30      	cmp	r4, #48	; 0x30
 8006d98:	d107      	bne.n	8006daa <_strtol_l.constprop.0+0x56>
 8006d9a:	782c      	ldrb	r4, [r5, #0]
 8006d9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006da0:	2c58      	cmp	r4, #88	; 0x58
 8006da2:	d14d      	bne.n	8006e40 <_strtol_l.constprop.0+0xec>
 8006da4:	786c      	ldrb	r4, [r5, #1]
 8006da6:	2310      	movs	r3, #16
 8006da8:	3502      	adds	r5, #2
 8006daa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dae:	f108 38ff 	add.w	r8, r8, #4294967295
 8006db2:	f04f 0c00 	mov.w	ip, #0
 8006db6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006dba:	4666      	mov	r6, ip
 8006dbc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006dc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006dc4:	f1be 0f09 	cmp.w	lr, #9
 8006dc8:	d816      	bhi.n	8006df8 <_strtol_l.constprop.0+0xa4>
 8006dca:	4674      	mov	r4, lr
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	dd24      	ble.n	8006e1a <_strtol_l.constprop.0+0xc6>
 8006dd0:	f1bc 0f00 	cmp.w	ip, #0
 8006dd4:	db1e      	blt.n	8006e14 <_strtol_l.constprop.0+0xc0>
 8006dd6:	45b1      	cmp	r9, r6
 8006dd8:	d31c      	bcc.n	8006e14 <_strtol_l.constprop.0+0xc0>
 8006dda:	d101      	bne.n	8006de0 <_strtol_l.constprop.0+0x8c>
 8006ddc:	45a2      	cmp	sl, r4
 8006dde:	db19      	blt.n	8006e14 <_strtol_l.constprop.0+0xc0>
 8006de0:	fb06 4603 	mla	r6, r6, r3, r4
 8006de4:	f04f 0c01 	mov.w	ip, #1
 8006de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dec:	e7e8      	b.n	8006dc0 <_strtol_l.constprop.0+0x6c>
 8006dee:	2c2b      	cmp	r4, #43	; 0x2b
 8006df0:	bf04      	itt	eq
 8006df2:	782c      	ldrbeq	r4, [r5, #0]
 8006df4:	1cb5      	addeq	r5, r6, #2
 8006df6:	e7ca      	b.n	8006d8e <_strtol_l.constprop.0+0x3a>
 8006df8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006dfc:	f1be 0f19 	cmp.w	lr, #25
 8006e00:	d801      	bhi.n	8006e06 <_strtol_l.constprop.0+0xb2>
 8006e02:	3c37      	subs	r4, #55	; 0x37
 8006e04:	e7e2      	b.n	8006dcc <_strtol_l.constprop.0+0x78>
 8006e06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e0a:	f1be 0f19 	cmp.w	lr, #25
 8006e0e:	d804      	bhi.n	8006e1a <_strtol_l.constprop.0+0xc6>
 8006e10:	3c57      	subs	r4, #87	; 0x57
 8006e12:	e7db      	b.n	8006dcc <_strtol_l.constprop.0+0x78>
 8006e14:	f04f 3cff 	mov.w	ip, #4294967295
 8006e18:	e7e6      	b.n	8006de8 <_strtol_l.constprop.0+0x94>
 8006e1a:	f1bc 0f00 	cmp.w	ip, #0
 8006e1e:	da05      	bge.n	8006e2c <_strtol_l.constprop.0+0xd8>
 8006e20:	2322      	movs	r3, #34	; 0x22
 8006e22:	6003      	str	r3, [r0, #0]
 8006e24:	4646      	mov	r6, r8
 8006e26:	b942      	cbnz	r2, 8006e3a <_strtol_l.constprop.0+0xe6>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	e79e      	b.n	8006d6a <_strtol_l.constprop.0+0x16>
 8006e2c:	b107      	cbz	r7, 8006e30 <_strtol_l.constprop.0+0xdc>
 8006e2e:	4276      	negs	r6, r6
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d0f9      	beq.n	8006e28 <_strtol_l.constprop.0+0xd4>
 8006e34:	f1bc 0f00 	cmp.w	ip, #0
 8006e38:	d000      	beq.n	8006e3c <_strtol_l.constprop.0+0xe8>
 8006e3a:	1e69      	subs	r1, r5, #1
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	e7f3      	b.n	8006e28 <_strtol_l.constprop.0+0xd4>
 8006e40:	2430      	movs	r4, #48	; 0x30
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1b1      	bne.n	8006daa <_strtol_l.constprop.0+0x56>
 8006e46:	2308      	movs	r3, #8
 8006e48:	e7af      	b.n	8006daa <_strtol_l.constprop.0+0x56>
 8006e4a:	2c30      	cmp	r4, #48	; 0x30
 8006e4c:	d0a5      	beq.n	8006d9a <_strtol_l.constprop.0+0x46>
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e7ab      	b.n	8006daa <_strtol_l.constprop.0+0x56>
 8006e52:	bf00      	nop
 8006e54:	080112d5 	.word	0x080112d5

08006e58 <_strtol_r>:
 8006e58:	f7ff bf7c 	b.w	8006d54 <_strtol_l.constprop.0>

08006e5c <strtol>:
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	460a      	mov	r2, r1
 8006e60:	4601      	mov	r1, r0
 8006e62:	4802      	ldr	r0, [pc, #8]	; (8006e6c <strtol+0x10>)
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f7ff bf75 	b.w	8006d54 <_strtol_l.constprop.0>
 8006e6a:	bf00      	nop
 8006e6c:	2000000c 	.word	0x2000000c

08006e70 <__utoa>:
 8006e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e72:	4c1f      	ldr	r4, [pc, #124]	; (8006ef0 <__utoa+0x80>)
 8006e74:	b08b      	sub	sp, #44	; 0x2c
 8006e76:	4605      	mov	r5, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	466e      	mov	r6, sp
 8006e7c:	f104 0c20 	add.w	ip, r4, #32
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	6861      	ldr	r1, [r4, #4]
 8006e84:	4637      	mov	r7, r6
 8006e86:	c703      	stmia	r7!, {r0, r1}
 8006e88:	3408      	adds	r4, #8
 8006e8a:	4564      	cmp	r4, ip
 8006e8c:	463e      	mov	r6, r7
 8006e8e:	d1f7      	bne.n	8006e80 <__utoa+0x10>
 8006e90:	7921      	ldrb	r1, [r4, #4]
 8006e92:	7139      	strb	r1, [r7, #4]
 8006e94:	1e91      	subs	r1, r2, #2
 8006e96:	6820      	ldr	r0, [r4, #0]
 8006e98:	6038      	str	r0, [r7, #0]
 8006e9a:	2922      	cmp	r1, #34	; 0x22
 8006e9c:	f04f 0100 	mov.w	r1, #0
 8006ea0:	d904      	bls.n	8006eac <__utoa+0x3c>
 8006ea2:	7019      	strb	r1, [r3, #0]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	b00b      	add	sp, #44	; 0x2c
 8006eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eac:	1e58      	subs	r0, r3, #1
 8006eae:	4684      	mov	ip, r0
 8006eb0:	fbb5 f7f2 	udiv	r7, r5, r2
 8006eb4:	fb02 5617 	mls	r6, r2, r7, r5
 8006eb8:	3628      	adds	r6, #40	; 0x28
 8006eba:	446e      	add	r6, sp
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006ec2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006ec6:	462e      	mov	r6, r5
 8006ec8:	42b2      	cmp	r2, r6
 8006eca:	f101 0101 	add.w	r1, r1, #1
 8006ece:	463d      	mov	r5, r7
 8006ed0:	d9ee      	bls.n	8006eb0 <__utoa+0x40>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	545a      	strb	r2, [r3, r1]
 8006ed6:	1919      	adds	r1, r3, r4
 8006ed8:	1aa5      	subs	r5, r4, r2
 8006eda:	42aa      	cmp	r2, r5
 8006edc:	dae3      	bge.n	8006ea6 <__utoa+0x36>
 8006ede:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006ee2:	780e      	ldrb	r6, [r1, #0]
 8006ee4:	7006      	strb	r6, [r0, #0]
 8006ee6:	3201      	adds	r2, #1
 8006ee8:	f801 5901 	strb.w	r5, [r1], #-1
 8006eec:	e7f4      	b.n	8006ed8 <__utoa+0x68>
 8006eee:	bf00      	nop
 8006ef0:	08011234 	.word	0x08011234
 8006ef4:	00000000 	.word	0x00000000

08006ef8 <_vfprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	ed2d 8b04 	vpush	{d8-d9}
 8006f00:	b0cb      	sub	sp, #300	; 0x12c
 8006f02:	460d      	mov	r5, r1
 8006f04:	4692      	mov	sl, r2
 8006f06:	461c      	mov	r4, r3
 8006f08:	4698      	mov	r8, r3
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	f003 fec8 	bl	800aca0 <_localeconv_r>
 8006f10:	6803      	ldr	r3, [r0, #0]
 8006f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 f993 	bl	8000240 <strlen>
 8006f1a:	900a      	str	r0, [sp, #40]	; 0x28
 8006f1c:	b126      	cbz	r6, 8006f28 <_vfprintf_r+0x30>
 8006f1e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8006f20:	b913      	cbnz	r3, 8006f28 <_vfprintf_r+0x30>
 8006f22:	4630      	mov	r0, r6
 8006f24:	f003 fb6a 	bl	800a5fc <__sinit>
 8006f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f2a:	07d8      	lsls	r0, r3, #31
 8006f2c:	d405      	bmi.n	8006f3a <_vfprintf_r+0x42>
 8006f2e:	89ab      	ldrh	r3, [r5, #12]
 8006f30:	0599      	lsls	r1, r3, #22
 8006f32:	d402      	bmi.n	8006f3a <_vfprintf_r+0x42>
 8006f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f36:	f003 feb9 	bl	800acac <__retarget_lock_acquire_recursive>
 8006f3a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006f3e:	049a      	lsls	r2, r3, #18
 8006f40:	d406      	bmi.n	8006f50 <_vfprintf_r+0x58>
 8006f42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f46:	81ab      	strh	r3, [r5, #12]
 8006f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4e:	666b      	str	r3, [r5, #100]	; 0x64
 8006f50:	89ab      	ldrh	r3, [r5, #12]
 8006f52:	071f      	lsls	r7, r3, #28
 8006f54:	d501      	bpl.n	8006f5a <_vfprintf_r+0x62>
 8006f56:	692b      	ldr	r3, [r5, #16]
 8006f58:	b9bb      	cbnz	r3, 8006f8a <_vfprintf_r+0x92>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f002 fbf5 	bl	800974c <__swsetup_r>
 8006f62:	b190      	cbz	r0, 8006f8a <_vfprintf_r+0x92>
 8006f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f66:	07dc      	lsls	r4, r3, #31
 8006f68:	d508      	bpl.n	8006f7c <_vfprintf_r+0x84>
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f72:	b04b      	add	sp, #300	; 0x12c
 8006f74:	ecbd 8b04 	vpop	{d8-d9}
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	89ab      	ldrh	r3, [r5, #12]
 8006f7e:	0598      	lsls	r0, r3, #22
 8006f80:	d4f3      	bmi.n	8006f6a <_vfprintf_r+0x72>
 8006f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f84:	f003 fe93 	bl	800acae <__retarget_lock_release_recursive>
 8006f88:	e7ef      	b.n	8006f6a <_vfprintf_r+0x72>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	f003 021a 	and.w	r2, r3, #26
 8006f90:	2a0a      	cmp	r2, #10
 8006f92:	d116      	bne.n	8006fc2 <_vfprintf_r+0xca>
 8006f94:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	db12      	blt.n	8006fc2 <_vfprintf_r+0xca>
 8006f9c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006f9e:	07d1      	lsls	r1, r2, #31
 8006fa0:	d404      	bmi.n	8006fac <_vfprintf_r+0xb4>
 8006fa2:	059a      	lsls	r2, r3, #22
 8006fa4:	d402      	bmi.n	8006fac <_vfprintf_r+0xb4>
 8006fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fa8:	f003 fe81 	bl	800acae <__retarget_lock_release_recursive>
 8006fac:	4623      	mov	r3, r4
 8006fae:	4652      	mov	r2, sl
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	b04b      	add	sp, #300	; 0x12c
 8006fb6:	ecbd 8b04 	vpop	{d8-d9}
 8006fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbe:	f001 b9bf 	b.w	8008340 <__sbprintf>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8006fc8:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8007228 <_vfprintf_r+0x330>
 8006fcc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8006fd0:	ac21      	add	r4, sp, #132	; 0x84
 8006fd2:	941e      	str	r4, [sp, #120]	; 0x78
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	9308      	str	r3, [sp, #32]
 8006fd8:	930e      	str	r3, [sp, #56]	; 0x38
 8006fda:	9310      	str	r3, [sp, #64]	; 0x40
 8006fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fde:	4653      	mov	r3, sl
 8006fe0:	461f      	mov	r7, r3
 8006fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe6:	b10a      	cbz	r2, 8006fec <_vfprintf_r+0xf4>
 8006fe8:	2a25      	cmp	r2, #37	; 0x25
 8006fea:	d1f9      	bne.n	8006fe0 <_vfprintf_r+0xe8>
 8006fec:	ebb7 090a 	subs.w	r9, r7, sl
 8006ff0:	d00d      	beq.n	800700e <_vfprintf_r+0x116>
 8006ff2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ff4:	444b      	add	r3, r9
 8006ff6:	9320      	str	r3, [sp, #128]	; 0x80
 8006ff8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	2b07      	cmp	r3, #7
 8006ffe:	e9c4 a900 	strd	sl, r9, [r4]
 8007002:	931f      	str	r3, [sp, #124]	; 0x7c
 8007004:	dc77      	bgt.n	80070f6 <_vfprintf_r+0x1fe>
 8007006:	3408      	adds	r4, #8
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	444b      	add	r3, r9
 800700c:	930b      	str	r3, [sp, #44]	; 0x2c
 800700e:	783b      	ldrb	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f001 8150 	beq.w	80082b6 <_vfprintf_r+0x13be>
 8007016:	2200      	movs	r2, #0
 8007018:	1c7b      	adds	r3, r7, #1
 800701a:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800701e:	f04f 37ff 	mov.w	r7, #4294967295
 8007022:	920c      	str	r2, [sp, #48]	; 0x30
 8007024:	4693      	mov	fp, r2
 8007026:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800702a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702e:	9204      	str	r2, [sp, #16]
 8007030:	9309      	str	r3, [sp, #36]	; 0x24
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	3b20      	subs	r3, #32
 8007036:	2b5a      	cmp	r3, #90	; 0x5a
 8007038:	f200 85a7 	bhi.w	8007b8a <_vfprintf_r+0xc92>
 800703c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007040:	05a5007d 	.word	0x05a5007d
 8007044:	008505a5 	.word	0x008505a5
 8007048:	05a505a5 	.word	0x05a505a5
 800704c:	006505a5 	.word	0x006505a5
 8007050:	05a505a5 	.word	0x05a505a5
 8007054:	00920088 	.word	0x00920088
 8007058:	008f05a5 	.word	0x008f05a5
 800705c:	05a50095 	.word	0x05a50095
 8007060:	00b100ae 	.word	0x00b100ae
 8007064:	00b100b1 	.word	0x00b100b1
 8007068:	00b100b1 	.word	0x00b100b1
 800706c:	00b100b1 	.word	0x00b100b1
 8007070:	00b100b1 	.word	0x00b100b1
 8007074:	05a505a5 	.word	0x05a505a5
 8007078:	05a505a5 	.word	0x05a505a5
 800707c:	05a505a5 	.word	0x05a505a5
 8007080:	013305a5 	.word	0x013305a5
 8007084:	00df05a5 	.word	0x00df05a5
 8007088:	013300fc 	.word	0x013300fc
 800708c:	01330133 	.word	0x01330133
 8007090:	05a505a5 	.word	0x05a505a5
 8007094:	05a505a5 	.word	0x05a505a5
 8007098:	05a500c2 	.word	0x05a500c2
 800709c:	046905a5 	.word	0x046905a5
 80070a0:	05a505a5 	.word	0x05a505a5
 80070a4:	04b705a5 	.word	0x04b705a5
 80070a8:	04db05a5 	.word	0x04db05a5
 80070ac:	05a505a5 	.word	0x05a505a5
 80070b0:	05a50501 	.word	0x05a50501
 80070b4:	05a505a5 	.word	0x05a505a5
 80070b8:	05a505a5 	.word	0x05a505a5
 80070bc:	05a505a5 	.word	0x05a505a5
 80070c0:	013305a5 	.word	0x013305a5
 80070c4:	00df05a5 	.word	0x00df05a5
 80070c8:	013300fe 	.word	0x013300fe
 80070cc:	01330133 	.word	0x01330133
 80070d0:	00fe00c5 	.word	0x00fe00c5
 80070d4:	05a500d9 	.word	0x05a500d9
 80070d8:	05a500d2 	.word	0x05a500d2
 80070dc:	046b043e 	.word	0x046b043e
 80070e0:	00d904a4 	.word	0x00d904a4
 80070e4:	04b705a5 	.word	0x04b705a5
 80070e8:	04dd007b 	.word	0x04dd007b
 80070ec:	05a505a5 	.word	0x05a505a5
 80070f0:	05a50522 	.word	0x05a50522
 80070f4:	007b      	.short	0x007b
 80070f6:	aa1e      	add	r2, sp, #120	; 0x78
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f007 fab8 	bl	800e670 <__sprint_r>
 8007100:	2800      	cmp	r0, #0
 8007102:	f040 812a 	bne.w	800735a <_vfprintf_r+0x462>
 8007106:	ac21      	add	r4, sp, #132	; 0x84
 8007108:	e77e      	b.n	8007008 <_vfprintf_r+0x110>
 800710a:	4630      	mov	r0, r6
 800710c:	f003 fdc8 	bl	800aca0 <_localeconv_r>
 8007110:	6843      	ldr	r3, [r0, #4]
 8007112:	9310      	str	r3, [sp, #64]	; 0x40
 8007114:	4618      	mov	r0, r3
 8007116:	f7f9 f893 	bl	8000240 <strlen>
 800711a:	900e      	str	r0, [sp, #56]	; 0x38
 800711c:	4630      	mov	r0, r6
 800711e:	f003 fdbf 	bl	800aca0 <_localeconv_r>
 8007122:	6883      	ldr	r3, [r0, #8]
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007128:	b12b      	cbz	r3, 8007136 <_vfprintf_r+0x23e>
 800712a:	9b08      	ldr	r3, [sp, #32]
 800712c:	b11b      	cbz	r3, 8007136 <_vfprintf_r+0x23e>
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b10b      	cbz	r3, 8007136 <_vfprintf_r+0x23e>
 8007132:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8007136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007138:	e777      	b.n	800702a <_vfprintf_r+0x132>
 800713a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f9      	bne.n	8007136 <_vfprintf_r+0x23e>
 8007142:	2320      	movs	r3, #32
 8007144:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8007148:	e7f5      	b.n	8007136 <_vfprintf_r+0x23e>
 800714a:	f04b 0b01 	orr.w	fp, fp, #1
 800714e:	e7f2      	b.n	8007136 <_vfprintf_r+0x23e>
 8007150:	f858 3b04 	ldr.w	r3, [r8], #4
 8007154:	930c      	str	r3, [sp, #48]	; 0x30
 8007156:	2b00      	cmp	r3, #0
 8007158:	daed      	bge.n	8007136 <_vfprintf_r+0x23e>
 800715a:	425b      	negs	r3, r3
 800715c:	930c      	str	r3, [sp, #48]	; 0x30
 800715e:	f04b 0b04 	orr.w	fp, fp, #4
 8007162:	e7e8      	b.n	8007136 <_vfprintf_r+0x23e>
 8007164:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 8007168:	e7e5      	b.n	8007136 <_vfprintf_r+0x23e>
 800716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007170:	9204      	str	r2, [sp, #16]
 8007172:	2a2a      	cmp	r2, #42	; 0x2a
 8007174:	d110      	bne.n	8007198 <_vfprintf_r+0x2a0>
 8007176:	f858 7b04 	ldr.w	r7, [r8], #4
 800717a:	9309      	str	r3, [sp, #36]	; 0x24
 800717c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 8007180:	e7d9      	b.n	8007136 <_vfprintf_r+0x23e>
 8007182:	210a      	movs	r1, #10
 8007184:	fb01 2707 	mla	r7, r1, r7, r2
 8007188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718c:	9204      	str	r2, [sp, #16]
 800718e:	9a04      	ldr	r2, [sp, #16]
 8007190:	3a30      	subs	r2, #48	; 0x30
 8007192:	2a09      	cmp	r2, #9
 8007194:	d9f5      	bls.n	8007182 <_vfprintf_r+0x28a>
 8007196:	e74b      	b.n	8007030 <_vfprintf_r+0x138>
 8007198:	2700      	movs	r7, #0
 800719a:	e7f8      	b.n	800718e <_vfprintf_r+0x296>
 800719c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80071a0:	e7c9      	b.n	8007136 <_vfprintf_r+0x23e>
 80071a2:	2200      	movs	r2, #0
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	920c      	str	r2, [sp, #48]	; 0x30
 80071a8:	9a04      	ldr	r2, [sp, #16]
 80071aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	200a      	movs	r0, #10
 80071b0:	fb00 2201 	mla	r2, r0, r1, r2
 80071b4:	920c      	str	r2, [sp, #48]	; 0x30
 80071b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ba:	9204      	str	r2, [sp, #16]
 80071bc:	3a30      	subs	r2, #48	; 0x30
 80071be:	2a09      	cmp	r2, #9
 80071c0:	d9f2      	bls.n	80071a8 <_vfprintf_r+0x2b0>
 80071c2:	e735      	b.n	8007030 <_vfprintf_r+0x138>
 80071c4:	f04b 0b08 	orr.w	fp, fp, #8
 80071c8:	e7b5      	b.n	8007136 <_vfprintf_r+0x23e>
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b68      	cmp	r3, #104	; 0x68
 80071d0:	bf01      	itttt	eq
 80071d2:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 80071d4:	3301      	addeq	r3, #1
 80071d6:	9309      	streq	r3, [sp, #36]	; 0x24
 80071d8:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80071dc:	bf18      	it	ne
 80071de:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80071e2:	e7a8      	b.n	8007136 <_vfprintf_r+0x23e>
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b6c      	cmp	r3, #108	; 0x6c
 80071ea:	d105      	bne.n	80071f8 <_vfprintf_r+0x300>
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	9309      	str	r3, [sp, #36]	; 0x24
 80071f2:	f04b 0b20 	orr.w	fp, fp, #32
 80071f6:	e79e      	b.n	8007136 <_vfprintf_r+0x23e>
 80071f8:	f04b 0b10 	orr.w	fp, fp, #16
 80071fc:	e79b      	b.n	8007136 <_vfprintf_r+0x23e>
 80071fe:	4642      	mov	r2, r8
 8007200:	2000      	movs	r0, #0
 8007202:	f852 3b04 	ldr.w	r3, [r2], #4
 8007206:	9205      	str	r2, [sp, #20]
 8007208:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800720c:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8007210:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8007214:	9002      	str	r0, [sp, #8]
 8007216:	2701      	movs	r7, #1
 8007218:	4681      	mov	r9, r0
 800721a:	4680      	mov	r8, r0
 800721c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8007220:	e19b      	b.n	800755a <_vfprintf_r+0x662>
 8007222:	bf00      	nop
 8007224:	f3af 8000 	nop.w
	...
 8007230:	ffffffff 	.word	0xffffffff
 8007234:	7fefffff 	.word	0x7fefffff
 8007238:	f04b 0b10 	orr.w	fp, fp, #16
 800723c:	f01b 0f20 	tst.w	fp, #32
 8007240:	d016      	beq.n	8007270 <_vfprintf_r+0x378>
 8007242:	f108 0807 	add.w	r8, r8, #7
 8007246:	f028 0307 	bic.w	r3, r8, #7
 800724a:	461a      	mov	r2, r3
 800724c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007250:	f852 8b08 	ldr.w	r8, [r2], #8
 8007254:	9205      	str	r2, [sp, #20]
 8007256:	f1b9 0f00 	cmp.w	r9, #0
 800725a:	da07      	bge.n	800726c <_vfprintf_r+0x374>
 800725c:	f1d8 0800 	rsbs	r8, r8, #0
 8007260:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007264:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8007268:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800726c:	2301      	movs	r3, #1
 800726e:	e365      	b.n	800793c <_vfprintf_r+0xa44>
 8007270:	4642      	mov	r2, r8
 8007272:	f01b 0f10 	tst.w	fp, #16
 8007276:	f852 3b04 	ldr.w	r3, [r2], #4
 800727a:	9205      	str	r2, [sp, #20]
 800727c:	d003      	beq.n	8007286 <_vfprintf_r+0x38e>
 800727e:	4698      	mov	r8, r3
 8007280:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8007284:	e7e7      	b.n	8007256 <_vfprintf_r+0x35e>
 8007286:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800728a:	d004      	beq.n	8007296 <_vfprintf_r+0x39e>
 800728c:	fa0f f883 	sxth.w	r8, r3
 8007290:	f343 39c0 	sbfx	r9, r3, #15, #1
 8007294:	e7df      	b.n	8007256 <_vfprintf_r+0x35e>
 8007296:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800729a:	d0f0      	beq.n	800727e <_vfprintf_r+0x386>
 800729c:	fa4f f883 	sxtb.w	r8, r3
 80072a0:	f343 19c0 	sbfx	r9, r3, #7, #1
 80072a4:	e7d7      	b.n	8007256 <_vfprintf_r+0x35e>
 80072a6:	f108 0807 	add.w	r8, r8, #7
 80072aa:	f028 0307 	bic.w	r3, r8, #7
 80072ae:	ecb3 8b02 	vldmia	r3!, {d8}
 80072b2:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 8007230 <_vfprintf_r+0x338>
 80072b6:	eeb0 6bc8 	vabs.f64	d6, d8
 80072ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	dd18      	ble.n	80072f8 <_vfprintf_r+0x400>
 80072c6:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80072ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ce:	d502      	bpl.n	80072d6 <_vfprintf_r+0x3de>
 80072d0:	232d      	movs	r3, #45	; 0x2d
 80072d2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80072d6:	4a28      	ldr	r2, [pc, #160]	; (8007378 <_vfprintf_r+0x480>)
 80072d8:	4828      	ldr	r0, [pc, #160]	; (800737c <_vfprintf_r+0x484>)
 80072da:	9b04      	ldr	r3, [sp, #16]
 80072dc:	2b47      	cmp	r3, #71	; 0x47
 80072de:	bfd4      	ite	le
 80072e0:	4692      	movle	sl, r2
 80072e2:	4682      	movgt	sl, r0
 80072e4:	2300      	movs	r3, #0
 80072e6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	2703      	movs	r7, #3
 80072ee:	4699      	mov	r9, r3
 80072f0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80072f4:	4698      	mov	r8, r3
 80072f6:	e130      	b.n	800755a <_vfprintf_r+0x662>
 80072f8:	eeb4 8b48 	vcmp.f64	d8, d8
 80072fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007300:	d70a      	bvc.n	8007318 <_vfprintf_r+0x420>
 8007302:	ee18 3a90 	vmov	r3, s17
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfb8      	it	lt
 800730a:	232d      	movlt	r3, #45	; 0x2d
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <_vfprintf_r+0x488>)
 800730e:	481d      	ldr	r0, [pc, #116]	; (8007384 <_vfprintf_r+0x48c>)
 8007310:	bfb8      	it	lt
 8007312:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 8007316:	e7e0      	b.n	80072da <_vfprintf_r+0x3e2>
 8007318:	9b04      	ldr	r3, [sp, #16]
 800731a:	f023 0920 	bic.w	r9, r3, #32
 800731e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8007322:	d131      	bne.n	8007388 <_vfprintf_r+0x490>
 8007324:	2330      	movs	r3, #48	; 0x30
 8007326:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b61      	cmp	r3, #97	; 0x61
 800732e:	bf0c      	ite	eq
 8007330:	2378      	moveq	r3, #120	; 0x78
 8007332:	2358      	movne	r3, #88	; 0x58
 8007334:	2f63      	cmp	r7, #99	; 0x63
 8007336:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800733a:	f04b 0b02 	orr.w	fp, fp, #2
 800733e:	f340 81e3 	ble.w	8007708 <_vfprintf_r+0x810>
 8007342:	1c79      	adds	r1, r7, #1
 8007344:	4630      	mov	r0, r6
 8007346:	f003 fd2f 	bl	800ada8 <_malloc_r>
 800734a:	4682      	mov	sl, r0
 800734c:	2800      	cmp	r0, #0
 800734e:	f040 81e0 	bne.w	8007712 <_vfprintf_r+0x81a>
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007358:	81ab      	strh	r3, [r5, #12]
 800735a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735c:	07d9      	lsls	r1, r3, #31
 800735e:	d405      	bmi.n	800736c <_vfprintf_r+0x474>
 8007360:	89ab      	ldrh	r3, [r5, #12]
 8007362:	059a      	lsls	r2, r3, #22
 8007364:	d402      	bmi.n	800736c <_vfprintf_r+0x474>
 8007366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007368:	f003 fca1 	bl	800acae <__retarget_lock_release_recursive>
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	065b      	lsls	r3, r3, #25
 8007370:	f57f adfe 	bpl.w	8006f70 <_vfprintf_r+0x78>
 8007374:	e5f9      	b.n	8006f6a <_vfprintf_r+0x72>
 8007376:	bf00      	nop
 8007378:	08011259 	.word	0x08011259
 800737c:	0801125d 	.word	0x0801125d
 8007380:	08011261 	.word	0x08011261
 8007384:	08011265 	.word	0x08011265
 8007388:	1c7b      	adds	r3, r7, #1
 800738a:	f000 81c4 	beq.w	8007716 <_vfprintf_r+0x81e>
 800738e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007392:	f040 81c4 	bne.w	800771e <_vfprintf_r+0x826>
 8007396:	2f00      	cmp	r7, #0
 8007398:	f040 81c1 	bne.w	800771e <_vfprintf_r+0x826>
 800739c:	9702      	str	r7, [sp, #8]
 800739e:	2701      	movs	r7, #1
 80073a0:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80073a4:	930d      	str	r3, [sp, #52]	; 0x34
 80073a6:	ee18 3a90 	vmov	r3, s17
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f280 81ba 	bge.w	8007724 <_vfprintf_r+0x82c>
 80073b0:	eeb1 9b48 	vneg.f64	d9, d8
 80073b4:	232d      	movs	r3, #45	; 0x2d
 80073b6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80073ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80073bc:	f040 81cb 	bne.w	8007756 <_vfprintf_r+0x85e>
 80073c0:	eeb0 0b49 	vmov.f64	d0, d9
 80073c4:	a818      	add	r0, sp, #96	; 0x60
 80073c6:	f004 fe33 	bl	800c030 <frexp>
 80073ca:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 80073ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80073d2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	bf08      	it	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	9a04      	ldr	r2, [sp, #16]
 80073e0:	bf08      	it	eq
 80073e2:	9318      	streq	r3, [sp, #96]	; 0x60
 80073e4:	49b7      	ldr	r1, [pc, #732]	; (80076c4 <_vfprintf_r+0x7cc>)
 80073e6:	4bb8      	ldr	r3, [pc, #736]	; (80076c8 <_vfprintf_r+0x7d0>)
 80073e8:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 80073ec:	2a61      	cmp	r2, #97	; 0x61
 80073ee:	bf18      	it	ne
 80073f0:	4619      	movne	r1, r3
 80073f2:	1e7a      	subs	r2, r7, #1
 80073f4:	4653      	mov	r3, sl
 80073f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80073fa:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80073fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007402:	ee16 ca90 	vmov	ip, s13
 8007406:	f811 000c 	ldrb.w	r0, [r1, ip]
 800740a:	f803 0b01 	strb.w	r0, [r3], #1
 800740e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007412:	4610      	mov	r0, r2
 8007414:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007418:	d006      	beq.n	8007428 <_vfprintf_r+0x530>
 800741a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	f102 32ff 	add.w	r2, r2, #4294967295
 8007426:	d1e6      	bne.n	80073f6 <_vfprintf_r+0x4fe>
 8007428:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800742c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	dc09      	bgt.n	800744a <_vfprintf_r+0x552>
 8007436:	eeb4 0b47 	vcmp.f64	d0, d7
 800743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743e:	f040 8184 	bne.w	800774a <_vfprintf_r+0x852>
 8007442:	f01c 0f01 	tst.w	ip, #1
 8007446:	f000 8180 	beq.w	800774a <_vfprintf_r+0x852>
 800744a:	f891 c00f 	ldrb.w	ip, [r1, #15]
 800744e:	931c      	str	r3, [sp, #112]	; 0x70
 8007450:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8007454:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007456:	1e42      	subs	r2, r0, #1
 8007458:	921c      	str	r2, [sp, #112]	; 0x70
 800745a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800745e:	4562      	cmp	r2, ip
 8007460:	f000 8164 	beq.w	800772c <_vfprintf_r+0x834>
 8007464:	2a39      	cmp	r2, #57	; 0x39
 8007466:	bf16      	itet	ne
 8007468:	3201      	addne	r2, #1
 800746a:	7a8a      	ldrbeq	r2, [r1, #10]
 800746c:	b2d2      	uxtbne	r2, r2
 800746e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8007472:	eba3 030a 	sub.w	r3, r3, sl
 8007476:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800747a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	f040 81ac 	bne.w	80077dc <_vfprintf_r+0x8e4>
 8007484:	f118 0f03 	cmn.w	r8, #3
 8007488:	db02      	blt.n	8007490 <_vfprintf_r+0x598>
 800748a:	4547      	cmp	r7, r8
 800748c:	f280 81ce 	bge.w	800782c <_vfprintf_r+0x934>
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	3b02      	subs	r3, #2
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	9904      	ldr	r1, [sp, #16]
 8007498:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800749c:	f021 0120 	bic.w	r1, r1, #32
 80074a0:	2941      	cmp	r1, #65	; 0x41
 80074a2:	bf08      	it	eq
 80074a4:	320f      	addeq	r2, #15
 80074a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80074aa:	bf06      	itte	eq
 80074ac:	b2d2      	uxtbeq	r2, r2
 80074ae:	2101      	moveq	r1, #1
 80074b0:	2100      	movne	r1, #0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	9318      	str	r3, [sp, #96]	; 0x60
 80074b6:	bfb8      	it	lt
 80074b8:	f1c8 0301 	rsblt	r3, r8, #1
 80074bc:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80074c0:	bfb4      	ite	lt
 80074c2:	222d      	movlt	r2, #45	; 0x2d
 80074c4:	222b      	movge	r2, #43	; 0x2b
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80074cc:	f340 819d 	ble.w	800780a <_vfprintf_r+0x912>
 80074d0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 80074d4:	200a      	movs	r0, #10
 80074d6:	4611      	mov	r1, r2
 80074d8:	fb93 f7f0 	sdiv	r7, r3, r0
 80074dc:	fb00 3017 	mls	r0, r0, r7, r3
 80074e0:	3030      	adds	r0, #48	; 0x30
 80074e2:	f801 0c01 	strb.w	r0, [r1, #-1]
 80074e6:	4618      	mov	r0, r3
 80074e8:	2863      	cmp	r0, #99	; 0x63
 80074ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80074ee:	463b      	mov	r3, r7
 80074f0:	dcf0      	bgt.n	80074d4 <_vfprintf_r+0x5dc>
 80074f2:	3330      	adds	r3, #48	; 0x30
 80074f4:	1e88      	subs	r0, r1, #2
 80074f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074fa:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 80074fe:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8007502:	4603      	mov	r3, r0
 8007504:	42bb      	cmp	r3, r7
 8007506:	f0c0 817b 	bcc.w	8007800 <_vfprintf_r+0x908>
 800750a:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 800750e:	1a52      	subs	r2, r2, r1
 8007510:	42b8      	cmp	r0, r7
 8007512:	bf88      	it	hi
 8007514:	2200      	movhi	r2, #0
 8007516:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 800751a:	441a      	add	r2, r3
 800751c:	ab1a      	add	r3, sp, #104	; 0x68
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	9a03      	ldr	r2, [sp, #12]
 8007522:	9311      	str	r3, [sp, #68]	; 0x44
 8007524:	2a01      	cmp	r2, #1
 8007526:	eb03 0702 	add.w	r7, r3, r2
 800752a:	dc02      	bgt.n	8007532 <_vfprintf_r+0x63a>
 800752c:	f01b 0f01 	tst.w	fp, #1
 8007530:	d001      	beq.n	8007536 <_vfprintf_r+0x63e>
 8007532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007534:	441f      	add	r7, r3
 8007536:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800753a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753e:	930d      	str	r3, [sp, #52]	; 0x34
 8007540:	2300      	movs	r3, #0
 8007542:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8007546:	4698      	mov	r8, r3
 8007548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800754a:	b113      	cbz	r3, 8007552 <_vfprintf_r+0x65a>
 800754c:	232d      	movs	r3, #45	; 0x2d
 800754e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8007552:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8007556:	f04f 0900 	mov.w	r9, #0
 800755a:	45b9      	cmp	r9, r7
 800755c:	464b      	mov	r3, r9
 800755e:	bfb8      	it	lt
 8007560:	463b      	movlt	r3, r7
 8007562:	930d      	str	r3, [sp, #52]	; 0x34
 8007564:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8007568:	b113      	cbz	r3, 8007570 <_vfprintf_r+0x678>
 800756a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800756c:	3301      	adds	r3, #1
 800756e:	930d      	str	r3, [sp, #52]	; 0x34
 8007570:	f01b 0302 	ands.w	r3, fp, #2
 8007574:	9313      	str	r3, [sp, #76]	; 0x4c
 8007576:	bf1e      	ittt	ne
 8007578:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800757a:	3302      	addne	r3, #2
 800757c:	930d      	strne	r3, [sp, #52]	; 0x34
 800757e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8007582:	9314      	str	r3, [sp, #80]	; 0x50
 8007584:	d120      	bne.n	80075c8 <_vfprintf_r+0x6d0>
 8007586:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd1b      	ble.n	80075c8 <_vfprintf_r+0x6d0>
 8007590:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8007594:	494d      	ldr	r1, [pc, #308]	; (80076cc <_vfprintf_r+0x7d4>)
 8007596:	6021      	str	r1, [r4, #0]
 8007598:	2b10      	cmp	r3, #16
 800759a:	f102 0201 	add.w	r2, r2, #1
 800759e:	f104 0008 	add.w	r0, r4, #8
 80075a2:	f300 8302 	bgt.w	8007baa <_vfprintf_r+0xcb2>
 80075a6:	eb0c 0103 	add.w	r1, ip, r3
 80075aa:	2a07      	cmp	r2, #7
 80075ac:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	f340 830f 	ble.w	8007bd4 <_vfprintf_r+0xcdc>
 80075b6:	aa1e      	add	r2, sp, #120	; 0x78
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	f007 f858 	bl	800e670 <__sprint_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f040 8655 	bne.w	8008270 <_vfprintf_r+0x1378>
 80075c6:	ac21      	add	r4, sp, #132	; 0x84
 80075c8:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80075cc:	b173      	cbz	r3, 80075ec <_vfprintf_r+0x6f4>
 80075ce:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	2301      	movs	r3, #1
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80075da:	3301      	adds	r3, #1
 80075dc:	9320      	str	r3, [sp, #128]	; 0x80
 80075de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075e0:	3301      	adds	r3, #1
 80075e2:	2b07      	cmp	r3, #7
 80075e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80075e6:	f300 82f7 	bgt.w	8007bd8 <_vfprintf_r+0xce0>
 80075ea:	3408      	adds	r4, #8
 80075ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075ee:	b16b      	cbz	r3, 800760c <_vfprintf_r+0x714>
 80075f0:	ab17      	add	r3, sp, #92	; 0x5c
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	2302      	movs	r3, #2
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80075fa:	3302      	adds	r3, #2
 80075fc:	9320      	str	r3, [sp, #128]	; 0x80
 80075fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007600:	3301      	adds	r3, #1
 8007602:	2b07      	cmp	r3, #7
 8007604:	931f      	str	r3, [sp, #124]	; 0x7c
 8007606:	f300 82f1 	bgt.w	8007bec <_vfprintf_r+0xcf4>
 800760a:	3408      	adds	r4, #8
 800760c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d120      	bne.n	8007654 <_vfprintf_r+0x75c>
 8007612:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	dd1b      	ble.n	8007654 <_vfprintf_r+0x75c>
 800761c:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8007620:	492b      	ldr	r1, [pc, #172]	; (80076d0 <_vfprintf_r+0x7d8>)
 8007622:	6021      	str	r1, [r4, #0]
 8007624:	2b10      	cmp	r3, #16
 8007626:	f102 0201 	add.w	r2, r2, #1
 800762a:	f104 0008 	add.w	r0, r4, #8
 800762e:	f300 82e7 	bgt.w	8007c00 <_vfprintf_r+0xd08>
 8007632:	eb0c 0103 	add.w	r1, ip, r3
 8007636:	2a07      	cmp	r2, #7
 8007638:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	f340 82f4 	ble.w	8007c2a <_vfprintf_r+0xd32>
 8007642:	aa1e      	add	r2, sp, #120	; 0x78
 8007644:	4629      	mov	r1, r5
 8007646:	4630      	mov	r0, r6
 8007648:	f007 f812 	bl	800e670 <__sprint_r>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 860f 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007652:	ac21      	add	r4, sp, #132	; 0x84
 8007654:	eba9 0907 	sub.w	r9, r9, r7
 8007658:	f1b9 0f00 	cmp.w	r9, #0
 800765c:	dd1c      	ble.n	8007698 <_vfprintf_r+0x7a0>
 800765e:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8007662:	481b      	ldr	r0, [pc, #108]	; (80076d0 <_vfprintf_r+0x7d8>)
 8007664:	6020      	str	r0, [r4, #0]
 8007666:	f1b9 0f10 	cmp.w	r9, #16
 800766a:	f102 0201 	add.w	r2, r2, #1
 800766e:	f104 0108 	add.w	r1, r4, #8
 8007672:	f300 82dc 	bgt.w	8007c2e <_vfprintf_r+0xd36>
 8007676:	444b      	add	r3, r9
 8007678:	2a07      	cmp	r2, #7
 800767a:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800767e:	f8c4 9004 	str.w	r9, [r4, #4]
 8007682:	f340 82e8 	ble.w	8007c56 <_vfprintf_r+0xd5e>
 8007686:	aa1e      	add	r2, sp, #120	; 0x78
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f006 fff0 	bl	800e670 <__sprint_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	f040 85ed 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007696:	ac21      	add	r4, sp, #132	; 0x84
 8007698:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800769c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800769e:	f040 82e1 	bne.w	8007c64 <_vfprintf_r+0xd6c>
 80076a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076a4:	3301      	adds	r3, #1
 80076a6:	4438      	add	r0, r7
 80076a8:	2b07      	cmp	r3, #7
 80076aa:	e9c4 a700 	strd	sl, r7, [r4]
 80076ae:	9020      	str	r0, [sp, #128]	; 0x80
 80076b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80076b2:	f300 831c 	bgt.w	8007cee <_vfprintf_r+0xdf6>
 80076b6:	3408      	adds	r4, #8
 80076b8:	f01b 0f04 	tst.w	fp, #4
 80076bc:	f040 85b7 	bne.w	800822e <_vfprintf_r+0x1336>
 80076c0:	e008      	b.n	80076d4 <_vfprintf_r+0x7dc>
 80076c2:	bf00      	nop
 80076c4:	08011269 	.word	0x08011269
 80076c8:	0801127a 	.word	0x0801127a
 80076cc:	0801128d 	.word	0x0801128d
 80076d0:	0801129d 	.word	0x0801129d
 80076d4:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 80076d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076da:	428a      	cmp	r2, r1
 80076dc:	bfac      	ite	ge
 80076de:	189b      	addge	r3, r3, r2
 80076e0:	185b      	addlt	r3, r3, r1
 80076e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80076e6:	b13b      	cbz	r3, 80076f8 <_vfprintf_r+0x800>
 80076e8:	aa1e      	add	r2, sp, #120	; 0x78
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	f006 ffbf 	bl	800e670 <__sprint_r>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f040 85bc 	bne.w	8008270 <_vfprintf_r+0x1378>
 80076f8:	2300      	movs	r3, #0
 80076fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f040 85d3 	bne.w	80082aa <_vfprintf_r+0x13b2>
 8007704:	ac21      	add	r4, sp, #132	; 0x84
 8007706:	e0e6      	b.n	80078d6 <_vfprintf_r+0x9de>
 8007708:	2300      	movs	r3, #0
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8007710:	e646      	b.n	80073a0 <_vfprintf_r+0x4a8>
 8007712:	9002      	str	r0, [sp, #8]
 8007714:	e644      	b.n	80073a0 <_vfprintf_r+0x4a8>
 8007716:	2300      	movs	r3, #0
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	2706      	movs	r7, #6
 800771c:	e640      	b.n	80073a0 <_vfprintf_r+0x4a8>
 800771e:	2300      	movs	r3, #0
 8007720:	9302      	str	r3, [sp, #8]
 8007722:	e63d      	b.n	80073a0 <_vfprintf_r+0x4a8>
 8007724:	2300      	movs	r3, #0
 8007726:	eeb0 9b48 	vmov.f64	d9, d8
 800772a:	e644      	b.n	80073b6 <_vfprintf_r+0x4be>
 800772c:	f800 ec01 	strb.w	lr, [r0, #-1]
 8007730:	e690      	b.n	8007454 <_vfprintf_r+0x55c>
 8007732:	f802 eb01 	strb.w	lr, [r2], #1
 8007736:	ebac 0102 	sub.w	r1, ip, r2
 800773a:	2900      	cmp	r1, #0
 800773c:	daf9      	bge.n	8007732 <_vfprintf_r+0x83a>
 800773e:	1c42      	adds	r2, r0, #1
 8007740:	3001      	adds	r0, #1
 8007742:	bfb8      	it	lt
 8007744:	2200      	movlt	r2, #0
 8007746:	4413      	add	r3, r2
 8007748:	e693      	b.n	8007472 <_vfprintf_r+0x57a>
 800774a:	461a      	mov	r2, r3
 800774c:	eb03 0c00 	add.w	ip, r3, r0
 8007750:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8007754:	e7ef      	b.n	8007736 <_vfprintf_r+0x83e>
 8007756:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800775a:	d006      	beq.n	800776a <_vfprintf_r+0x872>
 800775c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8007760:	d119      	bne.n	8007796 <_vfprintf_r+0x89e>
 8007762:	f107 0801 	add.w	r8, r7, #1
 8007766:	2102      	movs	r1, #2
 8007768:	e001      	b.n	800776e <_vfprintf_r+0x876>
 800776a:	46b8      	mov	r8, r7
 800776c:	2103      	movs	r1, #3
 800776e:	ab1c      	add	r3, sp, #112	; 0x70
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	ab19      	add	r3, sp, #100	; 0x64
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4642      	mov	r2, r8
 8007778:	ab18      	add	r3, sp, #96	; 0x60
 800777a:	4630      	mov	r0, r6
 800777c:	eeb0 0b49 	vmov.f64	d0, d9
 8007780:	f002 f8da 	bl	8009938 <_dtoa_r>
 8007784:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007788:	4682      	mov	sl, r0
 800778a:	d106      	bne.n	800779a <_vfprintf_r+0x8a2>
 800778c:	f01b 0f01 	tst.w	fp, #1
 8007790:	d103      	bne.n	800779a <_vfprintf_r+0x8a2>
 8007792:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007794:	e66d      	b.n	8007472 <_vfprintf_r+0x57a>
 8007796:	46b8      	mov	r8, r7
 8007798:	e7e5      	b.n	8007766 <_vfprintf_r+0x86e>
 800779a:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800779e:	eb0a 0308 	add.w	r3, sl, r8
 80077a2:	d10d      	bne.n	80077c0 <_vfprintf_r+0x8c8>
 80077a4:	f89a 2000 	ldrb.w	r2, [sl]
 80077a8:	2a30      	cmp	r2, #48	; 0x30
 80077aa:	d107      	bne.n	80077bc <_vfprintf_r+0x8c4>
 80077ac:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	bf1c      	itt	ne
 80077b6:	f1c8 0201 	rsbne	r2, r8, #1
 80077ba:	9218      	strne	r2, [sp, #96]	; 0x60
 80077bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077be:	4413      	add	r3, r2
 80077c0:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	bf08      	it	eq
 80077ca:	931c      	streq	r3, [sp, #112]	; 0x70
 80077cc:	2130      	movs	r1, #48	; 0x30
 80077ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d9de      	bls.n	8007792 <_vfprintf_r+0x89a>
 80077d4:	1c50      	adds	r0, r2, #1
 80077d6:	901c      	str	r0, [sp, #112]	; 0x70
 80077d8:	7011      	strb	r1, [r2, #0]
 80077da:	e7f8      	b.n	80077ce <_vfprintf_r+0x8d6>
 80077dc:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80077e0:	f47f ae59 	bne.w	8007496 <_vfprintf_r+0x59e>
 80077e4:	f00b 0301 	and.w	r3, fp, #1
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	ea43 0307 	orr.w	r3, r3, r7
 80077f0:	dd18      	ble.n	8007824 <_vfprintf_r+0x92c>
 80077f2:	b38b      	cbz	r3, 8007858 <_vfprintf_r+0x960>
 80077f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f6:	4443      	add	r3, r8
 80077f8:	441f      	add	r7, r3
 80077fa:	2366      	movs	r3, #102	; 0x66
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	e030      	b.n	8007862 <_vfprintf_r+0x96a>
 8007800:	f813 cb01 	ldrb.w	ip, [r3], #1
 8007804:	f802 cb01 	strb.w	ip, [r2], #1
 8007808:	e67c      	b.n	8007504 <_vfprintf_r+0x60c>
 800780a:	b941      	cbnz	r1, 800781e <_vfprintf_r+0x926>
 800780c:	2230      	movs	r2, #48	; 0x30
 800780e:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8007812:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8007816:	3330      	adds	r3, #48	; 0x30
 8007818:	f802 3b01 	strb.w	r3, [r2], #1
 800781c:	e67e      	b.n	800751c <_vfprintf_r+0x624>
 800781e:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8007822:	e7f8      	b.n	8007816 <_vfprintf_r+0x91e>
 8007824:	b1d3      	cbz	r3, 800785c <_vfprintf_r+0x964>
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	3301      	adds	r3, #1
 800782a:	e7e5      	b.n	80077f8 <_vfprintf_r+0x900>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	4543      	cmp	r3, r8
 8007830:	dc07      	bgt.n	8007842 <_vfprintf_r+0x94a>
 8007832:	f01b 0f01 	tst.w	fp, #1
 8007836:	d02a      	beq.n	800788e <_vfprintf_r+0x996>
 8007838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783a:	eb08 0703 	add.w	r7, r8, r3
 800783e:	2367      	movs	r3, #103	; 0x67
 8007840:	e7dc      	b.n	80077fc <_vfprintf_r+0x904>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	eb03 0702 	add.w	r7, r3, r2
 800784e:	dcf6      	bgt.n	800783e <_vfprintf_r+0x946>
 8007850:	f1c8 0301 	rsb	r3, r8, #1
 8007854:	441f      	add	r7, r3
 8007856:	e7f2      	b.n	800783e <_vfprintf_r+0x946>
 8007858:	4647      	mov	r7, r8
 800785a:	e7ce      	b.n	80077fa <_vfprintf_r+0x902>
 800785c:	2366      	movs	r3, #102	; 0x66
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	2701      	movs	r7, #1
 8007862:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	d025      	beq.n	80078b6 <_vfprintf_r+0x9be>
 800786a:	2300      	movs	r3, #0
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8007874:	f77f ae68 	ble.w	8007548 <_vfprintf_r+0x650>
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2bff      	cmp	r3, #255	; 0xff
 800787e:	d108      	bne.n	8007892 <_vfprintf_r+0x99a>
 8007880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007884:	4413      	add	r3, r2
 8007886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007888:	fb02 7703 	mla	r7, r2, r3, r7
 800788c:	e65c      	b.n	8007548 <_vfprintf_r+0x650>
 800788e:	4647      	mov	r7, r8
 8007890:	e7d5      	b.n	800783e <_vfprintf_r+0x946>
 8007892:	4543      	cmp	r3, r8
 8007894:	daf4      	bge.n	8007880 <_vfprintf_r+0x988>
 8007896:	eba8 0803 	sub.w	r8, r8, r3
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	785b      	ldrb	r3, [r3, #1]
 800789e:	b133      	cbz	r3, 80078ae <_vfprintf_r+0x9b6>
 80078a0:	9b07      	ldr	r3, [sp, #28]
 80078a2:	3301      	adds	r3, #1
 80078a4:	9307      	str	r3, [sp, #28]
 80078a6:	9b08      	ldr	r3, [sp, #32]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9308      	str	r3, [sp, #32]
 80078ac:	e7e4      	b.n	8007878 <_vfprintf_r+0x980>
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	3301      	adds	r3, #1
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	e7e0      	b.n	8007878 <_vfprintf_r+0x980>
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	9306      	str	r3, [sp, #24]
 80078ba:	e645      	b.n	8007548 <_vfprintf_r+0x650>
 80078bc:	f108 0304 	add.w	r3, r8, #4
 80078c0:	f01b 0f20 	tst.w	fp, #32
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	d00c      	beq.n	80078e2 <_vfprintf_r+0x9ea>
 80078c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ca:	f8d8 3000 	ldr.w	r3, [r8]
 80078ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078d0:	17d2      	asrs	r2, r2, #31
 80078d2:	e9c3 1200 	strd	r1, r2, [r3]
 80078d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80078da:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80078de:	f7ff bb7e 	b.w	8006fde <_vfprintf_r+0xe6>
 80078e2:	f01b 0f10 	tst.w	fp, #16
 80078e6:	d004      	beq.n	80078f2 <_vfprintf_r+0x9fa>
 80078e8:	f8d8 3000 	ldr.w	r3, [r8]
 80078ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e7f1      	b.n	80078d6 <_vfprintf_r+0x9de>
 80078f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80078f6:	d004      	beq.n	8007902 <_vfprintf_r+0xa0a>
 80078f8:	f8d8 3000 	ldr.w	r3, [r8]
 80078fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e7e9      	b.n	80078d6 <_vfprintf_r+0x9de>
 8007902:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007906:	d0ef      	beq.n	80078e8 <_vfprintf_r+0x9f0>
 8007908:	f8d8 3000 	ldr.w	r3, [r8]
 800790c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e7e1      	b.n	80078d6 <_vfprintf_r+0x9de>
 8007912:	f04b 0b10 	orr.w	fp, fp, #16
 8007916:	f01b 0320 	ands.w	r3, fp, #32
 800791a:	d020      	beq.n	800795e <_vfprintf_r+0xa66>
 800791c:	f108 0807 	add.w	r8, r8, #7
 8007920:	f028 0307 	bic.w	r3, r8, #7
 8007924:	461a      	mov	r2, r3
 8007926:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800792a:	f852 8b08 	ldr.w	r8, [r2], #8
 800792e:	9205      	str	r2, [sp, #20]
 8007930:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007934:	2300      	movs	r3, #0
 8007936:	2200      	movs	r2, #0
 8007938:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800793c:	1c7a      	adds	r2, r7, #1
 800793e:	f000 84cd 	beq.w	80082dc <_vfprintf_r+0x13e4>
 8007942:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8007946:	9202      	str	r2, [sp, #8]
 8007948:	ea58 0209 	orrs.w	r2, r8, r9
 800794c:	f040 84cc 	bne.w	80082e8 <_vfprintf_r+0x13f0>
 8007950:	2f00      	cmp	r7, #0
 8007952:	f000 810f 	beq.w	8007b74 <_vfprintf_r+0xc7c>
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 84c9 	bne.w	80082ee <_vfprintf_r+0x13f6>
 800795c:	e0ae      	b.n	8007abc <_vfprintf_r+0xbc4>
 800795e:	4642      	mov	r2, r8
 8007960:	f01b 0910 	ands.w	r9, fp, #16
 8007964:	f852 8b04 	ldr.w	r8, [r2], #4
 8007968:	9205      	str	r2, [sp, #20]
 800796a:	d001      	beq.n	8007970 <_vfprintf_r+0xa78>
 800796c:	4699      	mov	r9, r3
 800796e:	e7df      	b.n	8007930 <_vfprintf_r+0xa38>
 8007970:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007974:	d002      	beq.n	800797c <_vfprintf_r+0xa84>
 8007976:	fa1f f888 	uxth.w	r8, r8
 800797a:	e7d9      	b.n	8007930 <_vfprintf_r+0xa38>
 800797c:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007980:	d0d6      	beq.n	8007930 <_vfprintf_r+0xa38>
 8007982:	fa5f f888 	uxtb.w	r8, r8
 8007986:	e7f1      	b.n	800796c <_vfprintf_r+0xa74>
 8007988:	4643      	mov	r3, r8
 800798a:	2278      	movs	r2, #120	; 0x78
 800798c:	f853 8b04 	ldr.w	r8, [r3], #4
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	2330      	movs	r3, #48	; 0x30
 8007994:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8007998:	4bb0      	ldr	r3, [pc, #704]	; (8007c5c <_vfprintf_r+0xd64>)
 800799a:	9312      	str	r3, [sp, #72]	; 0x48
 800799c:	f04f 0900 	mov.w	r9, #0
 80079a0:	f04b 0b02 	orr.w	fp, fp, #2
 80079a4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 80079a8:	2302      	movs	r3, #2
 80079aa:	9204      	str	r2, [sp, #16]
 80079ac:	e7c3      	b.n	8007936 <_vfprintf_r+0xa3e>
 80079ae:	4643      	mov	r3, r8
 80079b0:	1c79      	adds	r1, r7, #1
 80079b2:	f853 ab04 	ldr.w	sl, [r3], #4
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	f04f 0800 	mov.w	r8, #0
 80079bc:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 80079c0:	d010      	beq.n	80079e4 <_vfprintf_r+0xaec>
 80079c2:	463a      	mov	r2, r7
 80079c4:	4641      	mov	r1, r8
 80079c6:	4650      	mov	r0, sl
 80079c8:	f7f8 fc42 	bl	8000250 <memchr>
 80079cc:	9002      	str	r0, [sp, #8]
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f000 80e8 	beq.w	8007ba4 <_vfprintf_r+0xcac>
 80079d4:	e9cd 8806 	strd	r8, r8, [sp, #24]
 80079d8:	eba0 070a 	sub.w	r7, r0, sl
 80079dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80079e0:	46c1      	mov	r9, r8
 80079e2:	e5ba      	b.n	800755a <_vfprintf_r+0x662>
 80079e4:	4650      	mov	r0, sl
 80079e6:	f7f8 fc2b 	bl	8000240 <strlen>
 80079ea:	46c1      	mov	r9, r8
 80079ec:	4607      	mov	r7, r0
 80079ee:	f8cd 8008 	str.w	r8, [sp, #8]
 80079f2:	464b      	mov	r3, r9
 80079f4:	e47c      	b.n	80072f0 <_vfprintf_r+0x3f8>
 80079f6:	f04b 0b10 	orr.w	fp, fp, #16
 80079fa:	f01b 0320 	ands.w	r3, fp, #32
 80079fe:	d00b      	beq.n	8007a18 <_vfprintf_r+0xb20>
 8007a00:	f108 0807 	add.w	r8, r8, #7
 8007a04:	f028 0307 	bic.w	r3, r8, #7
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007a0e:	f852 8b08 	ldr.w	r8, [r2], #8
 8007a12:	9205      	str	r2, [sp, #20]
 8007a14:	2301      	movs	r3, #1
 8007a16:	e78e      	b.n	8007936 <_vfprintf_r+0xa3e>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	f01b 0910 	ands.w	r9, fp, #16
 8007a1e:	f852 8b04 	ldr.w	r8, [r2], #4
 8007a22:	9205      	str	r2, [sp, #20]
 8007a24:	d001      	beq.n	8007a2a <_vfprintf_r+0xb32>
 8007a26:	4699      	mov	r9, r3
 8007a28:	e7f4      	b.n	8007a14 <_vfprintf_r+0xb1c>
 8007a2a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007a2e:	d002      	beq.n	8007a36 <_vfprintf_r+0xb3e>
 8007a30:	fa1f f888 	uxth.w	r8, r8
 8007a34:	e7ee      	b.n	8007a14 <_vfprintf_r+0xb1c>
 8007a36:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007a3a:	d0eb      	beq.n	8007a14 <_vfprintf_r+0xb1c>
 8007a3c:	fa5f f888 	uxtb.w	r8, r8
 8007a40:	e7f1      	b.n	8007a26 <_vfprintf_r+0xb2e>
 8007a42:	4b87      	ldr	r3, [pc, #540]	; (8007c60 <_vfprintf_r+0xd68>)
 8007a44:	9312      	str	r3, [sp, #72]	; 0x48
 8007a46:	f01b 0320 	ands.w	r3, fp, #32
 8007a4a:	d01d      	beq.n	8007a88 <_vfprintf_r+0xb90>
 8007a4c:	f108 0807 	add.w	r8, r8, #7
 8007a50:	f028 0307 	bic.w	r3, r8, #7
 8007a54:	461a      	mov	r2, r3
 8007a56:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007a5a:	f852 8b08 	ldr.w	r8, [r2], #8
 8007a5e:	9205      	str	r2, [sp, #20]
 8007a60:	f01b 0f01 	tst.w	fp, #1
 8007a64:	d00a      	beq.n	8007a7c <_vfprintf_r+0xb84>
 8007a66:	ea58 0309 	orrs.w	r3, r8, r9
 8007a6a:	d007      	beq.n	8007a7c <_vfprintf_r+0xb84>
 8007a6c:	2330      	movs	r3, #48	; 0x30
 8007a6e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8007a78:	f04b 0b02 	orr.w	fp, fp, #2
 8007a7c:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007a80:	2302      	movs	r3, #2
 8007a82:	e758      	b.n	8007936 <_vfprintf_r+0xa3e>
 8007a84:	4b75      	ldr	r3, [pc, #468]	; (8007c5c <_vfprintf_r+0xd64>)
 8007a86:	e7dd      	b.n	8007a44 <_vfprintf_r+0xb4c>
 8007a88:	4642      	mov	r2, r8
 8007a8a:	f01b 0910 	ands.w	r9, fp, #16
 8007a8e:	f852 8b04 	ldr.w	r8, [r2], #4
 8007a92:	9205      	str	r2, [sp, #20]
 8007a94:	d001      	beq.n	8007a9a <_vfprintf_r+0xba2>
 8007a96:	4699      	mov	r9, r3
 8007a98:	e7e2      	b.n	8007a60 <_vfprintf_r+0xb68>
 8007a9a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007a9e:	d002      	beq.n	8007aa6 <_vfprintf_r+0xbae>
 8007aa0:	fa1f f888 	uxth.w	r8, r8
 8007aa4:	e7dc      	b.n	8007a60 <_vfprintf_r+0xb68>
 8007aa6:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007aaa:	d0d9      	beq.n	8007a60 <_vfprintf_r+0xb68>
 8007aac:	fa5f f888 	uxtb.w	r8, r8
 8007ab0:	e7f1      	b.n	8007a96 <_vfprintf_r+0xb9e>
 8007ab2:	f1b8 0f0a 	cmp.w	r8, #10
 8007ab6:	f179 0300 	sbcs.w	r3, r9, #0
 8007aba:	d207      	bcs.n	8007acc <_vfprintf_r+0xbd4>
 8007abc:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007ac0:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8007ac4:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8007ac8:	f000 bc2f 	b.w	800832a <_vfprintf_r+0x1432>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad6:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	220a      	movs	r2, #10
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	f7f8 fdc0 	bl	8000668 <__aeabi_uldivmod>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	3230      	adds	r2, #48	; 0x30
 8007af2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007af6:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007afa:	b1db      	cbz	r3, 8007b34 <_vfprintf_r+0xc3c>
 8007afc:	9b08      	ldr	r3, [sp, #32]
 8007afe:	9a03      	ldr	r2, [sp, #12]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d116      	bne.n	8007b34 <_vfprintf_r+0xc3c>
 8007b06:	2aff      	cmp	r2, #255	; 0xff
 8007b08:	d014      	beq.n	8007b34 <_vfprintf_r+0xc3c>
 8007b0a:	f1b8 0f0a 	cmp.w	r8, #10
 8007b0e:	f179 0300 	sbcs.w	r3, r9, #0
 8007b12:	d30f      	bcc.n	8007b34 <_vfprintf_r+0xc3c>
 8007b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b16:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007b18:	ebaa 0a03 	sub.w	sl, sl, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f004 fb6f 	bl	800c202 <strncpy>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	b11b      	cbz	r3, 8007b32 <_vfprintf_r+0xc3a>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	9308      	str	r3, [sp, #32]
 8007b30:	2300      	movs	r3, #0
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	2300      	movs	r3, #0
 8007b36:	220a      	movs	r2, #10
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fd94 	bl	8000668 <__aeabi_uldivmod>
 8007b40:	f1b8 0f0a 	cmp.w	r8, #10
 8007b44:	f179 0300 	sbcs.w	r3, r9, #0
 8007b48:	f0c0 83ef 	bcc.w	800832a <_vfprintf_r+0x1432>
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	4689      	mov	r9, r1
 8007b50:	46d3      	mov	fp, sl
 8007b52:	e7c3      	b.n	8007adc <_vfprintf_r+0xbe4>
 8007b54:	f008 030f 	and.w	r3, r8, #15
 8007b58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b5a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007b5e:	5cd3      	ldrb	r3, [r2, r3]
 8007b60:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8007b64:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8007b68:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007b6c:	ea58 0309 	orrs.w	r3, r8, r9
 8007b70:	d1f0      	bne.n	8007b54 <_vfprintf_r+0xc5c>
 8007b72:	e3da      	b.n	800832a <_vfprintf_r+0x1432>
 8007b74:	b933      	cbnz	r3, 8007b84 <_vfprintf_r+0xc8c>
 8007b76:	f01b 0f01 	tst.w	fp, #1
 8007b7a:	d003      	beq.n	8007b84 <_vfprintf_r+0xc8c>
 8007b7c:	2330      	movs	r3, #48	; 0x30
 8007b7e:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8007b82:	e79f      	b.n	8007ac4 <_vfprintf_r+0xbcc>
 8007b84:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8007b88:	e3cf      	b.n	800832a <_vfprintf_r+0x1432>
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8392 	beq.w	80082b6 <_vfprintf_r+0x13be>
 8007b92:	2000      	movs	r0, #0
 8007b94:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8007b98:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8007b9c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ba0:	f7ff bb36 	b.w	8007210 <_vfprintf_r+0x318>
 8007ba4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007ba8:	e723      	b.n	80079f2 <_vfprintf_r+0xafa>
 8007baa:	2110      	movs	r1, #16
 8007bac:	6061      	str	r1, [r4, #4]
 8007bae:	2a07      	cmp	r2, #7
 8007bb0:	4461      	add	r1, ip
 8007bb2:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8007bb6:	dd0a      	ble.n	8007bce <_vfprintf_r+0xcd6>
 8007bb8:	aa1e      	add	r2, sp, #120	; 0x78
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc0:	f006 fd56 	bl	800e670 <__sprint_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8353 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bcc:	a821      	add	r0, sp, #132	; 0x84
 8007bce:	3b10      	subs	r3, #16
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	e4dd      	b.n	8007590 <_vfprintf_r+0x698>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	e4f7      	b.n	80075c8 <_vfprintf_r+0x6d0>
 8007bd8:	aa1e      	add	r2, sp, #120	; 0x78
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f006 fd47 	bl	800e670 <__sprint_r>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f040 8344 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007be8:	ac21      	add	r4, sp, #132	; 0x84
 8007bea:	e4ff      	b.n	80075ec <_vfprintf_r+0x6f4>
 8007bec:	aa1e      	add	r2, sp, #120	; 0x78
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f006 fd3d 	bl	800e670 <__sprint_r>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f040 833a 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007bfc:	ac21      	add	r4, sp, #132	; 0x84
 8007bfe:	e505      	b.n	800760c <_vfprintf_r+0x714>
 8007c00:	2110      	movs	r1, #16
 8007c02:	6061      	str	r1, [r4, #4]
 8007c04:	2a07      	cmp	r2, #7
 8007c06:	4461      	add	r1, ip
 8007c08:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8007c0c:	dd0a      	ble.n	8007c24 <_vfprintf_r+0xd2c>
 8007c0e:	aa1e      	add	r2, sp, #120	; 0x78
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c16:	f006 fd2b 	bl	800e670 <__sprint_r>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f040 8328 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c22:	a821      	add	r0, sp, #132	; 0x84
 8007c24:	3b10      	subs	r3, #16
 8007c26:	4604      	mov	r4, r0
 8007c28:	e4f8      	b.n	800761c <_vfprintf_r+0x724>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	e512      	b.n	8007654 <_vfprintf_r+0x75c>
 8007c2e:	2010      	movs	r0, #16
 8007c30:	4403      	add	r3, r0
 8007c32:	2a07      	cmp	r2, #7
 8007c34:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8007c38:	6060      	str	r0, [r4, #4]
 8007c3a:	dd08      	ble.n	8007c4e <_vfprintf_r+0xd56>
 8007c3c:	aa1e      	add	r2, sp, #120	; 0x78
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4630      	mov	r0, r6
 8007c42:	f006 fd15 	bl	800e670 <__sprint_r>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 8312 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007c4c:	a921      	add	r1, sp, #132	; 0x84
 8007c4e:	f1a9 0910 	sub.w	r9, r9, #16
 8007c52:	460c      	mov	r4, r1
 8007c54:	e503      	b.n	800765e <_vfprintf_r+0x766>
 8007c56:	460c      	mov	r4, r1
 8007c58:	e51e      	b.n	8007698 <_vfprintf_r+0x7a0>
 8007c5a:	bf00      	nop
 8007c5c:	08011269 	.word	0x08011269
 8007c60:	0801127a 	.word	0x0801127a
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	2b65      	cmp	r3, #101	; 0x65
 8007c68:	f340 8252 	ble.w	8008110 <_vfprintf_r+0x1218>
 8007c6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c74:	d16c      	bne.n	8007d50 <_vfprintf_r+0xe58>
 8007c76:	4b75      	ldr	r3, [pc, #468]	; (8007e4c <_vfprintf_r+0xf54>)
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4418      	add	r0, r3
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c82:	9020      	str	r0, [sp, #128]	; 0x80
 8007c84:	3301      	adds	r3, #1
 8007c86:	2b07      	cmp	r3, #7
 8007c88:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c8a:	dc3a      	bgt.n	8007d02 <_vfprintf_r+0xe0a>
 8007c8c:	3408      	adds	r4, #8
 8007c8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007c90:	9a03      	ldr	r2, [sp, #12]
 8007c92:	4293      	cmp	r3, r2
 8007c94:	db03      	blt.n	8007c9e <_vfprintf_r+0xda6>
 8007c96:	f01b 0f01 	tst.w	fp, #1
 8007c9a:	f43f ad0d 	beq.w	80076b8 <_vfprintf_r+0x7c0>
 8007c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007caa:	4413      	add	r3, r2
 8007cac:	9320      	str	r3, [sp, #128]	; 0x80
 8007cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	2b07      	cmp	r3, #7
 8007cb4:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cb6:	dc2e      	bgt.n	8007d16 <_vfprintf_r+0xe1e>
 8007cb8:	3408      	adds	r4, #8
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	1e5f      	subs	r7, r3, #1
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	f77f acfa 	ble.w	80076b8 <_vfprintf_r+0x7c0>
 8007cc4:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8007e50 <_vfprintf_r+0xf58>
 8007cc8:	f04f 0910 	mov.w	r9, #16
 8007ccc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007cd0:	2f10      	cmp	r7, #16
 8007cd2:	f103 0301 	add.w	r3, r3, #1
 8007cd6:	f104 0108 	add.w	r1, r4, #8
 8007cda:	f8c4 8000 	str.w	r8, [r4]
 8007cde:	dc24      	bgt.n	8007d2a <_vfprintf_r+0xe32>
 8007ce0:	443a      	add	r2, r7
 8007ce2:	6067      	str	r7, [r4, #4]
 8007ce4:	9220      	str	r2, [sp, #128]	; 0x80
 8007ce6:	2b07      	cmp	r3, #7
 8007ce8:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cea:	f340 829d 	ble.w	8008228 <_vfprintf_r+0x1330>
 8007cee:	aa1e      	add	r2, sp, #120	; 0x78
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f006 fcbc 	bl	800e670 <__sprint_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f040 82b9 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007cfe:	ac21      	add	r4, sp, #132	; 0x84
 8007d00:	e4da      	b.n	80076b8 <_vfprintf_r+0x7c0>
 8007d02:	aa1e      	add	r2, sp, #120	; 0x78
 8007d04:	4629      	mov	r1, r5
 8007d06:	4630      	mov	r0, r6
 8007d08:	f006 fcb2 	bl	800e670 <__sprint_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f040 82af 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007d12:	ac21      	add	r4, sp, #132	; 0x84
 8007d14:	e7bb      	b.n	8007c8e <_vfprintf_r+0xd96>
 8007d16:	aa1e      	add	r2, sp, #120	; 0x78
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f006 fca8 	bl	800e670 <__sprint_r>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f040 82a5 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007d26:	ac21      	add	r4, sp, #132	; 0x84
 8007d28:	e7c7      	b.n	8007cba <_vfprintf_r+0xdc2>
 8007d2a:	3210      	adds	r2, #16
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007d32:	f8c4 9004 	str.w	r9, [r4, #4]
 8007d36:	dd08      	ble.n	8007d4a <_vfprintf_r+0xe52>
 8007d38:	aa1e      	add	r2, sp, #120	; 0x78
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f006 fc97 	bl	800e670 <__sprint_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f040 8294 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007d48:	a921      	add	r1, sp, #132	; 0x84
 8007d4a:	3f10      	subs	r7, #16
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	e7bd      	b.n	8007ccc <_vfprintf_r+0xdd4>
 8007d50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc7e      	bgt.n	8007e54 <_vfprintf_r+0xf5c>
 8007d56:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <_vfprintf_r+0xf54>)
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4418      	add	r0, r3
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d62:	9020      	str	r0, [sp, #128]	; 0x80
 8007d64:	3301      	adds	r3, #1
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	931f      	str	r3, [sp, #124]	; 0x7c
 8007d6a:	dc47      	bgt.n	8007dfc <_vfprintf_r+0xf04>
 8007d6c:	3408      	adds	r4, #8
 8007d6e:	9903      	ldr	r1, [sp, #12]
 8007d70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d74:	430a      	orrs	r2, r1
 8007d76:	f00b 0101 	and.w	r1, fp, #1
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	f43f ac9c 	beq.w	80076b8 <_vfprintf_r+0x7c0>
 8007d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	9320      	str	r3, [sp, #128]	; 0x80
 8007d8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d8e:	3301      	adds	r3, #1
 8007d90:	2b07      	cmp	r3, #7
 8007d92:	931f      	str	r3, [sp, #124]	; 0x7c
 8007d94:	dc3c      	bgt.n	8007e10 <_vfprintf_r+0xf18>
 8007d96:	f104 0308 	add.w	r3, r4, #8
 8007d9a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	da1c      	bge.n	8007dda <_vfprintf_r+0xee2>
 8007da0:	4c2b      	ldr	r4, [pc, #172]	; (8007e50 <_vfprintf_r+0xf58>)
 8007da2:	427f      	negs	r7, r7
 8007da4:	461a      	mov	r2, r3
 8007da6:	f04f 0810 	mov.w	r8, #16
 8007daa:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8007dae:	2f10      	cmp	r7, #16
 8007db0:	f101 0101 	add.w	r1, r1, #1
 8007db4:	f103 0308 	add.w	r3, r3, #8
 8007db8:	6014      	str	r4, [r2, #0]
 8007dba:	dc33      	bgt.n	8007e24 <_vfprintf_r+0xf2c>
 8007dbc:	6057      	str	r7, [r2, #4]
 8007dbe:	2907      	cmp	r1, #7
 8007dc0:	4407      	add	r7, r0
 8007dc2:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 8007dc6:	dd08      	ble.n	8007dda <_vfprintf_r+0xee2>
 8007dc8:	aa1e      	add	r2, sp, #120	; 0x78
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f006 fc4f 	bl	800e670 <__sprint_r>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f040 824c 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007dd8:	ab21      	add	r3, sp, #132	; 0x84
 8007dda:	9a03      	ldr	r2, [sp, #12]
 8007ddc:	605a      	str	r2, [r3, #4]
 8007dde:	9903      	ldr	r1, [sp, #12]
 8007de0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007de2:	f8c3 a000 	str.w	sl, [r3]
 8007de6:	440a      	add	r2, r1
 8007de8:	9220      	str	r2, [sp, #128]	; 0x80
 8007dea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007dec:	3201      	adds	r2, #1
 8007dee:	2a07      	cmp	r2, #7
 8007df0:	921f      	str	r2, [sp, #124]	; 0x7c
 8007df2:	f73f af7c 	bgt.w	8007cee <_vfprintf_r+0xdf6>
 8007df6:	f103 0408 	add.w	r4, r3, #8
 8007dfa:	e45d      	b.n	80076b8 <_vfprintf_r+0x7c0>
 8007dfc:	aa1e      	add	r2, sp, #120	; 0x78
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4630      	mov	r0, r6
 8007e02:	f006 fc35 	bl	800e670 <__sprint_r>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 8232 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007e0c:	ac21      	add	r4, sp, #132	; 0x84
 8007e0e:	e7ae      	b.n	8007d6e <_vfprintf_r+0xe76>
 8007e10:	aa1e      	add	r2, sp, #120	; 0x78
 8007e12:	4629      	mov	r1, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	f006 fc2b 	bl	800e670 <__sprint_r>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	f040 8228 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007e20:	ab21      	add	r3, sp, #132	; 0x84
 8007e22:	e7ba      	b.n	8007d9a <_vfprintf_r+0xea2>
 8007e24:	3010      	adds	r0, #16
 8007e26:	2907      	cmp	r1, #7
 8007e28:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8007e2c:	f8c2 8004 	str.w	r8, [r2, #4]
 8007e30:	dd08      	ble.n	8007e44 <_vfprintf_r+0xf4c>
 8007e32:	aa1e      	add	r2, sp, #120	; 0x78
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f006 fc1a 	bl	800e670 <__sprint_r>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	f040 8217 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007e42:	ab21      	add	r3, sp, #132	; 0x84
 8007e44:	3f10      	subs	r7, #16
 8007e46:	461a      	mov	r2, r3
 8007e48:	e7af      	b.n	8007daa <_vfprintf_r+0xeb2>
 8007e4a:	bf00      	nop
 8007e4c:	0801128b 	.word	0x0801128b
 8007e50:	0801129d 	.word	0x0801129d
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	4543      	cmp	r3, r8
 8007e58:	bfa8      	it	ge
 8007e5a:	4643      	movge	r3, r8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	4699      	mov	r9, r3
 8007e60:	dd0a      	ble.n	8007e78 <_vfprintf_r+0xf80>
 8007e62:	4418      	add	r0, r3
 8007e64:	e9c4 a300 	strd	sl, r3, [r4]
 8007e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e6a:	9020      	str	r0, [sp, #128]	; 0x80
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	2b07      	cmp	r3, #7
 8007e70:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e72:	f300 8084 	bgt.w	8007f7e <_vfprintf_r+0x1086>
 8007e76:	3408      	adds	r4, #8
 8007e78:	f1b9 0f00 	cmp.w	r9, #0
 8007e7c:	bfac      	ite	ge
 8007e7e:	eba8 0709 	subge.w	r7, r8, r9
 8007e82:	4647      	movlt	r7, r8
 8007e84:	2f00      	cmp	r7, #0
 8007e86:	dd1b      	ble.n	8007ec0 <_vfprintf_r+0xfc8>
 8007e88:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 80082d4 <_vfprintf_r+0x13dc>
 8007e8c:	f8c4 9000 	str.w	r9, [r4]
 8007e90:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007e94:	2f10      	cmp	r7, #16
 8007e96:	f103 0301 	add.w	r3, r3, #1
 8007e9a:	f104 0108 	add.w	r1, r4, #8
 8007e9e:	dc78      	bgt.n	8007f92 <_vfprintf_r+0x109a>
 8007ea0:	6067      	str	r7, [r4, #4]
 8007ea2:	2b07      	cmp	r3, #7
 8007ea4:	4417      	add	r7, r2
 8007ea6:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8007eaa:	f340 8085 	ble.w	8007fb8 <_vfprintf_r+0x10c0>
 8007eae:	aa1e      	add	r2, sp, #120	; 0x78
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f006 fbdc 	bl	800e670 <__sprint_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f040 81d9 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007ebe:	ac21      	add	r4, sp, #132	; 0x84
 8007ec0:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8007ec4:	44d0      	add	r8, sl
 8007ec6:	d00a      	beq.n	8007ede <_vfprintf_r+0xfe6>
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d176      	bne.n	8007fbc <_vfprintf_r+0x10c4>
 8007ece:	9b06      	ldr	r3, [sp, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d176      	bne.n	8007fc2 <_vfprintf_r+0x10ca>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	4453      	add	r3, sl
 8007ed8:	4598      	cmp	r8, r3
 8007eda:	bf28      	it	cs
 8007edc:	4698      	movcs	r8, r3
 8007ede:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007ee0:	9a03      	ldr	r2, [sp, #12]
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	db02      	blt.n	8007eec <_vfprintf_r+0xff4>
 8007ee6:	f01b 0f01 	tst.w	fp, #1
 8007eea:	d00e      	beq.n	8007f0a <_vfprintf_r+0x1012>
 8007eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ef8:	4413      	add	r3, r2
 8007efa:	9320      	str	r3, [sp, #128]	; 0x80
 8007efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007efe:	3301      	adds	r3, #1
 8007f00:	2b07      	cmp	r3, #7
 8007f02:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f04:	f300 80dd 	bgt.w	80080c2 <_vfprintf_r+0x11ca>
 8007f08:	3408      	adds	r4, #8
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	9903      	ldr	r1, [sp, #12]
 8007f0e:	eb0a 0203 	add.w	r2, sl, r3
 8007f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f14:	eba2 0208 	sub.w	r2, r2, r8
 8007f18:	eba1 0903 	sub.w	r9, r1, r3
 8007f1c:	4591      	cmp	r9, r2
 8007f1e:	bfa8      	it	ge
 8007f20:	4691      	movge	r9, r2
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	dd0b      	ble.n	8007f40 <_vfprintf_r+0x1048>
 8007f28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f2a:	444b      	add	r3, r9
 8007f2c:	9320      	str	r3, [sp, #128]	; 0x80
 8007f2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f30:	3301      	adds	r3, #1
 8007f32:	2b07      	cmp	r3, #7
 8007f34:	e9c4 8900 	strd	r8, r9, [r4]
 8007f38:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f3a:	f300 80cc 	bgt.w	80080d6 <_vfprintf_r+0x11de>
 8007f3e:	3408      	adds	r4, #8
 8007f40:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	eba3 0707 	sub.w	r7, r3, r7
 8007f4c:	bfa8      	it	ge
 8007f4e:	eba7 0709 	subge.w	r7, r7, r9
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	f77f abb0 	ble.w	80076b8 <_vfprintf_r+0x7c0>
 8007f58:	f8df 8378 	ldr.w	r8, [pc, #888]	; 80082d4 <_vfprintf_r+0x13dc>
 8007f5c:	f04f 0910 	mov.w	r9, #16
 8007f60:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8007f64:	2f10      	cmp	r7, #16
 8007f66:	f103 0301 	add.w	r3, r3, #1
 8007f6a:	f104 0108 	add.w	r1, r4, #8
 8007f6e:	f8c4 8000 	str.w	r8, [r4]
 8007f72:	f300 80ba 	bgt.w	80080ea <_vfprintf_r+0x11f2>
 8007f76:	6067      	str	r7, [r4, #4]
 8007f78:	4417      	add	r7, r2
 8007f7a:	9720      	str	r7, [sp, #128]	; 0x80
 8007f7c:	e6b3      	b.n	8007ce6 <_vfprintf_r+0xdee>
 8007f7e:	aa1e      	add	r2, sp, #120	; 0x78
 8007f80:	4629      	mov	r1, r5
 8007f82:	4630      	mov	r0, r6
 8007f84:	f006 fb74 	bl	800e670 <__sprint_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f040 8171 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007f8e:	ac21      	add	r4, sp, #132	; 0x84
 8007f90:	e772      	b.n	8007e78 <_vfprintf_r+0xf80>
 8007f92:	2010      	movs	r0, #16
 8007f94:	4402      	add	r2, r0
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8007f9c:	6060      	str	r0, [r4, #4]
 8007f9e:	dd08      	ble.n	8007fb2 <_vfprintf_r+0x10ba>
 8007fa0:	aa1e      	add	r2, sp, #120	; 0x78
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f006 fb63 	bl	800e670 <__sprint_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f040 8160 	bne.w	8008270 <_vfprintf_r+0x1378>
 8007fb0:	a921      	add	r1, sp, #132	; 0x84
 8007fb2:	3f10      	subs	r7, #16
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	e769      	b.n	8007e8c <_vfprintf_r+0xf94>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	e781      	b.n	8007ec0 <_vfprintf_r+0xfc8>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d04f      	beq.n	8008062 <_vfprintf_r+0x116a>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	9306      	str	r3, [sp, #24]
 8007fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007fd4:	4413      	add	r3, r2
 8007fd6:	9320      	str	r3, [sp, #128]	; 0x80
 8007fd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fda:	3301      	adds	r3, #1
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fe0:	dc46      	bgt.n	8008070 <_vfprintf_r+0x1178>
 8007fe2:	3408      	adds	r4, #8
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	9a08      	ldr	r2, [sp, #32]
 8007fe8:	eb0a 0903 	add.w	r9, sl, r3
 8007fec:	eba9 0308 	sub.w	r3, r9, r8
 8007ff0:	f892 9000 	ldrb.w	r9, [r2]
 8007ff4:	4599      	cmp	r9, r3
 8007ff6:	bfa8      	it	ge
 8007ff8:	4699      	movge	r9, r3
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	dd0a      	ble.n	8008016 <_vfprintf_r+0x111e>
 8008000:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008002:	444b      	add	r3, r9
 8008004:	9320      	str	r3, [sp, #128]	; 0x80
 8008006:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008008:	3301      	adds	r3, #1
 800800a:	2b07      	cmp	r3, #7
 800800c:	e9c4 8900 	strd	r8, r9, [r4]
 8008010:	931f      	str	r3, [sp, #124]	; 0x7c
 8008012:	dc37      	bgt.n	8008084 <_vfprintf_r+0x118c>
 8008014:	3408      	adds	r4, #8
 8008016:	9b08      	ldr	r3, [sp, #32]
 8008018:	781f      	ldrb	r7, [r3, #0]
 800801a:	f1b9 0f00 	cmp.w	r9, #0
 800801e:	bfa8      	it	ge
 8008020:	eba7 0709 	subge.w	r7, r7, r9
 8008024:	2f00      	cmp	r7, #0
 8008026:	dd18      	ble.n	800805a <_vfprintf_r+0x1162>
 8008028:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800802c:	48a9      	ldr	r0, [pc, #676]	; (80082d4 <_vfprintf_r+0x13dc>)
 800802e:	6020      	str	r0, [r4, #0]
 8008030:	2f10      	cmp	r7, #16
 8008032:	f103 0301 	add.w	r3, r3, #1
 8008036:	f104 0108 	add.w	r1, r4, #8
 800803a:	dc2d      	bgt.n	8008098 <_vfprintf_r+0x11a0>
 800803c:	6067      	str	r7, [r4, #4]
 800803e:	2b07      	cmp	r3, #7
 8008040:	4417      	add	r7, r2
 8008042:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8008046:	dd3a      	ble.n	80080be <_vfprintf_r+0x11c6>
 8008048:	aa1e      	add	r2, sp, #120	; 0x78
 800804a:	4629      	mov	r1, r5
 800804c:	4630      	mov	r0, r6
 800804e:	f006 fb0f 	bl	800e670 <__sprint_r>
 8008052:	2800      	cmp	r0, #0
 8008054:	f040 810c 	bne.w	8008270 <_vfprintf_r+0x1378>
 8008058:	ac21      	add	r4, sp, #132	; 0x84
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	4498      	add	r8, r3
 8008060:	e732      	b.n	8007ec8 <_vfprintf_r+0xfd0>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	3b01      	subs	r3, #1
 8008066:	9308      	str	r3, [sp, #32]
 8008068:	9b07      	ldr	r3, [sp, #28]
 800806a:	3b01      	subs	r3, #1
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	e7ab      	b.n	8007fc8 <_vfprintf_r+0x10d0>
 8008070:	aa1e      	add	r2, sp, #120	; 0x78
 8008072:	4629      	mov	r1, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f006 fafb 	bl	800e670 <__sprint_r>
 800807a:	2800      	cmp	r0, #0
 800807c:	f040 80f8 	bne.w	8008270 <_vfprintf_r+0x1378>
 8008080:	ac21      	add	r4, sp, #132	; 0x84
 8008082:	e7af      	b.n	8007fe4 <_vfprintf_r+0x10ec>
 8008084:	aa1e      	add	r2, sp, #120	; 0x78
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f006 faf1 	bl	800e670 <__sprint_r>
 800808e:	2800      	cmp	r0, #0
 8008090:	f040 80ee 	bne.w	8008270 <_vfprintf_r+0x1378>
 8008094:	ac21      	add	r4, sp, #132	; 0x84
 8008096:	e7be      	b.n	8008016 <_vfprintf_r+0x111e>
 8008098:	2010      	movs	r0, #16
 800809a:	4402      	add	r2, r0
 800809c:	2b07      	cmp	r3, #7
 800809e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80080a2:	6060      	str	r0, [r4, #4]
 80080a4:	dd08      	ble.n	80080b8 <_vfprintf_r+0x11c0>
 80080a6:	aa1e      	add	r2, sp, #120	; 0x78
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f006 fae0 	bl	800e670 <__sprint_r>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f040 80dd 	bne.w	8008270 <_vfprintf_r+0x1378>
 80080b6:	a921      	add	r1, sp, #132	; 0x84
 80080b8:	3f10      	subs	r7, #16
 80080ba:	460c      	mov	r4, r1
 80080bc:	e7b4      	b.n	8008028 <_vfprintf_r+0x1130>
 80080be:	460c      	mov	r4, r1
 80080c0:	e7cb      	b.n	800805a <_vfprintf_r+0x1162>
 80080c2:	aa1e      	add	r2, sp, #120	; 0x78
 80080c4:	4629      	mov	r1, r5
 80080c6:	4630      	mov	r0, r6
 80080c8:	f006 fad2 	bl	800e670 <__sprint_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f040 80cf 	bne.w	8008270 <_vfprintf_r+0x1378>
 80080d2:	ac21      	add	r4, sp, #132	; 0x84
 80080d4:	e719      	b.n	8007f0a <_vfprintf_r+0x1012>
 80080d6:	aa1e      	add	r2, sp, #120	; 0x78
 80080d8:	4629      	mov	r1, r5
 80080da:	4630      	mov	r0, r6
 80080dc:	f006 fac8 	bl	800e670 <__sprint_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 80c5 	bne.w	8008270 <_vfprintf_r+0x1378>
 80080e6:	ac21      	add	r4, sp, #132	; 0x84
 80080e8:	e72a      	b.n	8007f40 <_vfprintf_r+0x1048>
 80080ea:	3210      	adds	r2, #16
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80080f2:	f8c4 9004 	str.w	r9, [r4, #4]
 80080f6:	dd08      	ble.n	800810a <_vfprintf_r+0x1212>
 80080f8:	aa1e      	add	r2, sp, #120	; 0x78
 80080fa:	4629      	mov	r1, r5
 80080fc:	4630      	mov	r0, r6
 80080fe:	f006 fab7 	bl	800e670 <__sprint_r>
 8008102:	2800      	cmp	r0, #0
 8008104:	f040 80b4 	bne.w	8008270 <_vfprintf_r+0x1378>
 8008108:	a921      	add	r1, sp, #132	; 0x84
 800810a:	3f10      	subs	r7, #16
 800810c:	460c      	mov	r4, r1
 800810e:	e727      	b.n	8007f60 <_vfprintf_r+0x1068>
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008114:	2901      	cmp	r1, #1
 8008116:	f100 0001 	add.w	r0, r0, #1
 800811a:	f102 0201 	add.w	r2, r2, #1
 800811e:	f104 0308 	add.w	r3, r4, #8
 8008122:	dc02      	bgt.n	800812a <_vfprintf_r+0x1232>
 8008124:	f01b 0f01 	tst.w	fp, #1
 8008128:	d073      	beq.n	8008212 <_vfprintf_r+0x131a>
 800812a:	2101      	movs	r1, #1
 800812c:	2a07      	cmp	r2, #7
 800812e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8008132:	f8c4 a000 	str.w	sl, [r4]
 8008136:	6061      	str	r1, [r4, #4]
 8008138:	dd08      	ble.n	800814c <_vfprintf_r+0x1254>
 800813a:	aa1e      	add	r2, sp, #120	; 0x78
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f006 fa96 	bl	800e670 <__sprint_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	f040 8093 	bne.w	8008270 <_vfprintf_r+0x1378>
 800814a:	ab21      	add	r3, sp, #132	; 0x84
 800814c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008152:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008158:	440a      	add	r2, r1
 800815a:	9220      	str	r2, [sp, #128]	; 0x80
 800815c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800815e:	3201      	adds	r2, #1
 8008160:	2a07      	cmp	r2, #7
 8008162:	921f      	str	r2, [sp, #124]	; 0x7c
 8008164:	dc25      	bgt.n	80081b2 <_vfprintf_r+0x12ba>
 8008166:	3308      	adds	r3, #8
 8008168:	9a03      	ldr	r2, [sp, #12]
 800816a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800816e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008172:	f102 34ff 	add.w	r4, r2, #4294967295
 8008176:	d025      	beq.n	80081c4 <_vfprintf_r+0x12cc>
 8008178:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800817a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800817c:	f10a 0001 	add.w	r0, sl, #1
 8008180:	e9c3 0400 	strd	r0, r4, [r3]
 8008184:	9803      	ldr	r0, [sp, #12]
 8008186:	3101      	adds	r1, #1
 8008188:	3a01      	subs	r2, #1
 800818a:	4402      	add	r2, r0
 800818c:	2907      	cmp	r1, #7
 800818e:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8008192:	dd47      	ble.n	8008224 <_vfprintf_r+0x132c>
 8008194:	aa1e      	add	r2, sp, #120	; 0x78
 8008196:	4629      	mov	r1, r5
 8008198:	4630      	mov	r0, r6
 800819a:	f006 fa69 	bl	800e670 <__sprint_r>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d166      	bne.n	8008270 <_vfprintf_r+0x1378>
 80081a2:	ab21      	add	r3, sp, #132	; 0x84
 80081a4:	aa1a      	add	r2, sp, #104	; 0x68
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081aa:	605a      	str	r2, [r3, #4]
 80081ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081b0:	e619      	b.n	8007de6 <_vfprintf_r+0xeee>
 80081b2:	aa1e      	add	r2, sp, #120	; 0x78
 80081b4:	4629      	mov	r1, r5
 80081b6:	4630      	mov	r0, r6
 80081b8:	f006 fa5a 	bl	800e670 <__sprint_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d157      	bne.n	8008270 <_vfprintf_r+0x1378>
 80081c0:	ab21      	add	r3, sp, #132	; 0x84
 80081c2:	e7d1      	b.n	8008168 <_vfprintf_r+0x1270>
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	dded      	ble.n	80081a4 <_vfprintf_r+0x12ac>
 80081c8:	4f42      	ldr	r7, [pc, #264]	; (80082d4 <_vfprintf_r+0x13dc>)
 80081ca:	f04f 0810 	mov.w	r8, #16
 80081ce:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 80081d2:	2c10      	cmp	r4, #16
 80081d4:	f102 0201 	add.w	r2, r2, #1
 80081d8:	f103 0008 	add.w	r0, r3, #8
 80081dc:	601f      	str	r7, [r3, #0]
 80081de:	dc07      	bgt.n	80081f0 <_vfprintf_r+0x12f8>
 80081e0:	605c      	str	r4, [r3, #4]
 80081e2:	2a07      	cmp	r2, #7
 80081e4:	440c      	add	r4, r1
 80081e6:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 80081ea:	dcd3      	bgt.n	8008194 <_vfprintf_r+0x129c>
 80081ec:	4603      	mov	r3, r0
 80081ee:	e7d9      	b.n	80081a4 <_vfprintf_r+0x12ac>
 80081f0:	3110      	adds	r1, #16
 80081f2:	2a07      	cmp	r2, #7
 80081f4:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80081f8:	f8c3 8004 	str.w	r8, [r3, #4]
 80081fc:	dd06      	ble.n	800820c <_vfprintf_r+0x1314>
 80081fe:	aa1e      	add	r2, sp, #120	; 0x78
 8008200:	4629      	mov	r1, r5
 8008202:	4630      	mov	r0, r6
 8008204:	f006 fa34 	bl	800e670 <__sprint_r>
 8008208:	bb90      	cbnz	r0, 8008270 <_vfprintf_r+0x1378>
 800820a:	a821      	add	r0, sp, #132	; 0x84
 800820c:	3c10      	subs	r4, #16
 800820e:	4603      	mov	r3, r0
 8008210:	e7dd      	b.n	80081ce <_vfprintf_r+0x12d6>
 8008212:	2101      	movs	r1, #1
 8008214:	2a07      	cmp	r2, #7
 8008216:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800821a:	f8c4 a000 	str.w	sl, [r4]
 800821e:	6061      	str	r1, [r4, #4]
 8008220:	ddc0      	ble.n	80081a4 <_vfprintf_r+0x12ac>
 8008222:	e7b7      	b.n	8008194 <_vfprintf_r+0x129c>
 8008224:	3308      	adds	r3, #8
 8008226:	e7bd      	b.n	80081a4 <_vfprintf_r+0x12ac>
 8008228:	460c      	mov	r4, r1
 800822a:	f7ff ba45 	b.w	80076b8 <_vfprintf_r+0x7c0>
 800822e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8008232:	1a9f      	subs	r7, r3, r2
 8008234:	2f00      	cmp	r7, #0
 8008236:	f77f aa4d 	ble.w	80076d4 <_vfprintf_r+0x7dc>
 800823a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80082d8 <_vfprintf_r+0x13e0>
 800823e:	f04f 0910 	mov.w	r9, #16
 8008242:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8008246:	2f10      	cmp	r7, #16
 8008248:	f103 0301 	add.w	r3, r3, #1
 800824c:	f8c4 8000 	str.w	r8, [r4]
 8008250:	dc18      	bgt.n	8008284 <_vfprintf_r+0x138c>
 8008252:	6067      	str	r7, [r4, #4]
 8008254:	2b07      	cmp	r3, #7
 8008256:	4417      	add	r7, r2
 8008258:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 800825c:	f77f aa3a 	ble.w	80076d4 <_vfprintf_r+0x7dc>
 8008260:	aa1e      	add	r2, sp, #120	; 0x78
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	f006 fa03 	bl	800e670 <__sprint_r>
 800826a:	2800      	cmp	r0, #0
 800826c:	f43f aa32 	beq.w	80076d4 <_vfprintf_r+0x7dc>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f43f a871 	beq.w	800735a <_vfprintf_r+0x462>
 8008278:	4619      	mov	r1, r3
 800827a:	4630      	mov	r0, r6
 800827c:	f002 fab6 	bl	800a7ec <_free_r>
 8008280:	f7ff b86b 	b.w	800735a <_vfprintf_r+0x462>
 8008284:	3210      	adds	r2, #16
 8008286:	2b07      	cmp	r3, #7
 8008288:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800828c:	f8c4 9004 	str.w	r9, [r4, #4]
 8008290:	dc02      	bgt.n	8008298 <_vfprintf_r+0x13a0>
 8008292:	3408      	adds	r4, #8
 8008294:	3f10      	subs	r7, #16
 8008296:	e7d4      	b.n	8008242 <_vfprintf_r+0x134a>
 8008298:	aa1e      	add	r2, sp, #120	; 0x78
 800829a:	4629      	mov	r1, r5
 800829c:	4630      	mov	r0, r6
 800829e:	f006 f9e7 	bl	800e670 <__sprint_r>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1e4      	bne.n	8008270 <_vfprintf_r+0x1378>
 80082a6:	ac21      	add	r4, sp, #132	; 0x84
 80082a8:	e7f4      	b.n	8008294 <_vfprintf_r+0x139c>
 80082aa:	9902      	ldr	r1, [sp, #8]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f002 fa9d 	bl	800a7ec <_free_r>
 80082b2:	f7ff ba27 	b.w	8007704 <_vfprintf_r+0x80c>
 80082b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80082b8:	b91b      	cbnz	r3, 80082c2 <_vfprintf_r+0x13ca>
 80082ba:	2300      	movs	r3, #0
 80082bc:	931f      	str	r3, [sp, #124]	; 0x7c
 80082be:	f7ff b84c 	b.w	800735a <_vfprintf_r+0x462>
 80082c2:	aa1e      	add	r2, sp, #120	; 0x78
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f006 f9d2 	bl	800e670 <__sprint_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0f4      	beq.n	80082ba <_vfprintf_r+0x13c2>
 80082d0:	f7ff b843 	b.w	800735a <_vfprintf_r+0x462>
 80082d4:	0801129d 	.word	0x0801129d
 80082d8:	0801128d 	.word	0x0801128d
 80082dc:	ea58 0209 	orrs.w	r2, r8, r9
 80082e0:	f8cd b008 	str.w	fp, [sp, #8]
 80082e4:	f43f ab37 	beq.w	8007956 <_vfprintf_r+0xa5e>
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	f43f abe2 	beq.w	8007ab2 <_vfprintf_r+0xbba>
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 80082f4:	f43f ac2e 	beq.w	8007b54 <_vfprintf_r+0xc5c>
 80082f8:	f008 0307 	and.w	r3, r8, #7
 80082fc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8008300:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 8008304:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8008308:	3330      	adds	r3, #48	; 0x30
 800830a:	ea58 0109 	orrs.w	r1, r8, r9
 800830e:	4652      	mov	r2, sl
 8008310:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8008314:	d1f0      	bne.n	80082f8 <_vfprintf_r+0x1400>
 8008316:	9902      	ldr	r1, [sp, #8]
 8008318:	07c8      	lsls	r0, r1, #31
 800831a:	d506      	bpl.n	800832a <_vfprintf_r+0x1432>
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d004      	beq.n	800832a <_vfprintf_r+0x1432>
 8008320:	2330      	movs	r3, #48	; 0x30
 8008322:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8008326:	f1a2 0a02 	sub.w	sl, r2, #2
 800832a:	ab4a      	add	r3, sp, #296	; 0x128
 800832c:	46b9      	mov	r9, r7
 800832e:	eba3 070a 	sub.w	r7, r3, sl
 8008332:	2300      	movs	r3, #0
 8008334:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	f7fe bfd9 	b.w	80072f0 <_vfprintf_r+0x3f8>
 800833e:	bf00      	nop

08008340 <__sbprintf>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	8989      	ldrh	r1, [r1, #12]
 8008346:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800834a:	f021 0102 	bic.w	r1, r1, #2
 800834e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008352:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008354:	911b      	str	r1, [sp, #108]	; 0x6c
 8008356:	89e1      	ldrh	r1, [r4, #14]
 8008358:	f8ad 1016 	strh.w	r1, [sp, #22]
 800835c:	69e1      	ldr	r1, [r4, #28]
 800835e:	9109      	str	r1, [sp, #36]	; 0x24
 8008360:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008362:	910b      	str	r1, [sp, #44]	; 0x2c
 8008364:	a91c      	add	r1, sp, #112	; 0x70
 8008366:	9102      	str	r1, [sp, #8]
 8008368:	9106      	str	r1, [sp, #24]
 800836a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800836e:	4606      	mov	r6, r0
 8008370:	9104      	str	r1, [sp, #16]
 8008372:	9107      	str	r1, [sp, #28]
 8008374:	a818      	add	r0, sp, #96	; 0x60
 8008376:	2100      	movs	r1, #0
 8008378:	e9cd 3200 	strd	r3, r2, [sp]
 800837c:	9108      	str	r1, [sp, #32]
 800837e:	f002 fc93 	bl	800aca8 <__retarget_lock_init_recursive>
 8008382:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008386:	a902      	add	r1, sp, #8
 8008388:	4630      	mov	r0, r6
 800838a:	f7fe fdb5 	bl	8006ef8 <_vfprintf_r>
 800838e:	1e05      	subs	r5, r0, #0
 8008390:	db07      	blt.n	80083a2 <__sbprintf+0x62>
 8008392:	a902      	add	r1, sp, #8
 8008394:	4630      	mov	r0, r6
 8008396:	f002 f8b3 	bl	800a500 <_fflush_r>
 800839a:	2800      	cmp	r0, #0
 800839c:	bf18      	it	ne
 800839e:	f04f 35ff 	movne.w	r5, #4294967295
 80083a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80083a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80083a8:	065b      	lsls	r3, r3, #25
 80083aa:	bf42      	ittt	mi
 80083ac:	89a3      	ldrhmi	r3, [r4, #12]
 80083ae:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80083b2:	81a3      	strhmi	r3, [r4, #12]
 80083b4:	f002 fc79 	bl	800acaa <__retarget_lock_close_recursive>
 80083b8:	4628      	mov	r0, r5
 80083ba:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80083be:	bd70      	pop	{r4, r5, r6, pc}

080083c0 <__svfscanf_r>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	ed2d 8b02 	vpush	{d8}
 80083c8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80083cc:	461e      	mov	r6, r3
 80083ce:	af02      	add	r7, sp, #8
 80083d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80083d2:	617a      	str	r2, [r7, #20]
 80083d4:	07da      	lsls	r2, r3, #31
 80083d6:	ee08 0a10 	vmov	s16, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	d405      	bmi.n	80083ea <__svfscanf_r+0x2a>
 80083de:	898b      	ldrh	r3, [r1, #12]
 80083e0:	059b      	lsls	r3, r3, #22
 80083e2:	d402      	bmi.n	80083ea <__svfscanf_r+0x2a>
 80083e4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80083e6:	f002 fc61 	bl	800acac <__retarget_lock_acquire_recursive>
 80083ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ee:	049d      	lsls	r5, r3, #18
 80083f0:	d406      	bmi.n	8008400 <__svfscanf_r+0x40>
 80083f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083fe:	6663      	str	r3, [r4, #100]	; 0x64
 8008400:	2300      	movs	r3, #0
 8008402:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008414:	617a      	str	r2, [r7, #20]
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80d6 	beq.w	80085ca <__svfscanf_r+0x20a>
 800841e:	4a91      	ldr	r2, [pc, #580]	; (8008664 <__svfscanf_r+0x2a4>)
 8008420:	f813 8002 	ldrb.w	r8, [r3, r2]
 8008424:	f018 0808 	ands.w	r8, r8, #8
 8008428:	d019      	beq.n	800845e <__svfscanf_r+0x9e>
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd0e      	ble.n	800844e <__svfscanf_r+0x8e>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	498c      	ldr	r1, [pc, #560]	; (8008664 <__svfscanf_r+0x2a4>)
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	5c8a      	ldrb	r2, [r1, r2]
 8008438:	0710      	lsls	r0, r2, #28
 800843a:	d5e8      	bpl.n	800840e <__svfscanf_r+0x4e>
 800843c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843e:	3201      	adds	r2, #1
 8008440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	3301      	adds	r3, #1
 8008446:	3a01      	subs	r2, #1
 8008448:	6062      	str	r2, [r4, #4]
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	e7ed      	b.n	800842a <__svfscanf_r+0x6a>
 800844e:	ee18 0a10 	vmov	r0, s16
 8008452:	4621      	mov	r1, r4
 8008454:	f003 fd6a 	bl	800bf2c <__srefill_r>
 8008458:	2800      	cmp	r0, #0
 800845a:	d0e9      	beq.n	8008430 <__svfscanf_r+0x70>
 800845c:	e7d7      	b.n	800840e <__svfscanf_r+0x4e>
 800845e:	2b25      	cmp	r3, #37	; 0x25
 8008460:	d165      	bne.n	800852e <__svfscanf_r+0x16e>
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8008468:	46c1      	mov	r9, r8
 800846a:	220a      	movs	r2, #10
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	781d      	ldrb	r5, [r3, #0]
 8008470:	3101      	adds	r1, #1
 8008472:	6179      	str	r1, [r7, #20]
 8008474:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8008478:	2955      	cmp	r1, #85	; 0x55
 800847a:	f200 80a6 	bhi.w	80085ca <__svfscanf_r+0x20a>
 800847e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008482:	0056      	.short	0x0056
 8008484:	00a400a4 	.word	0x00a400a4
 8008488:	00a400a4 	.word	0x00a400a4
 800848c:	00a4007d 	.word	0x00a4007d
 8008490:	00a400a4 	.word	0x00a400a4
 8008494:	00a400a4 	.word	0x00a400a4
 8008498:	00d100d1 	.word	0x00d100d1
 800849c:	00d100d1 	.word	0x00d100d1
 80084a0:	00d100d1 	.word	0x00d100d1
 80084a4:	00d100d1 	.word	0x00d100d1
 80084a8:	00d100d1 	.word	0x00d100d1
 80084ac:	00a400a4 	.word	0x00a400a4
 80084b0:	00a400a4 	.word	0x00a400a4
 80084b4:	00a400a4 	.word	0x00a400a4
 80084b8:	00f700a4 	.word	0x00f700a4
 80084bc:	011b00a4 	.word	0x011b00a4
 80084c0:	00f700db 	.word	0x00f700db
 80084c4:	00f700f7 	.word	0x00f700f7
 80084c8:	00a400a4 	.word	0x00a400a4
 80084cc:	00a400a4 	.word	0x00a400a4
 80084d0:	00a400a1 	.word	0x00a400a1
 80084d4:	00df00a4 	.word	0x00df00a4
 80084d8:	00a400a4 	.word	0x00a400a4
 80084dc:	010d00a4 	.word	0x010d00a4
 80084e0:	00a400a4 	.word	0x00a400a4
 80084e4:	00a400a4 	.word	0x00a400a4
 80084e8:	00a400eb 	.word	0x00a400eb
 80084ec:	011100a4 	.word	0x011100a4
 80084f0:	00a400a4 	.word	0x00a400a4
 80084f4:	00a400a4 	.word	0x00a400a4
 80084f8:	00f700a4 	.word	0x00f700a4
 80084fc:	011d00a4 	.word	0x011d00a4
 8008500:	00f700dd 	.word	0x00f700dd
 8008504:	00f700f7 	.word	0x00f700f7
 8008508:	01450094 	.word	0x01450094
 800850c:	00a400a1 	.word	0x00a400a1
 8008510:	00c40086 	.word	0x00c40086
 8008514:	00e10124 	.word	0x00e10124
 8008518:	00a40121 	.word	0x00a40121
 800851c:	010f00a4 	.word	0x010f00a4
 8008520:	00e700c0 	.word	0x00e700c0
 8008524:	00a400a4 	.word	0x00a400a4
 8008528:	00a400eb 	.word	0x00a400eb
 800852c:	00c0      	.short	0x00c0
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	dd0f      	ble.n	8008554 <__svfscanf_r+0x194>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	7819      	ldrb	r1, [r3, #0]
 800853a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800853e:	4291      	cmp	r1, r2
 8008540:	d143      	bne.n	80085ca <__svfscanf_r+0x20a>
 8008542:	6862      	ldr	r2, [r4, #4]
 8008544:	3301      	adds	r3, #1
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	3a01      	subs	r2, #1
 800854c:	6062      	str	r2, [r4, #4]
 800854e:	3301      	adds	r3, #1
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008552:	e75c      	b.n	800840e <__svfscanf_r+0x4e>
 8008554:	ee18 0a10 	vmov	r0, s16
 8008558:	4621      	mov	r1, r4
 800855a:	f003 fce7 	bl	800bf2c <__srefill_r>
 800855e:	2800      	cmp	r0, #0
 8008560:	d0e8      	beq.n	8008534 <__svfscanf_r+0x174>
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 810e 	beq.w	8008786 <__svfscanf_r+0x3c6>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	bf18      	it	ne
 8008574:	f04f 33ff 	movne.w	r3, #4294967295
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
 800857a:	e026      	b.n	80085ca <__svfscanf_r+0x20a>
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	ea53 0309 	orrs.w	r3, r3, r9
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
 8008584:	d121      	bne.n	80085ca <__svfscanf_r+0x20a>
 8008586:	f04f 0910 	mov.w	r9, #16
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	e76e      	b.n	800846c <__svfscanf_r+0xac>
 800858e:	f019 0f0f 	tst.w	r9, #15
 8008592:	d11a      	bne.n	80085ca <__svfscanf_r+0x20a>
 8008594:	7859      	ldrb	r1, [r3, #1]
 8008596:	296c      	cmp	r1, #108	; 0x6c
 8008598:	d104      	bne.n	80085a4 <__svfscanf_r+0x1e4>
 800859a:	3302      	adds	r3, #2
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	f049 0902 	orr.w	r9, r9, #2
 80085a2:	e7f2      	b.n	800858a <__svfscanf_r+0x1ca>
 80085a4:	f049 0901 	orr.w	r9, r9, #1
 80085a8:	e7ef      	b.n	800858a <__svfscanf_r+0x1ca>
 80085aa:	f019 0f0f 	tst.w	r9, #15
 80085ae:	d10c      	bne.n	80085ca <__svfscanf_r+0x20a>
 80085b0:	7859      	ldrb	r1, [r3, #1]
 80085b2:	2968      	cmp	r1, #104	; 0x68
 80085b4:	bf03      	ittte	eq
 80085b6:	3302      	addeq	r3, #2
 80085b8:	617b      	streq	r3, [r7, #20]
 80085ba:	f049 0908 	orreq.w	r9, r9, #8
 80085be:	f049 0904 	orrne.w	r9, r9, #4
 80085c2:	e7e2      	b.n	800858a <__svfscanf_r+0x1ca>
 80085c4:	f019 0f0f 	tst.w	r9, #15
 80085c8:	d0e9      	beq.n	800859e <__svfscanf_r+0x1de>
 80085ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085cc:	07da      	lsls	r2, r3, #31
 80085ce:	d405      	bmi.n	80085dc <__svfscanf_r+0x21c>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	059b      	lsls	r3, r3, #22
 80085d4:	d402      	bmi.n	80085dc <__svfscanf_r+0x21c>
 80085d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085d8:	f002 fb69 	bl	800acae <__retarget_lock_release_recursive>
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	b143      	cbz	r3, 80085f2 <__svfscanf_r+0x232>
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	3301      	adds	r3, #1
 80085e4:	f001 8092 	beq.w	800970c <__svfscanf_r+0x134c>
 80085e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f041 8090 	bne.w	8009712 <__svfscanf_r+0x1352>
 80085f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f4:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 80085f8:	46bd      	mov	sp, r7
 80085fa:	ecbd 8b02 	vpop	{d8}
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	f019 0f0f 	tst.w	r9, #15
 8008606:	d0c0      	beq.n	800858a <__svfscanf_r+0x1ca>
 8008608:	e7df      	b.n	80085ca <__svfscanf_r+0x20a>
 800860a:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 800860e:	d1dc      	bne.n	80085ca <__svfscanf_r+0x20a>
 8008610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008612:	b921      	cbnz	r1, 800861e <__svfscanf_r+0x25e>
 8008614:	b082      	sub	sp, #8
 8008616:	a902      	add	r1, sp, #8
 8008618:	e9c1 3300 	strd	r3, r3, [r1]
 800861c:	6379      	str	r1, [r7, #52]	; 0x34
 800861e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8008622:	e7b2      	b.n	800858a <__svfscanf_r+0x1ca>
 8008624:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8008628:	d1cf      	bne.n	80085ca <__svfscanf_r+0x20a>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	fb02 5503 	mla	r5, r2, r3, r5
 8008630:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008634:	633b      	str	r3, [r7, #48]	; 0x30
 8008636:	e7a8      	b.n	800858a <__svfscanf_r+0x1ca>
 8008638:	f049 0901 	orr.w	r9, r9, #1
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <__svfscanf_r+0x2a8>)
 800863e:	e008      	b.n	8008652 <__svfscanf_r+0x292>
 8008640:	f049 0901 	orr.w	r9, r9, #1
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <__svfscanf_r+0x2ac>)
 8008646:	61bb      	str	r3, [r7, #24]
 8008648:	2308      	movs	r3, #8
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	2503      	movs	r5, #3
 800864e:	e010      	b.n	8008672 <__svfscanf_r+0x2b2>
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <__svfscanf_r+0x2ac>)
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	230a      	movs	r3, #10
 8008656:	e7f8      	b.n	800864a <__svfscanf_r+0x28a>
 8008658:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <__svfscanf_r+0x2ac>)
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	2310      	movs	r3, #16
 8008662:	e7f2      	b.n	800864a <__svfscanf_r+0x28a>
 8008664:	080112d5 	.word	0x080112d5
 8008668:	08006e59 	.word	0x08006e59
 800866c:	0800cfed 	.word	0x0800cfed
 8008670:	2504      	movs	r5, #4
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd4d      	ble.n	8008714 <__svfscanf_r+0x354>
 8008678:	f019 0f40 	tst.w	r9, #64	; 0x40
 800867c:	d105      	bne.n	800868a <__svfscanf_r+0x2ca>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	49a3      	ldr	r1, [pc, #652]	; (8008910 <__svfscanf_r+0x550>)
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	5c52      	ldrb	r2, [r2, r1]
 8008686:	0711      	lsls	r1, r2, #28
 8008688:	d44c      	bmi.n	8008724 <__svfscanf_r+0x364>
 800868a:	3d01      	subs	r5, #1
 800868c:	2d03      	cmp	r5, #3
 800868e:	d85c      	bhi.n	800874a <__svfscanf_r+0x38a>
 8008690:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008694:	037801ba 	.word	0x037801ba
 8008698:	06170524 	.word	0x06170524
 800869c:	f049 0901 	orr.w	r9, r9, #1
 80086a0:	2502      	movs	r5, #2
 80086a2:	e7e6      	b.n	8008672 <__svfscanf_r+0x2b2>
 80086a4:	6979      	ldr	r1, [r7, #20]
 80086a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80086aa:	f003 fd09 	bl	800c0c0 <__sccl>
 80086ae:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80086b2:	6178      	str	r0, [r7, #20]
 80086b4:	2501      	movs	r5, #1
 80086b6:	e7dc      	b.n	8008672 <__svfscanf_r+0x2b2>
 80086b8:	f049 0901 	orr.w	r9, r9, #1
 80086bc:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80086c0:	2500      	movs	r5, #0
 80086c2:	e7d6      	b.n	8008672 <__svfscanf_r+0x2b2>
 80086c4:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80086c8:	e7c8      	b.n	800865c <__svfscanf_r+0x29c>
 80086ca:	f019 0f10 	tst.w	r9, #16
 80086ce:	f47f ae9e 	bne.w	800840e <__svfscanf_r+0x4e>
 80086d2:	f019 0f08 	tst.w	r9, #8
 80086d6:	f856 3b04 	ldr.w	r3, [r6], #4
 80086da:	d002      	beq.n	80086e2 <__svfscanf_r+0x322>
 80086dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	e695      	b.n	800840e <__svfscanf_r+0x4e>
 80086e2:	f019 0f04 	tst.w	r9, #4
 80086e6:	d002      	beq.n	80086ee <__svfscanf_r+0x32e>
 80086e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e68f      	b.n	800840e <__svfscanf_r+0x4e>
 80086ee:	f019 0f01 	tst.w	r9, #1
 80086f2:	d002      	beq.n	80086fa <__svfscanf_r+0x33a>
 80086f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	e689      	b.n	800840e <__svfscanf_r+0x4e>
 80086fa:	f019 0f02 	tst.w	r9, #2
 80086fe:	d0f9      	beq.n	80086f4 <__svfscanf_r+0x334>
 8008700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008704:	17d2      	asrs	r2, r2, #31
 8008706:	e9c3 1200 	strd	r1, r2, [r3]
 800870a:	e680      	b.n	800840e <__svfscanf_r+0x4e>
 800870c:	4b81      	ldr	r3, [pc, #516]	; (8008914 <__svfscanf_r+0x554>)
 800870e:	61bb      	str	r3, [r7, #24]
 8008710:	2300      	movs	r3, #0
 8008712:	e79a      	b.n	800864a <__svfscanf_r+0x28a>
 8008714:	ee18 0a10 	vmov	r0, s16
 8008718:	4621      	mov	r1, r4
 800871a:	f003 fc07 	bl	800bf2c <__srefill_r>
 800871e:	2800      	cmp	r0, #0
 8008720:	d0aa      	beq.n	8008678 <__svfscanf_r+0x2b8>
 8008722:	e71e      	b.n	8008562 <__svfscanf_r+0x1a2>
 8008724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008726:	3201      	adds	r2, #1
 8008728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	3a01      	subs	r2, #1
 800872e:	2a00      	cmp	r2, #0
 8008730:	6062      	str	r2, [r4, #4]
 8008732:	dd02      	ble.n	800873a <__svfscanf_r+0x37a>
 8008734:	3301      	adds	r3, #1
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	e7a1      	b.n	800867e <__svfscanf_r+0x2be>
 800873a:	ee18 0a10 	vmov	r0, s16
 800873e:	4621      	mov	r1, r4
 8008740:	f003 fbf4 	bl	800bf2c <__srefill_r>
 8008744:	2800      	cmp	r0, #0
 8008746:	d09a      	beq.n	800867e <__svfscanf_r+0x2be>
 8008748:	e70b      	b.n	8008562 <__svfscanf_r+0x1a2>
 800874a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800874c:	2d01      	cmp	r5, #1
 800874e:	bf38      	it	cc
 8008750:	2501      	movcc	r5, #1
 8008752:	f019 0801 	ands.w	r8, r9, #1
 8008756:	f009 0b10 	and.w	fp, r9, #16
 800875a:	f000 80dd 	beq.w	8008918 <__svfscanf_r+0x558>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	f040 809a 	bne.w	800889a <__svfscanf_r+0x4da>
 8008766:	4633      	mov	r3, r6
 8008768:	f019 0f80 	tst.w	r9, #128	; 0x80
 800876c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008770:	633b      	str	r3, [r7, #48]	; 0x30
 8008772:	f000 8099 	beq.w	80088a8 <__svfscanf_r+0x4e8>
 8008776:	2e00      	cmp	r6, #0
 8008778:	f43f af27 	beq.w	80085ca <__svfscanf_r+0x20a>
 800877c:	2080      	movs	r0, #128	; 0x80
 800877e:	f002 fb03 	bl	800ad88 <malloc>
 8008782:	4680      	mov	r8, r0
 8008784:	b910      	cbnz	r0, 800878c <__svfscanf_r+0x3cc>
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	e6f5      	b.n	8008578 <__svfscanf_r+0x1b8>
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	6030      	str	r0, [r6, #0]
 8008790:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008794:	889b      	ldrh	r3, [r3, #4]
 8008796:	4599      	cmp	r9, r3
 8008798:	d312      	bcc.n	80087c0 <__svfscanf_r+0x400>
 800879a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800879e:	4293      	cmp	r3, r2
 80087a0:	d8f1      	bhi.n	8008786 <__svfscanf_r+0x3c6>
 80087a2:	3308      	adds	r3, #8
 80087a4:	fa1f fa83 	uxth.w	sl, r3
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	f003 fa06 	bl	800bbc0 <realloc>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d0e6      	beq.n	8008786 <__svfscanf_r+0x3c6>
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	6018      	str	r0, [r3, #0]
 80087bc:	f8a3 a004 	strh.w	sl, [r3, #4]
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f109 0201 	add.w	r2, r9, #1
 80087ca:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80087ce:	46b2      	mov	sl, r6
 80087d0:	80ca      	strh	r2, [r1, #6]
 80087d2:	4646      	mov	r6, r8
 80087d4:	f04f 0920 	mov.w	r9, #32
 80087d8:	2200      	movs	r2, #0
 80087da:	627a      	str	r2, [r7, #36]	; 0x24
 80087dc:	f002 fa5a 	bl	800ac94 <__locale_mb_cur_max>
 80087e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e2:	4290      	cmp	r0, r2
 80087e4:	f43f aebd 	beq.w	8008562 <__svfscanf_r+0x1a2>
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80087ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80087f2:	f80c 0002 	strb.w	r0, [ip, r2]
 80087f6:	1c53      	adds	r3, r2, #1
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	3a01      	subs	r2, #1
 80087fc:	e9c4 1200 	strd	r1, r2, [r4]
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	2a03      	cmp	r2, #3
 8008804:	d102      	bne.n	800880c <__svfscanf_r+0x44c>
 8008806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008808:	2a04      	cmp	r2, #4
 800880a:	d007      	beq.n	800881c <__svfscanf_r+0x45c>
 800880c:	2208      	movs	r2, #8
 800880e:	2100      	movs	r1, #0
 8008810:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
 8008816:	f7fe f96d 	bl	8006af4 <memset>
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008822:	9200      	str	r2, [sp, #0]
 8008824:	ee18 0a10 	vmov	r0, s16
 8008828:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800882c:	4631      	mov	r1, r6
 800882e:	f002 fcf7 	bl	800b220 <_mbrtowc_r>
 8008832:	1c42      	adds	r2, r0, #1
 8008834:	6238      	str	r0, [r7, #32]
 8008836:	f43f ae94 	beq.w	8008562 <__svfscanf_r+0x1a2>
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	2800      	cmp	r0, #0
 800883e:	d137      	bne.n	80088b0 <__svfscanf_r+0x4f0>
 8008840:	f1bb 0f00 	cmp.w	fp, #0
 8008844:	d101      	bne.n	800884a <__svfscanf_r+0x48a>
 8008846:	f8c6 b000 	str.w	fp, [r6]
 800884a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884c:	441a      	add	r2, r3
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008852:	2b03      	cmp	r3, #3
 8008854:	d102      	bne.n	800885c <__svfscanf_r+0x49c>
 8008856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008858:	2b04      	cmp	r3, #4
 800885a:	d000      	beq.n	800885e <__svfscanf_r+0x49e>
 800885c:	3d01      	subs	r5, #1
 800885e:	f1bb 0f00 	cmp.w	fp, #0
 8008862:	d118      	bne.n	8008896 <__svfscanf_r+0x4d6>
 8008864:	f1ba 0f00 	cmp.w	sl, #0
 8008868:	d014      	beq.n	8008894 <__svfscanf_r+0x4d4>
 800886a:	eba6 0308 	sub.w	r3, r6, r8
 800886e:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008872:	d80f      	bhi.n	8008894 <__svfscanf_r+0x4d4>
 8008874:	4640      	mov	r0, r8
 8008876:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
 800887c:	f003 f9a0 	bl	800bbc0 <realloc>
 8008880:	4680      	mov	r8, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	f43f af7f 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	f8ca 0000 	str.w	r0, [sl]
 800888e:	18c6      	adds	r6, r0, r3
 8008890:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008894:	3604      	adds	r6, #4
 8008896:	2200      	movs	r2, #0
 8008898:	e00e      	b.n	80088b8 <__svfscanf_r+0x4f8>
 800889a:	f04f 0900 	mov.w	r9, #0
 800889e:	633e      	str	r6, [r7, #48]	; 0x30
 80088a0:	46c8      	mov	r8, r9
 80088a2:	46ca      	mov	sl, r9
 80088a4:	464e      	mov	r6, r9
 80088a6:	e797      	b.n	80087d8 <__svfscanf_r+0x418>
 80088a8:	46d9      	mov	r9, fp
 80088aa:	46d8      	mov	r8, fp
 80088ac:	46da      	mov	sl, fp
 80088ae:	e793      	b.n	80087d8 <__svfscanf_r+0x418>
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	3202      	adds	r2, #2
 80088b4:	d1c9      	bne.n	800884a <__svfscanf_r+0x48a>
 80088b6:	461a      	mov	r2, r3
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc15      	bgt.n	80088ea <__svfscanf_r+0x52a>
 80088be:	ee18 0a10 	vmov	r0, s16
 80088c2:	4621      	mov	r1, r4
 80088c4:	627a      	str	r2, [r7, #36]	; 0x24
 80088c6:	f003 fb31 	bl	800bf2c <__srefill_r>
 80088ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088cc:	b168      	cbz	r0, 80088ea <__svfscanf_r+0x52a>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	f47f ae47 	bne.w	8008562 <__svfscanf_r+0x1a2>
 80088d4:	f1ba 0f00 	cmp.w	sl, #0
 80088d8:	d10b      	bne.n	80088f2 <__svfscanf_r+0x532>
 80088da:	f1bb 0f00 	cmp.w	fp, #0
 80088de:	d102      	bne.n	80088e6 <__svfscanf_r+0x526>
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	3301      	adds	r3, #1
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80088e8:	e591      	b.n	800840e <__svfscanf_r+0x4e>
 80088ea:	2d00      	cmp	r5, #0
 80088ec:	f47f af75 	bne.w	80087da <__svfscanf_r+0x41a>
 80088f0:	e7f0      	b.n	80088d4 <__svfscanf_r+0x514>
 80088f2:	eba6 0108 	sub.w	r1, r6, r8
 80088f6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80088fa:	d9ee      	bls.n	80088da <__svfscanf_r+0x51a>
 80088fc:	f8da 0000 	ldr.w	r0, [sl]
 8008900:	f003 f95e 	bl	800bbc0 <realloc>
 8008904:	2800      	cmp	r0, #0
 8008906:	d0e8      	beq.n	80088da <__svfscanf_r+0x51a>
 8008908:	f8ca 0000 	str.w	r0, [sl]
 800890c:	e7e5      	b.n	80088da <__svfscanf_r+0x51a>
 800890e:	bf00      	nop
 8008910:	080112d5 	.word	0x080112d5
 8008914:	08006e59 	.word	0x08006e59
 8008918:	f1bb 0f00 	cmp.w	fp, #0
 800891c:	d01b      	beq.n	8008956 <__svfscanf_r+0x596>
 800891e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008922:	429d      	cmp	r5, r3
 8008924:	dd11      	ble.n	800894a <__svfscanf_r+0x58a>
 8008926:	4498      	add	r8, r3
 8008928:	1aed      	subs	r5, r5, r3
 800892a:	4413      	add	r3, r2
 800892c:	ee18 0a10 	vmov	r0, s16
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	4621      	mov	r1, r4
 8008934:	f003 fafa 	bl	800bf2c <__srefill_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	d0f0      	beq.n	800891e <__svfscanf_r+0x55e>
 800893c:	f1b8 0f00 	cmp.w	r8, #0
 8008940:	f43f ae0f 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	4443      	add	r3, r8
 8008948:	e602      	b.n	8008550 <__svfscanf_r+0x190>
 800894a:	1b5b      	subs	r3, r3, r5
 800894c:	442a      	add	r2, r5
 800894e:	44a8      	add	r8, r5
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	e7f6      	b.n	8008944 <__svfscanf_r+0x584>
 8008956:	46b0      	mov	r8, r6
 8008958:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800895c:	f858 6b04 	ldr.w	r6, [r8], #4
 8008960:	d031      	beq.n	80089c6 <__svfscanf_r+0x606>
 8008962:	2e00      	cmp	r6, #0
 8008964:	f43f ae31 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008968:	4628      	mov	r0, r5
 800896a:	f002 fa0d 	bl	800ad88 <malloc>
 800896e:	4682      	mov	sl, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	f43f af08 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	6030      	str	r0, [r6, #0]
 800897a:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800897e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008982:	45cb      	cmp	fp, r9
 8008984:	d315      	bcc.n	80089b2 <__svfscanf_r+0x5f2>
 8008986:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800898a:	4599      	cmp	r9, r3
 800898c:	f63f aefb 	bhi.w	8008786 <__svfscanf_r+0x3c6>
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	f109 0908 	add.w	r9, r9, #8
 8008996:	fa1f f989 	uxth.w	r9, r9
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80089a0:	f003 f90e 	bl	800bbc0 <realloc>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f43f aeee 	beq.w	8008786 <__svfscanf_r+0x3c6>
 80089aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ac:	6018      	str	r0, [r3, #0]
 80089ae:	f8a3 9004 	strh.w	r9, [r3, #4]
 80089b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f10b 0201 	add.w	r2, fp, #1
 80089bc:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80089c0:	46b1      	mov	r9, r6
 80089c2:	80ca      	strh	r2, [r1, #6]
 80089c4:	4656      	mov	r6, sl
 80089c6:	4631      	mov	r1, r6
 80089c8:	ee18 0a10 	vmov	r0, s16
 80089cc:	9400      	str	r4, [sp, #0]
 80089ce:	462b      	mov	r3, r5
 80089d0:	2201      	movs	r2, #1
 80089d2:	f001 fe4f 	bl	800a674 <_fread_r>
 80089d6:	4606      	mov	r6, r0
 80089d8:	2800      	cmp	r0, #0
 80089da:	f43f adc2 	beq.w	8008562 <__svfscanf_r+0x1a2>
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	d009      	beq.n	80089f8 <__svfscanf_r+0x638>
 80089e4:	4285      	cmp	r5, r0
 80089e6:	d907      	bls.n	80089f8 <__svfscanf_r+0x638>
 80089e8:	4601      	mov	r1, r0
 80089ea:	f8d9 0000 	ldr.w	r0, [r9]
 80089ee:	f003 f8e7 	bl	800bbc0 <realloc>
 80089f2:	b108      	cbz	r0, 80089f8 <__svfscanf_r+0x638>
 80089f4:	f8c9 0000 	str.w	r0, [r9]
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	4433      	add	r3, r6
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	3301      	adds	r3, #1
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a04:	4646      	mov	r6, r8
 8008a06:	e502      	b.n	800840e <__svfscanf_r+0x4e>
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	bf08      	it	eq
 8008a0e:	f04f 33ff 	moveq.w	r3, #4294967295
 8008a12:	f019 0501 	ands.w	r5, r9, #1
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30
 8008a18:	f009 0b10 	and.w	fp, r9, #16
 8008a1c:	f000 8107 	beq.w	8008c2e <__svfscanf_r+0x86e>
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	f040 80a7 	bne.w	8008b76 <__svfscanf_r+0x7b6>
 8008a28:	4633      	mov	r3, r6
 8008a2a:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008a2e:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a32:	613b      	str	r3, [r7, #16]
 8008a34:	f000 80a8 	beq.w	8008b88 <__svfscanf_r+0x7c8>
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	f43f adc6 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008a3e:	2080      	movs	r0, #128	; 0x80
 8008a40:	f002 f9a2 	bl	800ad88 <malloc>
 8008a44:	4680      	mov	r8, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae9d 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	6028      	str	r0, [r5, #0]
 8008a50:	88de      	ldrh	r6, [r3, #6]
 8008a52:	889b      	ldrh	r3, [r3, #4]
 8008a54:	429e      	cmp	r6, r3
 8008a56:	d314      	bcc.n	8008a82 <__svfscanf_r+0x6c2>
 8008a58:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	f63f ae92 	bhi.w	8008786 <__svfscanf_r+0x3c6>
 8008a62:	3308      	adds	r3, #8
 8008a64:	fa1f f983 	uxth.w	r9, r3
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	f003 f8a6 	bl	800bbc0 <realloc>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f43f ae86 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	6018      	str	r0, [r3, #0]
 8008a7e:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	627d      	str	r5, [r7, #36]	; 0x24
 8008a8a:	1c72      	adds	r2, r6, #1
 8008a8c:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8008a90:	80ca      	strh	r2, [r1, #6]
 8008a92:	4645      	mov	r5, r8
 8008a94:	f04f 0a20 	mov.w	sl, #32
 8008a98:	2600      	movs	r6, #0
 8008a9a:	f002 f8fb 	bl	800ac94 <__locale_mb_cur_max>
 8008a9e:	42b0      	cmp	r0, r6
 8008aa0:	f43f ad5f 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aae:	558a      	strb	r2, [r1, r6]
 8008ab0:	6862      	ldr	r2, [r4, #4]
 8008ab2:	3a01      	subs	r2, #1
 8008ab4:	e9c4 3200 	strd	r3, r2, [r4]
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	f106 0901 	add.w	r9, r6, #1
 8008ac0:	d102      	bne.n	8008ac8 <__svfscanf_r+0x708>
 8008ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d005      	beq.n	8008ad4 <__svfscanf_r+0x714>
 8008ac8:	2208      	movs	r2, #8
 8008aca:	2100      	movs	r1, #0
 8008acc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8008ad0:	f7fe f810 	bl	8006af4 <memset>
 8008ad4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	ee18 0a10 	vmov	r0, s16
 8008ade:	464b      	mov	r3, r9
 8008ae0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f002 fb9b 	bl	800b220 <_mbrtowc_r>
 8008aea:	4603      	mov	r3, r0
 8008aec:	6238      	str	r0, [r7, #32]
 8008aee:	1c58      	adds	r0, r3, #1
 8008af0:	f43f ad37 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d14c      	bne.n	8008b92 <__svfscanf_r+0x7d2>
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	682e      	ldr	r6, [r5, #0]
 8008afc:	1c71      	adds	r1, r6, #1
 8008afe:	d059      	beq.n	8008bb4 <__svfscanf_r+0x7f4>
 8008b00:	2208      	movs	r2, #8
 8008b02:	2100      	movs	r1, #0
 8008b04:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008b08:	f7fd fff4 	bl	8006af4 <memset>
 8008b0c:	4b9c      	ldr	r3, [pc, #624]	; (8008d80 <__svfscanf_r+0x9c0>)
 8008b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	4632      	mov	r2, r6
 8008b16:	ee18 0a10 	vmov	r0, s16
 8008b1a:	68fe      	ldr	r6, [r7, #12]
 8008b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008b20:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b24:	47b0      	blx	r6
 8008b26:	2801      	cmp	r0, #1
 8008b28:	d146      	bne.n	8008bb8 <__svfscanf_r+0x7f8>
 8008b2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b32:	5c9b      	ldrb	r3, [r3, r2]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d14b      	bne.n	8008bd0 <__svfscanf_r+0x810>
 8008b38:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8008b3c:	f1b9 0f00 	cmp.w	r9, #0
 8008b40:	d13c      	bne.n	8008bbc <__svfscanf_r+0x7fc>
 8008b42:	f1bb 0f00 	cmp.w	fp, #0
 8008b46:	d114      	bne.n	8008b72 <__svfscanf_r+0x7b2>
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	f8c5 b000 	str.w	fp, [r5]
 8008b4e:	b16b      	cbz	r3, 8008b6c <__svfscanf_r+0x7ac>
 8008b50:	eba5 0108 	sub.w	r1, r5, r8
 8008b54:	108b      	asrs	r3, r1, #2
 8008b56:	3301      	adds	r3, #1
 8008b58:	459a      	cmp	sl, r3
 8008b5a:	d907      	bls.n	8008b6c <__svfscanf_r+0x7ac>
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	3104      	adds	r1, #4
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f003 f82d 	bl	800bbc0 <realloc>
 8008b66:	b108      	cbz	r0, 8008b6c <__svfscanf_r+0x7ac>
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	6018      	str	r0, [r3, #0]
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	3301      	adds	r3, #1
 8008b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b72:	693e      	ldr	r6, [r7, #16]
 8008b74:	e44b      	b.n	800840e <__svfscanf_r+0x4e>
 8008b76:	f04f 0a00 	mov.w	sl, #0
 8008b7a:	613e      	str	r6, [r7, #16]
 8008b7c:	46d0      	mov	r8, sl
 8008b7e:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 8008b82:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8008b86:	e787      	b.n	8008a98 <__svfscanf_r+0x6d8>
 8008b88:	46da      	mov	sl, fp
 8008b8a:	46d8      	mov	r8, fp
 8008b8c:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008b90:	e782      	b.n	8008a98 <__svfscanf_r+0x6d8>
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	3302      	adds	r3, #2
 8008b96:	d1b0      	bne.n	8008afa <__svfscanf_r+0x73a>
 8008b98:	6863      	ldr	r3, [r4, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dc42      	bgt.n	8008c24 <__svfscanf_r+0x864>
 8008b9e:	ee18 0a10 	vmov	r0, s16
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f003 f9c2 	bl	800bf2c <__srefill_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d03b      	beq.n	8008c24 <__svfscanf_r+0x864>
 8008bac:	f1b9 0f00 	cmp.w	r9, #0
 8008bb0:	d0c7      	beq.n	8008b42 <__svfscanf_r+0x782>
 8008bb2:	e4d6      	b.n	8008562 <__svfscanf_r+0x1a2>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	e7ba      	b.n	8008b2e <__svfscanf_r+0x76e>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	e7b8      	b.n	8008b2e <__svfscanf_r+0x76e>
 8008bbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bc0:	ee18 0a10 	vmov	r0, s16
 8008bc4:	f816 1009 	ldrb.w	r1, [r6, r9]
 8008bc8:	4622      	mov	r2, r4
 8008bca:	f005 fcc2 	bl	800e552 <_ungetc_r>
 8008bce:	e7b5      	b.n	8008b3c <__svfscanf_r+0x77c>
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	444b      	add	r3, r9
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d102      	bne.n	8008be2 <__svfscanf_r+0x822>
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d002      	beq.n	8008be8 <__svfscanf_r+0x828>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	3b01      	subs	r3, #1
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30
 8008be8:	f1bb 0f00 	cmp.w	fp, #0
 8008bec:	d117      	bne.n	8008c1e <__svfscanf_r+0x85e>
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	3504      	adds	r5, #4
 8008bf2:	b1a3      	cbz	r3, 8008c1e <__svfscanf_r+0x85e>
 8008bf4:	eba5 0608 	sub.w	r6, r5, r8
 8008bf8:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 8008bfc:	d80d      	bhi.n	8008c1a <__svfscanf_r+0x85a>
 8008bfe:	4640      	mov	r0, r8
 8008c00:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8008c04:	f002 ffdc 	bl	800bbc0 <realloc>
 8008c08:	4680      	mov	r8, r0
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f adbb 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	1985      	adds	r5, r0, r6
 8008c14:	6018      	str	r0, [r3, #0]
 8008c16:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8008c1a:	46d9      	mov	r9, fp
 8008c1c:	e7bc      	b.n	8008b98 <__svfscanf_r+0x7d8>
 8008c1e:	f04f 0900 	mov.w	r9, #0
 8008c22:	e7b9      	b.n	8008b98 <__svfscanf_r+0x7d8>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d08b      	beq.n	8008b42 <__svfscanf_r+0x782>
 8008c2a:	464e      	mov	r6, r9
 8008c2c:	e735      	b.n	8008a9a <__svfscanf_r+0x6da>
 8008c2e:	f1bb 0f00 	cmp.w	fp, #0
 8008c32:	d01d      	beq.n	8008c70 <__svfscanf_r+0x8b0>
 8008c34:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008c40:	b90a      	cbnz	r2, 8008c46 <__svfscanf_r+0x886>
 8008c42:	b995      	cbnz	r5, 8008c6a <__svfscanf_r+0x8aa>
 8008c44:	e4c1      	b.n	80085ca <__svfscanf_r+0x20a>
 8008c46:	3301      	adds	r3, #1
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	3501      	adds	r5, #1
 8008c50:	3a01      	subs	r2, #1
 8008c52:	429d      	cmp	r5, r3
 8008c54:	6062      	str	r2, [r4, #4]
 8008c56:	d008      	beq.n	8008c6a <__svfscanf_r+0x8aa>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dced      	bgt.n	8008c38 <__svfscanf_r+0x878>
 8008c5c:	ee18 0a10 	vmov	r0, s16
 8008c60:	4621      	mov	r1, r4
 8008c62:	f003 f963 	bl	800bf2c <__srefill_r>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d0e6      	beq.n	8008c38 <__svfscanf_r+0x878>
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	442b      	add	r3, r5
 8008c6e:	e46f      	b.n	8008550 <__svfscanf_r+0x190>
 8008c70:	46b3      	mov	fp, r6
 8008c72:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008c76:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008c7a:	d07f      	beq.n	8008d7c <__svfscanf_r+0x9bc>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	f43f aca4 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008c82:	2020      	movs	r0, #32
 8008c84:	f002 f880 	bl	800ad88 <malloc>
 8008c88:	4680      	mov	r8, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f ad7b 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	6030      	str	r0, [r6, #0]
 8008c94:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008c98:	889d      	ldrh	r5, [r3, #4]
 8008c9a:	45a9      	cmp	r9, r5
 8008c9c:	d311      	bcc.n	8008cc2 <__svfscanf_r+0x902>
 8008c9e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008ca2:	429d      	cmp	r5, r3
 8008ca4:	f63f ad6f 	bhi.w	8008786 <__svfscanf_r+0x3c6>
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	3508      	adds	r5, #8
 8008cac:	b2ad      	uxth	r5, r5
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	00a9      	lsls	r1, r5, #2
 8008cb2:	f002 ff85 	bl	800bbc0 <realloc>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f ad65 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbe:	6018      	str	r0, [r3, #0]
 8008cc0:	809d      	strh	r5, [r3, #4]
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f109 0201 	add.w	r2, r9, #1
 8008ccc:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008cd0:	46b2      	mov	sl, r6
 8008cd2:	80ca      	strh	r2, [r1, #6]
 8008cd4:	4646      	mov	r6, r8
 8008cd6:	f04f 0920 	mov.w	r9, #32
 8008cda:	4635      	mov	r5, r6
 8008cdc:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008ce8:	b36a      	cbz	r2, 8008d46 <__svfscanf_r+0x986>
 8008cea:	6862      	ldr	r2, [r4, #4]
 8008cec:	3a01      	subs	r2, #1
 8008cee:	6062      	str	r2, [r4, #4]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	6022      	str	r2, [r4, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f806 3b01 	strb.w	r3, [r6], #1
 8008cfa:	f1ba 0f00 	cmp.w	sl, #0
 8008cfe:	d011      	beq.n	8008d24 <__svfscanf_r+0x964>
 8008d00:	1b73      	subs	r3, r6, r5
 8008d02:	454b      	cmp	r3, r9
 8008d04:	d30e      	bcc.n	8008d24 <__svfscanf_r+0x964>
 8008d06:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d10:	f002 ff56 	bl	800bbc0 <realloc>
 8008d14:	4605      	mov	r5, r0
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f43f ad35 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	f8ca 0000 	str.w	r0, [sl]
 8008d22:	18c6      	adds	r6, r0, r3
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	3b01      	subs	r3, #1
 8008d28:	633b      	str	r3, [r7, #48]	; 0x30
 8008d2a:	d00c      	beq.n	8008d46 <__svfscanf_r+0x986>
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dcd6      	bgt.n	8008ce0 <__svfscanf_r+0x920>
 8008d32:	ee18 0a10 	vmov	r0, s16
 8008d36:	4621      	mov	r1, r4
 8008d38:	f003 f8f8 	bl	800bf2c <__srefill_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0cf      	beq.n	8008ce0 <__svfscanf_r+0x920>
 8008d40:	42ae      	cmp	r6, r5
 8008d42:	f43f ac0e 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008d46:	1b75      	subs	r5, r6, r5
 8008d48:	f43f ac3f 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	7033      	strb	r3, [r6, #0]
 8008d50:	f1ba 0f00 	cmp.w	sl, #0
 8008d54:	d009      	beq.n	8008d6a <__svfscanf_r+0x9aa>
 8008d56:	1c69      	adds	r1, r5, #1
 8008d58:	4589      	cmp	r9, r1
 8008d5a:	d906      	bls.n	8008d6a <__svfscanf_r+0x9aa>
 8008d5c:	f8da 0000 	ldr.w	r0, [sl]
 8008d60:	f002 ff2e 	bl	800bbc0 <realloc>
 8008d64:	b108      	cbz	r0, 8008d6a <__svfscanf_r+0x9aa>
 8008d66:	f8ca 0000 	str.w	r0, [sl]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	442b      	add	r3, r5
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d76:	465e      	mov	r6, fp
 8008d78:	f7ff bb49 	b.w	800840e <__svfscanf_r+0x4e>
 8008d7c:	46ca      	mov	sl, r9
 8008d7e:	e7ac      	b.n	8008cda <__svfscanf_r+0x91a>
 8008d80:	2000043c 	.word	0x2000043c
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf08      	it	eq
 8008d8a:	f04f 33ff 	moveq.w	r3, #4294967295
 8008d8e:	f019 0501 	ands.w	r5, r9, #1
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
 8008d94:	f009 0810 	and.w	r8, r9, #16
 8008d98:	f000 80fb 	beq.w	8008f92 <__svfscanf_r+0xbd2>
 8008d9c:	f1b8 0f00 	cmp.w	r8, #0
 8008da0:	f040 80a0 	bne.w	8008ee4 <__svfscanf_r+0xb24>
 8008da4:	4633      	mov	r3, r6
 8008da6:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008daa:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
 8008db0:	f000 80a0 	beq.w	8008ef4 <__svfscanf_r+0xb34>
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	f43f ac08 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008dba:	2080      	movs	r0, #128	; 0x80
 8008dbc:	f001 ffe4 	bl	800ad88 <malloc>
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f43f acdf 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dca:	6030      	str	r0, [r6, #0]
 8008dcc:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008dd0:	889b      	ldrh	r3, [r3, #4]
 8008dd2:	4599      	cmp	r9, r3
 8008dd4:	d314      	bcc.n	8008e00 <__svfscanf_r+0xa40>
 8008dd6:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	f63f acd3 	bhi.w	8008786 <__svfscanf_r+0x3c6>
 8008de0:	3308      	adds	r3, #8
 8008de2:	fa1f fa83 	uxth.w	sl, r3
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f002 fee7 	bl	800bbc0 <realloc>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f43f acc7 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	6018      	str	r0, [r3, #0]
 8008dfc:	f8a3 a004 	strh.w	sl, [r3, #4]
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f109 0201 	add.w	r2, r9, #1
 8008e0a:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008e0e:	46b2      	mov	sl, r6
 8008e10:	80ca      	strh	r2, [r1, #6]
 8008e12:	462e      	mov	r6, r5
 8008e14:	f04f 0920 	mov.w	r9, #32
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	49ad      	ldr	r1, [pc, #692]	; (80090d8 <__svfscanf_r+0xd18>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	5c5b      	ldrb	r3, [r3, r1]
 8008e26:	0718      	lsls	r0, r3, #28
 8008e28:	d441      	bmi.n	8008eae <__svfscanf_r+0xaee>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d03e      	beq.n	8008eae <__svfscanf_r+0xaee>
 8008e30:	613a      	str	r2, [r7, #16]
 8008e32:	f001 ff2f 	bl	800ac94 <__locale_mb_cur_max>
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4290      	cmp	r0, r2
 8008e3a:	f43f ab92 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008e3e:	6821      	ldr	r1, [r4, #0]
 8008e40:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8008e44:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008e48:	f80c 0002 	strb.w	r0, [ip, r2]
 8008e4c:	1c53      	adds	r3, r2, #1
 8008e4e:	6862      	ldr	r2, [r4, #4]
 8008e50:	3a01      	subs	r2, #1
 8008e52:	e9c4 1200 	strd	r1, r2, [r4]
 8008e56:	6a3a      	ldr	r2, [r7, #32]
 8008e58:	2a03      	cmp	r2, #3
 8008e5a:	d103      	bne.n	8008e64 <__svfscanf_r+0xaa4>
 8008e5c:	f8db 2000 	ldr.w	r2, [fp]
 8008e60:	2a04      	cmp	r2, #4
 8008e62:	d006      	beq.n	8008e72 <__svfscanf_r+0xab2>
 8008e64:	2208      	movs	r2, #8
 8008e66:	2100      	movs	r1, #0
 8008e68:	4658      	mov	r0, fp
 8008e6a:	623b      	str	r3, [r7, #32]
 8008e6c:	f7fd fe42 	bl	8006af4 <memset>
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	f8cd b000 	str.w	fp, [sp]
 8008e76:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008e7a:	ee18 0a10 	vmov	r0, s16
 8008e7e:	4631      	mov	r1, r6
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	f002 f9cd 	bl	800b220 <_mbrtowc_r>
 8008e86:	1c42      	adds	r2, r0, #1
 8008e88:	6238      	str	r0, [r7, #32]
 8008e8a:	f43f ab6a 	beq.w	8008562 <__svfscanf_r+0x1a2>
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d133      	bne.n	8008efc <__svfscanf_r+0xb3c>
 8008e94:	6030      	str	r0, [r6, #0]
 8008e96:	6830      	ldr	r0, [r6, #0]
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	f001 feed 	bl	800ac78 <iswspace>
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d049      	beq.n	8008f3a <__svfscanf_r+0xb7a>
 8008ea6:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d13a      	bne.n	8008f24 <__svfscanf_r+0xb64>
 8008eae:	f1b8 0f00 	cmp.w	r8, #0
 8008eb2:	d114      	bne.n	8008ede <__svfscanf_r+0xb1e>
 8008eb4:	f8c6 8000 	str.w	r8, [r6]
 8008eb8:	f1ba 0f00 	cmp.w	sl, #0
 8008ebc:	d00c      	beq.n	8008ed8 <__svfscanf_r+0xb18>
 8008ebe:	1b71      	subs	r1, r6, r5
 8008ec0:	108b      	asrs	r3, r1, #2
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	4599      	cmp	r9, r3
 8008ec6:	d907      	bls.n	8008ed8 <__svfscanf_r+0xb18>
 8008ec8:	f8da 0000 	ldr.w	r0, [sl]
 8008ecc:	3104      	adds	r1, #4
 8008ece:	f002 fe77 	bl	800bbc0 <realloc>
 8008ed2:	b108      	cbz	r0, 8008ed8 <__svfscanf_r+0xb18>
 8008ed4:	f8ca 0000 	str.w	r0, [sl]
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	3301      	adds	r3, #1
 8008edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ede:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008ee0:	f7ff ba95 	b.w	800840e <__svfscanf_r+0x4e>
 8008ee4:	f04f 0900 	mov.w	r9, #0
 8008ee8:	627e      	str	r6, [r7, #36]	; 0x24
 8008eea:	464d      	mov	r5, r9
 8008eec:	46ca      	mov	sl, r9
 8008eee:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8008ef2:	e791      	b.n	8008e18 <__svfscanf_r+0xa58>
 8008ef4:	46c1      	mov	r9, r8
 8008ef6:	4645      	mov	r5, r8
 8008ef8:	46c2      	mov	sl, r8
 8008efa:	e78d      	b.n	8008e18 <__svfscanf_r+0xa58>
 8008efc:	6a3a      	ldr	r2, [r7, #32]
 8008efe:	3202      	adds	r2, #2
 8008f00:	d1c9      	bne.n	8008e96 <__svfscanf_r+0xad6>
 8008f02:	461a      	mov	r2, r3
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dc89      	bgt.n	8008e1e <__svfscanf_r+0xa5e>
 8008f0a:	ee18 0a10 	vmov	r0, s16
 8008f0e:	4621      	mov	r1, r4
 8008f10:	613a      	str	r2, [r7, #16]
 8008f12:	f003 f80b 	bl	800bf2c <__srefill_r>
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d080      	beq.n	8008e1e <__svfscanf_r+0xa5e>
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	f47f ab20 	bne.w	8008562 <__svfscanf_r+0x1a2>
 8008f22:	e7c4      	b.n	8008eae <__svfscanf_r+0xaee>
 8008f24:	3b01      	subs	r3, #1
 8008f26:	ee18 0a10 	vmov	r0, s16
 8008f2a:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8008f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f30:	4622      	mov	r2, r4
 8008f32:	f005 fb0e 	bl	800e552 <_ungetc_r>
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	e7b7      	b.n	8008eaa <__svfscanf_r+0xaea>
 8008f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f3c:	4419      	add	r1, r3
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d103      	bne.n	8008f4e <__svfscanf_r+0xb8e>
 8008f46:	f8db 3000 	ldr.w	r3, [fp]
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d002      	beq.n	8008f54 <__svfscanf_r+0xb94>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	3b01      	subs	r3, #1
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
 8008f54:	f1b8 0f00 	cmp.w	r8, #0
 8008f58:	d1d4      	bne.n	8008f04 <__svfscanf_r+0xb44>
 8008f5a:	3604      	adds	r6, #4
 8008f5c:	f1ba 0f00 	cmp.w	sl, #0
 8008f60:	d015      	beq.n	8008f8e <__svfscanf_r+0xbce>
 8008f62:	1b73      	subs	r3, r6, r5
 8008f64:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008f68:	d80f      	bhi.n	8008f8a <__svfscanf_r+0xbca>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	f002 fe25 	bl	800bbc0 <realloc>
 8008f76:	4605      	mov	r5, r0
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	f43f ac04 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f8ca 0000 	str.w	r0, [sl]
 8008f84:	18c6      	adds	r6, r0, r3
 8008f86:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	e7ba      	b.n	8008f04 <__svfscanf_r+0xb44>
 8008f8e:	4652      	mov	r2, sl
 8008f90:	e7b8      	b.n	8008f04 <__svfscanf_r+0xb44>
 8008f92:	f1b8 0f00 	cmp.w	r8, #0
 8008f96:	d01a      	beq.n	8008fce <__svfscanf_r+0xc0e>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	494f      	ldr	r1, [pc, #316]	; (80090d8 <__svfscanf_r+0xd18>)
 8008f9c:	781a      	ldrb	r2, [r3, #0]
 8008f9e:	5c52      	ldrb	r2, [r2, r1]
 8008fa0:	0711      	lsls	r1, r2, #28
 8008fa2:	f53f ae62 	bmi.w	8008c6a <__svfscanf_r+0x8aa>
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	6862      	ldr	r2, [r4, #4]
 8008faa:	6023      	str	r3, [r4, #0]
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	3501      	adds	r5, #1
 8008fb0:	3a01      	subs	r2, #1
 8008fb2:	42ab      	cmp	r3, r5
 8008fb4:	6062      	str	r2, [r4, #4]
 8008fb6:	f43f ae58 	beq.w	8008c6a <__svfscanf_r+0x8aa>
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	dcec      	bgt.n	8008f98 <__svfscanf_r+0xbd8>
 8008fbe:	ee18 0a10 	vmov	r0, s16
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f002 ffb2 	bl	800bf2c <__srefill_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d0e5      	beq.n	8008f98 <__svfscanf_r+0xbd8>
 8008fcc:	e64d      	b.n	8008c6a <__svfscanf_r+0x8aa>
 8008fce:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008fd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008fd6:	d07d      	beq.n	80090d4 <__svfscanf_r+0xd14>
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	f43f aaf6 	beq.w	80085ca <__svfscanf_r+0x20a>
 8008fde:	2020      	movs	r0, #32
 8008fe0:	f001 fed2 	bl	800ad88 <malloc>
 8008fe4:	4681      	mov	r9, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f abcd 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	6028      	str	r0, [r5, #0]
 8008ff0:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8008ff4:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8008ff8:	45c2      	cmp	sl, r8
 8008ffa:	d315      	bcc.n	8009028 <__svfscanf_r+0xc68>
 8008ffc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8009000:	4598      	cmp	r8, r3
 8009002:	f63f abc0 	bhi.w	8008786 <__svfscanf_r+0x3c6>
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	f108 0808 	add.w	r8, r8, #8
 800900c:	fa1f f888 	uxth.w	r8, r8
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8009016:	f002 fdd3 	bl	800bbc0 <realloc>
 800901a:	2800      	cmp	r0, #0
 800901c:	f43f abb3 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	6018      	str	r0, [r3, #0]
 8009024:	f8a3 8004 	strh.w	r8, [r3, #4]
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f10a 0201 	add.w	r2, sl, #1
 8009032:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8009036:	80ca      	strh	r2, [r1, #6]
 8009038:	46aa      	mov	sl, r5
 800903a:	464d      	mov	r5, r9
 800903c:	f04f 0920 	mov.w	r9, #32
 8009040:	46a8      	mov	r8, r5
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	4924      	ldr	r1, [pc, #144]	; (80090d8 <__svfscanf_r+0xd18>)
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	5c52      	ldrb	r2, [r2, r1]
 800904a:	0712      	lsls	r2, r2, #28
 800904c:	d42a      	bmi.n	80090a4 <__svfscanf_r+0xce4>
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	3a01      	subs	r2, #1
 8009052:	6062      	str	r2, [r4, #4]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	6022      	str	r2, [r4, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	f805 3b01 	strb.w	r3, [r5], #1
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	d011      	beq.n	8009088 <__svfscanf_r+0xcc8>
 8009064:	eba5 0b08 	sub.w	fp, r5, r8
 8009068:	45cb      	cmp	fp, r9
 800906a:	d30d      	bcc.n	8009088 <__svfscanf_r+0xcc8>
 800906c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f002 fda4 	bl	800bbc0 <realloc>
 8009078:	4680      	mov	r8, r0
 800907a:	2800      	cmp	r0, #0
 800907c:	f43f ab83 	beq.w	8008786 <__svfscanf_r+0x3c6>
 8009080:	eb00 050b 	add.w	r5, r0, fp
 8009084:	f8ca 0000 	str.w	r0, [sl]
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	3b01      	subs	r3, #1
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
 800908e:	d009      	beq.n	80090a4 <__svfscanf_r+0xce4>
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	dcd5      	bgt.n	8009042 <__svfscanf_r+0xc82>
 8009096:	ee18 0a10 	vmov	r0, s16
 800909a:	4621      	mov	r1, r4
 800909c:	f002 ff46 	bl	800bf2c <__srefill_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0ce      	beq.n	8009042 <__svfscanf_r+0xc82>
 80090a4:	2300      	movs	r3, #0
 80090a6:	702b      	strb	r3, [r5, #0]
 80090a8:	eba5 0508 	sub.w	r5, r5, r8
 80090ac:	f1ba 0f00 	cmp.w	sl, #0
 80090b0:	d009      	beq.n	80090c6 <__svfscanf_r+0xd06>
 80090b2:	1c69      	adds	r1, r5, #1
 80090b4:	4589      	cmp	r9, r1
 80090b6:	d906      	bls.n	80090c6 <__svfscanf_r+0xd06>
 80090b8:	f8da 0000 	ldr.w	r0, [sl]
 80090bc:	f002 fd80 	bl	800bbc0 <realloc>
 80090c0:	b108      	cbz	r0, 80090c6 <__svfscanf_r+0xd06>
 80090c2:	f8ca 0000 	str.w	r0, [sl]
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	442b      	add	r3, r5
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	3301      	adds	r3, #1
 80090d0:	f7ff b99c 	b.w	800840c <__svfscanf_r+0x4c>
 80090d4:	46ca      	mov	sl, r9
 80090d6:	e7b3      	b.n	8009040 <__svfscanf_r+0xc80>
 80090d8:	080112d5 	.word	0x080112d5
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	3b01      	subs	r3, #1
 80090e0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80090e4:	bf81      	itttt	hi
 80090e6:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 80090e8:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 80090ec:	eb03 0b0c 	addhi.w	fp, r3, ip
 80090f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090f4:	bf88      	it	hi
 80090f6:	633b      	strhi	r3, [r7, #48]	; 0x30
 80090f8:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 80090fc:	f8df 9414 	ldr.w	r9, [pc, #1044]	; 8009514 <__svfscanf_r+0x1154>
 8009100:	627b      	str	r3, [r7, #36]	; 0x24
 8009102:	bf98      	it	ls
 8009104:	f04f 0b00 	movls.w	fp, #0
 8009108:	f04f 0a00 	mov.w	sl, #0
 800910c:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8009110:	6822      	ldr	r2, [r4, #0]
 8009112:	7813      	ldrb	r3, [r2, #0]
 8009114:	2b39      	cmp	r3, #57	; 0x39
 8009116:	d80f      	bhi.n	8009138 <__svfscanf_r+0xd78>
 8009118:	2b2a      	cmp	r3, #42	; 0x2a
 800911a:	d91a      	bls.n	8009152 <__svfscanf_r+0xd92>
 800911c:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009120:	290e      	cmp	r1, #14
 8009122:	d816      	bhi.n	8009152 <__svfscanf_r+0xd92>
 8009124:	e8df f001 	tbb	[pc, r1]
 8009128:	157f157f 	.word	0x157f157f
 800912c:	70704215 	.word	0x70704215
 8009130:	70707070 	.word	0x70707070
 8009134:	7870      	.short	0x7870
 8009136:	78          	.byte	0x78
 8009137:	00          	.byte	0x00
 8009138:	2b66      	cmp	r3, #102	; 0x66
 800913a:	d835      	bhi.n	80091a8 <__svfscanf_r+0xde8>
 800913c:	2b60      	cmp	r3, #96	; 0x60
 800913e:	d803      	bhi.n	8009148 <__svfscanf_r+0xd88>
 8009140:	2b46      	cmp	r3, #70	; 0x46
 8009142:	d804      	bhi.n	800914e <__svfscanf_r+0xd8e>
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	d904      	bls.n	8009152 <__svfscanf_r+0xd92>
 8009148:	69f9      	ldr	r1, [r7, #28]
 800914a:	290a      	cmp	r1, #10
 800914c:	e069      	b.n	8009222 <__svfscanf_r+0xe62>
 800914e:	2b58      	cmp	r3, #88	; 0x58
 8009150:	d06f      	beq.n	8009232 <__svfscanf_r+0xe72>
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	05d8      	lsls	r0, r3, #23
 8009156:	d512      	bpl.n	800917e <__svfscanf_r+0xdbe>
 8009158:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800915c:	4598      	cmp	r8, r3
 800915e:	d909      	bls.n	8009174 <__svfscanf_r+0xdb4>
 8009160:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8009164:	ee18 0a10 	vmov	r0, s16
 8009168:	4622      	mov	r2, r4
 800916a:	f005 f9f2 	bl	800e552 <_ungetc_r>
 800916e:	f108 39ff 	add.w	r9, r8, #4294967295
 8009172:	46c8      	mov	r8, r9
 8009174:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009178:	4598      	cmp	r8, r3
 800917a:	f43f aa26 	beq.w	80085ca <__svfscanf_r+0x20a>
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f013 0210 	ands.w	r2, r3, #16
 8009184:	d175      	bne.n	8009272 <__svfscanf_r+0xeb2>
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	69bd      	ldr	r5, [r7, #24]
 800918a:	f888 2000 	strb.w	r2, [r8]
 800918e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009192:	ee18 0a10 	vmov	r0, s16
 8009196:	47a8      	blx	r5
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	0699      	lsls	r1, r3, #26
 800919c:	f106 0904 	add.w	r9, r6, #4
 80091a0:	d55e      	bpl.n	8009260 <__svfscanf_r+0xea0>
 80091a2:	6833      	ldr	r3, [r6, #0]
 80091a4:	6018      	str	r0, [r3, #0]
 80091a6:	e060      	b.n	800926a <__svfscanf_r+0xeaa>
 80091a8:	2b78      	cmp	r3, #120	; 0x78
 80091aa:	e7d1      	b.n	8009150 <__svfscanf_r+0xd90>
 80091ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ae:	050d      	lsls	r5, r1, #20
 80091b0:	d50d      	bpl.n	80091ce <__svfscanf_r+0xe0e>
 80091b2:	69f9      	ldr	r1, [r7, #28]
 80091b4:	b929      	cbnz	r1, 80091c2 <__svfscanf_r+0xe02>
 80091b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091b8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80091bc:	6279      	str	r1, [r7, #36]	; 0x24
 80091be:	2108      	movs	r1, #8
 80091c0:	61f9      	str	r1, [r7, #28]
 80091c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091c4:	0548      	lsls	r0, r1, #21
 80091c6:	d505      	bpl.n	80091d4 <__svfscanf_r+0xe14>
 80091c8:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 80091cc:	6279      	str	r1, [r7, #36]	; 0x24
 80091ce:	f808 3b01 	strb.w	r3, [r8], #1
 80091d2:	e00d      	b.n	80091f0 <__svfscanf_r+0xe30>
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
 80091dc:	f1bb 0f00 	cmp.w	fp, #0
 80091e0:	d004      	beq.n	80091ec <__svfscanf_r+0xe2c>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	3301      	adds	r3, #1
 80091e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
 80091ec:	f10a 0a01 	add.w	sl, sl, #1
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	dd2a      	ble.n	8009250 <__svfscanf_r+0xe90>
 80091fa:	3201      	adds	r2, #1
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	3b01      	subs	r3, #1
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
 8009204:	d184      	bne.n	8009110 <__svfscanf_r+0xd50>
 8009206:	e7a4      	b.n	8009152 <__svfscanf_r+0xd92>
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800920e:	61f9      	str	r1, [r7, #28]
 8009210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009212:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 8009216:	e7d9      	b.n	80091cc <__svfscanf_r+0xe0c>
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800921e:	61f9      	str	r1, [r7, #28]
 8009220:	2908      	cmp	r1, #8
 8009222:	dcf5      	bgt.n	8009210 <__svfscanf_r+0xe50>
 8009224:	e795      	b.n	8009152 <__svfscanf_r+0xd92>
 8009226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009228:	060d      	lsls	r5, r1, #24
 800922a:	d592      	bpl.n	8009152 <__svfscanf_r+0xd92>
 800922c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009230:	e7cc      	b.n	80091cc <__svfscanf_r+0xe0c>
 8009232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009234:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8009238:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800923c:	d189      	bne.n	8009152 <__svfscanf_r+0xd92>
 800923e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009240:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 8009244:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 8009248:	6279      	str	r1, [r7, #36]	; 0x24
 800924a:	2110      	movs	r1, #16
 800924c:	61f9      	str	r1, [r7, #28]
 800924e:	e7be      	b.n	80091ce <__svfscanf_r+0xe0e>
 8009250:	ee18 0a10 	vmov	r0, s16
 8009254:	4621      	mov	r1, r4
 8009256:	f002 fe69 	bl	800bf2c <__srefill_r>
 800925a:	2800      	cmp	r0, #0
 800925c:	d0cf      	beq.n	80091fe <__svfscanf_r+0xe3e>
 800925e:	e778      	b.n	8009152 <__svfscanf_r+0xd92>
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	071a      	lsls	r2, r3, #28
 8009264:	d50e      	bpl.n	8009284 <__svfscanf_r+0xec4>
 8009266:	6833      	ldr	r3, [r6, #0]
 8009268:	7018      	strb	r0, [r3, #0]
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	3301      	adds	r3, #1
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009270:	464e      	mov	r6, r9
 8009272:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009276:	eba8 0803 	sub.w	r8, r8, r3
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	44c2      	add	sl, r8
 800927e:	4453      	add	r3, sl
 8009280:	f7ff b966 	b.w	8008550 <__svfscanf_r+0x190>
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	075b      	lsls	r3, r3, #29
 8009288:	d502      	bpl.n	8009290 <__svfscanf_r+0xed0>
 800928a:	6833      	ldr	r3, [r6, #0]
 800928c:	8018      	strh	r0, [r3, #0]
 800928e:	e7ec      	b.n	800926a <__svfscanf_r+0xeaa>
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	f013 0201 	ands.w	r2, r3, #1
 8009296:	d184      	bne.n	80091a2 <__svfscanf_r+0xde2>
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	079d      	lsls	r5, r3, #30
 800929c:	d581      	bpl.n	80091a2 <__svfscanf_r+0xde2>
 800929e:	4b9c      	ldr	r3, [pc, #624]	; (8009510 <__svfscanf_r+0x1150>)
 80092a0:	69b9      	ldr	r1, [r7, #24]
 80092a2:	4299      	cmp	r1, r3
 80092a4:	ee18 0a10 	vmov	r0, s16
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80092ae:	d105      	bne.n	80092bc <__svfscanf_r+0xefc>
 80092b0:	f003 ff36 	bl	800d120 <_strtoull_r>
 80092b4:	6833      	ldr	r3, [r6, #0]
 80092b6:	e9c3 0100 	strd	r0, r1, [r3]
 80092ba:	e7d6      	b.n	800926a <__svfscanf_r+0xeaa>
 80092bc:	f003 fe22 	bl	800cf04 <_strtoll_r>
 80092c0:	e7f8      	b.n	80092b4 <__svfscanf_r+0xef4>
 80092c2:	ee18 0a10 	vmov	r0, s16
 80092c6:	f001 fceb 	bl	800aca0 <_localeconv_r>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6802      	ldr	r2, [r0, #0]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80092d4:	f04f 0b00 	mov.w	fp, #0
 80092d8:	bf88      	it	hi
 80092da:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 80092dc:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 80092e0:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 80092e4:	bf84      	itt	hi
 80092e6:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 80092ea:	f240 115d 	movwhi	r1, #349	; 0x15d
 80092ee:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 80092f2:	bf86      	itte	hi
 80092f4:	181b      	addhi	r3, r3, r0
 80092f6:	6339      	strhi	r1, [r7, #48]	; 0x30
 80092f8:	2300      	movls	r3, #0
 80092fa:	46da      	mov	sl, fp
 80092fc:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 8009300:	f8d4 e000 	ldr.w	lr, [r4]
 8009304:	f89e 0000 	ldrb.w	r0, [lr]
 8009308:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 800930c:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 8009310:	f200 811e 	bhi.w	8009550 <__svfscanf_r+0x1190>
 8009314:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8009318:	011c0087 	.word	0x011c0087
 800931c:	011c0087 	.word	0x011c0087
 8009320:	004f011c 	.word	0x004f011c
 8009324:	006f006f 	.word	0x006f006f
 8009328:	006f006f 	.word	0x006f006f
 800932c:	006f006f 	.word	0x006f006f
 8009330:	006f006f 	.word	0x006f006f
 8009334:	011c006f 	.word	0x011c006f
 8009338:	011c011c 	.word	0x011c011c
 800933c:	011c011c 	.word	0x011c011c
 8009340:	011c011c 	.word	0x011c011c
 8009344:	006d00ad 	.word	0x006d00ad
 8009348:	006d006d 	.word	0x006d006d
 800934c:	00e50119 	.word	0x00e50119
 8009350:	011c011c 	.word	0x011c011c
 8009354:	011c00cf 	.word	0x011c00cf
 8009358:	011c011c 	.word	0x011c011c
 800935c:	008e011c 	.word	0x008e011c
 8009360:	0100011c 	.word	0x0100011c
 8009364:	011c011c 	.word	0x011c011c
 8009368:	00f0011c 	.word	0x00f0011c
 800936c:	011c011c 	.word	0x011c011c
 8009370:	0073011c 	.word	0x0073011c
 8009374:	011c00f6 	.word	0x011c00f6
 8009378:	011c011c 	.word	0x011c011c
 800937c:	011c011c 	.word	0x011c011c
 8009380:	011c011c 	.word	0x011c011c
 8009384:	006d00ad 	.word	0x006d00ad
 8009388:	006d006d 	.word	0x006d006d
 800938c:	00e50119 	.word	0x00e50119
 8009390:	011c011c 	.word	0x011c011c
 8009394:	011c00cf 	.word	0x011c00cf
 8009398:	011c011c 	.word	0x011c011c
 800939c:	008e011c 	.word	0x008e011c
 80093a0:	0100011c 	.word	0x0100011c
 80093a4:	011c011c 	.word	0x011c011c
 80093a8:	00f0011c 	.word	0x00f0011c
 80093ac:	011c011c 	.word	0x011c011c
 80093b0:	0073011c 	.word	0x0073011c
 80093b4:	00f6      	.short	0x00f6
 80093b6:	05e9      	lsls	r1, r5, #23
 80093b8:	d51d      	bpl.n	80093f6 <__svfscanf_r+0x1036>
 80093ba:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80093be:	f10a 0a01 	add.w	sl, sl, #1
 80093c2:	b11b      	cbz	r3, 80093cc <__svfscanf_r+0x100c>
 80093c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c6:	3001      	adds	r0, #1
 80093c8:	3b01      	subs	r3, #1
 80093ca:	6338      	str	r0, [r7, #48]	; 0x30
 80093cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093d0:	3001      	adds	r0, #1
 80093d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093d4:	6860      	ldr	r0, [r4, #4]
 80093d6:	3801      	subs	r0, #1
 80093d8:	3901      	subs	r1, #1
 80093da:	2800      	cmp	r0, #0
 80093dc:	6339      	str	r1, [r7, #48]	; 0x30
 80093de:	6060      	str	r0, [r4, #4]
 80093e0:	f340 80c7 	ble.w	8009572 <__svfscanf_r+0x11b2>
 80093e4:	f10e 0101 	add.w	r1, lr, #1
 80093e8:	6021      	str	r1, [r4, #0]
 80093ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093ec:	2900      	cmp	r1, #0
 80093ee:	d187      	bne.n	8009300 <__svfscanf_r+0xf40>
 80093f0:	e04a      	b.n	8009488 <__svfscanf_r+0x10c8>
 80093f2:	0529      	lsls	r1, r5, #20
 80093f4:	d548      	bpl.n	8009488 <__svfscanf_r+0x10c8>
 80093f6:	eb1b 0f08 	cmn.w	fp, r8
 80093fa:	d03f      	beq.n	800947c <__svfscanf_r+0x10bc>
 80093fc:	e044      	b.n	8009488 <__svfscanf_r+0x10c8>
 80093fe:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 8009402:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8009406:	d13f      	bne.n	8009488 <__svfscanf_r+0x10c8>
 8009408:	f1ba 0f01 	cmp.w	sl, #1
 800940c:	d13c      	bne.n	8009488 <__svfscanf_r+0x10c8>
 800940e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009410:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009414:	3901      	subs	r1, #1
 8009416:	f809 cb01 	strb.w	ip, [r9], #1
 800941a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800941e:	6339      	str	r1, [r7, #48]	; 0x30
 8009420:	f04f 0a00 	mov.w	sl, #0
 8009424:	e003      	b.n	800942e <__svfscanf_r+0x106e>
 8009426:	0629      	lsls	r1, r5, #24
 8009428:	d52e      	bpl.n	8009488 <__svfscanf_r+0x10c8>
 800942a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800942e:	f809 0b01 	strb.w	r0, [r9], #1
 8009432:	e7cb      	b.n	80093cc <__svfscanf_r+0x100c>
 8009434:	f1bb 0f00 	cmp.w	fp, #0
 8009438:	d10c      	bne.n	8009454 <__svfscanf_r+0x1094>
 800943a:	f1ba 0f00 	cmp.w	sl, #0
 800943e:	d10d      	bne.n	800945c <__svfscanf_r+0x109c>
 8009440:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8009444:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8009448:	d108      	bne.n	800945c <__svfscanf_r+0x109c>
 800944a:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800944e:	f04f 0b01 	mov.w	fp, #1
 8009452:	e7ec      	b.n	800942e <__svfscanf_r+0x106e>
 8009454:	f1bb 0f02 	cmp.w	fp, #2
 8009458:	f000 8085 	beq.w	8009566 <__svfscanf_r+0x11a6>
 800945c:	f1b8 0f01 	cmp.w	r8, #1
 8009460:	d002      	beq.n	8009468 <__svfscanf_r+0x10a8>
 8009462:	f1b8 0f04 	cmp.w	r8, #4
 8009466:	d10f      	bne.n	8009488 <__svfscanf_r+0x10c8>
 8009468:	f108 0801 	add.w	r8, r8, #1
 800946c:	fa5f f888 	uxtb.w	r8, r8
 8009470:	e7dd      	b.n	800942e <__svfscanf_r+0x106e>
 8009472:	0529      	lsls	r1, r5, #20
 8009474:	d505      	bpl.n	8009482 <__svfscanf_r+0x10c2>
 8009476:	eb1b 0f08 	cmn.w	fp, r8
 800947a:	d102      	bne.n	8009482 <__svfscanf_r+0x10c2>
 800947c:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8009480:	e7d5      	b.n	800942e <__svfscanf_r+0x106e>
 8009482:	f1bb 0f01 	cmp.w	fp, #1
 8009486:	d071      	beq.n	800956c <__svfscanf_r+0x11ac>
 8009488:	f1ba 0f00 	cmp.w	sl, #0
 800948c:	d001      	beq.n	8009492 <__svfscanf_r+0x10d2>
 800948e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8009492:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009496:	f1bb 0f01 	cmp.w	fp, #1
 800949a:	d877      	bhi.n	800958c <__svfscanf_r+0x11cc>
 800949c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 80094a0:	45a9      	cmp	r9, r5
 80094a2:	f67f a892 	bls.w	80085ca <__svfscanf_r+0x20a>
 80094a6:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80094aa:	ee18 0a10 	vmov	r0, s16
 80094ae:	4622      	mov	r2, r4
 80094b0:	f005 f84f 	bl	800e552 <_ungetc_r>
 80094b4:	e7f4      	b.n	80094a0 <__svfscanf_r+0x10e0>
 80094b6:	f1b8 0f00 	cmp.w	r8, #0
 80094ba:	d10c      	bne.n	80094d6 <__svfscanf_r+0x1116>
 80094bc:	f1ba 0f00 	cmp.w	sl, #0
 80094c0:	d1e5      	bne.n	800948e <__svfscanf_r+0x10ce>
 80094c2:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 80094c6:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80094ca:	d1e2      	bne.n	8009492 <__svfscanf_r+0x10d2>
 80094cc:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 80094d0:	f04f 0801 	mov.w	r8, #1
 80094d4:	e7ab      	b.n	800942e <__svfscanf_r+0x106e>
 80094d6:	f1b8 0f03 	cmp.w	r8, #3
 80094da:	d0c5      	beq.n	8009468 <__svfscanf_r+0x10a8>
 80094dc:	f1b8 0f05 	cmp.w	r8, #5
 80094e0:	e7c1      	b.n	8009466 <__svfscanf_r+0x10a6>
 80094e2:	0529      	lsls	r1, r5, #20
 80094e4:	d502      	bpl.n	80094ec <__svfscanf_r+0x112c>
 80094e6:	eb1b 0f08 	cmn.w	fp, r8
 80094ea:	d0c7      	beq.n	800947c <__svfscanf_r+0x10bc>
 80094ec:	f1b8 0f02 	cmp.w	r8, #2
 80094f0:	d1ca      	bne.n	8009488 <__svfscanf_r+0x10c8>
 80094f2:	f04f 0803 	mov.w	r8, #3
 80094f6:	e79a      	b.n	800942e <__svfscanf_r+0x106e>
 80094f8:	f1b8 0f06 	cmp.w	r8, #6
 80094fc:	d1c4      	bne.n	8009488 <__svfscanf_r+0x10c8>
 80094fe:	f04f 0807 	mov.w	r8, #7
 8009502:	e794      	b.n	800942e <__svfscanf_r+0x106e>
 8009504:	f1b8 0f07 	cmp.w	r8, #7
 8009508:	d1be      	bne.n	8009488 <__svfscanf_r+0x10c8>
 800950a:	f04f 0808 	mov.w	r8, #8
 800950e:	e78e      	b.n	800942e <__svfscanf_r+0x106e>
 8009510:	0800cfed 	.word	0x0800cfed
 8009514:	080112b2 	.word	0x080112b2
 8009518:	0529      	lsls	r1, r5, #20
 800951a:	d5b5      	bpl.n	8009488 <__svfscanf_r+0x10c8>
 800951c:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 8009520:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8009524:	d004      	beq.n	8009530 <__svfscanf_r+0x1170>
 8009526:	0569      	lsls	r1, r5, #21
 8009528:	d5ae      	bpl.n	8009488 <__svfscanf_r+0x10c8>
 800952a:	f1ba 0f00 	cmp.w	sl, #0
 800952e:	d0b0      	beq.n	8009492 <__svfscanf_r+0x10d2>
 8009530:	05a9      	lsls	r1, r5, #22
 8009532:	bf58      	it	pl
 8009534:	6a79      	ldrpl	r1, [r7, #36]	; 0x24
 8009536:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 800953a:	bf5c      	itt	pl
 800953c:	ebaa 0101 	subpl.w	r1, sl, r1
 8009540:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 8009544:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8009548:	e76a      	b.n	8009420 <__svfscanf_r+0x1060>
 800954a:	0529      	lsls	r1, r5, #20
 800954c:	d5e6      	bpl.n	800951c <__svfscanf_r+0x115c>
 800954e:	e752      	b.n	80093f6 <__svfscanf_r+0x1036>
 8009550:	f892 c000 	ldrb.w	ip, [r2]
 8009554:	4584      	cmp	ip, r0
 8009556:	d197      	bne.n	8009488 <__svfscanf_r+0x10c8>
 8009558:	05a9      	lsls	r1, r5, #22
 800955a:	d595      	bpl.n	8009488 <__svfscanf_r+0x10c8>
 800955c:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8009560:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 8009564:	e763      	b.n	800942e <__svfscanf_r+0x106e>
 8009566:	f04f 0b03 	mov.w	fp, #3
 800956a:	e760      	b.n	800942e <__svfscanf_r+0x106e>
 800956c:	f04f 0b02 	mov.w	fp, #2
 8009570:	e75d      	b.n	800942e <__svfscanf_r+0x106e>
 8009572:	ee18 0a10 	vmov	r0, s16
 8009576:	4621      	mov	r1, r4
 8009578:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800957c:	f002 fcd6 	bl	800bf2c <__srefill_r>
 8009580:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8009584:	2800      	cmp	r0, #0
 8009586:	f43f af30 	beq.w	80093ea <__svfscanf_r+0x102a>
 800958a:	e77d      	b.n	8009488 <__svfscanf_r+0x10c8>
 800958c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009590:	2b06      	cmp	r3, #6
 8009592:	d829      	bhi.n	80095e8 <__svfscanf_r+0x1228>
 8009594:	f1b8 0f02 	cmp.w	r8, #2
 8009598:	d837      	bhi.n	800960a <__svfscanf_r+0x124a>
 800959a:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800959e:	45a9      	cmp	r9, r5
 80095a0:	f67f a813 	bls.w	80085ca <__svfscanf_r+0x20a>
 80095a4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80095a8:	ee18 0a10 	vmov	r0, s16
 80095ac:	4622      	mov	r2, r4
 80095ae:	f004 ffd0 	bl	800e552 <_ungetc_r>
 80095b2:	e7f4      	b.n	800959e <__svfscanf_r+0x11de>
 80095b4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ba:	ee18 0a10 	vmov	r0, s16
 80095be:	4622      	mov	r2, r4
 80095c0:	f004 ffc7 	bl	800e552 <_ungetc_r>
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095ca:	fa5f fb8b 	uxtb.w	fp, fp
 80095ce:	f1bb 0f02 	cmp.w	fp, #2
 80095d2:	d1ef      	bne.n	80095b4 <__svfscanf_r+0x11f4>
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	f1a8 0803 	sub.w	r8, r8, #3
 80095da:	fa5f f888 	uxtb.w	r8, r8
 80095de:	eba3 0308 	sub.w	r3, r3, r8
 80095e2:	eba9 0908 	sub.w	r9, r9, r8
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e8:	05ea      	lsls	r2, r5, #23
 80095ea:	d530      	bpl.n	800964e <__svfscanf_r+0x128e>
 80095ec:	056b      	lsls	r3, r5, #21
 80095ee:	d50f      	bpl.n	8009610 <__svfscanf_r+0x1250>
 80095f0:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 80095f4:	45a9      	cmp	r9, r5
 80095f6:	f67e afe8 	bls.w	80085ca <__svfscanf_r+0x20a>
 80095fa:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80095fe:	ee18 0a10 	vmov	r0, s16
 8009602:	4622      	mov	r2, r4
 8009604:	f004 ffa5 	bl	800e552 <_ungetc_r>
 8009608:	e7f4      	b.n	80095f4 <__svfscanf_r+0x1234>
 800960a:	46c3      	mov	fp, r8
 800960c:	464b      	mov	r3, r9
 800960e:	e7da      	b.n	80095c6 <__svfscanf_r+0x1206>
 8009610:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	2965      	cmp	r1, #101	; 0x65
 8009618:	f109 38ff 	add.w	r8, r9, #4294967295
 800961c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009620:	d00d      	beq.n	800963e <__svfscanf_r+0x127e>
 8009622:	2945      	cmp	r1, #69	; 0x45
 8009624:	d00b      	beq.n	800963e <__svfscanf_r+0x127e>
 8009626:	ee18 0a10 	vmov	r0, s16
 800962a:	4622      	mov	r2, r4
 800962c:	f004 ff91 	bl	800e552 <_ungetc_r>
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8009636:	f1a9 0802 	sub.w	r8, r9, #2
 800963a:	f1a3 0b02 	sub.w	fp, r3, #2
 800963e:	ee18 0a10 	vmov	r0, s16
 8009642:	4622      	mov	r2, r4
 8009644:	f004 ff85 	bl	800e552 <_ungetc_r>
 8009648:	46c1      	mov	r9, r8
 800964a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800964e:	f015 0210 	ands.w	r2, r5, #16
 8009652:	f47e aedc 	bne.w	800840e <__svfscanf_r+0x4e>
 8009656:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800965a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800965e:	f889 2000 	strb.w	r2, [r9]
 8009662:	d114      	bne.n	800968e <__svfscanf_r+0x12ce>
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	4553      	cmp	r3, sl
 8009668:	eba3 020a 	sub.w	r2, r3, sl
 800966c:	d11d      	bne.n	80096aa <__svfscanf_r+0x12ea>
 800966e:	ee18 0a10 	vmov	r0, s16
 8009672:	2200      	movs	r2, #0
 8009674:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009678:	f003 fba8 	bl	800cdcc <_strtod_r>
 800967c:	07e8      	lsls	r0, r5, #31
 800967e:	f106 0804 	add.w	r8, r6, #4
 8009682:	d51d      	bpl.n	80096c0 <__svfscanf_r+0x1300>
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	ed83 0b00 	vstr	d0, [r3]
 800968a:	f7ff b9b8 	b.w	80089fe <__svfscanf_r+0x63e>
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0ec      	beq.n	800966e <__svfscanf_r+0x12ae>
 8009694:	68f9      	ldr	r1, [r7, #12]
 8009696:	230a      	movs	r3, #10
 8009698:	ee18 0a10 	vmov	r0, s16
 800969c:	3101      	adds	r1, #1
 800969e:	f7fd fbdb 	bl	8006e58 <_strtol_r>
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f8d7 900c 	ldr.w	r9, [r7, #12]
 80096a8:	1ac2      	subs	r2, r0, r3
 80096aa:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 80096ae:	4599      	cmp	r9, r3
 80096b0:	bf28      	it	cs
 80096b2:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 80096b6:	4919      	ldr	r1, [pc, #100]	; (800971c <__svfscanf_r+0x135c>)
 80096b8:	4648      	mov	r0, r9
 80096ba:	f002 fd3f 	bl	800c13c <sprintf>
 80096be:	e7d6      	b.n	800966e <__svfscanf_r+0x12ae>
 80096c0:	07a9      	lsls	r1, r5, #30
 80096c2:	6836      	ldr	r6, [r6, #0]
 80096c4:	d503      	bpl.n	80096ce <__svfscanf_r+0x130e>
 80096c6:	ed86 0b00 	vstr	d0, [r6]
 80096ca:	f7ff b998 	b.w	80089fe <__svfscanf_r+0x63e>
 80096ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	d706      	bvc.n	80096e6 <__svfscanf_r+0x1326>
 80096d8:	4811      	ldr	r0, [pc, #68]	; (8009720 <__svfscanf_r+0x1360>)
 80096da:	f002 fd29 	bl	800c130 <nanf>
 80096de:	ed86 0a00 	vstr	s0, [r6]
 80096e2:	f7ff b98c 	b.w	80089fe <__svfscanf_r+0x63e>
 80096e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80096ea:	e7f8      	b.n	80096de <__svfscanf_r+0x131e>
 80096ec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f001 fb51 	bl	800ad98 <free>
 80096f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80096fa:	3401      	adds	r4, #1
 80096fc:	601e      	str	r6, [r3, #0]
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	88db      	ldrh	r3, [r3, #6]
 8009704:	42a3      	cmp	r3, r4
 8009706:	dcf1      	bgt.n	80096ec <__svfscanf_r+0x132c>
 8009708:	f7fe bf6e 	b.w	80085e8 <__svfscanf_r+0x228>
 800970c:	2400      	movs	r4, #0
 800970e:	4626      	mov	r6, r4
 8009710:	e7f5      	b.n	80096fe <__svfscanf_r+0x133e>
 8009712:	f001 fb41 	bl	800ad98 <free>
 8009716:	f7fe bf6c 	b.w	80085f2 <__svfscanf_r+0x232>
 800971a:	bf00      	nop
 800971c:	080112ad 	.word	0x080112ad
 8009720:	08011683 	.word	0x08011683

08009724 <_vfscanf_r>:
 8009724:	b530      	push	{r4, r5, lr}
 8009726:	4604      	mov	r4, r0
 8009728:	b085      	sub	sp, #20
 800972a:	b148      	cbz	r0, 8009740 <_vfscanf_r+0x1c>
 800972c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800972e:	b93d      	cbnz	r5, 8009740 <_vfscanf_r+0x1c>
 8009730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009734:	9101      	str	r1, [sp, #4]
 8009736:	f000 ff61 	bl	800a5fc <__sinit>
 800973a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800973e:	9901      	ldr	r1, [sp, #4]
 8009740:	4620      	mov	r0, r4
 8009742:	b005      	add	sp, #20
 8009744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009748:	f7fe be3a 	b.w	80083c0 <__svfscanf_r>

0800974c <__swsetup_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <__swsetup_r+0xac>)
 8009750:	4605      	mov	r5, r0
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	460c      	mov	r4, r1
 8009756:	b118      	cbz	r0, 8009760 <__swsetup_r+0x14>
 8009758:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800975a:	b90b      	cbnz	r3, 8009760 <__swsetup_r+0x14>
 800975c:	f000 ff4e 	bl	800a5fc <__sinit>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009766:	0718      	lsls	r0, r3, #28
 8009768:	d422      	bmi.n	80097b0 <__swsetup_r+0x64>
 800976a:	06d9      	lsls	r1, r3, #27
 800976c:	d407      	bmi.n	800977e <__swsetup_r+0x32>
 800976e:	2309      	movs	r3, #9
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	e034      	b.n	80097e8 <__swsetup_r+0x9c>
 800977e:	0758      	lsls	r0, r3, #29
 8009780:	d512      	bpl.n	80097a8 <__swsetup_r+0x5c>
 8009782:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009784:	b141      	cbz	r1, 8009798 <__swsetup_r+0x4c>
 8009786:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800978a:	4299      	cmp	r1, r3
 800978c:	d002      	beq.n	8009794 <__swsetup_r+0x48>
 800978e:	4628      	mov	r0, r5
 8009790:	f001 f82c 	bl	800a7ec <_free_r>
 8009794:	2300      	movs	r3, #0
 8009796:	6323      	str	r3, [r4, #48]	; 0x30
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	2300      	movs	r3, #0
 80097a2:	6063      	str	r3, [r4, #4]
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	f043 0308 	orr.w	r3, r3, #8
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b94b      	cbnz	r3, 80097c8 <__swsetup_r+0x7c>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097be:	d003      	beq.n	80097c8 <__swsetup_r+0x7c>
 80097c0:	4621      	mov	r1, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	f001 faa0 	bl	800ad08 <__smakebuf_r>
 80097c8:	89a0      	ldrh	r0, [r4, #12]
 80097ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ce:	f010 0301 	ands.w	r3, r0, #1
 80097d2:	d00a      	beq.n	80097ea <__swsetup_r+0x9e>
 80097d4:	2300      	movs	r3, #0
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	425b      	negs	r3, r3
 80097dc:	61a3      	str	r3, [r4, #24]
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	b943      	cbnz	r3, 80097f4 <__swsetup_r+0xa8>
 80097e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e6:	d1c4      	bne.n	8009772 <__swsetup_r+0x26>
 80097e8:	bd38      	pop	{r3, r4, r5, pc}
 80097ea:	0781      	lsls	r1, r0, #30
 80097ec:	bf58      	it	pl
 80097ee:	6963      	ldrpl	r3, [r4, #20]
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	e7f4      	b.n	80097de <__swsetup_r+0x92>
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7f7      	b.n	80097e8 <__swsetup_r+0x9c>
 80097f8:	2000000c 	.word	0x2000000c

080097fc <register_fini>:
 80097fc:	4b02      	ldr	r3, [pc, #8]	; (8009808 <register_fini+0xc>)
 80097fe:	b113      	cbz	r3, 8009806 <register_fini+0xa>
 8009800:	4802      	ldr	r0, [pc, #8]	; (800980c <register_fini+0x10>)
 8009802:	f000 b805 	b.w	8009810 <atexit>
 8009806:	4770      	bx	lr
 8009808:	00000000 	.word	0x00000000
 800980c:	0800a64d 	.word	0x0800a64d

08009810 <atexit>:
 8009810:	2300      	movs	r3, #0
 8009812:	4601      	mov	r1, r0
 8009814:	461a      	mov	r2, r3
 8009816:	4618      	mov	r0, r3
 8009818:	f005 bc52 	b.w	800f0c0 <__register_exitproc>

0800981c <quorem>:
 800981c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	6903      	ldr	r3, [r0, #16]
 8009822:	690c      	ldr	r4, [r1, #16]
 8009824:	42a3      	cmp	r3, r4
 8009826:	4607      	mov	r7, r0
 8009828:	f2c0 8081 	blt.w	800992e <quorem+0x112>
 800982c:	3c01      	subs	r4, #1
 800982e:	f101 0814 	add.w	r8, r1, #20
 8009832:	f100 0514 	add.w	r5, r0, #20
 8009836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009844:	3301      	adds	r3, #1
 8009846:	429a      	cmp	r2, r3
 8009848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800984c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009850:	fbb2 f6f3 	udiv	r6, r2, r3
 8009854:	d331      	bcc.n	80098ba <quorem+0x9e>
 8009856:	f04f 0e00 	mov.w	lr, #0
 800985a:	4640      	mov	r0, r8
 800985c:	46ac      	mov	ip, r5
 800985e:	46f2      	mov	sl, lr
 8009860:	f850 2b04 	ldr.w	r2, [r0], #4
 8009864:	b293      	uxth	r3, r2
 8009866:	fb06 e303 	mla	r3, r6, r3, lr
 800986a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800986e:	b29b      	uxth	r3, r3
 8009870:	ebaa 0303 	sub.w	r3, sl, r3
 8009874:	f8dc a000 	ldr.w	sl, [ip]
 8009878:	0c12      	lsrs	r2, r2, #16
 800987a:	fa13 f38a 	uxtah	r3, r3, sl
 800987e:	fb06 e202 	mla	r2, r6, r2, lr
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	9b00      	ldr	r3, [sp, #0]
 8009886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800988a:	b292      	uxth	r2, r2
 800988c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009894:	f8bd 3000 	ldrh.w	r3, [sp]
 8009898:	4581      	cmp	r9, r0
 800989a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989e:	f84c 3b04 	str.w	r3, [ip], #4
 80098a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098a6:	d2db      	bcs.n	8009860 <quorem+0x44>
 80098a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80098ac:	b92b      	cbnz	r3, 80098ba <quorem+0x9e>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	429d      	cmp	r5, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	d32e      	bcc.n	8009916 <quorem+0xfa>
 80098b8:	613c      	str	r4, [r7, #16]
 80098ba:	4638      	mov	r0, r7
 80098bc:	f001 ff8e 	bl	800b7dc <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	db24      	blt.n	800990e <quorem+0xf2>
 80098c4:	3601      	adds	r6, #1
 80098c6:	4628      	mov	r0, r5
 80098c8:	f04f 0c00 	mov.w	ip, #0
 80098cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80098d0:	f8d0 e000 	ldr.w	lr, [r0]
 80098d4:	b293      	uxth	r3, r2
 80098d6:	ebac 0303 	sub.w	r3, ip, r3
 80098da:	0c12      	lsrs	r2, r2, #16
 80098dc:	fa13 f38e 	uxtah	r3, r3, lr
 80098e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ee:	45c1      	cmp	r9, r8
 80098f0:	f840 3b04 	str.w	r3, [r0], #4
 80098f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098f8:	d2e8      	bcs.n	80098cc <quorem+0xb0>
 80098fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009902:	b922      	cbnz	r2, 800990e <quorem+0xf2>
 8009904:	3b04      	subs	r3, #4
 8009906:	429d      	cmp	r5, r3
 8009908:	461a      	mov	r2, r3
 800990a:	d30a      	bcc.n	8009922 <quorem+0x106>
 800990c:	613c      	str	r4, [r7, #16]
 800990e:	4630      	mov	r0, r6
 8009910:	b003      	add	sp, #12
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	3b04      	subs	r3, #4
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1cc      	bne.n	80098b8 <quorem+0x9c>
 800991e:	3c01      	subs	r4, #1
 8009920:	e7c7      	b.n	80098b2 <quorem+0x96>
 8009922:	6812      	ldr	r2, [r2, #0]
 8009924:	3b04      	subs	r3, #4
 8009926:	2a00      	cmp	r2, #0
 8009928:	d1f0      	bne.n	800990c <quorem+0xf0>
 800992a:	3c01      	subs	r4, #1
 800992c:	e7eb      	b.n	8009906 <quorem+0xea>
 800992e:	2000      	movs	r0, #0
 8009930:	e7ee      	b.n	8009910 <quorem+0xf4>
 8009932:	0000      	movs	r0, r0
 8009934:	0000      	movs	r0, r0
	...

08009938 <_dtoa_r>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b02 	vpush	{d8}
 8009940:	b091      	sub	sp, #68	; 0x44
 8009942:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009946:	9106      	str	r1, [sp, #24]
 8009948:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800994a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800994c:	9208      	str	r2, [sp, #32]
 800994e:	ec59 8b10 	vmov	r8, r9, d0
 8009952:	4606      	mov	r6, r0
 8009954:	930c      	str	r3, [sp, #48]	; 0x30
 8009956:	b141      	cbz	r1, 800996a <_dtoa_r+0x32>
 8009958:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800995a:	604a      	str	r2, [r1, #4]
 800995c:	2301      	movs	r3, #1
 800995e:	4093      	lsls	r3, r2
 8009960:	608b      	str	r3, [r1, #8]
 8009962:	f001 fce2 	bl	800b32a <_Bfree>
 8009966:	2300      	movs	r3, #0
 8009968:	6433      	str	r3, [r6, #64]	; 0x40
 800996a:	f1b9 0300 	subs.w	r3, r9, #0
 800996e:	bfbb      	ittet	lt
 8009970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009974:	9303      	strlt	r3, [sp, #12]
 8009976:	2300      	movge	r3, #0
 8009978:	2201      	movlt	r2, #1
 800997a:	bfac      	ite	ge
 800997c:	6023      	strge	r3, [r4, #0]
 800997e:	6022      	strlt	r2, [r4, #0]
 8009980:	4b99      	ldr	r3, [pc, #612]	; (8009be8 <_dtoa_r+0x2b0>)
 8009982:	9c03      	ldr	r4, [sp, #12]
 8009984:	43a3      	bics	r3, r4
 8009986:	d11c      	bne.n	80099c2 <_dtoa_r+0x8a>
 8009988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800998a:	f242 730f 	movw	r3, #9999	; 0x270f
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009994:	ea53 0308 	orrs.w	r3, r3, r8
 8009998:	f000 84f8 	beq.w	800a38c <_dtoa_r+0xa54>
 800999c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800999e:	b90b      	cbnz	r3, 80099a4 <_dtoa_r+0x6c>
 80099a0:	4b92      	ldr	r3, [pc, #584]	; (8009bec <_dtoa_r+0x2b4>)
 80099a2:	e01f      	b.n	80099e4 <_dtoa_r+0xac>
 80099a4:	4b91      	ldr	r3, [pc, #580]	; (8009bec <_dtoa_r+0x2b4>)
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	3303      	adds	r3, #3
 80099aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	9801      	ldr	r0, [sp, #4]
 80099b0:	b011      	add	sp, #68	; 0x44
 80099b2:	ecbd 8b02 	vpop	{d8}
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	4b8d      	ldr	r3, [pc, #564]	; (8009bf0 <_dtoa_r+0x2b8>)
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	3308      	adds	r3, #8
 80099c0:	e7f3      	b.n	80099aa <_dtoa_r+0x72>
 80099c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80099c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ce:	d10b      	bne.n	80099e8 <_dtoa_r+0xb0>
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	2301      	movs	r3, #1
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 84d4 	beq.w	800a386 <_dtoa_r+0xa4e>
 80099de:	4885      	ldr	r0, [pc, #532]	; (8009bf4 <_dtoa_r+0x2bc>)
 80099e0:	6018      	str	r0, [r3, #0]
 80099e2:	1e43      	subs	r3, r0, #1
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	e7e2      	b.n	80099ae <_dtoa_r+0x76>
 80099e8:	a90f      	add	r1, sp, #60	; 0x3c
 80099ea:	aa0e      	add	r2, sp, #56	; 0x38
 80099ec:	4630      	mov	r0, r6
 80099ee:	eeb0 0b48 	vmov.f64	d0, d8
 80099f2:	f002 f815 	bl	800ba20 <__d2b>
 80099f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80099fa:	4605      	mov	r5, r0
 80099fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d046      	beq.n	8009a90 <_dtoa_r+0x158>
 8009a02:	ee18 4a90 	vmov	r4, s17
 8009a06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a0a:	ec53 2b18 	vmov	r2, r3, d8
 8009a0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009a12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	ec43 2b16 	vmov	d6, r2, r3
 8009a20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009a24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009bd0 <_dtoa_r+0x298>
 8009a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009bd8 <_dtoa_r+0x2a0>
 8009a30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009be0 <_dtoa_r+0x2a8>
 8009a38:	ee07 1a90 	vmov	s15, r1
 8009a3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009a40:	eeb0 7b46 	vmov.f64	d7, d6
 8009a44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009a48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	ee16 ba90 	vmov	fp, s13
 8009a58:	940a      	str	r4, [sp, #40]	; 0x28
 8009a5a:	d508      	bpl.n	8009a6e <_dtoa_r+0x136>
 8009a5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a60:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a68:	bf18      	it	ne
 8009a6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009a6e:	f1bb 0f16 	cmp.w	fp, #22
 8009a72:	d82f      	bhi.n	8009ad4 <_dtoa_r+0x19c>
 8009a74:	4b60      	ldr	r3, [pc, #384]	; (8009bf8 <_dtoa_r+0x2c0>)
 8009a76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a7a:	ed93 7b00 	vldr	d7, [r3]
 8009a7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	d501      	bpl.n	8009a8c <_dtoa_r+0x154>
 8009a88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e022      	b.n	8009ad6 <_dtoa_r+0x19e>
 8009a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a92:	4401      	add	r1, r0
 8009a94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	bfc1      	itttt	gt
 8009a9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009aa0:	fa04 f303 	lslgt.w	r3, r4, r3
 8009aa4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009aa8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009aac:	bfd6      	itet	le
 8009aae:	f1c3 0320 	rsble	r3, r3, #32
 8009ab2:	ea43 0808 	orrgt.w	r8, r3, r8
 8009ab6:	fa08 f803 	lslle.w	r8, r8, r3
 8009aba:	ee07 8a90 	vmov	s15, r8
 8009abe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009ac2:	3901      	subs	r1, #1
 8009ac4:	ee17 4a90 	vmov	r4, s15
 8009ac8:	ec53 2b17 	vmov	r2, r3, d7
 8009acc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009ad0:	2401      	movs	r4, #1
 8009ad2:	e7a3      	b.n	8009a1c <_dtoa_r+0xe4>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad8:	1a43      	subs	r3, r0, r1
 8009ada:	1e5a      	subs	r2, r3, #1
 8009adc:	bf45      	ittet	mi
 8009ade:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ae2:	9304      	strmi	r3, [sp, #16]
 8009ae4:	2300      	movpl	r3, #0
 8009ae6:	2300      	movmi	r3, #0
 8009ae8:	9205      	str	r2, [sp, #20]
 8009aea:	bf54      	ite	pl
 8009aec:	9304      	strpl	r3, [sp, #16]
 8009aee:	9305      	strmi	r3, [sp, #20]
 8009af0:	f1bb 0f00 	cmp.w	fp, #0
 8009af4:	db18      	blt.n	8009b28 <_dtoa_r+0x1f0>
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009afc:	445b      	add	r3, fp
 8009afe:	9305      	str	r3, [sp, #20]
 8009b00:	2300      	movs	r3, #0
 8009b02:	9a06      	ldr	r2, [sp, #24]
 8009b04:	2a09      	cmp	r2, #9
 8009b06:	d84a      	bhi.n	8009b9e <_dtoa_r+0x266>
 8009b08:	2a05      	cmp	r2, #5
 8009b0a:	bfc4      	itt	gt
 8009b0c:	3a04      	subgt	r2, #4
 8009b0e:	9206      	strgt	r2, [sp, #24]
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	f1a2 0202 	sub.w	r2, r2, #2
 8009b16:	bfcc      	ite	gt
 8009b18:	2400      	movgt	r4, #0
 8009b1a:	2401      	movle	r4, #1
 8009b1c:	2a03      	cmp	r2, #3
 8009b1e:	d849      	bhi.n	8009bb4 <_dtoa_r+0x27c>
 8009b20:	e8df f002 	tbb	[pc, r2]
 8009b24:	3b2d2f0b 	.word	0x3b2d2f0b
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	eba3 030b 	sub.w	r3, r3, fp
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9209      	str	r2, [sp, #36]	; 0x24
 8009b34:	f1cb 0300 	rsb	r3, fp, #0
 8009b38:	e7e3      	b.n	8009b02 <_dtoa_r+0x1ca>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	dc3a      	bgt.n	8009bba <_dtoa_r+0x282>
 8009b44:	f04f 0a01 	mov.w	sl, #1
 8009b48:	46d1      	mov	r9, sl
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	f8cd a020 	str.w	sl, [sp, #32]
 8009b50:	2100      	movs	r1, #0
 8009b52:	6471      	str	r1, [r6, #68]	; 0x44
 8009b54:	2004      	movs	r0, #4
 8009b56:	f100 0714 	add.w	r7, r0, #20
 8009b5a:	4297      	cmp	r7, r2
 8009b5c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8009b5e:	d931      	bls.n	8009bc4 <_dtoa_r+0x28c>
 8009b60:	4630      	mov	r0, r6
 8009b62:	930d      	str	r3, [sp, #52]	; 0x34
 8009b64:	f001 fbbc 	bl	800b2e0 <_Balloc>
 8009b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6a:	9001      	str	r0, [sp, #4]
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d148      	bne.n	8009c04 <_dtoa_r+0x2cc>
 8009b72:	4b22      	ldr	r3, [pc, #136]	; (8009bfc <_dtoa_r+0x2c4>)
 8009b74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b78:	4821      	ldr	r0, [pc, #132]	; (8009c00 <_dtoa_r+0x2c8>)
 8009b7a:	f005 fae3 	bl	800f144 <__assert_func>
 8009b7e:	2201      	movs	r2, #1
 8009b80:	e7dc      	b.n	8009b3c <_dtoa_r+0x204>
 8009b82:	2200      	movs	r2, #0
 8009b84:	9207      	str	r2, [sp, #28]
 8009b86:	9a08      	ldr	r2, [sp, #32]
 8009b88:	eb0b 0a02 	add.w	sl, fp, r2
 8009b8c:	f10a 0901 	add.w	r9, sl, #1
 8009b90:	464a      	mov	r2, r9
 8009b92:	2a01      	cmp	r2, #1
 8009b94:	bfb8      	it	lt
 8009b96:	2201      	movlt	r2, #1
 8009b98:	e7da      	b.n	8009b50 <_dtoa_r+0x218>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	e7f2      	b.n	8009b84 <_dtoa_r+0x24c>
 8009b9e:	2401      	movs	r4, #1
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8009baa:	2100      	movs	r1, #0
 8009bac:	46d1      	mov	r9, sl
 8009bae:	2212      	movs	r2, #18
 8009bb0:	9108      	str	r1, [sp, #32]
 8009bb2:	e7cd      	b.n	8009b50 <_dtoa_r+0x218>
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	9207      	str	r2, [sp, #28]
 8009bb8:	e7f5      	b.n	8009ba6 <_dtoa_r+0x26e>
 8009bba:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009bbe:	46d1      	mov	r9, sl
 8009bc0:	4652      	mov	r2, sl
 8009bc2:	e7c5      	b.n	8009b50 <_dtoa_r+0x218>
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	6471      	str	r1, [r6, #68]	; 0x44
 8009bc8:	0040      	lsls	r0, r0, #1
 8009bca:	e7c4      	b.n	8009b56 <_dtoa_r+0x21e>
 8009bcc:	f3af 8000 	nop.w
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	7ff00000 	.word	0x7ff00000
 8009bec:	080113d5 	.word	0x080113d5
 8009bf0:	080113d9 	.word	0x080113d9
 8009bf4:	0801128c 	.word	0x0801128c
 8009bf8:	080114e0 	.word	0x080114e0
 8009bfc:	080113e2 	.word	0x080113e2
 8009c00:	080113f3 	.word	0x080113f3
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	6432      	str	r2, [r6, #64]	; 0x40
 8009c08:	f1b9 0f0e 	cmp.w	r9, #14
 8009c0c:	d86c      	bhi.n	8009ce8 <_dtoa_r+0x3b0>
 8009c0e:	2c00      	cmp	r4, #0
 8009c10:	d06a      	beq.n	8009ce8 <_dtoa_r+0x3b0>
 8009c12:	f1bb 0f00 	cmp.w	fp, #0
 8009c16:	f340 80a0 	ble.w	8009d5a <_dtoa_r+0x422>
 8009c1a:	49c1      	ldr	r1, [pc, #772]	; (8009f20 <_dtoa_r+0x5e8>)
 8009c1c:	f00b 020f 	and.w	r2, fp, #15
 8009c20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c28:	ed92 7b00 	vldr	d7, [r2]
 8009c2c:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009c30:	f000 8087 	beq.w	8009d42 <_dtoa_r+0x40a>
 8009c34:	4abb      	ldr	r2, [pc, #748]	; (8009f24 <_dtoa_r+0x5ec>)
 8009c36:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c3a:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009c3e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c42:	f001 010f 	and.w	r1, r1, #15
 8009c46:	2203      	movs	r2, #3
 8009c48:	48b6      	ldr	r0, [pc, #728]	; (8009f24 <_dtoa_r+0x5ec>)
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	d17b      	bne.n	8009d46 <_dtoa_r+0x40e>
 8009c4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	f000 80a2 	beq.w	8009da6 <_dtoa_r+0x46e>
 8009c62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009c66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c72:	f140 8098 	bpl.w	8009da6 <_dtoa_r+0x46e>
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	f000 8094 	beq.w	8009da6 <_dtoa_r+0x46e>
 8009c7e:	f1ba 0f00 	cmp.w	sl, #0
 8009c82:	dd2f      	ble.n	8009ce4 <_dtoa_r+0x3ac>
 8009c84:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c94:	3201      	adds	r2, #1
 8009c96:	4650      	mov	r0, sl
 8009c98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c9c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009ca0:	ee07 2a90 	vmov	s15, r2
 8009ca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ca8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009cac:	ee15 4a90 	vmov	r4, s11
 8009cb0:	ec52 1b15 	vmov	r1, r2, d5
 8009cb4:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d177      	bne.n	8009dac <_dtoa_r+0x474>
 8009cbc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009cc0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cc4:	ec42 1b17 	vmov	d7, r1, r2
 8009cc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd0:	f300 8262 	bgt.w	800a198 <_dtoa_r+0x860>
 8009cd4:	eeb1 7b47 	vneg.f64	d7, d7
 8009cd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce0:	f100 8257 	bmi.w	800a192 <_dtoa_r+0x85a>
 8009ce4:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	f2c0 811c 	blt.w	8009f28 <_dtoa_r+0x5f0>
 8009cf0:	f1bb 0f0e 	cmp.w	fp, #14
 8009cf4:	f300 8118 	bgt.w	8009f28 <_dtoa_r+0x5f0>
 8009cf8:	4b89      	ldr	r3, [pc, #548]	; (8009f20 <_dtoa_r+0x5e8>)
 8009cfa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cfe:	ed93 6b00 	vldr	d6, [r3]
 8009d02:	9b08      	ldr	r3, [sp, #32]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f280 80b7 	bge.w	8009e78 <_dtoa_r+0x540>
 8009d0a:	f1b9 0f00 	cmp.w	r9, #0
 8009d0e:	f300 80b3 	bgt.w	8009e78 <_dtoa_r+0x540>
 8009d12:	f040 823e 	bne.w	800a192 <_dtoa_r+0x85a>
 8009d16:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2a:	464c      	mov	r4, r9
 8009d2c:	464f      	mov	r7, r9
 8009d2e:	f280 8214 	bge.w	800a15a <_dtoa_r+0x822>
 8009d32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d36:	2331      	movs	r3, #49	; 0x31
 8009d38:	f808 3b01 	strb.w	r3, [r8], #1
 8009d3c:	f10b 0b01 	add.w	fp, fp, #1
 8009d40:	e210      	b.n	800a164 <_dtoa_r+0x82c>
 8009d42:	2202      	movs	r2, #2
 8009d44:	e780      	b.n	8009c48 <_dtoa_r+0x310>
 8009d46:	07cc      	lsls	r4, r1, #31
 8009d48:	d504      	bpl.n	8009d54 <_dtoa_r+0x41c>
 8009d4a:	ed90 6b00 	vldr	d6, [r0]
 8009d4e:	3201      	adds	r2, #1
 8009d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d54:	1049      	asrs	r1, r1, #1
 8009d56:	3008      	adds	r0, #8
 8009d58:	e777      	b.n	8009c4a <_dtoa_r+0x312>
 8009d5a:	d022      	beq.n	8009da2 <_dtoa_r+0x46a>
 8009d5c:	f1cb 0100 	rsb	r1, fp, #0
 8009d60:	4a6f      	ldr	r2, [pc, #444]	; (8009f20 <_dtoa_r+0x5e8>)
 8009d62:	f001 000f 	and.w	r0, r1, #15
 8009d66:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d6a:	ed92 7b00 	vldr	d7, [r2]
 8009d6e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009d72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d76:	486b      	ldr	r0, [pc, #428]	; (8009f24 <_dtoa_r+0x5ec>)
 8009d78:	1109      	asrs	r1, r1, #4
 8009d7a:	2400      	movs	r4, #0
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	b929      	cbnz	r1, 8009d8c <_dtoa_r+0x454>
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	f43f af6a 	beq.w	8009c5a <_dtoa_r+0x322>
 8009d86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d8a:	e766      	b.n	8009c5a <_dtoa_r+0x322>
 8009d8c:	07cf      	lsls	r7, r1, #31
 8009d8e:	d505      	bpl.n	8009d9c <_dtoa_r+0x464>
 8009d90:	ed90 6b00 	vldr	d6, [r0]
 8009d94:	3201      	adds	r2, #1
 8009d96:	2401      	movs	r4, #1
 8009d98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d9c:	1049      	asrs	r1, r1, #1
 8009d9e:	3008      	adds	r0, #8
 8009da0:	e7ed      	b.n	8009d7e <_dtoa_r+0x446>
 8009da2:	2202      	movs	r2, #2
 8009da4:	e759      	b.n	8009c5a <_dtoa_r+0x322>
 8009da6:	465f      	mov	r7, fp
 8009da8:	4648      	mov	r0, r9
 8009daa:	e775      	b.n	8009c98 <_dtoa_r+0x360>
 8009dac:	ec42 1b17 	vmov	d7, r1, r2
 8009db0:	4a5b      	ldr	r2, [pc, #364]	; (8009f20 <_dtoa_r+0x5e8>)
 8009db2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009db6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	1814      	adds	r4, r2, r0
 8009dbe:	9a07      	ldr	r2, [sp, #28]
 8009dc0:	b352      	cbz	r2, 8009e18 <_dtoa_r+0x4e0>
 8009dc2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009dc6:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009dca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009dd2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009dd6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009dda:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009dde:	ee14 2a90 	vmov	r2, s9
 8009de2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009de6:	3230      	adds	r2, #48	; 0x30
 8009de8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df4:	f808 2b01 	strb.w	r2, [r8], #1
 8009df8:	d439      	bmi.n	8009e6e <_dtoa_r+0x536>
 8009dfa:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009dfe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e06:	d472      	bmi.n	8009eee <_dtoa_r+0x5b6>
 8009e08:	45a0      	cmp	r8, r4
 8009e0a:	f43f af6b 	beq.w	8009ce4 <_dtoa_r+0x3ac>
 8009e0e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e12:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e16:	e7e0      	b.n	8009dda <_dtoa_r+0x4a2>
 8009e18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e20:	4621      	mov	r1, r4
 8009e22:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e26:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e2a:	ee14 2a90 	vmov	r2, s9
 8009e2e:	3230      	adds	r2, #48	; 0x30
 8009e30:	f808 2b01 	strb.w	r2, [r8], #1
 8009e34:	45a0      	cmp	r8, r4
 8009e36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e3a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e3e:	d118      	bne.n	8009e72 <_dtoa_r+0x53a>
 8009e40:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009e44:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e48:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e50:	dc4d      	bgt.n	8009eee <_dtoa_r+0x5b6>
 8009e52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5e:	f57f af41 	bpl.w	8009ce4 <_dtoa_r+0x3ac>
 8009e62:	4688      	mov	r8, r1
 8009e64:	3901      	subs	r1, #1
 8009e66:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009e6a:	2b30      	cmp	r3, #48	; 0x30
 8009e6c:	d0f9      	beq.n	8009e62 <_dtoa_r+0x52a>
 8009e6e:	46bb      	mov	fp, r7
 8009e70:	e02a      	b.n	8009ec8 <_dtoa_r+0x590>
 8009e72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e76:	e7d6      	b.n	8009e26 <_dtoa_r+0x4ee>
 8009e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e7c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009e80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e84:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009e88:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009e8c:	ee15 3a10 	vmov	r3, s10
 8009e90:	3330      	adds	r3, #48	; 0x30
 8009e92:	f808 3b01 	strb.w	r3, [r8], #1
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	eba8 0303 	sub.w	r3, r8, r3
 8009e9c:	4599      	cmp	r9, r3
 8009e9e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ea2:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009ea6:	d133      	bne.n	8009f10 <_dtoa_r+0x5d8>
 8009ea8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb4:	dc1a      	bgt.n	8009eec <_dtoa_r+0x5b4>
 8009eb6:	eeb4 7b46 	vcmp.f64	d7, d6
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	d103      	bne.n	8009ec8 <_dtoa_r+0x590>
 8009ec0:	ee15 3a10 	vmov	r3, s10
 8009ec4:	07d9      	lsls	r1, r3, #31
 8009ec6:	d411      	bmi.n	8009eec <_dtoa_r+0x5b4>
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f001 fa2d 	bl	800b32a <_Bfree>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed4:	f888 3000 	strb.w	r3, [r8]
 8009ed8:	f10b 0301 	add.w	r3, fp, #1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f43f ad64 	beq.w	80099ae <_dtoa_r+0x76>
 8009ee6:	f8c3 8000 	str.w	r8, [r3]
 8009eea:	e560      	b.n	80099ae <_dtoa_r+0x76>
 8009eec:	465f      	mov	r7, fp
 8009eee:	4643      	mov	r3, r8
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ef6:	2a39      	cmp	r2, #57	; 0x39
 8009ef8:	d106      	bne.n	8009f08 <_dtoa_r+0x5d0>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d1f7      	bne.n	8009ef0 <_dtoa_r+0x5b8>
 8009f00:	9901      	ldr	r1, [sp, #4]
 8009f02:	2230      	movs	r2, #48	; 0x30
 8009f04:	3701      	adds	r7, #1
 8009f06:	700a      	strb	r2, [r1, #0]
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e7ae      	b.n	8009e6e <_dtoa_r+0x536>
 8009f10:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1c:	d1b2      	bne.n	8009e84 <_dtoa_r+0x54c>
 8009f1e:	e7d3      	b.n	8009ec8 <_dtoa_r+0x590>
 8009f20:	080114e0 	.word	0x080114e0
 8009f24:	080114b8 	.word	0x080114b8
 8009f28:	9907      	ldr	r1, [sp, #28]
 8009f2a:	2900      	cmp	r1, #0
 8009f2c:	f000 80d0 	beq.w	800a0d0 <_dtoa_r+0x798>
 8009f30:	9906      	ldr	r1, [sp, #24]
 8009f32:	2901      	cmp	r1, #1
 8009f34:	f300 80b4 	bgt.w	800a0a0 <_dtoa_r+0x768>
 8009f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	f000 80ac 	beq.w	800a098 <_dtoa_r+0x760>
 8009f40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f48:	461c      	mov	r4, r3
 8009f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	9304      	str	r3, [sp, #16]
 8009f52:	9b05      	ldr	r3, [sp, #20]
 8009f54:	2101      	movs	r1, #1
 8009f56:	4413      	add	r3, r2
 8009f58:	4630      	mov	r0, r6
 8009f5a:	9305      	str	r3, [sp, #20]
 8009f5c:	f001 face 	bl	800b4fc <__i2b>
 8009f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f62:	4607      	mov	r7, r0
 8009f64:	f1b8 0f00 	cmp.w	r8, #0
 8009f68:	dd0d      	ble.n	8009f86 <_dtoa_r+0x64e>
 8009f6a:	9a05      	ldr	r2, [sp, #20]
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	dd0a      	ble.n	8009f86 <_dtoa_r+0x64e>
 8009f70:	4542      	cmp	r2, r8
 8009f72:	9904      	ldr	r1, [sp, #16]
 8009f74:	bfa8      	it	ge
 8009f76:	4642      	movge	r2, r8
 8009f78:	1a89      	subs	r1, r1, r2
 8009f7a:	9104      	str	r1, [sp, #16]
 8009f7c:	9905      	ldr	r1, [sp, #20]
 8009f7e:	eba8 0802 	sub.w	r8, r8, r2
 8009f82:	1a8a      	subs	r2, r1, r2
 8009f84:	9205      	str	r2, [sp, #20]
 8009f86:	b303      	cbz	r3, 8009fca <_dtoa_r+0x692>
 8009f88:	9a07      	ldr	r2, [sp, #28]
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	f000 80a5 	beq.w	800a0da <_dtoa_r+0x7a2>
 8009f90:	2c00      	cmp	r4, #0
 8009f92:	dd13      	ble.n	8009fbc <_dtoa_r+0x684>
 8009f94:	4639      	mov	r1, r7
 8009f96:	4622      	mov	r2, r4
 8009f98:	4630      	mov	r0, r6
 8009f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9c:	f001 fb6e 	bl	800b67c <__pow5mult>
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f001 fabe 	bl	800b528 <__multiply>
 8009fac:	4629      	mov	r1, r5
 8009fae:	900a      	str	r0, [sp, #40]	; 0x28
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f001 f9ba 	bl	800b32a <_Bfree>
 8009fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fba:	4615      	mov	r5, r2
 8009fbc:	1b1a      	subs	r2, r3, r4
 8009fbe:	d004      	beq.n	8009fca <_dtoa_r+0x692>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f001 fb5a 	bl	800b67c <__pow5mult>
 8009fc8:	4605      	mov	r5, r0
 8009fca:	2101      	movs	r1, #1
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f001 fa95 	bl	800b4fc <__i2b>
 8009fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	f340 8081 	ble.w	800a0de <_dtoa_r+0x7a6>
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4601      	mov	r1, r0
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f001 fb4b 	bl	800b67c <__pow5mult>
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	4604      	mov	r4, r0
 8009fec:	dd7a      	ble.n	800a0e4 <_dtoa_r+0x7ac>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff2:	6922      	ldr	r2, [r4, #16]
 8009ff4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ff8:	6910      	ldr	r0, [r2, #16]
 8009ffa:	f001 fa2f 	bl	800b45c <__hi0bits>
 8009ffe:	f1c0 0020 	rsb	r0, r0, #32
 800a002:	9b05      	ldr	r3, [sp, #20]
 800a004:	4418      	add	r0, r3
 800a006:	f010 001f 	ands.w	r0, r0, #31
 800a00a:	f000 808c 	beq.w	800a126 <_dtoa_r+0x7ee>
 800a00e:	f1c0 0220 	rsb	r2, r0, #32
 800a012:	2a04      	cmp	r2, #4
 800a014:	f340 8085 	ble.w	800a122 <_dtoa_r+0x7ea>
 800a018:	f1c0 001c 	rsb	r0, r0, #28
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	4403      	add	r3, r0
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	9b05      	ldr	r3, [sp, #20]
 800a024:	4403      	add	r3, r0
 800a026:	4480      	add	r8, r0
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	9b04      	ldr	r3, [sp, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd05      	ble.n	800a03c <_dtoa_r+0x704>
 800a030:	4629      	mov	r1, r5
 800a032:	461a      	mov	r2, r3
 800a034:	4630      	mov	r0, r6
 800a036:	f001 fb61 	bl	800b6fc <__lshift>
 800a03a:	4605      	mov	r5, r0
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd05      	ble.n	800a04e <_dtoa_r+0x716>
 800a042:	4621      	mov	r1, r4
 800a044:	461a      	mov	r2, r3
 800a046:	4630      	mov	r0, r6
 800a048:	f001 fb58 	bl	800b6fc <__lshift>
 800a04c:	4604      	mov	r4, r0
 800a04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d06a      	beq.n	800a12a <_dtoa_r+0x7f2>
 800a054:	4621      	mov	r1, r4
 800a056:	4628      	mov	r0, r5
 800a058:	f001 fbc0 	bl	800b7dc <__mcmp>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	da64      	bge.n	800a12a <_dtoa_r+0x7f2>
 800a060:	2300      	movs	r3, #0
 800a062:	4629      	mov	r1, r5
 800a064:	220a      	movs	r2, #10
 800a066:	4630      	mov	r0, r6
 800a068:	f001 f968 	bl	800b33c <__multadd>
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a072:	4605      	mov	r5, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 8190 	beq.w	800a39a <_dtoa_r+0xa62>
 800a07a:	4639      	mov	r1, r7
 800a07c:	2300      	movs	r3, #0
 800a07e:	220a      	movs	r2, #10
 800a080:	4630      	mov	r0, r6
 800a082:	f001 f95b 	bl	800b33c <__multadd>
 800a086:	f1ba 0f00 	cmp.w	sl, #0
 800a08a:	4607      	mov	r7, r0
 800a08c:	f300 808d 	bgt.w	800a1aa <_dtoa_r+0x872>
 800a090:	9b06      	ldr	r3, [sp, #24]
 800a092:	2b02      	cmp	r3, #2
 800a094:	dc50      	bgt.n	800a138 <_dtoa_r+0x800>
 800a096:	e088      	b.n	800a1aa <_dtoa_r+0x872>
 800a098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a09a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a09e:	e751      	b.n	8009f44 <_dtoa_r+0x60c>
 800a0a0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	bfbf      	itttt	lt
 800a0a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a0aa:	1ae3      	sublt	r3, r4, r3
 800a0ac:	18d2      	addlt	r2, r2, r3
 800a0ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a0b0:	bfb6      	itet	lt
 800a0b2:	4623      	movlt	r3, r4
 800a0b4:	1b1c      	subge	r4, r3, r4
 800a0b6:	2400      	movlt	r4, #0
 800a0b8:	f1b9 0f00 	cmp.w	r9, #0
 800a0bc:	bfb5      	itete	lt
 800a0be:	9a04      	ldrlt	r2, [sp, #16]
 800a0c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a0c4:	eba2 0809 	sublt.w	r8, r2, r9
 800a0c8:	464a      	movge	r2, r9
 800a0ca:	bfb8      	it	lt
 800a0cc:	2200      	movlt	r2, #0
 800a0ce:	e73c      	b.n	8009f4a <_dtoa_r+0x612>
 800a0d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0d4:	9f07      	ldr	r7, [sp, #28]
 800a0d6:	461c      	mov	r4, r3
 800a0d8:	e744      	b.n	8009f64 <_dtoa_r+0x62c>
 800a0da:	461a      	mov	r2, r3
 800a0dc:	e770      	b.n	8009fc0 <_dtoa_r+0x688>
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	dc18      	bgt.n	800a116 <_dtoa_r+0x7de>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	b9b3      	cbnz	r3, 800a116 <_dtoa_r+0x7de>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a0ee:	b9a2      	cbnz	r2, 800a11a <_dtoa_r+0x7e2>
 800a0f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0f4:	0d12      	lsrs	r2, r2, #20
 800a0f6:	0512      	lsls	r2, r2, #20
 800a0f8:	b18a      	cbz	r2, 800a11e <_dtoa_r+0x7e6>
 800a0fa:	9b04      	ldr	r3, [sp, #16]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	3301      	adds	r3, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	2301      	movs	r3, #1
 800a108:	930a      	str	r3, [sp, #40]	; 0x28
 800a10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f47f af70 	bne.w	8009ff2 <_dtoa_r+0x6ba>
 800a112:	2001      	movs	r0, #1
 800a114:	e775      	b.n	800a002 <_dtoa_r+0x6ca>
 800a116:	2300      	movs	r3, #0
 800a118:	e7f6      	b.n	800a108 <_dtoa_r+0x7d0>
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	e7f4      	b.n	800a108 <_dtoa_r+0x7d0>
 800a11e:	920a      	str	r2, [sp, #40]	; 0x28
 800a120:	e7f3      	b.n	800a10a <_dtoa_r+0x7d2>
 800a122:	d082      	beq.n	800a02a <_dtoa_r+0x6f2>
 800a124:	4610      	mov	r0, r2
 800a126:	301c      	adds	r0, #28
 800a128:	e778      	b.n	800a01c <_dtoa_r+0x6e4>
 800a12a:	f1b9 0f00 	cmp.w	r9, #0
 800a12e:	dc37      	bgt.n	800a1a0 <_dtoa_r+0x868>
 800a130:	9b06      	ldr	r3, [sp, #24]
 800a132:	2b02      	cmp	r3, #2
 800a134:	dd34      	ble.n	800a1a0 <_dtoa_r+0x868>
 800a136:	46ca      	mov	sl, r9
 800a138:	f1ba 0f00 	cmp.w	sl, #0
 800a13c:	d10d      	bne.n	800a15a <_dtoa_r+0x822>
 800a13e:	4621      	mov	r1, r4
 800a140:	4653      	mov	r3, sl
 800a142:	2205      	movs	r2, #5
 800a144:	4630      	mov	r0, r6
 800a146:	f001 f8f9 	bl	800b33c <__multadd>
 800a14a:	4601      	mov	r1, r0
 800a14c:	4604      	mov	r4, r0
 800a14e:	4628      	mov	r0, r5
 800a150:	f001 fb44 	bl	800b7dc <__mcmp>
 800a154:	2800      	cmp	r0, #0
 800a156:	f73f adec 	bgt.w	8009d32 <_dtoa_r+0x3fa>
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a160:	ea6f 0b03 	mvn.w	fp, r3
 800a164:	f04f 0900 	mov.w	r9, #0
 800a168:	4621      	mov	r1, r4
 800a16a:	4630      	mov	r0, r6
 800a16c:	f001 f8dd 	bl	800b32a <_Bfree>
 800a170:	2f00      	cmp	r7, #0
 800a172:	f43f aea9 	beq.w	8009ec8 <_dtoa_r+0x590>
 800a176:	f1b9 0f00 	cmp.w	r9, #0
 800a17a:	d005      	beq.n	800a188 <_dtoa_r+0x850>
 800a17c:	45b9      	cmp	r9, r7
 800a17e:	d003      	beq.n	800a188 <_dtoa_r+0x850>
 800a180:	4649      	mov	r1, r9
 800a182:	4630      	mov	r0, r6
 800a184:	f001 f8d1 	bl	800b32a <_Bfree>
 800a188:	4639      	mov	r1, r7
 800a18a:	4630      	mov	r0, r6
 800a18c:	f001 f8cd 	bl	800b32a <_Bfree>
 800a190:	e69a      	b.n	8009ec8 <_dtoa_r+0x590>
 800a192:	2400      	movs	r4, #0
 800a194:	4627      	mov	r7, r4
 800a196:	e7e0      	b.n	800a15a <_dtoa_r+0x822>
 800a198:	46bb      	mov	fp, r7
 800a19a:	4604      	mov	r4, r0
 800a19c:	4607      	mov	r7, r0
 800a19e:	e5c8      	b.n	8009d32 <_dtoa_r+0x3fa>
 800a1a0:	9b07      	ldr	r3, [sp, #28]
 800a1a2:	46ca      	mov	sl, r9
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80ff 	beq.w	800a3a8 <_dtoa_r+0xa70>
 800a1aa:	f1b8 0f00 	cmp.w	r8, #0
 800a1ae:	dd05      	ble.n	800a1bc <_dtoa_r+0x884>
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4642      	mov	r2, r8
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f001 faa1 	bl	800b6fc <__lshift>
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d05c      	beq.n	800a27c <_dtoa_r+0x944>
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f001 f88b 	bl	800b2e0 <_Balloc>
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	b920      	cbnz	r0, 800a1d8 <_dtoa_r+0x8a0>
 800a1ce:	4b82      	ldr	r3, [pc, #520]	; (800a3d8 <_dtoa_r+0xaa0>)
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1d6:	e4cf      	b.n	8009b78 <_dtoa_r+0x240>
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	3202      	adds	r2, #2
 800a1dc:	0092      	lsls	r2, r2, #2
 800a1de:	f107 010c 	add.w	r1, r7, #12
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	f001 f848 	bl	800b278 <memcpy>
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4641      	mov	r1, r8
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f001 fa85 	bl	800b6fc <__lshift>
 800a1f2:	9b01      	ldr	r3, [sp, #4]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	9304      	str	r3, [sp, #16]
 800a1f8:	9b01      	ldr	r3, [sp, #4]
 800a1fa:	4453      	add	r3, sl
 800a1fc:	9308      	str	r3, [sp, #32]
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	46b9      	mov	r9, r7
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	4607      	mov	r7, r0
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	4621      	mov	r1, r4
 800a20e:	3b01      	subs	r3, #1
 800a210:	4628      	mov	r0, r5
 800a212:	9302      	str	r3, [sp, #8]
 800a214:	f7ff fb02 	bl	800981c <quorem>
 800a218:	4603      	mov	r3, r0
 800a21a:	3330      	adds	r3, #48	; 0x30
 800a21c:	9005      	str	r0, [sp, #20]
 800a21e:	4649      	mov	r1, r9
 800a220:	4628      	mov	r0, r5
 800a222:	9309      	str	r3, [sp, #36]	; 0x24
 800a224:	f001 fada 	bl	800b7dc <__mcmp>
 800a228:	463a      	mov	r2, r7
 800a22a:	4682      	mov	sl, r0
 800a22c:	4621      	mov	r1, r4
 800a22e:	4630      	mov	r0, r6
 800a230:	f001 faf0 	bl	800b814 <__mdiff>
 800a234:	68c2      	ldr	r2, [r0, #12]
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	4680      	mov	r8, r0
 800a23a:	bb0a      	cbnz	r2, 800a280 <_dtoa_r+0x948>
 800a23c:	4601      	mov	r1, r0
 800a23e:	4628      	mov	r0, r5
 800a240:	f001 facc 	bl	800b7dc <__mcmp>
 800a244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a246:	4602      	mov	r2, r0
 800a248:	4641      	mov	r1, r8
 800a24a:	4630      	mov	r0, r6
 800a24c:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a250:	f001 f86b 	bl	800b32a <_Bfree>
 800a254:	9b06      	ldr	r3, [sp, #24]
 800a256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a258:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a25c:	ea43 0102 	orr.w	r1, r3, r2
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	430b      	orrs	r3, r1
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	d10d      	bne.n	800a284 <_dtoa_r+0x94c>
 800a268:	2b39      	cmp	r3, #57	; 0x39
 800a26a:	d029      	beq.n	800a2c0 <_dtoa_r+0x988>
 800a26c:	f1ba 0f00 	cmp.w	sl, #0
 800a270:	dd01      	ble.n	800a276 <_dtoa_r+0x93e>
 800a272:	9b05      	ldr	r3, [sp, #20]
 800a274:	3331      	adds	r3, #49	; 0x31
 800a276:	9a02      	ldr	r2, [sp, #8]
 800a278:	7013      	strb	r3, [r2, #0]
 800a27a:	e775      	b.n	800a168 <_dtoa_r+0x830>
 800a27c:	4638      	mov	r0, r7
 800a27e:	e7b8      	b.n	800a1f2 <_dtoa_r+0x8ba>
 800a280:	2201      	movs	r2, #1
 800a282:	e7e1      	b.n	800a248 <_dtoa_r+0x910>
 800a284:	f1ba 0f00 	cmp.w	sl, #0
 800a288:	db06      	blt.n	800a298 <_dtoa_r+0x960>
 800a28a:	9906      	ldr	r1, [sp, #24]
 800a28c:	ea41 0a0a 	orr.w	sl, r1, sl
 800a290:	9907      	ldr	r1, [sp, #28]
 800a292:	ea5a 0101 	orrs.w	r1, sl, r1
 800a296:	d120      	bne.n	800a2da <_dtoa_r+0x9a2>
 800a298:	2a00      	cmp	r2, #0
 800a29a:	ddec      	ble.n	800a276 <_dtoa_r+0x93e>
 800a29c:	4629      	mov	r1, r5
 800a29e:	2201      	movs	r2, #1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	f001 fa2a 	bl	800b6fc <__lshift>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	f001 fa96 	bl	800b7dc <__mcmp>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	9b04      	ldr	r3, [sp, #16]
 800a2b4:	dc02      	bgt.n	800a2bc <_dtoa_r+0x984>
 800a2b6:	d1de      	bne.n	800a276 <_dtoa_r+0x93e>
 800a2b8:	07da      	lsls	r2, r3, #31
 800a2ba:	d5dc      	bpl.n	800a276 <_dtoa_r+0x93e>
 800a2bc:	2b39      	cmp	r3, #57	; 0x39
 800a2be:	d1d8      	bne.n	800a272 <_dtoa_r+0x93a>
 800a2c0:	9a02      	ldr	r2, [sp, #8]
 800a2c2:	2339      	movs	r3, #57	; 0x39
 800a2c4:	7013      	strb	r3, [r2, #0]
 800a2c6:	4643      	mov	r3, r8
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a2d0:	2a39      	cmp	r2, #57	; 0x39
 800a2d2:	d051      	beq.n	800a378 <_dtoa_r+0xa40>
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e746      	b.n	800a168 <_dtoa_r+0x830>
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	dd03      	ble.n	800a2e6 <_dtoa_r+0x9ae>
 800a2de:	2b39      	cmp	r3, #57	; 0x39
 800a2e0:	d0ee      	beq.n	800a2c0 <_dtoa_r+0x988>
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	e7c7      	b.n	800a276 <_dtoa_r+0x93e>
 800a2e6:	9a04      	ldr	r2, [sp, #16]
 800a2e8:	9908      	ldr	r1, [sp, #32]
 800a2ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2ee:	428a      	cmp	r2, r1
 800a2f0:	d02b      	beq.n	800a34a <_dtoa_r+0xa12>
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f001 f81f 	bl	800b33c <__multadd>
 800a2fe:	45b9      	cmp	r9, r7
 800a300:	4605      	mov	r5, r0
 800a302:	f04f 0300 	mov.w	r3, #0
 800a306:	f04f 020a 	mov.w	r2, #10
 800a30a:	4649      	mov	r1, r9
 800a30c:	4630      	mov	r0, r6
 800a30e:	d107      	bne.n	800a320 <_dtoa_r+0x9e8>
 800a310:	f001 f814 	bl	800b33c <__multadd>
 800a314:	4681      	mov	r9, r0
 800a316:	4607      	mov	r7, r0
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	3301      	adds	r3, #1
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	e774      	b.n	800a20a <_dtoa_r+0x8d2>
 800a320:	f001 f80c 	bl	800b33c <__multadd>
 800a324:	4639      	mov	r1, r7
 800a326:	4681      	mov	r9, r0
 800a328:	2300      	movs	r3, #0
 800a32a:	220a      	movs	r2, #10
 800a32c:	4630      	mov	r0, r6
 800a32e:	f001 f805 	bl	800b33c <__multadd>
 800a332:	4607      	mov	r7, r0
 800a334:	e7f0      	b.n	800a318 <_dtoa_r+0x9e0>
 800a336:	f1ba 0f00 	cmp.w	sl, #0
 800a33a:	9a01      	ldr	r2, [sp, #4]
 800a33c:	bfcc      	ite	gt
 800a33e:	46d0      	movgt	r8, sl
 800a340:	f04f 0801 	movle.w	r8, #1
 800a344:	4490      	add	r8, r2
 800a346:	f04f 0900 	mov.w	r9, #0
 800a34a:	4629      	mov	r1, r5
 800a34c:	2201      	movs	r2, #1
 800a34e:	4630      	mov	r0, r6
 800a350:	9302      	str	r3, [sp, #8]
 800a352:	f001 f9d3 	bl	800b6fc <__lshift>
 800a356:	4621      	mov	r1, r4
 800a358:	4605      	mov	r5, r0
 800a35a:	f001 fa3f 	bl	800b7dc <__mcmp>
 800a35e:	2800      	cmp	r0, #0
 800a360:	dcb1      	bgt.n	800a2c6 <_dtoa_r+0x98e>
 800a362:	d102      	bne.n	800a36a <_dtoa_r+0xa32>
 800a364:	9b02      	ldr	r3, [sp, #8]
 800a366:	07db      	lsls	r3, r3, #31
 800a368:	d4ad      	bmi.n	800a2c6 <_dtoa_r+0x98e>
 800a36a:	4643      	mov	r3, r8
 800a36c:	4698      	mov	r8, r3
 800a36e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a372:	2a30      	cmp	r2, #48	; 0x30
 800a374:	d0fa      	beq.n	800a36c <_dtoa_r+0xa34>
 800a376:	e6f7      	b.n	800a168 <_dtoa_r+0x830>
 800a378:	9a01      	ldr	r2, [sp, #4]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d1a4      	bne.n	800a2c8 <_dtoa_r+0x990>
 800a37e:	f10b 0b01 	add.w	fp, fp, #1
 800a382:	2331      	movs	r3, #49	; 0x31
 800a384:	e778      	b.n	800a278 <_dtoa_r+0x940>
 800a386:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <_dtoa_r+0xaa4>)
 800a388:	f7ff bb2c 	b.w	80099e4 <_dtoa_r+0xac>
 800a38c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f47f ab13 	bne.w	80099ba <_dtoa_r+0x82>
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <_dtoa_r+0xaa8>)
 800a396:	f7ff bb25 	b.w	80099e4 <_dtoa_r+0xac>
 800a39a:	f1ba 0f00 	cmp.w	sl, #0
 800a39e:	dc03      	bgt.n	800a3a8 <_dtoa_r+0xa70>
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	f73f aec8 	bgt.w	800a138 <_dtoa_r+0x800>
 800a3a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f7ff fa34 	bl	800981c <quorem>
 800a3b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3b8:	f808 3b01 	strb.w	r3, [r8], #1
 800a3bc:	9a01      	ldr	r2, [sp, #4]
 800a3be:	eba8 0202 	sub.w	r2, r8, r2
 800a3c2:	4592      	cmp	sl, r2
 800a3c4:	ddb7      	ble.n	800a336 <_dtoa_r+0x9fe>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	220a      	movs	r2, #10
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f000 ffb5 	bl	800b33c <__multadd>
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	e7ea      	b.n	800a3ac <_dtoa_r+0xa74>
 800a3d6:	bf00      	nop
 800a3d8:	080113e2 	.word	0x080113e2
 800a3dc:	0801128b 	.word	0x0801128b
 800a3e0:	080113d9 	.word	0x080113d9

0800a3e4 <__sflush_r>:
 800a3e4:	898b      	ldrh	r3, [r1, #12]
 800a3e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	0718      	lsls	r0, r3, #28
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	d45f      	bmi.n	800a4b6 <__sflush_r+0xd2>
 800a3f6:	684b      	ldr	r3, [r1, #4]
 800a3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	818a      	strh	r2, [r1, #12]
 800a400:	dc05      	bgt.n	800a40e <__sflush_r+0x2a>
 800a402:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc02      	bgt.n	800a40e <__sflush_r+0x2a>
 800a408:	2000      	movs	r0, #0
 800a40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a410:	2e00      	cmp	r6, #0
 800a412:	d0f9      	beq.n	800a408 <__sflush_r+0x24>
 800a414:	2300      	movs	r3, #0
 800a416:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a41a:	682f      	ldr	r7, [r5, #0]
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	d036      	beq.n	800a48e <__sflush_r+0xaa>
 800a420:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	075a      	lsls	r2, r3, #29
 800a426:	d505      	bpl.n	800a434 <__sflush_r+0x50>
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	1ac0      	subs	r0, r0, r3
 800a42c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a42e:	b10b      	cbz	r3, 800a434 <__sflush_r+0x50>
 800a430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a432:	1ac0      	subs	r0, r0, r3
 800a434:	2300      	movs	r3, #0
 800a436:	4602      	mov	r2, r0
 800a438:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a43a:	69e1      	ldr	r1, [r4, #28]
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b0      	blx	r6
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	d106      	bne.n	800a454 <__sflush_r+0x70>
 800a446:	6829      	ldr	r1, [r5, #0]
 800a448:	291d      	cmp	r1, #29
 800a44a:	d830      	bhi.n	800a4ae <__sflush_r+0xca>
 800a44c:	4a2b      	ldr	r2, [pc, #172]	; (800a4fc <__sflush_r+0x118>)
 800a44e:	40ca      	lsrs	r2, r1
 800a450:	07d6      	lsls	r6, r2, #31
 800a452:	d52c      	bpl.n	800a4ae <__sflush_r+0xca>
 800a454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a458:	b21b      	sxth	r3, r3
 800a45a:	2200      	movs	r2, #0
 800a45c:	6062      	str	r2, [r4, #4]
 800a45e:	04d9      	lsls	r1, r3, #19
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	6022      	str	r2, [r4, #0]
 800a466:	d504      	bpl.n	800a472 <__sflush_r+0x8e>
 800a468:	1c42      	adds	r2, r0, #1
 800a46a:	d101      	bne.n	800a470 <__sflush_r+0x8c>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b903      	cbnz	r3, 800a472 <__sflush_r+0x8e>
 800a470:	6520      	str	r0, [r4, #80]	; 0x50
 800a472:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a474:	602f      	str	r7, [r5, #0]
 800a476:	2900      	cmp	r1, #0
 800a478:	d0c6      	beq.n	800a408 <__sflush_r+0x24>
 800a47a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a47e:	4299      	cmp	r1, r3
 800a480:	d002      	beq.n	800a488 <__sflush_r+0xa4>
 800a482:	4628      	mov	r0, r5
 800a484:	f000 f9b2 	bl	800a7ec <_free_r>
 800a488:	2000      	movs	r0, #0
 800a48a:	6320      	str	r0, [r4, #48]	; 0x30
 800a48c:	e7bd      	b.n	800a40a <__sflush_r+0x26>
 800a48e:	69e1      	ldr	r1, [r4, #28]
 800a490:	2301      	movs	r3, #1
 800a492:	4628      	mov	r0, r5
 800a494:	47b0      	blx	r6
 800a496:	1c41      	adds	r1, r0, #1
 800a498:	d1c3      	bne.n	800a422 <__sflush_r+0x3e>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0c0      	beq.n	800a422 <__sflush_r+0x3e>
 800a4a0:	2b1d      	cmp	r3, #29
 800a4a2:	d001      	beq.n	800a4a8 <__sflush_r+0xc4>
 800a4a4:	2b16      	cmp	r3, #22
 800a4a6:	d101      	bne.n	800a4ac <__sflush_r+0xc8>
 800a4a8:	602f      	str	r7, [r5, #0]
 800a4aa:	e7ad      	b.n	800a408 <__sflush_r+0x24>
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	e7a9      	b.n	800a40a <__sflush_r+0x26>
 800a4b6:	690f      	ldr	r7, [r1, #16]
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	d0a5      	beq.n	800a408 <__sflush_r+0x24>
 800a4bc:	079b      	lsls	r3, r3, #30
 800a4be:	680e      	ldr	r6, [r1, #0]
 800a4c0:	bf08      	it	eq
 800a4c2:	694b      	ldreq	r3, [r1, #20]
 800a4c4:	600f      	str	r7, [r1, #0]
 800a4c6:	bf18      	it	ne
 800a4c8:	2300      	movne	r3, #0
 800a4ca:	eba6 0807 	sub.w	r8, r6, r7
 800a4ce:	608b      	str	r3, [r1, #8]
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	dd98      	ble.n	800a408 <__sflush_r+0x24>
 800a4d6:	69e1      	ldr	r1, [r4, #28]
 800a4d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4da:	4643      	mov	r3, r8
 800a4dc:	463a      	mov	r2, r7
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b0      	blx	r6
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	dc06      	bgt.n	800a4f4 <__sflush_r+0x110>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	e78a      	b.n	800a40a <__sflush_r+0x26>
 800a4f4:	4407      	add	r7, r0
 800a4f6:	eba8 0800 	sub.w	r8, r8, r0
 800a4fa:	e7e9      	b.n	800a4d0 <__sflush_r+0xec>
 800a4fc:	20400001 	.word	0x20400001

0800a500 <_fflush_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	460c      	mov	r4, r1
 800a504:	4605      	mov	r5, r0
 800a506:	b118      	cbz	r0, 800a510 <_fflush_r+0x10>
 800a508:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a50a:	b90b      	cbnz	r3, 800a510 <_fflush_r+0x10>
 800a50c:	f000 f876 	bl	800a5fc <__sinit>
 800a510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a514:	b1bb      	cbz	r3, 800a546 <_fflush_r+0x46>
 800a516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a518:	07d0      	lsls	r0, r2, #31
 800a51a:	d404      	bmi.n	800a526 <_fflush_r+0x26>
 800a51c:	0599      	lsls	r1, r3, #22
 800a51e:	d402      	bmi.n	800a526 <_fflush_r+0x26>
 800a520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a522:	f000 fbc3 	bl	800acac <__retarget_lock_acquire_recursive>
 800a526:	4628      	mov	r0, r5
 800a528:	4621      	mov	r1, r4
 800a52a:	f7ff ff5b 	bl	800a3e4 <__sflush_r>
 800a52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a530:	07da      	lsls	r2, r3, #31
 800a532:	4605      	mov	r5, r0
 800a534:	d405      	bmi.n	800a542 <_fflush_r+0x42>
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	059b      	lsls	r3, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_fflush_r+0x42>
 800a53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53e:	f000 fbb6 	bl	800acae <__retarget_lock_release_recursive>
 800a542:	4628      	mov	r0, r5
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	461d      	mov	r5, r3
 800a548:	e7fb      	b.n	800a542 <_fflush_r+0x42>
	...

0800a54c <fflush>:
 800a54c:	4601      	mov	r1, r0
 800a54e:	b920      	cbnz	r0, 800a55a <fflush+0xe>
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <fflush+0x18>)
 800a552:	4905      	ldr	r1, [pc, #20]	; (800a568 <fflush+0x1c>)
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f000 bb70 	b.w	800ac3a <_fwalk_reent>
 800a55a:	4b04      	ldr	r3, [pc, #16]	; (800a56c <fflush+0x20>)
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f7ff bfcf 	b.w	800a500 <_fflush_r>
 800a562:	bf00      	nop
 800a564:	08011230 	.word	0x08011230
 800a568:	0800a501 	.word	0x0800a501
 800a56c:	2000000c 	.word	0x2000000c

0800a570 <std>:
 800a570:	2300      	movs	r3, #0
 800a572:	b510      	push	{r4, lr}
 800a574:	4604      	mov	r4, r0
 800a576:	e9c0 3300 	strd	r3, r3, [r0]
 800a57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a57e:	6083      	str	r3, [r0, #8]
 800a580:	8181      	strh	r1, [r0, #12]
 800a582:	6643      	str	r3, [r0, #100]	; 0x64
 800a584:	81c2      	strh	r2, [r0, #14]
 800a586:	6183      	str	r3, [r0, #24]
 800a588:	4619      	mov	r1, r3
 800a58a:	2208      	movs	r2, #8
 800a58c:	305c      	adds	r0, #92	; 0x5c
 800a58e:	f7fc fab1 	bl	8006af4 <memset>
 800a592:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <std+0x40>)
 800a594:	6223      	str	r3, [r4, #32]
 800a596:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <std+0x44>)
 800a598:	6263      	str	r3, [r4, #36]	; 0x24
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <std+0x48>)
 800a59c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a59e:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <std+0x4c>)
 800a5a0:	61e4      	str	r4, [r4, #28]
 800a5a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ac:	f000 bb7c 	b.w	800aca8 <__retarget_lock_init_recursive>
 800a5b0:	0800c17d 	.word	0x0800c17d
 800a5b4:	0800c19f 	.word	0x0800c19f
 800a5b8:	0800c1d7 	.word	0x0800c1d7
 800a5bc:	0800c1fb 	.word	0x0800c1fb

0800a5c0 <_cleanup_r>:
 800a5c0:	4901      	ldr	r1, [pc, #4]	; (800a5c8 <_cleanup_r+0x8>)
 800a5c2:	f000 bb3a 	b.w	800ac3a <_fwalk_reent>
 800a5c6:	bf00      	nop
 800a5c8:	0800f20d 	.word	0x0800f20d

0800a5cc <__sfp_lock_acquire>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sfp_lock_acquire+0x8>)
 800a5ce:	f000 bb6d 	b.w	800acac <__retarget_lock_acquire_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20000b16 	.word	0x20000b16

0800a5d8 <__sfp_lock_release>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sfp_lock_release+0x8>)
 800a5da:	f000 bb68 	b.w	800acae <__retarget_lock_release_recursive>
 800a5de:	bf00      	nop
 800a5e0:	20000b16 	.word	0x20000b16

0800a5e4 <__sinit_lock_acquire>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__sinit_lock_acquire+0x8>)
 800a5e6:	f000 bb61 	b.w	800acac <__retarget_lock_acquire_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	20000b17 	.word	0x20000b17

0800a5f0 <__sinit_lock_release>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <__sinit_lock_release+0x8>)
 800a5f2:	f000 bb5c 	b.w	800acae <__retarget_lock_release_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20000b17 	.word	0x20000b17

0800a5fc <__sinit>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4604      	mov	r4, r0
 800a600:	f7ff fff0 	bl	800a5e4 <__sinit_lock_acquire>
 800a604:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a606:	b11a      	cbz	r2, 800a610 <__sinit+0x14>
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60c:	f7ff bff0 	b.w	800a5f0 <__sinit_lock_release>
 800a610:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <__sinit+0x4c>)
 800a612:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a614:	2303      	movs	r3, #3
 800a616:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a61a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a61e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a622:	6860      	ldr	r0, [r4, #4]
 800a624:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a628:	2104      	movs	r1, #4
 800a62a:	f7ff ffa1 	bl	800a570 <std>
 800a62e:	68a0      	ldr	r0, [r4, #8]
 800a630:	2201      	movs	r2, #1
 800a632:	2109      	movs	r1, #9
 800a634:	f7ff ff9c 	bl	800a570 <std>
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	2202      	movs	r2, #2
 800a63c:	2112      	movs	r1, #18
 800a63e:	f7ff ff97 	bl	800a570 <std>
 800a642:	2301      	movs	r3, #1
 800a644:	63a3      	str	r3, [r4, #56]	; 0x38
 800a646:	e7df      	b.n	800a608 <__sinit+0xc>
 800a648:	0800a5c1 	.word	0x0800a5c1

0800a64c <__libc_fini_array>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d07      	ldr	r5, [pc, #28]	; (800a66c <__libc_fini_array+0x20>)
 800a650:	4c07      	ldr	r4, [pc, #28]	; (800a670 <__libc_fini_array+0x24>)
 800a652:	1b64      	subs	r4, r4, r5
 800a654:	10a4      	asrs	r4, r4, #2
 800a656:	b91c      	cbnz	r4, 800a660 <__libc_fini_array+0x14>
 800a658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65c:	f005 beb8 	b.w	80103d0 <_fini>
 800a660:	3c01      	subs	r4, #1
 800a662:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a666:	4798      	blx	r3
 800a668:	e7f5      	b.n	800a656 <__libc_fini_array+0xa>
 800a66a:	bf00      	nop
 800a66c:	08012fc0 	.word	0x08012fc0
 800a670:	08012fc4 	.word	0x08012fc4

0800a674 <_fread_r>:
 800a674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	461e      	mov	r6, r3
 800a67a:	4613      	mov	r3, r2
 800a67c:	4373      	muls	r3, r6
 800a67e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a680:	4681      	mov	r9, r0
 800a682:	4688      	mov	r8, r1
 800a684:	4692      	mov	sl, r2
 800a686:	469b      	mov	fp, r3
 800a688:	d05a      	beq.n	800a740 <_fread_r+0xcc>
 800a68a:	b118      	cbz	r0, 800a694 <_fread_r+0x20>
 800a68c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a68e:	b90b      	cbnz	r3, 800a694 <_fread_r+0x20>
 800a690:	f7ff ffb4 	bl	800a5fc <__sinit>
 800a694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a696:	07db      	lsls	r3, r3, #31
 800a698:	d405      	bmi.n	800a6a6 <_fread_r+0x32>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	059f      	lsls	r7, r3, #22
 800a69e:	d402      	bmi.n	800a6a6 <_fread_r+0x32>
 800a6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a2:	f000 fb03 	bl	800acac <__retarget_lock_acquire_recursive>
 800a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6aa:	049d      	lsls	r5, r3, #18
 800a6ac:	d406      	bmi.n	800a6bc <_fread_r+0x48>
 800a6ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6ba:	6663      	str	r3, [r4, #100]	; 0x64
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	da01      	bge.n	800a6c6 <_fread_r+0x52>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	465f      	mov	r7, fp
 800a6c8:	e9d4 1500 	ldrd	r1, r5, [r4]
 800a6cc:	42af      	cmp	r7, r5
 800a6ce:	d813      	bhi.n	800a6f8 <_fread_r+0x84>
 800a6d0:	463a      	mov	r2, r7
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	f000 fdd0 	bl	800b278 <memcpy>
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	1bdb      	subs	r3, r3, r7
 800a6dc:	6063      	str	r3, [r4, #4]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	443b      	add	r3, r7
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e6:	07da      	lsls	r2, r3, #31
 800a6e8:	d424      	bmi.n	800a734 <_fread_r+0xc0>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	059b      	lsls	r3, r3, #22
 800a6ee:	d421      	bmi.n	800a734 <_fread_r+0xc0>
 800a6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f2:	f000 fadc 	bl	800acae <__retarget_lock_release_recursive>
 800a6f6:	e01d      	b.n	800a734 <_fread_r+0xc0>
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f000 fdbc 	bl	800b278 <memcpy>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	442b      	add	r3, r5
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	4621      	mov	r1, r4
 800a708:	1b7b      	subs	r3, r7, r5
 800a70a:	4648      	mov	r0, r9
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	f001 fc0d 	bl	800bf2c <__srefill_r>
 800a712:	44a8      	add	r8, r5
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	b188      	cbz	r0, 800a73c <_fread_r+0xc8>
 800a718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a71a:	07d8      	lsls	r0, r3, #31
 800a71c:	d405      	bmi.n	800a72a <_fread_r+0xb6>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	0599      	lsls	r1, r3, #22
 800a722:	d402      	bmi.n	800a72a <_fread_r+0xb6>
 800a724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a726:	f000 fac2 	bl	800acae <__retarget_lock_release_recursive>
 800a72a:	eb05 060b 	add.w	r6, r5, fp
 800a72e:	1bf6      	subs	r6, r6, r7
 800a730:	fbb6 f6fa 	udiv	r6, r6, sl
 800a734:	4630      	mov	r0, r6
 800a736:	b003      	add	sp, #12
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	461f      	mov	r7, r3
 800a73e:	e7c3      	b.n	800a6c8 <_fread_r+0x54>
 800a740:	461e      	mov	r6, r3
 800a742:	e7f7      	b.n	800a734 <_fread_r+0xc0>

0800a744 <_malloc_trim_r>:
 800a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	4606      	mov	r6, r0
 800a74a:	2008      	movs	r0, #8
 800a74c:	460c      	mov	r4, r1
 800a74e:	f003 feb9 	bl	800e4c4 <sysconf>
 800a752:	4f23      	ldr	r7, [pc, #140]	; (800a7e0 <_malloc_trim_r+0x9c>)
 800a754:	4680      	mov	r8, r0
 800a756:	4630      	mov	r0, r6
 800a758:	f000 fdb6 	bl	800b2c8 <__malloc_lock>
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	685d      	ldr	r5, [r3, #4]
 800a760:	f025 0503 	bic.w	r5, r5, #3
 800a764:	1b2c      	subs	r4, r5, r4
 800a766:	3c11      	subs	r4, #17
 800a768:	4444      	add	r4, r8
 800a76a:	fbb4 f4f8 	udiv	r4, r4, r8
 800a76e:	3c01      	subs	r4, #1
 800a770:	fb08 f404 	mul.w	r4, r8, r4
 800a774:	45a0      	cmp	r8, r4
 800a776:	dd05      	ble.n	800a784 <_malloc_trim_r+0x40>
 800a778:	4630      	mov	r0, r6
 800a77a:	f000 fdab 	bl	800b2d4 <__malloc_unlock>
 800a77e:	2000      	movs	r0, #0
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	2100      	movs	r1, #0
 800a786:	4630      	mov	r0, r6
 800a788:	f001 fc8a 	bl	800c0a0 <_sbrk_r>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	442b      	add	r3, r5
 800a790:	4298      	cmp	r0, r3
 800a792:	d1f1      	bne.n	800a778 <_malloc_trim_r+0x34>
 800a794:	4261      	negs	r1, r4
 800a796:	4630      	mov	r0, r6
 800a798:	f001 fc82 	bl	800c0a0 <_sbrk_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d110      	bne.n	800a7c2 <_malloc_trim_r+0x7e>
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f001 fc7c 	bl	800c0a0 <_sbrk_r>
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	1a83      	subs	r3, r0, r2
 800a7ac:	2b0f      	cmp	r3, #15
 800a7ae:	dde3      	ble.n	800a778 <_malloc_trim_r+0x34>
 800a7b0:	490c      	ldr	r1, [pc, #48]	; (800a7e4 <_malloc_trim_r+0xa0>)
 800a7b2:	6809      	ldr	r1, [r1, #0]
 800a7b4:	1a40      	subs	r0, r0, r1
 800a7b6:	490c      	ldr	r1, [pc, #48]	; (800a7e8 <_malloc_trim_r+0xa4>)
 800a7b8:	f043 0301 	orr.w	r3, r3, #1
 800a7bc:	6008      	str	r0, [r1, #0]
 800a7be:	6053      	str	r3, [r2, #4]
 800a7c0:	e7da      	b.n	800a778 <_malloc_trim_r+0x34>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <_malloc_trim_r+0xa4>)
 800a7c6:	1b2d      	subs	r5, r5, r4
 800a7c8:	f045 0501 	orr.w	r5, r5, #1
 800a7cc:	605d      	str	r5, [r3, #4]
 800a7ce:	6813      	ldr	r3, [r2, #0]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	1b1b      	subs	r3, r3, r4
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	f000 fd7d 	bl	800b2d4 <__malloc_unlock>
 800a7da:	2001      	movs	r0, #1
 800a7dc:	e7d0      	b.n	800a780 <_malloc_trim_r+0x3c>
 800a7de:	bf00      	nop
 800a7e0:	200005a8 	.word	0x200005a8
 800a7e4:	200009b0 	.word	0x200009b0
 800a7e8:	20000b18 	.word	0x20000b18

0800a7ec <_free_r>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	f000 80b1 	beq.w	800a95a <_free_r+0x16e>
 800a7f8:	f000 fd66 	bl	800b2c8 <__malloc_lock>
 800a7fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a800:	4856      	ldr	r0, [pc, #344]	; (800a95c <_free_r+0x170>)
 800a802:	f022 0401 	bic.w	r4, r2, #1
 800a806:	f1a7 0308 	sub.w	r3, r7, #8
 800a80a:	eb03 0c04 	add.w	ip, r3, r4
 800a80e:	6881      	ldr	r1, [r0, #8]
 800a810:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a814:	4561      	cmp	r1, ip
 800a816:	f026 0603 	bic.w	r6, r6, #3
 800a81a:	f002 0201 	and.w	r2, r2, #1
 800a81e:	d11b      	bne.n	800a858 <_free_r+0x6c>
 800a820:	4434      	add	r4, r6
 800a822:	b93a      	cbnz	r2, 800a834 <_free_r+0x48>
 800a824:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a828:	1a9b      	subs	r3, r3, r2
 800a82a:	4414      	add	r4, r2
 800a82c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a830:	60ca      	str	r2, [r1, #12]
 800a832:	6091      	str	r1, [r2, #8]
 800a834:	f044 0201 	orr.w	r2, r4, #1
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	6083      	str	r3, [r0, #8]
 800a83c:	4b48      	ldr	r3, [pc, #288]	; (800a960 <_free_r+0x174>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	42a3      	cmp	r3, r4
 800a842:	d804      	bhi.n	800a84e <_free_r+0x62>
 800a844:	4b47      	ldr	r3, [pc, #284]	; (800a964 <_free_r+0x178>)
 800a846:	4628      	mov	r0, r5
 800a848:	6819      	ldr	r1, [r3, #0]
 800a84a:	f7ff ff7b 	bl	800a744 <_malloc_trim_r>
 800a84e:	4628      	mov	r0, r5
 800a850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a854:	f000 bd3e 	b.w	800b2d4 <__malloc_unlock>
 800a858:	f8cc 6004 	str.w	r6, [ip, #4]
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	d138      	bne.n	800a8d2 <_free_r+0xe6>
 800a860:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a864:	1a5b      	subs	r3, r3, r1
 800a866:	440c      	add	r4, r1
 800a868:	6899      	ldr	r1, [r3, #8]
 800a86a:	f100 0708 	add.w	r7, r0, #8
 800a86e:	42b9      	cmp	r1, r7
 800a870:	d031      	beq.n	800a8d6 <_free_r+0xea>
 800a872:	68df      	ldr	r7, [r3, #12]
 800a874:	60cf      	str	r7, [r1, #12]
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	eb0c 0106 	add.w	r1, ip, r6
 800a87c:	6849      	ldr	r1, [r1, #4]
 800a87e:	07c9      	lsls	r1, r1, #31
 800a880:	d40b      	bmi.n	800a89a <_free_r+0xae>
 800a882:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a886:	4434      	add	r4, r6
 800a888:	bb3a      	cbnz	r2, 800a8da <_free_r+0xee>
 800a88a:	4e37      	ldr	r6, [pc, #220]	; (800a968 <_free_r+0x17c>)
 800a88c:	42b1      	cmp	r1, r6
 800a88e:	d124      	bne.n	800a8da <_free_r+0xee>
 800a890:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a894:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a898:	2201      	movs	r2, #1
 800a89a:	f044 0101 	orr.w	r1, r4, #1
 800a89e:	6059      	str	r1, [r3, #4]
 800a8a0:	511c      	str	r4, [r3, r4]
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d1d3      	bne.n	800a84e <_free_r+0x62>
 800a8a6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a8aa:	d21b      	bcs.n	800a8e4 <_free_r+0xf8>
 800a8ac:	0961      	lsrs	r1, r4, #5
 800a8ae:	08e2      	lsrs	r2, r4, #3
 800a8b0:	2401      	movs	r4, #1
 800a8b2:	408c      	lsls	r4, r1
 800a8b4:	6841      	ldr	r1, [r0, #4]
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	430c      	orrs	r4, r1
 800a8ba:	6044      	str	r4, [r0, #4]
 800a8bc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a8c0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a8c4:	3908      	subs	r1, #8
 800a8c6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a8ca:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a8ce:	60e3      	str	r3, [r4, #12]
 800a8d0:	e7bd      	b.n	800a84e <_free_r+0x62>
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	e7d0      	b.n	800a878 <_free_r+0x8c>
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	e7ce      	b.n	800a878 <_free_r+0x8c>
 800a8da:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a8de:	60ce      	str	r6, [r1, #12]
 800a8e0:	60b1      	str	r1, [r6, #8]
 800a8e2:	e7da      	b.n	800a89a <_free_r+0xae>
 800a8e4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a8e8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a8ec:	d214      	bcs.n	800a918 <_free_r+0x12c>
 800a8ee:	09a2      	lsrs	r2, r4, #6
 800a8f0:	3238      	adds	r2, #56	; 0x38
 800a8f2:	1c51      	adds	r1, r2, #1
 800a8f4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a8f8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a8fc:	428e      	cmp	r6, r1
 800a8fe:	d125      	bne.n	800a94c <_free_r+0x160>
 800a900:	2401      	movs	r4, #1
 800a902:	1092      	asrs	r2, r2, #2
 800a904:	fa04 f202 	lsl.w	r2, r4, r2
 800a908:	6844      	ldr	r4, [r0, #4]
 800a90a:	4322      	orrs	r2, r4
 800a90c:	6042      	str	r2, [r0, #4]
 800a90e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a912:	60b3      	str	r3, [r6, #8]
 800a914:	60cb      	str	r3, [r1, #12]
 800a916:	e79a      	b.n	800a84e <_free_r+0x62>
 800a918:	2a14      	cmp	r2, #20
 800a91a:	d801      	bhi.n	800a920 <_free_r+0x134>
 800a91c:	325b      	adds	r2, #91	; 0x5b
 800a91e:	e7e8      	b.n	800a8f2 <_free_r+0x106>
 800a920:	2a54      	cmp	r2, #84	; 0x54
 800a922:	d802      	bhi.n	800a92a <_free_r+0x13e>
 800a924:	0b22      	lsrs	r2, r4, #12
 800a926:	326e      	adds	r2, #110	; 0x6e
 800a928:	e7e3      	b.n	800a8f2 <_free_r+0x106>
 800a92a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a92e:	d802      	bhi.n	800a936 <_free_r+0x14a>
 800a930:	0be2      	lsrs	r2, r4, #15
 800a932:	3277      	adds	r2, #119	; 0x77
 800a934:	e7dd      	b.n	800a8f2 <_free_r+0x106>
 800a936:	f240 5154 	movw	r1, #1364	; 0x554
 800a93a:	428a      	cmp	r2, r1
 800a93c:	bf9a      	itte	ls
 800a93e:	0ca2      	lsrls	r2, r4, #18
 800a940:	327c      	addls	r2, #124	; 0x7c
 800a942:	227e      	movhi	r2, #126	; 0x7e
 800a944:	e7d5      	b.n	800a8f2 <_free_r+0x106>
 800a946:	6889      	ldr	r1, [r1, #8]
 800a948:	428e      	cmp	r6, r1
 800a94a:	d004      	beq.n	800a956 <_free_r+0x16a>
 800a94c:	684a      	ldr	r2, [r1, #4]
 800a94e:	f022 0203 	bic.w	r2, r2, #3
 800a952:	42a2      	cmp	r2, r4
 800a954:	d8f7      	bhi.n	800a946 <_free_r+0x15a>
 800a956:	68ce      	ldr	r6, [r1, #12]
 800a958:	e7d9      	b.n	800a90e <_free_r+0x122>
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	200005a8 	.word	0x200005a8
 800a960:	200009b4 	.word	0x200009b4
 800a964:	20000b48 	.word	0x20000b48
 800a968:	200005b0 	.word	0x200005b0

0800a96c <__sfvwrite_r>:
 800a96c:	6893      	ldr	r3, [r2, #8]
 800a96e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a972:	4606      	mov	r6, r0
 800a974:	460c      	mov	r4, r1
 800a976:	4690      	mov	r8, r2
 800a978:	b91b      	cbnz	r3, 800a982 <__sfvwrite_r+0x16>
 800a97a:	2000      	movs	r0, #0
 800a97c:	b003      	add	sp, #12
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a982:	898b      	ldrh	r3, [r1, #12]
 800a984:	0718      	lsls	r0, r3, #28
 800a986:	d550      	bpl.n	800aa2a <__sfvwrite_r+0xbe>
 800a988:	690b      	ldr	r3, [r1, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d04d      	beq.n	800aa2a <__sfvwrite_r+0xbe>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f8d8 7000 	ldr.w	r7, [r8]
 800a994:	f013 0902 	ands.w	r9, r3, #2
 800a998:	d16c      	bne.n	800aa74 <__sfvwrite_r+0x108>
 800a99a:	f013 0301 	ands.w	r3, r3, #1
 800a99e:	f000 809c 	beq.w	800aada <__sfvwrite_r+0x16e>
 800a9a2:	4648      	mov	r0, r9
 800a9a4:	46ca      	mov	sl, r9
 800a9a6:	46cb      	mov	fp, r9
 800a9a8:	f1bb 0f00 	cmp.w	fp, #0
 800a9ac:	f000 8103 	beq.w	800abb6 <__sfvwrite_r+0x24a>
 800a9b0:	b950      	cbnz	r0, 800a9c8 <__sfvwrite_r+0x5c>
 800a9b2:	465a      	mov	r2, fp
 800a9b4:	210a      	movs	r1, #10
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	f7f5 fc4a 	bl	8000250 <memchr>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f000 80ff 	beq.w	800abc0 <__sfvwrite_r+0x254>
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	eba0 090a 	sub.w	r9, r0, sl
 800a9c8:	6820      	ldr	r0, [r4, #0]
 800a9ca:	6921      	ldr	r1, [r4, #16]
 800a9cc:	6963      	ldr	r3, [r4, #20]
 800a9ce:	45d9      	cmp	r9, fp
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	bf28      	it	cs
 800a9d4:	465a      	movcs	r2, fp
 800a9d6:	4288      	cmp	r0, r1
 800a9d8:	f240 80f5 	bls.w	800abc6 <__sfvwrite_r+0x25a>
 800a9dc:	68a5      	ldr	r5, [r4, #8]
 800a9de:	441d      	add	r5, r3
 800a9e0:	42aa      	cmp	r2, r5
 800a9e2:	f340 80f0 	ble.w	800abc6 <__sfvwrite_r+0x25a>
 800a9e6:	4651      	mov	r1, sl
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	f000 fc53 	bl	800b294 <memmove>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	442b      	add	r3, r5
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7ff fd82 	bl	800a500 <_fflush_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d167      	bne.n	800aad0 <__sfvwrite_r+0x164>
 800aa00:	ebb9 0905 	subs.w	r9, r9, r5
 800aa04:	f040 80f7 	bne.w	800abf6 <__sfvwrite_r+0x28a>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff fd78 	bl	800a500 <_fflush_r>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d15d      	bne.n	800aad0 <__sfvwrite_r+0x164>
 800aa14:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800aa18:	44aa      	add	sl, r5
 800aa1a:	ebab 0b05 	sub.w	fp, fp, r5
 800aa1e:	1b55      	subs	r5, r2, r5
 800aa20:	f8c8 5008 	str.w	r5, [r8, #8]
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	d1bf      	bne.n	800a9a8 <__sfvwrite_r+0x3c>
 800aa28:	e7a7      	b.n	800a97a <__sfvwrite_r+0xe>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7fe fe8d 	bl	800974c <__swsetup_r>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0ab      	beq.n	800a98e <__sfvwrite_r+0x22>
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	e79f      	b.n	800a97c <__sfvwrite_r+0x10>
 800aa3c:	e9d7 b900 	ldrd	fp, r9, [r7]
 800aa40:	3708      	adds	r7, #8
 800aa42:	f1b9 0f00 	cmp.w	r9, #0
 800aa46:	d0f9      	beq.n	800aa3c <__sfvwrite_r+0xd0>
 800aa48:	45d1      	cmp	r9, sl
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	69e1      	ldr	r1, [r4, #28]
 800aa4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa50:	bf28      	it	cs
 800aa52:	4653      	movcs	r3, sl
 800aa54:	465a      	mov	r2, fp
 800aa56:	4630      	mov	r0, r6
 800aa58:	47a8      	blx	r5
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	dd38      	ble.n	800aad0 <__sfvwrite_r+0x164>
 800aa5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa62:	4483      	add	fp, r0
 800aa64:	eba9 0900 	sub.w	r9, r9, r0
 800aa68:	1a18      	subs	r0, r3, r0
 800aa6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1e7      	bne.n	800aa42 <__sfvwrite_r+0xd6>
 800aa72:	e782      	b.n	800a97a <__sfvwrite_r+0xe>
 800aa74:	f04f 0b00 	mov.w	fp, #0
 800aa78:	f8df a180 	ldr.w	sl, [pc, #384]	; 800abfc <__sfvwrite_r+0x290>
 800aa7c:	46d9      	mov	r9, fp
 800aa7e:	e7e0      	b.n	800aa42 <__sfvwrite_r+0xd6>
 800aa80:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800aa84:	3708      	adds	r7, #8
 800aa86:	f1ba 0f00 	cmp.w	sl, #0
 800aa8a:	d0f9      	beq.n	800aa80 <__sfvwrite_r+0x114>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	6820      	ldr	r0, [r4, #0]
 800aa90:	68a2      	ldr	r2, [r4, #8]
 800aa92:	0599      	lsls	r1, r3, #22
 800aa94:	d563      	bpl.n	800ab5e <__sfvwrite_r+0x1f2>
 800aa96:	4552      	cmp	r2, sl
 800aa98:	d836      	bhi.n	800ab08 <__sfvwrite_r+0x19c>
 800aa9a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800aa9e:	d033      	beq.n	800ab08 <__sfvwrite_r+0x19c>
 800aaa0:	6921      	ldr	r1, [r4, #16]
 800aaa2:	6965      	ldr	r5, [r4, #20]
 800aaa4:	eba0 0b01 	sub.w	fp, r0, r1
 800aaa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab0:	f10b 0201 	add.w	r2, fp, #1
 800aab4:	106d      	asrs	r5, r5, #1
 800aab6:	4452      	add	r2, sl
 800aab8:	4295      	cmp	r5, r2
 800aaba:	bf38      	it	cc
 800aabc:	4615      	movcc	r5, r2
 800aabe:	055b      	lsls	r3, r3, #21
 800aac0:	d53d      	bpl.n	800ab3e <__sfvwrite_r+0x1d2>
 800aac2:	4629      	mov	r1, r5
 800aac4:	4630      	mov	r0, r6
 800aac6:	f000 f96f 	bl	800ada8 <_malloc_r>
 800aaca:	b948      	cbnz	r0, 800aae0 <__sfvwrite_r+0x174>
 800aacc:	230c      	movs	r3, #12
 800aace:	6033      	str	r3, [r6, #0]
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	e7ad      	b.n	800aa36 <__sfvwrite_r+0xca>
 800aada:	4699      	mov	r9, r3
 800aadc:	469a      	mov	sl, r3
 800aade:	e7d2      	b.n	800aa86 <__sfvwrite_r+0x11a>
 800aae0:	465a      	mov	r2, fp
 800aae2:	6921      	ldr	r1, [r4, #16]
 800aae4:	9001      	str	r0, [sp, #4]
 800aae6:	f000 fbc7 	bl	800b278 <memcpy>
 800aaea:	89a2      	ldrh	r2, [r4, #12]
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800aaf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aaf6:	81a2      	strh	r2, [r4, #12]
 800aaf8:	6123      	str	r3, [r4, #16]
 800aafa:	6165      	str	r5, [r4, #20]
 800aafc:	445b      	add	r3, fp
 800aafe:	eba5 050b 	sub.w	r5, r5, fp
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	4652      	mov	r2, sl
 800ab06:	60a5      	str	r5, [r4, #8]
 800ab08:	4552      	cmp	r2, sl
 800ab0a:	bf28      	it	cs
 800ab0c:	4652      	movcs	r2, sl
 800ab0e:	6820      	ldr	r0, [r4, #0]
 800ab10:	9201      	str	r2, [sp, #4]
 800ab12:	4649      	mov	r1, r9
 800ab14:	f000 fbbe 	bl	800b294 <memmove>
 800ab18:	68a3      	ldr	r3, [r4, #8]
 800ab1a:	9a01      	ldr	r2, [sp, #4]
 800ab1c:	1a9b      	subs	r3, r3, r2
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	441a      	add	r2, r3
 800ab24:	4655      	mov	r5, sl
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ab2c:	44a9      	add	r9, r5
 800ab2e:	ebaa 0a05 	sub.w	sl, sl, r5
 800ab32:	1b45      	subs	r5, r0, r5
 800ab34:	f8c8 5008 	str.w	r5, [r8, #8]
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	d1a4      	bne.n	800aa86 <__sfvwrite_r+0x11a>
 800ab3c:	e71d      	b.n	800a97a <__sfvwrite_r+0xe>
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4630      	mov	r0, r6
 800ab42:	f001 f845 	bl	800bbd0 <_realloc_r>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d1d5      	bne.n	800aaf8 <__sfvwrite_r+0x18c>
 800ab4c:	6921      	ldr	r1, [r4, #16]
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff fe4c 	bl	800a7ec <_free_r>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	e7b6      	b.n	800aacc <__sfvwrite_r+0x160>
 800ab5e:	6923      	ldr	r3, [r4, #16]
 800ab60:	4283      	cmp	r3, r0
 800ab62:	d302      	bcc.n	800ab6a <__sfvwrite_r+0x1fe>
 800ab64:	6961      	ldr	r1, [r4, #20]
 800ab66:	4551      	cmp	r1, sl
 800ab68:	d915      	bls.n	800ab96 <__sfvwrite_r+0x22a>
 800ab6a:	4552      	cmp	r2, sl
 800ab6c:	bf28      	it	cs
 800ab6e:	4652      	movcs	r2, sl
 800ab70:	4649      	mov	r1, r9
 800ab72:	4615      	mov	r5, r2
 800ab74:	f000 fb8e 	bl	800b294 <memmove>
 800ab78:	68a3      	ldr	r3, [r4, #8]
 800ab7a:	6822      	ldr	r2, [r4, #0]
 800ab7c:	1b5b      	subs	r3, r3, r5
 800ab7e:	442a      	add	r2, r5
 800ab80:	60a3      	str	r3, [r4, #8]
 800ab82:	6022      	str	r2, [r4, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1cf      	bne.n	800ab28 <__sfvwrite_r+0x1bc>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff fcb8 	bl	800a500 <_fflush_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0c9      	beq.n	800ab28 <__sfvwrite_r+0x1bc>
 800ab94:	e79c      	b.n	800aad0 <__sfvwrite_r+0x164>
 800ab96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ab9a:	459a      	cmp	sl, r3
 800ab9c:	bf38      	it	cc
 800ab9e:	4653      	movcc	r3, sl
 800aba0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aba2:	fb93 f3f1 	sdiv	r3, r3, r1
 800aba6:	464a      	mov	r2, r9
 800aba8:	434b      	muls	r3, r1
 800abaa:	4630      	mov	r0, r6
 800abac:	69e1      	ldr	r1, [r4, #28]
 800abae:	47a8      	blx	r5
 800abb0:	1e05      	subs	r5, r0, #0
 800abb2:	dcb9      	bgt.n	800ab28 <__sfvwrite_r+0x1bc>
 800abb4:	e78c      	b.n	800aad0 <__sfvwrite_r+0x164>
 800abb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abba:	2000      	movs	r0, #0
 800abbc:	3708      	adds	r7, #8
 800abbe:	e6f3      	b.n	800a9a8 <__sfvwrite_r+0x3c>
 800abc0:	f10b 0901 	add.w	r9, fp, #1
 800abc4:	e700      	b.n	800a9c8 <__sfvwrite_r+0x5c>
 800abc6:	4293      	cmp	r3, r2
 800abc8:	dc08      	bgt.n	800abdc <__sfvwrite_r+0x270>
 800abca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800abcc:	69e1      	ldr	r1, [r4, #28]
 800abce:	4652      	mov	r2, sl
 800abd0:	4630      	mov	r0, r6
 800abd2:	47a8      	blx	r5
 800abd4:	1e05      	subs	r5, r0, #0
 800abd6:	f73f af13 	bgt.w	800aa00 <__sfvwrite_r+0x94>
 800abda:	e779      	b.n	800aad0 <__sfvwrite_r+0x164>
 800abdc:	4651      	mov	r1, sl
 800abde:	9201      	str	r2, [sp, #4]
 800abe0:	f000 fb58 	bl	800b294 <memmove>
 800abe4:	9a01      	ldr	r2, [sp, #4]
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	4413      	add	r3, r2
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	4615      	mov	r5, r2
 800abf4:	e704      	b.n	800aa00 <__sfvwrite_r+0x94>
 800abf6:	2001      	movs	r0, #1
 800abf8:	e70c      	b.n	800aa14 <__sfvwrite_r+0xa8>
 800abfa:	bf00      	nop
 800abfc:	7ffffc00 	.word	0x7ffffc00

0800ac00 <_fwalk>:
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	460f      	mov	r7, r1
 800ac06:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800ac0a:	2600      	movs	r6, #0
 800ac0c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800ac10:	f1b8 0801 	subs.w	r8, r8, #1
 800ac14:	d505      	bpl.n	800ac22 <_fwalk+0x22>
 800ac16:	6824      	ldr	r4, [r4, #0]
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d1f7      	bne.n	800ac0c <_fwalk+0xc>
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac22:	89ab      	ldrh	r3, [r5, #12]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d906      	bls.n	800ac36 <_fwalk+0x36>
 800ac28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	d002      	beq.n	800ac36 <_fwalk+0x36>
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b8      	blx	r7
 800ac34:	4306      	orrs	r6, r0
 800ac36:	3568      	adds	r5, #104	; 0x68
 800ac38:	e7ea      	b.n	800ac10 <_fwalk+0x10>

0800ac3a <_fwalk_reent>:
 800ac3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3e:	4606      	mov	r6, r0
 800ac40:	4688      	mov	r8, r1
 800ac42:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800ac46:	2700      	movs	r7, #0
 800ac48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac50:	d505      	bpl.n	800ac5e <_fwalk_reent+0x24>
 800ac52:	6824      	ldr	r4, [r4, #0]
 800ac54:	2c00      	cmp	r4, #0
 800ac56:	d1f7      	bne.n	800ac48 <_fwalk_reent+0xe>
 800ac58:	4638      	mov	r0, r7
 800ac5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5e:	89ab      	ldrh	r3, [r5, #12]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d907      	bls.n	800ac74 <_fwalk_reent+0x3a>
 800ac64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	d003      	beq.n	800ac74 <_fwalk_reent+0x3a>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4630      	mov	r0, r6
 800ac70:	47c0      	blx	r8
 800ac72:	4307      	orrs	r7, r0
 800ac74:	3568      	adds	r5, #104	; 0x68
 800ac76:	e7e9      	b.n	800ac4c <_fwalk_reent+0x12>

0800ac78 <iswspace>:
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f000 b801 	b.w	800ac80 <iswspace_l>
	...

0800ac80 <iswspace_l>:
 800ac80:	28ff      	cmp	r0, #255	; 0xff
 800ac82:	bf9d      	ittte	ls
 800ac84:	4b02      	ldrls	r3, [pc, #8]	; (800ac90 <iswspace_l+0x10>)
 800ac86:	5cc0      	ldrbls	r0, [r0, r3]
 800ac88:	f000 0008 	andls.w	r0, r0, #8
 800ac8c:	2000      	movhi	r0, #0
 800ac8e:	4770      	bx	lr
 800ac90:	080112d5 	.word	0x080112d5

0800ac94 <__locale_mb_cur_max>:
 800ac94:	4b01      	ldr	r3, [pc, #4]	; (800ac9c <__locale_mb_cur_max+0x8>)
 800ac96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ac9a:	4770      	bx	lr
 800ac9c:	2000043c 	.word	0x2000043c

0800aca0 <_localeconv_r>:
 800aca0:	4800      	ldr	r0, [pc, #0]	; (800aca4 <_localeconv_r+0x4>)
 800aca2:	4770      	bx	lr
 800aca4:	2000052c 	.word	0x2000052c

0800aca8 <__retarget_lock_init_recursive>:
 800aca8:	4770      	bx	lr

0800acaa <__retarget_lock_close_recursive>:
 800acaa:	4770      	bx	lr

0800acac <__retarget_lock_acquire_recursive>:
 800acac:	4770      	bx	lr

0800acae <__retarget_lock_release_recursive>:
 800acae:	4770      	bx	lr

0800acb0 <__swhatbuf_r>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	460e      	mov	r6, r1
 800acb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb8:	2900      	cmp	r1, #0
 800acba:	b096      	sub	sp, #88	; 0x58
 800acbc:	4614      	mov	r4, r2
 800acbe:	461d      	mov	r5, r3
 800acc0:	da0a      	bge.n	800acd8 <__swhatbuf_r+0x28>
 800acc2:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800acc6:	2300      	movs	r3, #0
 800acc8:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800accc:	602b      	str	r3, [r5, #0]
 800acce:	d116      	bne.n	800acfe <__swhatbuf_r+0x4e>
 800acd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	e015      	b.n	800ad04 <__swhatbuf_r+0x54>
 800acd8:	466a      	mov	r2, sp
 800acda:	f004 fb6d 	bl	800f3b8 <_fstat_r>
 800acde:	2800      	cmp	r0, #0
 800ace0:	dbef      	blt.n	800acc2 <__swhatbuf_r+0x12>
 800ace2:	9a01      	ldr	r2, [sp, #4]
 800ace4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ace8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acec:	425a      	negs	r2, r3
 800acee:	415a      	adcs	r2, r3
 800acf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	e002      	b.n	800ad04 <__swhatbuf_r+0x54>
 800acfe:	2240      	movs	r2, #64	; 0x40
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	b016      	add	sp, #88	; 0x58
 800ad06:	bd70      	pop	{r4, r5, r6, pc}

0800ad08 <__smakebuf_r>:
 800ad08:	898b      	ldrh	r3, [r1, #12]
 800ad0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad0c:	079d      	lsls	r5, r3, #30
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	d507      	bpl.n	800ad24 <__smakebuf_r+0x1c>
 800ad14:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	6163      	str	r3, [r4, #20]
 800ad20:	b002      	add	sp, #8
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	ab01      	add	r3, sp, #4
 800ad26:	466a      	mov	r2, sp
 800ad28:	f7ff ffc2 	bl	800acb0 <__swhatbuf_r>
 800ad2c:	9900      	ldr	r1, [sp, #0]
 800ad2e:	4605      	mov	r5, r0
 800ad30:	4630      	mov	r0, r6
 800ad32:	f000 f839 	bl	800ada8 <_malloc_r>
 800ad36:	b948      	cbnz	r0, 800ad4c <__smakebuf_r+0x44>
 800ad38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3c:	059a      	lsls	r2, r3, #22
 800ad3e:	d4ef      	bmi.n	800ad20 <__smakebuf_r+0x18>
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	f043 0302 	orr.w	r3, r3, #2
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	e7e3      	b.n	800ad14 <__smakebuf_r+0xc>
 800ad4c:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <__smakebuf_r+0x7c>)
 800ad4e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	6020      	str	r0, [r4, #0]
 800ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad58:	81a3      	strh	r3, [r4, #12]
 800ad5a:	9b00      	ldr	r3, [sp, #0]
 800ad5c:	6163      	str	r3, [r4, #20]
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	6120      	str	r0, [r4, #16]
 800ad62:	b15b      	cbz	r3, 800ad7c <__smakebuf_r+0x74>
 800ad64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f004 fea7 	bl	800fabc <_isatty_r>
 800ad6e:	b128      	cbz	r0, 800ad7c <__smakebuf_r+0x74>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	89a0      	ldrh	r0, [r4, #12]
 800ad7e:	4305      	orrs	r5, r0
 800ad80:	81a5      	strh	r5, [r4, #12]
 800ad82:	e7cd      	b.n	800ad20 <__smakebuf_r+0x18>
 800ad84:	0800a5c1 	.word	0x0800a5c1

0800ad88 <malloc>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	; (800ad94 <malloc+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f000 b80b 	b.w	800ada8 <_malloc_r>
 800ad92:	bf00      	nop
 800ad94:	2000000c 	.word	0x2000000c

0800ad98 <free>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <free+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f7ff bd25 	b.w	800a7ec <_free_r>
 800ada2:	bf00      	nop
 800ada4:	2000000c 	.word	0x2000000c

0800ada8 <_malloc_r>:
 800ada8:	f101 030b 	add.w	r3, r1, #11
 800adac:	2b16      	cmp	r3, #22
 800adae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb2:	4605      	mov	r5, r0
 800adb4:	d906      	bls.n	800adc4 <_malloc_r+0x1c>
 800adb6:	f033 0707 	bics.w	r7, r3, #7
 800adba:	d504      	bpl.n	800adc6 <_malloc_r+0x1e>
 800adbc:	230c      	movs	r3, #12
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	2400      	movs	r4, #0
 800adc2:	e1a5      	b.n	800b110 <_malloc_r+0x368>
 800adc4:	2710      	movs	r7, #16
 800adc6:	42b9      	cmp	r1, r7
 800adc8:	d8f8      	bhi.n	800adbc <_malloc_r+0x14>
 800adca:	4628      	mov	r0, r5
 800adcc:	f000 fa7c 	bl	800b2c8 <__malloc_lock>
 800add0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800add4:	4eb0      	ldr	r6, [pc, #704]	; (800b098 <_malloc_r+0x2f0>)
 800add6:	d237      	bcs.n	800ae48 <_malloc_r+0xa0>
 800add8:	f107 0208 	add.w	r2, r7, #8
 800addc:	4432      	add	r2, r6
 800adde:	f1a2 0108 	sub.w	r1, r2, #8
 800ade2:	6854      	ldr	r4, [r2, #4]
 800ade4:	428c      	cmp	r4, r1
 800ade6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800adea:	d102      	bne.n	800adf2 <_malloc_r+0x4a>
 800adec:	68d4      	ldr	r4, [r2, #12]
 800adee:	42a2      	cmp	r2, r4
 800adf0:	d010      	beq.n	800ae14 <_malloc_r+0x6c>
 800adf2:	6863      	ldr	r3, [r4, #4]
 800adf4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	60ca      	str	r2, [r1, #12]
 800adfe:	4423      	add	r3, r4
 800ae00:	6091      	str	r1, [r2, #8]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	f042 0201 	orr.w	r2, r2, #1
 800ae08:	605a      	str	r2, [r3, #4]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 fa62 	bl	800b2d4 <__malloc_unlock>
 800ae10:	3408      	adds	r4, #8
 800ae12:	e17d      	b.n	800b110 <_malloc_r+0x368>
 800ae14:	3302      	adds	r3, #2
 800ae16:	6934      	ldr	r4, [r6, #16]
 800ae18:	49a0      	ldr	r1, [pc, #640]	; (800b09c <_malloc_r+0x2f4>)
 800ae1a:	428c      	cmp	r4, r1
 800ae1c:	d077      	beq.n	800af0e <_malloc_r+0x166>
 800ae1e:	6862      	ldr	r2, [r4, #4]
 800ae20:	f022 0c03 	bic.w	ip, r2, #3
 800ae24:	ebac 0007 	sub.w	r0, ip, r7
 800ae28:	280f      	cmp	r0, #15
 800ae2a:	dd48      	ble.n	800aebe <_malloc_r+0x116>
 800ae2c:	19e2      	adds	r2, r4, r7
 800ae2e:	f040 0301 	orr.w	r3, r0, #1
 800ae32:	f047 0701 	orr.w	r7, r7, #1
 800ae36:	6067      	str	r7, [r4, #4]
 800ae38:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800ae3c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800ae40:	6053      	str	r3, [r2, #4]
 800ae42:	f844 000c 	str.w	r0, [r4, ip]
 800ae46:	e7e0      	b.n	800ae0a <_malloc_r+0x62>
 800ae48:	0a7b      	lsrs	r3, r7, #9
 800ae4a:	d02a      	beq.n	800aea2 <_malloc_r+0xfa>
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d812      	bhi.n	800ae76 <_malloc_r+0xce>
 800ae50:	09bb      	lsrs	r3, r7, #6
 800ae52:	3338      	adds	r3, #56	; 0x38
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800ae5a:	f1a2 0c08 	sub.w	ip, r2, #8
 800ae5e:	6854      	ldr	r4, [r2, #4]
 800ae60:	4564      	cmp	r4, ip
 800ae62:	d006      	beq.n	800ae72 <_malloc_r+0xca>
 800ae64:	6862      	ldr	r2, [r4, #4]
 800ae66:	f022 0203 	bic.w	r2, r2, #3
 800ae6a:	1bd0      	subs	r0, r2, r7
 800ae6c:	280f      	cmp	r0, #15
 800ae6e:	dd1c      	ble.n	800aeaa <_malloc_r+0x102>
 800ae70:	3b01      	subs	r3, #1
 800ae72:	3301      	adds	r3, #1
 800ae74:	e7cf      	b.n	800ae16 <_malloc_r+0x6e>
 800ae76:	2b14      	cmp	r3, #20
 800ae78:	d801      	bhi.n	800ae7e <_malloc_r+0xd6>
 800ae7a:	335b      	adds	r3, #91	; 0x5b
 800ae7c:	e7ea      	b.n	800ae54 <_malloc_r+0xac>
 800ae7e:	2b54      	cmp	r3, #84	; 0x54
 800ae80:	d802      	bhi.n	800ae88 <_malloc_r+0xe0>
 800ae82:	0b3b      	lsrs	r3, r7, #12
 800ae84:	336e      	adds	r3, #110	; 0x6e
 800ae86:	e7e5      	b.n	800ae54 <_malloc_r+0xac>
 800ae88:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ae8c:	d802      	bhi.n	800ae94 <_malloc_r+0xec>
 800ae8e:	0bfb      	lsrs	r3, r7, #15
 800ae90:	3377      	adds	r3, #119	; 0x77
 800ae92:	e7df      	b.n	800ae54 <_malloc_r+0xac>
 800ae94:	f240 5254 	movw	r2, #1364	; 0x554
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d804      	bhi.n	800aea6 <_malloc_r+0xfe>
 800ae9c:	0cbb      	lsrs	r3, r7, #18
 800ae9e:	337c      	adds	r3, #124	; 0x7c
 800aea0:	e7d8      	b.n	800ae54 <_malloc_r+0xac>
 800aea2:	233f      	movs	r3, #63	; 0x3f
 800aea4:	e7d6      	b.n	800ae54 <_malloc_r+0xac>
 800aea6:	237e      	movs	r3, #126	; 0x7e
 800aea8:	e7d4      	b.n	800ae54 <_malloc_r+0xac>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	68e1      	ldr	r1, [r4, #12]
 800aeae:	db04      	blt.n	800aeba <_malloc_r+0x112>
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	60d9      	str	r1, [r3, #12]
 800aeb4:	608b      	str	r3, [r1, #8]
 800aeb6:	18a3      	adds	r3, r4, r2
 800aeb8:	e7a3      	b.n	800ae02 <_malloc_r+0x5a>
 800aeba:	460c      	mov	r4, r1
 800aebc:	e7d0      	b.n	800ae60 <_malloc_r+0xb8>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800aec4:	db07      	blt.n	800aed6 <_malloc_r+0x12e>
 800aec6:	44a4      	add	ip, r4
 800aec8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800aecc:	f043 0301 	orr.w	r3, r3, #1
 800aed0:	f8cc 3004 	str.w	r3, [ip, #4]
 800aed4:	e799      	b.n	800ae0a <_malloc_r+0x62>
 800aed6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800aeda:	6870      	ldr	r0, [r6, #4]
 800aedc:	f080 8096 	bcs.w	800b00c <_malloc_r+0x264>
 800aee0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800aee4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800aee8:	f04f 0c01 	mov.w	ip, #1
 800aeec:	3201      	adds	r2, #1
 800aeee:	fa0c fc0e 	lsl.w	ip, ip, lr
 800aef2:	ea4c 0000 	orr.w	r0, ip, r0
 800aef6:	6070      	str	r0, [r6, #4]
 800aef8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800aefc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800af00:	3808      	subs	r0, #8
 800af02:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800af06:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800af0a:	f8cc 400c 	str.w	r4, [ip, #12]
 800af0e:	2001      	movs	r0, #1
 800af10:	109a      	asrs	r2, r3, #2
 800af12:	fa00 f202 	lsl.w	r2, r0, r2
 800af16:	6870      	ldr	r0, [r6, #4]
 800af18:	4290      	cmp	r0, r2
 800af1a:	d326      	bcc.n	800af6a <_malloc_r+0x1c2>
 800af1c:	4210      	tst	r0, r2
 800af1e:	d106      	bne.n	800af2e <_malloc_r+0x186>
 800af20:	f023 0303 	bic.w	r3, r3, #3
 800af24:	0052      	lsls	r2, r2, #1
 800af26:	4210      	tst	r0, r2
 800af28:	f103 0304 	add.w	r3, r3, #4
 800af2c:	d0fa      	beq.n	800af24 <_malloc_r+0x17c>
 800af2e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800af32:	46c1      	mov	r9, r8
 800af34:	469e      	mov	lr, r3
 800af36:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800af3a:	454c      	cmp	r4, r9
 800af3c:	f040 80ba 	bne.w	800b0b4 <_malloc_r+0x30c>
 800af40:	f10e 0e01 	add.w	lr, lr, #1
 800af44:	f01e 0f03 	tst.w	lr, #3
 800af48:	f109 0908 	add.w	r9, r9, #8
 800af4c:	d1f3      	bne.n	800af36 <_malloc_r+0x18e>
 800af4e:	0798      	lsls	r0, r3, #30
 800af50:	f040 80e4 	bne.w	800b11c <_malloc_r+0x374>
 800af54:	6873      	ldr	r3, [r6, #4]
 800af56:	ea23 0302 	bic.w	r3, r3, r2
 800af5a:	6073      	str	r3, [r6, #4]
 800af5c:	6870      	ldr	r0, [r6, #4]
 800af5e:	0052      	lsls	r2, r2, #1
 800af60:	4290      	cmp	r0, r2
 800af62:	d302      	bcc.n	800af6a <_malloc_r+0x1c2>
 800af64:	2a00      	cmp	r2, #0
 800af66:	f040 80e6 	bne.w	800b136 <_malloc_r+0x38e>
 800af6a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800af6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af72:	f023 0903 	bic.w	r9, r3, #3
 800af76:	45b9      	cmp	r9, r7
 800af78:	d304      	bcc.n	800af84 <_malloc_r+0x1dc>
 800af7a:	eba9 0207 	sub.w	r2, r9, r7
 800af7e:	2a0f      	cmp	r2, #15
 800af80:	f300 8142 	bgt.w	800b208 <_malloc_r+0x460>
 800af84:	4b46      	ldr	r3, [pc, #280]	; (800b0a0 <_malloc_r+0x2f8>)
 800af86:	6819      	ldr	r1, [r3, #0]
 800af88:	3110      	adds	r1, #16
 800af8a:	4439      	add	r1, r7
 800af8c:	2008      	movs	r0, #8
 800af8e:	9101      	str	r1, [sp, #4]
 800af90:	f003 fa98 	bl	800e4c4 <sysconf>
 800af94:	4a43      	ldr	r2, [pc, #268]	; (800b0a4 <_malloc_r+0x2fc>)
 800af96:	9901      	ldr	r1, [sp, #4]
 800af98:	6813      	ldr	r3, [r2, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	bf1f      	itttt	ne
 800af9e:	f101 31ff 	addne.w	r1, r1, #4294967295
 800afa2:	1809      	addne	r1, r1, r0
 800afa4:	4243      	negne	r3, r0
 800afa6:	4019      	andne	r1, r3
 800afa8:	4680      	mov	r8, r0
 800afaa:	4628      	mov	r0, r5
 800afac:	9101      	str	r1, [sp, #4]
 800afae:	f001 f877 	bl	800c0a0 <_sbrk_r>
 800afb2:	1c42      	adds	r2, r0, #1
 800afb4:	eb0a 0b09 	add.w	fp, sl, r9
 800afb8:	4604      	mov	r4, r0
 800afba:	f000 80f8 	beq.w	800b1ae <_malloc_r+0x406>
 800afbe:	4583      	cmp	fp, r0
 800afc0:	9901      	ldr	r1, [sp, #4]
 800afc2:	4a38      	ldr	r2, [pc, #224]	; (800b0a4 <_malloc_r+0x2fc>)
 800afc4:	d902      	bls.n	800afcc <_malloc_r+0x224>
 800afc6:	45b2      	cmp	sl, r6
 800afc8:	f040 80f1 	bne.w	800b1ae <_malloc_r+0x406>
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <_malloc_r+0x300>)
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	45a3      	cmp	fp, r4
 800afd2:	eb00 0e01 	add.w	lr, r0, r1
 800afd6:	f8c3 e000 	str.w	lr, [r3]
 800afda:	f108 3cff 	add.w	ip, r8, #4294967295
 800afde:	f040 80ac 	bne.w	800b13a <_malloc_r+0x392>
 800afe2:	ea1b 0f0c 	tst.w	fp, ip
 800afe6:	f040 80a8 	bne.w	800b13a <_malloc_r+0x392>
 800afea:	68b2      	ldr	r2, [r6, #8]
 800afec:	4449      	add	r1, r9
 800afee:	f041 0101 	orr.w	r1, r1, #1
 800aff2:	6051      	str	r1, [r2, #4]
 800aff4:	4a2d      	ldr	r2, [pc, #180]	; (800b0ac <_malloc_r+0x304>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6811      	ldr	r1, [r2, #0]
 800affa:	428b      	cmp	r3, r1
 800affc:	bf88      	it	hi
 800affe:	6013      	strhi	r3, [r2, #0]
 800b000:	4a2b      	ldr	r2, [pc, #172]	; (800b0b0 <_malloc_r+0x308>)
 800b002:	6811      	ldr	r1, [r2, #0]
 800b004:	428b      	cmp	r3, r1
 800b006:	bf88      	it	hi
 800b008:	6013      	strhi	r3, [r2, #0]
 800b00a:	e0d0      	b.n	800b1ae <_malloc_r+0x406>
 800b00c:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800b010:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b014:	d218      	bcs.n	800b048 <_malloc_r+0x2a0>
 800b016:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b01a:	3238      	adds	r2, #56	; 0x38
 800b01c:	f102 0e01 	add.w	lr, r2, #1
 800b020:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800b024:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800b028:	45f0      	cmp	r8, lr
 800b02a:	d12b      	bne.n	800b084 <_malloc_r+0x2dc>
 800b02c:	1092      	asrs	r2, r2, #2
 800b02e:	f04f 0c01 	mov.w	ip, #1
 800b032:	fa0c f202 	lsl.w	r2, ip, r2
 800b036:	4310      	orrs	r0, r2
 800b038:	6070      	str	r0, [r6, #4]
 800b03a:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b03e:	f8c8 4008 	str.w	r4, [r8, #8]
 800b042:	f8ce 400c 	str.w	r4, [lr, #12]
 800b046:	e762      	b.n	800af0e <_malloc_r+0x166>
 800b048:	2a14      	cmp	r2, #20
 800b04a:	d801      	bhi.n	800b050 <_malloc_r+0x2a8>
 800b04c:	325b      	adds	r2, #91	; 0x5b
 800b04e:	e7e5      	b.n	800b01c <_malloc_r+0x274>
 800b050:	2a54      	cmp	r2, #84	; 0x54
 800b052:	d803      	bhi.n	800b05c <_malloc_r+0x2b4>
 800b054:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b058:	326e      	adds	r2, #110	; 0x6e
 800b05a:	e7df      	b.n	800b01c <_malloc_r+0x274>
 800b05c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b060:	d803      	bhi.n	800b06a <_malloc_r+0x2c2>
 800b062:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b066:	3277      	adds	r2, #119	; 0x77
 800b068:	e7d8      	b.n	800b01c <_malloc_r+0x274>
 800b06a:	f240 5e54 	movw	lr, #1364	; 0x554
 800b06e:	4572      	cmp	r2, lr
 800b070:	bf9a      	itte	ls
 800b072:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b076:	327c      	addls	r2, #124	; 0x7c
 800b078:	227e      	movhi	r2, #126	; 0x7e
 800b07a:	e7cf      	b.n	800b01c <_malloc_r+0x274>
 800b07c:	f8de e008 	ldr.w	lr, [lr, #8]
 800b080:	45f0      	cmp	r8, lr
 800b082:	d005      	beq.n	800b090 <_malloc_r+0x2e8>
 800b084:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b088:	f022 0203 	bic.w	r2, r2, #3
 800b08c:	4562      	cmp	r2, ip
 800b08e:	d8f5      	bhi.n	800b07c <_malloc_r+0x2d4>
 800b090:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b094:	e7d1      	b.n	800b03a <_malloc_r+0x292>
 800b096:	bf00      	nop
 800b098:	200005a8 	.word	0x200005a8
 800b09c:	200005b0 	.word	0x200005b0
 800b0a0:	20000b48 	.word	0x20000b48
 800b0a4:	200009b0 	.word	0x200009b0
 800b0a8:	20000b18 	.word	0x20000b18
 800b0ac:	20000b40 	.word	0x20000b40
 800b0b0:	20000b44 	.word	0x20000b44
 800b0b4:	6860      	ldr	r0, [r4, #4]
 800b0b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b0ba:	f020 0003 	bic.w	r0, r0, #3
 800b0be:	eba0 0a07 	sub.w	sl, r0, r7
 800b0c2:	f1ba 0f0f 	cmp.w	sl, #15
 800b0c6:	dd12      	ble.n	800b0ee <_malloc_r+0x346>
 800b0c8:	68a3      	ldr	r3, [r4, #8]
 800b0ca:	19e2      	adds	r2, r4, r7
 800b0cc:	f047 0701 	orr.w	r7, r7, #1
 800b0d0:	6067      	str	r7, [r4, #4]
 800b0d2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b0d6:	f8cc 3008 	str.w	r3, [ip, #8]
 800b0da:	f04a 0301 	orr.w	r3, sl, #1
 800b0de:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b0e2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b0e6:	6053      	str	r3, [r2, #4]
 800b0e8:	f844 a000 	str.w	sl, [r4, r0]
 800b0ec:	e68d      	b.n	800ae0a <_malloc_r+0x62>
 800b0ee:	f1ba 0f00 	cmp.w	sl, #0
 800b0f2:	db11      	blt.n	800b118 <_malloc_r+0x370>
 800b0f4:	4420      	add	r0, r4
 800b0f6:	6843      	ldr	r3, [r0, #4]
 800b0f8:	f043 0301 	orr.w	r3, r3, #1
 800b0fc:	6043      	str	r3, [r0, #4]
 800b0fe:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b102:	4628      	mov	r0, r5
 800b104:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b108:	f8cc 3008 	str.w	r3, [ip, #8]
 800b10c:	f000 f8e2 	bl	800b2d4 <__malloc_unlock>
 800b110:	4620      	mov	r0, r4
 800b112:	b003      	add	sp, #12
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	4664      	mov	r4, ip
 800b11a:	e70e      	b.n	800af3a <_malloc_r+0x192>
 800b11c:	f858 0908 	ldr.w	r0, [r8], #-8
 800b120:	4540      	cmp	r0, r8
 800b122:	f103 33ff 	add.w	r3, r3, #4294967295
 800b126:	f43f af12 	beq.w	800af4e <_malloc_r+0x1a6>
 800b12a:	e717      	b.n	800af5c <_malloc_r+0x1b4>
 800b12c:	3304      	adds	r3, #4
 800b12e:	0052      	lsls	r2, r2, #1
 800b130:	4210      	tst	r0, r2
 800b132:	d0fb      	beq.n	800b12c <_malloc_r+0x384>
 800b134:	e6fb      	b.n	800af2e <_malloc_r+0x186>
 800b136:	4673      	mov	r3, lr
 800b138:	e7fa      	b.n	800b130 <_malloc_r+0x388>
 800b13a:	6810      	ldr	r0, [r2, #0]
 800b13c:	3001      	adds	r0, #1
 800b13e:	bf1b      	ittet	ne
 800b140:	eba4 0b0b 	subne.w	fp, r4, fp
 800b144:	eb0b 020e 	addne.w	r2, fp, lr
 800b148:	6014      	streq	r4, [r2, #0]
 800b14a:	601a      	strne	r2, [r3, #0]
 800b14c:	f014 0b07 	ands.w	fp, r4, #7
 800b150:	bf1a      	itte	ne
 800b152:	f1cb 0008 	rsbne	r0, fp, #8
 800b156:	1824      	addne	r4, r4, r0
 800b158:	4658      	moveq	r0, fp
 800b15a:	1862      	adds	r2, r4, r1
 800b15c:	ea02 010c 	and.w	r1, r2, ip
 800b160:	4480      	add	r8, r0
 800b162:	eba8 0801 	sub.w	r8, r8, r1
 800b166:	ea08 080c 	and.w	r8, r8, ip
 800b16a:	4641      	mov	r1, r8
 800b16c:	4628      	mov	r0, r5
 800b16e:	9201      	str	r2, [sp, #4]
 800b170:	f000 ff96 	bl	800c0a0 <_sbrk_r>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	9a01      	ldr	r2, [sp, #4]
 800b178:	4b28      	ldr	r3, [pc, #160]	; (800b21c <_malloc_r+0x474>)
 800b17a:	d107      	bne.n	800b18c <_malloc_r+0x3e4>
 800b17c:	f1bb 0f00 	cmp.w	fp, #0
 800b180:	d023      	beq.n	800b1ca <_malloc_r+0x422>
 800b182:	f1ab 0008 	sub.w	r0, fp, #8
 800b186:	4410      	add	r0, r2
 800b188:	f04f 0800 	mov.w	r8, #0
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	60b4      	str	r4, [r6, #8]
 800b190:	1b00      	subs	r0, r0, r4
 800b192:	4440      	add	r0, r8
 800b194:	4442      	add	r2, r8
 800b196:	f040 0001 	orr.w	r0, r0, #1
 800b19a:	45b2      	cmp	sl, r6
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	6060      	str	r0, [r4, #4]
 800b1a0:	f43f af28 	beq.w	800aff4 <_malloc_r+0x24c>
 800b1a4:	f1b9 0f0f 	cmp.w	r9, #15
 800b1a8:	d812      	bhi.n	800b1d0 <_malloc_r+0x428>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	6063      	str	r3, [r4, #4]
 800b1ae:	68b3      	ldr	r3, [r6, #8]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	42bb      	cmp	r3, r7
 800b1b8:	eba3 0207 	sub.w	r2, r3, r7
 800b1bc:	d301      	bcc.n	800b1c2 <_malloc_r+0x41a>
 800b1be:	2a0f      	cmp	r2, #15
 800b1c0:	dc22      	bgt.n	800b208 <_malloc_r+0x460>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f000 f886 	bl	800b2d4 <__malloc_unlock>
 800b1c8:	e5fa      	b.n	800adc0 <_malloc_r+0x18>
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	46d8      	mov	r8, fp
 800b1ce:	e7dd      	b.n	800b18c <_malloc_r+0x3e4>
 800b1d0:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b1d4:	f1a9 090c 	sub.w	r9, r9, #12
 800b1d8:	f029 0907 	bic.w	r9, r9, #7
 800b1dc:	f002 0201 	and.w	r2, r2, #1
 800b1e0:	ea42 0209 	orr.w	r2, r2, r9
 800b1e4:	f8ca 2004 	str.w	r2, [sl, #4]
 800b1e8:	2105      	movs	r1, #5
 800b1ea:	eb0a 0209 	add.w	r2, sl, r9
 800b1ee:	f1b9 0f0f 	cmp.w	r9, #15
 800b1f2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800b1f6:	f67f aefd 	bls.w	800aff4 <_malloc_r+0x24c>
 800b1fa:	f10a 0108 	add.w	r1, sl, #8
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7ff faf4 	bl	800a7ec <_free_r>
 800b204:	4b05      	ldr	r3, [pc, #20]	; (800b21c <_malloc_r+0x474>)
 800b206:	e6f5      	b.n	800aff4 <_malloc_r+0x24c>
 800b208:	68b4      	ldr	r4, [r6, #8]
 800b20a:	f047 0301 	orr.w	r3, r7, #1
 800b20e:	4427      	add	r7, r4
 800b210:	f042 0201 	orr.w	r2, r2, #1
 800b214:	6063      	str	r3, [r4, #4]
 800b216:	60b7      	str	r7, [r6, #8]
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	e5f6      	b.n	800ae0a <_malloc_r+0x62>
 800b21c:	20000b18 	.word	0x20000b18

0800b220 <_mbrtowc_r>:
 800b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b222:	4c0a      	ldr	r4, [pc, #40]	; (800b24c <_mbrtowc_r+0x2c>)
 800b224:	9e08      	ldr	r6, [sp, #32]
 800b226:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800b22a:	9600      	str	r6, [sp, #0]
 800b22c:	4605      	mov	r5, r0
 800b22e:	4614      	mov	r4, r2
 800b230:	b912      	cbnz	r2, 800b238 <_mbrtowc_r+0x18>
 800b232:	4a07      	ldr	r2, [pc, #28]	; (800b250 <_mbrtowc_r+0x30>)
 800b234:	2301      	movs	r3, #1
 800b236:	4621      	mov	r1, r4
 800b238:	47b8      	blx	r7
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	bf01      	itttt	eq
 800b23e:	2300      	moveq	r3, #0
 800b240:	6033      	streq	r3, [r6, #0]
 800b242:	238a      	moveq	r3, #138	; 0x8a
 800b244:	602b      	streq	r3, [r5, #0]
 800b246:	b003      	add	sp, #12
 800b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b24a:	bf00      	nop
 800b24c:	2000043c 	.word	0x2000043c
 800b250:	08011683 	.word	0x08011683

0800b254 <__ascii_mbtowc>:
 800b254:	b082      	sub	sp, #8
 800b256:	b901      	cbnz	r1, 800b25a <__ascii_mbtowc+0x6>
 800b258:	a901      	add	r1, sp, #4
 800b25a:	b142      	cbz	r2, 800b26e <__ascii_mbtowc+0x1a>
 800b25c:	b14b      	cbz	r3, 800b272 <__ascii_mbtowc+0x1e>
 800b25e:	7813      	ldrb	r3, [r2, #0]
 800b260:	600b      	str	r3, [r1, #0]
 800b262:	7812      	ldrb	r2, [r2, #0]
 800b264:	1e10      	subs	r0, r2, #0
 800b266:	bf18      	it	ne
 800b268:	2001      	movne	r0, #1
 800b26a:	b002      	add	sp, #8
 800b26c:	4770      	bx	lr
 800b26e:	4610      	mov	r0, r2
 800b270:	e7fb      	b.n	800b26a <__ascii_mbtowc+0x16>
 800b272:	f06f 0001 	mvn.w	r0, #1
 800b276:	e7f8      	b.n	800b26a <__ascii_mbtowc+0x16>

0800b278 <memcpy>:
 800b278:	440a      	add	r2, r1
 800b27a:	4291      	cmp	r1, r2
 800b27c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b280:	d100      	bne.n	800b284 <memcpy+0xc>
 800b282:	4770      	bx	lr
 800b284:	b510      	push	{r4, lr}
 800b286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b28e:	4291      	cmp	r1, r2
 800b290:	d1f9      	bne.n	800b286 <memcpy+0xe>
 800b292:	bd10      	pop	{r4, pc}

0800b294 <memmove>:
 800b294:	4288      	cmp	r0, r1
 800b296:	b510      	push	{r4, lr}
 800b298:	eb01 0402 	add.w	r4, r1, r2
 800b29c:	d902      	bls.n	800b2a4 <memmove+0x10>
 800b29e:	4284      	cmp	r4, r0
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	d807      	bhi.n	800b2b4 <memmove+0x20>
 800b2a4:	1e43      	subs	r3, r0, #1
 800b2a6:	42a1      	cmp	r1, r4
 800b2a8:	d008      	beq.n	800b2bc <memmove+0x28>
 800b2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2b2:	e7f8      	b.n	800b2a6 <memmove+0x12>
 800b2b4:	4402      	add	r2, r0
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	d100      	bne.n	800b2be <memmove+0x2a>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2c6:	e7f7      	b.n	800b2b8 <memmove+0x24>

0800b2c8 <__malloc_lock>:
 800b2c8:	4801      	ldr	r0, [pc, #4]	; (800b2d0 <__malloc_lock+0x8>)
 800b2ca:	f7ff bcef 	b.w	800acac <__retarget_lock_acquire_recursive>
 800b2ce:	bf00      	nop
 800b2d0:	20000b15 	.word	0x20000b15

0800b2d4 <__malloc_unlock>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__malloc_unlock+0x8>)
 800b2d6:	f7ff bcea 	b.w	800acae <__retarget_lock_release_recursive>
 800b2da:	bf00      	nop
 800b2dc:	20000b15 	.word	0x20000b15

0800b2e0 <_Balloc>:
 800b2e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b2e2:	b570      	push	{r4, r5, r6, lr}
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	b17b      	cbz	r3, 800b30a <_Balloc+0x2a>
 800b2ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b2ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b2f0:	b9a0      	cbnz	r0, 800b31c <_Balloc+0x3c>
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	fa01 f604 	lsl.w	r6, r1, r4
 800b2f8:	1d72      	adds	r2, r6, #5
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f003 ff3f 	bl	800f180 <_calloc_r>
 800b302:	b148      	cbz	r0, 800b318 <_Balloc+0x38>
 800b304:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b308:	e00b      	b.n	800b322 <_Balloc+0x42>
 800b30a:	2221      	movs	r2, #33	; 0x21
 800b30c:	2104      	movs	r1, #4
 800b30e:	f003 ff37 	bl	800f180 <_calloc_r>
 800b312:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b314:	2800      	cmp	r0, #0
 800b316:	d1e8      	bne.n	800b2ea <_Balloc+0xa>
 800b318:	2000      	movs	r0, #0
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	6802      	ldr	r2, [r0, #0]
 800b31e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b322:	2300      	movs	r3, #0
 800b324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b328:	e7f7      	b.n	800b31a <_Balloc+0x3a>

0800b32a <_Bfree>:
 800b32a:	b131      	cbz	r1, 800b33a <_Bfree+0x10>
 800b32c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b32e:	684a      	ldr	r2, [r1, #4]
 800b330:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b334:	6008      	str	r0, [r1, #0]
 800b336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b33a:	4770      	bx	lr

0800b33c <__multadd>:
 800b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	690d      	ldr	r5, [r1, #16]
 800b342:	4607      	mov	r7, r0
 800b344:	460c      	mov	r4, r1
 800b346:	461e      	mov	r6, r3
 800b348:	f101 0c14 	add.w	ip, r1, #20
 800b34c:	2000      	movs	r0, #0
 800b34e:	f8dc 3000 	ldr.w	r3, [ip]
 800b352:	b299      	uxth	r1, r3
 800b354:	fb02 6101 	mla	r1, r2, r1, r6
 800b358:	0c1e      	lsrs	r6, r3, #16
 800b35a:	0c0b      	lsrs	r3, r1, #16
 800b35c:	fb02 3306 	mla	r3, r2, r6, r3
 800b360:	b289      	uxth	r1, r1
 800b362:	3001      	adds	r0, #1
 800b364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b368:	4285      	cmp	r5, r0
 800b36a:	f84c 1b04 	str.w	r1, [ip], #4
 800b36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b372:	dcec      	bgt.n	800b34e <__multadd+0x12>
 800b374:	b30e      	cbz	r6, 800b3ba <__multadd+0x7e>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	42ab      	cmp	r3, r5
 800b37a:	dc19      	bgt.n	800b3b0 <__multadd+0x74>
 800b37c:	6861      	ldr	r1, [r4, #4]
 800b37e:	4638      	mov	r0, r7
 800b380:	3101      	adds	r1, #1
 800b382:	f7ff ffad 	bl	800b2e0 <_Balloc>
 800b386:	4680      	mov	r8, r0
 800b388:	b928      	cbnz	r0, 800b396 <__multadd+0x5a>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b0c      	ldr	r3, [pc, #48]	; (800b3c0 <__multadd+0x84>)
 800b38e:	480d      	ldr	r0, [pc, #52]	; (800b3c4 <__multadd+0x88>)
 800b390:	21b5      	movs	r1, #181	; 0xb5
 800b392:	f003 fed7 	bl	800f144 <__assert_func>
 800b396:	6922      	ldr	r2, [r4, #16]
 800b398:	3202      	adds	r2, #2
 800b39a:	f104 010c 	add.w	r1, r4, #12
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	300c      	adds	r0, #12
 800b3a2:	f7ff ff69 	bl	800b278 <memcpy>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff ffbe 	bl	800b32a <_Bfree>
 800b3ae:	4644      	mov	r4, r8
 800b3b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	615e      	str	r6, [r3, #20]
 800b3b8:	6125      	str	r5, [r4, #16]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	080113e2 	.word	0x080113e2
 800b3c4:	08011458 	.word	0x08011458

0800b3c8 <__s2b>:
 800b3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	4615      	mov	r5, r2
 800b3d0:	461f      	mov	r7, r3
 800b3d2:	2209      	movs	r2, #9
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3dc:	2100      	movs	r1, #0
 800b3de:	2201      	movs	r2, #1
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	db09      	blt.n	800b3f8 <__s2b+0x30>
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff ff7b 	bl	800b2e0 <_Balloc>
 800b3ea:	b940      	cbnz	r0, 800b3fe <__s2b+0x36>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <__s2b+0x8c>)
 800b3f0:	4819      	ldr	r0, [pc, #100]	; (800b458 <__s2b+0x90>)
 800b3f2:	21ce      	movs	r1, #206	; 0xce
 800b3f4:	f003 fea6 	bl	800f144 <__assert_func>
 800b3f8:	0052      	lsls	r2, r2, #1
 800b3fa:	3101      	adds	r1, #1
 800b3fc:	e7f0      	b.n	800b3e0 <__s2b+0x18>
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	6143      	str	r3, [r0, #20]
 800b402:	2d09      	cmp	r5, #9
 800b404:	f04f 0301 	mov.w	r3, #1
 800b408:	6103      	str	r3, [r0, #16]
 800b40a:	dd16      	ble.n	800b43a <__s2b+0x72>
 800b40c:	f104 0909 	add.w	r9, r4, #9
 800b410:	46c8      	mov	r8, r9
 800b412:	442c      	add	r4, r5
 800b414:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b418:	4601      	mov	r1, r0
 800b41a:	3b30      	subs	r3, #48	; 0x30
 800b41c:	220a      	movs	r2, #10
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ff8c 	bl	800b33c <__multadd>
 800b424:	45a0      	cmp	r8, r4
 800b426:	d1f5      	bne.n	800b414 <__s2b+0x4c>
 800b428:	f1a5 0408 	sub.w	r4, r5, #8
 800b42c:	444c      	add	r4, r9
 800b42e:	1b2d      	subs	r5, r5, r4
 800b430:	1963      	adds	r3, r4, r5
 800b432:	42bb      	cmp	r3, r7
 800b434:	db04      	blt.n	800b440 <__s2b+0x78>
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	340a      	adds	r4, #10
 800b43c:	2509      	movs	r5, #9
 800b43e:	e7f6      	b.n	800b42e <__s2b+0x66>
 800b440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b444:	4601      	mov	r1, r0
 800b446:	3b30      	subs	r3, #48	; 0x30
 800b448:	220a      	movs	r2, #10
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ff76 	bl	800b33c <__multadd>
 800b450:	e7ee      	b.n	800b430 <__s2b+0x68>
 800b452:	bf00      	nop
 800b454:	080113e2 	.word	0x080113e2
 800b458:	08011458 	.word	0x08011458

0800b45c <__hi0bits>:
 800b45c:	0c03      	lsrs	r3, r0, #16
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	b9d3      	cbnz	r3, 800b498 <__hi0bits+0x3c>
 800b462:	0400      	lsls	r0, r0, #16
 800b464:	2310      	movs	r3, #16
 800b466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b46a:	bf04      	itt	eq
 800b46c:	0200      	lsleq	r0, r0, #8
 800b46e:	3308      	addeq	r3, #8
 800b470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b474:	bf04      	itt	eq
 800b476:	0100      	lsleq	r0, r0, #4
 800b478:	3304      	addeq	r3, #4
 800b47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b47e:	bf04      	itt	eq
 800b480:	0080      	lsleq	r0, r0, #2
 800b482:	3302      	addeq	r3, #2
 800b484:	2800      	cmp	r0, #0
 800b486:	db05      	blt.n	800b494 <__hi0bits+0x38>
 800b488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b48c:	f103 0301 	add.w	r3, r3, #1
 800b490:	bf08      	it	eq
 800b492:	2320      	moveq	r3, #32
 800b494:	4618      	mov	r0, r3
 800b496:	4770      	bx	lr
 800b498:	2300      	movs	r3, #0
 800b49a:	e7e4      	b.n	800b466 <__hi0bits+0xa>

0800b49c <__lo0bits>:
 800b49c:	6803      	ldr	r3, [r0, #0]
 800b49e:	f013 0207 	ands.w	r2, r3, #7
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	d00b      	beq.n	800b4be <__lo0bits+0x22>
 800b4a6:	07da      	lsls	r2, r3, #31
 800b4a8:	d423      	bmi.n	800b4f2 <__lo0bits+0x56>
 800b4aa:	0798      	lsls	r0, r3, #30
 800b4ac:	bf49      	itett	mi
 800b4ae:	085b      	lsrmi	r3, r3, #1
 800b4b0:	089b      	lsrpl	r3, r3, #2
 800b4b2:	2001      	movmi	r0, #1
 800b4b4:	600b      	strmi	r3, [r1, #0]
 800b4b6:	bf5c      	itt	pl
 800b4b8:	600b      	strpl	r3, [r1, #0]
 800b4ba:	2002      	movpl	r0, #2
 800b4bc:	4770      	bx	lr
 800b4be:	b298      	uxth	r0, r3
 800b4c0:	b9a8      	cbnz	r0, 800b4ee <__lo0bits+0x52>
 800b4c2:	0c1b      	lsrs	r3, r3, #16
 800b4c4:	2010      	movs	r0, #16
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	b90a      	cbnz	r2, 800b4ce <__lo0bits+0x32>
 800b4ca:	3008      	adds	r0, #8
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	071a      	lsls	r2, r3, #28
 800b4d0:	bf04      	itt	eq
 800b4d2:	091b      	lsreq	r3, r3, #4
 800b4d4:	3004      	addeq	r0, #4
 800b4d6:	079a      	lsls	r2, r3, #30
 800b4d8:	bf04      	itt	eq
 800b4da:	089b      	lsreq	r3, r3, #2
 800b4dc:	3002      	addeq	r0, #2
 800b4de:	07da      	lsls	r2, r3, #31
 800b4e0:	d403      	bmi.n	800b4ea <__lo0bits+0x4e>
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	f100 0001 	add.w	r0, r0, #1
 800b4e8:	d005      	beq.n	800b4f6 <__lo0bits+0x5a>
 800b4ea:	600b      	str	r3, [r1, #0]
 800b4ec:	4770      	bx	lr
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	e7e9      	b.n	800b4c6 <__lo0bits+0x2a>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	4770      	bx	lr
 800b4f6:	2020      	movs	r0, #32
 800b4f8:	4770      	bx	lr
	...

0800b4fc <__i2b>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	2101      	movs	r1, #1
 800b502:	f7ff feed 	bl	800b2e0 <_Balloc>
 800b506:	4602      	mov	r2, r0
 800b508:	b928      	cbnz	r0, 800b516 <__i2b+0x1a>
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <__i2b+0x24>)
 800b50c:	4805      	ldr	r0, [pc, #20]	; (800b524 <__i2b+0x28>)
 800b50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b512:	f003 fe17 	bl	800f144 <__assert_func>
 800b516:	2301      	movs	r3, #1
 800b518:	6144      	str	r4, [r0, #20]
 800b51a:	6103      	str	r3, [r0, #16]
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	bf00      	nop
 800b520:	080113e2 	.word	0x080113e2
 800b524:	08011458 	.word	0x08011458

0800b528 <__multiply>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4691      	mov	r9, r2
 800b52e:	690a      	ldr	r2, [r1, #16]
 800b530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b534:	429a      	cmp	r2, r3
 800b536:	bfb8      	it	lt
 800b538:	460b      	movlt	r3, r1
 800b53a:	460c      	mov	r4, r1
 800b53c:	bfbc      	itt	lt
 800b53e:	464c      	movlt	r4, r9
 800b540:	4699      	movlt	r9, r3
 800b542:	6927      	ldr	r7, [r4, #16]
 800b544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	6861      	ldr	r1, [r4, #4]
 800b54c:	eb07 060a 	add.w	r6, r7, sl
 800b550:	42b3      	cmp	r3, r6
 800b552:	b085      	sub	sp, #20
 800b554:	bfb8      	it	lt
 800b556:	3101      	addlt	r1, #1
 800b558:	f7ff fec2 	bl	800b2e0 <_Balloc>
 800b55c:	b930      	cbnz	r0, 800b56c <__multiply+0x44>
 800b55e:	4602      	mov	r2, r0
 800b560:	4b44      	ldr	r3, [pc, #272]	; (800b674 <__multiply+0x14c>)
 800b562:	4845      	ldr	r0, [pc, #276]	; (800b678 <__multiply+0x150>)
 800b564:	f240 115d 	movw	r1, #349	; 0x15d
 800b568:	f003 fdec 	bl	800f144 <__assert_func>
 800b56c:	f100 0514 	add.w	r5, r0, #20
 800b570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b574:	462b      	mov	r3, r5
 800b576:	2200      	movs	r2, #0
 800b578:	4543      	cmp	r3, r8
 800b57a:	d321      	bcc.n	800b5c0 <__multiply+0x98>
 800b57c:	f104 0314 	add.w	r3, r4, #20
 800b580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b584:	f109 0314 	add.w	r3, r9, #20
 800b588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b58c:	9202      	str	r2, [sp, #8]
 800b58e:	1b3a      	subs	r2, r7, r4
 800b590:	3a15      	subs	r2, #21
 800b592:	f022 0203 	bic.w	r2, r2, #3
 800b596:	3204      	adds	r2, #4
 800b598:	f104 0115 	add.w	r1, r4, #21
 800b59c:	428f      	cmp	r7, r1
 800b59e:	bf38      	it	cc
 800b5a0:	2204      	movcc	r2, #4
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	9a02      	ldr	r2, [sp, #8]
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d80c      	bhi.n	800b5c6 <__multiply+0x9e>
 800b5ac:	2e00      	cmp	r6, #0
 800b5ae:	dd03      	ble.n	800b5b8 <__multiply+0x90>
 800b5b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d05a      	beq.n	800b66e <__multiply+0x146>
 800b5b8:	6106      	str	r6, [r0, #16]
 800b5ba:	b005      	add	sp, #20
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	f843 2b04 	str.w	r2, [r3], #4
 800b5c4:	e7d8      	b.n	800b578 <__multiply+0x50>
 800b5c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5ca:	f1ba 0f00 	cmp.w	sl, #0
 800b5ce:	d024      	beq.n	800b61a <__multiply+0xf2>
 800b5d0:	f104 0e14 	add.w	lr, r4, #20
 800b5d4:	46a9      	mov	r9, r5
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5de:	f8d9 1000 	ldr.w	r1, [r9]
 800b5e2:	fa1f fb82 	uxth.w	fp, r2
 800b5e6:	b289      	uxth	r1, r1
 800b5e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800b5f4:	4461      	add	r1, ip
 800b5f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b602:	b289      	uxth	r1, r1
 800b604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b608:	4577      	cmp	r7, lr
 800b60a:	f849 1b04 	str.w	r1, [r9], #4
 800b60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b612:	d8e2      	bhi.n	800b5da <__multiply+0xb2>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f845 c002 	str.w	ip, [r5, r2]
 800b61a:	9a03      	ldr	r2, [sp, #12]
 800b61c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b620:	3304      	adds	r3, #4
 800b622:	f1b9 0f00 	cmp.w	r9, #0
 800b626:	d020      	beq.n	800b66a <__multiply+0x142>
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	f104 0c14 	add.w	ip, r4, #20
 800b62e:	46ae      	mov	lr, r5
 800b630:	f04f 0a00 	mov.w	sl, #0
 800b634:	f8bc b000 	ldrh.w	fp, [ip]
 800b638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b63c:	fb09 220b 	mla	r2, r9, fp, r2
 800b640:	4492      	add	sl, r2
 800b642:	b289      	uxth	r1, r1
 800b644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b648:	f84e 1b04 	str.w	r1, [lr], #4
 800b64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b650:	f8be 1000 	ldrh.w	r1, [lr]
 800b654:	0c12      	lsrs	r2, r2, #16
 800b656:	fb09 1102 	mla	r1, r9, r2, r1
 800b65a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b65e:	4567      	cmp	r7, ip
 800b660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b664:	d8e6      	bhi.n	800b634 <__multiply+0x10c>
 800b666:	9a01      	ldr	r2, [sp, #4]
 800b668:	50a9      	str	r1, [r5, r2]
 800b66a:	3504      	adds	r5, #4
 800b66c:	e79a      	b.n	800b5a4 <__multiply+0x7c>
 800b66e:	3e01      	subs	r6, #1
 800b670:	e79c      	b.n	800b5ac <__multiply+0x84>
 800b672:	bf00      	nop
 800b674:	080113e2 	.word	0x080113e2
 800b678:	08011458 	.word	0x08011458

0800b67c <__pow5mult>:
 800b67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b680:	4615      	mov	r5, r2
 800b682:	f012 0203 	ands.w	r2, r2, #3
 800b686:	4606      	mov	r6, r0
 800b688:	460f      	mov	r7, r1
 800b68a:	d007      	beq.n	800b69c <__pow5mult+0x20>
 800b68c:	4c1a      	ldr	r4, [pc, #104]	; (800b6f8 <__pow5mult+0x7c>)
 800b68e:	3a01      	subs	r2, #1
 800b690:	2300      	movs	r3, #0
 800b692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b696:	f7ff fe51 	bl	800b33c <__multadd>
 800b69a:	4607      	mov	r7, r0
 800b69c:	10ad      	asrs	r5, r5, #2
 800b69e:	d027      	beq.n	800b6f0 <__pow5mult+0x74>
 800b6a0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b6a2:	b944      	cbnz	r4, 800b6b6 <__pow5mult+0x3a>
 800b6a4:	f240 2171 	movw	r1, #625	; 0x271
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff ff27 	bl	800b4fc <__i2b>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	64b0      	str	r0, [r6, #72]	; 0x48
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	f04f 0900 	mov.w	r9, #0
 800b6ba:	07eb      	lsls	r3, r5, #31
 800b6bc:	d50a      	bpl.n	800b6d4 <__pow5mult+0x58>
 800b6be:	4639      	mov	r1, r7
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff ff30 	bl	800b528 <__multiply>
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff fe2c 	bl	800b32a <_Bfree>
 800b6d2:	4647      	mov	r7, r8
 800b6d4:	106d      	asrs	r5, r5, #1
 800b6d6:	d00b      	beq.n	800b6f0 <__pow5mult+0x74>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	b938      	cbnz	r0, 800b6ec <__pow5mult+0x70>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff ff21 	bl	800b528 <__multiply>
 800b6e6:	6020      	str	r0, [r4, #0]
 800b6e8:	f8c0 9000 	str.w	r9, [r0]
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	e7e4      	b.n	800b6ba <__pow5mult+0x3e>
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	bf00      	nop
 800b6f8:	080115a8 	.word	0x080115a8

0800b6fc <__lshift>:
 800b6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	460c      	mov	r4, r1
 800b702:	6849      	ldr	r1, [r1, #4]
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	4607      	mov	r7, r0
 800b70e:	4691      	mov	r9, r2
 800b710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b714:	f108 0601 	add.w	r6, r8, #1
 800b718:	42b3      	cmp	r3, r6
 800b71a:	db0b      	blt.n	800b734 <__lshift+0x38>
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff fddf 	bl	800b2e0 <_Balloc>
 800b722:	4605      	mov	r5, r0
 800b724:	b948      	cbnz	r0, 800b73a <__lshift+0x3e>
 800b726:	4602      	mov	r2, r0
 800b728:	4b2a      	ldr	r3, [pc, #168]	; (800b7d4 <__lshift+0xd8>)
 800b72a:	482b      	ldr	r0, [pc, #172]	; (800b7d8 <__lshift+0xdc>)
 800b72c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b730:	f003 fd08 	bl	800f144 <__assert_func>
 800b734:	3101      	adds	r1, #1
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	e7ee      	b.n	800b718 <__lshift+0x1c>
 800b73a:	2300      	movs	r3, #0
 800b73c:	f100 0114 	add.w	r1, r0, #20
 800b740:	f100 0210 	add.w	r2, r0, #16
 800b744:	4618      	mov	r0, r3
 800b746:	4553      	cmp	r3, sl
 800b748:	db37      	blt.n	800b7ba <__lshift+0xbe>
 800b74a:	6920      	ldr	r0, [r4, #16]
 800b74c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b750:	f104 0314 	add.w	r3, r4, #20
 800b754:	f019 091f 	ands.w	r9, r9, #31
 800b758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b75c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b760:	d02f      	beq.n	800b7c2 <__lshift+0xc6>
 800b762:	f1c9 0e20 	rsb	lr, r9, #32
 800b766:	468a      	mov	sl, r1
 800b768:	f04f 0c00 	mov.w	ip, #0
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	fa02 f209 	lsl.w	r2, r2, r9
 800b772:	ea42 020c 	orr.w	r2, r2, ip
 800b776:	f84a 2b04 	str.w	r2, [sl], #4
 800b77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b77e:	4298      	cmp	r0, r3
 800b780:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b784:	d8f2      	bhi.n	800b76c <__lshift+0x70>
 800b786:	1b03      	subs	r3, r0, r4
 800b788:	3b15      	subs	r3, #21
 800b78a:	f023 0303 	bic.w	r3, r3, #3
 800b78e:	3304      	adds	r3, #4
 800b790:	f104 0215 	add.w	r2, r4, #21
 800b794:	4290      	cmp	r0, r2
 800b796:	bf38      	it	cc
 800b798:	2304      	movcc	r3, #4
 800b79a:	f841 c003 	str.w	ip, [r1, r3]
 800b79e:	f1bc 0f00 	cmp.w	ip, #0
 800b7a2:	d001      	beq.n	800b7a8 <__lshift+0xac>
 800b7a4:	f108 0602 	add.w	r6, r8, #2
 800b7a8:	3e01      	subs	r6, #1
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	612e      	str	r6, [r5, #16]
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	f7ff fdbb 	bl	800b32a <_Bfree>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7be:	3301      	adds	r3, #1
 800b7c0:	e7c1      	b.n	800b746 <__lshift+0x4a>
 800b7c2:	3904      	subs	r1, #4
 800b7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	d8f9      	bhi.n	800b7c4 <__lshift+0xc8>
 800b7d0:	e7ea      	b.n	800b7a8 <__lshift+0xac>
 800b7d2:	bf00      	nop
 800b7d4:	080113e2 	.word	0x080113e2
 800b7d8:	08011458 	.word	0x08011458

0800b7dc <__mcmp>:
 800b7dc:	b530      	push	{r4, r5, lr}
 800b7de:	6902      	ldr	r2, [r0, #16]
 800b7e0:	690c      	ldr	r4, [r1, #16]
 800b7e2:	1b12      	subs	r2, r2, r4
 800b7e4:	d10e      	bne.n	800b804 <__mcmp+0x28>
 800b7e6:	f100 0314 	add.w	r3, r0, #20
 800b7ea:	3114      	adds	r1, #20
 800b7ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7fc:	42a5      	cmp	r5, r4
 800b7fe:	d003      	beq.n	800b808 <__mcmp+0x2c>
 800b800:	d305      	bcc.n	800b80e <__mcmp+0x32>
 800b802:	2201      	movs	r2, #1
 800b804:	4610      	mov	r0, r2
 800b806:	bd30      	pop	{r4, r5, pc}
 800b808:	4283      	cmp	r3, r0
 800b80a:	d3f3      	bcc.n	800b7f4 <__mcmp+0x18>
 800b80c:	e7fa      	b.n	800b804 <__mcmp+0x28>
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	e7f7      	b.n	800b804 <__mcmp+0x28>

0800b814 <__mdiff>:
 800b814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	460c      	mov	r4, r1
 800b81a:	4606      	mov	r6, r0
 800b81c:	4611      	mov	r1, r2
 800b81e:	4620      	mov	r0, r4
 800b820:	4690      	mov	r8, r2
 800b822:	f7ff ffdb 	bl	800b7dc <__mcmp>
 800b826:	1e05      	subs	r5, r0, #0
 800b828:	d110      	bne.n	800b84c <__mdiff+0x38>
 800b82a:	4629      	mov	r1, r5
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7ff fd57 	bl	800b2e0 <_Balloc>
 800b832:	b930      	cbnz	r0, 800b842 <__mdiff+0x2e>
 800b834:	4b3a      	ldr	r3, [pc, #232]	; (800b920 <__mdiff+0x10c>)
 800b836:	4602      	mov	r2, r0
 800b838:	f240 2132 	movw	r1, #562	; 0x232
 800b83c:	4839      	ldr	r0, [pc, #228]	; (800b924 <__mdiff+0x110>)
 800b83e:	f003 fc81 	bl	800f144 <__assert_func>
 800b842:	2301      	movs	r3, #1
 800b844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	bfa4      	itt	ge
 800b84e:	4643      	movge	r3, r8
 800b850:	46a0      	movge	r8, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b858:	bfa6      	itte	ge
 800b85a:	461c      	movge	r4, r3
 800b85c:	2500      	movge	r5, #0
 800b85e:	2501      	movlt	r5, #1
 800b860:	f7ff fd3e 	bl	800b2e0 <_Balloc>
 800b864:	b920      	cbnz	r0, 800b870 <__mdiff+0x5c>
 800b866:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <__mdiff+0x10c>)
 800b868:	4602      	mov	r2, r0
 800b86a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b86e:	e7e5      	b.n	800b83c <__mdiff+0x28>
 800b870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b874:	6926      	ldr	r6, [r4, #16]
 800b876:	60c5      	str	r5, [r0, #12]
 800b878:	f104 0914 	add.w	r9, r4, #20
 800b87c:	f108 0514 	add.w	r5, r8, #20
 800b880:	f100 0e14 	add.w	lr, r0, #20
 800b884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b88c:	f108 0210 	add.w	r2, r8, #16
 800b890:	46f2      	mov	sl, lr
 800b892:	2100      	movs	r1, #0
 800b894:	f859 3b04 	ldr.w	r3, [r9], #4
 800b898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b89c:	fa1f f883 	uxth.w	r8, r3
 800b8a0:	fa11 f18b 	uxtah	r1, r1, fp
 800b8a4:	0c1b      	lsrs	r3, r3, #16
 800b8a6:	eba1 0808 	sub.w	r8, r1, r8
 800b8aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8b2:	fa1f f888 	uxth.w	r8, r8
 800b8b6:	1419      	asrs	r1, r3, #16
 800b8b8:	454e      	cmp	r6, r9
 800b8ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8be:	f84a 3b04 	str.w	r3, [sl], #4
 800b8c2:	d8e7      	bhi.n	800b894 <__mdiff+0x80>
 800b8c4:	1b33      	subs	r3, r6, r4
 800b8c6:	3b15      	subs	r3, #21
 800b8c8:	f023 0303 	bic.w	r3, r3, #3
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	3415      	adds	r4, #21
 800b8d0:	42a6      	cmp	r6, r4
 800b8d2:	bf38      	it	cc
 800b8d4:	2304      	movcc	r3, #4
 800b8d6:	441d      	add	r5, r3
 800b8d8:	4473      	add	r3, lr
 800b8da:	469e      	mov	lr, r3
 800b8dc:	462e      	mov	r6, r5
 800b8de:	4566      	cmp	r6, ip
 800b8e0:	d30e      	bcc.n	800b900 <__mdiff+0xec>
 800b8e2:	f10c 0203 	add.w	r2, ip, #3
 800b8e6:	1b52      	subs	r2, r2, r5
 800b8e8:	f022 0203 	bic.w	r2, r2, #3
 800b8ec:	3d03      	subs	r5, #3
 800b8ee:	45ac      	cmp	ip, r5
 800b8f0:	bf38      	it	cc
 800b8f2:	2200      	movcc	r2, #0
 800b8f4:	441a      	add	r2, r3
 800b8f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8fa:	b17b      	cbz	r3, 800b91c <__mdiff+0x108>
 800b8fc:	6107      	str	r7, [r0, #16]
 800b8fe:	e7a3      	b.n	800b848 <__mdiff+0x34>
 800b900:	f856 8b04 	ldr.w	r8, [r6], #4
 800b904:	fa11 f288 	uxtah	r2, r1, r8
 800b908:	1414      	asrs	r4, r2, #16
 800b90a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b90e:	b292      	uxth	r2, r2
 800b910:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b914:	f84e 2b04 	str.w	r2, [lr], #4
 800b918:	1421      	asrs	r1, r4, #16
 800b91a:	e7e0      	b.n	800b8de <__mdiff+0xca>
 800b91c:	3f01      	subs	r7, #1
 800b91e:	e7ea      	b.n	800b8f6 <__mdiff+0xe2>
 800b920:	080113e2 	.word	0x080113e2
 800b924:	08011458 	.word	0x08011458

0800b928 <__ulp>:
 800b928:	b082      	sub	sp, #8
 800b92a:	ed8d 0b00 	vstr	d0, [sp]
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	4912      	ldr	r1, [pc, #72]	; (800b97c <__ulp+0x54>)
 800b932:	4019      	ands	r1, r3
 800b934:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b938:	2900      	cmp	r1, #0
 800b93a:	dd05      	ble.n	800b948 <__ulp+0x20>
 800b93c:	2200      	movs	r2, #0
 800b93e:	460b      	mov	r3, r1
 800b940:	ec43 2b10 	vmov	d0, r2, r3
 800b944:	b002      	add	sp, #8
 800b946:	4770      	bx	lr
 800b948:	4249      	negs	r1, r1
 800b94a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b94e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	f04f 0300 	mov.w	r3, #0
 800b95a:	da04      	bge.n	800b966 <__ulp+0x3e>
 800b95c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b960:	fa41 f300 	asr.w	r3, r1, r0
 800b964:	e7ec      	b.n	800b940 <__ulp+0x18>
 800b966:	f1a0 0114 	sub.w	r1, r0, #20
 800b96a:	291e      	cmp	r1, #30
 800b96c:	bfda      	itte	le
 800b96e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b972:	fa20 f101 	lsrle.w	r1, r0, r1
 800b976:	2101      	movgt	r1, #1
 800b978:	460a      	mov	r2, r1
 800b97a:	e7e1      	b.n	800b940 <__ulp+0x18>
 800b97c:	7ff00000 	.word	0x7ff00000

0800b980 <__b2d>:
 800b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b982:	6905      	ldr	r5, [r0, #16]
 800b984:	f100 0714 	add.w	r7, r0, #20
 800b988:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b98c:	1f2e      	subs	r6, r5, #4
 800b98e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b992:	4620      	mov	r0, r4
 800b994:	f7ff fd62 	bl	800b45c <__hi0bits>
 800b998:	f1c0 0320 	rsb	r3, r0, #32
 800b99c:	280a      	cmp	r0, #10
 800b99e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ba1c <__b2d+0x9c>
 800b9a2:	600b      	str	r3, [r1, #0]
 800b9a4:	dc14      	bgt.n	800b9d0 <__b2d+0x50>
 800b9a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b9aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800b9ae:	42b7      	cmp	r7, r6
 800b9b0:	ea41 030c 	orr.w	r3, r1, ip
 800b9b4:	bf34      	ite	cc
 800b9b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9ba:	2100      	movcs	r1, #0
 800b9bc:	3015      	adds	r0, #21
 800b9be:	fa04 f000 	lsl.w	r0, r4, r0
 800b9c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b9c6:	ea40 0201 	orr.w	r2, r0, r1
 800b9ca:	ec43 2b10 	vmov	d0, r2, r3
 800b9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d0:	42b7      	cmp	r7, r6
 800b9d2:	bf3a      	itte	cc
 800b9d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b9dc:	2100      	movcs	r1, #0
 800b9de:	380b      	subs	r0, #11
 800b9e0:	d017      	beq.n	800ba12 <__b2d+0x92>
 800b9e2:	f1c0 0c20 	rsb	ip, r0, #32
 800b9e6:	fa04 f500 	lsl.w	r5, r4, r0
 800b9ea:	42be      	cmp	r6, r7
 800b9ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800b9f0:	ea45 0504 	orr.w	r5, r5, r4
 800b9f4:	bf8c      	ite	hi
 800b9f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b9fa:	2400      	movls	r4, #0
 800b9fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ba00:	fa01 f000 	lsl.w	r0, r1, r0
 800ba04:	fa24 f40c 	lsr.w	r4, r4, ip
 800ba08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba0c:	ea40 0204 	orr.w	r2, r0, r4
 800ba10:	e7db      	b.n	800b9ca <__b2d+0x4a>
 800ba12:	ea44 030c 	orr.w	r3, r4, ip
 800ba16:	460a      	mov	r2, r1
 800ba18:	e7d7      	b.n	800b9ca <__b2d+0x4a>
 800ba1a:	bf00      	nop
 800ba1c:	3ff00000 	.word	0x3ff00000

0800ba20 <__d2b>:
 800ba20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba24:	4689      	mov	r9, r1
 800ba26:	2101      	movs	r1, #1
 800ba28:	ec57 6b10 	vmov	r6, r7, d0
 800ba2c:	4690      	mov	r8, r2
 800ba2e:	f7ff fc57 	bl	800b2e0 <_Balloc>
 800ba32:	4604      	mov	r4, r0
 800ba34:	b930      	cbnz	r0, 800ba44 <__d2b+0x24>
 800ba36:	4602      	mov	r2, r0
 800ba38:	4b25      	ldr	r3, [pc, #148]	; (800bad0 <__d2b+0xb0>)
 800ba3a:	4826      	ldr	r0, [pc, #152]	; (800bad4 <__d2b+0xb4>)
 800ba3c:	f240 310a 	movw	r1, #778	; 0x30a
 800ba40:	f003 fb80 	bl	800f144 <__assert_func>
 800ba44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba4c:	bb35      	cbnz	r5, 800ba9c <__d2b+0x7c>
 800ba4e:	2e00      	cmp	r6, #0
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	d028      	beq.n	800baa6 <__d2b+0x86>
 800ba54:	4668      	mov	r0, sp
 800ba56:	9600      	str	r6, [sp, #0]
 800ba58:	f7ff fd20 	bl	800b49c <__lo0bits>
 800ba5c:	9900      	ldr	r1, [sp, #0]
 800ba5e:	b300      	cbz	r0, 800baa2 <__d2b+0x82>
 800ba60:	9a01      	ldr	r2, [sp, #4]
 800ba62:	f1c0 0320 	rsb	r3, r0, #32
 800ba66:	fa02 f303 	lsl.w	r3, r2, r3
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	40c2      	lsrs	r2, r0
 800ba6e:	6163      	str	r3, [r4, #20]
 800ba70:	9201      	str	r2, [sp, #4]
 800ba72:	9b01      	ldr	r3, [sp, #4]
 800ba74:	61a3      	str	r3, [r4, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bf14      	ite	ne
 800ba7a:	2202      	movne	r2, #2
 800ba7c:	2201      	moveq	r2, #1
 800ba7e:	6122      	str	r2, [r4, #16]
 800ba80:	b1d5      	cbz	r5, 800bab8 <__d2b+0x98>
 800ba82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba86:	4405      	add	r5, r0
 800ba88:	f8c9 5000 	str.w	r5, [r9]
 800ba8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba90:	f8c8 0000 	str.w	r0, [r8]
 800ba94:	4620      	mov	r0, r4
 800ba96:	b003      	add	sp, #12
 800ba98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baa0:	e7d5      	b.n	800ba4e <__d2b+0x2e>
 800baa2:	6161      	str	r1, [r4, #20]
 800baa4:	e7e5      	b.n	800ba72 <__d2b+0x52>
 800baa6:	a801      	add	r0, sp, #4
 800baa8:	f7ff fcf8 	bl	800b49c <__lo0bits>
 800baac:	9b01      	ldr	r3, [sp, #4]
 800baae:	6163      	str	r3, [r4, #20]
 800bab0:	2201      	movs	r2, #1
 800bab2:	6122      	str	r2, [r4, #16]
 800bab4:	3020      	adds	r0, #32
 800bab6:	e7e3      	b.n	800ba80 <__d2b+0x60>
 800bab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800babc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bac0:	f8c9 0000 	str.w	r0, [r9]
 800bac4:	6918      	ldr	r0, [r3, #16]
 800bac6:	f7ff fcc9 	bl	800b45c <__hi0bits>
 800baca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bace:	e7df      	b.n	800ba90 <__d2b+0x70>
 800bad0:	080113e2 	.word	0x080113e2
 800bad4:	08011458 	.word	0x08011458

0800bad8 <__ratio>:
 800bad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	4688      	mov	r8, r1
 800bade:	4669      	mov	r1, sp
 800bae0:	4681      	mov	r9, r0
 800bae2:	f7ff ff4d 	bl	800b980 <__b2d>
 800bae6:	a901      	add	r1, sp, #4
 800bae8:	4640      	mov	r0, r8
 800baea:	ec55 4b10 	vmov	r4, r5, d0
 800baee:	ee10 aa10 	vmov	sl, s0
 800baf2:	f7ff ff45 	bl	800b980 <__b2d>
 800baf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bafa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bafe:	1a59      	subs	r1, r3, r1
 800bb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bb0a:	ec57 6b10 	vmov	r6, r7, d0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bfd6      	itet	le
 800bb12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb16:	462a      	movgt	r2, r5
 800bb18:	463a      	movle	r2, r7
 800bb1a:	46ab      	mov	fp, r5
 800bb1c:	bfd6      	itet	le
 800bb1e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bb22:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bb26:	ee00 3a90 	vmovle	s1, r3
 800bb2a:	ec4b ab17 	vmov	d7, sl, fp
 800bb2e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bb32:	b003      	add	sp, #12
 800bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb38 <__copybits>:
 800bb38:	3901      	subs	r1, #1
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	1149      	asrs	r1, r1, #5
 800bb3e:	6914      	ldr	r4, [r2, #16]
 800bb40:	3101      	adds	r1, #1
 800bb42:	f102 0314 	add.w	r3, r2, #20
 800bb46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb4e:	1f05      	subs	r5, r0, #4
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	d30c      	bcc.n	800bb6e <__copybits+0x36>
 800bb54:	1aa3      	subs	r3, r4, r2
 800bb56:	3b11      	subs	r3, #17
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	3211      	adds	r2, #17
 800bb5e:	42a2      	cmp	r2, r4
 800bb60:	bf88      	it	hi
 800bb62:	2300      	movhi	r3, #0
 800bb64:	4418      	add	r0, r3
 800bb66:	2300      	movs	r3, #0
 800bb68:	4288      	cmp	r0, r1
 800bb6a:	d305      	bcc.n	800bb78 <__copybits+0x40>
 800bb6c:	bd70      	pop	{r4, r5, r6, pc}
 800bb6e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb72:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb76:	e7eb      	b.n	800bb50 <__copybits+0x18>
 800bb78:	f840 3b04 	str.w	r3, [r0], #4
 800bb7c:	e7f4      	b.n	800bb68 <__copybits+0x30>

0800bb7e <__any_on>:
 800bb7e:	f100 0214 	add.w	r2, r0, #20
 800bb82:	6900      	ldr	r0, [r0, #16]
 800bb84:	114b      	asrs	r3, r1, #5
 800bb86:	4298      	cmp	r0, r3
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	db11      	blt.n	800bbb0 <__any_on+0x32>
 800bb8c:	dd0a      	ble.n	800bba4 <__any_on+0x26>
 800bb8e:	f011 011f 	ands.w	r1, r1, #31
 800bb92:	d007      	beq.n	800bba4 <__any_on+0x26>
 800bb94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb98:	fa24 f001 	lsr.w	r0, r4, r1
 800bb9c:	fa00 f101 	lsl.w	r1, r0, r1
 800bba0:	428c      	cmp	r4, r1
 800bba2:	d10b      	bne.n	800bbbc <__any_on+0x3e>
 800bba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d803      	bhi.n	800bbb4 <__any_on+0x36>
 800bbac:	2000      	movs	r0, #0
 800bbae:	bd10      	pop	{r4, pc}
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	e7f7      	b.n	800bba4 <__any_on+0x26>
 800bbb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbb8:	2900      	cmp	r1, #0
 800bbba:	d0f5      	beq.n	800bba8 <__any_on+0x2a>
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	e7f6      	b.n	800bbae <__any_on+0x30>

0800bbc0 <realloc>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <realloc+0xc>)
 800bbc2:	460a      	mov	r2, r1
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	f000 b802 	b.w	800bbd0 <_realloc_r>
 800bbcc:	2000000c 	.word	0x2000000c

0800bbd0 <_realloc_r>:
 800bbd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	4681      	mov	r9, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b929      	cbnz	r1, 800bbe6 <_realloc_r+0x16>
 800bbda:	4611      	mov	r1, r2
 800bbdc:	b003      	add	sp, #12
 800bbde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe2:	f7ff b8e1 	b.w	800ada8 <_malloc_r>
 800bbe6:	9201      	str	r2, [sp, #4]
 800bbe8:	f7ff fb6e 	bl	800b2c8 <__malloc_lock>
 800bbec:	9a01      	ldr	r2, [sp, #4]
 800bbee:	f102 080b 	add.w	r8, r2, #11
 800bbf2:	f1b8 0f16 	cmp.w	r8, #22
 800bbf6:	d90b      	bls.n	800bc10 <_realloc_r+0x40>
 800bbf8:	f038 0807 	bics.w	r8, r8, #7
 800bbfc:	d50a      	bpl.n	800bc14 <_realloc_r+0x44>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	f8c9 3000 	str.w	r3, [r9]
 800bc04:	f04f 0b00 	mov.w	fp, #0
 800bc08:	4658      	mov	r0, fp
 800bc0a:	b003      	add	sp, #12
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	f04f 0810 	mov.w	r8, #16
 800bc14:	4590      	cmp	r8, r2
 800bc16:	d3f2      	bcc.n	800bbfe <_realloc_r+0x2e>
 800bc18:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bc1c:	f025 0603 	bic.w	r6, r5, #3
 800bc20:	45b0      	cmp	r8, r6
 800bc22:	f1a4 0a08 	sub.w	sl, r4, #8
 800bc26:	f340 816e 	ble.w	800bf06 <_realloc_r+0x336>
 800bc2a:	499b      	ldr	r1, [pc, #620]	; (800be98 <_realloc_r+0x2c8>)
 800bc2c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800bc30:	eb0a 0306 	add.w	r3, sl, r6
 800bc34:	459c      	cmp	ip, r3
 800bc36:	6859      	ldr	r1, [r3, #4]
 800bc38:	d005      	beq.n	800bc46 <_realloc_r+0x76>
 800bc3a:	f021 0001 	bic.w	r0, r1, #1
 800bc3e:	4418      	add	r0, r3
 800bc40:	6840      	ldr	r0, [r0, #4]
 800bc42:	07c7      	lsls	r7, r0, #31
 800bc44:	d427      	bmi.n	800bc96 <_realloc_r+0xc6>
 800bc46:	f021 0103 	bic.w	r1, r1, #3
 800bc4a:	459c      	cmp	ip, r3
 800bc4c:	eb06 0701 	add.w	r7, r6, r1
 800bc50:	d119      	bne.n	800bc86 <_realloc_r+0xb6>
 800bc52:	f108 0010 	add.w	r0, r8, #16
 800bc56:	42b8      	cmp	r0, r7
 800bc58:	dc1f      	bgt.n	800bc9a <_realloc_r+0xca>
 800bc5a:	eb0a 0308 	add.w	r3, sl, r8
 800bc5e:	4a8e      	ldr	r2, [pc, #568]	; (800be98 <_realloc_r+0x2c8>)
 800bc60:	eba7 0708 	sub.w	r7, r7, r8
 800bc64:	f047 0701 	orr.w	r7, r7, #1
 800bc68:	6093      	str	r3, [r2, #8]
 800bc6a:	605f      	str	r7, [r3, #4]
 800bc6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	ea43 0308 	orr.w	r3, r3, r8
 800bc78:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc7c:	4648      	mov	r0, r9
 800bc7e:	f7ff fb29 	bl	800b2d4 <__malloc_unlock>
 800bc82:	46a3      	mov	fp, r4
 800bc84:	e7c0      	b.n	800bc08 <_realloc_r+0x38>
 800bc86:	45b8      	cmp	r8, r7
 800bc88:	dc07      	bgt.n	800bc9a <_realloc_r+0xca>
 800bc8a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bc8e:	60da      	str	r2, [r3, #12]
 800bc90:	6093      	str	r3, [r2, #8]
 800bc92:	4655      	mov	r5, sl
 800bc94:	e07f      	b.n	800bd96 <_realloc_r+0x1c6>
 800bc96:	2100      	movs	r1, #0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	07e8      	lsls	r0, r5, #31
 800bc9c:	f100 80e5 	bmi.w	800be6a <_realloc_r+0x29a>
 800bca0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bca4:	ebaa 0505 	sub.w	r5, sl, r5
 800bca8:	6868      	ldr	r0, [r5, #4]
 800bcaa:	f020 0003 	bic.w	r0, r0, #3
 800bcae:	eb00 0b06 	add.w	fp, r0, r6
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 80a5 	beq.w	800be02 <_realloc_r+0x232>
 800bcb8:	459c      	cmp	ip, r3
 800bcba:	eb01 070b 	add.w	r7, r1, fp
 800bcbe:	d14a      	bne.n	800bd56 <_realloc_r+0x186>
 800bcc0:	f108 0310 	add.w	r3, r8, #16
 800bcc4:	42bb      	cmp	r3, r7
 800bcc6:	f300 809c 	bgt.w	800be02 <_realloc_r+0x232>
 800bcca:	46ab      	mov	fp, r5
 800bccc:	68eb      	ldr	r3, [r5, #12]
 800bcce:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bcd2:	60d3      	str	r3, [r2, #12]
 800bcd4:	609a      	str	r2, [r3, #8]
 800bcd6:	1f32      	subs	r2, r6, #4
 800bcd8:	2a24      	cmp	r2, #36	; 0x24
 800bcda:	d837      	bhi.n	800bd4c <_realloc_r+0x17c>
 800bcdc:	2a13      	cmp	r2, #19
 800bcde:	d933      	bls.n	800bd48 <_realloc_r+0x178>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	60ab      	str	r3, [r5, #8]
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	60eb      	str	r3, [r5, #12]
 800bce8:	2a1b      	cmp	r2, #27
 800bcea:	d81b      	bhi.n	800bd24 <_realloc_r+0x154>
 800bcec:	3408      	adds	r4, #8
 800bcee:	f105 0310 	add.w	r3, r5, #16
 800bcf2:	6822      	ldr	r2, [r4, #0]
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	6862      	ldr	r2, [r4, #4]
 800bcf8:	605a      	str	r2, [r3, #4]
 800bcfa:	68a2      	ldr	r2, [r4, #8]
 800bcfc:	609a      	str	r2, [r3, #8]
 800bcfe:	eb05 0308 	add.w	r3, r5, r8
 800bd02:	4a65      	ldr	r2, [pc, #404]	; (800be98 <_realloc_r+0x2c8>)
 800bd04:	eba7 0708 	sub.w	r7, r7, r8
 800bd08:	f047 0701 	orr.w	r7, r7, #1
 800bd0c:	6093      	str	r3, [r2, #8]
 800bd0e:	605f      	str	r7, [r3, #4]
 800bd10:	686b      	ldr	r3, [r5, #4]
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	ea43 0308 	orr.w	r3, r3, r8
 800bd1a:	606b      	str	r3, [r5, #4]
 800bd1c:	4648      	mov	r0, r9
 800bd1e:	f7ff fad9 	bl	800b2d4 <__malloc_unlock>
 800bd22:	e771      	b.n	800bc08 <_realloc_r+0x38>
 800bd24:	68a3      	ldr	r3, [r4, #8]
 800bd26:	612b      	str	r3, [r5, #16]
 800bd28:	68e3      	ldr	r3, [r4, #12]
 800bd2a:	616b      	str	r3, [r5, #20]
 800bd2c:	2a24      	cmp	r2, #36	; 0x24
 800bd2e:	bf01      	itttt	eq
 800bd30:	6923      	ldreq	r3, [r4, #16]
 800bd32:	61ab      	streq	r3, [r5, #24]
 800bd34:	6962      	ldreq	r2, [r4, #20]
 800bd36:	61ea      	streq	r2, [r5, #28]
 800bd38:	bf19      	ittee	ne
 800bd3a:	3410      	addne	r4, #16
 800bd3c:	f105 0318 	addne.w	r3, r5, #24
 800bd40:	f105 0320 	addeq.w	r3, r5, #32
 800bd44:	3418      	addeq	r4, #24
 800bd46:	e7d4      	b.n	800bcf2 <_realloc_r+0x122>
 800bd48:	465b      	mov	r3, fp
 800bd4a:	e7d2      	b.n	800bcf2 <_realloc_r+0x122>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4658      	mov	r0, fp
 800bd50:	f7ff faa0 	bl	800b294 <memmove>
 800bd54:	e7d3      	b.n	800bcfe <_realloc_r+0x12e>
 800bd56:	45b8      	cmp	r8, r7
 800bd58:	dc53      	bgt.n	800be02 <_realloc_r+0x232>
 800bd5a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bd5e:	4628      	mov	r0, r5
 800bd60:	60da      	str	r2, [r3, #12]
 800bd62:	6093      	str	r3, [r2, #8]
 800bd64:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bd68:	68eb      	ldr	r3, [r5, #12]
 800bd6a:	60d3      	str	r3, [r2, #12]
 800bd6c:	609a      	str	r2, [r3, #8]
 800bd6e:	1f32      	subs	r2, r6, #4
 800bd70:	2a24      	cmp	r2, #36	; 0x24
 800bd72:	d842      	bhi.n	800bdfa <_realloc_r+0x22a>
 800bd74:	2a13      	cmp	r2, #19
 800bd76:	d908      	bls.n	800bd8a <_realloc_r+0x1ba>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	60ab      	str	r3, [r5, #8]
 800bd7c:	6863      	ldr	r3, [r4, #4]
 800bd7e:	60eb      	str	r3, [r5, #12]
 800bd80:	2a1b      	cmp	r2, #27
 800bd82:	d828      	bhi.n	800bdd6 <_realloc_r+0x206>
 800bd84:	3408      	adds	r4, #8
 800bd86:	f105 0010 	add.w	r0, r5, #16
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	6003      	str	r3, [r0, #0]
 800bd8e:	6863      	ldr	r3, [r4, #4]
 800bd90:	6043      	str	r3, [r0, #4]
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	6083      	str	r3, [r0, #8]
 800bd96:	686b      	ldr	r3, [r5, #4]
 800bd98:	eba7 0008 	sub.w	r0, r7, r8
 800bd9c:	280f      	cmp	r0, #15
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	eb05 0207 	add.w	r2, r5, r7
 800bda6:	f240 80b0 	bls.w	800bf0a <_realloc_r+0x33a>
 800bdaa:	eb05 0108 	add.w	r1, r5, r8
 800bdae:	ea48 0303 	orr.w	r3, r8, r3
 800bdb2:	f040 0001 	orr.w	r0, r0, #1
 800bdb6:	606b      	str	r3, [r5, #4]
 800bdb8:	6048      	str	r0, [r1, #4]
 800bdba:	6853      	ldr	r3, [r2, #4]
 800bdbc:	f043 0301 	orr.w	r3, r3, #1
 800bdc0:	6053      	str	r3, [r2, #4]
 800bdc2:	3108      	adds	r1, #8
 800bdc4:	4648      	mov	r0, r9
 800bdc6:	f7fe fd11 	bl	800a7ec <_free_r>
 800bdca:	4648      	mov	r0, r9
 800bdcc:	f7ff fa82 	bl	800b2d4 <__malloc_unlock>
 800bdd0:	f105 0b08 	add.w	fp, r5, #8
 800bdd4:	e718      	b.n	800bc08 <_realloc_r+0x38>
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	612b      	str	r3, [r5, #16]
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	616b      	str	r3, [r5, #20]
 800bdde:	2a24      	cmp	r2, #36	; 0x24
 800bde0:	bf01      	itttt	eq
 800bde2:	6923      	ldreq	r3, [r4, #16]
 800bde4:	61ab      	streq	r3, [r5, #24]
 800bde6:	6963      	ldreq	r3, [r4, #20]
 800bde8:	61eb      	streq	r3, [r5, #28]
 800bdea:	bf19      	ittee	ne
 800bdec:	3410      	addne	r4, #16
 800bdee:	f105 0018 	addne.w	r0, r5, #24
 800bdf2:	f105 0020 	addeq.w	r0, r5, #32
 800bdf6:	3418      	addeq	r4, #24
 800bdf8:	e7c7      	b.n	800bd8a <_realloc_r+0x1ba>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f7ff fa4a 	bl	800b294 <memmove>
 800be00:	e7c9      	b.n	800bd96 <_realloc_r+0x1c6>
 800be02:	45d8      	cmp	r8, fp
 800be04:	dc31      	bgt.n	800be6a <_realloc_r+0x29a>
 800be06:	4628      	mov	r0, r5
 800be08:	68eb      	ldr	r3, [r5, #12]
 800be0a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800be0e:	60d3      	str	r3, [r2, #12]
 800be10:	609a      	str	r2, [r3, #8]
 800be12:	1f32      	subs	r2, r6, #4
 800be14:	2a24      	cmp	r2, #36	; 0x24
 800be16:	d824      	bhi.n	800be62 <_realloc_r+0x292>
 800be18:	2a13      	cmp	r2, #19
 800be1a:	d908      	bls.n	800be2e <_realloc_r+0x25e>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	60ab      	str	r3, [r5, #8]
 800be20:	6863      	ldr	r3, [r4, #4]
 800be22:	60eb      	str	r3, [r5, #12]
 800be24:	2a1b      	cmp	r2, #27
 800be26:	d80a      	bhi.n	800be3e <_realloc_r+0x26e>
 800be28:	3408      	adds	r4, #8
 800be2a:	f105 0010 	add.w	r0, r5, #16
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	6863      	ldr	r3, [r4, #4]
 800be34:	6043      	str	r3, [r0, #4]
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	6083      	str	r3, [r0, #8]
 800be3a:	465f      	mov	r7, fp
 800be3c:	e7ab      	b.n	800bd96 <_realloc_r+0x1c6>
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	612b      	str	r3, [r5, #16]
 800be42:	68e3      	ldr	r3, [r4, #12]
 800be44:	616b      	str	r3, [r5, #20]
 800be46:	2a24      	cmp	r2, #36	; 0x24
 800be48:	bf01      	itttt	eq
 800be4a:	6923      	ldreq	r3, [r4, #16]
 800be4c:	61ab      	streq	r3, [r5, #24]
 800be4e:	6963      	ldreq	r3, [r4, #20]
 800be50:	61eb      	streq	r3, [r5, #28]
 800be52:	bf19      	ittee	ne
 800be54:	3410      	addne	r4, #16
 800be56:	f105 0018 	addne.w	r0, r5, #24
 800be5a:	f105 0020 	addeq.w	r0, r5, #32
 800be5e:	3418      	addeq	r4, #24
 800be60:	e7e5      	b.n	800be2e <_realloc_r+0x25e>
 800be62:	4621      	mov	r1, r4
 800be64:	f7ff fa16 	bl	800b294 <memmove>
 800be68:	e7e7      	b.n	800be3a <_realloc_r+0x26a>
 800be6a:	4611      	mov	r1, r2
 800be6c:	4648      	mov	r0, r9
 800be6e:	f7fe ff9b 	bl	800ada8 <_malloc_r>
 800be72:	4683      	mov	fp, r0
 800be74:	2800      	cmp	r0, #0
 800be76:	f43f af51 	beq.w	800bd1c <_realloc_r+0x14c>
 800be7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800be7e:	f023 0301 	bic.w	r3, r3, #1
 800be82:	4453      	add	r3, sl
 800be84:	f1a0 0208 	sub.w	r2, r0, #8
 800be88:	4293      	cmp	r3, r2
 800be8a:	d107      	bne.n	800be9c <_realloc_r+0x2cc>
 800be8c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800be90:	f027 0703 	bic.w	r7, r7, #3
 800be94:	4437      	add	r7, r6
 800be96:	e6fc      	b.n	800bc92 <_realloc_r+0xc2>
 800be98:	200005a8 	.word	0x200005a8
 800be9c:	1f32      	subs	r2, r6, #4
 800be9e:	2a24      	cmp	r2, #36	; 0x24
 800bea0:	d82d      	bhi.n	800befe <_realloc_r+0x32e>
 800bea2:	2a13      	cmp	r2, #19
 800bea4:	d928      	bls.n	800bef8 <_realloc_r+0x328>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	6863      	ldr	r3, [r4, #4]
 800beac:	6043      	str	r3, [r0, #4]
 800beae:	2a1b      	cmp	r2, #27
 800beb0:	d80e      	bhi.n	800bed0 <_realloc_r+0x300>
 800beb2:	f104 0208 	add.w	r2, r4, #8
 800beb6:	f100 0308 	add.w	r3, r0, #8
 800beba:	6811      	ldr	r1, [r2, #0]
 800bebc:	6019      	str	r1, [r3, #0]
 800bebe:	6851      	ldr	r1, [r2, #4]
 800bec0:	6059      	str	r1, [r3, #4]
 800bec2:	6892      	ldr	r2, [r2, #8]
 800bec4:	609a      	str	r2, [r3, #8]
 800bec6:	4621      	mov	r1, r4
 800bec8:	4648      	mov	r0, r9
 800beca:	f7fe fc8f 	bl	800a7ec <_free_r>
 800bece:	e725      	b.n	800bd1c <_realloc_r+0x14c>
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	6083      	str	r3, [r0, #8]
 800bed4:	68e3      	ldr	r3, [r4, #12]
 800bed6:	60c3      	str	r3, [r0, #12]
 800bed8:	2a24      	cmp	r2, #36	; 0x24
 800beda:	bf01      	itttt	eq
 800bedc:	6923      	ldreq	r3, [r4, #16]
 800bede:	6103      	streq	r3, [r0, #16]
 800bee0:	6961      	ldreq	r1, [r4, #20]
 800bee2:	6141      	streq	r1, [r0, #20]
 800bee4:	bf19      	ittee	ne
 800bee6:	f104 0210 	addne.w	r2, r4, #16
 800beea:	f100 0310 	addne.w	r3, r0, #16
 800beee:	f104 0218 	addeq.w	r2, r4, #24
 800bef2:	f100 0318 	addeq.w	r3, r0, #24
 800bef6:	e7e0      	b.n	800beba <_realloc_r+0x2ea>
 800bef8:	4603      	mov	r3, r0
 800befa:	4622      	mov	r2, r4
 800befc:	e7dd      	b.n	800beba <_realloc_r+0x2ea>
 800befe:	4621      	mov	r1, r4
 800bf00:	f7ff f9c8 	bl	800b294 <memmove>
 800bf04:	e7df      	b.n	800bec6 <_realloc_r+0x2f6>
 800bf06:	4637      	mov	r7, r6
 800bf08:	e6c3      	b.n	800bc92 <_realloc_r+0xc2>
 800bf0a:	431f      	orrs	r7, r3
 800bf0c:	606f      	str	r7, [r5, #4]
 800bf0e:	6853      	ldr	r3, [r2, #4]
 800bf10:	f043 0301 	orr.w	r3, r3, #1
 800bf14:	6053      	str	r3, [r2, #4]
 800bf16:	e758      	b.n	800bdca <_realloc_r+0x1fa>

0800bf18 <lflush>:
 800bf18:	8983      	ldrh	r3, [r0, #12]
 800bf1a:	f003 0309 	and.w	r3, r3, #9
 800bf1e:	2b09      	cmp	r3, #9
 800bf20:	d101      	bne.n	800bf26 <lflush+0xe>
 800bf22:	f7fe bb13 	b.w	800a54c <fflush>
 800bf26:	2000      	movs	r0, #0
 800bf28:	4770      	bx	lr
	...

0800bf2c <__srefill_r>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	4605      	mov	r5, r0
 800bf32:	b118      	cbz	r0, 800bf3c <__srefill_r+0x10>
 800bf34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bf36:	b90b      	cbnz	r3, 800bf3c <__srefill_r+0x10>
 800bf38:	f7fe fb60 	bl	800a5fc <__sinit>
 800bf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf40:	049f      	lsls	r7, r3, #18
 800bf42:	d406      	bmi.n	800bf52 <__srefill_r+0x26>
 800bf44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf50:	6663      	str	r3, [r4, #100]	; 0x64
 800bf52:	2300      	movs	r3, #0
 800bf54:	6063      	str	r3, [r4, #4]
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf5c:	069e      	lsls	r6, r3, #26
 800bf5e:	d502      	bpl.n	800bf66 <__srefill_r+0x3a>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	e05c      	b.n	800c020 <__srefill_r+0xf4>
 800bf66:	0758      	lsls	r0, r3, #29
 800bf68:	d448      	bmi.n	800bffc <__srefill_r+0xd0>
 800bf6a:	06d9      	lsls	r1, r3, #27
 800bf6c:	d405      	bmi.n	800bf7a <__srefill_r+0x4e>
 800bf6e:	2309      	movs	r3, #9
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	e7f2      	b.n	800bf60 <__srefill_r+0x34>
 800bf7a:	071a      	lsls	r2, r3, #28
 800bf7c:	d50b      	bpl.n	800bf96 <__srefill_r+0x6a>
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4628      	mov	r0, r5
 800bf82:	f7fe fabd 	bl	800a500 <_fflush_r>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d1ea      	bne.n	800bf60 <__srefill_r+0x34>
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	60a0      	str	r0, [r4, #8]
 800bf8e:	f023 0308 	bic.w	r3, r3, #8
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	61a0      	str	r0, [r4, #24]
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f043 0304 	orr.w	r3, r3, #4
 800bf9c:	81a3      	strh	r3, [r4, #12]
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	b91b      	cbnz	r3, 800bfaa <__srefill_r+0x7e>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f7fe feaf 	bl	800ad08 <__smakebuf_r>
 800bfaa:	89a6      	ldrh	r6, [r4, #12]
 800bfac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800bfb0:	07b3      	lsls	r3, r6, #30
 800bfb2:	d00f      	beq.n	800bfd4 <__srefill_r+0xa8>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	4b1b      	ldr	r3, [pc, #108]	; (800c028 <__srefill_r+0xfc>)
 800bfba:	491c      	ldr	r1, [pc, #112]	; (800c02c <__srefill_r+0x100>)
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	f006 0609 	and.w	r6, r6, #9
 800bfc2:	f7fe fe1d 	bl	800ac00 <_fwalk>
 800bfc6:	2e09      	cmp	r6, #9
 800bfc8:	81a7      	strh	r7, [r4, #12]
 800bfca:	d103      	bne.n	800bfd4 <__srefill_r+0xa8>
 800bfcc:	4621      	mov	r1, r4
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f7fe fa08 	bl	800a3e4 <__sflush_r>
 800bfd4:	6922      	ldr	r2, [r4, #16]
 800bfd6:	6a26      	ldr	r6, [r4, #32]
 800bfd8:	6963      	ldr	r3, [r4, #20]
 800bfda:	69e1      	ldr	r1, [r4, #28]
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	6060      	str	r0, [r4, #4]
 800bfe6:	dc1c      	bgt.n	800c022 <__srefill_r+0xf6>
 800bfe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfec:	bf17      	itett	ne
 800bfee:	2200      	movne	r2, #0
 800bff0:	f043 0320 	orreq.w	r3, r3, #32
 800bff4:	6062      	strne	r2, [r4, #4]
 800bff6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800bffa:	e7bc      	b.n	800bf76 <__srefill_r+0x4a>
 800bffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0cd      	beq.n	800bf9e <__srefill_r+0x72>
 800c002:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c006:	4299      	cmp	r1, r3
 800c008:	d002      	beq.n	800c010 <__srefill_r+0xe4>
 800c00a:	4628      	mov	r0, r5
 800c00c:	f7fe fbee 	bl	800a7ec <_free_r>
 800c010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c012:	6063      	str	r3, [r4, #4]
 800c014:	2000      	movs	r0, #0
 800c016:	6320      	str	r0, [r4, #48]	; 0x30
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0c0      	beq.n	800bf9e <__srefill_r+0x72>
 800c01c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c022:	2000      	movs	r0, #0
 800c024:	e7fc      	b.n	800c020 <__srefill_r+0xf4>
 800c026:	bf00      	nop
 800c028:	08011230 	.word	0x08011230
 800c02c:	0800bf19 	.word	0x0800bf19

0800c030 <frexp>:
 800c030:	2200      	movs	r2, #0
 800c032:	ee10 1a90 	vmov	r1, s1
 800c036:	6002      	str	r2, [r0, #0]
 800c038:	4a17      	ldr	r2, [pc, #92]	; (800c098 <frexp+0x68>)
 800c03a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c03e:	4293      	cmp	r3, r2
 800c040:	dc23      	bgt.n	800c08a <frexp+0x5a>
 800c042:	ee10 2a10 	vmov	r2, s0
 800c046:	431a      	orrs	r2, r3
 800c048:	d01f      	beq.n	800c08a <frexp+0x5a>
 800c04a:	4a14      	ldr	r2, [pc, #80]	; (800c09c <frexp+0x6c>)
 800c04c:	400a      	ands	r2, r1
 800c04e:	b952      	cbnz	r2, 800c066 <frexp+0x36>
 800c050:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c090 <frexp+0x60>
 800c054:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c058:	ee10 1a90 	vmov	r1, s1
 800c05c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800c060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c064:	6002      	str	r2, [r0, #0]
 800c066:	6802      	ldr	r2, [r0, #0]
 800c068:	151b      	asrs	r3, r3, #20
 800c06a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c06e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800c072:	4413      	add	r3, r2
 800c074:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	ec53 2b10 	vmov	r2, r3, d0
 800c07e:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800c082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c086:	ec43 2b10 	vmov	d0, r2, r3
 800c08a:	4770      	bx	lr
 800c08c:	f3af 8000 	nop.w
 800c090:	00000000 	.word	0x00000000
 800c094:	43500000 	.word	0x43500000
 800c098:	7fefffff 	.word	0x7fefffff
 800c09c:	7ff00000 	.word	0x7ff00000

0800c0a0 <_sbrk_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d06      	ldr	r5, [pc, #24]	; (800c0bc <_sbrk_r+0x1c>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	f7f6 fae4 	bl	8002678 <_sbrk>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_sbrk_r+0x1a>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_sbrk_r+0x1a>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	20000b4c 	.word	0x20000b4c

0800c0c0 <__sccl>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	780b      	ldrb	r3, [r1, #0]
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	2b5e      	cmp	r3, #94	; 0x5e
 800c0c8:	bf0b      	itete	eq
 800c0ca:	784b      	ldrbeq	r3, [r1, #1]
 800c0cc:	1c48      	addne	r0, r1, #1
 800c0ce:	1c88      	addeq	r0, r1, #2
 800c0d0:	2200      	movne	r2, #0
 800c0d2:	bf08      	it	eq
 800c0d4:	2201      	moveq	r2, #1
 800c0d6:	1e61      	subs	r1, r4, #1
 800c0d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c0dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c0e0:	42a9      	cmp	r1, r5
 800c0e2:	d1fb      	bne.n	800c0dc <__sccl+0x1c>
 800c0e4:	b90b      	cbnz	r3, 800c0ea <__sccl+0x2a>
 800c0e6:	3801      	subs	r0, #1
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	f082 0201 	eor.w	r2, r2, #1
 800c0ee:	54e2      	strb	r2, [r4, r3]
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c0f8:	292d      	cmp	r1, #45	; 0x2d
 800c0fa:	d006      	beq.n	800c10a <__sccl+0x4a>
 800c0fc:	295d      	cmp	r1, #93	; 0x5d
 800c0fe:	d0f3      	beq.n	800c0e8 <__sccl+0x28>
 800c100:	b909      	cbnz	r1, 800c106 <__sccl+0x46>
 800c102:	4628      	mov	r0, r5
 800c104:	e7f0      	b.n	800c0e8 <__sccl+0x28>
 800c106:	460b      	mov	r3, r1
 800c108:	e7f1      	b.n	800c0ee <__sccl+0x2e>
 800c10a:	786e      	ldrb	r6, [r5, #1]
 800c10c:	2e5d      	cmp	r6, #93	; 0x5d
 800c10e:	d0fa      	beq.n	800c106 <__sccl+0x46>
 800c110:	42b3      	cmp	r3, r6
 800c112:	dcf8      	bgt.n	800c106 <__sccl+0x46>
 800c114:	3502      	adds	r5, #2
 800c116:	4619      	mov	r1, r3
 800c118:	3101      	adds	r1, #1
 800c11a:	428e      	cmp	r6, r1
 800c11c:	5462      	strb	r2, [r4, r1]
 800c11e:	dcfb      	bgt.n	800c118 <__sccl+0x58>
 800c120:	1af1      	subs	r1, r6, r3
 800c122:	3901      	subs	r1, #1
 800c124:	1c58      	adds	r0, r3, #1
 800c126:	42b3      	cmp	r3, r6
 800c128:	bfa8      	it	ge
 800c12a:	2100      	movge	r1, #0
 800c12c:	1843      	adds	r3, r0, r1
 800c12e:	e7e0      	b.n	800c0f2 <__sccl+0x32>

0800c130 <nanf>:
 800c130:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c138 <nanf+0x8>
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	7fc00000 	.word	0x7fc00000

0800c13c <sprintf>:
 800c13c:	b40e      	push	{r1, r2, r3}
 800c13e:	b500      	push	{lr}
 800c140:	b09c      	sub	sp, #112	; 0x70
 800c142:	ab1d      	add	r3, sp, #116	; 0x74
 800c144:	9002      	str	r0, [sp, #8]
 800c146:	9006      	str	r0, [sp, #24]
 800c148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c14c:	4809      	ldr	r0, [pc, #36]	; (800c174 <sprintf+0x38>)
 800c14e:	9107      	str	r1, [sp, #28]
 800c150:	9104      	str	r1, [sp, #16]
 800c152:	4909      	ldr	r1, [pc, #36]	; (800c178 <sprintf+0x3c>)
 800c154:	f853 2b04 	ldr.w	r2, [r3], #4
 800c158:	9105      	str	r1, [sp, #20]
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	a902      	add	r1, sp, #8
 800c160:	f000 ffe2 	bl	800d128 <_svfprintf_r>
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	b01c      	add	sp, #112	; 0x70
 800c16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c170:	b003      	add	sp, #12
 800c172:	4770      	bx	lr
 800c174:	2000000c 	.word	0x2000000c
 800c178:	ffff0208 	.word	0xffff0208

0800c17c <__sread>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	460c      	mov	r4, r1
 800c180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c184:	f003 fcbc 	bl	800fb00 <_read_r>
 800c188:	2800      	cmp	r0, #0
 800c18a:	bfab      	itete	ge
 800c18c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800c18e:	89a3      	ldrhlt	r3, [r4, #12]
 800c190:	181b      	addge	r3, r3, r0
 800c192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c196:	bfac      	ite	ge
 800c198:	6523      	strge	r3, [r4, #80]	; 0x50
 800c19a:	81a3      	strhlt	r3, [r4, #12]
 800c19c:	bd10      	pop	{r4, pc}

0800c19e <__swrite>:
 800c19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a2:	461f      	mov	r7, r3
 800c1a4:	898b      	ldrh	r3, [r1, #12]
 800c1a6:	05db      	lsls	r3, r3, #23
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	4616      	mov	r6, r2
 800c1ae:	d505      	bpl.n	800c1bc <__swrite+0x1e>
 800c1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f003 fc90 	bl	800fadc <_lseek_r>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	f002 bf63 	b.w	800f09c <_write_r>

0800c1d6 <__sseek>:
 800c1d6:	b510      	push	{r4, lr}
 800c1d8:	460c      	mov	r4, r1
 800c1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1de:	f003 fc7d 	bl	800fadc <_lseek_r>
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	bf15      	itete	ne
 800c1e8:	6520      	strne	r0, [r4, #80]	; 0x50
 800c1ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1f2:	81a3      	strheq	r3, [r4, #12]
 800c1f4:	bf18      	it	ne
 800c1f6:	81a3      	strhne	r3, [r4, #12]
 800c1f8:	bd10      	pop	{r4, pc}

0800c1fa <__sclose>:
 800c1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fe:	f002 bff5 	b.w	800f1ec <_close_r>

0800c202 <strncpy>:
 800c202:	b510      	push	{r4, lr}
 800c204:	3901      	subs	r1, #1
 800c206:	4603      	mov	r3, r0
 800c208:	b132      	cbz	r2, 800c218 <strncpy+0x16>
 800c20a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c20e:	f803 4b01 	strb.w	r4, [r3], #1
 800c212:	3a01      	subs	r2, #1
 800c214:	2c00      	cmp	r4, #0
 800c216:	d1f7      	bne.n	800c208 <strncpy+0x6>
 800c218:	441a      	add	r2, r3
 800c21a:	2100      	movs	r1, #0
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d100      	bne.n	800c222 <strncpy+0x20>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f803 1b01 	strb.w	r1, [r3], #1
 800c226:	e7f9      	b.n	800c21c <strncpy+0x1a>

0800c228 <sulp>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
 800c22e:	4616      	mov	r6, r2
 800c230:	ec45 4b10 	vmov	d0, r4, r5
 800c234:	f7ff fb78 	bl	800b928 <__ulp>
 800c238:	b17e      	cbz	r6, 800c25a <sulp+0x32>
 800c23a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c23e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd09      	ble.n	800c25a <sulp+0x32>
 800c246:	051b      	lsls	r3, r3, #20
 800c248:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c24c:	2000      	movs	r0, #0
 800c24e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c252:	ec41 0b17 	vmov	d7, r0, r1
 800c256:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	0000      	movs	r0, r0
	...

0800c260 <_strtod_l>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	ed2d 8b0e 	vpush	{d8-d14}
 800c268:	b097      	sub	sp, #92	; 0x5c
 800c26a:	461f      	mov	r7, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	9312      	str	r3, [sp, #72]	; 0x48
 800c270:	4ba1      	ldr	r3, [pc, #644]	; (800c4f8 <_strtod_l+0x298>)
 800c272:	920d      	str	r2, [sp, #52]	; 0x34
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	9307      	str	r3, [sp, #28]
 800c278:	4604      	mov	r4, r0
 800c27a:	4618      	mov	r0, r3
 800c27c:	468b      	mov	fp, r1
 800c27e:	f7f3 ffdf 	bl	8000240 <strlen>
 800c282:	f04f 0800 	mov.w	r8, #0
 800c286:	4605      	mov	r5, r0
 800c288:	f04f 0900 	mov.w	r9, #0
 800c28c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c290:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c292:	7813      	ldrb	r3, [r2, #0]
 800c294:	2b2b      	cmp	r3, #43	; 0x2b
 800c296:	d04d      	beq.n	800c334 <_strtod_l+0xd4>
 800c298:	d83a      	bhi.n	800c310 <_strtod_l+0xb0>
 800c29a:	2b0d      	cmp	r3, #13
 800c29c:	d833      	bhi.n	800c306 <_strtod_l+0xa6>
 800c29e:	2b08      	cmp	r3, #8
 800c2a0:	d833      	bhi.n	800c30a <_strtod_l+0xaa>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d03d      	beq.n	800c322 <_strtod_l+0xc2>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9308      	str	r3, [sp, #32]
 800c2aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c2ac:	7833      	ldrb	r3, [r6, #0]
 800c2ae:	2b30      	cmp	r3, #48	; 0x30
 800c2b0:	f040 80b0 	bne.w	800c414 <_strtod_l+0x1b4>
 800c2b4:	7873      	ldrb	r3, [r6, #1]
 800c2b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2ba:	2b58      	cmp	r3, #88	; 0x58
 800c2bc:	d167      	bne.n	800c38e <_strtod_l+0x12e>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	ab12      	add	r3, sp, #72	; 0x48
 800c2c4:	9702      	str	r7, [sp, #8]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4a8c      	ldr	r2, [pc, #560]	; (800c4fc <_strtod_l+0x29c>)
 800c2ca:	ab13      	add	r3, sp, #76	; 0x4c
 800c2cc:	a911      	add	r1, sp, #68	; 0x44
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f003 f8ec 	bl	800f4ac <__gethex>
 800c2d4:	f010 0507 	ands.w	r5, r0, #7
 800c2d8:	4607      	mov	r7, r0
 800c2da:	d005      	beq.n	800c2e8 <_strtod_l+0x88>
 800c2dc:	2d06      	cmp	r5, #6
 800c2de:	d12b      	bne.n	800c338 <_strtod_l+0xd8>
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9611      	str	r6, [sp, #68]	; 0x44
 800c2e6:	9308      	str	r3, [sp, #32]
 800c2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f040 854e 	bne.w	800cd8c <_strtod_l+0xb2c>
 800c2f0:	9b08      	ldr	r3, [sp, #32]
 800c2f2:	b1e3      	cbz	r3, 800c32e <_strtod_l+0xce>
 800c2f4:	ec49 8b17 	vmov	d7, r8, r9
 800c2f8:	eeb1 0b47 	vneg.f64	d0, d7
 800c2fc:	b017      	add	sp, #92	; 0x5c
 800c2fe:	ecbd 8b0e 	vpop	{d8-d14}
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	2b20      	cmp	r3, #32
 800c308:	d1cd      	bne.n	800c2a6 <_strtod_l+0x46>
 800c30a:	3201      	adds	r2, #1
 800c30c:	9211      	str	r2, [sp, #68]	; 0x44
 800c30e:	e7bf      	b.n	800c290 <_strtod_l+0x30>
 800c310:	2b2d      	cmp	r3, #45	; 0x2d
 800c312:	d1c8      	bne.n	800c2a6 <_strtod_l+0x46>
 800c314:	2301      	movs	r3, #1
 800c316:	9308      	str	r3, [sp, #32]
 800c318:	1c53      	adds	r3, r2, #1
 800c31a:	9311      	str	r3, [sp, #68]	; 0x44
 800c31c:	7853      	ldrb	r3, [r2, #1]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1c3      	bne.n	800c2aa <_strtod_l+0x4a>
 800c322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c324:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 852d 	bne.w	800cd88 <_strtod_l+0xb28>
 800c32e:	ec49 8b10 	vmov	d0, r8, r9
 800c332:	e7e3      	b.n	800c2fc <_strtod_l+0x9c>
 800c334:	2300      	movs	r3, #0
 800c336:	e7ee      	b.n	800c316 <_strtod_l+0xb6>
 800c338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c33a:	b13a      	cbz	r2, 800c34c <_strtod_l+0xec>
 800c33c:	2135      	movs	r1, #53	; 0x35
 800c33e:	a814      	add	r0, sp, #80	; 0x50
 800c340:	f7ff fbfa 	bl	800bb38 <__copybits>
 800c344:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c346:	4620      	mov	r0, r4
 800c348:	f7fe ffef 	bl	800b32a <_Bfree>
 800c34c:	3d01      	subs	r5, #1
 800c34e:	2d04      	cmp	r5, #4
 800c350:	d806      	bhi.n	800c360 <_strtod_l+0x100>
 800c352:	e8df f005 	tbb	[pc, r5]
 800c356:	030a      	.short	0x030a
 800c358:	1714      	.short	0x1714
 800c35a:	0a          	.byte	0x0a
 800c35b:	00          	.byte	0x00
 800c35c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c360:	073f      	lsls	r7, r7, #28
 800c362:	d5c1      	bpl.n	800c2e8 <_strtod_l+0x88>
 800c364:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c368:	e7be      	b.n	800c2e8 <_strtod_l+0x88>
 800c36a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c36e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c370:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c374:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c378:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c37c:	e7f0      	b.n	800c360 <_strtod_l+0x100>
 800c37e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800c500 <_strtod_l+0x2a0>
 800c382:	e7ed      	b.n	800c360 <_strtod_l+0x100>
 800c384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c388:	f04f 38ff 	mov.w	r8, #4294967295
 800c38c:	e7e8      	b.n	800c360 <_strtod_l+0x100>
 800c38e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	9211      	str	r2, [sp, #68]	; 0x44
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	2b30      	cmp	r3, #48	; 0x30
 800c398:	d0f9      	beq.n	800c38e <_strtod_l+0x12e>
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0a4      	beq.n	800c2e8 <_strtod_l+0x88>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	f04f 0a00 	mov.w	sl, #0
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3a8:	930a      	str	r3, [sp, #40]	; 0x28
 800c3aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c3ae:	f8cd a018 	str.w	sl, [sp, #24]
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c3b6:	7807      	ldrb	r7, [r0, #0]
 800c3b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c3bc:	b2d9      	uxtb	r1, r3
 800c3be:	2909      	cmp	r1, #9
 800c3c0:	d92a      	bls.n	800c418 <_strtod_l+0x1b8>
 800c3c2:	9907      	ldr	r1, [sp, #28]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	f003 fbb7 	bl	800fb38 <strncmp>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d033      	beq.n	800c436 <_strtod_l+0x1d6>
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	9b06      	ldr	r3, [sp, #24]
 800c3d2:	463a      	mov	r2, r7
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	2a65      	cmp	r2, #101	; 0x65
 800c3da:	d001      	beq.n	800c3e0 <_strtod_l+0x180>
 800c3dc:	2a45      	cmp	r2, #69	; 0x45
 800c3de:	d117      	bne.n	800c410 <_strtod_l+0x1b0>
 800c3e0:	b91b      	cbnz	r3, 800c3ea <_strtod_l+0x18a>
 800c3e2:	9b04      	ldr	r3, [sp, #16]
 800c3e4:	4303      	orrs	r3, r0
 800c3e6:	d09c      	beq.n	800c322 <_strtod_l+0xc2>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800c3ee:	f10b 0201 	add.w	r2, fp, #1
 800c3f2:	9211      	str	r2, [sp, #68]	; 0x44
 800c3f4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800c3f8:	2a2b      	cmp	r2, #43	; 0x2b
 800c3fa:	d071      	beq.n	800c4e0 <_strtod_l+0x280>
 800c3fc:	2a2d      	cmp	r2, #45	; 0x2d
 800c3fe:	d077      	beq.n	800c4f0 <_strtod_l+0x290>
 800c400:	f04f 0e00 	mov.w	lr, #0
 800c404:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c408:	2d09      	cmp	r5, #9
 800c40a:	d97f      	bls.n	800c50c <_strtod_l+0x2ac>
 800c40c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c410:	2500      	movs	r5, #0
 800c412:	e09b      	b.n	800c54c <_strtod_l+0x2ec>
 800c414:	2300      	movs	r3, #0
 800c416:	e7c3      	b.n	800c3a0 <_strtod_l+0x140>
 800c418:	9906      	ldr	r1, [sp, #24]
 800c41a:	2908      	cmp	r1, #8
 800c41c:	bfdd      	ittte	le
 800c41e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c420:	fb02 3301 	mlale	r3, r2, r1, r3
 800c424:	9309      	strle	r3, [sp, #36]	; 0x24
 800c426:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	3001      	adds	r0, #1
 800c42e:	3301      	adds	r3, #1
 800c430:	9306      	str	r3, [sp, #24]
 800c432:	9011      	str	r0, [sp, #68]	; 0x44
 800c434:	e7be      	b.n	800c3b4 <_strtod_l+0x154>
 800c436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c438:	195a      	adds	r2, r3, r5
 800c43a:	9211      	str	r2, [sp, #68]	; 0x44
 800c43c:	5d5a      	ldrb	r2, [r3, r5]
 800c43e:	9b06      	ldr	r3, [sp, #24]
 800c440:	b3a3      	cbz	r3, 800c4ac <_strtod_l+0x24c>
 800c442:	4607      	mov	r7, r0
 800c444:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c448:	2909      	cmp	r1, #9
 800c44a:	d912      	bls.n	800c472 <_strtod_l+0x212>
 800c44c:	2101      	movs	r1, #1
 800c44e:	e7c3      	b.n	800c3d8 <_strtod_l+0x178>
 800c450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	9211      	str	r2, [sp, #68]	; 0x44
 800c456:	785a      	ldrb	r2, [r3, #1]
 800c458:	3001      	adds	r0, #1
 800c45a:	2a30      	cmp	r2, #48	; 0x30
 800c45c:	d0f8      	beq.n	800c450 <_strtod_l+0x1f0>
 800c45e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c462:	2b08      	cmp	r3, #8
 800c464:	f200 8497 	bhi.w	800cd96 <_strtod_l+0xb36>
 800c468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c46a:	930a      	str	r3, [sp, #40]	; 0x28
 800c46c:	4607      	mov	r7, r0
 800c46e:	2000      	movs	r0, #0
 800c470:	4603      	mov	r3, r0
 800c472:	3a30      	subs	r2, #48	; 0x30
 800c474:	f100 0101 	add.w	r1, r0, #1
 800c478:	d012      	beq.n	800c4a0 <_strtod_l+0x240>
 800c47a:	440f      	add	r7, r1
 800c47c:	eb00 0c03 	add.w	ip, r0, r3
 800c480:	4619      	mov	r1, r3
 800c482:	250a      	movs	r5, #10
 800c484:	4561      	cmp	r1, ip
 800c486:	d113      	bne.n	800c4b0 <_strtod_l+0x250>
 800c488:	1819      	adds	r1, r3, r0
 800c48a:	2908      	cmp	r1, #8
 800c48c:	f103 0301 	add.w	r3, r3, #1
 800c490:	4403      	add	r3, r0
 800c492:	dc1c      	bgt.n	800c4ce <_strtod_l+0x26e>
 800c494:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c496:	210a      	movs	r1, #10
 800c498:	fb01 2200 	mla	r2, r1, r0, r2
 800c49c:	9209      	str	r2, [sp, #36]	; 0x24
 800c49e:	2100      	movs	r1, #0
 800c4a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4a2:	1c50      	adds	r0, r2, #1
 800c4a4:	9011      	str	r0, [sp, #68]	; 0x44
 800c4a6:	7852      	ldrb	r2, [r2, #1]
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	e7cb      	b.n	800c444 <_strtod_l+0x1e4>
 800c4ac:	9806      	ldr	r0, [sp, #24]
 800c4ae:	e7d4      	b.n	800c45a <_strtod_l+0x1fa>
 800c4b0:	2908      	cmp	r1, #8
 800c4b2:	dc04      	bgt.n	800c4be <_strtod_l+0x25e>
 800c4b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c4b6:	436e      	muls	r6, r5
 800c4b8:	9609      	str	r6, [sp, #36]	; 0x24
 800c4ba:	3101      	adds	r1, #1
 800c4bc:	e7e2      	b.n	800c484 <_strtod_l+0x224>
 800c4be:	f101 0e01 	add.w	lr, r1, #1
 800c4c2:	f1be 0f10 	cmp.w	lr, #16
 800c4c6:	bfd8      	it	le
 800c4c8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800c4cc:	e7f5      	b.n	800c4ba <_strtod_l+0x25a>
 800c4ce:	2b10      	cmp	r3, #16
 800c4d0:	bfdc      	itt	le
 800c4d2:	210a      	movle	r1, #10
 800c4d4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800c4d8:	e7e1      	b.n	800c49e <_strtod_l+0x23e>
 800c4da:	2700      	movs	r7, #0
 800c4dc:	2101      	movs	r1, #1
 800c4de:	e780      	b.n	800c3e2 <_strtod_l+0x182>
 800c4e0:	f04f 0e00 	mov.w	lr, #0
 800c4e4:	f10b 0202 	add.w	r2, fp, #2
 800c4e8:	9211      	str	r2, [sp, #68]	; 0x44
 800c4ea:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800c4ee:	e789      	b.n	800c404 <_strtod_l+0x1a4>
 800c4f0:	f04f 0e01 	mov.w	lr, #1
 800c4f4:	e7f6      	b.n	800c4e4 <_strtod_l+0x284>
 800c4f6:	bf00      	nop
 800c4f8:	080116e8 	.word	0x080116e8
 800c4fc:	080115b4 	.word	0x080115b4
 800c500:	7ff00000 	.word	0x7ff00000
 800c504:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c506:	1c55      	adds	r5, r2, #1
 800c508:	9511      	str	r5, [sp, #68]	; 0x44
 800c50a:	7852      	ldrb	r2, [r2, #1]
 800c50c:	2a30      	cmp	r2, #48	; 0x30
 800c50e:	d0f9      	beq.n	800c504 <_strtod_l+0x2a4>
 800c510:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c514:	2d08      	cmp	r5, #8
 800c516:	f63f af7b 	bhi.w	800c410 <_strtod_l+0x1b0>
 800c51a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c51e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c520:	9207      	str	r2, [sp, #28]
 800c522:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c524:	1c55      	adds	r5, r2, #1
 800c526:	9511      	str	r5, [sp, #68]	; 0x44
 800c528:	7852      	ldrb	r2, [r2, #1]
 800c52a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c52e:	2e09      	cmp	r6, #9
 800c530:	d937      	bls.n	800c5a2 <_strtod_l+0x342>
 800c532:	9e07      	ldr	r6, [sp, #28]
 800c534:	1bad      	subs	r5, r5, r6
 800c536:	2d08      	cmp	r5, #8
 800c538:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c53c:	dc02      	bgt.n	800c544 <_strtod_l+0x2e4>
 800c53e:	4565      	cmp	r5, ip
 800c540:	bfa8      	it	ge
 800c542:	4665      	movge	r5, ip
 800c544:	f1be 0f00 	cmp.w	lr, #0
 800c548:	d000      	beq.n	800c54c <_strtod_l+0x2ec>
 800c54a:	426d      	negs	r5, r5
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d14d      	bne.n	800c5ec <_strtod_l+0x38c>
 800c550:	9b04      	ldr	r3, [sp, #16]
 800c552:	4303      	orrs	r3, r0
 800c554:	f47f aec8 	bne.w	800c2e8 <_strtod_l+0x88>
 800c558:	2900      	cmp	r1, #0
 800c55a:	f47f aee2 	bne.w	800c322 <_strtod_l+0xc2>
 800c55e:	2a69      	cmp	r2, #105	; 0x69
 800c560:	d027      	beq.n	800c5b2 <_strtod_l+0x352>
 800c562:	dc24      	bgt.n	800c5ae <_strtod_l+0x34e>
 800c564:	2a49      	cmp	r2, #73	; 0x49
 800c566:	d024      	beq.n	800c5b2 <_strtod_l+0x352>
 800c568:	2a4e      	cmp	r2, #78	; 0x4e
 800c56a:	f47f aeda 	bne.w	800c322 <_strtod_l+0xc2>
 800c56e:	4996      	ldr	r1, [pc, #600]	; (800c7c8 <_strtod_l+0x568>)
 800c570:	a811      	add	r0, sp, #68	; 0x44
 800c572:	f003 f9f3 	bl	800f95c <__match>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f aed3 	beq.w	800c322 <_strtod_l+0xc2>
 800c57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b28      	cmp	r3, #40	; 0x28
 800c582:	d12d      	bne.n	800c5e0 <_strtod_l+0x380>
 800c584:	4991      	ldr	r1, [pc, #580]	; (800c7cc <_strtod_l+0x56c>)
 800c586:	aa14      	add	r2, sp, #80	; 0x50
 800c588:	a811      	add	r0, sp, #68	; 0x44
 800c58a:	f003 f9fb 	bl	800f984 <__hexnan>
 800c58e:	2805      	cmp	r0, #5
 800c590:	d126      	bne.n	800c5e0 <_strtod_l+0x380>
 800c592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c594:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c598:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c59c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c5a0:	e6a2      	b.n	800c2e8 <_strtod_l+0x88>
 800c5a2:	250a      	movs	r5, #10
 800c5a4:	fb05 250c 	mla	r5, r5, ip, r2
 800c5a8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c5ac:	e7b9      	b.n	800c522 <_strtod_l+0x2c2>
 800c5ae:	2a6e      	cmp	r2, #110	; 0x6e
 800c5b0:	e7db      	b.n	800c56a <_strtod_l+0x30a>
 800c5b2:	4987      	ldr	r1, [pc, #540]	; (800c7d0 <_strtod_l+0x570>)
 800c5b4:	a811      	add	r0, sp, #68	; 0x44
 800c5b6:	f003 f9d1 	bl	800f95c <__match>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f43f aeb1 	beq.w	800c322 <_strtod_l+0xc2>
 800c5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5c2:	4984      	ldr	r1, [pc, #528]	; (800c7d4 <_strtod_l+0x574>)
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	a811      	add	r0, sp, #68	; 0x44
 800c5c8:	9311      	str	r3, [sp, #68]	; 0x44
 800c5ca:	f003 f9c7 	bl	800f95c <__match>
 800c5ce:	b910      	cbnz	r0, 800c5d6 <_strtod_l+0x376>
 800c5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	9311      	str	r3, [sp, #68]	; 0x44
 800c5d6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800c7e8 <_strtod_l+0x588>
 800c5da:	f04f 0800 	mov.w	r8, #0
 800c5de:	e683      	b.n	800c2e8 <_strtod_l+0x88>
 800c5e0:	487d      	ldr	r0, [pc, #500]	; (800c7d8 <_strtod_l+0x578>)
 800c5e2:	f003 faa1 	bl	800fb28 <nan>
 800c5e6:	ec59 8b10 	vmov	r8, r9, d0
 800c5ea:	e67d      	b.n	800c2e8 <_strtod_l+0x88>
 800c5ec:	1bea      	subs	r2, r5, r7
 800c5ee:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c5f2:	9207      	str	r2, [sp, #28]
 800c5f4:	9a06      	ldr	r2, [sp, #24]
 800c5f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	bf08      	it	eq
 800c5fe:	461a      	moveq	r2, r3
 800c600:	2b10      	cmp	r3, #16
 800c602:	9206      	str	r2, [sp, #24]
 800c604:	461a      	mov	r2, r3
 800c606:	bfa8      	it	ge
 800c608:	2210      	movge	r2, #16
 800c60a:	2b09      	cmp	r3, #9
 800c60c:	ec59 8b17 	vmov	r8, r9, d7
 800c610:	dd0c      	ble.n	800c62c <_strtod_l+0x3cc>
 800c612:	4972      	ldr	r1, [pc, #456]	; (800c7dc <_strtod_l+0x57c>)
 800c614:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c618:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c61c:	ee06 aa90 	vmov	s13, sl
 800c620:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c624:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c628:	ec59 8b16 	vmov	r8, r9, d6
 800c62c:	2b0f      	cmp	r3, #15
 800c62e:	dc36      	bgt.n	800c69e <_strtod_l+0x43e>
 800c630:	9907      	ldr	r1, [sp, #28]
 800c632:	2900      	cmp	r1, #0
 800c634:	f43f ae58 	beq.w	800c2e8 <_strtod_l+0x88>
 800c638:	dd23      	ble.n	800c682 <_strtod_l+0x422>
 800c63a:	2916      	cmp	r1, #22
 800c63c:	dc0b      	bgt.n	800c656 <_strtod_l+0x3f6>
 800c63e:	4b67      	ldr	r3, [pc, #412]	; (800c7dc <_strtod_l+0x57c>)
 800c640:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c644:	ed93 7b00 	vldr	d7, [r3]
 800c648:	ec49 8b16 	vmov	d6, r8, r9
 800c64c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c650:	ec59 8b17 	vmov	r8, r9, d7
 800c654:	e648      	b.n	800c2e8 <_strtod_l+0x88>
 800c656:	9807      	ldr	r0, [sp, #28]
 800c658:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c65c:	4281      	cmp	r1, r0
 800c65e:	db1e      	blt.n	800c69e <_strtod_l+0x43e>
 800c660:	4a5e      	ldr	r2, [pc, #376]	; (800c7dc <_strtod_l+0x57c>)
 800c662:	f1c3 030f 	rsb	r3, r3, #15
 800c666:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c66a:	ed91 7b00 	vldr	d7, [r1]
 800c66e:	ec49 8b16 	vmov	d6, r8, r9
 800c672:	1ac3      	subs	r3, r0, r3
 800c674:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c67c:	ed92 6b00 	vldr	d6, [r2]
 800c680:	e7e4      	b.n	800c64c <_strtod_l+0x3ec>
 800c682:	9907      	ldr	r1, [sp, #28]
 800c684:	3116      	adds	r1, #22
 800c686:	db0a      	blt.n	800c69e <_strtod_l+0x43e>
 800c688:	4b54      	ldr	r3, [pc, #336]	; (800c7dc <_strtod_l+0x57c>)
 800c68a:	1b7d      	subs	r5, r7, r5
 800c68c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c690:	ed95 7b00 	vldr	d7, [r5]
 800c694:	ec49 8b16 	vmov	d6, r8, r9
 800c698:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c69c:	e7d8      	b.n	800c650 <_strtod_l+0x3f0>
 800c69e:	9907      	ldr	r1, [sp, #28]
 800c6a0:	1a9a      	subs	r2, r3, r2
 800c6a2:	440a      	add	r2, r1
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	dd6f      	ble.n	800c788 <_strtod_l+0x528>
 800c6a8:	f012 000f 	ands.w	r0, r2, #15
 800c6ac:	d00a      	beq.n	800c6c4 <_strtod_l+0x464>
 800c6ae:	494b      	ldr	r1, [pc, #300]	; (800c7dc <_strtod_l+0x57c>)
 800c6b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c6b4:	ed91 7b00 	vldr	d7, [r1]
 800c6b8:	ec49 8b16 	vmov	d6, r8, r9
 800c6bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6c0:	ec59 8b17 	vmov	r8, r9, d7
 800c6c4:	f032 020f 	bics.w	r2, r2, #15
 800c6c8:	d04f      	beq.n	800c76a <_strtod_l+0x50a>
 800c6ca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c6ce:	dd22      	ble.n	800c716 <_strtod_l+0x4b6>
 800c6d0:	2500      	movs	r5, #0
 800c6d2:	462e      	mov	r6, r5
 800c6d4:	9506      	str	r5, [sp, #24]
 800c6d6:	462f      	mov	r7, r5
 800c6d8:	2322      	movs	r3, #34	; 0x22
 800c6da:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800c7e8 <_strtod_l+0x588>
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	f04f 0800 	mov.w	r8, #0
 800c6e4:	9b06      	ldr	r3, [sp, #24]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f43f adfe 	beq.w	800c2e8 <_strtod_l+0x88>
 800c6ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7fe fe1b 	bl	800b32a <_Bfree>
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7fe fe17 	bl	800b32a <_Bfree>
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4620      	mov	r0, r4
 800c700:	f7fe fe13 	bl	800b32a <_Bfree>
 800c704:	9906      	ldr	r1, [sp, #24]
 800c706:	4620      	mov	r0, r4
 800c708:	f7fe fe0f 	bl	800b32a <_Bfree>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4620      	mov	r0, r4
 800c710:	f7fe fe0b 	bl	800b32a <_Bfree>
 800c714:	e5e8      	b.n	800c2e8 <_strtod_l+0x88>
 800c716:	2000      	movs	r0, #0
 800c718:	ec49 8b17 	vmov	d7, r8, r9
 800c71c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800c7e0 <_strtod_l+0x580>
 800c720:	1112      	asrs	r2, r2, #4
 800c722:	4601      	mov	r1, r0
 800c724:	2a01      	cmp	r2, #1
 800c726:	dc23      	bgt.n	800c770 <_strtod_l+0x510>
 800c728:	b108      	cbz	r0, 800c72e <_strtod_l+0x4ce>
 800c72a:	ec59 8b17 	vmov	r8, r9, d7
 800c72e:	4a2c      	ldr	r2, [pc, #176]	; (800c7e0 <_strtod_l+0x580>)
 800c730:	482c      	ldr	r0, [pc, #176]	; (800c7e4 <_strtod_l+0x584>)
 800c732:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c736:	ed92 7b00 	vldr	d7, [r2]
 800c73a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c73e:	ec49 8b16 	vmov	d6, r8, r9
 800c742:	4a29      	ldr	r2, [pc, #164]	; (800c7e8 <_strtod_l+0x588>)
 800c744:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c748:	ee17 1a90 	vmov	r1, s15
 800c74c:	400a      	ands	r2, r1
 800c74e:	4282      	cmp	r2, r0
 800c750:	ec59 8b17 	vmov	r8, r9, d7
 800c754:	d8bc      	bhi.n	800c6d0 <_strtod_l+0x470>
 800c756:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c75a:	4282      	cmp	r2, r0
 800c75c:	bf86      	itte	hi
 800c75e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c7ec <_strtod_l+0x58c>
 800c762:	f04f 38ff 	movhi.w	r8, #4294967295
 800c766:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c76a:	2200      	movs	r2, #0
 800c76c:	9204      	str	r2, [sp, #16]
 800c76e:	e078      	b.n	800c862 <_strtod_l+0x602>
 800c770:	07d6      	lsls	r6, r2, #31
 800c772:	d504      	bpl.n	800c77e <_strtod_l+0x51e>
 800c774:	ed9c 6b00 	vldr	d6, [ip]
 800c778:	2001      	movs	r0, #1
 800c77a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c77e:	3101      	adds	r1, #1
 800c780:	1052      	asrs	r2, r2, #1
 800c782:	f10c 0c08 	add.w	ip, ip, #8
 800c786:	e7cd      	b.n	800c724 <_strtod_l+0x4c4>
 800c788:	d0ef      	beq.n	800c76a <_strtod_l+0x50a>
 800c78a:	4252      	negs	r2, r2
 800c78c:	f012 000f 	ands.w	r0, r2, #15
 800c790:	d00a      	beq.n	800c7a8 <_strtod_l+0x548>
 800c792:	4912      	ldr	r1, [pc, #72]	; (800c7dc <_strtod_l+0x57c>)
 800c794:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c798:	ed91 7b00 	vldr	d7, [r1]
 800c79c:	ec49 8b16 	vmov	d6, r8, r9
 800c7a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c7a4:	ec59 8b17 	vmov	r8, r9, d7
 800c7a8:	1112      	asrs	r2, r2, #4
 800c7aa:	d0de      	beq.n	800c76a <_strtod_l+0x50a>
 800c7ac:	2a1f      	cmp	r2, #31
 800c7ae:	dd1f      	ble.n	800c7f0 <_strtod_l+0x590>
 800c7b0:	2500      	movs	r5, #0
 800c7b2:	462e      	mov	r6, r5
 800c7b4:	9506      	str	r5, [sp, #24]
 800c7b6:	462f      	mov	r7, r5
 800c7b8:	2322      	movs	r3, #34	; 0x22
 800c7ba:	f04f 0800 	mov.w	r8, #0
 800c7be:	f04f 0900 	mov.w	r9, #0
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	e78e      	b.n	800c6e4 <_strtod_l+0x484>
 800c7c6:	bf00      	nop
 800c7c8:	08011266 	.word	0x08011266
 800c7cc:	080115c8 	.word	0x080115c8
 800c7d0:	0801125e 	.word	0x0801125e
 800c7d4:	080113dc 	.word	0x080113dc
 800c7d8:	08011683 	.word	0x08011683
 800c7dc:	080114e0 	.word	0x080114e0
 800c7e0:	080114b8 	.word	0x080114b8
 800c7e4:	7ca00000 	.word	0x7ca00000
 800c7e8:	7ff00000 	.word	0x7ff00000
 800c7ec:	7fefffff 	.word	0x7fefffff
 800c7f0:	f012 0110 	ands.w	r1, r2, #16
 800c7f4:	bf18      	it	ne
 800c7f6:	216a      	movne	r1, #106	; 0x6a
 800c7f8:	9104      	str	r1, [sp, #16]
 800c7fa:	ec49 8b17 	vmov	d7, r8, r9
 800c7fe:	49be      	ldr	r1, [pc, #760]	; (800caf8 <_strtod_l+0x898>)
 800c800:	2000      	movs	r0, #0
 800c802:	07d6      	lsls	r6, r2, #31
 800c804:	d504      	bpl.n	800c810 <_strtod_l+0x5b0>
 800c806:	ed91 6b00 	vldr	d6, [r1]
 800c80a:	2001      	movs	r0, #1
 800c80c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c810:	1052      	asrs	r2, r2, #1
 800c812:	f101 0108 	add.w	r1, r1, #8
 800c816:	d1f4      	bne.n	800c802 <_strtod_l+0x5a2>
 800c818:	b108      	cbz	r0, 800c81e <_strtod_l+0x5be>
 800c81a:	ec59 8b17 	vmov	r8, r9, d7
 800c81e:	9a04      	ldr	r2, [sp, #16]
 800c820:	b1c2      	cbz	r2, 800c854 <_strtod_l+0x5f4>
 800c822:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c826:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c82a:	2a00      	cmp	r2, #0
 800c82c:	4648      	mov	r0, r9
 800c82e:	dd11      	ble.n	800c854 <_strtod_l+0x5f4>
 800c830:	2a1f      	cmp	r2, #31
 800c832:	f340 812e 	ble.w	800ca92 <_strtod_l+0x832>
 800c836:	2a34      	cmp	r2, #52	; 0x34
 800c838:	bfde      	ittt	le
 800c83a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c83e:	f04f 32ff 	movle.w	r2, #4294967295
 800c842:	fa02 f101 	lslle.w	r1, r2, r1
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	bfcc      	ite	gt
 800c84c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c850:	ea01 0900 	andle.w	r9, r1, r0
 800c854:	ec49 8b17 	vmov	d7, r8, r9
 800c858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	d0a6      	beq.n	800c7b0 <_strtod_l+0x550>
 800c862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c864:	9200      	str	r2, [sp, #0]
 800c866:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c868:	9a06      	ldr	r2, [sp, #24]
 800c86a:	4620      	mov	r0, r4
 800c86c:	f7fe fdac 	bl	800b3c8 <__s2b>
 800c870:	9006      	str	r0, [sp, #24]
 800c872:	2800      	cmp	r0, #0
 800c874:	f43f af2c 	beq.w	800c6d0 <_strtod_l+0x470>
 800c878:	9b07      	ldr	r3, [sp, #28]
 800c87a:	1b7d      	subs	r5, r7, r5
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	bfb4      	ite	lt
 800c880:	462b      	movlt	r3, r5
 800c882:	2300      	movge	r3, #0
 800c884:	9309      	str	r3, [sp, #36]	; 0x24
 800c886:	9b07      	ldr	r3, [sp, #28]
 800c888:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800cad8 <_strtod_l+0x878>
 800c88c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800cae0 <_strtod_l+0x880>
 800c890:	ed9f bb95 	vldr	d11, [pc, #596]	; 800cae8 <_strtod_l+0x888>
 800c894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c898:	2500      	movs	r5, #0
 800c89a:	930c      	str	r3, [sp, #48]	; 0x30
 800c89c:	462e      	mov	r6, r5
 800c89e:	9b06      	ldr	r3, [sp, #24]
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	6859      	ldr	r1, [r3, #4]
 800c8a4:	f7fe fd1c 	bl	800b2e0 <_Balloc>
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	f43f af14 	beq.w	800c6d8 <_strtod_l+0x478>
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	3202      	adds	r2, #2
 800c8b6:	f103 010c 	add.w	r1, r3, #12
 800c8ba:	0092      	lsls	r2, r2, #2
 800c8bc:	300c      	adds	r0, #12
 800c8be:	f7fe fcdb 	bl	800b278 <memcpy>
 800c8c2:	ec49 8b10 	vmov	d0, r8, r9
 800c8c6:	aa14      	add	r2, sp, #80	; 0x50
 800c8c8:	a913      	add	r1, sp, #76	; 0x4c
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7ff f8a8 	bl	800ba20 <__d2b>
 800c8d0:	ec49 8b18 	vmov	d8, r8, r9
 800c8d4:	9012      	str	r0, [sp, #72]	; 0x48
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f43f aefe 	beq.w	800c6d8 <_strtod_l+0x478>
 800c8dc:	2101      	movs	r1, #1
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f7fe fe0c 	bl	800b4fc <__i2b>
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f43f aef6 	beq.w	800c6d8 <_strtod_l+0x478>
 800c8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bfab      	itete	ge
 800c8f4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c8f6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c8f8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c8fc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c900:	bfac      	ite	ge
 800c902:	eb03 0b02 	addge.w	fp, r3, r2
 800c906:	eba2 0a03 	sublt.w	sl, r2, r3
 800c90a:	9a04      	ldr	r2, [sp, #16]
 800c90c:	1a9b      	subs	r3, r3, r2
 800c90e:	440b      	add	r3, r1
 800c910:	4a7a      	ldr	r2, [pc, #488]	; (800cafc <_strtod_l+0x89c>)
 800c912:	3b01      	subs	r3, #1
 800c914:	4293      	cmp	r3, r2
 800c916:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c91a:	f280 80cd 	bge.w	800cab8 <_strtod_l+0x858>
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	2a1f      	cmp	r2, #31
 800c922:	eba1 0102 	sub.w	r1, r1, r2
 800c926:	f04f 0001 	mov.w	r0, #1
 800c92a:	f300 80b9 	bgt.w	800caa0 <_strtod_l+0x840>
 800c92e:	fa00 f302 	lsl.w	r3, r0, r2
 800c932:	930b      	str	r3, [sp, #44]	; 0x2c
 800c934:	2300      	movs	r3, #0
 800c936:	930a      	str	r3, [sp, #40]	; 0x28
 800c938:	eb0b 0301 	add.w	r3, fp, r1
 800c93c:	9a04      	ldr	r2, [sp, #16]
 800c93e:	459b      	cmp	fp, r3
 800c940:	448a      	add	sl, r1
 800c942:	4492      	add	sl, r2
 800c944:	465a      	mov	r2, fp
 800c946:	bfa8      	it	ge
 800c948:	461a      	movge	r2, r3
 800c94a:	4552      	cmp	r2, sl
 800c94c:	bfa8      	it	ge
 800c94e:	4652      	movge	r2, sl
 800c950:	2a00      	cmp	r2, #0
 800c952:	bfc2      	ittt	gt
 800c954:	1a9b      	subgt	r3, r3, r2
 800c956:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c95a:	ebab 0b02 	subgt.w	fp, fp, r2
 800c95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c960:	2a00      	cmp	r2, #0
 800c962:	dd18      	ble.n	800c996 <_strtod_l+0x736>
 800c964:	4631      	mov	r1, r6
 800c966:	4620      	mov	r0, r4
 800c968:	930f      	str	r3, [sp, #60]	; 0x3c
 800c96a:	f7fe fe87 	bl	800b67c <__pow5mult>
 800c96e:	4606      	mov	r6, r0
 800c970:	2800      	cmp	r0, #0
 800c972:	f43f aeb1 	beq.w	800c6d8 <_strtod_l+0x478>
 800c976:	4601      	mov	r1, r0
 800c978:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7fe fdd4 	bl	800b528 <__multiply>
 800c980:	900e      	str	r0, [sp, #56]	; 0x38
 800c982:	2800      	cmp	r0, #0
 800c984:	f43f aea8 	beq.w	800c6d8 <_strtod_l+0x478>
 800c988:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7fe fccd 	bl	800b32a <_Bfree>
 800c990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c994:	9212      	str	r2, [sp, #72]	; 0x48
 800c996:	2b00      	cmp	r3, #0
 800c998:	f300 8093 	bgt.w	800cac2 <_strtod_l+0x862>
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	dd08      	ble.n	800c9b4 <_strtod_l+0x754>
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7fe fe68 	bl	800b67c <__pow5mult>
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f ae92 	beq.w	800c6d8 <_strtod_l+0x478>
 800c9b4:	f1ba 0f00 	cmp.w	sl, #0
 800c9b8:	dd08      	ble.n	800c9cc <_strtod_l+0x76c>
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	4652      	mov	r2, sl
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f7fe fe9c 	bl	800b6fc <__lshift>
 800c9c4:	4607      	mov	r7, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f43f ae86 	beq.w	800c6d8 <_strtod_l+0x478>
 800c9cc:	f1bb 0f00 	cmp.w	fp, #0
 800c9d0:	dd08      	ble.n	800c9e4 <_strtod_l+0x784>
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	465a      	mov	r2, fp
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7fe fe90 	bl	800b6fc <__lshift>
 800c9dc:	4606      	mov	r6, r0
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f43f ae7a 	beq.w	800c6d8 <_strtod_l+0x478>
 800c9e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c9e6:	463a      	mov	r2, r7
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7fe ff13 	bl	800b814 <__mdiff>
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	f43f ae71 	beq.w	800c6d8 <_strtod_l+0x478>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c9fc:	60c3      	str	r3, [r0, #12]
 800c9fe:	4631      	mov	r1, r6
 800ca00:	f7fe feec 	bl	800b7dc <__mcmp>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	da7d      	bge.n	800cb04 <_strtod_l+0x8a4>
 800ca08:	ea5a 0308 	orrs.w	r3, sl, r8
 800ca0c:	f040 80a3 	bne.w	800cb56 <_strtod_l+0x8f6>
 800ca10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f040 809e 	bne.w	800cb56 <_strtod_l+0x8f6>
 800ca1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca1e:	0d1b      	lsrs	r3, r3, #20
 800ca20:	051b      	lsls	r3, r3, #20
 800ca22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca26:	f240 8096 	bls.w	800cb56 <_strtod_l+0x8f6>
 800ca2a:	696b      	ldr	r3, [r5, #20]
 800ca2c:	b91b      	cbnz	r3, 800ca36 <_strtod_l+0x7d6>
 800ca2e:	692b      	ldr	r3, [r5, #16]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	f340 8090 	ble.w	800cb56 <_strtod_l+0x8f6>
 800ca36:	4629      	mov	r1, r5
 800ca38:	2201      	movs	r2, #1
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7fe fe5e 	bl	800b6fc <__lshift>
 800ca40:	4631      	mov	r1, r6
 800ca42:	4605      	mov	r5, r0
 800ca44:	f7fe feca 	bl	800b7dc <__mcmp>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	f340 8084 	ble.w	800cb56 <_strtod_l+0x8f6>
 800ca4e:	9904      	ldr	r1, [sp, #16]
 800ca50:	4a2b      	ldr	r2, [pc, #172]	; (800cb00 <_strtod_l+0x8a0>)
 800ca52:	464b      	mov	r3, r9
 800ca54:	2900      	cmp	r1, #0
 800ca56:	f000 809d 	beq.w	800cb94 <_strtod_l+0x934>
 800ca5a:	ea02 0109 	and.w	r1, r2, r9
 800ca5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca62:	f300 8097 	bgt.w	800cb94 <_strtod_l+0x934>
 800ca66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca6a:	f77f aea5 	ble.w	800c7b8 <_strtod_l+0x558>
 800ca6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800caf0 <_strtod_l+0x890>
 800ca72:	ec49 8b16 	vmov	d6, r8, r9
 800ca76:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ca7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ca7e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ca82:	4313      	orrs	r3, r2
 800ca84:	bf08      	it	eq
 800ca86:	2322      	moveq	r3, #34	; 0x22
 800ca88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ca8c:	bf08      	it	eq
 800ca8e:	6023      	streq	r3, [r4, #0]
 800ca90:	e62c      	b.n	800c6ec <_strtod_l+0x48c>
 800ca92:	f04f 31ff 	mov.w	r1, #4294967295
 800ca96:	fa01 f202 	lsl.w	r2, r1, r2
 800ca9a:	ea02 0808 	and.w	r8, r2, r8
 800ca9e:	e6d9      	b.n	800c854 <_strtod_l+0x5f4>
 800caa0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800caa4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800caa8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800caac:	33e2      	adds	r3, #226	; 0xe2
 800caae:	fa00 f303 	lsl.w	r3, r0, r3
 800cab2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800cab6:	e73f      	b.n	800c938 <_strtod_l+0x6d8>
 800cab8:	2200      	movs	r2, #0
 800caba:	2301      	movs	r3, #1
 800cabc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cac0:	e73a      	b.n	800c938 <_strtod_l+0x6d8>
 800cac2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cac4:	461a      	mov	r2, r3
 800cac6:	4620      	mov	r0, r4
 800cac8:	f7fe fe18 	bl	800b6fc <__lshift>
 800cacc:	9012      	str	r0, [sp, #72]	; 0x48
 800cace:	2800      	cmp	r0, #0
 800cad0:	f47f af64 	bne.w	800c99c <_strtod_l+0x73c>
 800cad4:	e600      	b.n	800c6d8 <_strtod_l+0x478>
 800cad6:	bf00      	nop
 800cad8:	94a03595 	.word	0x94a03595
 800cadc:	3fcfffff 	.word	0x3fcfffff
 800cae0:	94a03595 	.word	0x94a03595
 800cae4:	3fdfffff 	.word	0x3fdfffff
 800cae8:	35afe535 	.word	0x35afe535
 800caec:	3fe00000 	.word	0x3fe00000
 800caf0:	00000000 	.word	0x00000000
 800caf4:	39500000 	.word	0x39500000
 800caf8:	080115e0 	.word	0x080115e0
 800cafc:	fffffc02 	.word	0xfffffc02
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	46cb      	mov	fp, r9
 800cb06:	d15f      	bne.n	800cbc8 <_strtod_l+0x968>
 800cb08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb0c:	f1ba 0f00 	cmp.w	sl, #0
 800cb10:	d02a      	beq.n	800cb68 <_strtod_l+0x908>
 800cb12:	4aa7      	ldr	r2, [pc, #668]	; (800cdb0 <_strtod_l+0xb50>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d12b      	bne.n	800cb70 <_strtod_l+0x910>
 800cb18:	9b04      	ldr	r3, [sp, #16]
 800cb1a:	4642      	mov	r2, r8
 800cb1c:	b1fb      	cbz	r3, 800cb5e <_strtod_l+0x8fe>
 800cb1e:	4ba5      	ldr	r3, [pc, #660]	; (800cdb4 <_strtod_l+0xb54>)
 800cb20:	ea09 0303 	and.w	r3, r9, r3
 800cb24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb28:	f04f 31ff 	mov.w	r1, #4294967295
 800cb2c:	d81a      	bhi.n	800cb64 <_strtod_l+0x904>
 800cb2e:	0d1b      	lsrs	r3, r3, #20
 800cb30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb34:	fa01 f303 	lsl.w	r3, r1, r3
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d119      	bne.n	800cb70 <_strtod_l+0x910>
 800cb3c:	4b9e      	ldr	r3, [pc, #632]	; (800cdb8 <_strtod_l+0xb58>)
 800cb3e:	459b      	cmp	fp, r3
 800cb40:	d102      	bne.n	800cb48 <_strtod_l+0x8e8>
 800cb42:	3201      	adds	r2, #1
 800cb44:	f43f adc8 	beq.w	800c6d8 <_strtod_l+0x478>
 800cb48:	4b9a      	ldr	r3, [pc, #616]	; (800cdb4 <_strtod_l+0xb54>)
 800cb4a:	ea0b 0303 	and.w	r3, fp, r3
 800cb4e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cb52:	f04f 0800 	mov.w	r8, #0
 800cb56:	9b04      	ldr	r3, [sp, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d188      	bne.n	800ca6e <_strtod_l+0x80e>
 800cb5c:	e5c6      	b.n	800c6ec <_strtod_l+0x48c>
 800cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb62:	e7e9      	b.n	800cb38 <_strtod_l+0x8d8>
 800cb64:	460b      	mov	r3, r1
 800cb66:	e7e7      	b.n	800cb38 <_strtod_l+0x8d8>
 800cb68:	ea53 0308 	orrs.w	r3, r3, r8
 800cb6c:	f43f af6f 	beq.w	800ca4e <_strtod_l+0x7ee>
 800cb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb72:	b1cb      	cbz	r3, 800cba8 <_strtod_l+0x948>
 800cb74:	ea13 0f0b 	tst.w	r3, fp
 800cb78:	d0ed      	beq.n	800cb56 <_strtod_l+0x8f6>
 800cb7a:	9a04      	ldr	r2, [sp, #16]
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	4649      	mov	r1, r9
 800cb80:	f1ba 0f00 	cmp.w	sl, #0
 800cb84:	d014      	beq.n	800cbb0 <_strtod_l+0x950>
 800cb86:	f7ff fb4f 	bl	800c228 <sulp>
 800cb8a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800cb8e:	ec59 8b17 	vmov	r8, r9, d7
 800cb92:	e7e0      	b.n	800cb56 <_strtod_l+0x8f6>
 800cb94:	4013      	ands	r3, r2
 800cb96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb9a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cb9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cba2:	f04f 38ff 	mov.w	r8, #4294967295
 800cba6:	e7d6      	b.n	800cb56 <_strtod_l+0x8f6>
 800cba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbaa:	ea13 0f08 	tst.w	r3, r8
 800cbae:	e7e3      	b.n	800cb78 <_strtod_l+0x918>
 800cbb0:	f7ff fb3a 	bl	800c228 <sulp>
 800cbb4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800cbb8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc0:	ec59 8b10 	vmov	r8, r9, d0
 800cbc4:	d1c7      	bne.n	800cb56 <_strtod_l+0x8f6>
 800cbc6:	e5f7      	b.n	800c7b8 <_strtod_l+0x558>
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7fe ff84 	bl	800bad8 <__ratio>
 800cbd0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cbd4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbdc:	d865      	bhi.n	800ccaa <_strtod_l+0xa4a>
 800cbde:	f1ba 0f00 	cmp.w	sl, #0
 800cbe2:	d042      	beq.n	800cc6a <_strtod_l+0xa0a>
 800cbe4:	4b75      	ldr	r3, [pc, #468]	; (800cdbc <_strtod_l+0xb5c>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800cbec:	4871      	ldr	r0, [pc, #452]	; (800cdb4 <_strtod_l+0xb54>)
 800cbee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800cdc8 <_strtod_l+0xb68>
 800cbf2:	ea0b 0100 	and.w	r1, fp, r0
 800cbf6:	4561      	cmp	r1, ip
 800cbf8:	f040 808e 	bne.w	800cd18 <_strtod_l+0xab8>
 800cbfc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cc00:	ec49 8b10 	vmov	d0, r8, r9
 800cc04:	ec43 2b1c 	vmov	d12, r2, r3
 800cc08:	910a      	str	r1, [sp, #40]	; 0x28
 800cc0a:	f7fe fe8d 	bl	800b928 <__ulp>
 800cc0e:	ec49 8b1e 	vmov	d14, r8, r9
 800cc12:	4868      	ldr	r0, [pc, #416]	; (800cdb4 <_strtod_l+0xb54>)
 800cc14:	eeac eb00 	vfma.f64	d14, d12, d0
 800cc18:	ee1e 3a90 	vmov	r3, s29
 800cc1c:	4a68      	ldr	r2, [pc, #416]	; (800cdc0 <_strtod_l+0xb60>)
 800cc1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc20:	4018      	ands	r0, r3
 800cc22:	4290      	cmp	r0, r2
 800cc24:	ec59 8b1e 	vmov	r8, r9, d14
 800cc28:	d94e      	bls.n	800ccc8 <_strtod_l+0xa68>
 800cc2a:	ee18 3a90 	vmov	r3, s17
 800cc2e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d104      	bne.n	800cc40 <_strtod_l+0x9e0>
 800cc36:	ee18 3a10 	vmov	r3, s16
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f43f ad4c 	beq.w	800c6d8 <_strtod_l+0x478>
 800cc40:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800cdb8 <_strtod_l+0xb58>
 800cc44:	f04f 38ff 	mov.w	r8, #4294967295
 800cc48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7fe fb6d 	bl	800b32a <_Bfree>
 800cc50:	4639      	mov	r1, r7
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7fe fb69 	bl	800b32a <_Bfree>
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f7fe fb65 	bl	800b32a <_Bfree>
 800cc60:	4629      	mov	r1, r5
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7fe fb61 	bl	800b32a <_Bfree>
 800cc68:	e619      	b.n	800c89e <_strtod_l+0x63e>
 800cc6a:	f1b8 0f00 	cmp.w	r8, #0
 800cc6e:	d112      	bne.n	800cc96 <_strtod_l+0xa36>
 800cc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc74:	b9b3      	cbnz	r3, 800cca4 <_strtod_l+0xa44>
 800cc76:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cc7a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cc86:	bf58      	it	pl
 800cc88:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800cc8c:	eeb1 7b4d 	vneg.f64	d7, d13
 800cc90:	ec53 2b17 	vmov	r2, r3, d7
 800cc94:	e7aa      	b.n	800cbec <_strtod_l+0x98c>
 800cc96:	f1b8 0f01 	cmp.w	r8, #1
 800cc9a:	d103      	bne.n	800cca4 <_strtod_l+0xa44>
 800cc9c:	f1b9 0f00 	cmp.w	r9, #0
 800cca0:	f43f ad8a 	beq.w	800c7b8 <_strtod_l+0x558>
 800cca4:	4b47      	ldr	r3, [pc, #284]	; (800cdc4 <_strtod_l+0xb64>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	e79e      	b.n	800cbe8 <_strtod_l+0x988>
 800ccaa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ccae:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ccb2:	f1ba 0f00 	cmp.w	sl, #0
 800ccb6:	d104      	bne.n	800ccc2 <_strtod_l+0xa62>
 800ccb8:	eeb1 7b4d 	vneg.f64	d7, d13
 800ccbc:	ec53 2b17 	vmov	r2, r3, d7
 800ccc0:	e794      	b.n	800cbec <_strtod_l+0x98c>
 800ccc2:	eeb0 7b4d 	vmov.f64	d7, d13
 800ccc6:	e7f9      	b.n	800ccbc <_strtod_l+0xa5c>
 800ccc8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1ba      	bne.n	800cc48 <_strtod_l+0x9e8>
 800ccd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccd6:	0d1b      	lsrs	r3, r3, #20
 800ccd8:	051b      	lsls	r3, r3, #20
 800ccda:	4299      	cmp	r1, r3
 800ccdc:	d1b4      	bne.n	800cc48 <_strtod_l+0x9e8>
 800ccde:	ec51 0b1d 	vmov	r0, r1, d13
 800cce2:	f7f3 fcd9 	bl	8000698 <__aeabi_d2lz>
 800cce6:	f7f3 fc91 	bl	800060c <__aeabi_l2d>
 800ccea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccee:	ec41 0b17 	vmov	d7, r0, r1
 800ccf2:	ea43 0308 	orr.w	r3, r3, r8
 800ccf6:	ea53 030a 	orrs.w	r3, r3, sl
 800ccfa:	ee3d db47 	vsub.f64	d13, d13, d7
 800ccfe:	d03c      	beq.n	800cd7a <_strtod_l+0xb1a>
 800cd00:	eeb4 dbca 	vcmpe.f64	d13, d10
 800cd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd08:	f53f acf0 	bmi.w	800c6ec <_strtod_l+0x48c>
 800cd0c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd14:	dd98      	ble.n	800cc48 <_strtod_l+0x9e8>
 800cd16:	e4e9      	b.n	800c6ec <_strtod_l+0x48c>
 800cd18:	9804      	ldr	r0, [sp, #16]
 800cd1a:	b1f0      	cbz	r0, 800cd5a <_strtod_l+0xafa>
 800cd1c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800cd20:	d81b      	bhi.n	800cd5a <_strtod_l+0xafa>
 800cd22:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cda8 <_strtod_l+0xb48>
 800cd26:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2e:	d811      	bhi.n	800cd54 <_strtod_l+0xaf4>
 800cd30:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800cd34:	ee1d 3a10 	vmov	r3, s26
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	bf38      	it	cc
 800cd3c:	2301      	movcc	r3, #1
 800cd3e:	ee0d 3a10 	vmov	s26, r3
 800cd42:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800cd46:	f1ba 0f00 	cmp.w	sl, #0
 800cd4a:	d113      	bne.n	800cd74 <_strtod_l+0xb14>
 800cd4c:	eeb1 7b4d 	vneg.f64	d7, d13
 800cd50:	ec53 2b17 	vmov	r2, r3, d7
 800cd54:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800cd58:	1a43      	subs	r3, r0, r1
 800cd5a:	eeb0 0b48 	vmov.f64	d0, d8
 800cd5e:	ec43 2b1c 	vmov	d12, r2, r3
 800cd62:	910a      	str	r1, [sp, #40]	; 0x28
 800cd64:	f7fe fde0 	bl	800b928 <__ulp>
 800cd68:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd6a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800cd6e:	ec59 8b18 	vmov	r8, r9, d8
 800cd72:	e7ab      	b.n	800cccc <_strtod_l+0xa6c>
 800cd74:	eeb0 7b4d 	vmov.f64	d7, d13
 800cd78:	e7ea      	b.n	800cd50 <_strtod_l+0xaf0>
 800cd7a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	f57f af61 	bpl.w	800cc48 <_strtod_l+0x9e8>
 800cd86:	e4b1      	b.n	800c6ec <_strtod_l+0x48c>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd90:	6013      	str	r3, [r2, #0]
 800cd92:	f7ff baad 	b.w	800c2f0 <_strtod_l+0x90>
 800cd96:	2a65      	cmp	r2, #101	; 0x65
 800cd98:	f43f ab9f 	beq.w	800c4da <_strtod_l+0x27a>
 800cd9c:	2a45      	cmp	r2, #69	; 0x45
 800cd9e:	f43f ab9c 	beq.w	800c4da <_strtod_l+0x27a>
 800cda2:	2101      	movs	r1, #1
 800cda4:	f7ff bbd4 	b.w	800c550 <_strtod_l+0x2f0>
 800cda8:	ffc00000 	.word	0xffc00000
 800cdac:	41dfffff 	.word	0x41dfffff
 800cdb0:	000fffff 	.word	0x000fffff
 800cdb4:	7ff00000 	.word	0x7ff00000
 800cdb8:	7fefffff 	.word	0x7fefffff
 800cdbc:	3ff00000 	.word	0x3ff00000
 800cdc0:	7c9fffff 	.word	0x7c9fffff
 800cdc4:	bff00000 	.word	0xbff00000
 800cdc8:	7fe00000 	.word	0x7fe00000

0800cdcc <_strtod_r>:
 800cdcc:	4b01      	ldr	r3, [pc, #4]	; (800cdd4 <_strtod_r+0x8>)
 800cdce:	f7ff ba47 	b.w	800c260 <_strtod_l>
 800cdd2:	bf00      	nop
 800cdd4:	2000043c 	.word	0x2000043c

0800cdd8 <_strtoll_l.constprop.0>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	b085      	sub	sp, #20
 800cdde:	4688      	mov	r8, r1
 800cde0:	9201      	str	r2, [sp, #4]
 800cde2:	4a47      	ldr	r2, [pc, #284]	; (800cf00 <_strtoll_l.constprop.0+0x128>)
 800cde4:	9003      	str	r0, [sp, #12]
 800cde6:	461e      	mov	r6, r3
 800cde8:	460d      	mov	r5, r1
 800cdea:	462b      	mov	r3, r5
 800cdec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdf0:	5ca7      	ldrb	r7, [r4, r2]
 800cdf2:	f017 0708 	ands.w	r7, r7, #8
 800cdf6:	d1f8      	bne.n	800cdea <_strtoll_l.constprop.0+0x12>
 800cdf8:	2c2d      	cmp	r4, #45	; 0x2d
 800cdfa:	d147      	bne.n	800ce8c <_strtoll_l.constprop.0+0xb4>
 800cdfc:	782c      	ldrb	r4, [r5, #0]
 800cdfe:	2701      	movs	r7, #1
 800ce00:	1c9d      	adds	r5, r3, #2
 800ce02:	2e00      	cmp	r6, #0
 800ce04:	d077      	beq.n	800cef6 <_strtoll_l.constprop.0+0x11e>
 800ce06:	2e10      	cmp	r6, #16
 800ce08:	d109      	bne.n	800ce1e <_strtoll_l.constprop.0+0x46>
 800ce0a:	2c30      	cmp	r4, #48	; 0x30
 800ce0c:	d107      	bne.n	800ce1e <_strtoll_l.constprop.0+0x46>
 800ce0e:	782b      	ldrb	r3, [r5, #0]
 800ce10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce14:	2b58      	cmp	r3, #88	; 0x58
 800ce16:	d169      	bne.n	800ceec <_strtoll_l.constprop.0+0x114>
 800ce18:	786c      	ldrb	r4, [r5, #1]
 800ce1a:	2610      	movs	r6, #16
 800ce1c:	3502      	adds	r5, #2
 800ce1e:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800ce22:	f107 3bff 	add.w	fp, r7, #4294967295
 800ce26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce2a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800ce2e:	4632      	mov	r2, r6
 800ce30:	464b      	mov	r3, r9
 800ce32:	4658      	mov	r0, fp
 800ce34:	4651      	mov	r1, sl
 800ce36:	f7f3 fc17 	bl	8000668 <__aeabi_uldivmod>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	9202      	str	r2, [sp, #8]
 800ce3e:	468c      	mov	ip, r1
 800ce40:	4602      	mov	r2, r0
 800ce42:	4619      	mov	r1, r3
 800ce44:	4618      	mov	r0, r3
 800ce46:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ce4a:	f1be 0f09 	cmp.w	lr, #9
 800ce4e:	d822      	bhi.n	800ce96 <_strtoll_l.constprop.0+0xbe>
 800ce50:	4674      	mov	r4, lr
 800ce52:	42a6      	cmp	r6, r4
 800ce54:	dd30      	ble.n	800ceb8 <_strtoll_l.constprop.0+0xe0>
 800ce56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5a:	d014      	beq.n	800ce86 <_strtoll_l.constprop.0+0xae>
 800ce5c:	4282      	cmp	r2, r0
 800ce5e:	eb7c 0301 	sbcs.w	r3, ip, r1
 800ce62:	d326      	bcc.n	800ceb2 <_strtoll_l.constprop.0+0xda>
 800ce64:	458c      	cmp	ip, r1
 800ce66:	bf08      	it	eq
 800ce68:	4282      	cmpeq	r2, r0
 800ce6a:	d102      	bne.n	800ce72 <_strtoll_l.constprop.0+0x9a>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	42a3      	cmp	r3, r4
 800ce70:	db1f      	blt.n	800ceb2 <_strtoll_l.constprop.0+0xda>
 800ce72:	4371      	muls	r1, r6
 800ce74:	fb00 1109 	mla	r1, r0, r9, r1
 800ce78:	fba6 0300 	umull	r0, r3, r6, r0
 800ce7c:	4419      	add	r1, r3
 800ce7e:	1820      	adds	r0, r4, r0
 800ce80:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ce84:	2301      	movs	r3, #1
 800ce86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce8a:	e7dc      	b.n	800ce46 <_strtoll_l.constprop.0+0x6e>
 800ce8c:	2c2b      	cmp	r4, #43	; 0x2b
 800ce8e:	bf04      	itt	eq
 800ce90:	782c      	ldrbeq	r4, [r5, #0]
 800ce92:	1c9d      	addeq	r5, r3, #2
 800ce94:	e7b5      	b.n	800ce02 <_strtoll_l.constprop.0+0x2a>
 800ce96:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ce9a:	f1be 0f19 	cmp.w	lr, #25
 800ce9e:	d801      	bhi.n	800cea4 <_strtoll_l.constprop.0+0xcc>
 800cea0:	3c37      	subs	r4, #55	; 0x37
 800cea2:	e7d6      	b.n	800ce52 <_strtoll_l.constprop.0+0x7a>
 800cea4:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cea8:	f1be 0f19 	cmp.w	lr, #25
 800ceac:	d804      	bhi.n	800ceb8 <_strtoll_l.constprop.0+0xe0>
 800ceae:	3c57      	subs	r4, #87	; 0x57
 800ceb0:	e7cf      	b.n	800ce52 <_strtoll_l.constprop.0+0x7a>
 800ceb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb6:	e7e6      	b.n	800ce86 <_strtoll_l.constprop.0+0xae>
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	d109      	bne.n	800ced0 <_strtoll_l.constprop.0+0xf8>
 800cebc:	9a03      	ldr	r2, [sp, #12]
 800cebe:	2322      	movs	r3, #34	; 0x22
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	4658      	mov	r0, fp
 800cec6:	4651      	mov	r1, sl
 800cec8:	b953      	cbnz	r3, 800cee0 <_strtoll_l.constprop.0+0x108>
 800ceca:	b005      	add	sp, #20
 800cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced0:	b117      	cbz	r7, 800ced8 <_strtoll_l.constprop.0+0x100>
 800ced2:	4240      	negs	r0, r0
 800ced4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ced8:	9a01      	ldr	r2, [sp, #4]
 800ceda:	2a00      	cmp	r2, #0
 800cedc:	d0f5      	beq.n	800ceca <_strtoll_l.constprop.0+0xf2>
 800cede:	b10b      	cbz	r3, 800cee4 <_strtoll_l.constprop.0+0x10c>
 800cee0:	f105 38ff 	add.w	r8, r5, #4294967295
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	f8c3 8000 	str.w	r8, [r3]
 800ceea:	e7ee      	b.n	800ceca <_strtoll_l.constprop.0+0xf2>
 800ceec:	2430      	movs	r4, #48	; 0x30
 800ceee:	2e00      	cmp	r6, #0
 800cef0:	d195      	bne.n	800ce1e <_strtoll_l.constprop.0+0x46>
 800cef2:	2608      	movs	r6, #8
 800cef4:	e793      	b.n	800ce1e <_strtoll_l.constprop.0+0x46>
 800cef6:	2c30      	cmp	r4, #48	; 0x30
 800cef8:	d089      	beq.n	800ce0e <_strtoll_l.constprop.0+0x36>
 800cefa:	260a      	movs	r6, #10
 800cefc:	e78f      	b.n	800ce1e <_strtoll_l.constprop.0+0x46>
 800cefe:	bf00      	nop
 800cf00:	080112d5 	.word	0x080112d5

0800cf04 <_strtoll_r>:
 800cf04:	f7ff bf68 	b.w	800cdd8 <_strtoll_l.constprop.0>

0800cf08 <_strtoul_l.constprop.0>:
 800cf08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf0c:	4f36      	ldr	r7, [pc, #216]	; (800cfe8 <_strtoul_l.constprop.0+0xe0>)
 800cf0e:	4686      	mov	lr, r0
 800cf10:	460d      	mov	r5, r1
 800cf12:	4628      	mov	r0, r5
 800cf14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf18:	5de6      	ldrb	r6, [r4, r7]
 800cf1a:	f016 0608 	ands.w	r6, r6, #8
 800cf1e:	d1f8      	bne.n	800cf12 <_strtoul_l.constprop.0+0xa>
 800cf20:	2c2d      	cmp	r4, #45	; 0x2d
 800cf22:	d12f      	bne.n	800cf84 <_strtoul_l.constprop.0+0x7c>
 800cf24:	782c      	ldrb	r4, [r5, #0]
 800cf26:	2601      	movs	r6, #1
 800cf28:	1c85      	adds	r5, r0, #2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d057      	beq.n	800cfde <_strtoul_l.constprop.0+0xd6>
 800cf2e:	2b10      	cmp	r3, #16
 800cf30:	d109      	bne.n	800cf46 <_strtoul_l.constprop.0+0x3e>
 800cf32:	2c30      	cmp	r4, #48	; 0x30
 800cf34:	d107      	bne.n	800cf46 <_strtoul_l.constprop.0+0x3e>
 800cf36:	7828      	ldrb	r0, [r5, #0]
 800cf38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cf3c:	2858      	cmp	r0, #88	; 0x58
 800cf3e:	d149      	bne.n	800cfd4 <_strtoul_l.constprop.0+0xcc>
 800cf40:	786c      	ldrb	r4, [r5, #1]
 800cf42:	2310      	movs	r3, #16
 800cf44:	3502      	adds	r5, #2
 800cf46:	f04f 38ff 	mov.w	r8, #4294967295
 800cf4a:	2700      	movs	r7, #0
 800cf4c:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf50:	fb03 f908 	mul.w	r9, r3, r8
 800cf54:	ea6f 0909 	mvn.w	r9, r9
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf5e:	f1bc 0f09 	cmp.w	ip, #9
 800cf62:	d814      	bhi.n	800cf8e <_strtoul_l.constprop.0+0x86>
 800cf64:	4664      	mov	r4, ip
 800cf66:	42a3      	cmp	r3, r4
 800cf68:	dd22      	ble.n	800cfb0 <_strtoul_l.constprop.0+0xa8>
 800cf6a:	2f00      	cmp	r7, #0
 800cf6c:	db1d      	blt.n	800cfaa <_strtoul_l.constprop.0+0xa2>
 800cf6e:	4580      	cmp	r8, r0
 800cf70:	d31b      	bcc.n	800cfaa <_strtoul_l.constprop.0+0xa2>
 800cf72:	d101      	bne.n	800cf78 <_strtoul_l.constprop.0+0x70>
 800cf74:	45a1      	cmp	r9, r4
 800cf76:	db18      	blt.n	800cfaa <_strtoul_l.constprop.0+0xa2>
 800cf78:	fb00 4003 	mla	r0, r0, r3, r4
 800cf7c:	2701      	movs	r7, #1
 800cf7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf82:	e7ea      	b.n	800cf5a <_strtoul_l.constprop.0+0x52>
 800cf84:	2c2b      	cmp	r4, #43	; 0x2b
 800cf86:	bf04      	itt	eq
 800cf88:	782c      	ldrbeq	r4, [r5, #0]
 800cf8a:	1c85      	addeq	r5, r0, #2
 800cf8c:	e7cd      	b.n	800cf2a <_strtoul_l.constprop.0+0x22>
 800cf8e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf92:	f1bc 0f19 	cmp.w	ip, #25
 800cf96:	d801      	bhi.n	800cf9c <_strtoul_l.constprop.0+0x94>
 800cf98:	3c37      	subs	r4, #55	; 0x37
 800cf9a:	e7e4      	b.n	800cf66 <_strtoul_l.constprop.0+0x5e>
 800cf9c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfa0:	f1bc 0f19 	cmp.w	ip, #25
 800cfa4:	d804      	bhi.n	800cfb0 <_strtoul_l.constprop.0+0xa8>
 800cfa6:	3c57      	subs	r4, #87	; 0x57
 800cfa8:	e7dd      	b.n	800cf66 <_strtoul_l.constprop.0+0x5e>
 800cfaa:	f04f 37ff 	mov.w	r7, #4294967295
 800cfae:	e7e6      	b.n	800cf7e <_strtoul_l.constprop.0+0x76>
 800cfb0:	2f00      	cmp	r7, #0
 800cfb2:	da07      	bge.n	800cfc4 <_strtoul_l.constprop.0+0xbc>
 800cfb4:	2322      	movs	r3, #34	; 0x22
 800cfb6:	f8ce 3000 	str.w	r3, [lr]
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	b932      	cbnz	r2, 800cfce <_strtoul_l.constprop.0+0xc6>
 800cfc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc4:	b106      	cbz	r6, 800cfc8 <_strtoul_l.constprop.0+0xc0>
 800cfc6:	4240      	negs	r0, r0
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	d0f9      	beq.n	800cfc0 <_strtoul_l.constprop.0+0xb8>
 800cfcc:	b107      	cbz	r7, 800cfd0 <_strtoul_l.constprop.0+0xc8>
 800cfce:	1e69      	subs	r1, r5, #1
 800cfd0:	6011      	str	r1, [r2, #0]
 800cfd2:	e7f5      	b.n	800cfc0 <_strtoul_l.constprop.0+0xb8>
 800cfd4:	2430      	movs	r4, #48	; 0x30
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1b5      	bne.n	800cf46 <_strtoul_l.constprop.0+0x3e>
 800cfda:	2308      	movs	r3, #8
 800cfdc:	e7b3      	b.n	800cf46 <_strtoul_l.constprop.0+0x3e>
 800cfde:	2c30      	cmp	r4, #48	; 0x30
 800cfe0:	d0a9      	beq.n	800cf36 <_strtoul_l.constprop.0+0x2e>
 800cfe2:	230a      	movs	r3, #10
 800cfe4:	e7af      	b.n	800cf46 <_strtoul_l.constprop.0+0x3e>
 800cfe6:	bf00      	nop
 800cfe8:	080112d5 	.word	0x080112d5

0800cfec <_strtoul_r>:
 800cfec:	f7ff bf8c 	b.w	800cf08 <_strtoul_l.constprop.0>

0800cff0 <_strtoull_l.constprop.0>:
 800cff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	4692      	mov	sl, r2
 800cff6:	4a49      	ldr	r2, [pc, #292]	; (800d11c <_strtoull_l.constprop.0+0x12c>)
 800cff8:	9001      	str	r0, [sp, #4]
 800cffa:	4689      	mov	r9, r1
 800cffc:	461d      	mov	r5, r3
 800cffe:	460e      	mov	r6, r1
 800d000:	4633      	mov	r3, r6
 800d002:	f816 4b01 	ldrb.w	r4, [r6], #1
 800d006:	5ca7      	ldrb	r7, [r4, r2]
 800d008:	f017 0708 	ands.w	r7, r7, #8
 800d00c:	d1f8      	bne.n	800d000 <_strtoull_l.constprop.0+0x10>
 800d00e:	2c2d      	cmp	r4, #45	; 0x2d
 800d010:	d14a      	bne.n	800d0a8 <_strtoull_l.constprop.0+0xb8>
 800d012:	7834      	ldrb	r4, [r6, #0]
 800d014:	2701      	movs	r7, #1
 800d016:	1c9e      	adds	r6, r3, #2
 800d018:	2d00      	cmp	r5, #0
 800d01a:	d07b      	beq.n	800d114 <_strtoull_l.constprop.0+0x124>
 800d01c:	2d10      	cmp	r5, #16
 800d01e:	d109      	bne.n	800d034 <_strtoull_l.constprop.0+0x44>
 800d020:	2c30      	cmp	r4, #48	; 0x30
 800d022:	d107      	bne.n	800d034 <_strtoull_l.constprop.0+0x44>
 800d024:	7833      	ldrb	r3, [r6, #0]
 800d026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d02a:	2b58      	cmp	r3, #88	; 0x58
 800d02c:	d16d      	bne.n	800d10a <_strtoull_l.constprop.0+0x11a>
 800d02e:	7874      	ldrb	r4, [r6, #1]
 800d030:	2510      	movs	r5, #16
 800d032:	3602      	adds	r6, #2
 800d034:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800d038:	462a      	mov	r2, r5
 800d03a:	465b      	mov	r3, fp
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	f04f 31ff 	mov.w	r1, #4294967295
 800d044:	f7f3 fb10 	bl	8000668 <__aeabi_uldivmod>
 800d048:	462a      	mov	r2, r5
 800d04a:	9000      	str	r0, [sp, #0]
 800d04c:	4688      	mov	r8, r1
 800d04e:	465b      	mov	r3, fp
 800d050:	f04f 30ff 	mov.w	r0, #4294967295
 800d054:	f04f 31ff 	mov.w	r1, #4294967295
 800d058:	f7f3 fb06 	bl	8000668 <__aeabi_uldivmod>
 800d05c:	2300      	movs	r3, #0
 800d05e:	4618      	mov	r0, r3
 800d060:	4619      	mov	r1, r3
 800d062:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d066:	f1bc 0f09 	cmp.w	ip, #9
 800d06a:	d822      	bhi.n	800d0b2 <_strtoull_l.constprop.0+0xc2>
 800d06c:	4664      	mov	r4, ip
 800d06e:	42a5      	cmp	r5, r4
 800d070:	dd30      	ble.n	800d0d4 <_strtoull_l.constprop.0+0xe4>
 800d072:	2b00      	cmp	r3, #0
 800d074:	db2b      	blt.n	800d0ce <_strtoull_l.constprop.0+0xde>
 800d076:	9b00      	ldr	r3, [sp, #0]
 800d078:	4283      	cmp	r3, r0
 800d07a:	eb78 0301 	sbcs.w	r3, r8, r1
 800d07e:	d326      	bcc.n	800d0ce <_strtoull_l.constprop.0+0xde>
 800d080:	9b00      	ldr	r3, [sp, #0]
 800d082:	4588      	cmp	r8, r1
 800d084:	bf08      	it	eq
 800d086:	4283      	cmpeq	r3, r0
 800d088:	d101      	bne.n	800d08e <_strtoull_l.constprop.0+0x9e>
 800d08a:	42a2      	cmp	r2, r4
 800d08c:	db1f      	blt.n	800d0ce <_strtoull_l.constprop.0+0xde>
 800d08e:	4369      	muls	r1, r5
 800d090:	fb00 110b 	mla	r1, r0, fp, r1
 800d094:	fba5 0300 	umull	r0, r3, r5, r0
 800d098:	4419      	add	r1, r3
 800d09a:	1820      	adds	r0, r4, r0
 800d09c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	f816 4b01 	ldrb.w	r4, [r6], #1
 800d0a6:	e7dc      	b.n	800d062 <_strtoull_l.constprop.0+0x72>
 800d0a8:	2c2b      	cmp	r4, #43	; 0x2b
 800d0aa:	bf04      	itt	eq
 800d0ac:	7834      	ldrbeq	r4, [r6, #0]
 800d0ae:	1c9e      	addeq	r6, r3, #2
 800d0b0:	e7b2      	b.n	800d018 <_strtoull_l.constprop.0+0x28>
 800d0b2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d0b6:	f1bc 0f19 	cmp.w	ip, #25
 800d0ba:	d801      	bhi.n	800d0c0 <_strtoull_l.constprop.0+0xd0>
 800d0bc:	3c37      	subs	r4, #55	; 0x37
 800d0be:	e7d6      	b.n	800d06e <_strtoull_l.constprop.0+0x7e>
 800d0c0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d0c4:	f1bc 0f19 	cmp.w	ip, #25
 800d0c8:	d804      	bhi.n	800d0d4 <_strtoull_l.constprop.0+0xe4>
 800d0ca:	3c57      	subs	r4, #87	; 0x57
 800d0cc:	e7cf      	b.n	800d06e <_strtoull_l.constprop.0+0x7e>
 800d0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d2:	e7e6      	b.n	800d0a2 <_strtoull_l.constprop.0+0xb2>
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	da0b      	bge.n	800d0f0 <_strtoull_l.constprop.0+0x100>
 800d0d8:	9a01      	ldr	r2, [sp, #4]
 800d0da:	2322      	movs	r3, #34	; 0x22
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	f1ba 0f00 	cmp.w	sl, #0
 800d0e8:	d10a      	bne.n	800d100 <_strtoull_l.constprop.0+0x110>
 800d0ea:	b003      	add	sp, #12
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	b117      	cbz	r7, 800d0f8 <_strtoull_l.constprop.0+0x108>
 800d0f2:	4240      	negs	r0, r0
 800d0f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d0f8:	f1ba 0f00 	cmp.w	sl, #0
 800d0fc:	d0f5      	beq.n	800d0ea <_strtoull_l.constprop.0+0xfa>
 800d0fe:	b10b      	cbz	r3, 800d104 <_strtoull_l.constprop.0+0x114>
 800d100:	f106 39ff 	add.w	r9, r6, #4294967295
 800d104:	f8ca 9000 	str.w	r9, [sl]
 800d108:	e7ef      	b.n	800d0ea <_strtoull_l.constprop.0+0xfa>
 800d10a:	2430      	movs	r4, #48	; 0x30
 800d10c:	2d00      	cmp	r5, #0
 800d10e:	d191      	bne.n	800d034 <_strtoull_l.constprop.0+0x44>
 800d110:	2508      	movs	r5, #8
 800d112:	e78f      	b.n	800d034 <_strtoull_l.constprop.0+0x44>
 800d114:	2c30      	cmp	r4, #48	; 0x30
 800d116:	d085      	beq.n	800d024 <_strtoull_l.constprop.0+0x34>
 800d118:	250a      	movs	r5, #10
 800d11a:	e78b      	b.n	800d034 <_strtoull_l.constprop.0+0x44>
 800d11c:	080112d5 	.word	0x080112d5

0800d120 <_strtoull_r>:
 800d120:	f7ff bf66 	b.w	800cff0 <_strtoull_l.constprop.0>
 800d124:	0000      	movs	r0, r0
	...

0800d128 <_svfprintf_r>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	ed2d 8b04 	vpush	{d8-d9}
 800d130:	b0cb      	sub	sp, #300	; 0x12c
 800d132:	468b      	mov	fp, r1
 800d134:	4692      	mov	sl, r2
 800d136:	4698      	mov	r8, r3
 800d138:	4607      	mov	r7, r0
 800d13a:	f7fd fdb1 	bl	800aca0 <_localeconv_r>
 800d13e:	6803      	ldr	r3, [r0, #0]
 800d140:	930f      	str	r3, [sp, #60]	; 0x3c
 800d142:	4618      	mov	r0, r3
 800d144:	f7f3 f87c 	bl	8000240 <strlen>
 800d148:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d14c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d14e:	061a      	lsls	r2, r3, #24
 800d150:	d519      	bpl.n	800d186 <_svfprintf_r+0x5e>
 800d152:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d156:	b9b3      	cbnz	r3, 800d186 <_svfprintf_r+0x5e>
 800d158:	2140      	movs	r1, #64	; 0x40
 800d15a:	4638      	mov	r0, r7
 800d15c:	f7fd fe24 	bl	800ada8 <_malloc_r>
 800d160:	f8cb 0000 	str.w	r0, [fp]
 800d164:	f8cb 0010 	str.w	r0, [fp, #16]
 800d168:	b950      	cbnz	r0, 800d180 <_svfprintf_r+0x58>
 800d16a:	230c      	movs	r3, #12
 800d16c:	603b      	str	r3, [r7, #0]
 800d16e:	f04f 33ff 	mov.w	r3, #4294967295
 800d172:	930a      	str	r3, [sp, #40]	; 0x28
 800d174:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d176:	b04b      	add	sp, #300	; 0x12c
 800d178:	ecbd 8b04 	vpop	{d8-d9}
 800d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d180:	2340      	movs	r3, #64	; 0x40
 800d182:	f8cb 3014 	str.w	r3, [fp, #20]
 800d186:	2300      	movs	r3, #0
 800d188:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 800d18c:	ed9f 8b96 	vldr	d8, [pc, #600]	; 800d3e8 <_svfprintf_r+0x2c0>
 800d190:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800d194:	ac21      	add	r4, sp, #132	; 0x84
 800d196:	941e      	str	r4, [sp, #120]	; 0x78
 800d198:	9303      	str	r3, [sp, #12]
 800d19a:	9308      	str	r3, [sp, #32]
 800d19c:	930e      	str	r3, [sp, #56]	; 0x38
 800d19e:	9310      	str	r3, [sp, #64]	; 0x40
 800d1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d1a2:	4653      	mov	r3, sl
 800d1a4:	461d      	mov	r5, r3
 800d1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1aa:	b10a      	cbz	r2, 800d1b0 <_svfprintf_r+0x88>
 800d1ac:	2a25      	cmp	r2, #37	; 0x25
 800d1ae:	d1f9      	bne.n	800d1a4 <_svfprintf_r+0x7c>
 800d1b0:	ebb5 060a 	subs.w	r6, r5, sl
 800d1b4:	d00d      	beq.n	800d1d2 <_svfprintf_r+0xaa>
 800d1b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d1b8:	4433      	add	r3, r6
 800d1ba:	9320      	str	r3, [sp, #128]	; 0x80
 800d1bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1be:	3301      	adds	r3, #1
 800d1c0:	2b07      	cmp	r3, #7
 800d1c2:	e9c4 a600 	strd	sl, r6, [r4]
 800d1c6:	931f      	str	r3, [sp, #124]	; 0x7c
 800d1c8:	dc77      	bgt.n	800d2ba <_svfprintf_r+0x192>
 800d1ca:	3408      	adds	r4, #8
 800d1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ce:	4433      	add	r3, r6
 800d1d0:	930a      	str	r3, [sp, #40]	; 0x28
 800d1d2:	782b      	ldrb	r3, [r5, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f001 8135 	beq.w	800e444 <_svfprintf_r+0x131c>
 800d1da:	2200      	movs	r2, #0
 800d1dc:	1c6b      	adds	r3, r5, #1
 800d1de:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800d1e2:	f04f 36ff 	mov.w	r6, #4294967295
 800d1e6:	920c      	str	r2, [sp, #48]	; 0x30
 800d1e8:	4615      	mov	r5, r2
 800d1ea:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800d1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1f2:	9204      	str	r2, [sp, #16]
 800d1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f6:	9b04      	ldr	r3, [sp, #16]
 800d1f8:	3b20      	subs	r3, #32
 800d1fa:	2b5a      	cmp	r3, #90	; 0x5a
 800d1fc:	f200 8590 	bhi.w	800dd20 <_svfprintf_r+0xbf8>
 800d200:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d204:	058e007d 	.word	0x058e007d
 800d208:	0085058e 	.word	0x0085058e
 800d20c:	058e058e 	.word	0x058e058e
 800d210:	0065058e 	.word	0x0065058e
 800d214:	058e058e 	.word	0x058e058e
 800d218:	00920088 	.word	0x00920088
 800d21c:	008f058e 	.word	0x008f058e
 800d220:	058e0095 	.word	0x058e0095
 800d224:	00b200af 	.word	0x00b200af
 800d228:	00b200b2 	.word	0x00b200b2
 800d22c:	00b200b2 	.word	0x00b200b2
 800d230:	00b200b2 	.word	0x00b200b2
 800d234:	00b200b2 	.word	0x00b200b2
 800d238:	058e058e 	.word	0x058e058e
 800d23c:	058e058e 	.word	0x058e058e
 800d240:	058e058e 	.word	0x058e058e
 800d244:	012d058e 	.word	0x012d058e
 800d248:	00e0058e 	.word	0x00e0058e
 800d24c:	012d00fa 	.word	0x012d00fa
 800d250:	012d012d 	.word	0x012d012d
 800d254:	058e058e 	.word	0x058e058e
 800d258:	058e058e 	.word	0x058e058e
 800d25c:	058e00c3 	.word	0x058e00c3
 800d260:	0455058e 	.word	0x0455058e
 800d264:	058e058e 	.word	0x058e058e
 800d268:	04a3058e 	.word	0x04a3058e
 800d26c:	04c7058e 	.word	0x04c7058e
 800d270:	058e058e 	.word	0x058e058e
 800d274:	058e04ed 	.word	0x058e04ed
 800d278:	058e058e 	.word	0x058e058e
 800d27c:	058e058e 	.word	0x058e058e
 800d280:	058e058e 	.word	0x058e058e
 800d284:	012d058e 	.word	0x012d058e
 800d288:	00e0058e 	.word	0x00e0058e
 800d28c:	012d00fc 	.word	0x012d00fc
 800d290:	012d012d 	.word	0x012d012d
 800d294:	00fc00c6 	.word	0x00fc00c6
 800d298:	058e00da 	.word	0x058e00da
 800d29c:	058e00d3 	.word	0x058e00d3
 800d2a0:	0457042e 	.word	0x0457042e
 800d2a4:	00da0490 	.word	0x00da0490
 800d2a8:	04a3058e 	.word	0x04a3058e
 800d2ac:	04c9007b 	.word	0x04c9007b
 800d2b0:	058e058e 	.word	0x058e058e
 800d2b4:	058e050d 	.word	0x058e050d
 800d2b8:	007b      	.short	0x007b
 800d2ba:	aa1e      	add	r2, sp, #120	; 0x78
 800d2bc:	4659      	mov	r1, fp
 800d2be:	4638      	mov	r0, r7
 800d2c0:	f002 fc4e 	bl	800fb60 <__ssprint_r>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f040 8126 	bne.w	800d516 <_svfprintf_r+0x3ee>
 800d2ca:	ac21      	add	r4, sp, #132	; 0x84
 800d2cc:	e77e      	b.n	800d1cc <_svfprintf_r+0xa4>
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7fd fce6 	bl	800aca0 <_localeconv_r>
 800d2d4:	6843      	ldr	r3, [r0, #4]
 800d2d6:	9310      	str	r3, [sp, #64]	; 0x40
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7f2 ffb1 	bl	8000240 <strlen>
 800d2de:	900e      	str	r0, [sp, #56]	; 0x38
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7fd fcdd 	bl	800aca0 <_localeconv_r>
 800d2e6:	6883      	ldr	r3, [r0, #8]
 800d2e8:	9308      	str	r3, [sp, #32]
 800d2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2ec:	b12b      	cbz	r3, 800d2fa <_svfprintf_r+0x1d2>
 800d2ee:	9b08      	ldr	r3, [sp, #32]
 800d2f0:	b11b      	cbz	r3, 800d2fa <_svfprintf_r+0x1d2>
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b10b      	cbz	r3, 800d2fa <_svfprintf_r+0x1d2>
 800d2f6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800d2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2fc:	e777      	b.n	800d1ee <_svfprintf_r+0xc6>
 800d2fe:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1f9      	bne.n	800d2fa <_svfprintf_r+0x1d2>
 800d306:	2320      	movs	r3, #32
 800d308:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800d30c:	e7f5      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d30e:	f045 0501 	orr.w	r5, r5, #1
 800d312:	e7f2      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d314:	f858 3b04 	ldr.w	r3, [r8], #4
 800d318:	930c      	str	r3, [sp, #48]	; 0x30
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	daed      	bge.n	800d2fa <_svfprintf_r+0x1d2>
 800d31e:	425b      	negs	r3, r3
 800d320:	930c      	str	r3, [sp, #48]	; 0x30
 800d322:	f045 0504 	orr.w	r5, r5, #4
 800d326:	e7e8      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d328:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 800d32c:	e7e5      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d330:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	2b2a      	cmp	r3, #42	; 0x2a
 800d338:	d111      	bne.n	800d35e <_svfprintf_r+0x236>
 800d33a:	f858 6b04 	ldr.w	r6, [r8], #4
 800d33e:	9209      	str	r2, [sp, #36]	; 0x24
 800d340:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800d344:	e7d9      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d346:	210a      	movs	r1, #10
 800d348:	fb01 3606 	mla	r6, r1, r6, r3
 800d34c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	3b30      	subs	r3, #48	; 0x30
 800d356:	2b09      	cmp	r3, #9
 800d358:	d9f5      	bls.n	800d346 <_svfprintf_r+0x21e>
 800d35a:	9209      	str	r2, [sp, #36]	; 0x24
 800d35c:	e74b      	b.n	800d1f6 <_svfprintf_r+0xce>
 800d35e:	2600      	movs	r6, #0
 800d360:	e7f7      	b.n	800d352 <_svfprintf_r+0x22a>
 800d362:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800d366:	e7c8      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d368:	2300      	movs	r3, #0
 800d36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d36c:	930c      	str	r3, [sp, #48]	; 0x30
 800d36e:	9b04      	ldr	r3, [sp, #16]
 800d370:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d372:	3b30      	subs	r3, #48	; 0x30
 800d374:	200a      	movs	r0, #10
 800d376:	fb00 3301 	mla	r3, r0, r1, r3
 800d37a:	930c      	str	r3, [sp, #48]	; 0x30
 800d37c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	3b30      	subs	r3, #48	; 0x30
 800d384:	2b09      	cmp	r3, #9
 800d386:	d9f2      	bls.n	800d36e <_svfprintf_r+0x246>
 800d388:	e7e7      	b.n	800d35a <_svfprintf_r+0x232>
 800d38a:	f045 0508 	orr.w	r5, r5, #8
 800d38e:	e7b4      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b68      	cmp	r3, #104	; 0x68
 800d396:	bf01      	itttt	eq
 800d398:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800d39a:	3301      	addeq	r3, #1
 800d39c:	9309      	streq	r3, [sp, #36]	; 0x24
 800d39e:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800d3a2:	bf18      	it	ne
 800d3a4:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800d3a8:	e7a7      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b6c      	cmp	r3, #108	; 0x6c
 800d3b0:	d105      	bne.n	800d3be <_svfprintf_r+0x296>
 800d3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b8:	f045 0520 	orr.w	r5, r5, #32
 800d3bc:	e79d      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d3be:	f045 0510 	orr.w	r5, r5, #16
 800d3c2:	e79a      	b.n	800d2fa <_svfprintf_r+0x1d2>
 800d3c4:	4642      	mov	r2, r8
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f852 3b04 	ldr.w	r3, [r2], #4
 800d3cc:	9205      	str	r2, [sp, #20]
 800d3ce:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800d3d2:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800d3d6:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800d3da:	9002      	str	r0, [sp, #8]
 800d3dc:	2601      	movs	r6, #1
 800d3de:	4681      	mov	r9, r0
 800d3e0:	4680      	mov	r8, r0
 800d3e2:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800d3e6:	e18e      	b.n	800d706 <_svfprintf_r+0x5de>
	...
 800d3f0:	ffffffff 	.word	0xffffffff
 800d3f4:	7fefffff 	.word	0x7fefffff
 800d3f8:	f045 0510 	orr.w	r5, r5, #16
 800d3fc:	06ab      	lsls	r3, r5, #26
 800d3fe:	d516      	bpl.n	800d42e <_svfprintf_r+0x306>
 800d400:	f108 0307 	add.w	r3, r8, #7
 800d404:	f023 0307 	bic.w	r3, r3, #7
 800d408:	461a      	mov	r2, r3
 800d40a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d40e:	f852 8b08 	ldr.w	r8, [r2], #8
 800d412:	9205      	str	r2, [sp, #20]
 800d414:	f1b9 0f00 	cmp.w	r9, #0
 800d418:	da07      	bge.n	800d42a <_svfprintf_r+0x302>
 800d41a:	f1d8 0800 	rsbs	r8, r8, #0
 800d41e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d422:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 800d426:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800d42a:	2301      	movs	r3, #1
 800d42c:	e354      	b.n	800dad8 <_svfprintf_r+0x9b0>
 800d42e:	4642      	mov	r2, r8
 800d430:	06e8      	lsls	r0, r5, #27
 800d432:	f852 3b04 	ldr.w	r3, [r2], #4
 800d436:	9205      	str	r2, [sp, #20]
 800d438:	d503      	bpl.n	800d442 <_svfprintf_r+0x31a>
 800d43a:	4698      	mov	r8, r3
 800d43c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d440:	e7e8      	b.n	800d414 <_svfprintf_r+0x2ec>
 800d442:	0669      	lsls	r1, r5, #25
 800d444:	d504      	bpl.n	800d450 <_svfprintf_r+0x328>
 800d446:	fa0f f883 	sxth.w	r8, r3
 800d44a:	f343 39c0 	sbfx	r9, r3, #15, #1
 800d44e:	e7e1      	b.n	800d414 <_svfprintf_r+0x2ec>
 800d450:	05aa      	lsls	r2, r5, #22
 800d452:	d5f2      	bpl.n	800d43a <_svfprintf_r+0x312>
 800d454:	fa4f f883 	sxtb.w	r8, r3
 800d458:	f343 19c0 	sbfx	r9, r3, #7, #1
 800d45c:	e7da      	b.n	800d414 <_svfprintf_r+0x2ec>
 800d45e:	f108 0807 	add.w	r8, r8, #7
 800d462:	f028 0307 	bic.w	r3, r8, #7
 800d466:	ecb3 8b02 	vldmia	r3!, {d8}
 800d46a:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 800d3f0 <_svfprintf_r+0x2c8>
 800d46e:	eeb0 6bc8 	vabs.f64	d6, d8
 800d472:	eeb4 6b47 	vcmp.f64	d6, d7
 800d476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47a:	9305      	str	r3, [sp, #20]
 800d47c:	dd18      	ble.n	800d4b0 <_svfprintf_r+0x388>
 800d47e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d486:	d502      	bpl.n	800d48e <_svfprintf_r+0x366>
 800d488:	232d      	movs	r3, #45	; 0x2d
 800d48a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <_svfprintf_r+0x400>)
 800d490:	4826      	ldr	r0, [pc, #152]	; (800d52c <_svfprintf_r+0x404>)
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	2b47      	cmp	r3, #71	; 0x47
 800d496:	bfd4      	ite	le
 800d498:	4692      	movle	sl, r2
 800d49a:	4682      	movgt	sl, r0
 800d49c:	2300      	movs	r3, #0
 800d49e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800d4a2:	9302      	str	r3, [sp, #8]
 800d4a4:	2603      	movs	r6, #3
 800d4a6:	4699      	mov	r9, r3
 800d4a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800d4ac:	4698      	mov	r8, r3
 800d4ae:	e12a      	b.n	800d706 <_svfprintf_r+0x5de>
 800d4b0:	eeb4 8b48 	vcmp.f64	d8, d8
 800d4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b8:	d70a      	bvc.n	800d4d0 <_svfprintf_r+0x3a8>
 800d4ba:	ee18 3a90 	vmov	r3, s17
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	bfb8      	it	lt
 800d4c2:	232d      	movlt	r3, #45	; 0x2d
 800d4c4:	4a1a      	ldr	r2, [pc, #104]	; (800d530 <_svfprintf_r+0x408>)
 800d4c6:	481b      	ldr	r0, [pc, #108]	; (800d534 <_svfprintf_r+0x40c>)
 800d4c8:	bfb8      	it	lt
 800d4ca:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800d4ce:	e7e0      	b.n	800d492 <_svfprintf_r+0x36a>
 800d4d0:	9b04      	ldr	r3, [sp, #16]
 800d4d2:	f023 0920 	bic.w	r9, r3, #32
 800d4d6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800d4da:	d12d      	bne.n	800d538 <_svfprintf_r+0x410>
 800d4dc:	2330      	movs	r3, #48	; 0x30
 800d4de:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800d4e2:	9b04      	ldr	r3, [sp, #16]
 800d4e4:	2b61      	cmp	r3, #97	; 0x61
 800d4e6:	bf0c      	ite	eq
 800d4e8:	2378      	moveq	r3, #120	; 0x78
 800d4ea:	2358      	movne	r3, #88	; 0x58
 800d4ec:	2e63      	cmp	r6, #99	; 0x63
 800d4ee:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800d4f2:	f045 0502 	orr.w	r5, r5, #2
 800d4f6:	f340 81db 	ble.w	800d8b0 <_svfprintf_r+0x788>
 800d4fa:	1c71      	adds	r1, r6, #1
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7fd fc53 	bl	800ada8 <_malloc_r>
 800d502:	4682      	mov	sl, r0
 800d504:	2800      	cmp	r0, #0
 800d506:	f040 81d8 	bne.w	800d8ba <_svfprintf_r+0x792>
 800d50a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d512:	f8ab 300c 	strh.w	r3, [fp, #12]
 800d516:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d51a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d520:	bf18      	it	ne
 800d522:	f04f 33ff 	movne.w	r3, #4294967295
 800d526:	e624      	b.n	800d172 <_svfprintf_r+0x4a>
 800d528:	08011259 	.word	0x08011259
 800d52c:	0801125d 	.word	0x0801125d
 800d530:	08011261 	.word	0x08011261
 800d534:	08011265 	.word	0x08011265
 800d538:	1c73      	adds	r3, r6, #1
 800d53a:	f000 81c0 	beq.w	800d8be <_svfprintf_r+0x796>
 800d53e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d542:	f040 81c0 	bne.w	800d8c6 <_svfprintf_r+0x79e>
 800d546:	2e00      	cmp	r6, #0
 800d548:	f040 81bd 	bne.w	800d8c6 <_svfprintf_r+0x79e>
 800d54c:	9602      	str	r6, [sp, #8]
 800d54e:	2601      	movs	r6, #1
 800d550:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800d554:	930d      	str	r3, [sp, #52]	; 0x34
 800d556:	ee18 3a90 	vmov	r3, s17
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f280 81b6 	bge.w	800d8cc <_svfprintf_r+0x7a4>
 800d560:	eeb1 9b48 	vneg.f64	d9, d8
 800d564:	232d      	movs	r3, #45	; 0x2d
 800d566:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 800d56a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d56c:	f040 81c7 	bne.w	800d8fe <_svfprintf_r+0x7d6>
 800d570:	eeb0 0b49 	vmov.f64	d0, d9
 800d574:	a818      	add	r0, sp, #96	; 0x60
 800d576:	f7fe fd5b 	bl	800c030 <frexp>
 800d57a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 800d57e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d582:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58a:	bf08      	it	eq
 800d58c:	2301      	moveq	r3, #1
 800d58e:	9a04      	ldr	r2, [sp, #16]
 800d590:	bf08      	it	eq
 800d592:	9318      	streq	r3, [sp, #96]	; 0x60
 800d594:	49b5      	ldr	r1, [pc, #724]	; (800d86c <_svfprintf_r+0x744>)
 800d596:	4bb6      	ldr	r3, [pc, #728]	; (800d870 <_svfprintf_r+0x748>)
 800d598:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 800d59c:	2a61      	cmp	r2, #97	; 0x61
 800d59e:	bf18      	it	ne
 800d5a0:	4619      	movne	r1, r3
 800d5a2:	1e72      	subs	r2, r6, #1
 800d5a4:	4653      	mov	r3, sl
 800d5a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d5aa:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d5ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d5b2:	ee16 ca90 	vmov	ip, s13
 800d5b6:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d5ba:	f803 0b01 	strb.w	r0, [r3], #1
 800d5be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d5c8:	d006      	beq.n	800d5d8 <_svfprintf_r+0x4b0>
 800d5ca:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	f102 32ff 	add.w	r2, r2, #4294967295
 800d5d6:	d1e6      	bne.n	800d5a6 <_svfprintf_r+0x47e>
 800d5d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d5dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e4:	dc09      	bgt.n	800d5fa <_svfprintf_r+0x4d2>
 800d5e6:	eeb4 0b47 	vcmp.f64	d0, d7
 800d5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ee:	f040 8180 	bne.w	800d8f2 <_svfprintf_r+0x7ca>
 800d5f2:	f01c 0f01 	tst.w	ip, #1
 800d5f6:	f000 817c 	beq.w	800d8f2 <_svfprintf_r+0x7ca>
 800d5fa:	f891 c00f 	ldrb.w	ip, [r1, #15]
 800d5fe:	931c      	str	r3, [sp, #112]	; 0x70
 800d600:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800d604:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d606:	1e42      	subs	r2, r0, #1
 800d608:	921c      	str	r2, [sp, #112]	; 0x70
 800d60a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800d60e:	4562      	cmp	r2, ip
 800d610:	f000 8160 	beq.w	800d8d4 <_svfprintf_r+0x7ac>
 800d614:	2a39      	cmp	r2, #57	; 0x39
 800d616:	bf16      	itet	ne
 800d618:	3201      	addne	r2, #1
 800d61a:	7a8a      	ldrbeq	r2, [r1, #10]
 800d61c:	b2d2      	uxtbne	r2, r2
 800d61e:	f800 2c01 	strb.w	r2, [r0, #-1]
 800d622:	eba3 030a 	sub.w	r3, r3, sl
 800d626:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d62a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	f040 81a7 	bne.w	800d982 <_svfprintf_r+0x85a>
 800d634:	f118 0f03 	cmn.w	r8, #3
 800d638:	db02      	blt.n	800d640 <_svfprintf_r+0x518>
 800d63a:	4546      	cmp	r6, r8
 800d63c:	f280 81c9 	bge.w	800d9d2 <_svfprintf_r+0x8aa>
 800d640:	9b04      	ldr	r3, [sp, #16]
 800d642:	3b02      	subs	r3, #2
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	9904      	ldr	r1, [sp, #16]
 800d648:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800d64c:	f021 0120 	bic.w	r1, r1, #32
 800d650:	2941      	cmp	r1, #65	; 0x41
 800d652:	bf08      	it	eq
 800d654:	320f      	addeq	r2, #15
 800d656:	f108 33ff 	add.w	r3, r8, #4294967295
 800d65a:	bf06      	itte	eq
 800d65c:	b2d2      	uxtbeq	r2, r2
 800d65e:	2101      	moveq	r1, #1
 800d660:	2100      	movne	r1, #0
 800d662:	2b00      	cmp	r3, #0
 800d664:	9318      	str	r3, [sp, #96]	; 0x60
 800d666:	bfb8      	it	lt
 800d668:	f1c8 0301 	rsblt	r3, r8, #1
 800d66c:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800d670:	bfb4      	ite	lt
 800d672:	222d      	movlt	r2, #45	; 0x2d
 800d674:	222b      	movge	r2, #43	; 0x2b
 800d676:	2b09      	cmp	r3, #9
 800d678:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800d67c:	f340 8198 	ble.w	800d9b0 <_svfprintf_r+0x888>
 800d680:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800d684:	200a      	movs	r0, #10
 800d686:	4611      	mov	r1, r2
 800d688:	fb93 f6f0 	sdiv	r6, r3, r0
 800d68c:	fb00 3016 	mls	r0, r0, r6, r3
 800d690:	3030      	adds	r0, #48	; 0x30
 800d692:	f801 0c01 	strb.w	r0, [r1, #-1]
 800d696:	4618      	mov	r0, r3
 800d698:	2863      	cmp	r0, #99	; 0x63
 800d69a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d69e:	4633      	mov	r3, r6
 800d6a0:	dcf0      	bgt.n	800d684 <_svfprintf_r+0x55c>
 800d6a2:	3330      	adds	r3, #48	; 0x30
 800d6a4:	1e88      	subs	r0, r1, #2
 800d6a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6aa:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 800d6ae:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	42b3      	cmp	r3, r6
 800d6b6:	f0c0 8176 	bcc.w	800d9a6 <_svfprintf_r+0x87e>
 800d6ba:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 800d6be:	1a52      	subs	r2, r2, r1
 800d6c0:	42b0      	cmp	r0, r6
 800d6c2:	bf88      	it	hi
 800d6c4:	2200      	movhi	r2, #0
 800d6c6:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 800d6ca:	441a      	add	r2, r3
 800d6cc:	ab1a      	add	r3, sp, #104	; 0x68
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	9a03      	ldr	r2, [sp, #12]
 800d6d2:	9311      	str	r3, [sp, #68]	; 0x44
 800d6d4:	2a01      	cmp	r2, #1
 800d6d6:	eb03 0602 	add.w	r6, r3, r2
 800d6da:	dc01      	bgt.n	800d6e0 <_svfprintf_r+0x5b8>
 800d6dc:	07e8      	lsls	r0, r5, #31
 800d6de:	d501      	bpl.n	800d6e4 <_svfprintf_r+0x5bc>
 800d6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e2:	441e      	add	r6, r3
 800d6e4:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800d6e8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800d6ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800d6f4:	4698      	mov	r8, r3
 800d6f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6f8:	b113      	cbz	r3, 800d700 <_svfprintf_r+0x5d8>
 800d6fa:	232d      	movs	r3, #45	; 0x2d
 800d6fc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800d700:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d702:	f04f 0900 	mov.w	r9, #0
 800d706:	45b1      	cmp	r9, r6
 800d708:	464b      	mov	r3, r9
 800d70a:	bfb8      	it	lt
 800d70c:	4633      	movlt	r3, r6
 800d70e:	930d      	str	r3, [sp, #52]	; 0x34
 800d710:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800d714:	b113      	cbz	r3, 800d71c <_svfprintf_r+0x5f4>
 800d716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d718:	3301      	adds	r3, #1
 800d71a:	930d      	str	r3, [sp, #52]	; 0x34
 800d71c:	f015 0302 	ands.w	r3, r5, #2
 800d720:	9313      	str	r3, [sp, #76]	; 0x4c
 800d722:	bf1e      	ittt	ne
 800d724:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800d726:	3302      	addne	r3, #2
 800d728:	930d      	strne	r3, [sp, #52]	; 0x34
 800d72a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800d72e:	9314      	str	r3, [sp, #80]	; 0x50
 800d730:	d120      	bne.n	800d774 <_svfprintf_r+0x64c>
 800d732:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d736:	1a9b      	subs	r3, r3, r2
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dd1b      	ble.n	800d774 <_svfprintf_r+0x64c>
 800d73c:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800d740:	494c      	ldr	r1, [pc, #304]	; (800d874 <_svfprintf_r+0x74c>)
 800d742:	6021      	str	r1, [r4, #0]
 800d744:	2b10      	cmp	r3, #16
 800d746:	f102 0201 	add.w	r2, r2, #1
 800d74a:	f104 0008 	add.w	r0, r4, #8
 800d74e:	f300 82f7 	bgt.w	800dd40 <_svfprintf_r+0xc18>
 800d752:	eb0c 0103 	add.w	r1, ip, r3
 800d756:	2a07      	cmp	r2, #7
 800d758:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d75c:	6063      	str	r3, [r4, #4]
 800d75e:	f340 8304 	ble.w	800dd6a <_svfprintf_r+0xc42>
 800d762:	aa1e      	add	r2, sp, #120	; 0x78
 800d764:	4659      	mov	r1, fp
 800d766:	4638      	mov	r0, r7
 800d768:	f002 f9fa 	bl	800fb60 <__ssprint_r>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f040 8646 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800d772:	ac21      	add	r4, sp, #132	; 0x84
 800d774:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800d778:	b173      	cbz	r3, 800d798 <_svfprintf_r+0x670>
 800d77a:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	2301      	movs	r3, #1
 800d782:	6063      	str	r3, [r4, #4]
 800d784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d786:	3301      	adds	r3, #1
 800d788:	9320      	str	r3, [sp, #128]	; 0x80
 800d78a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d78c:	3301      	adds	r3, #1
 800d78e:	2b07      	cmp	r3, #7
 800d790:	931f      	str	r3, [sp, #124]	; 0x7c
 800d792:	f300 82ec 	bgt.w	800dd6e <_svfprintf_r+0xc46>
 800d796:	3408      	adds	r4, #8
 800d798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d79a:	b16b      	cbz	r3, 800d7b8 <_svfprintf_r+0x690>
 800d79c:	ab17      	add	r3, sp, #92	; 0x5c
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	6063      	str	r3, [r4, #4]
 800d7a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d7a6:	3302      	adds	r3, #2
 800d7a8:	9320      	str	r3, [sp, #128]	; 0x80
 800d7aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	2b07      	cmp	r3, #7
 800d7b0:	931f      	str	r3, [sp, #124]	; 0x7c
 800d7b2:	f300 82e6 	bgt.w	800dd82 <_svfprintf_r+0xc5a>
 800d7b6:	3408      	adds	r4, #8
 800d7b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7ba:	2b80      	cmp	r3, #128	; 0x80
 800d7bc:	d120      	bne.n	800d800 <_svfprintf_r+0x6d8>
 800d7be:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800d7c2:	1a9b      	subs	r3, r3, r2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dd1b      	ble.n	800d800 <_svfprintf_r+0x6d8>
 800d7c8:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800d7cc:	492a      	ldr	r1, [pc, #168]	; (800d878 <_svfprintf_r+0x750>)
 800d7ce:	6021      	str	r1, [r4, #0]
 800d7d0:	2b10      	cmp	r3, #16
 800d7d2:	f102 0201 	add.w	r2, r2, #1
 800d7d6:	f104 0008 	add.w	r0, r4, #8
 800d7da:	f300 82dc 	bgt.w	800dd96 <_svfprintf_r+0xc6e>
 800d7de:	eb0c 0103 	add.w	r1, ip, r3
 800d7e2:	2a07      	cmp	r2, #7
 800d7e4:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800d7e8:	6063      	str	r3, [r4, #4]
 800d7ea:	f340 82e9 	ble.w	800ddc0 <_svfprintf_r+0xc98>
 800d7ee:	aa1e      	add	r2, sp, #120	; 0x78
 800d7f0:	4659      	mov	r1, fp
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f002 f9b4 	bl	800fb60 <__ssprint_r>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f040 8600 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800d7fe:	ac21      	add	r4, sp, #132	; 0x84
 800d800:	eba9 0906 	sub.w	r9, r9, r6
 800d804:	f1b9 0f00 	cmp.w	r9, #0
 800d808:	dd1c      	ble.n	800d844 <_svfprintf_r+0x71c>
 800d80a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800d80e:	481a      	ldr	r0, [pc, #104]	; (800d878 <_svfprintf_r+0x750>)
 800d810:	6020      	str	r0, [r4, #0]
 800d812:	f1b9 0f10 	cmp.w	r9, #16
 800d816:	f102 0201 	add.w	r2, r2, #1
 800d81a:	f104 0108 	add.w	r1, r4, #8
 800d81e:	f300 82d1 	bgt.w	800ddc4 <_svfprintf_r+0xc9c>
 800d822:	444b      	add	r3, r9
 800d824:	2a07      	cmp	r2, #7
 800d826:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800d82a:	f8c4 9004 	str.w	r9, [r4, #4]
 800d82e:	f340 82dd 	ble.w	800ddec <_svfprintf_r+0xcc4>
 800d832:	aa1e      	add	r2, sp, #120	; 0x78
 800d834:	4659      	mov	r1, fp
 800d836:	4638      	mov	r0, r7
 800d838:	f002 f992 	bl	800fb60 <__ssprint_r>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	f040 85de 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800d842:	ac21      	add	r4, sp, #132	; 0x84
 800d844:	05e9      	lsls	r1, r5, #23
 800d846:	9820      	ldr	r0, [sp, #128]	; 0x80
 800d848:	f100 82d6 	bmi.w	800ddf8 <_svfprintf_r+0xcd0>
 800d84c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d84e:	3301      	adds	r3, #1
 800d850:	4430      	add	r0, r6
 800d852:	2b07      	cmp	r3, #7
 800d854:	e9c4 a600 	strd	sl, r6, [r4]
 800d858:	9020      	str	r0, [sp, #128]	; 0x80
 800d85a:	931f      	str	r3, [sp, #124]	; 0x7c
 800d85c:	f300 8310 	bgt.w	800de80 <_svfprintf_r+0xd58>
 800d860:	3408      	adds	r4, #8
 800d862:	076b      	lsls	r3, r5, #29
 800d864:	f100 85ac 	bmi.w	800e3c0 <_svfprintf_r+0x1298>
 800d868:	e008      	b.n	800d87c <_svfprintf_r+0x754>
 800d86a:	bf00      	nop
 800d86c:	08011269 	.word	0x08011269
 800d870:	0801127a 	.word	0x0801127a
 800d874:	08011608 	.word	0x08011608
 800d878:	08011618 	.word	0x08011618
 800d87c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800d880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d882:	428a      	cmp	r2, r1
 800d884:	bfac      	ite	ge
 800d886:	189b      	addge	r3, r3, r2
 800d888:	185b      	addlt	r3, r3, r1
 800d88a:	930a      	str	r3, [sp, #40]	; 0x28
 800d88c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d88e:	b13b      	cbz	r3, 800d8a0 <_svfprintf_r+0x778>
 800d890:	aa1e      	add	r2, sp, #120	; 0x78
 800d892:	4659      	mov	r1, fp
 800d894:	4638      	mov	r0, r7
 800d896:	f002 f963 	bl	800fb60 <__ssprint_r>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 85af 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d8a4:	9b02      	ldr	r3, [sp, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 85c6 	bne.w	800e438 <_svfprintf_r+0x1310>
 800d8ac:	ac21      	add	r4, sp, #132	; 0x84
 800d8ae:	e0e3      	b.n	800da78 <_svfprintf_r+0x950>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9302      	str	r3, [sp, #8]
 800d8b4:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800d8b8:	e64a      	b.n	800d550 <_svfprintf_r+0x428>
 800d8ba:	9002      	str	r0, [sp, #8]
 800d8bc:	e648      	b.n	800d550 <_svfprintf_r+0x428>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9302      	str	r3, [sp, #8]
 800d8c2:	2606      	movs	r6, #6
 800d8c4:	e644      	b.n	800d550 <_svfprintf_r+0x428>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9302      	str	r3, [sp, #8]
 800d8ca:	e641      	b.n	800d550 <_svfprintf_r+0x428>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	eeb0 9b48 	vmov.f64	d9, d8
 800d8d2:	e648      	b.n	800d566 <_svfprintf_r+0x43e>
 800d8d4:	f800 ec01 	strb.w	lr, [r0, #-1]
 800d8d8:	e694      	b.n	800d604 <_svfprintf_r+0x4dc>
 800d8da:	f802 eb01 	strb.w	lr, [r2], #1
 800d8de:	ebac 0102 	sub.w	r1, ip, r2
 800d8e2:	2900      	cmp	r1, #0
 800d8e4:	daf9      	bge.n	800d8da <_svfprintf_r+0x7b2>
 800d8e6:	1c42      	adds	r2, r0, #1
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	bfb8      	it	lt
 800d8ec:	2200      	movlt	r2, #0
 800d8ee:	4413      	add	r3, r2
 800d8f0:	e697      	b.n	800d622 <_svfprintf_r+0x4fa>
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	eb03 0c00 	add.w	ip, r3, r0
 800d8f8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800d8fc:	e7ef      	b.n	800d8de <_svfprintf_r+0x7b6>
 800d8fe:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d902:	d006      	beq.n	800d912 <_svfprintf_r+0x7ea>
 800d904:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 800d908:	d118      	bne.n	800d93c <_svfprintf_r+0x814>
 800d90a:	f106 0801 	add.w	r8, r6, #1
 800d90e:	2102      	movs	r1, #2
 800d910:	e001      	b.n	800d916 <_svfprintf_r+0x7ee>
 800d912:	46b0      	mov	r8, r6
 800d914:	2103      	movs	r1, #3
 800d916:	ab1c      	add	r3, sp, #112	; 0x70
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	ab19      	add	r3, sp, #100	; 0x64
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	4642      	mov	r2, r8
 800d920:	ab18      	add	r3, sp, #96	; 0x60
 800d922:	4638      	mov	r0, r7
 800d924:	eeb0 0b49 	vmov.f64	d0, d9
 800d928:	f7fc f806 	bl	8009938 <_dtoa_r>
 800d92c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d930:	4682      	mov	sl, r0
 800d932:	d105      	bne.n	800d940 <_svfprintf_r+0x818>
 800d934:	07eb      	lsls	r3, r5, #31
 800d936:	d403      	bmi.n	800d940 <_svfprintf_r+0x818>
 800d938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d93a:	e672      	b.n	800d622 <_svfprintf_r+0x4fa>
 800d93c:	46b0      	mov	r8, r6
 800d93e:	e7e6      	b.n	800d90e <_svfprintf_r+0x7e6>
 800d940:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d944:	eb0a 0308 	add.w	r3, sl, r8
 800d948:	d10d      	bne.n	800d966 <_svfprintf_r+0x83e>
 800d94a:	f89a 2000 	ldrb.w	r2, [sl]
 800d94e:	2a30      	cmp	r2, #48	; 0x30
 800d950:	d107      	bne.n	800d962 <_svfprintf_r+0x83a>
 800d952:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95a:	bf1c      	itt	ne
 800d95c:	f1c8 0201 	rsbne	r2, r8, #1
 800d960:	9218      	strne	r2, [sp, #96]	; 0x60
 800d962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d964:	4413      	add	r3, r2
 800d966:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96e:	bf08      	it	eq
 800d970:	931c      	streq	r3, [sp, #112]	; 0x70
 800d972:	2130      	movs	r1, #48	; 0x30
 800d974:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d976:	4293      	cmp	r3, r2
 800d978:	d9de      	bls.n	800d938 <_svfprintf_r+0x810>
 800d97a:	1c50      	adds	r0, r2, #1
 800d97c:	901c      	str	r0, [sp, #112]	; 0x70
 800d97e:	7011      	strb	r1, [r2, #0]
 800d980:	e7f8      	b.n	800d974 <_svfprintf_r+0x84c>
 800d982:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800d986:	f47f ae5e 	bne.w	800d646 <_svfprintf_r+0x51e>
 800d98a:	f005 0301 	and.w	r3, r5, #1
 800d98e:	f1b8 0f00 	cmp.w	r8, #0
 800d992:	ea43 0306 	orr.w	r3, r3, r6
 800d996:	dd18      	ble.n	800d9ca <_svfprintf_r+0x8a2>
 800d998:	b383      	cbz	r3, 800d9fc <_svfprintf_r+0x8d4>
 800d99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d99c:	4443      	add	r3, r8
 800d99e:	441e      	add	r6, r3
 800d9a0:	2366      	movs	r3, #102	; 0x66
 800d9a2:	9304      	str	r3, [sp, #16]
 800d9a4:	e02f      	b.n	800da06 <_svfprintf_r+0x8de>
 800d9a6:	f813 cb01 	ldrb.w	ip, [r3], #1
 800d9aa:	f802 cb01 	strb.w	ip, [r2], #1
 800d9ae:	e681      	b.n	800d6b4 <_svfprintf_r+0x58c>
 800d9b0:	b941      	cbnz	r1, 800d9c4 <_svfprintf_r+0x89c>
 800d9b2:	2230      	movs	r2, #48	; 0x30
 800d9b4:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800d9b8:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800d9bc:	3330      	adds	r3, #48	; 0x30
 800d9be:	f802 3b01 	strb.w	r3, [r2], #1
 800d9c2:	e683      	b.n	800d6cc <_svfprintf_r+0x5a4>
 800d9c4:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800d9c8:	e7f8      	b.n	800d9bc <_svfprintf_r+0x894>
 800d9ca:	b1cb      	cbz	r3, 800da00 <_svfprintf_r+0x8d8>
 800d9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	e7e5      	b.n	800d99e <_svfprintf_r+0x876>
 800d9d2:	9b03      	ldr	r3, [sp, #12]
 800d9d4:	4598      	cmp	r8, r3
 800d9d6:	db06      	blt.n	800d9e6 <_svfprintf_r+0x8be>
 800d9d8:	07e9      	lsls	r1, r5, #31
 800d9da:	d52a      	bpl.n	800da32 <_svfprintf_r+0x90a>
 800d9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9de:	eb08 0603 	add.w	r6, r8, r3
 800d9e2:	2367      	movs	r3, #103	; 0x67
 800d9e4:	e7dd      	b.n	800d9a2 <_svfprintf_r+0x87a>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9ea:	f1b8 0f00 	cmp.w	r8, #0
 800d9ee:	eb03 0602 	add.w	r6, r3, r2
 800d9f2:	dcf6      	bgt.n	800d9e2 <_svfprintf_r+0x8ba>
 800d9f4:	f1c8 0301 	rsb	r3, r8, #1
 800d9f8:	441e      	add	r6, r3
 800d9fa:	e7f2      	b.n	800d9e2 <_svfprintf_r+0x8ba>
 800d9fc:	4646      	mov	r6, r8
 800d9fe:	e7cf      	b.n	800d9a0 <_svfprintf_r+0x878>
 800da00:	2366      	movs	r3, #102	; 0x66
 800da02:	9304      	str	r3, [sp, #16]
 800da04:	2601      	movs	r6, #1
 800da06:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 800da0a:	9307      	str	r3, [sp, #28]
 800da0c:	d025      	beq.n	800da5a <_svfprintf_r+0x932>
 800da0e:	2300      	movs	r3, #0
 800da10:	f1b8 0f00 	cmp.w	r8, #0
 800da14:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800da18:	f77f ae6d 	ble.w	800d6f6 <_svfprintf_r+0x5ce>
 800da1c:	9b08      	ldr	r3, [sp, #32]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2bff      	cmp	r3, #255	; 0xff
 800da22:	d108      	bne.n	800da36 <_svfprintf_r+0x90e>
 800da24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da28:	4413      	add	r3, r2
 800da2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da2c:	fb02 6603 	mla	r6, r2, r3, r6
 800da30:	e661      	b.n	800d6f6 <_svfprintf_r+0x5ce>
 800da32:	4646      	mov	r6, r8
 800da34:	e7d5      	b.n	800d9e2 <_svfprintf_r+0x8ba>
 800da36:	4543      	cmp	r3, r8
 800da38:	daf4      	bge.n	800da24 <_svfprintf_r+0x8fc>
 800da3a:	eba8 0803 	sub.w	r8, r8, r3
 800da3e:	9b08      	ldr	r3, [sp, #32]
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	b133      	cbz	r3, 800da52 <_svfprintf_r+0x92a>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	3301      	adds	r3, #1
 800da48:	9307      	str	r3, [sp, #28]
 800da4a:	9b08      	ldr	r3, [sp, #32]
 800da4c:	3301      	adds	r3, #1
 800da4e:	9308      	str	r3, [sp, #32]
 800da50:	e7e4      	b.n	800da1c <_svfprintf_r+0x8f4>
 800da52:	9b06      	ldr	r3, [sp, #24]
 800da54:	3301      	adds	r3, #1
 800da56:	9306      	str	r3, [sp, #24]
 800da58:	e7e0      	b.n	800da1c <_svfprintf_r+0x8f4>
 800da5a:	9b07      	ldr	r3, [sp, #28]
 800da5c:	9306      	str	r3, [sp, #24]
 800da5e:	e64a      	b.n	800d6f6 <_svfprintf_r+0x5ce>
 800da60:	f108 0304 	add.w	r3, r8, #4
 800da64:	06aa      	lsls	r2, r5, #26
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	d50c      	bpl.n	800da84 <_svfprintf_r+0x95c>
 800da6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da6c:	f8d8 3000 	ldr.w	r3, [r8]
 800da70:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da72:	17d2      	asrs	r2, r2, #31
 800da74:	e9c3 1200 	strd	r1, r2, [r3]
 800da78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800da7c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800da80:	f7ff bb8f 	b.w	800d1a2 <_svfprintf_r+0x7a>
 800da84:	06eb      	lsls	r3, r5, #27
 800da86:	d504      	bpl.n	800da92 <_svfprintf_r+0x96a>
 800da88:	f8d8 3000 	ldr.w	r3, [r8]
 800da8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e7f2      	b.n	800da78 <_svfprintf_r+0x950>
 800da92:	066e      	lsls	r6, r5, #25
 800da94:	d504      	bpl.n	800daa0 <_svfprintf_r+0x978>
 800da96:	f8d8 3000 	ldr.w	r3, [r8]
 800da9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da9c:	801a      	strh	r2, [r3, #0]
 800da9e:	e7eb      	b.n	800da78 <_svfprintf_r+0x950>
 800daa0:	05ad      	lsls	r5, r5, #22
 800daa2:	d5f1      	bpl.n	800da88 <_svfprintf_r+0x960>
 800daa4:	f8d8 3000 	ldr.w	r3, [r8]
 800daa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	e7e4      	b.n	800da78 <_svfprintf_r+0x950>
 800daae:	f045 0510 	orr.w	r5, r5, #16
 800dab2:	f015 0320 	ands.w	r3, r5, #32
 800dab6:	d020      	beq.n	800dafa <_svfprintf_r+0x9d2>
 800dab8:	f108 0307 	add.w	r3, r8, #7
 800dabc:	f023 0307 	bic.w	r3, r3, #7
 800dac0:	461a      	mov	r2, r3
 800dac2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dac6:	f852 8b08 	ldr.w	r8, [r2], #8
 800daca:	9205      	str	r2, [sp, #20]
 800dacc:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800dad0:	2300      	movs	r3, #0
 800dad2:	2200      	movs	r2, #0
 800dad4:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800dad8:	1c72      	adds	r2, r6, #1
 800dada:	f000 84c3 	beq.w	800e464 <_svfprintf_r+0x133c>
 800dade:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800dae2:	9202      	str	r2, [sp, #8]
 800dae4:	ea58 0209 	orrs.w	r2, r8, r9
 800dae8:	f040 84c1 	bne.w	800e46e <_svfprintf_r+0x1346>
 800daec:	2e00      	cmp	r6, #0
 800daee:	f000 810d 	beq.w	800dd0c <_svfprintf_r+0xbe4>
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	f040 84be 	bne.w	800e474 <_svfprintf_r+0x134c>
 800daf8:	e0ad      	b.n	800dc56 <_svfprintf_r+0xb2e>
 800dafa:	4642      	mov	r2, r8
 800dafc:	f015 0910 	ands.w	r9, r5, #16
 800db00:	f852 8b04 	ldr.w	r8, [r2], #4
 800db04:	9205      	str	r2, [sp, #20]
 800db06:	d001      	beq.n	800db0c <_svfprintf_r+0x9e4>
 800db08:	4699      	mov	r9, r3
 800db0a:	e7df      	b.n	800dacc <_svfprintf_r+0x9a4>
 800db0c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800db10:	d002      	beq.n	800db18 <_svfprintf_r+0x9f0>
 800db12:	fa1f f888 	uxth.w	r8, r8
 800db16:	e7d9      	b.n	800dacc <_svfprintf_r+0x9a4>
 800db18:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800db1c:	d0d6      	beq.n	800dacc <_svfprintf_r+0x9a4>
 800db1e:	fa5f f888 	uxtb.w	r8, r8
 800db22:	e7f1      	b.n	800db08 <_svfprintf_r+0x9e0>
 800db24:	4643      	mov	r3, r8
 800db26:	2278      	movs	r2, #120	; 0x78
 800db28:	f853 8b04 	ldr.w	r8, [r3], #4
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	2330      	movs	r3, #48	; 0x30
 800db30:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800db34:	4bae      	ldr	r3, [pc, #696]	; (800ddf0 <_svfprintf_r+0xcc8>)
 800db36:	9312      	str	r3, [sp, #72]	; 0x48
 800db38:	f04f 0900 	mov.w	r9, #0
 800db3c:	f045 0502 	orr.w	r5, r5, #2
 800db40:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 800db44:	2302      	movs	r3, #2
 800db46:	9204      	str	r2, [sp, #16]
 800db48:	e7c3      	b.n	800dad2 <_svfprintf_r+0x9aa>
 800db4a:	4643      	mov	r3, r8
 800db4c:	1c70      	adds	r0, r6, #1
 800db4e:	f853 ab04 	ldr.w	sl, [r3], #4
 800db52:	9305      	str	r3, [sp, #20]
 800db54:	f04f 0800 	mov.w	r8, #0
 800db58:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 800db5c:	d010      	beq.n	800db80 <_svfprintf_r+0xa58>
 800db5e:	4632      	mov	r2, r6
 800db60:	4641      	mov	r1, r8
 800db62:	4650      	mov	r0, sl
 800db64:	f7f2 fb74 	bl	8000250 <memchr>
 800db68:	9002      	str	r0, [sp, #8]
 800db6a:	2800      	cmp	r0, #0
 800db6c:	f000 80e5 	beq.w	800dd3a <_svfprintf_r+0xc12>
 800db70:	e9cd 8806 	strd	r8, r8, [sp, #24]
 800db74:	eba0 060a 	sub.w	r6, r0, sl
 800db78:	f8cd 8008 	str.w	r8, [sp, #8]
 800db7c:	46c1      	mov	r9, r8
 800db7e:	e5c2      	b.n	800d706 <_svfprintf_r+0x5de>
 800db80:	4650      	mov	r0, sl
 800db82:	f7f2 fb5d 	bl	8000240 <strlen>
 800db86:	46c1      	mov	r9, r8
 800db88:	4606      	mov	r6, r0
 800db8a:	f8cd 8008 	str.w	r8, [sp, #8]
 800db8e:	464b      	mov	r3, r9
 800db90:	e48a      	b.n	800d4a8 <_svfprintf_r+0x380>
 800db92:	f045 0510 	orr.w	r5, r5, #16
 800db96:	f015 0320 	ands.w	r3, r5, #32
 800db9a:	d00b      	beq.n	800dbb4 <_svfprintf_r+0xa8c>
 800db9c:	f108 0307 	add.w	r3, r8, #7
 800dba0:	f023 0307 	bic.w	r3, r3, #7
 800dba4:	461a      	mov	r2, r3
 800dba6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dbaa:	f852 8b08 	ldr.w	r8, [r2], #8
 800dbae:	9205      	str	r2, [sp, #20]
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e78e      	b.n	800dad2 <_svfprintf_r+0x9aa>
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	f015 0910 	ands.w	r9, r5, #16
 800dbba:	f852 8b04 	ldr.w	r8, [r2], #4
 800dbbe:	9205      	str	r2, [sp, #20]
 800dbc0:	d001      	beq.n	800dbc6 <_svfprintf_r+0xa9e>
 800dbc2:	4699      	mov	r9, r3
 800dbc4:	e7f4      	b.n	800dbb0 <_svfprintf_r+0xa88>
 800dbc6:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800dbca:	d002      	beq.n	800dbd2 <_svfprintf_r+0xaaa>
 800dbcc:	fa1f f888 	uxth.w	r8, r8
 800dbd0:	e7ee      	b.n	800dbb0 <_svfprintf_r+0xa88>
 800dbd2:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800dbd6:	d0eb      	beq.n	800dbb0 <_svfprintf_r+0xa88>
 800dbd8:	fa5f f888 	uxtb.w	r8, r8
 800dbdc:	e7f1      	b.n	800dbc2 <_svfprintf_r+0xa9a>
 800dbde:	4b85      	ldr	r3, [pc, #532]	; (800ddf4 <_svfprintf_r+0xccc>)
 800dbe0:	9312      	str	r3, [sp, #72]	; 0x48
 800dbe2:	f015 0320 	ands.w	r3, r5, #32
 800dbe6:	d01c      	beq.n	800dc22 <_svfprintf_r+0xafa>
 800dbe8:	f108 0307 	add.w	r3, r8, #7
 800dbec:	f023 0307 	bic.w	r3, r3, #7
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800dbf6:	f852 8b08 	ldr.w	r8, [r2], #8
 800dbfa:	9205      	str	r2, [sp, #20]
 800dbfc:	07e9      	lsls	r1, r5, #31
 800dbfe:	d50a      	bpl.n	800dc16 <_svfprintf_r+0xaee>
 800dc00:	ea58 0309 	orrs.w	r3, r8, r9
 800dc04:	d007      	beq.n	800dc16 <_svfprintf_r+0xaee>
 800dc06:	2330      	movs	r3, #48	; 0x30
 800dc08:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800dc12:	f045 0502 	orr.w	r5, r5, #2
 800dc16:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	e759      	b.n	800dad2 <_svfprintf_r+0x9aa>
 800dc1e:	4b74      	ldr	r3, [pc, #464]	; (800ddf0 <_svfprintf_r+0xcc8>)
 800dc20:	e7de      	b.n	800dbe0 <_svfprintf_r+0xab8>
 800dc22:	4642      	mov	r2, r8
 800dc24:	f015 0910 	ands.w	r9, r5, #16
 800dc28:	f852 8b04 	ldr.w	r8, [r2], #4
 800dc2c:	9205      	str	r2, [sp, #20]
 800dc2e:	d001      	beq.n	800dc34 <_svfprintf_r+0xb0c>
 800dc30:	4699      	mov	r9, r3
 800dc32:	e7e3      	b.n	800dbfc <_svfprintf_r+0xad4>
 800dc34:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800dc38:	d002      	beq.n	800dc40 <_svfprintf_r+0xb18>
 800dc3a:	fa1f f888 	uxth.w	r8, r8
 800dc3e:	e7dd      	b.n	800dbfc <_svfprintf_r+0xad4>
 800dc40:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800dc44:	d0da      	beq.n	800dbfc <_svfprintf_r+0xad4>
 800dc46:	fa5f f888 	uxtb.w	r8, r8
 800dc4a:	e7f1      	b.n	800dc30 <_svfprintf_r+0xb08>
 800dc4c:	f1b8 0f0a 	cmp.w	r8, #10
 800dc50:	f179 0300 	sbcs.w	r3, r9, #0
 800dc54:	d207      	bcs.n	800dc66 <_svfprintf_r+0xb3e>
 800dc56:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800dc5a:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 800dc5e:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 800dc62:	f000 bc25 	b.w	800e4b0 <_svfprintf_r+0x1388>
 800dc66:	2300      	movs	r3, #0
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc70:	ad4a      	add	r5, sp, #296	; 0x128
 800dc72:	9306      	str	r3, [sp, #24]
 800dc74:	220a      	movs	r2, #10
 800dc76:	2300      	movs	r3, #0
 800dc78:	4640      	mov	r0, r8
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	f7f2 fcf4 	bl	8000668 <__aeabi_uldivmod>
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	9b06      	ldr	r3, [sp, #24]
 800dc88:	3230      	adds	r2, #48	; 0x30
 800dc8a:	f105 3aff 	add.w	sl, r5, #4294967295
 800dc8e:	f805 2c01 	strb.w	r2, [r5, #-1]
 800dc92:	b1db      	cbz	r3, 800dccc <_svfprintf_r+0xba4>
 800dc94:	9b08      	ldr	r3, [sp, #32]
 800dc96:	9a03      	ldr	r2, [sp, #12]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d116      	bne.n	800dccc <_svfprintf_r+0xba4>
 800dc9e:	2aff      	cmp	r2, #255	; 0xff
 800dca0:	d014      	beq.n	800dccc <_svfprintf_r+0xba4>
 800dca2:	f1b8 0f0a 	cmp.w	r8, #10
 800dca6:	f179 0300 	sbcs.w	r3, r9, #0
 800dcaa:	d30f      	bcc.n	800dccc <_svfprintf_r+0xba4>
 800dcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcae:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dcb0:	ebaa 0a03 	sub.w	sl, sl, r3
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4650      	mov	r0, sl
 800dcb8:	f7fe faa3 	bl	800c202 <strncpy>
 800dcbc:	9b08      	ldr	r3, [sp, #32]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	b11b      	cbz	r3, 800dcca <_svfprintf_r+0xba2>
 800dcc2:	9b08      	ldr	r3, [sp, #32]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	9308      	str	r3, [sp, #32]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9303      	str	r3, [sp, #12]
 800dccc:	2300      	movs	r3, #0
 800dcce:	220a      	movs	r2, #10
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	f7f2 fcc8 	bl	8000668 <__aeabi_uldivmod>
 800dcd8:	f1b8 0f0a 	cmp.w	r8, #10
 800dcdc:	f179 0300 	sbcs.w	r3, r9, #0
 800dce0:	f0c0 83e6 	bcc.w	800e4b0 <_svfprintf_r+0x1388>
 800dce4:	4680      	mov	r8, r0
 800dce6:	4689      	mov	r9, r1
 800dce8:	4655      	mov	r5, sl
 800dcea:	e7c3      	b.n	800dc74 <_svfprintf_r+0xb4c>
 800dcec:	f008 030f 	and.w	r3, r8, #15
 800dcf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dcf2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800dcf6:	5cd3      	ldrb	r3, [r2, r3]
 800dcf8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800dcfc:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 800dd00:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800dd04:	ea58 0309 	orrs.w	r3, r8, r9
 800dd08:	d1f0      	bne.n	800dcec <_svfprintf_r+0xbc4>
 800dd0a:	e3d1      	b.n	800e4b0 <_svfprintf_r+0x1388>
 800dd0c:	b92b      	cbnz	r3, 800dd1a <_svfprintf_r+0xbf2>
 800dd0e:	07e8      	lsls	r0, r5, #31
 800dd10:	d503      	bpl.n	800dd1a <_svfprintf_r+0xbf2>
 800dd12:	2330      	movs	r3, #48	; 0x30
 800dd14:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 800dd18:	e7a1      	b.n	800dc5e <_svfprintf_r+0xb36>
 800dd1a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800dd1e:	e3c7      	b.n	800e4b0 <_svfprintf_r+0x1388>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 838e 	beq.w	800e444 <_svfprintf_r+0x131c>
 800dd28:	2000      	movs	r0, #0
 800dd2a:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800dd2e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800dd32:	f8cd 8014 	str.w	r8, [sp, #20]
 800dd36:	f7ff bb4e 	b.w	800d3d6 <_svfprintf_r+0x2ae>
 800dd3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dd3e:	e726      	b.n	800db8e <_svfprintf_r+0xa66>
 800dd40:	2110      	movs	r1, #16
 800dd42:	6061      	str	r1, [r4, #4]
 800dd44:	2a07      	cmp	r2, #7
 800dd46:	4461      	add	r1, ip
 800dd48:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800dd4c:	dd0a      	ble.n	800dd64 <_svfprintf_r+0xc3c>
 800dd4e:	aa1e      	add	r2, sp, #120	; 0x78
 800dd50:	4659      	mov	r1, fp
 800dd52:	4638      	mov	r0, r7
 800dd54:	9315      	str	r3, [sp, #84]	; 0x54
 800dd56:	f001 ff03 	bl	800fb60 <__ssprint_r>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	f040 834f 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dd60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd62:	a821      	add	r0, sp, #132	; 0x84
 800dd64:	3b10      	subs	r3, #16
 800dd66:	4604      	mov	r4, r0
 800dd68:	e4e8      	b.n	800d73c <_svfprintf_r+0x614>
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	e502      	b.n	800d774 <_svfprintf_r+0x64c>
 800dd6e:	aa1e      	add	r2, sp, #120	; 0x78
 800dd70:	4659      	mov	r1, fp
 800dd72:	4638      	mov	r0, r7
 800dd74:	f001 fef4 	bl	800fb60 <__ssprint_r>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	f040 8340 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dd7e:	ac21      	add	r4, sp, #132	; 0x84
 800dd80:	e50a      	b.n	800d798 <_svfprintf_r+0x670>
 800dd82:	aa1e      	add	r2, sp, #120	; 0x78
 800dd84:	4659      	mov	r1, fp
 800dd86:	4638      	mov	r0, r7
 800dd88:	f001 feea 	bl	800fb60 <__ssprint_r>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	f040 8336 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dd92:	ac21      	add	r4, sp, #132	; 0x84
 800dd94:	e510      	b.n	800d7b8 <_svfprintf_r+0x690>
 800dd96:	2110      	movs	r1, #16
 800dd98:	6061      	str	r1, [r4, #4]
 800dd9a:	2a07      	cmp	r2, #7
 800dd9c:	4461      	add	r1, ip
 800dd9e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800dda2:	dd0a      	ble.n	800ddba <_svfprintf_r+0xc92>
 800dda4:	aa1e      	add	r2, sp, #120	; 0x78
 800dda6:	4659      	mov	r1, fp
 800dda8:	4638      	mov	r0, r7
 800ddaa:	9313      	str	r3, [sp, #76]	; 0x4c
 800ddac:	f001 fed8 	bl	800fb60 <__ssprint_r>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	f040 8324 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800ddb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddb8:	a821      	add	r0, sp, #132	; 0x84
 800ddba:	3b10      	subs	r3, #16
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	e503      	b.n	800d7c8 <_svfprintf_r+0x6a0>
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	e51d      	b.n	800d800 <_svfprintf_r+0x6d8>
 800ddc4:	2010      	movs	r0, #16
 800ddc6:	4403      	add	r3, r0
 800ddc8:	2a07      	cmp	r2, #7
 800ddca:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800ddce:	6060      	str	r0, [r4, #4]
 800ddd0:	dd08      	ble.n	800dde4 <_svfprintf_r+0xcbc>
 800ddd2:	aa1e      	add	r2, sp, #120	; 0x78
 800ddd4:	4659      	mov	r1, fp
 800ddd6:	4638      	mov	r0, r7
 800ddd8:	f001 fec2 	bl	800fb60 <__ssprint_r>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	f040 830e 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dde2:	a921      	add	r1, sp, #132	; 0x84
 800dde4:	f1a9 0910 	sub.w	r9, r9, #16
 800dde8:	460c      	mov	r4, r1
 800ddea:	e50e      	b.n	800d80a <_svfprintf_r+0x6e2>
 800ddec:	460c      	mov	r4, r1
 800ddee:	e529      	b.n	800d844 <_svfprintf_r+0x71c>
 800ddf0:	08011269 	.word	0x08011269
 800ddf4:	0801127a 	.word	0x0801127a
 800ddf8:	9b04      	ldr	r3, [sp, #16]
 800ddfa:	2b65      	cmp	r3, #101	; 0x65
 800ddfc:	f340 8252 	ble.w	800e2a4 <_svfprintf_r+0x117c>
 800de00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de08:	d16b      	bne.n	800dee2 <_svfprintf_r+0xdba>
 800de0a:	4b74      	ldr	r3, [pc, #464]	; (800dfdc <_svfprintf_r+0xeb4>)
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	2301      	movs	r3, #1
 800de10:	4418      	add	r0, r3
 800de12:	6063      	str	r3, [r4, #4]
 800de14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de16:	9020      	str	r0, [sp, #128]	; 0x80
 800de18:	3301      	adds	r3, #1
 800de1a:	2b07      	cmp	r3, #7
 800de1c:	931f      	str	r3, [sp, #124]	; 0x7c
 800de1e:	dc39      	bgt.n	800de94 <_svfprintf_r+0xd6c>
 800de20:	3408      	adds	r4, #8
 800de22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de24:	9a03      	ldr	r2, [sp, #12]
 800de26:	4293      	cmp	r3, r2
 800de28:	db02      	blt.n	800de30 <_svfprintf_r+0xd08>
 800de2a:	07ea      	lsls	r2, r5, #31
 800de2c:	f57f ad19 	bpl.w	800d862 <_svfprintf_r+0x73a>
 800de30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de38:	6063      	str	r3, [r4, #4]
 800de3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de3c:	4413      	add	r3, r2
 800de3e:	9320      	str	r3, [sp, #128]	; 0x80
 800de40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de42:	3301      	adds	r3, #1
 800de44:	2b07      	cmp	r3, #7
 800de46:	931f      	str	r3, [sp, #124]	; 0x7c
 800de48:	dc2e      	bgt.n	800dea8 <_svfprintf_r+0xd80>
 800de4a:	3408      	adds	r4, #8
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	1e5e      	subs	r6, r3, #1
 800de50:	2e00      	cmp	r6, #0
 800de52:	f77f ad06 	ble.w	800d862 <_svfprintf_r+0x73a>
 800de56:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800dfe0 <_svfprintf_r+0xeb8>
 800de5a:	f04f 0910 	mov.w	r9, #16
 800de5e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800de62:	2e10      	cmp	r6, #16
 800de64:	f103 0301 	add.w	r3, r3, #1
 800de68:	f104 0108 	add.w	r1, r4, #8
 800de6c:	f8c4 8000 	str.w	r8, [r4]
 800de70:	dc24      	bgt.n	800debc <_svfprintf_r+0xd94>
 800de72:	6066      	str	r6, [r4, #4]
 800de74:	2b07      	cmp	r3, #7
 800de76:	4416      	add	r6, r2
 800de78:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800de7c:	f340 829d 	ble.w	800e3ba <_svfprintf_r+0x1292>
 800de80:	aa1e      	add	r2, sp, #120	; 0x78
 800de82:	4659      	mov	r1, fp
 800de84:	4638      	mov	r0, r7
 800de86:	f001 fe6b 	bl	800fb60 <__ssprint_r>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	f040 82b7 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800de90:	ac21      	add	r4, sp, #132	; 0x84
 800de92:	e4e6      	b.n	800d862 <_svfprintf_r+0x73a>
 800de94:	aa1e      	add	r2, sp, #120	; 0x78
 800de96:	4659      	mov	r1, fp
 800de98:	4638      	mov	r0, r7
 800de9a:	f001 fe61 	bl	800fb60 <__ssprint_r>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f040 82ad 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dea4:	ac21      	add	r4, sp, #132	; 0x84
 800dea6:	e7bc      	b.n	800de22 <_svfprintf_r+0xcfa>
 800dea8:	aa1e      	add	r2, sp, #120	; 0x78
 800deaa:	4659      	mov	r1, fp
 800deac:	4638      	mov	r0, r7
 800deae:	f001 fe57 	bl	800fb60 <__ssprint_r>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f040 82a3 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800deb8:	ac21      	add	r4, sp, #132	; 0x84
 800deba:	e7c7      	b.n	800de4c <_svfprintf_r+0xd24>
 800debc:	3210      	adds	r2, #16
 800debe:	2b07      	cmp	r3, #7
 800dec0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800dec4:	f8c4 9004 	str.w	r9, [r4, #4]
 800dec8:	dd08      	ble.n	800dedc <_svfprintf_r+0xdb4>
 800deca:	aa1e      	add	r2, sp, #120	; 0x78
 800decc:	4659      	mov	r1, fp
 800dece:	4638      	mov	r0, r7
 800ded0:	f001 fe46 	bl	800fb60 <__ssprint_r>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	f040 8292 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800deda:	a921      	add	r1, sp, #132	; 0x84
 800dedc:	3e10      	subs	r6, #16
 800dede:	460c      	mov	r4, r1
 800dee0:	e7bd      	b.n	800de5e <_svfprintf_r+0xd36>
 800dee2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dc7d      	bgt.n	800dfe4 <_svfprintf_r+0xebc>
 800dee8:	4b3c      	ldr	r3, [pc, #240]	; (800dfdc <_svfprintf_r+0xeb4>)
 800deea:	6023      	str	r3, [r4, #0]
 800deec:	2301      	movs	r3, #1
 800deee:	4418      	add	r0, r3
 800def0:	6063      	str	r3, [r4, #4]
 800def2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800def4:	9020      	str	r0, [sp, #128]	; 0x80
 800def6:	3301      	adds	r3, #1
 800def8:	2b07      	cmp	r3, #7
 800defa:	931f      	str	r3, [sp, #124]	; 0x7c
 800defc:	dc47      	bgt.n	800df8e <_svfprintf_r+0xe66>
 800defe:	3408      	adds	r4, #8
 800df00:	9903      	ldr	r1, [sp, #12]
 800df02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df06:	430a      	orrs	r2, r1
 800df08:	f005 0101 	and.w	r1, r5, #1
 800df0c:	430a      	orrs	r2, r1
 800df0e:	f43f aca8 	beq.w	800d862 <_svfprintf_r+0x73a>
 800df12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df14:	6022      	str	r2, [r4, #0]
 800df16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	4413      	add	r3, r2
 800df1c:	9320      	str	r3, [sp, #128]	; 0x80
 800df1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df20:	3301      	adds	r3, #1
 800df22:	2b07      	cmp	r3, #7
 800df24:	931f      	str	r3, [sp, #124]	; 0x7c
 800df26:	dc3c      	bgt.n	800dfa2 <_svfprintf_r+0xe7a>
 800df28:	f104 0308 	add.w	r3, r4, #8
 800df2c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800df2e:	2e00      	cmp	r6, #0
 800df30:	da1c      	bge.n	800df6c <_svfprintf_r+0xe44>
 800df32:	4c2b      	ldr	r4, [pc, #172]	; (800dfe0 <_svfprintf_r+0xeb8>)
 800df34:	4276      	negs	r6, r6
 800df36:	461a      	mov	r2, r3
 800df38:	f04f 0810 	mov.w	r8, #16
 800df3c:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800df40:	2e10      	cmp	r6, #16
 800df42:	f101 0101 	add.w	r1, r1, #1
 800df46:	f103 0308 	add.w	r3, r3, #8
 800df4a:	6014      	str	r4, [r2, #0]
 800df4c:	dc33      	bgt.n	800dfb6 <_svfprintf_r+0xe8e>
 800df4e:	6056      	str	r6, [r2, #4]
 800df50:	2907      	cmp	r1, #7
 800df52:	4406      	add	r6, r0
 800df54:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 800df58:	dd08      	ble.n	800df6c <_svfprintf_r+0xe44>
 800df5a:	aa1e      	add	r2, sp, #120	; 0x78
 800df5c:	4659      	mov	r1, fp
 800df5e:	4638      	mov	r0, r7
 800df60:	f001 fdfe 	bl	800fb60 <__ssprint_r>
 800df64:	2800      	cmp	r0, #0
 800df66:	f040 824a 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800df6a:	ab21      	add	r3, sp, #132	; 0x84
 800df6c:	9a03      	ldr	r2, [sp, #12]
 800df6e:	605a      	str	r2, [r3, #4]
 800df70:	9903      	ldr	r1, [sp, #12]
 800df72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df74:	f8c3 a000 	str.w	sl, [r3]
 800df78:	440a      	add	r2, r1
 800df7a:	9220      	str	r2, [sp, #128]	; 0x80
 800df7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800df7e:	3201      	adds	r2, #1
 800df80:	2a07      	cmp	r2, #7
 800df82:	921f      	str	r2, [sp, #124]	; 0x7c
 800df84:	f73f af7c 	bgt.w	800de80 <_svfprintf_r+0xd58>
 800df88:	f103 0408 	add.w	r4, r3, #8
 800df8c:	e469      	b.n	800d862 <_svfprintf_r+0x73a>
 800df8e:	aa1e      	add	r2, sp, #120	; 0x78
 800df90:	4659      	mov	r1, fp
 800df92:	4638      	mov	r0, r7
 800df94:	f001 fde4 	bl	800fb60 <__ssprint_r>
 800df98:	2800      	cmp	r0, #0
 800df9a:	f040 8230 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800df9e:	ac21      	add	r4, sp, #132	; 0x84
 800dfa0:	e7ae      	b.n	800df00 <_svfprintf_r+0xdd8>
 800dfa2:	aa1e      	add	r2, sp, #120	; 0x78
 800dfa4:	4659      	mov	r1, fp
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f001 fdda 	bl	800fb60 <__ssprint_r>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	f040 8226 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dfb2:	ab21      	add	r3, sp, #132	; 0x84
 800dfb4:	e7ba      	b.n	800df2c <_svfprintf_r+0xe04>
 800dfb6:	3010      	adds	r0, #16
 800dfb8:	2907      	cmp	r1, #7
 800dfba:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800dfbe:	f8c2 8004 	str.w	r8, [r2, #4]
 800dfc2:	dd08      	ble.n	800dfd6 <_svfprintf_r+0xeae>
 800dfc4:	aa1e      	add	r2, sp, #120	; 0x78
 800dfc6:	4659      	mov	r1, fp
 800dfc8:	4638      	mov	r0, r7
 800dfca:	f001 fdc9 	bl	800fb60 <__ssprint_r>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f040 8215 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800dfd4:	ab21      	add	r3, sp, #132	; 0x84
 800dfd6:	3e10      	subs	r6, #16
 800dfd8:	461a      	mov	r2, r3
 800dfda:	e7af      	b.n	800df3c <_svfprintf_r+0xe14>
 800dfdc:	0801128b 	.word	0x0801128b
 800dfe0:	08011618 	.word	0x08011618
 800dfe4:	9b03      	ldr	r3, [sp, #12]
 800dfe6:	4543      	cmp	r3, r8
 800dfe8:	bfa8      	it	ge
 800dfea:	4643      	movge	r3, r8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	4699      	mov	r9, r3
 800dff0:	dd0a      	ble.n	800e008 <_svfprintf_r+0xee0>
 800dff2:	4418      	add	r0, r3
 800dff4:	e9c4 a300 	strd	sl, r3, [r4]
 800dff8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dffa:	9020      	str	r0, [sp, #128]	; 0x80
 800dffc:	3301      	adds	r3, #1
 800dffe:	2b07      	cmp	r3, #7
 800e000:	931f      	str	r3, [sp, #124]	; 0x7c
 800e002:	f300 8094 	bgt.w	800e12e <_svfprintf_r+0x1006>
 800e006:	3408      	adds	r4, #8
 800e008:	f1b9 0f00 	cmp.w	r9, #0
 800e00c:	bfac      	ite	ge
 800e00e:	eba8 0609 	subge.w	r6, r8, r9
 800e012:	4646      	movlt	r6, r8
 800e014:	2e00      	cmp	r6, #0
 800e016:	dd1c      	ble.n	800e052 <_svfprintf_r+0xf2a>
 800e018:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 800e45c <_svfprintf_r+0x1334>
 800e01c:	f8c4 9000 	str.w	r9, [r4]
 800e020:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800e024:	2e10      	cmp	r6, #16
 800e026:	f103 0301 	add.w	r3, r3, #1
 800e02a:	f104 0108 	add.w	r1, r4, #8
 800e02e:	f300 8088 	bgt.w	800e142 <_svfprintf_r+0x101a>
 800e032:	6066      	str	r6, [r4, #4]
 800e034:	2b07      	cmp	r3, #7
 800e036:	4416      	add	r6, r2
 800e038:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800e03c:	f340 8094 	ble.w	800e168 <_svfprintf_r+0x1040>
 800e040:	aa1e      	add	r2, sp, #120	; 0x78
 800e042:	4659      	mov	r1, fp
 800e044:	4638      	mov	r0, r7
 800e046:	f001 fd8b 	bl	800fb60 <__ssprint_r>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	f040 81d7 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e050:	ac21      	add	r4, sp, #132	; 0x84
 800e052:	056b      	lsls	r3, r5, #21
 800e054:	eb0a 0608 	add.w	r6, sl, r8
 800e058:	d50c      	bpl.n	800e074 <_svfprintf_r+0xf4c>
 800e05a:	9b07      	ldr	r3, [sp, #28]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f040 8085 	bne.w	800e16c <_svfprintf_r+0x1044>
 800e062:	9b06      	ldr	r3, [sp, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	f040 8084 	bne.w	800e172 <_svfprintf_r+0x104a>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	4453      	add	r3, sl
 800e06e:	429e      	cmp	r6, r3
 800e070:	bf28      	it	cs
 800e072:	461e      	movcs	r6, r3
 800e074:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e076:	9a03      	ldr	r2, [sp, #12]
 800e078:	4293      	cmp	r3, r2
 800e07a:	db01      	blt.n	800e080 <_svfprintf_r+0xf58>
 800e07c:	07e8      	lsls	r0, r5, #31
 800e07e:	d50e      	bpl.n	800e09e <_svfprintf_r+0xf76>
 800e080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e082:	6023      	str	r3, [r4, #0]
 800e084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e08c:	4413      	add	r3, r2
 800e08e:	9320      	str	r3, [sp, #128]	; 0x80
 800e090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e092:	3301      	adds	r3, #1
 800e094:	2b07      	cmp	r3, #7
 800e096:	931f      	str	r3, [sp, #124]	; 0x7c
 800e098:	f300 80f0 	bgt.w	800e27c <_svfprintf_r+0x1154>
 800e09c:	3408      	adds	r4, #8
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	9903      	ldr	r1, [sp, #12]
 800e0a2:	eb0a 0203 	add.w	r2, sl, r3
 800e0a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e0a8:	1b92      	subs	r2, r2, r6
 800e0aa:	eba1 0803 	sub.w	r8, r1, r3
 800e0ae:	4590      	cmp	r8, r2
 800e0b0:	bfa8      	it	ge
 800e0b2:	4690      	movge	r8, r2
 800e0b4:	f1b8 0f00 	cmp.w	r8, #0
 800e0b8:	dd0b      	ble.n	800e0d2 <_svfprintf_r+0xfaa>
 800e0ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e0bc:	4443      	add	r3, r8
 800e0be:	9320      	str	r3, [sp, #128]	; 0x80
 800e0c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	2b07      	cmp	r3, #7
 800e0c6:	e9c4 6800 	strd	r6, r8, [r4]
 800e0ca:	931f      	str	r3, [sp, #124]	; 0x7c
 800e0cc:	f300 80e0 	bgt.w	800e290 <_svfprintf_r+0x1168>
 800e0d0:	3408      	adds	r4, #8
 800e0d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e0d4:	9b03      	ldr	r3, [sp, #12]
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	eba3 0606 	sub.w	r6, r3, r6
 800e0de:	bfa8      	it	ge
 800e0e0:	eba6 0608 	subge.w	r6, r6, r8
 800e0e4:	2e00      	cmp	r6, #0
 800e0e6:	f77f abbc 	ble.w	800d862 <_svfprintf_r+0x73a>
 800e0ea:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800e45c <_svfprintf_r+0x1334>
 800e0ee:	f04f 0910 	mov.w	r9, #16
 800e0f2:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800e0f6:	2e10      	cmp	r6, #16
 800e0f8:	f103 0301 	add.w	r3, r3, #1
 800e0fc:	f104 0108 	add.w	r1, r4, #8
 800e100:	f8c4 8000 	str.w	r8, [r4]
 800e104:	f77f aeb5 	ble.w	800de72 <_svfprintf_r+0xd4a>
 800e108:	3210      	adds	r2, #16
 800e10a:	2b07      	cmp	r3, #7
 800e10c:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800e110:	f8c4 9004 	str.w	r9, [r4, #4]
 800e114:	dd08      	ble.n	800e128 <_svfprintf_r+0x1000>
 800e116:	aa1e      	add	r2, sp, #120	; 0x78
 800e118:	4659      	mov	r1, fp
 800e11a:	4638      	mov	r0, r7
 800e11c:	f001 fd20 	bl	800fb60 <__ssprint_r>
 800e120:	2800      	cmp	r0, #0
 800e122:	f040 816c 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e126:	a921      	add	r1, sp, #132	; 0x84
 800e128:	3e10      	subs	r6, #16
 800e12a:	460c      	mov	r4, r1
 800e12c:	e7e1      	b.n	800e0f2 <_svfprintf_r+0xfca>
 800e12e:	aa1e      	add	r2, sp, #120	; 0x78
 800e130:	4659      	mov	r1, fp
 800e132:	4638      	mov	r0, r7
 800e134:	f001 fd14 	bl	800fb60 <__ssprint_r>
 800e138:	2800      	cmp	r0, #0
 800e13a:	f040 8160 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e13e:	ac21      	add	r4, sp, #132	; 0x84
 800e140:	e762      	b.n	800e008 <_svfprintf_r+0xee0>
 800e142:	2010      	movs	r0, #16
 800e144:	4402      	add	r2, r0
 800e146:	2b07      	cmp	r3, #7
 800e148:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800e14c:	6060      	str	r0, [r4, #4]
 800e14e:	dd08      	ble.n	800e162 <_svfprintf_r+0x103a>
 800e150:	aa1e      	add	r2, sp, #120	; 0x78
 800e152:	4659      	mov	r1, fp
 800e154:	4638      	mov	r0, r7
 800e156:	f001 fd03 	bl	800fb60 <__ssprint_r>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f040 814f 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e160:	a921      	add	r1, sp, #132	; 0x84
 800e162:	3e10      	subs	r6, #16
 800e164:	460c      	mov	r4, r1
 800e166:	e759      	b.n	800e01c <_svfprintf_r+0xef4>
 800e168:	460c      	mov	r4, r1
 800e16a:	e772      	b.n	800e052 <_svfprintf_r+0xf2a>
 800e16c:	9b06      	ldr	r3, [sp, #24]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d053      	beq.n	800e21a <_svfprintf_r+0x10f2>
 800e172:	9b06      	ldr	r3, [sp, #24]
 800e174:	3b01      	subs	r3, #1
 800e176:	9306      	str	r3, [sp, #24]
 800e178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e17e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e180:	6063      	str	r3, [r4, #4]
 800e182:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e184:	4413      	add	r3, r2
 800e186:	9320      	str	r3, [sp, #128]	; 0x80
 800e188:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e18a:	3301      	adds	r3, #1
 800e18c:	2b07      	cmp	r3, #7
 800e18e:	931f      	str	r3, [sp, #124]	; 0x7c
 800e190:	dc4a      	bgt.n	800e228 <_svfprintf_r+0x1100>
 800e192:	3408      	adds	r4, #8
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	9a08      	ldr	r2, [sp, #32]
 800e198:	eb0a 0903 	add.w	r9, sl, r3
 800e19c:	eba9 0306 	sub.w	r3, r9, r6
 800e1a0:	f892 9000 	ldrb.w	r9, [r2]
 800e1a4:	4599      	cmp	r9, r3
 800e1a6:	bfa8      	it	ge
 800e1a8:	4699      	movge	r9, r3
 800e1aa:	f1b9 0f00 	cmp.w	r9, #0
 800e1ae:	dd0a      	ble.n	800e1c6 <_svfprintf_r+0x109e>
 800e1b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1b2:	444b      	add	r3, r9
 800e1b4:	9320      	str	r3, [sp, #128]	; 0x80
 800e1b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	2b07      	cmp	r3, #7
 800e1bc:	e9c4 6900 	strd	r6, r9, [r4]
 800e1c0:	931f      	str	r3, [sp, #124]	; 0x7c
 800e1c2:	dc3b      	bgt.n	800e23c <_svfprintf_r+0x1114>
 800e1c4:	3408      	adds	r4, #8
 800e1c6:	9b08      	ldr	r3, [sp, #32]
 800e1c8:	f893 8000 	ldrb.w	r8, [r3]
 800e1cc:	f1b9 0f00 	cmp.w	r9, #0
 800e1d0:	bfa8      	it	ge
 800e1d2:	eba8 0809 	subge.w	r8, r8, r9
 800e1d6:	f1b8 0f00 	cmp.w	r8, #0
 800e1da:	dd1a      	ble.n	800e212 <_svfprintf_r+0x10ea>
 800e1dc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800e1e0:	489e      	ldr	r0, [pc, #632]	; (800e45c <_svfprintf_r+0x1334>)
 800e1e2:	6020      	str	r0, [r4, #0]
 800e1e4:	f1b8 0f10 	cmp.w	r8, #16
 800e1e8:	f103 0301 	add.w	r3, r3, #1
 800e1ec:	f104 0108 	add.w	r1, r4, #8
 800e1f0:	dc2e      	bgt.n	800e250 <_svfprintf_r+0x1128>
 800e1f2:	4442      	add	r2, r8
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800e1fa:	f8c4 8004 	str.w	r8, [r4, #4]
 800e1fe:	dd3b      	ble.n	800e278 <_svfprintf_r+0x1150>
 800e200:	aa1e      	add	r2, sp, #120	; 0x78
 800e202:	4659      	mov	r1, fp
 800e204:	4638      	mov	r0, r7
 800e206:	f001 fcab 	bl	800fb60 <__ssprint_r>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f040 80f7 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e210:	ac21      	add	r4, sp, #132	; 0x84
 800e212:	9b08      	ldr	r3, [sp, #32]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	441e      	add	r6, r3
 800e218:	e71f      	b.n	800e05a <_svfprintf_r+0xf32>
 800e21a:	9b08      	ldr	r3, [sp, #32]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	9308      	str	r3, [sp, #32]
 800e220:	9b07      	ldr	r3, [sp, #28]
 800e222:	3b01      	subs	r3, #1
 800e224:	9307      	str	r3, [sp, #28]
 800e226:	e7a7      	b.n	800e178 <_svfprintf_r+0x1050>
 800e228:	aa1e      	add	r2, sp, #120	; 0x78
 800e22a:	4659      	mov	r1, fp
 800e22c:	4638      	mov	r0, r7
 800e22e:	f001 fc97 	bl	800fb60 <__ssprint_r>
 800e232:	2800      	cmp	r0, #0
 800e234:	f040 80e3 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e238:	ac21      	add	r4, sp, #132	; 0x84
 800e23a:	e7ab      	b.n	800e194 <_svfprintf_r+0x106c>
 800e23c:	aa1e      	add	r2, sp, #120	; 0x78
 800e23e:	4659      	mov	r1, fp
 800e240:	4638      	mov	r0, r7
 800e242:	f001 fc8d 	bl	800fb60 <__ssprint_r>
 800e246:	2800      	cmp	r0, #0
 800e248:	f040 80d9 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e24c:	ac21      	add	r4, sp, #132	; 0x84
 800e24e:	e7ba      	b.n	800e1c6 <_svfprintf_r+0x109e>
 800e250:	2010      	movs	r0, #16
 800e252:	4402      	add	r2, r0
 800e254:	2b07      	cmp	r3, #7
 800e256:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800e25a:	6060      	str	r0, [r4, #4]
 800e25c:	dd08      	ble.n	800e270 <_svfprintf_r+0x1148>
 800e25e:	aa1e      	add	r2, sp, #120	; 0x78
 800e260:	4659      	mov	r1, fp
 800e262:	4638      	mov	r0, r7
 800e264:	f001 fc7c 	bl	800fb60 <__ssprint_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	f040 80c8 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e26e:	a921      	add	r1, sp, #132	; 0x84
 800e270:	f1a8 0810 	sub.w	r8, r8, #16
 800e274:	460c      	mov	r4, r1
 800e276:	e7b1      	b.n	800e1dc <_svfprintf_r+0x10b4>
 800e278:	460c      	mov	r4, r1
 800e27a:	e7ca      	b.n	800e212 <_svfprintf_r+0x10ea>
 800e27c:	aa1e      	add	r2, sp, #120	; 0x78
 800e27e:	4659      	mov	r1, fp
 800e280:	4638      	mov	r0, r7
 800e282:	f001 fc6d 	bl	800fb60 <__ssprint_r>
 800e286:	2800      	cmp	r0, #0
 800e288:	f040 80b9 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e28c:	ac21      	add	r4, sp, #132	; 0x84
 800e28e:	e706      	b.n	800e09e <_svfprintf_r+0xf76>
 800e290:	aa1e      	add	r2, sp, #120	; 0x78
 800e292:	4659      	mov	r1, fp
 800e294:	4638      	mov	r0, r7
 800e296:	f001 fc63 	bl	800fb60 <__ssprint_r>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	f040 80af 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e2a0:	ac21      	add	r4, sp, #132	; 0x84
 800e2a2:	e716      	b.n	800e0d2 <_svfprintf_r+0xfaa>
 800e2a4:	9903      	ldr	r1, [sp, #12]
 800e2a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2a8:	2901      	cmp	r1, #1
 800e2aa:	f100 0001 	add.w	r0, r0, #1
 800e2ae:	f102 0201 	add.w	r2, r2, #1
 800e2b2:	f104 0308 	add.w	r3, r4, #8
 800e2b6:	dc01      	bgt.n	800e2bc <_svfprintf_r+0x1194>
 800e2b8:	07e9      	lsls	r1, r5, #31
 800e2ba:	d573      	bpl.n	800e3a4 <_svfprintf_r+0x127c>
 800e2bc:	2101      	movs	r1, #1
 800e2be:	2a07      	cmp	r2, #7
 800e2c0:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800e2c4:	f8c4 a000 	str.w	sl, [r4]
 800e2c8:	6061      	str	r1, [r4, #4]
 800e2ca:	dd08      	ble.n	800e2de <_svfprintf_r+0x11b6>
 800e2cc:	aa1e      	add	r2, sp, #120	; 0x78
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	f001 fc45 	bl	800fb60 <__ssprint_r>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f040 8091 	bne.w	800e3fe <_svfprintf_r+0x12d6>
 800e2dc:	ab21      	add	r3, sp, #132	; 0x84
 800e2de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2e6:	605a      	str	r2, [r3, #4]
 800e2e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e2ea:	440a      	add	r2, r1
 800e2ec:	9220      	str	r2, [sp, #128]	; 0x80
 800e2ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	2a07      	cmp	r2, #7
 800e2f4:	921f      	str	r2, [sp, #124]	; 0x7c
 800e2f6:	dc25      	bgt.n	800e344 <_svfprintf_r+0x121c>
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	9a03      	ldr	r2, [sp, #12]
 800e2fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e304:	f102 34ff 	add.w	r4, r2, #4294967295
 800e308:	d025      	beq.n	800e356 <_svfprintf_r+0x122e>
 800e30a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800e30c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e30e:	f10a 0001 	add.w	r0, sl, #1
 800e312:	e9c3 0400 	strd	r0, r4, [r3]
 800e316:	9803      	ldr	r0, [sp, #12]
 800e318:	3101      	adds	r1, #1
 800e31a:	3a01      	subs	r2, #1
 800e31c:	4402      	add	r2, r0
 800e31e:	2907      	cmp	r1, #7
 800e320:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800e324:	dd47      	ble.n	800e3b6 <_svfprintf_r+0x128e>
 800e326:	aa1e      	add	r2, sp, #120	; 0x78
 800e328:	4659      	mov	r1, fp
 800e32a:	4638      	mov	r0, r7
 800e32c:	f001 fc18 	bl	800fb60 <__ssprint_r>
 800e330:	2800      	cmp	r0, #0
 800e332:	d164      	bne.n	800e3fe <_svfprintf_r+0x12d6>
 800e334:	ab21      	add	r3, sp, #132	; 0x84
 800e336:	aa1a      	add	r2, sp, #104	; 0x68
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e340:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e342:	e619      	b.n	800df78 <_svfprintf_r+0xe50>
 800e344:	aa1e      	add	r2, sp, #120	; 0x78
 800e346:	4659      	mov	r1, fp
 800e348:	4638      	mov	r0, r7
 800e34a:	f001 fc09 	bl	800fb60 <__ssprint_r>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d155      	bne.n	800e3fe <_svfprintf_r+0x12d6>
 800e352:	ab21      	add	r3, sp, #132	; 0x84
 800e354:	e7d1      	b.n	800e2fa <_svfprintf_r+0x11d2>
 800e356:	2c00      	cmp	r4, #0
 800e358:	dded      	ble.n	800e336 <_svfprintf_r+0x120e>
 800e35a:	4e40      	ldr	r6, [pc, #256]	; (800e45c <_svfprintf_r+0x1334>)
 800e35c:	f04f 0810 	mov.w	r8, #16
 800e360:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800e364:	2c10      	cmp	r4, #16
 800e366:	f102 0201 	add.w	r2, r2, #1
 800e36a:	f103 0008 	add.w	r0, r3, #8
 800e36e:	601e      	str	r6, [r3, #0]
 800e370:	dc07      	bgt.n	800e382 <_svfprintf_r+0x125a>
 800e372:	605c      	str	r4, [r3, #4]
 800e374:	2a07      	cmp	r2, #7
 800e376:	440c      	add	r4, r1
 800e378:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800e37c:	dcd3      	bgt.n	800e326 <_svfprintf_r+0x11fe>
 800e37e:	4603      	mov	r3, r0
 800e380:	e7d9      	b.n	800e336 <_svfprintf_r+0x120e>
 800e382:	3110      	adds	r1, #16
 800e384:	2a07      	cmp	r2, #7
 800e386:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800e38a:	f8c3 8004 	str.w	r8, [r3, #4]
 800e38e:	dd06      	ble.n	800e39e <_svfprintf_r+0x1276>
 800e390:	aa1e      	add	r2, sp, #120	; 0x78
 800e392:	4659      	mov	r1, fp
 800e394:	4638      	mov	r0, r7
 800e396:	f001 fbe3 	bl	800fb60 <__ssprint_r>
 800e39a:	bb80      	cbnz	r0, 800e3fe <_svfprintf_r+0x12d6>
 800e39c:	a821      	add	r0, sp, #132	; 0x84
 800e39e:	3c10      	subs	r4, #16
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	e7dd      	b.n	800e360 <_svfprintf_r+0x1238>
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	2a07      	cmp	r2, #7
 800e3a8:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800e3ac:	f8c4 a000 	str.w	sl, [r4]
 800e3b0:	6061      	str	r1, [r4, #4]
 800e3b2:	ddc0      	ble.n	800e336 <_svfprintf_r+0x120e>
 800e3b4:	e7b7      	b.n	800e326 <_svfprintf_r+0x11fe>
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	e7bd      	b.n	800e336 <_svfprintf_r+0x120e>
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	f7ff ba51 	b.w	800d862 <_svfprintf_r+0x73a>
 800e3c0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800e3c4:	1a9d      	subs	r5, r3, r2
 800e3c6:	2d00      	cmp	r5, #0
 800e3c8:	f77f aa58 	ble.w	800d87c <_svfprintf_r+0x754>
 800e3cc:	4e24      	ldr	r6, [pc, #144]	; (800e460 <_svfprintf_r+0x1338>)
 800e3ce:	f04f 0810 	mov.w	r8, #16
 800e3d2:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800e3d6:	2d10      	cmp	r5, #16
 800e3d8:	f103 0301 	add.w	r3, r3, #1
 800e3dc:	6026      	str	r6, [r4, #0]
 800e3de:	dc18      	bgt.n	800e412 <_svfprintf_r+0x12ea>
 800e3e0:	6065      	str	r5, [r4, #4]
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	4415      	add	r5, r2
 800e3e6:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 800e3ea:	f77f aa47 	ble.w	800d87c <_svfprintf_r+0x754>
 800e3ee:	aa1e      	add	r2, sp, #120	; 0x78
 800e3f0:	4659      	mov	r1, fp
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f001 fbb4 	bl	800fb60 <__ssprint_r>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	f43f aa3f 	beq.w	800d87c <_svfprintf_r+0x754>
 800e3fe:	9b02      	ldr	r3, [sp, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f43f a888 	beq.w	800d516 <_svfprintf_r+0x3ee>
 800e406:	4619      	mov	r1, r3
 800e408:	4638      	mov	r0, r7
 800e40a:	f7fc f9ef 	bl	800a7ec <_free_r>
 800e40e:	f7ff b882 	b.w	800d516 <_svfprintf_r+0x3ee>
 800e412:	3210      	adds	r2, #16
 800e414:	2b07      	cmp	r3, #7
 800e416:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800e41a:	f8c4 8004 	str.w	r8, [r4, #4]
 800e41e:	dc02      	bgt.n	800e426 <_svfprintf_r+0x12fe>
 800e420:	3408      	adds	r4, #8
 800e422:	3d10      	subs	r5, #16
 800e424:	e7d5      	b.n	800e3d2 <_svfprintf_r+0x12aa>
 800e426:	aa1e      	add	r2, sp, #120	; 0x78
 800e428:	4659      	mov	r1, fp
 800e42a:	4638      	mov	r0, r7
 800e42c:	f001 fb98 	bl	800fb60 <__ssprint_r>
 800e430:	2800      	cmp	r0, #0
 800e432:	d1e4      	bne.n	800e3fe <_svfprintf_r+0x12d6>
 800e434:	ac21      	add	r4, sp, #132	; 0x84
 800e436:	e7f4      	b.n	800e422 <_svfprintf_r+0x12fa>
 800e438:	9902      	ldr	r1, [sp, #8]
 800e43a:	4638      	mov	r0, r7
 800e43c:	f7fc f9d6 	bl	800a7ec <_free_r>
 800e440:	f7ff ba34 	b.w	800d8ac <_svfprintf_r+0x784>
 800e444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e446:	2b00      	cmp	r3, #0
 800e448:	f43f a865 	beq.w	800d516 <_svfprintf_r+0x3ee>
 800e44c:	aa1e      	add	r2, sp, #120	; 0x78
 800e44e:	4659      	mov	r1, fp
 800e450:	4638      	mov	r0, r7
 800e452:	f001 fb85 	bl	800fb60 <__ssprint_r>
 800e456:	f7ff b85e 	b.w	800d516 <_svfprintf_r+0x3ee>
 800e45a:	bf00      	nop
 800e45c:	08011618 	.word	0x08011618
 800e460:	08011608 	.word	0x08011608
 800e464:	ea58 0209 	orrs.w	r2, r8, r9
 800e468:	9502      	str	r5, [sp, #8]
 800e46a:	f43f ab42 	beq.w	800daf2 <_svfprintf_r+0x9ca>
 800e46e:	2b01      	cmp	r3, #1
 800e470:	f43f abec 	beq.w	800dc4c <_svfprintf_r+0xb24>
 800e474:	2b02      	cmp	r3, #2
 800e476:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800e47a:	f43f ac37 	beq.w	800dcec <_svfprintf_r+0xbc4>
 800e47e:	f008 0307 	and.w	r3, r8, #7
 800e482:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800e486:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800e48a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800e48e:	3330      	adds	r3, #48	; 0x30
 800e490:	ea58 0109 	orrs.w	r1, r8, r9
 800e494:	4652      	mov	r2, sl
 800e496:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800e49a:	d1f0      	bne.n	800e47e <_svfprintf_r+0x1356>
 800e49c:	9902      	ldr	r1, [sp, #8]
 800e49e:	07cd      	lsls	r5, r1, #31
 800e4a0:	d506      	bpl.n	800e4b0 <_svfprintf_r+0x1388>
 800e4a2:	2b30      	cmp	r3, #48	; 0x30
 800e4a4:	d004      	beq.n	800e4b0 <_svfprintf_r+0x1388>
 800e4a6:	2330      	movs	r3, #48	; 0x30
 800e4a8:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800e4ac:	f1a2 0a02 	sub.w	sl, r2, #2
 800e4b0:	ab4a      	add	r3, sp, #296	; 0x128
 800e4b2:	46b1      	mov	r9, r6
 800e4b4:	eba3 060a 	sub.w	r6, r3, sl
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9d02      	ldr	r5, [sp, #8]
 800e4bc:	9302      	str	r3, [sp, #8]
 800e4be:	f7fe bff3 	b.w	800d4a8 <_svfprintf_r+0x380>
 800e4c2:	bf00      	nop

0800e4c4 <sysconf>:
 800e4c4:	2808      	cmp	r0, #8
 800e4c6:	b508      	push	{r3, lr}
 800e4c8:	d006      	beq.n	800e4d8 <sysconf+0x14>
 800e4ca:	f7f8 fabf 	bl	8006a4c <__errno>
 800e4ce:	2316      	movs	r3, #22
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d6:	bd08      	pop	{r3, pc}
 800e4d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e4dc:	e7fb      	b.n	800e4d6 <sysconf+0x12>

0800e4de <__submore>:
 800e4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e4e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e4ea:	4299      	cmp	r1, r3
 800e4ec:	d11d      	bne.n	800e52a <__submore+0x4c>
 800e4ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e4f2:	f7fc fc59 	bl	800ada8 <_malloc_r>
 800e4f6:	b918      	cbnz	r0, 800e500 <__submore+0x22>
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e504:	6363      	str	r3, [r4, #52]	; 0x34
 800e506:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e50a:	6320      	str	r0, [r4, #48]	; 0x30
 800e50c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e510:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e514:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e518:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e51c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e520:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e524:	6020      	str	r0, [r4, #0]
 800e526:	2000      	movs	r0, #0
 800e528:	e7e8      	b.n	800e4fc <__submore+0x1e>
 800e52a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800e52c:	0077      	lsls	r7, r6, #1
 800e52e:	463a      	mov	r2, r7
 800e530:	f7fd fb4e 	bl	800bbd0 <_realloc_r>
 800e534:	4605      	mov	r5, r0
 800e536:	2800      	cmp	r0, #0
 800e538:	d0de      	beq.n	800e4f8 <__submore+0x1a>
 800e53a:	eb00 0806 	add.w	r8, r0, r6
 800e53e:	4601      	mov	r1, r0
 800e540:	4632      	mov	r2, r6
 800e542:	4640      	mov	r0, r8
 800e544:	f7fc fe98 	bl	800b278 <memcpy>
 800e548:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800e54c:	f8c4 8000 	str.w	r8, [r4]
 800e550:	e7e9      	b.n	800e526 <__submore+0x48>

0800e552 <_ungetc_r>:
 800e552:	b570      	push	{r4, r5, r6, lr}
 800e554:	460d      	mov	r5, r1
 800e556:	1c69      	adds	r1, r5, #1
 800e558:	4606      	mov	r6, r0
 800e55a:	4614      	mov	r4, r2
 800e55c:	d103      	bne.n	800e566 <_ungetc_r+0x14>
 800e55e:	f04f 35ff 	mov.w	r5, #4294967295
 800e562:	4628      	mov	r0, r5
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	b118      	cbz	r0, 800e570 <_ungetc_r+0x1e>
 800e568:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e56a:	b90b      	cbnz	r3, 800e570 <_ungetc_r+0x1e>
 800e56c:	f7fc f846 	bl	800a5fc <__sinit>
 800e570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e572:	07da      	lsls	r2, r3, #31
 800e574:	d405      	bmi.n	800e582 <_ungetc_r+0x30>
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	059b      	lsls	r3, r3, #22
 800e57a:	d402      	bmi.n	800e582 <_ungetc_r+0x30>
 800e57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e57e:	f7fc fb95 	bl	800acac <__retarget_lock_acquire_recursive>
 800e582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e586:	0498      	lsls	r0, r3, #18
 800e588:	d406      	bmi.n	800e598 <_ungetc_r+0x46>
 800e58a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e58e:	81a3      	strh	r3, [r4, #12]
 800e590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e596:	6663      	str	r3, [r4, #100]	; 0x64
 800e598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59c:	f023 0320 	bic.w	r3, r3, #32
 800e5a0:	0759      	lsls	r1, r3, #29
 800e5a2:	81a3      	strh	r3, [r4, #12]
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	d423      	bmi.n	800e5f0 <_ungetc_r+0x9e>
 800e5a8:	06d3      	lsls	r3, r2, #27
 800e5aa:	d409      	bmi.n	800e5c0 <_ungetc_r+0x6e>
 800e5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5ae:	07dd      	lsls	r5, r3, #31
 800e5b0:	d4d5      	bmi.n	800e55e <_ungetc_r+0xc>
 800e5b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e5b6:	d1d2      	bne.n	800e55e <_ungetc_r+0xc>
 800e5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ba:	f7fc fb78 	bl	800acae <__retarget_lock_release_recursive>
 800e5be:	e7ce      	b.n	800e55e <_ungetc_r+0xc>
 800e5c0:	0710      	lsls	r0, r2, #28
 800e5c2:	d511      	bpl.n	800e5e8 <_ungetc_r+0x96>
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f7fb ff9a 	bl	800a500 <_fflush_r>
 800e5cc:	b130      	cbz	r0, 800e5dc <_ungetc_r+0x8a>
 800e5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5d0:	07d9      	lsls	r1, r3, #31
 800e5d2:	d4c4      	bmi.n	800e55e <_ungetc_r+0xc>
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e5da:	e7ec      	b.n	800e5b6 <_ungetc_r+0x64>
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	60a0      	str	r0, [r4, #8]
 800e5e0:	f023 0308 	bic.w	r3, r3, #8
 800e5e4:	81a3      	strh	r3, [r4, #12]
 800e5e6:	61a0      	str	r0, [r4, #24]
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f043 0304 	orr.w	r3, r3, #4
 800e5ee:	81a3      	strh	r3, [r4, #12]
 800e5f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5f2:	6862      	ldr	r2, [r4, #4]
 800e5f4:	b2ed      	uxtb	r5, r5
 800e5f6:	b1d3      	cbz	r3, 800e62e <_ungetc_r+0xdc>
 800e5f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	dc05      	bgt.n	800e60a <_ungetc_r+0xb8>
 800e5fe:	4621      	mov	r1, r4
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff ff6c 	bl	800e4de <__submore>
 800e606:	2800      	cmp	r0, #0
 800e608:	d1e1      	bne.n	800e5ce <_ungetc_r+0x7c>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	1e5a      	subs	r2, r3, #1
 800e60e:	6022      	str	r2, [r4, #0]
 800e610:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e614:	6863      	ldr	r3, [r4, #4]
 800e616:	3301      	adds	r3, #1
 800e618:	6063      	str	r3, [r4, #4]
 800e61a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e61c:	07da      	lsls	r2, r3, #31
 800e61e:	d4a0      	bmi.n	800e562 <_ungetc_r+0x10>
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	059b      	lsls	r3, r3, #22
 800e624:	d49d      	bmi.n	800e562 <_ungetc_r+0x10>
 800e626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e628:	f7fc fb41 	bl	800acae <__retarget_lock_release_recursive>
 800e62c:	e799      	b.n	800e562 <_ungetc_r+0x10>
 800e62e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e630:	6920      	ldr	r0, [r4, #16]
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	f001 0101 	and.w	r1, r1, #1
 800e638:	b160      	cbz	r0, 800e654 <_ungetc_r+0x102>
 800e63a:	4298      	cmp	r0, r3
 800e63c:	d20a      	bcs.n	800e654 <_ungetc_r+0x102>
 800e63e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800e642:	4285      	cmp	r5, r0
 800e644:	d106      	bne.n	800e654 <_ungetc_r+0x102>
 800e646:	3b01      	subs	r3, #1
 800e648:	3201      	adds	r2, #1
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	6062      	str	r2, [r4, #4]
 800e64e:	2900      	cmp	r1, #0
 800e650:	d187      	bne.n	800e562 <_ungetc_r+0x10>
 800e652:	e7e5      	b.n	800e620 <_ungetc_r+0xce>
 800e654:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800e658:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e65c:	6323      	str	r3, [r4, #48]	; 0x30
 800e65e:	2303      	movs	r3, #3
 800e660:	6363      	str	r3, [r4, #52]	; 0x34
 800e662:	4623      	mov	r3, r4
 800e664:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	2301      	movs	r3, #1
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	e7ee      	b.n	800e64e <_ungetc_r+0xfc>

0800e670 <__sprint_r>:
 800e670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	6893      	ldr	r3, [r2, #8]
 800e676:	4680      	mov	r8, r0
 800e678:	460f      	mov	r7, r1
 800e67a:	4614      	mov	r4, r2
 800e67c:	b91b      	cbnz	r3, 800e686 <__sprint_r+0x16>
 800e67e:	6053      	str	r3, [r2, #4]
 800e680:	4618      	mov	r0, r3
 800e682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e688:	049d      	lsls	r5, r3, #18
 800e68a:	d520      	bpl.n	800e6ce <__sprint_r+0x5e>
 800e68c:	6815      	ldr	r5, [r2, #0]
 800e68e:	3508      	adds	r5, #8
 800e690:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800e694:	f04f 0900 	mov.w	r9, #0
 800e698:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800e69c:	45ca      	cmp	sl, r9
 800e69e:	dc0b      	bgt.n	800e6b8 <__sprint_r+0x48>
 800e6a0:	68a3      	ldr	r3, [r4, #8]
 800e6a2:	f026 0003 	bic.w	r0, r6, #3
 800e6a6:	1a18      	subs	r0, r3, r0
 800e6a8:	60a0      	str	r0, [r4, #8]
 800e6aa:	3508      	adds	r5, #8
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d1ef      	bne.n	800e690 <__sprint_r+0x20>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e6b6:	e7e4      	b.n	800e682 <__sprint_r+0x12>
 800e6b8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e6bc:	463a      	mov	r2, r7
 800e6be:	4640      	mov	r0, r8
 800e6c0:	f000 fe4f 	bl	800f362 <_fputwc_r>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d0f3      	beq.n	800e6b0 <__sprint_r+0x40>
 800e6c8:	f109 0901 	add.w	r9, r9, #1
 800e6cc:	e7e6      	b.n	800e69c <__sprint_r+0x2c>
 800e6ce:	f7fc f94d 	bl	800a96c <__sfvwrite_r>
 800e6d2:	e7ed      	b.n	800e6b0 <__sprint_r+0x40>

0800e6d4 <_vfiprintf_r>:
 800e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d8:	ed2d 8b02 	vpush	{d8}
 800e6dc:	b0b9      	sub	sp, #228	; 0xe4
 800e6de:	460f      	mov	r7, r1
 800e6e0:	9201      	str	r2, [sp, #4]
 800e6e2:	461d      	mov	r5, r3
 800e6e4:	461c      	mov	r4, r3
 800e6e6:	4681      	mov	r9, r0
 800e6e8:	b118      	cbz	r0, 800e6f2 <_vfiprintf_r+0x1e>
 800e6ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e6ec:	b90b      	cbnz	r3, 800e6f2 <_vfiprintf_r+0x1e>
 800e6ee:	f7fb ff85 	bl	800a5fc <__sinit>
 800e6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6f4:	07d8      	lsls	r0, r3, #31
 800e6f6:	d405      	bmi.n	800e704 <_vfiprintf_r+0x30>
 800e6f8:	89bb      	ldrh	r3, [r7, #12]
 800e6fa:	0599      	lsls	r1, r3, #22
 800e6fc:	d402      	bmi.n	800e704 <_vfiprintf_r+0x30>
 800e6fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e700:	f7fc fad4 	bl	800acac <__retarget_lock_acquire_recursive>
 800e704:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e708:	049a      	lsls	r2, r3, #18
 800e70a:	d406      	bmi.n	800e71a <_vfiprintf_r+0x46>
 800e70c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e710:	81bb      	strh	r3, [r7, #12]
 800e712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e718:	667b      	str	r3, [r7, #100]	; 0x64
 800e71a:	89bb      	ldrh	r3, [r7, #12]
 800e71c:	071e      	lsls	r6, r3, #28
 800e71e:	d501      	bpl.n	800e724 <_vfiprintf_r+0x50>
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	b9bb      	cbnz	r3, 800e754 <_vfiprintf_r+0x80>
 800e724:	4639      	mov	r1, r7
 800e726:	4648      	mov	r0, r9
 800e728:	f7fb f810 	bl	800974c <__swsetup_r>
 800e72c:	b190      	cbz	r0, 800e754 <_vfiprintf_r+0x80>
 800e72e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e730:	07d8      	lsls	r0, r3, #31
 800e732:	d508      	bpl.n	800e746 <_vfiprintf_r+0x72>
 800e734:	f04f 33ff 	mov.w	r3, #4294967295
 800e738:	9302      	str	r3, [sp, #8]
 800e73a:	9802      	ldr	r0, [sp, #8]
 800e73c:	b039      	add	sp, #228	; 0xe4
 800e73e:	ecbd 8b02 	vpop	{d8}
 800e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e746:	89bb      	ldrh	r3, [r7, #12]
 800e748:	0599      	lsls	r1, r3, #22
 800e74a:	d4f3      	bmi.n	800e734 <_vfiprintf_r+0x60>
 800e74c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e74e:	f7fc faae 	bl	800acae <__retarget_lock_release_recursive>
 800e752:	e7ef      	b.n	800e734 <_vfiprintf_r+0x60>
 800e754:	89bb      	ldrh	r3, [r7, #12]
 800e756:	f003 021a 	and.w	r2, r3, #26
 800e75a:	2a0a      	cmp	r2, #10
 800e75c:	d116      	bne.n	800e78c <_vfiprintf_r+0xb8>
 800e75e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e762:	2a00      	cmp	r2, #0
 800e764:	db12      	blt.n	800e78c <_vfiprintf_r+0xb8>
 800e766:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e768:	07d2      	lsls	r2, r2, #31
 800e76a:	d404      	bmi.n	800e776 <_vfiprintf_r+0xa2>
 800e76c:	059e      	lsls	r6, r3, #22
 800e76e:	d402      	bmi.n	800e776 <_vfiprintf_r+0xa2>
 800e770:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e772:	f7fc fa9c 	bl	800acae <__retarget_lock_release_recursive>
 800e776:	9a01      	ldr	r2, [sp, #4]
 800e778:	462b      	mov	r3, r5
 800e77a:	4639      	mov	r1, r7
 800e77c:	4648      	mov	r0, r9
 800e77e:	b039      	add	sp, #228	; 0xe4
 800e780:	ecbd 8b02 	vpop	{d8}
 800e784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	f000 bc3a 	b.w	800f000 <__sbprintf>
 800e78c:	2300      	movs	r3, #0
 800e78e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800e792:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e796:	ae0f      	add	r6, sp, #60	; 0x3c
 800e798:	ee08 3a10 	vmov	s16, r3
 800e79c:	960c      	str	r6, [sp, #48]	; 0x30
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	9302      	str	r3, [sp, #8]
 800e7a2:	9b01      	ldr	r3, [sp, #4]
 800e7a4:	461d      	mov	r5, r3
 800e7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7aa:	b10a      	cbz	r2, 800e7b0 <_vfiprintf_r+0xdc>
 800e7ac:	2a25      	cmp	r2, #37	; 0x25
 800e7ae:	d1f9      	bne.n	800e7a4 <_vfiprintf_r+0xd0>
 800e7b0:	9b01      	ldr	r3, [sp, #4]
 800e7b2:	ebb5 0803 	subs.w	r8, r5, r3
 800e7b6:	d00d      	beq.n	800e7d4 <_vfiprintf_r+0x100>
 800e7b8:	e9c6 3800 	strd	r3, r8, [r6]
 800e7bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7be:	4443      	add	r3, r8
 800e7c0:	930e      	str	r3, [sp, #56]	; 0x38
 800e7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	2b07      	cmp	r3, #7
 800e7c8:	930d      	str	r3, [sp, #52]	; 0x34
 800e7ca:	dc75      	bgt.n	800e8b8 <_vfiprintf_r+0x1e4>
 800e7cc:	3608      	adds	r6, #8
 800e7ce:	9b02      	ldr	r3, [sp, #8]
 800e7d0:	4443      	add	r3, r8
 800e7d2:	9302      	str	r3, [sp, #8]
 800e7d4:	782b      	ldrb	r3, [r5, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f000 83d6 	beq.w	800ef88 <_vfiprintf_r+0x8b4>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f04f 31ff 	mov.w	r1, #4294967295
 800e7e2:	1c6a      	adds	r2, r5, #1
 800e7e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e7e8:	9100      	str	r1, [sp, #0]
 800e7ea:	9303      	str	r3, [sp, #12]
 800e7ec:	469a      	mov	sl, r3
 800e7ee:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e7f2:	9201      	str	r2, [sp, #4]
 800e7f4:	f1a3 0220 	sub.w	r2, r3, #32
 800e7f8:	2a5a      	cmp	r2, #90	; 0x5a
 800e7fa:	f200 831f 	bhi.w	800ee3c <_vfiprintf_r+0x768>
 800e7fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e802:	009b      	.short	0x009b
 800e804:	031d031d 	.word	0x031d031d
 800e808:	031d00a3 	.word	0x031d00a3
 800e80c:	031d031d 	.word	0x031d031d
 800e810:	031d0082 	.word	0x031d0082
 800e814:	00a6031d 	.word	0x00a6031d
 800e818:	031d00b0 	.word	0x031d00b0
 800e81c:	00b200ad 	.word	0x00b200ad
 800e820:	00cd031d 	.word	0x00cd031d
 800e824:	00d000d0 	.word	0x00d000d0
 800e828:	00d000d0 	.word	0x00d000d0
 800e82c:	00d000d0 	.word	0x00d000d0
 800e830:	00d000d0 	.word	0x00d000d0
 800e834:	031d00d0 	.word	0x031d00d0
 800e838:	031d031d 	.word	0x031d031d
 800e83c:	031d031d 	.word	0x031d031d
 800e840:	031d031d 	.word	0x031d031d
 800e844:	031d031d 	.word	0x031d031d
 800e848:	010800fa 	.word	0x010800fa
 800e84c:	031d031d 	.word	0x031d031d
 800e850:	031d031d 	.word	0x031d031d
 800e854:	031d031d 	.word	0x031d031d
 800e858:	031d031d 	.word	0x031d031d
 800e85c:	031d031d 	.word	0x031d031d
 800e860:	031d0158 	.word	0x031d0158
 800e864:	031d031d 	.word	0x031d031d
 800e868:	031d01a1 	.word	0x031d01a1
 800e86c:	031d027e 	.word	0x031d027e
 800e870:	029e031d 	.word	0x029e031d
 800e874:	031d031d 	.word	0x031d031d
 800e878:	031d031d 	.word	0x031d031d
 800e87c:	031d031d 	.word	0x031d031d
 800e880:	031d031d 	.word	0x031d031d
 800e884:	031d031d 	.word	0x031d031d
 800e888:	010a00fa 	.word	0x010a00fa
 800e88c:	031d031d 	.word	0x031d031d
 800e890:	00e0031d 	.word	0x00e0031d
 800e894:	00f4010a 	.word	0x00f4010a
 800e898:	00ed031d 	.word	0x00ed031d
 800e89c:	0136031d 	.word	0x0136031d
 800e8a0:	018f015a 	.word	0x018f015a
 800e8a4:	031d00f4 	.word	0x031d00f4
 800e8a8:	009901a1 	.word	0x009901a1
 800e8ac:	031d0280 	.word	0x031d0280
 800e8b0:	0065031d 	.word	0x0065031d
 800e8b4:	0099031d 	.word	0x0099031d
 800e8b8:	aa0c      	add	r2, sp, #48	; 0x30
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	4648      	mov	r0, r9
 800e8be:	f7ff fed7 	bl	800e670 <__sprint_r>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	f040 833f 	bne.w	800ef46 <_vfiprintf_r+0x872>
 800e8c8:	ae0f      	add	r6, sp, #60	; 0x3c
 800e8ca:	e780      	b.n	800e7ce <_vfiprintf_r+0xfa>
 800e8cc:	4a9c      	ldr	r2, [pc, #624]	; (800eb40 <_vfiprintf_r+0x46c>)
 800e8ce:	9205      	str	r2, [sp, #20]
 800e8d0:	f01a 0220 	ands.w	r2, sl, #32
 800e8d4:	f000 8235 	beq.w	800ed42 <_vfiprintf_r+0x66e>
 800e8d8:	3407      	adds	r4, #7
 800e8da:	f024 0207 	bic.w	r2, r4, #7
 800e8de:	4693      	mov	fp, r2
 800e8e0:	6855      	ldr	r5, [r2, #4]
 800e8e2:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e8e6:	f01a 0f01 	tst.w	sl, #1
 800e8ea:	d009      	beq.n	800e900 <_vfiprintf_r+0x22c>
 800e8ec:	ea54 0205 	orrs.w	r2, r4, r5
 800e8f0:	bf1f      	itttt	ne
 800e8f2:	2230      	movne	r2, #48	; 0x30
 800e8f4:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800e8f8:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800e8fc:	f04a 0a02 	orrne.w	sl, sl, #2
 800e900:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e904:	e11a      	b.n	800eb3c <_vfiprintf_r+0x468>
 800e906:	4648      	mov	r0, r9
 800e908:	f7fc f9ca 	bl	800aca0 <_localeconv_r>
 800e90c:	6843      	ldr	r3, [r0, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	ee08 3a10 	vmov	s16, r3
 800e914:	f7f1 fc94 	bl	8000240 <strlen>
 800e918:	9007      	str	r0, [sp, #28]
 800e91a:	4648      	mov	r0, r9
 800e91c:	f7fc f9c0 	bl	800aca0 <_localeconv_r>
 800e920:	6883      	ldr	r3, [r0, #8]
 800e922:	9306      	str	r3, [sp, #24]
 800e924:	9b07      	ldr	r3, [sp, #28]
 800e926:	b12b      	cbz	r3, 800e934 <_vfiprintf_r+0x260>
 800e928:	9b06      	ldr	r3, [sp, #24]
 800e92a:	b11b      	cbz	r3, 800e934 <_vfiprintf_r+0x260>
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	b10b      	cbz	r3, 800e934 <_vfiprintf_r+0x260>
 800e930:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800e934:	9a01      	ldr	r2, [sp, #4]
 800e936:	e75a      	b.n	800e7ee <_vfiprintf_r+0x11a>
 800e938:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1f9      	bne.n	800e934 <_vfiprintf_r+0x260>
 800e940:	2320      	movs	r3, #32
 800e942:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e946:	e7f5      	b.n	800e934 <_vfiprintf_r+0x260>
 800e948:	f04a 0a01 	orr.w	sl, sl, #1
 800e94c:	e7f2      	b.n	800e934 <_vfiprintf_r+0x260>
 800e94e:	f854 3b04 	ldr.w	r3, [r4], #4
 800e952:	9303      	str	r3, [sp, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	daed      	bge.n	800e934 <_vfiprintf_r+0x260>
 800e958:	425b      	negs	r3, r3
 800e95a:	9303      	str	r3, [sp, #12]
 800e95c:	f04a 0a04 	orr.w	sl, sl, #4
 800e960:	e7e8      	b.n	800e934 <_vfiprintf_r+0x260>
 800e962:	232b      	movs	r3, #43	; 0x2b
 800e964:	e7ed      	b.n	800e942 <_vfiprintf_r+0x26e>
 800e966:	9a01      	ldr	r2, [sp, #4]
 800e968:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e96c:	2b2a      	cmp	r3, #42	; 0x2a
 800e96e:	d112      	bne.n	800e996 <_vfiprintf_r+0x2c2>
 800e970:	f854 0b04 	ldr.w	r0, [r4], #4
 800e974:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800e978:	e9cd 3200 	strd	r3, r2, [sp]
 800e97c:	e7da      	b.n	800e934 <_vfiprintf_r+0x260>
 800e97e:	9b00      	ldr	r3, [sp, #0]
 800e980:	200a      	movs	r0, #10
 800e982:	fb00 1303 	mla	r3, r0, r3, r1
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e98c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e990:	2909      	cmp	r1, #9
 800e992:	d9f4      	bls.n	800e97e <_vfiprintf_r+0x2aa>
 800e994:	e72d      	b.n	800e7f2 <_vfiprintf_r+0x11e>
 800e996:	2100      	movs	r1, #0
 800e998:	9100      	str	r1, [sp, #0]
 800e99a:	e7f7      	b.n	800e98c <_vfiprintf_r+0x2b8>
 800e99c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800e9a0:	e7c8      	b.n	800e934 <_vfiprintf_r+0x260>
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	9a01      	ldr	r2, [sp, #4]
 800e9a6:	9103      	str	r1, [sp, #12]
 800e9a8:	9903      	ldr	r1, [sp, #12]
 800e9aa:	3b30      	subs	r3, #48	; 0x30
 800e9ac:	200a      	movs	r0, #10
 800e9ae:	fb00 3301 	mla	r3, r0, r1, r3
 800e9b2:	9303      	str	r3, [sp, #12]
 800e9b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e9b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e9bc:	2909      	cmp	r1, #9
 800e9be:	d9f3      	bls.n	800e9a8 <_vfiprintf_r+0x2d4>
 800e9c0:	e717      	b.n	800e7f2 <_vfiprintf_r+0x11e>
 800e9c2:	9b01      	ldr	r3, [sp, #4]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b68      	cmp	r3, #104	; 0x68
 800e9c8:	bf01      	itttt	eq
 800e9ca:	9b01      	ldreq	r3, [sp, #4]
 800e9cc:	3301      	addeq	r3, #1
 800e9ce:	9301      	streq	r3, [sp, #4]
 800e9d0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800e9d4:	bf18      	it	ne
 800e9d6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800e9da:	e7ab      	b.n	800e934 <_vfiprintf_r+0x260>
 800e9dc:	9b01      	ldr	r3, [sp, #4]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b6c      	cmp	r3, #108	; 0x6c
 800e9e2:	d105      	bne.n	800e9f0 <_vfiprintf_r+0x31c>
 800e9e4:	9b01      	ldr	r3, [sp, #4]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	f04a 0a20 	orr.w	sl, sl, #32
 800e9ee:	e7a1      	b.n	800e934 <_vfiprintf_r+0x260>
 800e9f0:	f04a 0a10 	orr.w	sl, sl, #16
 800e9f4:	e79e      	b.n	800e934 <_vfiprintf_r+0x260>
 800e9f6:	46a3      	mov	fp, r4
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	f85b 3b04 	ldr.w	r3, [fp], #4
 800e9fe:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ea02:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ea06:	2301      	movs	r3, #1
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	460d      	mov	r5, r1
 800ea0c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800ea10:	e0ad      	b.n	800eb6e <_vfiprintf_r+0x49a>
 800ea12:	f04a 0a10 	orr.w	sl, sl, #16
 800ea16:	f01a 0f20 	tst.w	sl, #32
 800ea1a:	d011      	beq.n	800ea40 <_vfiprintf_r+0x36c>
 800ea1c:	3407      	adds	r4, #7
 800ea1e:	f024 0307 	bic.w	r3, r4, #7
 800ea22:	469b      	mov	fp, r3
 800ea24:	685d      	ldr	r5, [r3, #4]
 800ea26:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ea2a:	2d00      	cmp	r5, #0
 800ea2c:	da06      	bge.n	800ea3c <_vfiprintf_r+0x368>
 800ea2e:	4264      	negs	r4, r4
 800ea30:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ea34:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ea38:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e04a      	b.n	800ead6 <_vfiprintf_r+0x402>
 800ea40:	46a3      	mov	fp, r4
 800ea42:	f01a 0f10 	tst.w	sl, #16
 800ea46:	f85b 5b04 	ldr.w	r5, [fp], #4
 800ea4a:	d002      	beq.n	800ea52 <_vfiprintf_r+0x37e>
 800ea4c:	462c      	mov	r4, r5
 800ea4e:	17ed      	asrs	r5, r5, #31
 800ea50:	e7eb      	b.n	800ea2a <_vfiprintf_r+0x356>
 800ea52:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ea56:	d003      	beq.n	800ea60 <_vfiprintf_r+0x38c>
 800ea58:	b22c      	sxth	r4, r5
 800ea5a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ea5e:	e7e4      	b.n	800ea2a <_vfiprintf_r+0x356>
 800ea60:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ea64:	d0f2      	beq.n	800ea4c <_vfiprintf_r+0x378>
 800ea66:	b26c      	sxtb	r4, r5
 800ea68:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ea6c:	e7dd      	b.n	800ea2a <_vfiprintf_r+0x356>
 800ea6e:	f01a 0f20 	tst.w	sl, #32
 800ea72:	f104 0b04 	add.w	fp, r4, #4
 800ea76:	d007      	beq.n	800ea88 <_vfiprintf_r+0x3b4>
 800ea78:	9a02      	ldr	r2, [sp, #8]
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	9902      	ldr	r1, [sp, #8]
 800ea7e:	17d2      	asrs	r2, r2, #31
 800ea80:	e9c3 1200 	strd	r1, r2, [r3]
 800ea84:	465c      	mov	r4, fp
 800ea86:	e68c      	b.n	800e7a2 <_vfiprintf_r+0xce>
 800ea88:	f01a 0f10 	tst.w	sl, #16
 800ea8c:	d003      	beq.n	800ea96 <_vfiprintf_r+0x3c2>
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	9a02      	ldr	r2, [sp, #8]
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	e7f6      	b.n	800ea84 <_vfiprintf_r+0x3b0>
 800ea96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ea9a:	d003      	beq.n	800eaa4 <_vfiprintf_r+0x3d0>
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	9a02      	ldr	r2, [sp, #8]
 800eaa0:	801a      	strh	r2, [r3, #0]
 800eaa2:	e7ef      	b.n	800ea84 <_vfiprintf_r+0x3b0>
 800eaa4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eaa8:	d0f1      	beq.n	800ea8e <_vfiprintf_r+0x3ba>
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	9a02      	ldr	r2, [sp, #8]
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	e7e8      	b.n	800ea84 <_vfiprintf_r+0x3b0>
 800eab2:	f04a 0a10 	orr.w	sl, sl, #16
 800eab6:	f01a 0320 	ands.w	r3, sl, #32
 800eaba:	d01f      	beq.n	800eafc <_vfiprintf_r+0x428>
 800eabc:	3407      	adds	r4, #7
 800eabe:	f024 0307 	bic.w	r3, r4, #7
 800eac2:	469b      	mov	fp, r3
 800eac4:	685d      	ldr	r5, [r3, #4]
 800eac6:	f85b 4b08 	ldr.w	r4, [fp], #8
 800eaca:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800eace:	2300      	movs	r3, #0
 800ead0:	2200      	movs	r2, #0
 800ead2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800ead6:	9a00      	ldr	r2, [sp, #0]
 800ead8:	3201      	adds	r2, #1
 800eada:	f000 8262 	beq.w	800efa2 <_vfiprintf_r+0x8ce>
 800eade:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800eae2:	9204      	str	r2, [sp, #16]
 800eae4:	ea54 0205 	orrs.w	r2, r4, r5
 800eae8:	f040 8261 	bne.w	800efae <_vfiprintf_r+0x8da>
 800eaec:	9a00      	ldr	r2, [sp, #0]
 800eaee:	2a00      	cmp	r2, #0
 800eaf0:	f000 8199 	beq.w	800ee26 <_vfiprintf_r+0x752>
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	f040 825d 	bne.w	800efb4 <_vfiprintf_r+0x8e0>
 800eafa:	e139      	b.n	800ed70 <_vfiprintf_r+0x69c>
 800eafc:	46a3      	mov	fp, r4
 800eafe:	f01a 0510 	ands.w	r5, sl, #16
 800eb02:	f85b 4b04 	ldr.w	r4, [fp], #4
 800eb06:	d001      	beq.n	800eb0c <_vfiprintf_r+0x438>
 800eb08:	461d      	mov	r5, r3
 800eb0a:	e7de      	b.n	800eaca <_vfiprintf_r+0x3f6>
 800eb0c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800eb10:	d001      	beq.n	800eb16 <_vfiprintf_r+0x442>
 800eb12:	b2a4      	uxth	r4, r4
 800eb14:	e7d9      	b.n	800eaca <_vfiprintf_r+0x3f6>
 800eb16:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800eb1a:	d0d6      	beq.n	800eaca <_vfiprintf_r+0x3f6>
 800eb1c:	b2e4      	uxtb	r4, r4
 800eb1e:	e7f3      	b.n	800eb08 <_vfiprintf_r+0x434>
 800eb20:	2330      	movs	r3, #48	; 0x30
 800eb22:	46a3      	mov	fp, r4
 800eb24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800eb28:	2378      	movs	r3, #120	; 0x78
 800eb2a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800eb2e:	f85b 4b04 	ldr.w	r4, [fp], #4
 800eb32:	4b03      	ldr	r3, [pc, #12]	; (800eb40 <_vfiprintf_r+0x46c>)
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	2500      	movs	r5, #0
 800eb38:	f04a 0a02 	orr.w	sl, sl, #2
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	e7c7      	b.n	800ead0 <_vfiprintf_r+0x3fc>
 800eb40:	08011269 	.word	0x08011269
 800eb44:	9b00      	ldr	r3, [sp, #0]
 800eb46:	46a3      	mov	fp, r4
 800eb48:	2500      	movs	r5, #0
 800eb4a:	1c5c      	adds	r4, r3, #1
 800eb4c:	f85b 8b04 	ldr.w	r8, [fp], #4
 800eb50:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800eb54:	f000 80ce 	beq.w	800ecf4 <_vfiprintf_r+0x620>
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	f7f1 fb77 	bl	8000250 <memchr>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	f000 8174 	beq.w	800ee50 <_vfiprintf_r+0x77c>
 800eb68:	eba0 0308 	sub.w	r3, r0, r8
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	9b00      	ldr	r3, [sp, #0]
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	bfb8      	it	lt
 800eb74:	462b      	movlt	r3, r5
 800eb76:	9304      	str	r3, [sp, #16]
 800eb78:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800eb7c:	b113      	cbz	r3, 800eb84 <_vfiprintf_r+0x4b0>
 800eb7e:	9b04      	ldr	r3, [sp, #16]
 800eb80:	3301      	adds	r3, #1
 800eb82:	9304      	str	r3, [sp, #16]
 800eb84:	f01a 0302 	ands.w	r3, sl, #2
 800eb88:	9308      	str	r3, [sp, #32]
 800eb8a:	bf1e      	ittt	ne
 800eb8c:	9b04      	ldrne	r3, [sp, #16]
 800eb8e:	3302      	addne	r3, #2
 800eb90:	9304      	strne	r3, [sp, #16]
 800eb92:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800eb96:	9309      	str	r3, [sp, #36]	; 0x24
 800eb98:	d11f      	bne.n	800ebda <_vfiprintf_r+0x506>
 800eb9a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eb9e:	1a9c      	subs	r4, r3, r2
 800eba0:	2c00      	cmp	r4, #0
 800eba2:	dd1a      	ble.n	800ebda <_vfiprintf_r+0x506>
 800eba4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800eba8:	48aa      	ldr	r0, [pc, #680]	; (800ee54 <_vfiprintf_r+0x780>)
 800ebaa:	6030      	str	r0, [r6, #0]
 800ebac:	2c10      	cmp	r4, #16
 800ebae:	f103 0301 	add.w	r3, r3, #1
 800ebb2:	f106 0108 	add.w	r1, r6, #8
 800ebb6:	f300 8153 	bgt.w	800ee60 <_vfiprintf_r+0x78c>
 800ebba:	6074      	str	r4, [r6, #4]
 800ebbc:	2b07      	cmp	r3, #7
 800ebbe:	4414      	add	r4, r2
 800ebc0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ebc4:	f340 815e 	ble.w	800ee84 <_vfiprintf_r+0x7b0>
 800ebc8:	aa0c      	add	r2, sp, #48	; 0x30
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4648      	mov	r0, r9
 800ebce:	f7ff fd4f 	bl	800e670 <__sprint_r>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f040 81b7 	bne.w	800ef46 <_vfiprintf_r+0x872>
 800ebd8:	ae0f      	add	r6, sp, #60	; 0x3c
 800ebda:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ebde:	b173      	cbz	r3, 800ebfe <_vfiprintf_r+0x52a>
 800ebe0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800ebe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebe6:	6032      	str	r2, [r6, #0]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	6072      	str	r2, [r6, #4]
 800ebec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebee:	3301      	adds	r3, #1
 800ebf0:	3201      	adds	r2, #1
 800ebf2:	2b07      	cmp	r3, #7
 800ebf4:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ebf8:	f300 8146 	bgt.w	800ee88 <_vfiprintf_r+0x7b4>
 800ebfc:	3608      	adds	r6, #8
 800ebfe:	9b08      	ldr	r3, [sp, #32]
 800ec00:	b16b      	cbz	r3, 800ec1e <_vfiprintf_r+0x54a>
 800ec02:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec06:	6032      	str	r2, [r6, #0]
 800ec08:	2202      	movs	r2, #2
 800ec0a:	6072      	str	r2, [r6, #4]
 800ec0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec0e:	3301      	adds	r3, #1
 800ec10:	3202      	adds	r2, #2
 800ec12:	2b07      	cmp	r3, #7
 800ec14:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ec18:	f300 813f 	bgt.w	800ee9a <_vfiprintf_r+0x7c6>
 800ec1c:	3608      	adds	r6, #8
 800ec1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec20:	2b80      	cmp	r3, #128	; 0x80
 800ec22:	d11f      	bne.n	800ec64 <_vfiprintf_r+0x590>
 800ec24:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ec28:	1a9c      	subs	r4, r3, r2
 800ec2a:	2c00      	cmp	r4, #0
 800ec2c:	dd1a      	ble.n	800ec64 <_vfiprintf_r+0x590>
 800ec2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ec32:	4889      	ldr	r0, [pc, #548]	; (800ee58 <_vfiprintf_r+0x784>)
 800ec34:	6030      	str	r0, [r6, #0]
 800ec36:	2c10      	cmp	r4, #16
 800ec38:	f103 0301 	add.w	r3, r3, #1
 800ec3c:	f106 0108 	add.w	r1, r6, #8
 800ec40:	f300 8134 	bgt.w	800eeac <_vfiprintf_r+0x7d8>
 800ec44:	6074      	str	r4, [r6, #4]
 800ec46:	2b07      	cmp	r3, #7
 800ec48:	4414      	add	r4, r2
 800ec4a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ec4e:	f340 813f 	ble.w	800eed0 <_vfiprintf_r+0x7fc>
 800ec52:	aa0c      	add	r2, sp, #48	; 0x30
 800ec54:	4639      	mov	r1, r7
 800ec56:	4648      	mov	r0, r9
 800ec58:	f7ff fd0a 	bl	800e670 <__sprint_r>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	f040 8172 	bne.w	800ef46 <_vfiprintf_r+0x872>
 800ec62:	ae0f      	add	r6, sp, #60	; 0x3c
 800ec64:	9b00      	ldr	r3, [sp, #0]
 800ec66:	1aec      	subs	r4, r5, r3
 800ec68:	2c00      	cmp	r4, #0
 800ec6a:	dd1a      	ble.n	800eca2 <_vfiprintf_r+0x5ce>
 800ec6c:	4d7a      	ldr	r5, [pc, #488]	; (800ee58 <_vfiprintf_r+0x784>)
 800ec6e:	6035      	str	r5, [r6, #0]
 800ec70:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800ec74:	2c10      	cmp	r4, #16
 800ec76:	f103 0301 	add.w	r3, r3, #1
 800ec7a:	f106 0208 	add.w	r2, r6, #8
 800ec7e:	f300 8129 	bgt.w	800eed4 <_vfiprintf_r+0x800>
 800ec82:	6074      	str	r4, [r6, #4]
 800ec84:	2b07      	cmp	r3, #7
 800ec86:	440c      	add	r4, r1
 800ec88:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800ec8c:	f340 8133 	ble.w	800eef6 <_vfiprintf_r+0x822>
 800ec90:	aa0c      	add	r2, sp, #48	; 0x30
 800ec92:	4639      	mov	r1, r7
 800ec94:	4648      	mov	r0, r9
 800ec96:	f7ff fceb 	bl	800e670 <__sprint_r>
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	f040 8153 	bne.w	800ef46 <_vfiprintf_r+0x872>
 800eca0:	ae0f      	add	r6, sp, #60	; 0x3c
 800eca2:	9b00      	ldr	r3, [sp, #0]
 800eca4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eca6:	6073      	str	r3, [r6, #4]
 800eca8:	4418      	add	r0, r3
 800ecaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecac:	f8c6 8000 	str.w	r8, [r6]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	2b07      	cmp	r3, #7
 800ecb4:	900e      	str	r0, [sp, #56]	; 0x38
 800ecb6:	930d      	str	r3, [sp, #52]	; 0x34
 800ecb8:	f300 811f 	bgt.w	800eefa <_vfiprintf_r+0x826>
 800ecbc:	f106 0308 	add.w	r3, r6, #8
 800ecc0:	f01a 0f04 	tst.w	sl, #4
 800ecc4:	f040 8121 	bne.w	800ef0a <_vfiprintf_r+0x836>
 800ecc8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eccc:	9904      	ldr	r1, [sp, #16]
 800ecce:	428a      	cmp	r2, r1
 800ecd0:	bfac      	ite	ge
 800ecd2:	189b      	addge	r3, r3, r2
 800ecd4:	185b      	addlt	r3, r3, r1
 800ecd6:	9302      	str	r3, [sp, #8]
 800ecd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecda:	b13b      	cbz	r3, 800ecec <_vfiprintf_r+0x618>
 800ecdc:	aa0c      	add	r2, sp, #48	; 0x30
 800ecde:	4639      	mov	r1, r7
 800ece0:	4648      	mov	r0, r9
 800ece2:	f7ff fcc5 	bl	800e670 <__sprint_r>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f040 812d 	bne.w	800ef46 <_vfiprintf_r+0x872>
 800ecec:	2300      	movs	r3, #0
 800ecee:	930d      	str	r3, [sp, #52]	; 0x34
 800ecf0:	ae0f      	add	r6, sp, #60	; 0x3c
 800ecf2:	e6c7      	b.n	800ea84 <_vfiprintf_r+0x3b0>
 800ecf4:	4640      	mov	r0, r8
 800ecf6:	f7f1 faa3 	bl	8000240 <strlen>
 800ecfa:	9000      	str	r0, [sp, #0]
 800ecfc:	e737      	b.n	800eb6e <_vfiprintf_r+0x49a>
 800ecfe:	f04a 0a10 	orr.w	sl, sl, #16
 800ed02:	f01a 0320 	ands.w	r3, sl, #32
 800ed06:	d008      	beq.n	800ed1a <_vfiprintf_r+0x646>
 800ed08:	3407      	adds	r4, #7
 800ed0a:	f024 0307 	bic.w	r3, r4, #7
 800ed0e:	469b      	mov	fp, r3
 800ed10:	685d      	ldr	r5, [r3, #4]
 800ed12:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ed16:	2301      	movs	r3, #1
 800ed18:	e6da      	b.n	800ead0 <_vfiprintf_r+0x3fc>
 800ed1a:	46a3      	mov	fp, r4
 800ed1c:	f01a 0510 	ands.w	r5, sl, #16
 800ed20:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ed24:	d001      	beq.n	800ed2a <_vfiprintf_r+0x656>
 800ed26:	461d      	mov	r5, r3
 800ed28:	e7f5      	b.n	800ed16 <_vfiprintf_r+0x642>
 800ed2a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ed2e:	d001      	beq.n	800ed34 <_vfiprintf_r+0x660>
 800ed30:	b2a4      	uxth	r4, r4
 800ed32:	e7f0      	b.n	800ed16 <_vfiprintf_r+0x642>
 800ed34:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ed38:	d0ed      	beq.n	800ed16 <_vfiprintf_r+0x642>
 800ed3a:	b2e4      	uxtb	r4, r4
 800ed3c:	e7f3      	b.n	800ed26 <_vfiprintf_r+0x652>
 800ed3e:	4a47      	ldr	r2, [pc, #284]	; (800ee5c <_vfiprintf_r+0x788>)
 800ed40:	e5c5      	b.n	800e8ce <_vfiprintf_r+0x1fa>
 800ed42:	46a3      	mov	fp, r4
 800ed44:	f01a 0510 	ands.w	r5, sl, #16
 800ed48:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ed4c:	d001      	beq.n	800ed52 <_vfiprintf_r+0x67e>
 800ed4e:	4615      	mov	r5, r2
 800ed50:	e5c9      	b.n	800e8e6 <_vfiprintf_r+0x212>
 800ed52:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800ed56:	d001      	beq.n	800ed5c <_vfiprintf_r+0x688>
 800ed58:	b2a4      	uxth	r4, r4
 800ed5a:	e5c4      	b.n	800e8e6 <_vfiprintf_r+0x212>
 800ed5c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ed60:	f43f adc1 	beq.w	800e8e6 <_vfiprintf_r+0x212>
 800ed64:	b2e4      	uxtb	r4, r4
 800ed66:	e7f2      	b.n	800ed4e <_vfiprintf_r+0x67a>
 800ed68:	2c0a      	cmp	r4, #10
 800ed6a:	f175 0300 	sbcs.w	r3, r5, #0
 800ed6e:	d205      	bcs.n	800ed7c <_vfiprintf_r+0x6a8>
 800ed70:	3430      	adds	r4, #48	; 0x30
 800ed72:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800ed76:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800ed7a:	e137      	b.n	800efec <_vfiprintf_r+0x918>
 800ed7c:	ab38      	add	r3, sp, #224	; 0xe0
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	9b04      	ldr	r3, [sp, #16]
 800ed82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed86:	f04f 0a00 	mov.w	sl, #0
 800ed8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8c:	9b08      	ldr	r3, [sp, #32]
 800ed8e:	220a      	movs	r2, #10
 800ed90:	f103 38ff 	add.w	r8, r3, #4294967295
 800ed94:	4620      	mov	r0, r4
 800ed96:	2300      	movs	r3, #0
 800ed98:	4629      	mov	r1, r5
 800ed9a:	f7f1 fc65 	bl	8000668 <__aeabi_uldivmod>
 800ed9e:	9b08      	ldr	r3, [sp, #32]
 800eda0:	3230      	adds	r2, #48	; 0x30
 800eda2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda8:	f10a 0a01 	add.w	sl, sl, #1
 800edac:	b1db      	cbz	r3, 800ede6 <_vfiprintf_r+0x712>
 800edae:	9b06      	ldr	r3, [sp, #24]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	4553      	cmp	r3, sl
 800edb4:	d117      	bne.n	800ede6 <_vfiprintf_r+0x712>
 800edb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800edba:	d014      	beq.n	800ede6 <_vfiprintf_r+0x712>
 800edbc:	2c0a      	cmp	r4, #10
 800edbe:	f175 0300 	sbcs.w	r3, r5, #0
 800edc2:	d310      	bcc.n	800ede6 <_vfiprintf_r+0x712>
 800edc4:	9b07      	ldr	r3, [sp, #28]
 800edc6:	eba8 0803 	sub.w	r8, r8, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	ee18 1a10 	vmov	r1, s16
 800edd0:	4640      	mov	r0, r8
 800edd2:	f7fd fa16 	bl	800c202 <strncpy>
 800edd6:	9b06      	ldr	r3, [sp, #24]
 800edd8:	785b      	ldrb	r3, [r3, #1]
 800edda:	b1a3      	cbz	r3, 800ee06 <_vfiprintf_r+0x732>
 800eddc:	9b06      	ldr	r3, [sp, #24]
 800edde:	3301      	adds	r3, #1
 800ede0:	9306      	str	r3, [sp, #24]
 800ede2:	f04f 0a00 	mov.w	sl, #0
 800ede6:	2300      	movs	r3, #0
 800ede8:	220a      	movs	r2, #10
 800edea:	4620      	mov	r0, r4
 800edec:	4629      	mov	r1, r5
 800edee:	f7f1 fc3b 	bl	8000668 <__aeabi_uldivmod>
 800edf2:	2c0a      	cmp	r4, #10
 800edf4:	f175 0300 	sbcs.w	r3, r5, #0
 800edf8:	f0c0 80f8 	bcc.w	800efec <_vfiprintf_r+0x918>
 800edfc:	4604      	mov	r4, r0
 800edfe:	460d      	mov	r5, r1
 800ee00:	f8cd 8020 	str.w	r8, [sp, #32]
 800ee04:	e7c2      	b.n	800ed8c <_vfiprintf_r+0x6b8>
 800ee06:	469a      	mov	sl, r3
 800ee08:	e7ed      	b.n	800ede6 <_vfiprintf_r+0x712>
 800ee0a:	f004 030f 	and.w	r3, r4, #15
 800ee0e:	9a05      	ldr	r2, [sp, #20]
 800ee10:	0924      	lsrs	r4, r4, #4
 800ee12:	5cd3      	ldrb	r3, [r2, r3]
 800ee14:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ee18:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ee1c:	092d      	lsrs	r5, r5, #4
 800ee1e:	ea54 0305 	orrs.w	r3, r4, r5
 800ee22:	d1f2      	bne.n	800ee0a <_vfiprintf_r+0x736>
 800ee24:	e0e2      	b.n	800efec <_vfiprintf_r+0x918>
 800ee26:	b933      	cbnz	r3, 800ee36 <_vfiprintf_r+0x762>
 800ee28:	f01a 0f01 	tst.w	sl, #1
 800ee2c:	d003      	beq.n	800ee36 <_vfiprintf_r+0x762>
 800ee2e:	2330      	movs	r3, #48	; 0x30
 800ee30:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800ee34:	e79f      	b.n	800ed76 <_vfiprintf_r+0x6a2>
 800ee36:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ee3a:	e0d7      	b.n	800efec <_vfiprintf_r+0x918>
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 80a3 	beq.w	800ef88 <_vfiprintf_r+0x8b4>
 800ee42:	2100      	movs	r1, #0
 800ee44:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ee48:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ee4c:	46a3      	mov	fp, r4
 800ee4e:	e5da      	b.n	800ea06 <_vfiprintf_r+0x332>
 800ee50:	4605      	mov	r5, r0
 800ee52:	e68c      	b.n	800eb6e <_vfiprintf_r+0x49a>
 800ee54:	08011628 	.word	0x08011628
 800ee58:	08011638 	.word	0x08011638
 800ee5c:	0801127a 	.word	0x0801127a
 800ee60:	2010      	movs	r0, #16
 800ee62:	4402      	add	r2, r0
 800ee64:	2b07      	cmp	r3, #7
 800ee66:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ee6a:	6070      	str	r0, [r6, #4]
 800ee6c:	dd07      	ble.n	800ee7e <_vfiprintf_r+0x7aa>
 800ee6e:	aa0c      	add	r2, sp, #48	; 0x30
 800ee70:	4639      	mov	r1, r7
 800ee72:	4648      	mov	r0, r9
 800ee74:	f7ff fbfc 	bl	800e670 <__sprint_r>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d164      	bne.n	800ef46 <_vfiprintf_r+0x872>
 800ee7c:	a90f      	add	r1, sp, #60	; 0x3c
 800ee7e:	3c10      	subs	r4, #16
 800ee80:	460e      	mov	r6, r1
 800ee82:	e68f      	b.n	800eba4 <_vfiprintf_r+0x4d0>
 800ee84:	460e      	mov	r6, r1
 800ee86:	e6a8      	b.n	800ebda <_vfiprintf_r+0x506>
 800ee88:	aa0c      	add	r2, sp, #48	; 0x30
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	4648      	mov	r0, r9
 800ee8e:	f7ff fbef 	bl	800e670 <__sprint_r>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d157      	bne.n	800ef46 <_vfiprintf_r+0x872>
 800ee96:	ae0f      	add	r6, sp, #60	; 0x3c
 800ee98:	e6b1      	b.n	800ebfe <_vfiprintf_r+0x52a>
 800ee9a:	aa0c      	add	r2, sp, #48	; 0x30
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	4648      	mov	r0, r9
 800eea0:	f7ff fbe6 	bl	800e670 <__sprint_r>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d14e      	bne.n	800ef46 <_vfiprintf_r+0x872>
 800eea8:	ae0f      	add	r6, sp, #60	; 0x3c
 800eeaa:	e6b8      	b.n	800ec1e <_vfiprintf_r+0x54a>
 800eeac:	2010      	movs	r0, #16
 800eeae:	4402      	add	r2, r0
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800eeb6:	6070      	str	r0, [r6, #4]
 800eeb8:	dd07      	ble.n	800eeca <_vfiprintf_r+0x7f6>
 800eeba:	aa0c      	add	r2, sp, #48	; 0x30
 800eebc:	4639      	mov	r1, r7
 800eebe:	4648      	mov	r0, r9
 800eec0:	f7ff fbd6 	bl	800e670 <__sprint_r>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	d13e      	bne.n	800ef46 <_vfiprintf_r+0x872>
 800eec8:	a90f      	add	r1, sp, #60	; 0x3c
 800eeca:	3c10      	subs	r4, #16
 800eecc:	460e      	mov	r6, r1
 800eece:	e6ae      	b.n	800ec2e <_vfiprintf_r+0x55a>
 800eed0:	460e      	mov	r6, r1
 800eed2:	e6c7      	b.n	800ec64 <_vfiprintf_r+0x590>
 800eed4:	2010      	movs	r0, #16
 800eed6:	4401      	add	r1, r0
 800eed8:	2b07      	cmp	r3, #7
 800eeda:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800eede:	6070      	str	r0, [r6, #4]
 800eee0:	dd06      	ble.n	800eef0 <_vfiprintf_r+0x81c>
 800eee2:	aa0c      	add	r2, sp, #48	; 0x30
 800eee4:	4639      	mov	r1, r7
 800eee6:	4648      	mov	r0, r9
 800eee8:	f7ff fbc2 	bl	800e670 <__sprint_r>
 800eeec:	bb58      	cbnz	r0, 800ef46 <_vfiprintf_r+0x872>
 800eeee:	aa0f      	add	r2, sp, #60	; 0x3c
 800eef0:	3c10      	subs	r4, #16
 800eef2:	4616      	mov	r6, r2
 800eef4:	e6bb      	b.n	800ec6e <_vfiprintf_r+0x59a>
 800eef6:	4616      	mov	r6, r2
 800eef8:	e6d3      	b.n	800eca2 <_vfiprintf_r+0x5ce>
 800eefa:	aa0c      	add	r2, sp, #48	; 0x30
 800eefc:	4639      	mov	r1, r7
 800eefe:	4648      	mov	r0, r9
 800ef00:	f7ff fbb6 	bl	800e670 <__sprint_r>
 800ef04:	b9f8      	cbnz	r0, 800ef46 <_vfiprintf_r+0x872>
 800ef06:	ab0f      	add	r3, sp, #60	; 0x3c
 800ef08:	e6da      	b.n	800ecc0 <_vfiprintf_r+0x5ec>
 800ef0a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ef0e:	1a54      	subs	r4, r2, r1
 800ef10:	2c00      	cmp	r4, #0
 800ef12:	f77f aed9 	ble.w	800ecc8 <_vfiprintf_r+0x5f4>
 800ef16:	4d39      	ldr	r5, [pc, #228]	; (800effc <_vfiprintf_r+0x928>)
 800ef18:	2610      	movs	r6, #16
 800ef1a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ef1e:	2c10      	cmp	r4, #16
 800ef20:	f102 0201 	add.w	r2, r2, #1
 800ef24:	601d      	str	r5, [r3, #0]
 800ef26:	dc1d      	bgt.n	800ef64 <_vfiprintf_r+0x890>
 800ef28:	605c      	str	r4, [r3, #4]
 800ef2a:	2a07      	cmp	r2, #7
 800ef2c:	440c      	add	r4, r1
 800ef2e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800ef32:	f77f aec9 	ble.w	800ecc8 <_vfiprintf_r+0x5f4>
 800ef36:	aa0c      	add	r2, sp, #48	; 0x30
 800ef38:	4639      	mov	r1, r7
 800ef3a:	4648      	mov	r0, r9
 800ef3c:	f7ff fb98 	bl	800e670 <__sprint_r>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	f43f aec1 	beq.w	800ecc8 <_vfiprintf_r+0x5f4>
 800ef46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef48:	07d9      	lsls	r1, r3, #31
 800ef4a:	d405      	bmi.n	800ef58 <_vfiprintf_r+0x884>
 800ef4c:	89bb      	ldrh	r3, [r7, #12]
 800ef4e:	059a      	lsls	r2, r3, #22
 800ef50:	d402      	bmi.n	800ef58 <_vfiprintf_r+0x884>
 800ef52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ef54:	f7fb feab 	bl	800acae <__retarget_lock_release_recursive>
 800ef58:	89bb      	ldrh	r3, [r7, #12]
 800ef5a:	065b      	lsls	r3, r3, #25
 800ef5c:	f57f abed 	bpl.w	800e73a <_vfiprintf_r+0x66>
 800ef60:	f7ff bbe8 	b.w	800e734 <_vfiprintf_r+0x60>
 800ef64:	3110      	adds	r1, #16
 800ef66:	2a07      	cmp	r2, #7
 800ef68:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800ef6c:	605e      	str	r6, [r3, #4]
 800ef6e:	dc02      	bgt.n	800ef76 <_vfiprintf_r+0x8a2>
 800ef70:	3308      	adds	r3, #8
 800ef72:	3c10      	subs	r4, #16
 800ef74:	e7d1      	b.n	800ef1a <_vfiprintf_r+0x846>
 800ef76:	aa0c      	add	r2, sp, #48	; 0x30
 800ef78:	4639      	mov	r1, r7
 800ef7a:	4648      	mov	r0, r9
 800ef7c:	f7ff fb78 	bl	800e670 <__sprint_r>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d1e0      	bne.n	800ef46 <_vfiprintf_r+0x872>
 800ef84:	ab0f      	add	r3, sp, #60	; 0x3c
 800ef86:	e7f4      	b.n	800ef72 <_vfiprintf_r+0x89e>
 800ef88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef8a:	b913      	cbnz	r3, 800ef92 <_vfiprintf_r+0x8be>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ef90:	e7d9      	b.n	800ef46 <_vfiprintf_r+0x872>
 800ef92:	aa0c      	add	r2, sp, #48	; 0x30
 800ef94:	4639      	mov	r1, r7
 800ef96:	4648      	mov	r0, r9
 800ef98:	f7ff fb6a 	bl	800e670 <__sprint_r>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d0f5      	beq.n	800ef8c <_vfiprintf_r+0x8b8>
 800efa0:	e7d1      	b.n	800ef46 <_vfiprintf_r+0x872>
 800efa2:	ea54 0205 	orrs.w	r2, r4, r5
 800efa6:	f8cd a010 	str.w	sl, [sp, #16]
 800efaa:	f43f ada3 	beq.w	800eaf4 <_vfiprintf_r+0x420>
 800efae:	2b01      	cmp	r3, #1
 800efb0:	f43f aeda 	beq.w	800ed68 <_vfiprintf_r+0x694>
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800efba:	f43f af26 	beq.w	800ee0a <_vfiprintf_r+0x736>
 800efbe:	f004 0307 	and.w	r3, r4, #7
 800efc2:	08e4      	lsrs	r4, r4, #3
 800efc4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800efc8:	08ed      	lsrs	r5, r5, #3
 800efca:	3330      	adds	r3, #48	; 0x30
 800efcc:	ea54 0105 	orrs.w	r1, r4, r5
 800efd0:	4642      	mov	r2, r8
 800efd2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800efd6:	d1f2      	bne.n	800efbe <_vfiprintf_r+0x8ea>
 800efd8:	9904      	ldr	r1, [sp, #16]
 800efda:	07c8      	lsls	r0, r1, #31
 800efdc:	d506      	bpl.n	800efec <_vfiprintf_r+0x918>
 800efde:	2b30      	cmp	r3, #48	; 0x30
 800efe0:	d004      	beq.n	800efec <_vfiprintf_r+0x918>
 800efe2:	2330      	movs	r3, #48	; 0x30
 800efe4:	f808 3c01 	strb.w	r3, [r8, #-1]
 800efe8:	f1a2 0802 	sub.w	r8, r2, #2
 800efec:	ab38      	add	r3, sp, #224	; 0xe0
 800efee:	eba3 0308 	sub.w	r3, r3, r8
 800eff2:	9d00      	ldr	r5, [sp, #0]
 800eff4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	e5b8      	b.n	800eb6e <_vfiprintf_r+0x49a>
 800effc:	08011628 	.word	0x08011628

0800f000 <__sbprintf>:
 800f000:	b570      	push	{r4, r5, r6, lr}
 800f002:	460c      	mov	r4, r1
 800f004:	8989      	ldrh	r1, [r1, #12]
 800f006:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f00a:	f021 0102 	bic.w	r1, r1, #2
 800f00e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f012:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f014:	911b      	str	r1, [sp, #108]	; 0x6c
 800f016:	89e1      	ldrh	r1, [r4, #14]
 800f018:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f01c:	69e1      	ldr	r1, [r4, #28]
 800f01e:	9109      	str	r1, [sp, #36]	; 0x24
 800f020:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f022:	910b      	str	r1, [sp, #44]	; 0x2c
 800f024:	a91c      	add	r1, sp, #112	; 0x70
 800f026:	9102      	str	r1, [sp, #8]
 800f028:	9106      	str	r1, [sp, #24]
 800f02a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f02e:	4606      	mov	r6, r0
 800f030:	9104      	str	r1, [sp, #16]
 800f032:	9107      	str	r1, [sp, #28]
 800f034:	a818      	add	r0, sp, #96	; 0x60
 800f036:	2100      	movs	r1, #0
 800f038:	e9cd 3200 	strd	r3, r2, [sp]
 800f03c:	9108      	str	r1, [sp, #32]
 800f03e:	f7fb fe33 	bl	800aca8 <__retarget_lock_init_recursive>
 800f042:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f046:	a902      	add	r1, sp, #8
 800f048:	4630      	mov	r0, r6
 800f04a:	f7ff fb43 	bl	800e6d4 <_vfiprintf_r>
 800f04e:	1e05      	subs	r5, r0, #0
 800f050:	db07      	blt.n	800f062 <__sbprintf+0x62>
 800f052:	a902      	add	r1, sp, #8
 800f054:	4630      	mov	r0, r6
 800f056:	f7fb fa53 	bl	800a500 <_fflush_r>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	bf18      	it	ne
 800f05e:	f04f 35ff 	movne.w	r5, #4294967295
 800f062:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f066:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f068:	065b      	lsls	r3, r3, #25
 800f06a:	bf42      	ittt	mi
 800f06c:	89a3      	ldrhmi	r3, [r4, #12]
 800f06e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f072:	81a3      	strhmi	r3, [r4, #12]
 800f074:	f7fb fe19 	bl	800acaa <__retarget_lock_close_recursive>
 800f078:	4628      	mov	r0, r5
 800f07a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f07e:	bd70      	pop	{r4, r5, r6, pc}

0800f080 <__ascii_wctomb>:
 800f080:	b149      	cbz	r1, 800f096 <__ascii_wctomb+0x16>
 800f082:	2aff      	cmp	r2, #255	; 0xff
 800f084:	bf85      	ittet	hi
 800f086:	238a      	movhi	r3, #138	; 0x8a
 800f088:	6003      	strhi	r3, [r0, #0]
 800f08a:	700a      	strbls	r2, [r1, #0]
 800f08c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f090:	bf98      	it	ls
 800f092:	2001      	movls	r0, #1
 800f094:	4770      	bx	lr
 800f096:	4608      	mov	r0, r1
 800f098:	4770      	bx	lr
	...

0800f09c <_write_r>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	4d07      	ldr	r5, [pc, #28]	; (800f0bc <_write_r+0x20>)
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	602a      	str	r2, [r5, #0]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	f7f3 f90e 	bl	80022cc <_write>
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	d102      	bne.n	800f0ba <_write_r+0x1e>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	b103      	cbz	r3, 800f0ba <_write_r+0x1e>
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	bd38      	pop	{r3, r4, r5, pc}
 800f0bc:	20000b4c 	.word	0x20000b4c

0800f0c0 <__register_exitproc>:
 800f0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800f140 <__register_exitproc+0x80>
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	f8da 0000 	ldr.w	r0, [sl]
 800f0ce:	4698      	mov	r8, r3
 800f0d0:	460f      	mov	r7, r1
 800f0d2:	4691      	mov	r9, r2
 800f0d4:	f7fb fdea 	bl	800acac <__retarget_lock_acquire_recursive>
 800f0d8:	4b18      	ldr	r3, [pc, #96]	; (800f13c <__register_exitproc+0x7c>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800f0e0:	b91c      	cbnz	r4, 800f0ea <__register_exitproc+0x2a>
 800f0e2:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800f0e6:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800f0ea:	6865      	ldr	r5, [r4, #4]
 800f0ec:	f8da 0000 	ldr.w	r0, [sl]
 800f0f0:	2d1f      	cmp	r5, #31
 800f0f2:	dd05      	ble.n	800f100 <__register_exitproc+0x40>
 800f0f4:	f7fb fddb 	bl	800acae <__retarget_lock_release_recursive>
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f100:	b19e      	cbz	r6, 800f12a <__register_exitproc+0x6a>
 800f102:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800f106:	2201      	movs	r2, #1
 800f108:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800f10c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800f110:	40aa      	lsls	r2, r5
 800f112:	4313      	orrs	r3, r2
 800f114:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800f118:	2e02      	cmp	r6, #2
 800f11a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800f11e:	bf02      	ittt	eq
 800f120:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800f124:	4313      	orreq	r3, r2
 800f126:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800f12a:	1c6b      	adds	r3, r5, #1
 800f12c:	3502      	adds	r5, #2
 800f12e:	6063      	str	r3, [r4, #4]
 800f130:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800f134:	f7fb fdbb 	bl	800acae <__retarget_lock_release_recursive>
 800f138:	2000      	movs	r0, #0
 800f13a:	e7df      	b.n	800f0fc <__register_exitproc+0x3c>
 800f13c:	08011230 	.word	0x08011230
 800f140:	20000438 	.word	0x20000438

0800f144 <__assert_func>:
 800f144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f146:	4614      	mov	r4, r2
 800f148:	461a      	mov	r2, r3
 800f14a:	4b09      	ldr	r3, [pc, #36]	; (800f170 <__assert_func+0x2c>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4605      	mov	r5, r0
 800f150:	68d8      	ldr	r0, [r3, #12]
 800f152:	b14c      	cbz	r4, 800f168 <__assert_func+0x24>
 800f154:	4b07      	ldr	r3, [pc, #28]	; (800f174 <__assert_func+0x30>)
 800f156:	9100      	str	r1, [sp, #0]
 800f158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f15c:	4906      	ldr	r1, [pc, #24]	; (800f178 <__assert_func+0x34>)
 800f15e:	462b      	mov	r3, r5
 800f160:	f000 f8ac 	bl	800f2bc <fiprintf>
 800f164:	f000 fdd6 	bl	800fd14 <abort>
 800f168:	4b04      	ldr	r3, [pc, #16]	; (800f17c <__assert_func+0x38>)
 800f16a:	461c      	mov	r4, r3
 800f16c:	e7f3      	b.n	800f156 <__assert_func+0x12>
 800f16e:	bf00      	nop
 800f170:	2000000c 	.word	0x2000000c
 800f174:	08011648 	.word	0x08011648
 800f178:	08011655 	.word	0x08011655
 800f17c:	08011683 	.word	0x08011683

0800f180 <_calloc_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	fba1 1502 	umull	r1, r5, r1, r2
 800f186:	b92d      	cbnz	r5, 800f194 <_calloc_r+0x14>
 800f188:	f7fb fe0e 	bl	800ada8 <_malloc_r>
 800f18c:	4604      	mov	r4, r0
 800f18e:	b938      	cbnz	r0, 800f1a0 <_calloc_r+0x20>
 800f190:	4620      	mov	r0, r4
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	f7f7 fc5a 	bl	8006a4c <__errno>
 800f198:	230c      	movs	r3, #12
 800f19a:	6003      	str	r3, [r0, #0]
 800f19c:	2400      	movs	r4, #0
 800f19e:	e7f7      	b.n	800f190 <_calloc_r+0x10>
 800f1a0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f1a4:	f022 0203 	bic.w	r2, r2, #3
 800f1a8:	3a04      	subs	r2, #4
 800f1aa:	2a24      	cmp	r2, #36	; 0x24
 800f1ac:	d819      	bhi.n	800f1e2 <_calloc_r+0x62>
 800f1ae:	2a13      	cmp	r2, #19
 800f1b0:	d915      	bls.n	800f1de <_calloc_r+0x5e>
 800f1b2:	2a1b      	cmp	r2, #27
 800f1b4:	e9c0 5500 	strd	r5, r5, [r0]
 800f1b8:	d806      	bhi.n	800f1c8 <_calloc_r+0x48>
 800f1ba:	f100 0308 	add.w	r3, r0, #8
 800f1be:	2200      	movs	r2, #0
 800f1c0:	e9c3 2200 	strd	r2, r2, [r3]
 800f1c4:	609a      	str	r2, [r3, #8]
 800f1c6:	e7e3      	b.n	800f190 <_calloc_r+0x10>
 800f1c8:	2a24      	cmp	r2, #36	; 0x24
 800f1ca:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800f1ce:	bf11      	iteee	ne
 800f1d0:	f100 0310 	addne.w	r3, r0, #16
 800f1d4:	6105      	streq	r5, [r0, #16]
 800f1d6:	f100 0318 	addeq.w	r3, r0, #24
 800f1da:	6145      	streq	r5, [r0, #20]
 800f1dc:	e7ef      	b.n	800f1be <_calloc_r+0x3e>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	e7ed      	b.n	800f1be <_calloc_r+0x3e>
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	f7f7 fc86 	bl	8006af4 <memset>
 800f1e8:	e7d2      	b.n	800f190 <_calloc_r+0x10>
	...

0800f1ec <_close_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4d06      	ldr	r5, [pc, #24]	; (800f208 <_close_r+0x1c>)
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	4608      	mov	r0, r1
 800f1f6:	602b      	str	r3, [r5, #0]
 800f1f8:	f7f3 f894 	bl	8002324 <_close>
 800f1fc:	1c43      	adds	r3, r0, #1
 800f1fe:	d102      	bne.n	800f206 <_close_r+0x1a>
 800f200:	682b      	ldr	r3, [r5, #0]
 800f202:	b103      	cbz	r3, 800f206 <_close_r+0x1a>
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	bd38      	pop	{r3, r4, r5, pc}
 800f208:	20000b4c 	.word	0x20000b4c

0800f20c <_fclose_r>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	4606      	mov	r6, r0
 800f210:	460c      	mov	r4, r1
 800f212:	b911      	cbnz	r1, 800f21a <_fclose_r+0xe>
 800f214:	2500      	movs	r5, #0
 800f216:	4628      	mov	r0, r5
 800f218:	bd70      	pop	{r4, r5, r6, pc}
 800f21a:	b118      	cbz	r0, 800f224 <_fclose_r+0x18>
 800f21c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f21e:	b90b      	cbnz	r3, 800f224 <_fclose_r+0x18>
 800f220:	f7fb f9ec 	bl	800a5fc <__sinit>
 800f224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f226:	07d8      	lsls	r0, r3, #31
 800f228:	d405      	bmi.n	800f236 <_fclose_r+0x2a>
 800f22a:	89a3      	ldrh	r3, [r4, #12]
 800f22c:	0599      	lsls	r1, r3, #22
 800f22e:	d402      	bmi.n	800f236 <_fclose_r+0x2a>
 800f230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f232:	f7fb fd3b 	bl	800acac <__retarget_lock_acquire_recursive>
 800f236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f23a:	b93b      	cbnz	r3, 800f24c <_fclose_r+0x40>
 800f23c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f23e:	f015 0501 	ands.w	r5, r5, #1
 800f242:	d1e7      	bne.n	800f214 <_fclose_r+0x8>
 800f244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f246:	f7fb fd32 	bl	800acae <__retarget_lock_release_recursive>
 800f24a:	e7e4      	b.n	800f216 <_fclose_r+0xa>
 800f24c:	4621      	mov	r1, r4
 800f24e:	4630      	mov	r0, r6
 800f250:	f7fb f8c8 	bl	800a3e4 <__sflush_r>
 800f254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f256:	4605      	mov	r5, r0
 800f258:	b133      	cbz	r3, 800f268 <_fclose_r+0x5c>
 800f25a:	69e1      	ldr	r1, [r4, #28]
 800f25c:	4630      	mov	r0, r6
 800f25e:	4798      	blx	r3
 800f260:	2800      	cmp	r0, #0
 800f262:	bfb8      	it	lt
 800f264:	f04f 35ff 	movlt.w	r5, #4294967295
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	061a      	lsls	r2, r3, #24
 800f26c:	d503      	bpl.n	800f276 <_fclose_r+0x6a>
 800f26e:	6921      	ldr	r1, [r4, #16]
 800f270:	4630      	mov	r0, r6
 800f272:	f7fb fabb 	bl	800a7ec <_free_r>
 800f276:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f278:	b141      	cbz	r1, 800f28c <_fclose_r+0x80>
 800f27a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f27e:	4299      	cmp	r1, r3
 800f280:	d002      	beq.n	800f288 <_fclose_r+0x7c>
 800f282:	4630      	mov	r0, r6
 800f284:	f7fb fab2 	bl	800a7ec <_free_r>
 800f288:	2300      	movs	r3, #0
 800f28a:	6323      	str	r3, [r4, #48]	; 0x30
 800f28c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f28e:	b121      	cbz	r1, 800f29a <_fclose_r+0x8e>
 800f290:	4630      	mov	r0, r6
 800f292:	f7fb faab 	bl	800a7ec <_free_r>
 800f296:	2300      	movs	r3, #0
 800f298:	6463      	str	r3, [r4, #68]	; 0x44
 800f29a:	f7fb f997 	bl	800a5cc <__sfp_lock_acquire>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	81a3      	strh	r3, [r4, #12]
 800f2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2a4:	07db      	lsls	r3, r3, #31
 800f2a6:	d402      	bmi.n	800f2ae <_fclose_r+0xa2>
 800f2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2aa:	f7fb fd00 	bl	800acae <__retarget_lock_release_recursive>
 800f2ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2b0:	f7fb fcfb 	bl	800acaa <__retarget_lock_close_recursive>
 800f2b4:	f7fb f990 	bl	800a5d8 <__sfp_lock_release>
 800f2b8:	e7ad      	b.n	800f216 <_fclose_r+0xa>
	...

0800f2bc <fiprintf>:
 800f2bc:	b40e      	push	{r1, r2, r3}
 800f2be:	b503      	push	{r0, r1, lr}
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	ab03      	add	r3, sp, #12
 800f2c4:	4805      	ldr	r0, [pc, #20]	; (800f2dc <fiprintf+0x20>)
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	f7ff fa01 	bl	800e6d4 <_vfiprintf_r>
 800f2d2:	b002      	add	sp, #8
 800f2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d8:	b003      	add	sp, #12
 800f2da:	4770      	bx	lr
 800f2dc:	2000000c 	.word	0x2000000c

0800f2e0 <__fputwc>:
 800f2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2e4:	4680      	mov	r8, r0
 800f2e6:	460e      	mov	r6, r1
 800f2e8:	4615      	mov	r5, r2
 800f2ea:	f7fb fcd3 	bl	800ac94 <__locale_mb_cur_max>
 800f2ee:	2801      	cmp	r0, #1
 800f2f0:	d11c      	bne.n	800f32c <__fputwc+0x4c>
 800f2f2:	1e73      	subs	r3, r6, #1
 800f2f4:	2bfe      	cmp	r3, #254	; 0xfe
 800f2f6:	d819      	bhi.n	800f32c <__fputwc+0x4c>
 800f2f8:	f88d 6004 	strb.w	r6, [sp, #4]
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	2700      	movs	r7, #0
 800f300:	f10d 0904 	add.w	r9, sp, #4
 800f304:	42a7      	cmp	r7, r4
 800f306:	d020      	beq.n	800f34a <__fputwc+0x6a>
 800f308:	68ab      	ldr	r3, [r5, #8]
 800f30a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f30e:	3b01      	subs	r3, #1
 800f310:	2b00      	cmp	r3, #0
 800f312:	60ab      	str	r3, [r5, #8]
 800f314:	da04      	bge.n	800f320 <__fputwc+0x40>
 800f316:	69aa      	ldr	r2, [r5, #24]
 800f318:	4293      	cmp	r3, r2
 800f31a:	db1a      	blt.n	800f352 <__fputwc+0x72>
 800f31c:	290a      	cmp	r1, #10
 800f31e:	d018      	beq.n	800f352 <__fputwc+0x72>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	1c5a      	adds	r2, r3, #1
 800f324:	602a      	str	r2, [r5, #0]
 800f326:	7019      	strb	r1, [r3, #0]
 800f328:	3701      	adds	r7, #1
 800f32a:	e7eb      	b.n	800f304 <__fputwc+0x24>
 800f32c:	a901      	add	r1, sp, #4
 800f32e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800f332:	4632      	mov	r2, r6
 800f334:	4640      	mov	r0, r8
 800f336:	f000 fcd7 	bl	800fce8 <_wcrtomb_r>
 800f33a:	1c41      	adds	r1, r0, #1
 800f33c:	4604      	mov	r4, r0
 800f33e:	d1de      	bne.n	800f2fe <__fputwc+0x1e>
 800f340:	89ab      	ldrh	r3, [r5, #12]
 800f342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f346:	81ab      	strh	r3, [r5, #12]
 800f348:	4606      	mov	r6, r0
 800f34a:	4630      	mov	r0, r6
 800f34c:	b003      	add	sp, #12
 800f34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f352:	462a      	mov	r2, r5
 800f354:	4640      	mov	r0, r8
 800f356:	f000 fc7e 	bl	800fc56 <__swbuf_r>
 800f35a:	1c42      	adds	r2, r0, #1
 800f35c:	d1e4      	bne.n	800f328 <__fputwc+0x48>
 800f35e:	4606      	mov	r6, r0
 800f360:	e7f3      	b.n	800f34a <__fputwc+0x6a>

0800f362 <_fputwc_r>:
 800f362:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f366:	4614      	mov	r4, r2
 800f368:	07da      	lsls	r2, r3, #31
 800f36a:	4605      	mov	r5, r0
 800f36c:	d407      	bmi.n	800f37e <_fputwc_r+0x1c>
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	059b      	lsls	r3, r3, #22
 800f372:	d404      	bmi.n	800f37e <_fputwc_r+0x1c>
 800f374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f376:	9101      	str	r1, [sp, #4]
 800f378:	f7fb fc98 	bl	800acac <__retarget_lock_acquire_recursive>
 800f37c:	9901      	ldr	r1, [sp, #4]
 800f37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f382:	0498      	lsls	r0, r3, #18
 800f384:	d406      	bmi.n	800f394 <_fputwc_r+0x32>
 800f386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f38a:	81a3      	strh	r3, [r4, #12]
 800f38c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f38e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f392:	6663      	str	r3, [r4, #100]	; 0x64
 800f394:	4622      	mov	r2, r4
 800f396:	4628      	mov	r0, r5
 800f398:	f7ff ffa2 	bl	800f2e0 <__fputwc>
 800f39c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f39e:	07da      	lsls	r2, r3, #31
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	d405      	bmi.n	800f3b0 <_fputwc_r+0x4e>
 800f3a4:	89a3      	ldrh	r3, [r4, #12]
 800f3a6:	059b      	lsls	r3, r3, #22
 800f3a8:	d402      	bmi.n	800f3b0 <_fputwc_r+0x4e>
 800f3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ac:	f7fb fc7f 	bl	800acae <__retarget_lock_release_recursive>
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	b003      	add	sp, #12
 800f3b4:	bd30      	pop	{r4, r5, pc}
	...

0800f3b8 <_fstat_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4d07      	ldr	r5, [pc, #28]	; (800f3d8 <_fstat_r+0x20>)
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4604      	mov	r4, r0
 800f3c0:	4608      	mov	r0, r1
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	f7f2 fffd 	bl	80023c4 <_fstat>
 800f3ca:	1c43      	adds	r3, r0, #1
 800f3cc:	d102      	bne.n	800f3d4 <_fstat_r+0x1c>
 800f3ce:	682b      	ldr	r3, [r5, #0]
 800f3d0:	b103      	cbz	r3, 800f3d4 <_fstat_r+0x1c>
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	bd38      	pop	{r3, r4, r5, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000b4c 	.word	0x20000b4c

0800f3dc <rshift>:
 800f3dc:	6903      	ldr	r3, [r0, #16]
 800f3de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f3e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f3ea:	f100 0414 	add.w	r4, r0, #20
 800f3ee:	dd45      	ble.n	800f47c <rshift+0xa0>
 800f3f0:	f011 011f 	ands.w	r1, r1, #31
 800f3f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f3f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f3fc:	d10c      	bne.n	800f418 <rshift+0x3c>
 800f3fe:	f100 0710 	add.w	r7, r0, #16
 800f402:	4629      	mov	r1, r5
 800f404:	42b1      	cmp	r1, r6
 800f406:	d334      	bcc.n	800f472 <rshift+0x96>
 800f408:	1a9b      	subs	r3, r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	1eea      	subs	r2, r5, #3
 800f40e:	4296      	cmp	r6, r2
 800f410:	bf38      	it	cc
 800f412:	2300      	movcc	r3, #0
 800f414:	4423      	add	r3, r4
 800f416:	e015      	b.n	800f444 <rshift+0x68>
 800f418:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f41c:	f1c1 0820 	rsb	r8, r1, #32
 800f420:	40cf      	lsrs	r7, r1
 800f422:	f105 0e04 	add.w	lr, r5, #4
 800f426:	46a1      	mov	r9, r4
 800f428:	4576      	cmp	r6, lr
 800f42a:	46f4      	mov	ip, lr
 800f42c:	d815      	bhi.n	800f45a <rshift+0x7e>
 800f42e:	1a9a      	subs	r2, r3, r2
 800f430:	0092      	lsls	r2, r2, #2
 800f432:	3a04      	subs	r2, #4
 800f434:	3501      	adds	r5, #1
 800f436:	42ae      	cmp	r6, r5
 800f438:	bf38      	it	cc
 800f43a:	2200      	movcc	r2, #0
 800f43c:	18a3      	adds	r3, r4, r2
 800f43e:	50a7      	str	r7, [r4, r2]
 800f440:	b107      	cbz	r7, 800f444 <rshift+0x68>
 800f442:	3304      	adds	r3, #4
 800f444:	1b1a      	subs	r2, r3, r4
 800f446:	42a3      	cmp	r3, r4
 800f448:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f44c:	bf08      	it	eq
 800f44e:	2300      	moveq	r3, #0
 800f450:	6102      	str	r2, [r0, #16]
 800f452:	bf08      	it	eq
 800f454:	6143      	streq	r3, [r0, #20]
 800f456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f45a:	f8dc c000 	ldr.w	ip, [ip]
 800f45e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f462:	ea4c 0707 	orr.w	r7, ip, r7
 800f466:	f849 7b04 	str.w	r7, [r9], #4
 800f46a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f46e:	40cf      	lsrs	r7, r1
 800f470:	e7da      	b.n	800f428 <rshift+0x4c>
 800f472:	f851 cb04 	ldr.w	ip, [r1], #4
 800f476:	f847 cf04 	str.w	ip, [r7, #4]!
 800f47a:	e7c3      	b.n	800f404 <rshift+0x28>
 800f47c:	4623      	mov	r3, r4
 800f47e:	e7e1      	b.n	800f444 <rshift+0x68>

0800f480 <__hexdig_fun>:
 800f480:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f484:	2b09      	cmp	r3, #9
 800f486:	d802      	bhi.n	800f48e <__hexdig_fun+0xe>
 800f488:	3820      	subs	r0, #32
 800f48a:	b2c0      	uxtb	r0, r0
 800f48c:	4770      	bx	lr
 800f48e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f492:	2b05      	cmp	r3, #5
 800f494:	d801      	bhi.n	800f49a <__hexdig_fun+0x1a>
 800f496:	3847      	subs	r0, #71	; 0x47
 800f498:	e7f7      	b.n	800f48a <__hexdig_fun+0xa>
 800f49a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f49e:	2b05      	cmp	r3, #5
 800f4a0:	d801      	bhi.n	800f4a6 <__hexdig_fun+0x26>
 800f4a2:	3827      	subs	r0, #39	; 0x27
 800f4a4:	e7f1      	b.n	800f48a <__hexdig_fun+0xa>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	4770      	bx	lr
	...

0800f4ac <__gethex>:
 800f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b0:	ed2d 8b02 	vpush	{d8}
 800f4b4:	b089      	sub	sp, #36	; 0x24
 800f4b6:	ee08 0a10 	vmov	s16, r0
 800f4ba:	9304      	str	r3, [sp, #16]
 800f4bc:	4bb4      	ldr	r3, [pc, #720]	; (800f790 <__gethex+0x2e4>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	468b      	mov	fp, r1
 800f4c6:	4690      	mov	r8, r2
 800f4c8:	f7f0 feba 	bl	8000240 <strlen>
 800f4cc:	9b01      	ldr	r3, [sp, #4]
 800f4ce:	f8db 2000 	ldr.w	r2, [fp]
 800f4d2:	4403      	add	r3, r0
 800f4d4:	4682      	mov	sl, r0
 800f4d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f4da:	9305      	str	r3, [sp, #20]
 800f4dc:	1c93      	adds	r3, r2, #2
 800f4de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f4e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f4e6:	32fe      	adds	r2, #254	; 0xfe
 800f4e8:	18d1      	adds	r1, r2, r3
 800f4ea:	461f      	mov	r7, r3
 800f4ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f4f0:	9100      	str	r1, [sp, #0]
 800f4f2:	2830      	cmp	r0, #48	; 0x30
 800f4f4:	d0f8      	beq.n	800f4e8 <__gethex+0x3c>
 800f4f6:	f7ff ffc3 	bl	800f480 <__hexdig_fun>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d13a      	bne.n	800f576 <__gethex+0xca>
 800f500:	9901      	ldr	r1, [sp, #4]
 800f502:	4652      	mov	r2, sl
 800f504:	4638      	mov	r0, r7
 800f506:	f000 fb17 	bl	800fb38 <strncmp>
 800f50a:	4605      	mov	r5, r0
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d168      	bne.n	800f5e2 <__gethex+0x136>
 800f510:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f514:	eb07 060a 	add.w	r6, r7, sl
 800f518:	f7ff ffb2 	bl	800f480 <__hexdig_fun>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d062      	beq.n	800f5e6 <__gethex+0x13a>
 800f520:	4633      	mov	r3, r6
 800f522:	7818      	ldrb	r0, [r3, #0]
 800f524:	2830      	cmp	r0, #48	; 0x30
 800f526:	461f      	mov	r7, r3
 800f528:	f103 0301 	add.w	r3, r3, #1
 800f52c:	d0f9      	beq.n	800f522 <__gethex+0x76>
 800f52e:	f7ff ffa7 	bl	800f480 <__hexdig_fun>
 800f532:	2301      	movs	r3, #1
 800f534:	fab0 f480 	clz	r4, r0
 800f538:	0964      	lsrs	r4, r4, #5
 800f53a:	4635      	mov	r5, r6
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	463a      	mov	r2, r7
 800f540:	4616      	mov	r6, r2
 800f542:	3201      	adds	r2, #1
 800f544:	7830      	ldrb	r0, [r6, #0]
 800f546:	f7ff ff9b 	bl	800f480 <__hexdig_fun>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d1f8      	bne.n	800f540 <__gethex+0x94>
 800f54e:	9901      	ldr	r1, [sp, #4]
 800f550:	4652      	mov	r2, sl
 800f552:	4630      	mov	r0, r6
 800f554:	f000 faf0 	bl	800fb38 <strncmp>
 800f558:	b980      	cbnz	r0, 800f57c <__gethex+0xd0>
 800f55a:	b94d      	cbnz	r5, 800f570 <__gethex+0xc4>
 800f55c:	eb06 050a 	add.w	r5, r6, sl
 800f560:	462a      	mov	r2, r5
 800f562:	4616      	mov	r6, r2
 800f564:	3201      	adds	r2, #1
 800f566:	7830      	ldrb	r0, [r6, #0]
 800f568:	f7ff ff8a 	bl	800f480 <__hexdig_fun>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	d1f8      	bne.n	800f562 <__gethex+0xb6>
 800f570:	1bad      	subs	r5, r5, r6
 800f572:	00ad      	lsls	r5, r5, #2
 800f574:	e004      	b.n	800f580 <__gethex+0xd4>
 800f576:	2400      	movs	r4, #0
 800f578:	4625      	mov	r5, r4
 800f57a:	e7e0      	b.n	800f53e <__gethex+0x92>
 800f57c:	2d00      	cmp	r5, #0
 800f57e:	d1f7      	bne.n	800f570 <__gethex+0xc4>
 800f580:	7833      	ldrb	r3, [r6, #0]
 800f582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f586:	2b50      	cmp	r3, #80	; 0x50
 800f588:	d13b      	bne.n	800f602 <__gethex+0x156>
 800f58a:	7873      	ldrb	r3, [r6, #1]
 800f58c:	2b2b      	cmp	r3, #43	; 0x2b
 800f58e:	d02c      	beq.n	800f5ea <__gethex+0x13e>
 800f590:	2b2d      	cmp	r3, #45	; 0x2d
 800f592:	d02e      	beq.n	800f5f2 <__gethex+0x146>
 800f594:	1c71      	adds	r1, r6, #1
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	7808      	ldrb	r0, [r1, #0]
 800f59c:	f7ff ff70 	bl	800f480 <__hexdig_fun>
 800f5a0:	1e43      	subs	r3, r0, #1
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b18      	cmp	r3, #24
 800f5a6:	d82c      	bhi.n	800f602 <__gethex+0x156>
 800f5a8:	f1a0 0210 	sub.w	r2, r0, #16
 800f5ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5b0:	f7ff ff66 	bl	800f480 <__hexdig_fun>
 800f5b4:	1e43      	subs	r3, r0, #1
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b18      	cmp	r3, #24
 800f5ba:	d91d      	bls.n	800f5f8 <__gethex+0x14c>
 800f5bc:	f1b9 0f00 	cmp.w	r9, #0
 800f5c0:	d000      	beq.n	800f5c4 <__gethex+0x118>
 800f5c2:	4252      	negs	r2, r2
 800f5c4:	4415      	add	r5, r2
 800f5c6:	f8cb 1000 	str.w	r1, [fp]
 800f5ca:	b1e4      	cbz	r4, 800f606 <__gethex+0x15a>
 800f5cc:	9b00      	ldr	r3, [sp, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	bf14      	ite	ne
 800f5d2:	2700      	movne	r7, #0
 800f5d4:	2706      	moveq	r7, #6
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	b009      	add	sp, #36	; 0x24
 800f5da:	ecbd 8b02 	vpop	{d8}
 800f5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e2:	463e      	mov	r6, r7
 800f5e4:	4625      	mov	r5, r4
 800f5e6:	2401      	movs	r4, #1
 800f5e8:	e7ca      	b.n	800f580 <__gethex+0xd4>
 800f5ea:	f04f 0900 	mov.w	r9, #0
 800f5ee:	1cb1      	adds	r1, r6, #2
 800f5f0:	e7d3      	b.n	800f59a <__gethex+0xee>
 800f5f2:	f04f 0901 	mov.w	r9, #1
 800f5f6:	e7fa      	b.n	800f5ee <__gethex+0x142>
 800f5f8:	230a      	movs	r3, #10
 800f5fa:	fb03 0202 	mla	r2, r3, r2, r0
 800f5fe:	3a10      	subs	r2, #16
 800f600:	e7d4      	b.n	800f5ac <__gethex+0x100>
 800f602:	4631      	mov	r1, r6
 800f604:	e7df      	b.n	800f5c6 <__gethex+0x11a>
 800f606:	1bf3      	subs	r3, r6, r7
 800f608:	3b01      	subs	r3, #1
 800f60a:	4621      	mov	r1, r4
 800f60c:	2b07      	cmp	r3, #7
 800f60e:	dc0b      	bgt.n	800f628 <__gethex+0x17c>
 800f610:	ee18 0a10 	vmov	r0, s16
 800f614:	f7fb fe64 	bl	800b2e0 <_Balloc>
 800f618:	4604      	mov	r4, r0
 800f61a:	b940      	cbnz	r0, 800f62e <__gethex+0x182>
 800f61c:	4b5d      	ldr	r3, [pc, #372]	; (800f794 <__gethex+0x2e8>)
 800f61e:	4602      	mov	r2, r0
 800f620:	21de      	movs	r1, #222	; 0xde
 800f622:	485d      	ldr	r0, [pc, #372]	; (800f798 <__gethex+0x2ec>)
 800f624:	f7ff fd8e 	bl	800f144 <__assert_func>
 800f628:	3101      	adds	r1, #1
 800f62a:	105b      	asrs	r3, r3, #1
 800f62c:	e7ee      	b.n	800f60c <__gethex+0x160>
 800f62e:	f100 0914 	add.w	r9, r0, #20
 800f632:	f04f 0b00 	mov.w	fp, #0
 800f636:	f1ca 0301 	rsb	r3, sl, #1
 800f63a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f63e:	f8cd b000 	str.w	fp, [sp]
 800f642:	9306      	str	r3, [sp, #24]
 800f644:	42b7      	cmp	r7, r6
 800f646:	d340      	bcc.n	800f6ca <__gethex+0x21e>
 800f648:	9802      	ldr	r0, [sp, #8]
 800f64a:	9b00      	ldr	r3, [sp, #0]
 800f64c:	f840 3b04 	str.w	r3, [r0], #4
 800f650:	eba0 0009 	sub.w	r0, r0, r9
 800f654:	1080      	asrs	r0, r0, #2
 800f656:	0146      	lsls	r6, r0, #5
 800f658:	6120      	str	r0, [r4, #16]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fb fefe 	bl	800b45c <__hi0bits>
 800f660:	1a30      	subs	r0, r6, r0
 800f662:	f8d8 6000 	ldr.w	r6, [r8]
 800f666:	42b0      	cmp	r0, r6
 800f668:	dd63      	ble.n	800f732 <__gethex+0x286>
 800f66a:	1b87      	subs	r7, r0, r6
 800f66c:	4639      	mov	r1, r7
 800f66e:	4620      	mov	r0, r4
 800f670:	f7fc fa85 	bl	800bb7e <__any_on>
 800f674:	4682      	mov	sl, r0
 800f676:	b1a8      	cbz	r0, 800f6a4 <__gethex+0x1f8>
 800f678:	1e7b      	subs	r3, r7, #1
 800f67a:	1159      	asrs	r1, r3, #5
 800f67c:	f003 021f 	and.w	r2, r3, #31
 800f680:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f684:	f04f 0a01 	mov.w	sl, #1
 800f688:	fa0a f202 	lsl.w	r2, sl, r2
 800f68c:	420a      	tst	r2, r1
 800f68e:	d009      	beq.n	800f6a4 <__gethex+0x1f8>
 800f690:	4553      	cmp	r3, sl
 800f692:	dd05      	ble.n	800f6a0 <__gethex+0x1f4>
 800f694:	1eb9      	subs	r1, r7, #2
 800f696:	4620      	mov	r0, r4
 800f698:	f7fc fa71 	bl	800bb7e <__any_on>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d145      	bne.n	800f72c <__gethex+0x280>
 800f6a0:	f04f 0a02 	mov.w	sl, #2
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f7ff fe98 	bl	800f3dc <rshift>
 800f6ac:	443d      	add	r5, r7
 800f6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6b2:	42ab      	cmp	r3, r5
 800f6b4:	da4c      	bge.n	800f750 <__gethex+0x2a4>
 800f6b6:	ee18 0a10 	vmov	r0, s16
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	f7fb fe35 	bl	800b32a <_Bfree>
 800f6c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	6013      	str	r3, [r2, #0]
 800f6c6:	27a3      	movs	r7, #163	; 0xa3
 800f6c8:	e785      	b.n	800f5d6 <__gethex+0x12a>
 800f6ca:	1e73      	subs	r3, r6, #1
 800f6cc:	9a05      	ldr	r2, [sp, #20]
 800f6ce:	9303      	str	r3, [sp, #12]
 800f6d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d019      	beq.n	800f70c <__gethex+0x260>
 800f6d8:	f1bb 0f20 	cmp.w	fp, #32
 800f6dc:	d107      	bne.n	800f6ee <__gethex+0x242>
 800f6de:	9b02      	ldr	r3, [sp, #8]
 800f6e0:	9a00      	ldr	r2, [sp, #0]
 800f6e2:	f843 2b04 	str.w	r2, [r3], #4
 800f6e6:	9302      	str	r3, [sp, #8]
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	469b      	mov	fp, r3
 800f6ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f6f2:	f7ff fec5 	bl	800f480 <__hexdig_fun>
 800f6f6:	9b00      	ldr	r3, [sp, #0]
 800f6f8:	f000 000f 	and.w	r0, r0, #15
 800f6fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f700:	4303      	orrs	r3, r0
 800f702:	9300      	str	r3, [sp, #0]
 800f704:	f10b 0b04 	add.w	fp, fp, #4
 800f708:	9b03      	ldr	r3, [sp, #12]
 800f70a:	e00d      	b.n	800f728 <__gethex+0x27c>
 800f70c:	9b03      	ldr	r3, [sp, #12]
 800f70e:	9a06      	ldr	r2, [sp, #24]
 800f710:	4413      	add	r3, r2
 800f712:	42bb      	cmp	r3, r7
 800f714:	d3e0      	bcc.n	800f6d8 <__gethex+0x22c>
 800f716:	4618      	mov	r0, r3
 800f718:	9901      	ldr	r1, [sp, #4]
 800f71a:	9307      	str	r3, [sp, #28]
 800f71c:	4652      	mov	r2, sl
 800f71e:	f000 fa0b 	bl	800fb38 <strncmp>
 800f722:	9b07      	ldr	r3, [sp, #28]
 800f724:	2800      	cmp	r0, #0
 800f726:	d1d7      	bne.n	800f6d8 <__gethex+0x22c>
 800f728:	461e      	mov	r6, r3
 800f72a:	e78b      	b.n	800f644 <__gethex+0x198>
 800f72c:	f04f 0a03 	mov.w	sl, #3
 800f730:	e7b8      	b.n	800f6a4 <__gethex+0x1f8>
 800f732:	da0a      	bge.n	800f74a <__gethex+0x29e>
 800f734:	1a37      	subs	r7, r6, r0
 800f736:	4621      	mov	r1, r4
 800f738:	ee18 0a10 	vmov	r0, s16
 800f73c:	463a      	mov	r2, r7
 800f73e:	f7fb ffdd 	bl	800b6fc <__lshift>
 800f742:	1bed      	subs	r5, r5, r7
 800f744:	4604      	mov	r4, r0
 800f746:	f100 0914 	add.w	r9, r0, #20
 800f74a:	f04f 0a00 	mov.w	sl, #0
 800f74e:	e7ae      	b.n	800f6ae <__gethex+0x202>
 800f750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f754:	42a8      	cmp	r0, r5
 800f756:	dd72      	ble.n	800f83e <__gethex+0x392>
 800f758:	1b45      	subs	r5, r0, r5
 800f75a:	42ae      	cmp	r6, r5
 800f75c:	dc36      	bgt.n	800f7cc <__gethex+0x320>
 800f75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d02a      	beq.n	800f7bc <__gethex+0x310>
 800f766:	2b03      	cmp	r3, #3
 800f768:	d02c      	beq.n	800f7c4 <__gethex+0x318>
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d11c      	bne.n	800f7a8 <__gethex+0x2fc>
 800f76e:	42ae      	cmp	r6, r5
 800f770:	d11a      	bne.n	800f7a8 <__gethex+0x2fc>
 800f772:	2e01      	cmp	r6, #1
 800f774:	d112      	bne.n	800f79c <__gethex+0x2f0>
 800f776:	9a04      	ldr	r2, [sp, #16]
 800f778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	2301      	movs	r3, #1
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	f8c9 3000 	str.w	r3, [r9]
 800f786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f788:	2762      	movs	r7, #98	; 0x62
 800f78a:	601c      	str	r4, [r3, #0]
 800f78c:	e723      	b.n	800f5d6 <__gethex+0x12a>
 800f78e:	bf00      	nop
 800f790:	080116e8 	.word	0x080116e8
 800f794:	080113e2 	.word	0x080113e2
 800f798:	08011684 	.word	0x08011684
 800f79c:	1e71      	subs	r1, r6, #1
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f7fc f9ed 	bl	800bb7e <__any_on>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d1e6      	bne.n	800f776 <__gethex+0x2ca>
 800f7a8:	ee18 0a10 	vmov	r0, s16
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	f7fb fdbc 	bl	800b32a <_Bfree>
 800f7b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	6013      	str	r3, [r2, #0]
 800f7b8:	2750      	movs	r7, #80	; 0x50
 800f7ba:	e70c      	b.n	800f5d6 <__gethex+0x12a>
 800f7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1f2      	bne.n	800f7a8 <__gethex+0x2fc>
 800f7c2:	e7d8      	b.n	800f776 <__gethex+0x2ca>
 800f7c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d1d5      	bne.n	800f776 <__gethex+0x2ca>
 800f7ca:	e7ed      	b.n	800f7a8 <__gethex+0x2fc>
 800f7cc:	1e6f      	subs	r7, r5, #1
 800f7ce:	f1ba 0f00 	cmp.w	sl, #0
 800f7d2:	d131      	bne.n	800f838 <__gethex+0x38c>
 800f7d4:	b127      	cbz	r7, 800f7e0 <__gethex+0x334>
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f7fc f9d0 	bl	800bb7e <__any_on>
 800f7de:	4682      	mov	sl, r0
 800f7e0:	117b      	asrs	r3, r7, #5
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f7e8:	f007 071f 	and.w	r7, r7, #31
 800f7ec:	fa01 f707 	lsl.w	r7, r1, r7
 800f7f0:	421f      	tst	r7, r3
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	bf18      	it	ne
 800f7f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f7fc:	1b76      	subs	r6, r6, r5
 800f7fe:	f7ff fded 	bl	800f3dc <rshift>
 800f802:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f806:	2702      	movs	r7, #2
 800f808:	f1ba 0f00 	cmp.w	sl, #0
 800f80c:	d048      	beq.n	800f8a0 <__gethex+0x3f4>
 800f80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d015      	beq.n	800f842 <__gethex+0x396>
 800f816:	2b03      	cmp	r3, #3
 800f818:	d017      	beq.n	800f84a <__gethex+0x39e>
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d109      	bne.n	800f832 <__gethex+0x386>
 800f81e:	f01a 0f02 	tst.w	sl, #2
 800f822:	d006      	beq.n	800f832 <__gethex+0x386>
 800f824:	f8d9 0000 	ldr.w	r0, [r9]
 800f828:	ea4a 0a00 	orr.w	sl, sl, r0
 800f82c:	f01a 0f01 	tst.w	sl, #1
 800f830:	d10e      	bne.n	800f850 <__gethex+0x3a4>
 800f832:	f047 0710 	orr.w	r7, r7, #16
 800f836:	e033      	b.n	800f8a0 <__gethex+0x3f4>
 800f838:	f04f 0a01 	mov.w	sl, #1
 800f83c:	e7d0      	b.n	800f7e0 <__gethex+0x334>
 800f83e:	2701      	movs	r7, #1
 800f840:	e7e2      	b.n	800f808 <__gethex+0x35c>
 800f842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f844:	f1c3 0301 	rsb	r3, r3, #1
 800f848:	9315      	str	r3, [sp, #84]	; 0x54
 800f84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0f0      	beq.n	800f832 <__gethex+0x386>
 800f850:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f854:	f104 0314 	add.w	r3, r4, #20
 800f858:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f85c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f860:	f04f 0c00 	mov.w	ip, #0
 800f864:	4618      	mov	r0, r3
 800f866:	f853 2b04 	ldr.w	r2, [r3], #4
 800f86a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f86e:	d01c      	beq.n	800f8aa <__gethex+0x3fe>
 800f870:	3201      	adds	r2, #1
 800f872:	6002      	str	r2, [r0, #0]
 800f874:	2f02      	cmp	r7, #2
 800f876:	f104 0314 	add.w	r3, r4, #20
 800f87a:	d13f      	bne.n	800f8fc <__gethex+0x450>
 800f87c:	f8d8 2000 	ldr.w	r2, [r8]
 800f880:	3a01      	subs	r2, #1
 800f882:	42b2      	cmp	r2, r6
 800f884:	d10a      	bne.n	800f89c <__gethex+0x3f0>
 800f886:	1171      	asrs	r1, r6, #5
 800f888:	2201      	movs	r2, #1
 800f88a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f88e:	f006 061f 	and.w	r6, r6, #31
 800f892:	fa02 f606 	lsl.w	r6, r2, r6
 800f896:	421e      	tst	r6, r3
 800f898:	bf18      	it	ne
 800f89a:	4617      	movne	r7, r2
 800f89c:	f047 0720 	orr.w	r7, r7, #32
 800f8a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8a2:	601c      	str	r4, [r3, #0]
 800f8a4:	9b04      	ldr	r3, [sp, #16]
 800f8a6:	601d      	str	r5, [r3, #0]
 800f8a8:	e695      	b.n	800f5d6 <__gethex+0x12a>
 800f8aa:	4299      	cmp	r1, r3
 800f8ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8b0:	d8d8      	bhi.n	800f864 <__gethex+0x3b8>
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	459b      	cmp	fp, r3
 800f8b6:	db19      	blt.n	800f8ec <__gethex+0x440>
 800f8b8:	6861      	ldr	r1, [r4, #4]
 800f8ba:	ee18 0a10 	vmov	r0, s16
 800f8be:	3101      	adds	r1, #1
 800f8c0:	f7fb fd0e 	bl	800b2e0 <_Balloc>
 800f8c4:	4681      	mov	r9, r0
 800f8c6:	b918      	cbnz	r0, 800f8d0 <__gethex+0x424>
 800f8c8:	4b1a      	ldr	r3, [pc, #104]	; (800f934 <__gethex+0x488>)
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	2184      	movs	r1, #132	; 0x84
 800f8ce:	e6a8      	b.n	800f622 <__gethex+0x176>
 800f8d0:	6922      	ldr	r2, [r4, #16]
 800f8d2:	3202      	adds	r2, #2
 800f8d4:	f104 010c 	add.w	r1, r4, #12
 800f8d8:	0092      	lsls	r2, r2, #2
 800f8da:	300c      	adds	r0, #12
 800f8dc:	f7fb fccc 	bl	800b278 <memcpy>
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	ee18 0a10 	vmov	r0, s16
 800f8e6:	f7fb fd20 	bl	800b32a <_Bfree>
 800f8ea:	464c      	mov	r4, r9
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8f4:	6122      	str	r2, [r4, #16]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	615a      	str	r2, [r3, #20]
 800f8fa:	e7bb      	b.n	800f874 <__gethex+0x3c8>
 800f8fc:	6922      	ldr	r2, [r4, #16]
 800f8fe:	455a      	cmp	r2, fp
 800f900:	dd0b      	ble.n	800f91a <__gethex+0x46e>
 800f902:	2101      	movs	r1, #1
 800f904:	4620      	mov	r0, r4
 800f906:	f7ff fd69 	bl	800f3dc <rshift>
 800f90a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f90e:	3501      	adds	r5, #1
 800f910:	42ab      	cmp	r3, r5
 800f912:	f6ff aed0 	blt.w	800f6b6 <__gethex+0x20a>
 800f916:	2701      	movs	r7, #1
 800f918:	e7c0      	b.n	800f89c <__gethex+0x3f0>
 800f91a:	f016 061f 	ands.w	r6, r6, #31
 800f91e:	d0fa      	beq.n	800f916 <__gethex+0x46a>
 800f920:	4453      	add	r3, sl
 800f922:	f1c6 0620 	rsb	r6, r6, #32
 800f926:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f92a:	f7fb fd97 	bl	800b45c <__hi0bits>
 800f92e:	42b0      	cmp	r0, r6
 800f930:	dbe7      	blt.n	800f902 <__gethex+0x456>
 800f932:	e7f0      	b.n	800f916 <__gethex+0x46a>
 800f934:	080113e2 	.word	0x080113e2

0800f938 <L_shift>:
 800f938:	f1c2 0208 	rsb	r2, r2, #8
 800f93c:	0092      	lsls	r2, r2, #2
 800f93e:	b570      	push	{r4, r5, r6, lr}
 800f940:	f1c2 0620 	rsb	r6, r2, #32
 800f944:	6843      	ldr	r3, [r0, #4]
 800f946:	6804      	ldr	r4, [r0, #0]
 800f948:	fa03 f506 	lsl.w	r5, r3, r6
 800f94c:	432c      	orrs	r4, r5
 800f94e:	40d3      	lsrs	r3, r2
 800f950:	6004      	str	r4, [r0, #0]
 800f952:	f840 3f04 	str.w	r3, [r0, #4]!
 800f956:	4288      	cmp	r0, r1
 800f958:	d3f4      	bcc.n	800f944 <L_shift+0xc>
 800f95a:	bd70      	pop	{r4, r5, r6, pc}

0800f95c <__match>:
 800f95c:	b530      	push	{r4, r5, lr}
 800f95e:	6803      	ldr	r3, [r0, #0]
 800f960:	3301      	adds	r3, #1
 800f962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f966:	b914      	cbnz	r4, 800f96e <__match+0x12>
 800f968:	6003      	str	r3, [r0, #0]
 800f96a:	2001      	movs	r0, #1
 800f96c:	bd30      	pop	{r4, r5, pc}
 800f96e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f972:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f976:	2d19      	cmp	r5, #25
 800f978:	bf98      	it	ls
 800f97a:	3220      	addls	r2, #32
 800f97c:	42a2      	cmp	r2, r4
 800f97e:	d0f0      	beq.n	800f962 <__match+0x6>
 800f980:	2000      	movs	r0, #0
 800f982:	e7f3      	b.n	800f96c <__match+0x10>

0800f984 <__hexnan>:
 800f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f988:	680b      	ldr	r3, [r1, #0]
 800f98a:	115e      	asrs	r6, r3, #5
 800f98c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f990:	f013 031f 	ands.w	r3, r3, #31
 800f994:	b087      	sub	sp, #28
 800f996:	bf18      	it	ne
 800f998:	3604      	addne	r6, #4
 800f99a:	2500      	movs	r5, #0
 800f99c:	1f37      	subs	r7, r6, #4
 800f99e:	4690      	mov	r8, r2
 800f9a0:	6802      	ldr	r2, [r0, #0]
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	4682      	mov	sl, r0
 800f9a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9aa:	46b9      	mov	r9, r7
 800f9ac:	463c      	mov	r4, r7
 800f9ae:	9502      	str	r5, [sp, #8]
 800f9b0:	46ab      	mov	fp, r5
 800f9b2:	7851      	ldrb	r1, [r2, #1]
 800f9b4:	1c53      	adds	r3, r2, #1
 800f9b6:	9303      	str	r3, [sp, #12]
 800f9b8:	b341      	cbz	r1, 800fa0c <__hexnan+0x88>
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	9205      	str	r2, [sp, #20]
 800f9be:	9104      	str	r1, [sp, #16]
 800f9c0:	f7ff fd5e 	bl	800f480 <__hexdig_fun>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d14f      	bne.n	800fa68 <__hexnan+0xe4>
 800f9c8:	9904      	ldr	r1, [sp, #16]
 800f9ca:	9a05      	ldr	r2, [sp, #20]
 800f9cc:	2920      	cmp	r1, #32
 800f9ce:	d818      	bhi.n	800fa02 <__hexnan+0x7e>
 800f9d0:	9b02      	ldr	r3, [sp, #8]
 800f9d2:	459b      	cmp	fp, r3
 800f9d4:	dd13      	ble.n	800f9fe <__hexnan+0x7a>
 800f9d6:	454c      	cmp	r4, r9
 800f9d8:	d206      	bcs.n	800f9e8 <__hexnan+0x64>
 800f9da:	2d07      	cmp	r5, #7
 800f9dc:	dc04      	bgt.n	800f9e8 <__hexnan+0x64>
 800f9de:	462a      	mov	r2, r5
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f7ff ffa8 	bl	800f938 <L_shift>
 800f9e8:	4544      	cmp	r4, r8
 800f9ea:	d950      	bls.n	800fa8e <__hexnan+0x10a>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f1a4 0904 	sub.w	r9, r4, #4
 800f9f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9f6:	f8cd b008 	str.w	fp, [sp, #8]
 800f9fa:	464c      	mov	r4, r9
 800f9fc:	461d      	mov	r5, r3
 800f9fe:	9a03      	ldr	r2, [sp, #12]
 800fa00:	e7d7      	b.n	800f9b2 <__hexnan+0x2e>
 800fa02:	2929      	cmp	r1, #41	; 0x29
 800fa04:	d156      	bne.n	800fab4 <__hexnan+0x130>
 800fa06:	3202      	adds	r2, #2
 800fa08:	f8ca 2000 	str.w	r2, [sl]
 800fa0c:	f1bb 0f00 	cmp.w	fp, #0
 800fa10:	d050      	beq.n	800fab4 <__hexnan+0x130>
 800fa12:	454c      	cmp	r4, r9
 800fa14:	d206      	bcs.n	800fa24 <__hexnan+0xa0>
 800fa16:	2d07      	cmp	r5, #7
 800fa18:	dc04      	bgt.n	800fa24 <__hexnan+0xa0>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7ff ff8a 	bl	800f938 <L_shift>
 800fa24:	4544      	cmp	r4, r8
 800fa26:	d934      	bls.n	800fa92 <__hexnan+0x10e>
 800fa28:	f1a8 0204 	sub.w	r2, r8, #4
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa32:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa36:	429f      	cmp	r7, r3
 800fa38:	d2f9      	bcs.n	800fa2e <__hexnan+0xaa>
 800fa3a:	1b3b      	subs	r3, r7, r4
 800fa3c:	f023 0303 	bic.w	r3, r3, #3
 800fa40:	3304      	adds	r3, #4
 800fa42:	3401      	adds	r4, #1
 800fa44:	3e03      	subs	r6, #3
 800fa46:	42b4      	cmp	r4, r6
 800fa48:	bf88      	it	hi
 800fa4a:	2304      	movhi	r3, #4
 800fa4c:	4443      	add	r3, r8
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f843 2b04 	str.w	r2, [r3], #4
 800fa54:	429f      	cmp	r7, r3
 800fa56:	d2fb      	bcs.n	800fa50 <__hexnan+0xcc>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	b91b      	cbnz	r3, 800fa64 <__hexnan+0xe0>
 800fa5c:	4547      	cmp	r7, r8
 800fa5e:	d127      	bne.n	800fab0 <__hexnan+0x12c>
 800fa60:	2301      	movs	r3, #1
 800fa62:	603b      	str	r3, [r7, #0]
 800fa64:	2005      	movs	r0, #5
 800fa66:	e026      	b.n	800fab6 <__hexnan+0x132>
 800fa68:	3501      	adds	r5, #1
 800fa6a:	2d08      	cmp	r5, #8
 800fa6c:	f10b 0b01 	add.w	fp, fp, #1
 800fa70:	dd06      	ble.n	800fa80 <__hexnan+0xfc>
 800fa72:	4544      	cmp	r4, r8
 800fa74:	d9c3      	bls.n	800f9fe <__hexnan+0x7a>
 800fa76:	2300      	movs	r3, #0
 800fa78:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa7c:	2501      	movs	r5, #1
 800fa7e:	3c04      	subs	r4, #4
 800fa80:	6822      	ldr	r2, [r4, #0]
 800fa82:	f000 000f 	and.w	r0, r0, #15
 800fa86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fa8a:	6022      	str	r2, [r4, #0]
 800fa8c:	e7b7      	b.n	800f9fe <__hexnan+0x7a>
 800fa8e:	2508      	movs	r5, #8
 800fa90:	e7b5      	b.n	800f9fe <__hexnan+0x7a>
 800fa92:	9b01      	ldr	r3, [sp, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d0df      	beq.n	800fa58 <__hexnan+0xd4>
 800fa98:	f04f 32ff 	mov.w	r2, #4294967295
 800fa9c:	f1c3 0320 	rsb	r3, r3, #32
 800faa0:	fa22 f303 	lsr.w	r3, r2, r3
 800faa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800faa8:	401a      	ands	r2, r3
 800faaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800faae:	e7d3      	b.n	800fa58 <__hexnan+0xd4>
 800fab0:	3f04      	subs	r7, #4
 800fab2:	e7d1      	b.n	800fa58 <__hexnan+0xd4>
 800fab4:	2004      	movs	r0, #4
 800fab6:	b007      	add	sp, #28
 800fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fabc <_isatty_r>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	4d06      	ldr	r5, [pc, #24]	; (800fad8 <_isatty_r+0x1c>)
 800fac0:	2300      	movs	r3, #0
 800fac2:	4604      	mov	r4, r0
 800fac4:	4608      	mov	r0, r1
 800fac6:	602b      	str	r3, [r5, #0]
 800fac8:	f7f2 fbea 	bl	80022a0 <_isatty>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	d102      	bne.n	800fad6 <_isatty_r+0x1a>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	b103      	cbz	r3, 800fad6 <_isatty_r+0x1a>
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	20000b4c 	.word	0x20000b4c

0800fadc <_lseek_r>:
 800fadc:	b538      	push	{r3, r4, r5, lr}
 800fade:	4d07      	ldr	r5, [pc, #28]	; (800fafc <_lseek_r+0x20>)
 800fae0:	4604      	mov	r4, r0
 800fae2:	4608      	mov	r0, r1
 800fae4:	4611      	mov	r1, r2
 800fae6:	2200      	movs	r2, #0
 800fae8:	602a      	str	r2, [r5, #0]
 800faea:	461a      	mov	r2, r3
 800faec:	f7f2 fc31 	bl	8002352 <_lseek>
 800faf0:	1c43      	adds	r3, r0, #1
 800faf2:	d102      	bne.n	800fafa <_lseek_r+0x1e>
 800faf4:	682b      	ldr	r3, [r5, #0]
 800faf6:	b103      	cbz	r3, 800fafa <_lseek_r+0x1e>
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	20000b4c 	.word	0x20000b4c

0800fb00 <_read_r>:
 800fb00:	b538      	push	{r3, r4, r5, lr}
 800fb02:	4d07      	ldr	r5, [pc, #28]	; (800fb20 <_read_r+0x20>)
 800fb04:	4604      	mov	r4, r0
 800fb06:	4608      	mov	r0, r1
 800fb08:	4611      	mov	r1, r2
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	602a      	str	r2, [r5, #0]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	f7f2 fc30 	bl	8002374 <_read>
 800fb14:	1c43      	adds	r3, r0, #1
 800fb16:	d102      	bne.n	800fb1e <_read_r+0x1e>
 800fb18:	682b      	ldr	r3, [r5, #0]
 800fb1a:	b103      	cbz	r3, 800fb1e <_read_r+0x1e>
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	bd38      	pop	{r3, r4, r5, pc}
 800fb20:	20000b4c 	.word	0x20000b4c
 800fb24:	00000000 	.word	0x00000000

0800fb28 <nan>:
 800fb28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb30 <nan+0x8>
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	00000000 	.word	0x00000000
 800fb34:	7ff80000 	.word	0x7ff80000

0800fb38 <strncmp>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	b17a      	cbz	r2, 800fb5c <strncmp+0x24>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	3901      	subs	r1, #1
 800fb40:	1884      	adds	r4, r0, r2
 800fb42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fb4a:	4290      	cmp	r0, r2
 800fb4c:	d101      	bne.n	800fb52 <strncmp+0x1a>
 800fb4e:	42a3      	cmp	r3, r4
 800fb50:	d101      	bne.n	800fb56 <strncmp+0x1e>
 800fb52:	1a80      	subs	r0, r0, r2
 800fb54:	bd10      	pop	{r4, pc}
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d1f3      	bne.n	800fb42 <strncmp+0xa>
 800fb5a:	e7fa      	b.n	800fb52 <strncmp+0x1a>
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	e7f9      	b.n	800fb54 <strncmp+0x1c>

0800fb60 <__ssprint_r>:
 800fb60:	6893      	ldr	r3, [r2, #8]
 800fb62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb66:	4680      	mov	r8, r0
 800fb68:	460c      	mov	r4, r1
 800fb6a:	4617      	mov	r7, r2
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d061      	beq.n	800fc34 <__ssprint_r+0xd4>
 800fb70:	2300      	movs	r3, #0
 800fb72:	f8d2 a000 	ldr.w	sl, [r2]
 800fb76:	9301      	str	r3, [sp, #4]
 800fb78:	469b      	mov	fp, r3
 800fb7a:	f1bb 0f00 	cmp.w	fp, #0
 800fb7e:	d02b      	beq.n	800fbd8 <__ssprint_r+0x78>
 800fb80:	68a6      	ldr	r6, [r4, #8]
 800fb82:	455e      	cmp	r6, fp
 800fb84:	d844      	bhi.n	800fc10 <__ssprint_r+0xb0>
 800fb86:	89a2      	ldrh	r2, [r4, #12]
 800fb88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb8c:	d03e      	beq.n	800fc0c <__ssprint_r+0xac>
 800fb8e:	6820      	ldr	r0, [r4, #0]
 800fb90:	6921      	ldr	r1, [r4, #16]
 800fb92:	6965      	ldr	r5, [r4, #20]
 800fb94:	eba0 0901 	sub.w	r9, r0, r1
 800fb98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fba0:	f109 0001 	add.w	r0, r9, #1
 800fba4:	106d      	asrs	r5, r5, #1
 800fba6:	4458      	add	r0, fp
 800fba8:	4285      	cmp	r5, r0
 800fbaa:	bf38      	it	cc
 800fbac:	4605      	movcc	r5, r0
 800fbae:	0553      	lsls	r3, r2, #21
 800fbb0:	d545      	bpl.n	800fc3e <__ssprint_r+0xde>
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	f7fb f8f7 	bl	800ada8 <_malloc_r>
 800fbba:	4606      	mov	r6, r0
 800fbbc:	b9a0      	cbnz	r0, 800fbe8 <__ssprint_r+0x88>
 800fbbe:	230c      	movs	r3, #12
 800fbc0:	f8c8 3000 	str.w	r3, [r8]
 800fbc4:	89a3      	ldrh	r3, [r4, #12]
 800fbc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800fbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd6:	e02f      	b.n	800fc38 <__ssprint_r+0xd8>
 800fbd8:	f8da 3000 	ldr.w	r3, [sl]
 800fbdc:	f8da b004 	ldr.w	fp, [sl, #4]
 800fbe0:	9301      	str	r3, [sp, #4]
 800fbe2:	f10a 0a08 	add.w	sl, sl, #8
 800fbe6:	e7c8      	b.n	800fb7a <__ssprint_r+0x1a>
 800fbe8:	464a      	mov	r2, r9
 800fbea:	6921      	ldr	r1, [r4, #16]
 800fbec:	f7fb fb44 	bl	800b278 <memcpy>
 800fbf0:	89a2      	ldrh	r2, [r4, #12]
 800fbf2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fbf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fbfa:	81a2      	strh	r2, [r4, #12]
 800fbfc:	6126      	str	r6, [r4, #16]
 800fbfe:	6165      	str	r5, [r4, #20]
 800fc00:	444e      	add	r6, r9
 800fc02:	eba5 0509 	sub.w	r5, r5, r9
 800fc06:	6026      	str	r6, [r4, #0]
 800fc08:	60a5      	str	r5, [r4, #8]
 800fc0a:	465e      	mov	r6, fp
 800fc0c:	455e      	cmp	r6, fp
 800fc0e:	d900      	bls.n	800fc12 <__ssprint_r+0xb2>
 800fc10:	465e      	mov	r6, fp
 800fc12:	4632      	mov	r2, r6
 800fc14:	9901      	ldr	r1, [sp, #4]
 800fc16:	6820      	ldr	r0, [r4, #0]
 800fc18:	f7fb fb3c 	bl	800b294 <memmove>
 800fc1c:	68a2      	ldr	r2, [r4, #8]
 800fc1e:	1b92      	subs	r2, r2, r6
 800fc20:	60a2      	str	r2, [r4, #8]
 800fc22:	6822      	ldr	r2, [r4, #0]
 800fc24:	4432      	add	r2, r6
 800fc26:	6022      	str	r2, [r4, #0]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	eba2 030b 	sub.w	r3, r2, fp
 800fc2e:	60bb      	str	r3, [r7, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1d1      	bne.n	800fbd8 <__ssprint_r+0x78>
 800fc34:	2000      	movs	r0, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	b003      	add	sp, #12
 800fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc3e:	462a      	mov	r2, r5
 800fc40:	4640      	mov	r0, r8
 800fc42:	f7fb ffc5 	bl	800bbd0 <_realloc_r>
 800fc46:	4606      	mov	r6, r0
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d1d7      	bne.n	800fbfc <__ssprint_r+0x9c>
 800fc4c:	6921      	ldr	r1, [r4, #16]
 800fc4e:	4640      	mov	r0, r8
 800fc50:	f7fa fdcc 	bl	800a7ec <_free_r>
 800fc54:	e7b3      	b.n	800fbbe <__ssprint_r+0x5e>

0800fc56 <__swbuf_r>:
 800fc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc58:	460e      	mov	r6, r1
 800fc5a:	4614      	mov	r4, r2
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	b118      	cbz	r0, 800fc68 <__swbuf_r+0x12>
 800fc60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fc62:	b90b      	cbnz	r3, 800fc68 <__swbuf_r+0x12>
 800fc64:	f7fa fcca 	bl	800a5fc <__sinit>
 800fc68:	69a3      	ldr	r3, [r4, #24]
 800fc6a:	60a3      	str	r3, [r4, #8]
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	0719      	lsls	r1, r3, #28
 800fc70:	d529      	bpl.n	800fcc6 <__swbuf_r+0x70>
 800fc72:	6923      	ldr	r3, [r4, #16]
 800fc74:	b33b      	cbz	r3, 800fcc6 <__swbuf_r+0x70>
 800fc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc7a:	b2f6      	uxtb	r6, r6
 800fc7c:	049a      	lsls	r2, r3, #18
 800fc7e:	4637      	mov	r7, r6
 800fc80:	d52a      	bpl.n	800fcd8 <__swbuf_r+0x82>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	6920      	ldr	r0, [r4, #16]
 800fc86:	1a18      	subs	r0, r3, r0
 800fc88:	6963      	ldr	r3, [r4, #20]
 800fc8a:	4283      	cmp	r3, r0
 800fc8c:	dc04      	bgt.n	800fc98 <__swbuf_r+0x42>
 800fc8e:	4621      	mov	r1, r4
 800fc90:	4628      	mov	r0, r5
 800fc92:	f7fa fc35 	bl	800a500 <_fflush_r>
 800fc96:	b9e0      	cbnz	r0, 800fcd2 <__swbuf_r+0x7c>
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	60a3      	str	r3, [r4, #8]
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	6022      	str	r2, [r4, #0]
 800fca4:	701e      	strb	r6, [r3, #0]
 800fca6:	6962      	ldr	r2, [r4, #20]
 800fca8:	1c43      	adds	r3, r0, #1
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d004      	beq.n	800fcb8 <__swbuf_r+0x62>
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	07db      	lsls	r3, r3, #31
 800fcb2:	d506      	bpl.n	800fcc2 <__swbuf_r+0x6c>
 800fcb4:	2e0a      	cmp	r6, #10
 800fcb6:	d104      	bne.n	800fcc2 <__swbuf_r+0x6c>
 800fcb8:	4621      	mov	r1, r4
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7fa fc20 	bl	800a500 <_fflush_r>
 800fcc0:	b938      	cbnz	r0, 800fcd2 <__swbuf_r+0x7c>
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4628      	mov	r0, r5
 800fcca:	f7f9 fd3f 	bl	800974c <__swsetup_r>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d0d1      	beq.n	800fc76 <__swbuf_r+0x20>
 800fcd2:	f04f 37ff 	mov.w	r7, #4294967295
 800fcd6:	e7f4      	b.n	800fcc2 <__swbuf_r+0x6c>
 800fcd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fcdc:	81a3      	strh	r3, [r4, #12]
 800fcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fce4:	6663      	str	r3, [r4, #100]	; 0x64
 800fce6:	e7cc      	b.n	800fc82 <__swbuf_r+0x2c>

0800fce8 <_wcrtomb_r>:
 800fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcea:	4c09      	ldr	r4, [pc, #36]	; (800fd10 <_wcrtomb_r+0x28>)
 800fcec:	b085      	sub	sp, #20
 800fcee:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	461e      	mov	r6, r3
 800fcf6:	b909      	cbnz	r1, 800fcfc <_wcrtomb_r+0x14>
 800fcf8:	460a      	mov	r2, r1
 800fcfa:	a901      	add	r1, sp, #4
 800fcfc:	47b8      	blx	r7
 800fcfe:	1c43      	adds	r3, r0, #1
 800fd00:	bf01      	itttt	eq
 800fd02:	2300      	moveq	r3, #0
 800fd04:	6033      	streq	r3, [r6, #0]
 800fd06:	238a      	moveq	r3, #138	; 0x8a
 800fd08:	602b      	streq	r3, [r5, #0]
 800fd0a:	b005      	add	sp, #20
 800fd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	2000043c 	.word	0x2000043c

0800fd14 <abort>:
 800fd14:	b508      	push	{r3, lr}
 800fd16:	2006      	movs	r0, #6
 800fd18:	f000 f82c 	bl	800fd74 <raise>
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	f000 fb4f 	bl	80103c0 <_exit>

0800fd22 <_raise_r>:
 800fd22:	291f      	cmp	r1, #31
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4604      	mov	r4, r0
 800fd28:	460d      	mov	r5, r1
 800fd2a:	d904      	bls.n	800fd36 <_raise_r+0x14>
 800fd2c:	2316      	movs	r3, #22
 800fd2e:	6003      	str	r3, [r0, #0]
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295
 800fd34:	bd38      	pop	{r3, r4, r5, pc}
 800fd36:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800fd3a:	b112      	cbz	r2, 800fd42 <_raise_r+0x20>
 800fd3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd40:	b94b      	cbnz	r3, 800fd56 <_raise_r+0x34>
 800fd42:	4620      	mov	r0, r4
 800fd44:	f000 f830 	bl	800fda8 <_getpid_r>
 800fd48:	462a      	mov	r2, r5
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd52:	f000 b817 	b.w	800fd84 <_kill_r>
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d00a      	beq.n	800fd70 <_raise_r+0x4e>
 800fd5a:	1c59      	adds	r1, r3, #1
 800fd5c:	d103      	bne.n	800fd66 <_raise_r+0x44>
 800fd5e:	2316      	movs	r3, #22
 800fd60:	6003      	str	r3, [r0, #0]
 800fd62:	2001      	movs	r0, #1
 800fd64:	e7e6      	b.n	800fd34 <_raise_r+0x12>
 800fd66:	2400      	movs	r4, #0
 800fd68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	4798      	blx	r3
 800fd70:	2000      	movs	r0, #0
 800fd72:	e7df      	b.n	800fd34 <_raise_r+0x12>

0800fd74 <raise>:
 800fd74:	4b02      	ldr	r3, [pc, #8]	; (800fd80 <raise+0xc>)
 800fd76:	4601      	mov	r1, r0
 800fd78:	6818      	ldr	r0, [r3, #0]
 800fd7a:	f7ff bfd2 	b.w	800fd22 <_raise_r>
 800fd7e:	bf00      	nop
 800fd80:	2000000c 	.word	0x2000000c

0800fd84 <_kill_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	4d07      	ldr	r5, [pc, #28]	; (800fda4 <_kill_r+0x20>)
 800fd88:	2300      	movs	r3, #0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	4611      	mov	r1, r2
 800fd90:	602b      	str	r3, [r5, #0]
 800fd92:	f000 fb0d 	bl	80103b0 <_kill>
 800fd96:	1c43      	adds	r3, r0, #1
 800fd98:	d102      	bne.n	800fda0 <_kill_r+0x1c>
 800fd9a:	682b      	ldr	r3, [r5, #0]
 800fd9c:	b103      	cbz	r3, 800fda0 <_kill_r+0x1c>
 800fd9e:	6023      	str	r3, [r4, #0]
 800fda0:	bd38      	pop	{r3, r4, r5, pc}
 800fda2:	bf00      	nop
 800fda4:	20000b4c 	.word	0x20000b4c

0800fda8 <_getpid_r>:
 800fda8:	f000 bafa 	b.w	80103a0 <_getpid>

0800fdac <checkint>:
 800fdac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fdb0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	b570      	push	{r4, r5, r6, lr}
 800fdb8:	dd2a      	ble.n	800fe10 <checkint+0x64>
 800fdba:	f240 4333 	movw	r3, #1075	; 0x433
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	dc24      	bgt.n	800fe0c <checkint+0x60>
 800fdc2:	1a9b      	subs	r3, r3, r2
 800fdc4:	f1a3 0620 	sub.w	r6, r3, #32
 800fdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdcc:	fa02 f403 	lsl.w	r4, r2, r3
 800fdd0:	fa02 f606 	lsl.w	r6, r2, r6
 800fdd4:	f1c3 0520 	rsb	r5, r3, #32
 800fdd8:	fa22 f505 	lsr.w	r5, r2, r5
 800fddc:	4334      	orrs	r4, r6
 800fdde:	432c      	orrs	r4, r5
 800fde0:	409a      	lsls	r2, r3
 800fde2:	ea20 0202 	bic.w	r2, r0, r2
 800fde6:	ea21 0404 	bic.w	r4, r1, r4
 800fdea:	4322      	orrs	r2, r4
 800fdec:	f1a3 0420 	sub.w	r4, r3, #32
 800fdf0:	f1c3 0220 	rsb	r2, r3, #32
 800fdf4:	d10c      	bne.n	800fe10 <checkint+0x64>
 800fdf6:	40d8      	lsrs	r0, r3
 800fdf8:	fa01 f302 	lsl.w	r3, r1, r2
 800fdfc:	4318      	orrs	r0, r3
 800fdfe:	40e1      	lsrs	r1, r4
 800fe00:	4308      	orrs	r0, r1
 800fe02:	f000 0001 	and.w	r0, r0, #1
 800fe06:	f1d0 0002 	rsbs	r0, r0, #2
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	2002      	movs	r0, #2
 800fe0e:	e7fc      	b.n	800fe0a <checkint+0x5e>
 800fe10:	2000      	movs	r0, #0
 800fe12:	e7fa      	b.n	800fe0a <checkint+0x5e>
 800fe14:	0000      	movs	r0, r0
	...

0800fe18 <pow>:
 800fe18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe1c:	ee10 4a90 	vmov	r4, s1
 800fe20:	ed2d 8b0a 	vpush	{d8-d12}
 800fe24:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800fe28:	ee11 7a90 	vmov	r7, s3
 800fe2c:	f10a 32ff 	add.w	r2, sl, #4294967295
 800fe30:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800fe34:	429a      	cmp	r2, r3
 800fe36:	ee10 6a10 	vmov	r6, s0
 800fe3a:	ee11 0a10 	vmov	r0, s2
 800fe3e:	b086      	sub	sp, #24
 800fe40:	46d4      	mov	ip, sl
 800fe42:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800fe46:	d806      	bhi.n	800fe56 <pow+0x3e>
 800fe48:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800fe4c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800fe50:	2b7f      	cmp	r3, #127	; 0x7f
 800fe52:	f240 8156 	bls.w	8010102 <pow+0x2ea>
 800fe56:	1802      	adds	r2, r0, r0
 800fe58:	eb47 0107 	adc.w	r1, r7, r7
 800fe5c:	f06f 0e01 	mvn.w	lr, #1
 800fe60:	f112 39ff 	adds.w	r9, r2, #4294967295
 800fe64:	f141 38ff 	adc.w	r8, r1, #4294967295
 800fe68:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800fe6c:	45ce      	cmp	lr, r9
 800fe6e:	eb73 0808 	sbcs.w	r8, r3, r8
 800fe72:	d23f      	bcs.n	800fef4 <pow+0xdc>
 800fe74:	ea52 0301 	orrs.w	r3, r2, r1
 800fe78:	f04f 0300 	mov.w	r3, #0
 800fe7c:	d10c      	bne.n	800fe98 <pow+0x80>
 800fe7e:	19b6      	adds	r6, r6, r6
 800fe80:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800fe84:	4164      	adcs	r4, r4
 800fe86:	42b3      	cmp	r3, r6
 800fe88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe8c:	41a3      	sbcs	r3, r4
 800fe8e:	f0c0 808c 	bcc.w	800ffaa <pow+0x192>
 800fe92:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fe96:	e028      	b.n	800feea <pow+0xd2>
 800fe98:	4da3      	ldr	r5, [pc, #652]	; (8010128 <pow+0x310>)
 800fe9a:	42ac      	cmp	r4, r5
 800fe9c:	bf08      	it	eq
 800fe9e:	429e      	cmpeq	r6, r3
 800fea0:	d107      	bne.n	800feb2 <pow+0x9a>
 800fea2:	1800      	adds	r0, r0, r0
 800fea4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800fea8:	417f      	adcs	r7, r7
 800feaa:	4283      	cmp	r3, r0
 800feac:	4b9f      	ldr	r3, [pc, #636]	; (801012c <pow+0x314>)
 800feae:	41bb      	sbcs	r3, r7
 800feb0:	e7ed      	b.n	800fe8e <pow+0x76>
 800feb2:	19b6      	adds	r6, r6, r6
 800feb4:	489e      	ldr	r0, [pc, #632]	; (8010130 <pow+0x318>)
 800feb6:	4164      	adcs	r4, r4
 800feb8:	42b3      	cmp	r3, r6
 800feba:	eb70 0504 	sbcs.w	r5, r0, r4
 800febe:	d374      	bcc.n	800ffaa <pow+0x192>
 800fec0:	4281      	cmp	r1, r0
 800fec2:	bf08      	it	eq
 800fec4:	429a      	cmpeq	r2, r3
 800fec6:	d170      	bne.n	800ffaa <pow+0x192>
 800fec8:	4a9a      	ldr	r2, [pc, #616]	; (8010134 <pow+0x31c>)
 800feca:	4294      	cmp	r4, r2
 800fecc:	bf08      	it	eq
 800fece:	429e      	cmpeq	r6, r3
 800fed0:	d0df      	beq.n	800fe92 <pow+0x7a>
 800fed2:	4294      	cmp	r4, r2
 800fed4:	ea6f 0707 	mvn.w	r7, r7
 800fed8:	bf34      	ite	cc
 800feda:	2400      	movcc	r4, #0
 800fedc:	2401      	movcs	r4, #1
 800fede:	0fff      	lsrs	r7, r7, #31
 800fee0:	42bc      	cmp	r4, r7
 800fee2:	f040 81d9 	bne.w	8010298 <pow+0x480>
 800fee6:	ee21 0b01 	vmul.f64	d0, d1, d1
 800feea:	b006      	add	sp, #24
 800feec:	ecbd 8b0a 	vpop	{d8-d12}
 800fef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef4:	eb16 0806 	adds.w	r8, r6, r6
 800fef8:	eb44 0904 	adc.w	r9, r4, r4
 800fefc:	f118 31ff 	adds.w	r1, r8, #4294967295
 800ff00:	f169 0200 	sbc.w	r2, r9, #0
 800ff04:	458e      	cmp	lr, r1
 800ff06:	4193      	sbcs	r3, r2
 800ff08:	d223      	bcs.n	800ff52 <pow+0x13a>
 800ff0a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ff0e:	2c00      	cmp	r4, #0
 800ff10:	da12      	bge.n	800ff38 <pow+0x120>
 800ff12:	4639      	mov	r1, r7
 800ff14:	f7ff ff4a 	bl	800fdac <checkint>
 800ff18:	2801      	cmp	r0, #1
 800ff1a:	d10d      	bne.n	800ff38 <pow+0x120>
 800ff1c:	eeb1 0b40 	vneg.f64	d0, d0
 800ff20:	ea58 0309 	orrs.w	r3, r8, r9
 800ff24:	d10a      	bne.n	800ff3c <pow+0x124>
 800ff26:	2f00      	cmp	r7, #0
 800ff28:	dadf      	bge.n	800feea <pow+0xd2>
 800ff2a:	b006      	add	sp, #24
 800ff2c:	ecbd 8b0a 	vpop	{d8-d12}
 800ff30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff34:	f000 b9f0 	b.w	8010318 <__math_divzero>
 800ff38:	2000      	movs	r0, #0
 800ff3a:	e7f1      	b.n	800ff20 <pow+0x108>
 800ff3c:	2f00      	cmp	r7, #0
 800ff3e:	dad4      	bge.n	800feea <pow+0xd2>
 800ff40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ff44:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ff48:	ed8d 7b00 	vstr	d7, [sp]
 800ff4c:	ed9d 0b00 	vldr	d0, [sp]
 800ff50:	e7cb      	b.n	800feea <pow+0xd2>
 800ff52:	2c00      	cmp	r4, #0
 800ff54:	da2c      	bge.n	800ffb0 <pow+0x198>
 800ff56:	4639      	mov	r1, r7
 800ff58:	f7ff ff28 	bl	800fdac <checkint>
 800ff5c:	b930      	cbnz	r0, 800ff6c <pow+0x154>
 800ff5e:	b006      	add	sp, #24
 800ff60:	ecbd 8b0a 	vpop	{d8-d12}
 800ff64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff68:	f000 b9ee 	b.w	8010348 <__math_invalid>
 800ff6c:	2801      	cmp	r0, #1
 800ff6e:	bf14      	ite	ne
 800ff70:	2000      	movne	r0, #0
 800ff72:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800ff76:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ff7a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800ff7e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800ff82:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800ff86:	2b7f      	cmp	r3, #127	; 0x7f
 800ff88:	d92d      	bls.n	800ffe6 <pow+0x1ce>
 800ff8a:	4b67      	ldr	r3, [pc, #412]	; (8010128 <pow+0x310>)
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	bf08      	it	eq
 800ff92:	4286      	cmpeq	r6, r0
 800ff94:	f43f af7d 	beq.w	800fe92 <pow+0x7a>
 800ff98:	f240 31bd 	movw	r1, #957	; 0x3bd
 800ff9c:	428a      	cmp	r2, r1
 800ff9e:	d80c      	bhi.n	800ffba <pow+0x1a2>
 800ffa0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ffa4:	42b0      	cmp	r0, r6
 800ffa6:	41a3      	sbcs	r3, r4
 800ffa8:	d204      	bcs.n	800ffb4 <pow+0x19c>
 800ffaa:	ee31 0b00 	vadd.f64	d0, d1, d0
 800ffae:	e79c      	b.n	800feea <pow+0xd2>
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	e7e4      	b.n	800ff7e <pow+0x166>
 800ffb4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ffb8:	e797      	b.n	800feea <pow+0xd2>
 800ffba:	2e01      	cmp	r6, #1
 800ffbc:	eb74 0303 	sbcs.w	r3, r4, r3
 800ffc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ffc4:	bf34      	ite	cc
 800ffc6:	2301      	movcc	r3, #1
 800ffc8:	2300      	movcs	r3, #0
 800ffca:	4295      	cmp	r5, r2
 800ffcc:	bf8c      	ite	hi
 800ffce:	2500      	movhi	r5, #0
 800ffd0:	2501      	movls	r5, #1
 800ffd2:	42ab      	cmp	r3, r5
 800ffd4:	f000 809d 	beq.w	8010112 <pow+0x2fa>
 800ffd8:	b006      	add	sp, #24
 800ffda:	ecbd 8b0a 	vpop	{d8-d12}
 800ffde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe2:	f000 b991 	b.w	8010308 <__math_oflow>
 800ffe6:	f1bc 0f00 	cmp.w	ip, #0
 800ffea:	d10b      	bne.n	8010004 <pow+0x1ec>
 800ffec:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010120 <pow+0x308>
 800fff0:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fff4:	ec53 2b17 	vmov	r2, r3, d7
 800fff8:	ee17 6a10 	vmov	r6, s14
 800fffc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010000:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010004:	4b4c      	ldr	r3, [pc, #304]	; (8010138 <pow+0x320>)
 8010006:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801000a:	4423      	add	r3, r4
 801000c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010010:	1519      	asrs	r1, r3, #20
 8010012:	0d1b      	lsrs	r3, r3, #20
 8010014:	051b      	lsls	r3, r3, #20
 8010016:	eba4 0903 	sub.w	r9, r4, r3
 801001a:	4b48      	ldr	r3, [pc, #288]	; (801013c <pow+0x324>)
 801001c:	ee04 1a10 	vmov	s8, r1
 8010020:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010024:	f1b6 0800 	subs.w	r8, r6, #0
 8010028:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801002c:	ec49 8b15 	vmov	d5, r8, r9
 8010030:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010034:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010038:	ed93 7b00 	vldr	d7, [r3]
 801003c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010040:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010044:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010048:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801004c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010050:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010054:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010058:	ed93 5b04 	vldr	d5, [r3, #16]
 801005c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010060:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010064:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010068:	ed93 4b08 	vldr	d4, [r3, #32]
 801006c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010070:	eeb0 9b40 	vmov.f64	d9, d0
 8010074:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010078:	ed93 5b06 	vldr	d5, [r3, #24]
 801007c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010080:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010084:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010088:	eea6 5b04 	vfma.f64	d5, d6, d4
 801008c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010090:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010094:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010098:	ee3a ab00 	vadd.f64	d10, d10, d0
 801009c:	eea6 4b03 	vfma.f64	d4, d6, d3
 80100a0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80100a4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80100a8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80100ac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80100b0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80100b4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80100b8:	eeab ab05 	vfma.f64	d10, d11, d5
 80100bc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80100c0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80100c4:	ee17 3a90 	vmov	r3, s15
 80100c8:	eeb0 5b47 	vmov.f64	d5, d7
 80100cc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80100d0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80100d4:	18b2      	adds	r2, r6, r2
 80100d6:	2a3e      	cmp	r2, #62	; 0x3e
 80100d8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80100dc:	ee38 8b46 	vsub.f64	d8, d8, d6
 80100e0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80100e4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80100e8:	d92b      	bls.n	8010142 <pow+0x32a>
 80100ea:	2a00      	cmp	r2, #0
 80100ec:	da0b      	bge.n	8010106 <pow+0x2ee>
 80100ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80100f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f43f aef7 	beq.w	800feea <pow+0xd2>
 80100fc:	eeb1 0b40 	vneg.f64	d0, d0
 8010100:	e6f3      	b.n	800feea <pow+0xd2>
 8010102:	2000      	movs	r0, #0
 8010104:	e77e      	b.n	8010004 <pow+0x1ec>
 8010106:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801010a:	d919      	bls.n	8010140 <pow+0x328>
 801010c:	2b00      	cmp	r3, #0
 801010e:	f6bf af63 	bge.w	800ffd8 <pow+0x1c0>
 8010112:	b006      	add	sp, #24
 8010114:	ecbd 8b0a 	vpop	{d8-d12}
 8010118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	f000 b8ec 	b.w	80102f8 <__math_uflow>
 8010120:	00000000 	.word	0x00000000
 8010124:	43300000 	.word	0x43300000
 8010128:	3ff00000 	.word	0x3ff00000
 801012c:	fff00000 	.word	0xfff00000
 8010130:	ffe00000 	.word	0xffe00000
 8010134:	7fe00000 	.word	0x7fe00000
 8010138:	c0196aab 	.word	0xc0196aab
 801013c:	080116f8 	.word	0x080116f8
 8010140:	2600      	movs	r6, #0
 8010142:	495d      	ldr	r1, [pc, #372]	; (80102b8 <pow+0x4a0>)
 8010144:	ed91 4b02 	vldr	d4, [r1, #8]
 8010148:	ed91 3b00 	vldr	d3, [r1]
 801014c:	eeb0 6b44 	vmov.f64	d6, d4
 8010150:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010154:	ee16 5a10 	vmov	r5, s12
 8010158:	ee36 6b44 	vsub.f64	d6, d6, d4
 801015c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010160:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010164:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010168:	eeb0 0b47 	vmov.f64	d0, d7
 801016c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010170:	18dc      	adds	r4, r3, r3
 8010172:	f104 030f 	add.w	r3, r4, #15
 8010176:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801017a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801017e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010182:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010186:	ee20 6b00 	vmul.f64	d6, d0, d0
 801018a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801018e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010192:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010196:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801019a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801019e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80101a2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80101a6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80101aa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80101ae:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80101b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80101b6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80101ba:	1940      	adds	r0, r0, r5
 80101bc:	2700      	movs	r7, #0
 80101be:	eb17 020c 	adds.w	r2, r7, ip
 80101c2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80101c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80101ca:	2e00      	cmp	r6, #0
 80101cc:	d15f      	bne.n	801028e <pow+0x476>
 80101ce:	42bd      	cmp	r5, r7
 80101d0:	db13      	blt.n	80101fa <pow+0x3e2>
 80101d2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80101d6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80101da:	4610      	mov	r0, r2
 80101dc:	ec41 0b10 	vmov	d0, r0, r1
 80101e0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80101e4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80102a0 <pow+0x488>
 80101e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80101ec:	b006      	add	sp, #24
 80101ee:	ecbd 8b0a 	vpop	{d8-d12}
 80101f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f6:	f000 b8bf 	b.w	8010378 <__math_check_oflow>
 80101fa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80101fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010202:	4610      	mov	r0, r2
 8010204:	ec41 0b15 	vmov	d5, r0, r1
 8010208:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801020c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010210:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010214:	eeb0 3bc7 	vabs.f64	d3, d7
 8010218:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010220:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80102a8 <pow+0x490>
 8010224:	d52a      	bpl.n	801027c <pow+0x464>
 8010226:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801022a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010232:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010236:	ee35 6b06 	vadd.f64	d6, d5, d6
 801023a:	bf48      	it	mi
 801023c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010240:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010244:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010248:	ee35 7b07 	vadd.f64	d7, d5, d7
 801024c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010250:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010254:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010258:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801025c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010260:	d104      	bne.n	801026c <pow+0x454>
 8010262:	4632      	mov	r2, r6
 8010264:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010268:	ec43 2b17 	vmov	d7, r2, r3
 801026c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010270:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010274:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010278:	ed8d 6b04 	vstr	d6, [sp, #16]
 801027c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010280:	b006      	add	sp, #24
 8010282:	ecbd 8b0a 	vpop	{d8-d12}
 8010286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801028a:	f000 b86c 	b.w	8010366 <__math_check_uflow>
 801028e:	ec43 2b10 	vmov	d0, r2, r3
 8010292:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010296:	e628      	b.n	800feea <pow+0xd2>
 8010298:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80102b0 <pow+0x498>
 801029c:	e625      	b.n	800feea <pow+0xd2>
 801029e:	bf00      	nop
 80102a0:	00000000 	.word	0x00000000
 80102a4:	7f000000 	.word	0x7f000000
 80102a8:	00000000 	.word	0x00000000
 80102ac:	00100000 	.word	0x00100000
	...
 80102b8:	08012740 	.word	0x08012740

080102bc <with_errno>:
 80102bc:	b513      	push	{r0, r1, r4, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	ed8d 0b00 	vstr	d0, [sp]
 80102c4:	f7f6 fbc2 	bl	8006a4c <__errno>
 80102c8:	ed9d 0b00 	vldr	d0, [sp]
 80102cc:	6004      	str	r4, [r0, #0]
 80102ce:	b002      	add	sp, #8
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <xflow>:
 80102d2:	b082      	sub	sp, #8
 80102d4:	b158      	cbz	r0, 80102ee <xflow+0x1c>
 80102d6:	eeb1 7b40 	vneg.f64	d7, d0
 80102da:	ed8d 7b00 	vstr	d7, [sp]
 80102de:	ed9d 7b00 	vldr	d7, [sp]
 80102e2:	2022      	movs	r0, #34	; 0x22
 80102e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102e8:	b002      	add	sp, #8
 80102ea:	f7ff bfe7 	b.w	80102bc <with_errno>
 80102ee:	eeb0 7b40 	vmov.f64	d7, d0
 80102f2:	e7f2      	b.n	80102da <xflow+0x8>
 80102f4:	0000      	movs	r0, r0
	...

080102f8 <__math_uflow>:
 80102f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010300 <__math_uflow+0x8>
 80102fc:	f7ff bfe9 	b.w	80102d2 <xflow>
 8010300:	00000000 	.word	0x00000000
 8010304:	10000000 	.word	0x10000000

08010308 <__math_oflow>:
 8010308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010310 <__math_oflow+0x8>
 801030c:	f7ff bfe1 	b.w	80102d2 <xflow>
 8010310:	00000000 	.word	0x00000000
 8010314:	70000000 	.word	0x70000000

08010318 <__math_divzero>:
 8010318:	b082      	sub	sp, #8
 801031a:	2800      	cmp	r0, #0
 801031c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010320:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010324:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010328:	ed8d 7b00 	vstr	d7, [sp]
 801032c:	ed9d 0b00 	vldr	d0, [sp]
 8010330:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010340 <__math_divzero+0x28>
 8010334:	2022      	movs	r0, #34	; 0x22
 8010336:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801033a:	b002      	add	sp, #8
 801033c:	f7ff bfbe 	b.w	80102bc <with_errno>
	...

08010348 <__math_invalid>:
 8010348:	eeb0 7b40 	vmov.f64	d7, d0
 801034c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010354:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010358:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801035c:	d602      	bvs.n	8010364 <__math_invalid+0x1c>
 801035e:	2021      	movs	r0, #33	; 0x21
 8010360:	f7ff bfac 	b.w	80102bc <with_errno>
 8010364:	4770      	bx	lr

08010366 <__math_check_uflow>:
 8010366:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	d102      	bne.n	8010376 <__math_check_uflow+0x10>
 8010370:	2022      	movs	r0, #34	; 0x22
 8010372:	f7ff bfa3 	b.w	80102bc <with_errno>
 8010376:	4770      	bx	lr

08010378 <__math_check_oflow>:
 8010378:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010398 <__math_check_oflow+0x20>
 801037c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010380:	eeb4 7b46 	vcmp.f64	d7, d6
 8010384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010388:	dd02      	ble.n	8010390 <__math_check_oflow+0x18>
 801038a:	2022      	movs	r0, #34	; 0x22
 801038c:	f7ff bf96 	b.w	80102bc <with_errno>
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	f3af 8000 	nop.w
 8010398:	ffffffff 	.word	0xffffffff
 801039c:	7fefffff 	.word	0x7fefffff

080103a0 <_getpid>:
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <_getpid+0xc>)
 80103a2:	2258      	movs	r2, #88	; 0x58
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	f04f 30ff 	mov.w	r0, #4294967295
 80103aa:	4770      	bx	lr
 80103ac:	20000b4c 	.word	0x20000b4c

080103b0 <_kill>:
 80103b0:	4b02      	ldr	r3, [pc, #8]	; (80103bc <_kill+0xc>)
 80103b2:	2258      	movs	r2, #88	; 0x58
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ba:	4770      	bx	lr
 80103bc:	20000b4c 	.word	0x20000b4c

080103c0 <_exit>:
 80103c0:	e7fe      	b.n	80103c0 <_exit>
	...

080103c4 <_init>:
 80103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c6:	bf00      	nop
 80103c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ca:	bc08      	pop	{r3}
 80103cc:	469e      	mov	lr, r3
 80103ce:	4770      	bx	lr

080103d0 <_fini>:
 80103d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d2:	bf00      	nop
 80103d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103d6:	bc08      	pop	{r3}
 80103d8:	469e      	mov	lr, r3
 80103da:	4770      	bx	lr
