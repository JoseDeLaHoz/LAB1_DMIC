
Recibir_Comandos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08005ccc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08005ccc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103cc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eae  00000000  00000000  0003046a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00033088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029083  00000000  00000000  00033d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c6d  00000000  00000000  0005cda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fda3b  00000000  00000000  0006da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b44b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  0016b49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080050e0 	.word	0x080050e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080050e0 	.word	0x080050e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <Help>:
    printf("\r\n");
    printf("\r\nDato ingresado invalido !!!");

}

void Help(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	printf("\n\rPara mÃ¡s informaciÃ³n de un comando especÃ­fico, escriba 'help <comando>'");
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <Help+0x40>)
 80005fa:	f003 fc9f 	bl	8003f3c <iprintf>
	printf("\n\r Donde <comando> es uno de los siguientes:");
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <Help+0x44>)
 8000600:	f003 fc9c 	bl	8003f3c <iprintf>
	printf("\n\r\t ledc");
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <Help+0x48>)
 8000606:	f003 fc99 	bl	8003f3c <iprintf>
	printf("\n\r\t lfsr");
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <Help+0x4c>)
 800060c:	f003 fc96 	bl	8003f3c <iprintf>
	printf("\n\r\t time");
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <Help+0x50>)
 8000612:	f003 fc93 	bl	8003f3c <iprintf>
	printf("\n\r\t temp");
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <Help+0x54>)
 8000618:	f003 fc90 	bl	8003f3c <iprintf>
	printf("\n\r\t rege");
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <Help+0x58>)
 800061e:	f003 fc8d 	bl	8003f3c <iprintf>
	printf("\n\r\t prin");
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <Help+0x5c>)
 8000624:	f003 fc8a 	bl	8003f3c <iprintf>
	printf("\r\n");
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <Help+0x60>)
 800062a:	f003 fd0d 	bl	8004048 <puts>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08005430 	.word	0x08005430
 8000638:	08005484 	.word	0x08005484
 800063c:	080054b4 	.word	0x080054b4
 8000640:	080054c0 	.word	0x080054c0
 8000644:	080054cc 	.word	0x080054cc
 8000648:	080054d8 	.word	0x080054d8
 800064c:	080054e4 	.word	0x080054e4
 8000650:	080054f0 	.word	0x080054f0
 8000654:	080052fc 	.word	0x080052fc

08000658 <Ledc>:

void Ledc(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	printf("\n\r Hace titilar un led a una velocidad configurable.");
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <Ledc+0x28>)
 800065e:	f003 fc6d 	bl	8003f3c <iprintf>
	printf("\n\r ledcontrol <argumento>");
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <Ledc+0x2c>)
 8000664:	f003 fc6a 	bl	8003f3c <iprintf>
	printf("\n\r\t    argumento\t determina la frecuencia de encendido y apagado del led (0.1, 0.2,..., 1,.., 10) Hz");
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <Ledc+0x30>)
 800066a:	f003 fc67 	bl	8003f3c <iprintf>
	printf("\n\r\t    los posibles valores del argumento estÃ¡n entre 1 y 100");
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <Ledc+0x34>)
 8000670:	f003 fc64 	bl	8003f3c <iprintf>
	printf("\r\n");
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <Ledc+0x38>)
 8000676:	f003 fce7 	bl	8004048 <puts>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	080054fc 	.word	0x080054fc
 8000684:	08005534 	.word	0x08005534
 8000688:	08005550 	.word	0x08005550
 800068c:	080055b8 	.word	0x080055b8
 8000690:	080052fc 	.word	0x080052fc

08000694 <Lfsr>:


void Lfsr(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	printf("\n\r Genera una secuencia de nÃºmeros pseudoaleatorios.");
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <Lfsr+0x2c>)
 800069a:	f003 fc4f 	bl	8003f3c <iprintf>
	printf("\n\r LFSR <argumento>");
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <Lfsr+0x30>)
 80006a0:	f003 fc4c 	bl	8003f3c <iprintf>
	printf("\n\r\t argumento:\t permite escoger el algoritmo de generaciÃ³n de la secuencia de nÃºmeros");
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <Lfsr+0x34>)
 80006a6:	f003 fc49 	bl	8003f3c <iprintf>
	printf("\n\r\t\t x genera la secuencia de nÃºmeros con la tÃ©cnica de XOR's");
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <Lfsr+0x38>)
 80006ac:	f003 fc46 	bl	8003f3c <iprintf>
	printf("\n\r\t\t p genera la secuencia de nÃºmeros con la tÃ©cnica dada por la pÃ¡gina");
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <Lfsr+0x3c>)
 80006b2:	f003 fc43 	bl	8003f3c <iprintf>
	printf("\r\n");
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <Lfsr+0x40>)
 80006b8:	f003 fcc6 	bl	8004048 <puts>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080055fc 	.word	0x080055fc
 80006c4:	08005634 	.word	0x08005634
 80006c8:	08005648 	.word	0x08005648
 80006cc:	080056a4 	.word	0x080056a4
 80006d0:	080056e8 	.word	0x080056e8
 80006d4:	080052fc 	.word	0x080052fc

080006d8 <Time>:

void Time(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	printf("\n\r Toma la fecha y hora del RTC y lo presenta en pantalla.");
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <Time+0x20>)
 80006de:	f003 fc2d 	bl	8003f3c <iprintf>
	printf("\n\r\t tiempo [vacio]");
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <Time+0x24>)
 80006e4:	f003 fc2a 	bl	8003f3c <iprintf>
	printf("\n\r\t\t  este comando no requiere de un argumentos");
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <Time+0x28>)
 80006ea:	f003 fc27 	bl	8003f3c <iprintf>
	printf("\r\n");
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <Time+0x2c>)
 80006f0:	f003 fcaa 	bl	8004048 <puts>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	0800573c 	.word	0x0800573c
 80006fc:	08005778 	.word	0x08005778
 8000700:	0800578c 	.word	0x0800578c
 8000704:	080052fc 	.word	0x080052fc

08000708 <Temp>:

void Temp(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	printf("\n\r Toma la temperatura del perifÃ©rico de la tarjeta nÃºcleo y la presenta en la terminal.");
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <Temp+0x20>)
 800070e:	f003 fc15 	bl	8003f3c <iprintf>
	printf("\n\r\t temp [vacio]");
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Temp+0x24>)
 8000714:	f003 fc12 	bl	8003f3c <iprintf>
	printf("\n\r\t\t este comando no requiere de un argumentos");
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <Temp+0x28>)
 800071a:	f003 fc0f 	bl	8003f3c <iprintf>
	printf("\r\n");
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <Temp+0x2c>)
 8000720:	f003 fc92 	bl	8004048 <puts>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	080057bc 	.word	0x080057bc
 800072c:	0800581c 	.word	0x0800581c
 8000730:	08005830 	.word	0x08005830
 8000734:	080052fc 	.word	0x080052fc

08000738 <Rege>:

void Rege(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	printf("\n\r Permite gestionar los registros de ejecuciÃ³n almacenados en la memoria no volÃ¡til.");
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <Rege+0x2c>)
 800073e:	f003 fbfd 	bl	8003f3c <iprintf>
	printf("\n\r\t rege <argumento>");
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <Rege+0x30>)
 8000744:	f003 fbfa 	bl	8003f3c <iprintf>
	printf("\n\r\t\t    r  permite leer los datos guardados en los registros");
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <Rege+0x34>)
 800074a:	f003 fbf7 	bl	8003f3c <iprintf>
	printf("\n\r\t\t    w  permite modificar o escribir por primera vez en los registros");
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <Rege+0x38>)
 8000750:	f003 fbf4 	bl	8003f3c <iprintf>
	printf("\n\r\t\t    s  muestra el estado de los registros");
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <Rege+0x3c>)
 8000756:	f003 fbf1 	bl	8003f3c <iprintf>
	printf("\r\n");
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <Rege+0x40>)
 800075c:	f003 fc74 	bl	8004048 <puts>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08005860 	.word	0x08005860
 8000768:	080058bc 	.word	0x080058bc
 800076c:	080058d4 	.word	0x080058d4
 8000770:	08005914 	.word	0x08005914
 8000774:	08005960 	.word	0x08005960
 8000778:	080052fc 	.word	0x080052fc

0800077c <Prin>:

void Prin(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	printf("\n\r Permite determinar si durante la ejecuciÃ³n de al secuencia pseudoaleatoria se imprimen");
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <Prin+0x2c>)
 8000782:	f003 fbdb 	bl	8003f3c <iprintf>
	printf("\n\r los nÃºmeros o solo se indica que se estÃ¡ corriendo la secuencia.");
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <Prin+0x30>)
 8000788:	f003 fbd8 	bl	8003f3c <iprintf>
	printf("\n\r\t impresion <argumento>");
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <Prin+0x34>)
 800078e:	f003 fbd5 	bl	8003f3c <iprintf>
	printf("\n\r\t\t    d deshabilita la impresiÃ³n de los nÃºmeros de la secuencia y emite una seÃ±al de ejecuciÃ³n");
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <Prin+0x38>)
 8000794:	f003 fbd2 	bl	8003f3c <iprintf>
	printf("\n\r\t\t    e  habilita la impresiÃ³n de los nÃºmeros de la secuencia");
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <Prin+0x3c>)
 800079a:	f003 fbcf 	bl	8003f3c <iprintf>
	printf("\r\n");
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <Prin+0x40>)
 80007a0:	f003 fc52 	bl	8004048 <puts>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08005990 	.word	0x08005990
 80007ac:	080059f0 	.word	0x080059f0
 80007b0:	08005a3c 	.word	0x08005a3c
 80007b4:	08005a58 	.word	0x08005a58
 80007b8:	08005ac8 	.word	0x08005ac8
 80007bc:	080052fc 	.word	0x080052fc

080007c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0b4      	sub	sp, #208	; 0xd0
 80007c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007c6:	f000 fe88 	bl	80014da <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ca:	f000 fb29 	bl	8000e20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ce:	f000 fc15 	bl	8000ffc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80007d2:	f000 fbe3 	bl	8000f9c <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80007d6:	f000 fb93 	bl	8000f00 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	RetargetInit(&huart3);
 80007da:	48ca      	ldr	r0, [pc, #808]	; (8000b04 <main+0x344>)
 80007dc:	f000 fc7a 	bl	80010d4 <RetargetInit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t rx[2]={0};
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t buff[100]={0};
 80007e6:	2300      	movs	r3, #0
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
 80007ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007ee:	2260      	movs	r2, #96	; 0x60
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 fb9a 	bl	8003f2c <memset>

	char saludo[] = "jhan";
 80007f8:	4ac3      	ldr	r2, [pc, #780]	; (8000b08 <main+0x348>)
 80007fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000802:	6018      	str	r0, [r3, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	7019      	strb	r1, [r3, #0]
	char help[] = "help";
 8000808:	4ac0      	ldr	r2, [pc, #768]	; (8000b0c <main+0x34c>)
 800080a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800080e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	3304      	adds	r3, #4
 8000816:	7019      	strb	r1, [r3, #0]
	char temp[] = "temp";
 8000818:	4abd      	ldr	r2, [pc, #756]	; (8000b10 <main+0x350>)
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	char ledc[] = "ledc";
 8000828:	4aba      	ldr	r2, [pc, #744]	; (8000b14 <main+0x354>)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000832:	6018      	str	r0, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	7019      	strb	r1, [r3, #0]
	char lfsr[] = "lfsr";
 8000838:	4ab7      	ldr	r2, [pc, #732]	; (8000b18 <main+0x358>)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000842:	6018      	str	r0, [r3, #0]
 8000844:	3304      	adds	r3, #4
 8000846:	7019      	strb	r1, [r3, #0]
	char time[] = "time";
 8000848:	4ab4      	ldr	r2, [pc, #720]	; (8000b1c <main+0x35c>)
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000852:	6018      	str	r0, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	7019      	strb	r1, [r3, #0]
	char rege[] = "rege";
 8000858:	4ab1      	ldr	r2, [pc, #708]	; (8000b20 <main+0x360>)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	7019      	strb	r1, [r3, #0]
	char prin[] = "prin";
 8000868:	4aae      	ldr	r2, [pc, #696]	; (8000b24 <main+0x364>)
 800086a:	463b      	mov	r3, r7
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	6018      	str	r0, [r3, #0]
 8000872:	3304      	adds	r3, #4
 8000874:	7019      	strb	r1, [r3, #0]

	uint8_t i = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

			  }
		  } */

//////////////////////////RECIBIMOS EL TECLADO/////////////////////////
				while(rx[0] != 0x0A){
 800087c:	e014      	b.n	80008a8 <main+0xe8>
					  HAL_UART_Receive(&huart3, rx, 1, HAL_MAX_DELAY);
 800087e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	2201      	movs	r2, #1
 8000888:	489e      	ldr	r0, [pc, #632]	; (8000b04 <main+0x344>)
 800088a:	f002 fe36 	bl	80034fa <HAL_UART_Receive>
					  buff[i]=rx[0];
 800088e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000892:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8000896:	33d0      	adds	r3, #208	; 0xd0
 8000898:	443b      	add	r3, r7
 800089a:	f803 2c90 	strb.w	r2, [r3, #-144]
					  i++;
 800089e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80008a2:	3301      	adds	r3, #1
 80008a4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				while(rx[0] != 0x0A){
 80008a8:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80008ac:	2b0a      	cmp	r3, #10
 80008ae:	d1e6      	bne.n	800087e <main+0xbe>
				  }
//////////////////////////TRANSMITIMOS LO QUE RECIBIMOS DEL TECLADO, SOLO PARA PROBAR, LUEGO SE QUITA//////
				  HAL_UART_Transmit(&huart3, buff, i, HAL_MAX_DELAY);
 80008b0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	4891      	ldr	r0, [pc, #580]	; (8000b04 <main+0x344>)
 80008c0:	f002 fd98 	bl	80033f4 <HAL_UART_Transmit>
				  i=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  rx[0]=0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
//////////////////////DETERMINAMOS QUÉ COMANDO RECIBIMOS////////////////
				  /////FALTA PONER LA PARTE DE PROCESAR EL PARÁMETRO
				  ///// ES SOLO PARA TENER LISTA LA PARTE DE TERMINAR COMANDOS
				  if(!memcmp(buff,saludo,strlen(saludo))){
 80008d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fcb3 	bl	8000240 <strlen>
 80008da:	4602      	mov	r2, r0
 80008dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80008e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 fb11 	bl	8003f0c <memcmp>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d12b      	bne.n	8000948 <main+0x188>

					  printf("es saludo\n\r");
 80008f0:	488d      	ldr	r0, [pc, #564]	; (8000b28 <main+0x368>)
 80008f2:	f003 fb23 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen(saludo));
 80008f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fca0 	bl	8000240 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	4619      	mov	r1, r3
 8000904:	4889      	ldr	r0, [pc, #548]	; (8000b2c <main+0x36c>)
 8000906:	f003 fb19 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 800090a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc96 	bl	8000240 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	4619      	mov	r1, r3
 8000918:	4884      	ldr	r0, [pc, #528]	; (8000b2c <main+0x36c>)
 800091a:	f003 fb0f 	bl	8003f3c <iprintf>

					  for(int w = 0; w<sizeof(buff); w++){
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000924:	e00b      	b.n	800093e <main+0x17e>
					 				  		  			  buff[w]=0;}
 8000926:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800092a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800092e:	4413      	add	r3, r2
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000938:	3301      	adds	r3, #1
 800093a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800093e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000942:	2b63      	cmp	r3, #99	; 0x63
 8000944:	d9ef      	bls.n	8000926 <main+0x166>
 8000946:	e7af      	b.n	80008a8 <main+0xe8>
				  }


				  else if(!memcmp(buff,help,strlen(help))){
 8000948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc77 	bl	8000240 <strlen>
 8000952:	4602      	mov	r2, r0
 8000954:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fad5 	bl	8003f0c <memcmp>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 80a2 	bne.w	8000aae <main+0x2ee>
					  printf("es help\n\r");
 800096a:	4871      	ldr	r0, [pc, #452]	; (8000b30 <main+0x370>)
 800096c:	f003 fae6 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen(help));
 8000970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc63 	bl	8000240 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	4619      	mov	r1, r3
 800097e:	486b      	ldr	r0, [pc, #428]	; (8000b2c <main+0x36c>)
 8000980:	f003 fadc 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 8000984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc59 	bl	8000240 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	4619      	mov	r1, r3
 8000992:	4866      	ldr	r0, [pc, #408]	; (8000b2c <main+0x36c>)
 8000994:	f003 fad2 	bl	8003f3c <iprintf>


					  if((buff[5]==0)&&(buff[6]==0)){
 8000998:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800099c:	2b00      	cmp	r3, #0
 800099e:	d105      	bne.n	80009ac <main+0x1ec>
 80009a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <main+0x1ec>
						  Help();
 80009a8:	f7ff fe24 	bl	80005f4 <Help>
					  }

					  if((buff[5]=='l')&&(buff[6]==0x65)&&(buff[7]==0x6d)&&(buff[8]==0x70)){
 80009ac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009b0:	2b6c      	cmp	r3, #108	; 0x6c
 80009b2:	d10d      	bne.n	80009d0 <main+0x210>
 80009b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009b8:	2b65      	cmp	r3, #101	; 0x65
 80009ba:	d109      	bne.n	80009d0 <main+0x210>
 80009bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009c0:	2b6d      	cmp	r3, #109	; 0x6d
 80009c2:	d105      	bne.n	80009d0 <main+0x210>
 80009c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009c8:	2b70      	cmp	r3, #112	; 0x70
 80009ca:	d101      	bne.n	80009d0 <main+0x210>
						  Temp();
 80009cc:	f7ff fe9c 	bl	8000708 <Temp>
					  }

					  if((buff[5]==0x6c)&&(buff[6]==0x65)&&(buff[7]==0x64)&&(buff[8]==0x63)){
 80009d0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009d4:	2b6c      	cmp	r3, #108	; 0x6c
 80009d6:	d10d      	bne.n	80009f4 <main+0x234>
 80009d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009dc:	2b65      	cmp	r3, #101	; 0x65
 80009de:	d109      	bne.n	80009f4 <main+0x234>
 80009e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009e4:	2b64      	cmp	r3, #100	; 0x64
 80009e6:	d105      	bne.n	80009f4 <main+0x234>
 80009e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009ec:	2b63      	cmp	r3, #99	; 0x63
 80009ee:	d101      	bne.n	80009f4 <main+0x234>
						  Ledc();
 80009f0:	f7ff fe32 	bl	8000658 <Ledc>
					  }

					  if((buff[5]==0x6c)&&(buff[6]==0x66)&&(buff[7]==0x73)&&(buff[8]==0x72)){
 80009f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009f8:	2b6c      	cmp	r3, #108	; 0x6c
 80009fa:	d10d      	bne.n	8000a18 <main+0x258>
 80009fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a00:	2b66      	cmp	r3, #102	; 0x66
 8000a02:	d109      	bne.n	8000a18 <main+0x258>
 8000a04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a08:	2b73      	cmp	r3, #115	; 0x73
 8000a0a:	d105      	bne.n	8000a18 <main+0x258>
 8000a0c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a10:	2b72      	cmp	r3, #114	; 0x72
 8000a12:	d101      	bne.n	8000a18 <main+0x258>
						  Lfsr();
 8000a14:	f7ff fe3e 	bl	8000694 <Lfsr>
					  }

					  if((buff[5]==0x74)&&(buff[6]==0x69)&&(buff[7]==0x6d)&&(buff[8]==0x65)){
 8000a18:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a1c:	2b74      	cmp	r3, #116	; 0x74
 8000a1e:	d10d      	bne.n	8000a3c <main+0x27c>
 8000a20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a24:	2b69      	cmp	r3, #105	; 0x69
 8000a26:	d109      	bne.n	8000a3c <main+0x27c>
 8000a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a2c:	2b6d      	cmp	r3, #109	; 0x6d
 8000a2e:	d105      	bne.n	8000a3c <main+0x27c>
 8000a30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a34:	2b65      	cmp	r3, #101	; 0x65
 8000a36:	d101      	bne.n	8000a3c <main+0x27c>
						  Time();
 8000a38:	f7ff fe4e 	bl	80006d8 <Time>
					  }

					  if((buff[5]==0x72)&&(buff[6]==0x65)&&(buff[7]==0x67)&&(buff[8]==0x65)){
 8000a3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a40:	2b72      	cmp	r3, #114	; 0x72
 8000a42:	d10d      	bne.n	8000a60 <main+0x2a0>
 8000a44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a48:	2b65      	cmp	r3, #101	; 0x65
 8000a4a:	d109      	bne.n	8000a60 <main+0x2a0>
 8000a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a50:	2b67      	cmp	r3, #103	; 0x67
 8000a52:	d105      	bne.n	8000a60 <main+0x2a0>
 8000a54:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a58:	2b65      	cmp	r3, #101	; 0x65
 8000a5a:	d101      	bne.n	8000a60 <main+0x2a0>
						  Rege();
 8000a5c:	f7ff fe6c 	bl	8000738 <Rege>
					  }

					  if((buff[5]==0x70)&&(buff[6]==0x72)&&(buff[7]==0x69)&&(buff[8]==0x6e)){
 8000a60:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a64:	2b70      	cmp	r3, #112	; 0x70
 8000a66:	d10d      	bne.n	8000a84 <main+0x2c4>
 8000a68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a6c:	2b72      	cmp	r3, #114	; 0x72
 8000a6e:	d109      	bne.n	8000a84 <main+0x2c4>
 8000a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a74:	2b69      	cmp	r3, #105	; 0x69
 8000a76:	d105      	bne.n	8000a84 <main+0x2c4>
 8000a78:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8000a7e:	d101      	bne.n	8000a84 <main+0x2c4>
						  Prin();
 8000a80:	f7ff fe7c 	bl	800077c <Prin>





					  for(int w = 0; w<sizeof(buff); w++){
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000a8a:	e00b      	b.n	8000aa4 <main+0x2e4>
					  					 			buff[w]=0;}
 8000a8c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a94:	4413      	add	r3, r2
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000aa8:	2b63      	cmp	r3, #99	; 0x63
 8000aaa:	d9ef      	bls.n	8000a8c <main+0x2cc>
 8000aac:	e6fc      	b.n	80008a8 <main+0xe8>

				  }

				  else if(!memcmp(buff,temp,strlen(temp))){
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fbc4 	bl	8000240 <strlen>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fa22 	bl	8003f0c <memcmp>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d145      	bne.n	8000b5a <main+0x39a>
					  printf("es temp\n\r");
 8000ace:	4819      	ldr	r0, [pc, #100]	; (8000b34 <main+0x374>)
 8000ad0:	f003 fa34 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen(temp));
 8000ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fbb1 	bl	8000240 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <main+0x36c>)
 8000ae4:	f003 fa2a 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 8000ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fba7 	bl	8000240 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x36c>)
 8000af8:	f003 fa20 	bl	8003f3c <iprintf>

					  //PONER LA FUNCION PARA LEER TEMPERATURA, YA QUE ACÁ NO SE RECIBE PARÁMETRO//

					  for(int w = 0; w<sizeof(buff); w++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b02:	e025      	b.n	8000b50 <main+0x390>
 8000b04:	200000d8 	.word	0x200000d8
 8000b08:	08005b5c 	.word	0x08005b5c
 8000b0c:	08005b64 	.word	0x08005b64
 8000b10:	08005b6c 	.word	0x08005b6c
 8000b14:	08005b74 	.word	0x08005b74
 8000b18:	08005b7c 	.word	0x08005b7c
 8000b1c:	08005b84 	.word	0x08005b84
 8000b20:	08005b8c 	.word	0x08005b8c
 8000b24:	08005b94 	.word	0x08005b94
 8000b28:	08005b10 	.word	0x08005b10
 8000b2c:	08005b1c 	.word	0x08005b1c
 8000b30:	08005b24 	.word	0x08005b24
 8000b34:	08005b30 	.word	0x08005b30
													buff[w]=0;
 8000b38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b40:	4413      	add	r3, r2
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b54:	2b63      	cmp	r3, #99	; 0x63
 8000b56:	d9ef      	bls.n	8000b38 <main+0x378>
 8000b58:	e6a6      	b.n	80008a8 <main+0xe8>

					  }

				  }

				  else if(!memcmp(buff,ledc,strlen(ledc))){
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb6e 	bl	8000240 <strlen>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f107 0120 	add.w	r1, r7, #32
 8000b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 f9cc 	bl	8003f0c <memcmp>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d145      	bne.n	8000c06 <main+0x446>
					  printf("es led\n\r");
 8000b7a:	48a5      	ldr	r0, [pc, #660]	; (8000e10 <main+0x650>)
 8000b7c:	f003 f9de 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen(ledc));
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fb5b 	bl	8000240 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	48a1      	ldr	r0, [pc, #644]	; (8000e14 <main+0x654>)
 8000b90:	f003 f9d4 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 8000b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb51 	bl	8000240 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	489c      	ldr	r0, [pc, #624]	; (8000e14 <main+0x654>)
 8000ba4:	f003 f9ca 	bl	8003f3c <iprintf>

					  //PONER LA FUNCIÓN PARA CONFIGURAR LA FRECUANCIA DEL LED//


					  if((buff[5]== 0x6f) && (buff[6]== 0x6e)){
 8000ba8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000bac:	2b6f      	cmp	r3, #111	; 0x6f
 8000bae:	d108      	bne.n	8000bc2 <main+0x402>
 8000bb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000bb4:	2b6e      	cmp	r3, #110	; 0x6e
 8000bb6:	d104      	bne.n	8000bc2 <main+0x402>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4896      	ldr	r0, [pc, #600]	; (8000e18 <main+0x658>)
 8000bbe:	f000 ff7b 	bl	8001ab8 <HAL_GPIO_WritePin>
					  }

					  if((buff[5] == 0x6f) && (buff[6]==0x66)){
 8000bc2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000bc6:	2b6f      	cmp	r3, #111	; 0x6f
 8000bc8:	d108      	bne.n	8000bdc <main+0x41c>
 8000bca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000bce:	2b66      	cmp	r3, #102	; 0x66
 8000bd0:	d104      	bne.n	8000bdc <main+0x41c>
						  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4890      	ldr	r0, [pc, #576]	; (8000e18 <main+0x658>)
 8000bd8:	f000 ff6e 	bl	8001ab8 <HAL_GPIO_WritePin>
					  }


					  for(int w = 0; w<sizeof(buff); w++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000be2:	e00b      	b.n	8000bfc <main+0x43c>
												buff[w]=0;}
 8000be4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000bec:	4413      	add	r3, r2
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c00:	2b63      	cmp	r3, #99	; 0x63
 8000c02:	d9ef      	bls.n	8000be4 <main+0x424>
 8000c04:	e650      	b.n	80008a8 <main+0xe8>
				  }




				  else if(!memcmp(buff,lfsr,strlen(lfsr))){
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fb18 	bl	8000240 <strlen>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f107 0118 	add.w	r1, r7, #24
 8000c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 f976 	bl	8003f0c <memcmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d12b      	bne.n	8000c7e <main+0x4be>
					  printf("es led\n\r");
 8000c26:	487a      	ldr	r0, [pc, #488]	; (8000e10 <main+0x650>)
 8000c28:	f003 f988 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen(lfsr));
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb05 	bl	8000240 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4876      	ldr	r0, [pc, #472]	; (8000e14 <main+0x654>)
 8000c3c:	f003 f97e 	bl	8003f3c <iprintf>
					  printf(" %d\n",strlen((char*)buff));
 8000c40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fafb 	bl	8000240 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4871      	ldr	r0, [pc, #452]	; (8000e14 <main+0x654>)
 8000c50:	f003 f974 	bl	8003f3c <iprintf>



					  for(int w = 0; w<sizeof(buff); w++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c5a:	e00b      	b.n	8000c74 <main+0x4b4>
					  							buff[w]=0;}
 8000c5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c6e:	3301      	adds	r3, #1
 8000c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c78:	2b63      	cmp	r3, #99	; 0x63
 8000c7a:	d9ef      	bls.n	8000c5c <main+0x49c>
 8000c7c:	e614      	b.n	80008a8 <main+0xe8>

				  }



				  else if(!memcmp(buff,time,strlen(time))){
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fadc 	bl	8000240 <strlen>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f107 0110 	add.w	r1, r7, #16
 8000c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f93a 	bl	8003f0c <memcmp>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d12b      	bne.n	8000cf6 <main+0x536>
				 		printf("es led\n\r");
 8000c9e:	485c      	ldr	r0, [pc, #368]	; (8000e10 <main+0x650>)
 8000ca0:	f003 f94c 	bl	8003f3c <iprintf>
				 		printf(" %d\n",strlen(time));
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fac9 	bl	8000240 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4858      	ldr	r0, [pc, #352]	; (8000e14 <main+0x654>)
 8000cb4:	f003 f942 	bl	8003f3c <iprintf>
				 		printf(" %d\n",strlen((char*)buff));
 8000cb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fabf 	bl	8000240 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4853      	ldr	r0, [pc, #332]	; (8000e14 <main+0x654>)
 8000cc8:	f003 f938 	bl	8003f3c <iprintf>



				 		for(int w = 0; w<sizeof(buff); w++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000cd2:	e00b      	b.n	8000cec <main+0x52c>
				 					  			buff[w]=0;}
 8000cd4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000cdc:	4413      	add	r3, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
				 		for(int w = 0; w<sizeof(buff); w++){
 8000ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000cf0:	2b63      	cmp	r3, #99	; 0x63
 8000cf2:	d9ef      	bls.n	8000cd4 <main+0x514>
 8000cf4:	e5d8      	b.n	80008a8 <main+0xe8>

				  }


				  else if(!memcmp(buff,rege,strlen(rege))){
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff faa0 	bl	8000240 <strlen>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f107 0108 	add.w	r1, r7, #8
 8000d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 f8fe 	bl	8003f0c <memcmp>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d12b      	bne.n	8000d6e <main+0x5ae>
				  	printf("es led\n\r");
 8000d16:	483e      	ldr	r0, [pc, #248]	; (8000e10 <main+0x650>)
 8000d18:	f003 f910 	bl	8003f3c <iprintf>
				  	printf(" %d\n",strlen(rege));
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa8d 	bl	8000240 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483a      	ldr	r0, [pc, #232]	; (8000e14 <main+0x654>)
 8000d2c:	f003 f906 	bl	8003f3c <iprintf>
				  	printf(" %d\n",strlen((char*)buff));
 8000d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa83 	bl	8000240 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4835      	ldr	r0, [pc, #212]	; (8000e14 <main+0x654>)
 8000d40:	f003 f8fc 	bl	8003f3c <iprintf>



				  	for(int w = 0; w<sizeof(buff); w++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d4a:	e00b      	b.n	8000d64 <main+0x5a4>
				  				 			buff[w]=0;}
 8000d4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d54:	4413      	add	r3, r2
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buff); w++){
 8000d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d68:	2b63      	cmp	r3, #99	; 0x63
 8000d6a:	d9ef      	bls.n	8000d4c <main+0x58c>
 8000d6c:	e59c      	b.n	80008a8 <main+0xe8>

				  }



				  else if(!memcmp(buff,prin,strlen(prin))){
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa65 	bl	8000240 <strlen>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4639      	mov	r1, r7
 8000d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 f8c4 	bl	8003f0c <memcmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d12a      	bne.n	8000de0 <main+0x620>
				  	printf("es led\n\r");
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <main+0x650>)
 8000d8c:	f003 f8d6 	bl	8003f3c <iprintf>
				  	printf(" %d\n",strlen(prin));
 8000d90:	463b      	mov	r3, r7
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fa54 	bl	8000240 <strlen>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481d      	ldr	r0, [pc, #116]	; (8000e14 <main+0x654>)
 8000d9e:	f003 f8cd 	bl	8003f3c <iprintf>
				  	printf(" %d\n",strlen((char*)buff));
 8000da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fa4a 	bl	8000240 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4619      	mov	r1, r3
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <main+0x654>)
 8000db2:	f003 f8c3 	bl	8003f3c <iprintf>



				  	for(int w = 0; w<sizeof(buff); w++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000dbc:	e00b      	b.n	8000dd6 <main+0x616>
				  				 			buff[w]=0;}
 8000dbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dc6:	4413      	add	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
				  	for(int w = 0; w<sizeof(buff); w++){
 8000dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dda:	2b63      	cmp	r3, #99	; 0x63
 8000ddc:	d9ef      	bls.n	8000dbe <main+0x5fe>
 8000dde:	e563      	b.n	80008a8 <main+0xe8>

				  }

				  else{
					  printf("ningun comando\n\r");
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <main+0x65c>)
 8000de2:	f003 f8ab 	bl	8003f3c <iprintf>
					  for(int w = 0; w<sizeof(buff); w++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000dec:	e00b      	b.n	8000e06 <main+0x646>
					 				  		  			  buff[w]=0;}
 8000dee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000df6:	4413      	add	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
					  for(int w = 0; w<sizeof(buff); w++){
 8000dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e00:	3301      	adds	r3, #1
 8000e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e0a:	2b63      	cmp	r3, #99	; 0x63
 8000e0c:	d9ef      	bls.n	8000dee <main+0x62e>
				while(rx[0] != 0x0A){
 8000e0e:	e54b      	b.n	80008a8 <main+0xe8>
 8000e10:	08005b3c 	.word	0x08005b3c
 8000e14:	08005b1c 	.word	0x08005b1c
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	08005b48 	.word	0x08005b48

08000e20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2234      	movs	r2, #52	; 0x34
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 f87c 	bl	8003f2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <SystemClock_Config+0xd8>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <SystemClock_Config+0xd8>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <SystemClock_Config+0xd8>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <SystemClock_Config+0xdc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <SystemClock_Config+0xdc>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <SystemClock_Config+0xdc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e80:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fe71 	bl	8001b8c <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000eb0:	f000 f90a 	bl	80010c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eb4:	f000 fe1a 	bl	8001aec <HAL_PWREx_EnableOverDrive>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8000ebe:	f000 f903 	bl	80010c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2103      	movs	r1, #3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f902 	bl	80020e8 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xce>
	{
		Error_Handler();
 8000eea:	f000 f8ed 	bl	80010c8 <Error_Handler>
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f24:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000-1;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f28:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f2c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5000-1;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f36:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f3a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f4a:	f001 ff1b 	bl	8002d84 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8000f54:	f000 f8b8 	bl	80010c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f66:	f001 ff65 	bl	8002e34 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000f70:	f000 f8aa 	bl	80010c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f82:	f002 f95b 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000f8c:	f000 f89c 	bl	80010c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c

08000f9c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <MX_USART3_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART3_UART_Init+0x58>)
 8000fe0:	f002 f9ba 	bl	8003358 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000fea:	f000 f86d 	bl	80010c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000d8 	.word	0x200000d8
 8000ff8:	40004800 	.word	0x40004800

08000ffc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a29      	ldr	r2, [pc, #164]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <MX_GPIO_Init+0xc0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_GPIO_Init+0xc0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_GPIO_Init+0xc0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <MX_GPIO_Init+0xc4>)
 8001078:	f000 fd1e 	bl	8001ab8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : btn_Pin */
	GPIO_InitStruct.Pin = btn_Pin;
 800107c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001080:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_GPIO_Init+0xc8>)
 8001092:	f000 fb65 	bl	8001760 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_GPIO_Init+0xc4>)
 80010ae:	f000 fb57 	bl	8001760 <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800

080010c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <RetargetInit+0x28>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <RetargetInit+0x2c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	2300      	movs	r3, #0
 80010ea:	2202      	movs	r2, #2
 80010ec:	2100      	movs	r1, #0
 80010ee:	f002 ffb3 	bl	8004058 <setvbuf>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000160 	.word	0x20000160
 8001100:	2000000c 	.word	0x2000000c

08001104 <_isatty>:

int _isatty(int fd) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db04      	blt.n	800111c <_isatty+0x18>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b02      	cmp	r3, #2
 8001116:	dc01      	bgt.n	800111c <_isatty+0x18>
    return 1;
 8001118:	2301      	movs	r3, #1
 800111a:	e005      	b.n	8001128 <_isatty+0x24>

  errno = EBADF;
 800111c:	f002 fecc 	bl	8003eb8 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	2209      	movs	r2, #9
 8001124:	601a      	str	r2, [r3, #0]
  return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_write>:

int _write(int fd, char* ptr, int len) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <_write+0x18>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d111      	bne.n	800116c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <_write+0x54>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	b29a      	uxth	r2, r3
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	f002 f94d 	bl	80033f4 <HAL_UART_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <_write+0x38>
      return len;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	e008      	b.n	800117a <_write+0x4a>
    else
      return EIO;
 8001168:	2305      	movs	r3, #5
 800116a:	e006      	b.n	800117a <_write+0x4a>
  }
  errno = EBADF;
 800116c:	f002 fea4 	bl	8003eb8 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	2209      	movs	r2, #9
 8001174:	601a      	str	r2, [r3, #0]
  return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000160 	.word	0x20000160

08001188 <_close>:

int _close(int fd) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db04      	blt.n	80011a0 <_close+0x18>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	dc01      	bgt.n	80011a0 <_close+0x18>
    return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e006      	b.n	80011ae <_close+0x26>

  errno = EBADF;
 80011a0:	f002 fe8a 	bl	8003eb8 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2209      	movs	r2, #9
 80011a8:	601a      	str	r2, [r3, #0]
  return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80011c2:	f002 fe79 	bl	8003eb8 <__errno>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2209      	movs	r2, #9
 80011ca:	601a      	str	r2, [r3, #0]
  return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_read>:

int _read(int fd, char* ptr, int len) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d110      	bne.n	800120c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <_read+0x4c>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	2201      	movs	r2, #1
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	f002 f980 	bl	80034fa <HAL_UART_Receive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <_read+0x30>
      return 1;
 8001204:	2301      	movs	r3, #1
 8001206:	e008      	b.n	800121a <_read+0x42>
    else
      return EIO;
 8001208:	2305      	movs	r3, #5
 800120a:	e006      	b.n	800121a <_read+0x42>
  }
  errno = EBADF;
 800120c:	f002 fe54 	bl	8003eb8 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	2209      	movs	r2, #9
 8001214:	601a      	str	r2, [r3, #0]
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000160 	.word	0x20000160

08001228 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db08      	blt.n	800124a <_fstat+0x22>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	dc05      	bgt.n	800124a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001244:	605a      	str	r2, [r3, #4]
    return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e005      	b.n	8001256 <_fstat+0x2e>
  }

  errno = EBADF;
 800124a:	f002 fe35 	bl	8003eb8 <__errno>
 800124e:	4603      	mov	r3, r0
 8001250:	2209      	movs	r2, #9
 8001252:	601a      	str	r2, [r3, #0]
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x38>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_TIM_Base_MspInit+0x38>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_TIM_Base_MspInit+0x38>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ae      	sub	sp, #184	; 0xb8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2290      	movs	r2, #144	; 0x90
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fe11 	bl	8003f2c <memset>
  if(huart->Instance==USART3)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_UART_MspInit+0xb4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d13c      	bne.n	800138e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f906 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800132e:	f7ff fecb 	bl	80010c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_UART_MspInit+0xb8>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0xb8>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_UART_MspInit+0xb8>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_UART_MspInit+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_UART_MspInit+0xb8>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_UART_MspInit+0xb8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800137c:	2307      	movs	r3, #7
 800137e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_UART_MspInit+0xbc>)
 800138a:	f000 f9e9 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	37b8      	adds	r7, #184	; 0xb8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40004800 	.word	0x40004800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f8b0 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f002 fd46 	bl	8003eb8 <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20080000 	.word	0x20080000
 8001458:	00000400 	.word	0x00000400
 800145c:	20000164 	.word	0x20000164
 8001460:	20000180 	.word	0x20000180

08001464 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800148e:	490e      	ldr	r1, [pc, #56]	; (80014c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001490:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a4:	4c0b      	ldr	r4, [pc, #44]	; (80014d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b2:	f7ff ffd7 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f002 fd05 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff f981 	bl	80007c0 <main>
  bx  lr    
 80014be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014cc:	08005c5c 	.word	0x08005c5c
  ldr r2, =_sbss
 80014d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014d4:	2000017c 	.word	0x2000017c

080014d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>

080014da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f90a 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f805 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff feb9 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f917 	bl	8001746 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f8ed 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20000168 	.word	0x20000168

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000168 	.word	0x20000168

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <__NVIC_SetPriorityGrouping+0x40>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x40>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	05fa0000 	.word	0x05fa0000

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff47 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5c 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e175      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8164 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x56>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80be 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a65      	ldr	r2, [pc, #404]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001902:	4a61      	ldr	r2, [pc, #388]	; (8001a88 <HAL_GPIO_Init+0x328>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x334>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x338>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x33c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a53      	ldr	r2, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x340>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x344>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x348>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_GPIO_Init+0x34c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x328>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae86 	bls.w	8001780 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1a:	f7ff fd2f 	bl	800157c <HAL_GetTick>
 8001b1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b20:	e009      	b.n	8001b36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b22:	f7ff fd2b 	bl	800157c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b30:	d901      	bls.n	8001b36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e022      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d1ee      	bne.n	8001b22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff fd14 	bl	800157c <HAL_GetTick>
 8001b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b56:	e009      	b.n	8001b6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b58:	f7ff fd10 	bl	800157c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b66:	d901      	bls.n	8001b6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e007      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b78:	d1ee      	bne.n	8001b58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e29b      	b.n	80020da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8087 	beq.w	8001cbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4b96      	ldr	r3, [pc, #600]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bbc:	4b93      	ldr	r3, [pc, #588]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_OscConfig+0x62>
 8001bc8:	4b90      	ldr	r3, [pc, #576]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x130>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d168      	bne.n	8001cbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e275      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7a>
 8001bf8:	4b84      	ldr	r3, [pc, #528]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a83      	ldr	r2, [pc, #524]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e02e      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x9c>
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xc0>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a72      	ldr	r2, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6b      	ldr	r2, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fc86 	bl	800157c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fc82 	bl	800157c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e229      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe8>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc72 	bl	800157c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fc6e 	bl	800157c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e215      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x110>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d069      	beq.n	8001d9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x190>
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x17a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1e9      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	493d      	ldr	r1, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e040      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d023      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fc24 	bl	800157c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff fc20 	bl	800157c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1c7      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc00 	bl	800157c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fbfc 	bl	800157c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1a3      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d038      	beq.n	8001e1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fbdd 	bl	800157c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fbd9 	bl	800157c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e180      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x23a>
 8001de4:	e01a      	b.n	8001e1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7ff fbc3 	bl	800157c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fbbf 	bl	800157c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d903      	bls.n	8001e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e166      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
 8001e0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b92      	ldr	r3, [pc, #584]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a4 	beq.w	8001f72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b8c      	ldr	r3, [pc, #560]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a88      	ldr	r2, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb87 	bl	800157c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7ff fb83 	bl	800157c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e12a      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x31a>
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	e02d      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x33c>
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a6a      	ldr	r2, [pc, #424]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a67      	ldr	r2, [pc, #412]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec6:	e01c      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x35e>
 8001ed0:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a61      	ldr	r2, [pc, #388]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb37 	bl	800157c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff fb33 	bl	800157c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0d8      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ee      	beq.n	8001f12 <HAL_RCC_OscConfig+0x386>
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff fb21 	bl	800157c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fb1d 	bl	800157c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0c2      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a3c      	ldr	r2, [pc, #240]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80ae 	beq.w	80020d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d06d      	beq.n	8002064 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d14b      	bne.n	8002028 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a31      	ldr	r2, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff faee 	bl	800157c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff faea 	bl	800157c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e091      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	071b      	lsls	r3, r3, #28
 8001fee:	491b      	ldr	r1, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fabc 	bl	800157c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fab8 	bl	800157c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e05f      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x47c>
 8002026:	e057      	b.n	80020d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff faa2 	bl	800157c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fa9e 	bl	800157c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e045      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x4b0>
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x54c>
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_OscConfig+0x558>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d030      	beq.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d129      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d122      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002094:	4013      	ands	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800209a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800209c:	4293      	cmp	r3, r2
 800209e:	d119      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10f      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7ff f9ce 	bl	800157c <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f9ca 	bl	800157c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f92a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08005b9c 	.word	0x08005b9c
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b094      	sub	sp, #80	; 0x50
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	2300      	movs	r3, #0
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80e1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e0db      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022f8:	e0db      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022fe:	e0d8      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
 800232e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4621      	mov	r1, r4
 800234c:	1a51      	subs	r1, r2, r1
 800234e:	6139      	str	r1, [r7, #16]
 8002350:	4629      	mov	r1, r5
 8002352:	eb63 0301 	sbc.w	r3, r3, r1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002364:	4659      	mov	r1, fp
 8002366:	018b      	lsls	r3, r1, #6
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236e:	4651      	mov	r1, sl
 8002370:	018a      	lsls	r2, r1, #6
 8002372:	4651      	mov	r1, sl
 8002374:	ebb2 0801 	subs.w	r8, r2, r1
 8002378:	4659      	mov	r1, fp
 800237a:	eb63 0901 	sbc.w	r9, r3, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800238e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002392:	4690      	mov	r8, r2
 8002394:	4699      	mov	r9, r3
 8002396:	4623      	mov	r3, r4
 8002398:	eb18 0303 	adds.w	r3, r8, r3
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	462b      	mov	r3, r5
 80023a0:	eb49 0303 	adc.w	r3, r9, r3
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b2:	4629      	mov	r1, r5
 80023b4:	024b      	lsls	r3, r1, #9
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023bc:	4621      	mov	r1, r4
 80023be:	024a      	lsls	r2, r1, #9
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d0:	f7fd ff8e 	bl	80002f0 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	e058      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	4611      	mov	r1, r2
 80023ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	0159      	lsls	r1, r3, #5
 8002406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240a:	0150      	lsls	r0, r2, #5
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4641      	mov	r1, r8
 8002412:	ebb2 0a01 	subs.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb63 0b01 	sbc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800242c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002430:	ebb2 040a 	subs.w	r4, r2, sl
 8002434:	eb63 050b 	sbc.w	r5, r3, fp
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	00eb      	lsls	r3, r5, #3
 8002442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	4643      	mov	r3, r8
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	464b      	mov	r3, r9
 8002454:	eb45 0303 	adc.w	r3, r5, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	2200      	movs	r2, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002484:	f7fd ff34 	bl	80002f0 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80024a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08005bac 	.word	0x08005bac

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08005bac 	.word	0x08005bac

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800255c:	4b69      	ldr	r3, [pc, #420]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a68      	ldr	r2, [pc, #416]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002566:	6093      	str	r3, [r2, #8]
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	4964      	ldr	r1, [pc, #400]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d017      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	4959      	ldr	r1, [pc, #356]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d017      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	494a      	ldr	r1, [pc, #296]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e8:	d101      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808b 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe ff9e 	bl	800157c <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe ff9a 	bl	800157c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e38f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b28      	ldr	r3, [pc, #160]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d035      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d02e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d114      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff62 	bl	800157c <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe ff5e 	bl	800157c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e351      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ea:	d111      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	4901      	ldr	r1, [pc, #4]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
 8002702:	e00b      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	0ffffcff 	.word	0x0ffffcff
 8002710:	4bac      	ldr	r3, [pc, #688]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4aab      	ldr	r2, [pc, #684]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4ba9      	ldr	r3, [pc, #676]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	49a6      	ldr	r1, [pc, #664]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	4313      	orrs	r3, r2
 800272c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800273a:	4ba2      	ldr	r3, [pc, #648]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	4aa0      	ldr	r2, [pc, #640]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800274a:	4b9e      	ldr	r3, [pc, #632]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	499b      	ldr	r1, [pc, #620]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002776:	4993      	ldr	r1, [pc, #588]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278a:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002798:	498a      	ldr	r1, [pc, #552]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ac:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ba:	4982      	ldr	r1, [pc, #520]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ce:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4979      	ldr	r1, [pc, #484]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f0:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4971      	ldr	r1, [pc, #452]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 020c 	bic.w	r2, r3, #12
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	4968      	ldr	r1, [pc, #416]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4960      	ldr	r1, [pc, #384]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002856:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002864:	4957      	ldr	r1, [pc, #348]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4946      	ldr	r1, [pc, #280]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028bc:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	493e      	ldr	r1, [pc, #248]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290e:	492d      	ldr	r1, [pc, #180]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002930:	4924      	ldr	r1, [pc, #144]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002970:	4914      	ldr	r1, [pc, #80]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b8:	4902      	ldr	r1, [pc, #8]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	4986      	ldr	r1, [pc, #536]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029f8:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a08:	497d      	ldr	r1, [pc, #500]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d006      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80d6 	beq.w	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a24:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe fda4 	bl	800157c <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a38:	f7fe fda0 	bl	800157c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e195      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	0e1b      	lsrs	r3, r3, #24
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	019a      	lsls	r2, r3, #6
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	4958      	ldr	r1, [pc, #352]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad0:	d129      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae0:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	0f1b      	lsrs	r3, r3, #28
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	493e      	ldr	r1, [pc, #248]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	f023 021f 	bic.w	r2, r3, #31
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4938      	ldr	r1, [pc, #224]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b32:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	4926      	ldr	r1, [pc, #152]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	491a      	ldr	r1, [pc, #104]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002baa:	f7fe fce7 	bl	800157c <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb2:	f7fe fce3 	bl	800157c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 80ce 	bne.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe fcca 	bl	800157c <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bea:	e00b      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bec:	f7fe fcc6 	bl	800157c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d904      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0bb      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c04:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c10:	d0ec      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02e      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c3a:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	0f1b      	lsrs	r3, r3, #28
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	019a      	lsls	r2, r3, #6
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	4944      	ldr	r1, [pc, #272]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	493d      	ldr	r1, [pc, #244]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	0f1b      	lsrs	r3, r3, #28
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4929      	ldr	r1, [pc, #164]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d028      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	019a      	lsls	r2, r3, #6
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	4917      	ldr	r1, [pc, #92]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	4911      	ldr	r1, [pc, #68]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fc16 	bl	800157c <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d54:	f7fe fc12 	bl	800157c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e007      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d72:	d1ef      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e049      	b.n	8002e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fa7c 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f000 f900 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIM_ConfigClockSource+0x1c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0b4      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x186>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_TIM_ConfigClockSource+0x190>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e88:	d03e      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0xd4>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	f200 8087 	bhi.w	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	f000 8086 	beq.w	8002fa6 <HAL_TIM_ConfigClockSource+0x172>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d87f      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d01a      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xa6>
 8002ea4:	2b70      	cmp	r3, #112	; 0x70
 8002ea6:	d87b      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b60      	cmp	r3, #96	; 0x60
 8002eaa:	d050      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x11a>
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d877      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b50      	cmp	r3, #80	; 0x50
 8002eb2:	d03c      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0xfa>
 8002eb4:	2b50      	cmp	r3, #80	; 0x50
 8002eb6:	d873      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d058      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x13a>
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d86f      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b30      	cmp	r3, #48	; 0x30
 8002ec2:	d064      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ec4:	2b30      	cmp	r3, #48	; 0x30
 8002ec6:	d86b      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d060      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d867      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d05a      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ed8:	e062      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f000 f987 	bl	80031fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
      break;
 8002f06:	e04f      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f000 f970 	bl	80031fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2a:	609a      	str	r2, [r3, #8]
      break;
 8002f2c:	e03c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f8e4 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2150      	movs	r1, #80	; 0x50
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f93d 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e02c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f903 	bl	8003166 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2160      	movs	r1, #96	; 0x60
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f92d 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e01c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 f8c4 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f91d 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e00c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f000 f914 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	fffeff88 	.word	0xfffeff88

08002fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <TIM_Base_SetConfig+0x114>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d00f      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <TIM_Base_SetConfig+0x118>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00b      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <TIM_Base_SetConfig+0x11c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3b      	ldr	r2, [pc, #236]	; (80030e8 <TIM_Base_SetConfig+0x120>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <TIM_Base_SetConfig+0x124>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d108      	bne.n	800301a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <TIM_Base_SetConfig+0x114>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d027      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <TIM_Base_SetConfig+0x118>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d023      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <TIM_Base_SetConfig+0x11c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <TIM_Base_SetConfig+0x120>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a29      	ldr	r2, [pc, #164]	; (80030ec <TIM_Base_SetConfig+0x124>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d017      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <TIM_Base_SetConfig+0x128>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <TIM_Base_SetConfig+0x12c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <TIM_Base_SetConfig+0x130>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <TIM_Base_SetConfig+0x134>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <TIM_Base_SetConfig+0x138>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a23      	ldr	r2, [pc, #140]	; (8003104 <TIM_Base_SetConfig+0x13c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <TIM_Base_SetConfig+0x114>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0xf8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <TIM_Base_SetConfig+0x124>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d103      	bne.n	80030c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	40001800 	.word	0x40001800
 8003100:	40001c00 	.word	0x40001c00
 8003104:	40002000 	.word	0x40002000

08003108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 030a 	bic.w	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0210 	bic.w	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	031b      	lsls	r3, r3, #12
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f043 0307 	orr.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	431a      	orrs	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e06d      	b.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a30      	ldr	r2, [pc, #192]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800328e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d01d      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10c      	bne.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4313      	orrs	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40010000 	.word	0x40010000
 8003340:	40010400 	.word	0x40010400
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40014000 	.word	0x40014000
 8003354:	40001800 	.word	0x40001800

08003358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e040      	b.n	80033ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd ffb2 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f974 	bl	8003684 <UART_SetConfig>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e022      	b.n	80033ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fbcc 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc53 	bl	8003c90 <UART_CheckIdleState>
 80033ea:	4603      	mov	r3, r0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003408:	2b20      	cmp	r3, #32
 800340a:	d171      	bne.n	80034f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Transmit+0x24>
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e06a      	b.n	80034f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342a:	f7fe f8a7 	bl	800157c <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d108      	bne.n	800345c <HAL_UART_Transmit+0x68>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e003      	b.n	8003464 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003464:	e02c      	b.n	80034c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fc5a 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e038      	b.n	80034f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1cc      	bne.n	8003466 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fc27 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e005      	b.n	80034f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08a      	sub	sp, #40	; 0x28
 80034fe:	af02      	add	r7, sp, #8
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003510:	2b20      	cmp	r3, #32
 8003512:	f040 80b1 	bne.w	8003678 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UART_Receive+0x28>
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0a9      	b.n	800367a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2222      	movs	r2, #34	; 0x22
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353c:	f7fe f81e 	bl	800157c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d10e      	bne.n	800357a <HAL_UART_Receive+0x80>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <HAL_UART_Receive+0x76>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f240 12ff 	movw	r2, #511	; 0x1ff
 800356a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800356e:	e02d      	b.n	80035cc <HAL_UART_Receive+0xd2>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003578:	e028      	b.n	80035cc <HAL_UART_Receive+0xd2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_UART_Receive+0xa4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <HAL_UART_Receive+0x9a>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	22ff      	movs	r2, #255	; 0xff
 800358e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003592:	e01b      	b.n	80035cc <HAL_UART_Receive+0xd2>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	227f      	movs	r2, #127	; 0x7f
 8003598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800359c:	e016      	b.n	80035cc <HAL_UART_Receive+0xd2>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a6:	d10d      	bne.n	80035c4 <HAL_UART_Receive+0xca>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_UART_Receive+0xc0>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	227f      	movs	r2, #127	; 0x7f
 80035b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b8:	e008      	b.n	80035cc <HAL_UART_Receive+0xd2>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c2:	e003      	b.n	80035cc <HAL_UART_Receive+0xd2>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d108      	bne.n	80035f0 <HAL_UART_Receive+0xf6>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e003      	b.n	80035f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035f8:	e032      	b.n	8003660 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	2120      	movs	r1, #32
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb90 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e032      	b.n	800367a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b29a      	uxth	r2, r3
 8003622:	8a7b      	ldrh	r3, [r7, #18]
 8003624:	4013      	ands	r3, r2
 8003626:	b29a      	uxth	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3302      	adds	r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e00c      	b.n	800364e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2da      	uxtb	r2, r3
 800363c:	8a7b      	ldrh	r3, [r7, #18]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4013      	ands	r3, r2
 8003642:	b2da      	uxtb	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1c6      	bne.n	80035fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4ba6      	ldr	r3, [pc, #664]	; (8003948 <UART_SetConfig+0x2c4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	6979      	ldr	r1, [r7, #20]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a94      	ldr	r2, [pc, #592]	; (800394c <UART_SetConfig+0x2c8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d120      	bne.n	8003742 <UART_SetConfig+0xbe>
 8003700:	4b93      	ldr	r3, [pc, #588]	; (8003950 <UART_SetConfig+0x2cc>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b03      	cmp	r3, #3
 800370c:	d816      	bhi.n	800373c <UART_SetConfig+0xb8>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0x90>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003725 	.word	0x08003725
 8003718:	08003731 	.word	0x08003731
 800371c:	0800372b 	.word	0x0800372b
 8003720:	08003737 	.word	0x08003737
 8003724:	2301      	movs	r3, #1
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e150      	b.n	80039cc <UART_SetConfig+0x348>
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e14d      	b.n	80039cc <UART_SetConfig+0x348>
 8003730:	2304      	movs	r3, #4
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e14a      	b.n	80039cc <UART_SetConfig+0x348>
 8003736:	2308      	movs	r3, #8
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e147      	b.n	80039cc <UART_SetConfig+0x348>
 800373c:	2310      	movs	r3, #16
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e144      	b.n	80039cc <UART_SetConfig+0x348>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a83      	ldr	r2, [pc, #524]	; (8003954 <UART_SetConfig+0x2d0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d132      	bne.n	80037b2 <UART_SetConfig+0x12e>
 800374c:	4b80      	ldr	r3, [pc, #512]	; (8003950 <UART_SetConfig+0x2cc>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d828      	bhi.n	80037ac <UART_SetConfig+0x128>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0xdc>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003795 	.word	0x08003795
 8003764:	080037ad 	.word	0x080037ad
 8003768:	080037ad 	.word	0x080037ad
 800376c:	080037ad 	.word	0x080037ad
 8003770:	080037a1 	.word	0x080037a1
 8003774:	080037ad 	.word	0x080037ad
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037ad 	.word	0x080037ad
 8003780:	0800379b 	.word	0x0800379b
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037ad 	.word	0x080037ad
 8003790:	080037a7 	.word	0x080037a7
 8003794:	2300      	movs	r3, #0
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e118      	b.n	80039cc <UART_SetConfig+0x348>
 800379a:	2302      	movs	r3, #2
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e115      	b.n	80039cc <UART_SetConfig+0x348>
 80037a0:	2304      	movs	r3, #4
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e112      	b.n	80039cc <UART_SetConfig+0x348>
 80037a6:	2308      	movs	r3, #8
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e10f      	b.n	80039cc <UART_SetConfig+0x348>
 80037ac:	2310      	movs	r3, #16
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e10c      	b.n	80039cc <UART_SetConfig+0x348>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a68      	ldr	r2, [pc, #416]	; (8003958 <UART_SetConfig+0x2d4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0x17a>
 80037bc:	4b64      	ldr	r3, [pc, #400]	; (8003950 <UART_SetConfig+0x2cc>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037c6:	2b30      	cmp	r3, #48	; 0x30
 80037c8:	d013      	beq.n	80037f2 <UART_SetConfig+0x16e>
 80037ca:	2b30      	cmp	r3, #48	; 0x30
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x174>
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x162>
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d810      	bhi.n	80037f8 <UART_SetConfig+0x174>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x15c>
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d006      	beq.n	80037ec <UART_SetConfig+0x168>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x174>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0f2      	b.n	80039cc <UART_SetConfig+0x348>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0ef      	b.n	80039cc <UART_SetConfig+0x348>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e0ec      	b.n	80039cc <UART_SetConfig+0x348>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e0e9      	b.n	80039cc <UART_SetConfig+0x348>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e0e6      	b.n	80039cc <UART_SetConfig+0x348>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a56      	ldr	r2, [pc, #344]	; (800395c <UART_SetConfig+0x2d8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d120      	bne.n	800384a <UART_SetConfig+0x1c6>
 8003808:	4b51      	ldr	r3, [pc, #324]	; (8003950 <UART_SetConfig+0x2cc>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003812:	2bc0      	cmp	r3, #192	; 0xc0
 8003814:	d013      	beq.n	800383e <UART_SetConfig+0x1ba>
 8003816:	2bc0      	cmp	r3, #192	; 0xc0
 8003818:	d814      	bhi.n	8003844 <UART_SetConfig+0x1c0>
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d009      	beq.n	8003832 <UART_SetConfig+0x1ae>
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d810      	bhi.n	8003844 <UART_SetConfig+0x1c0>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x1a8>
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d006      	beq.n	8003838 <UART_SetConfig+0x1b4>
 800382a:	e00b      	b.n	8003844 <UART_SetConfig+0x1c0>
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0cc      	b.n	80039cc <UART_SetConfig+0x348>
 8003832:	2302      	movs	r3, #2
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e0c9      	b.n	80039cc <UART_SetConfig+0x348>
 8003838:	2304      	movs	r3, #4
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e0c6      	b.n	80039cc <UART_SetConfig+0x348>
 800383e:	2308      	movs	r3, #8
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e0c3      	b.n	80039cc <UART_SetConfig+0x348>
 8003844:	2310      	movs	r3, #16
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e0c0      	b.n	80039cc <UART_SetConfig+0x348>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a44      	ldr	r2, [pc, #272]	; (8003960 <UART_SetConfig+0x2dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d125      	bne.n	80038a0 <UART_SetConfig+0x21c>
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <UART_SetConfig+0x2cc>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003862:	d017      	beq.n	8003894 <UART_SetConfig+0x210>
 8003864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003868:	d817      	bhi.n	800389a <UART_SetConfig+0x216>
 800386a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386e:	d00b      	beq.n	8003888 <UART_SetConfig+0x204>
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d811      	bhi.n	800389a <UART_SetConfig+0x216>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <UART_SetConfig+0x1fe>
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d006      	beq.n	800388e <UART_SetConfig+0x20a>
 8003880:	e00b      	b.n	800389a <UART_SetConfig+0x216>
 8003882:	2300      	movs	r3, #0
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e0a1      	b.n	80039cc <UART_SetConfig+0x348>
 8003888:	2302      	movs	r3, #2
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e09e      	b.n	80039cc <UART_SetConfig+0x348>
 800388e:	2304      	movs	r3, #4
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e09b      	b.n	80039cc <UART_SetConfig+0x348>
 8003894:	2308      	movs	r3, #8
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e098      	b.n	80039cc <UART_SetConfig+0x348>
 800389a:	2310      	movs	r3, #16
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e095      	b.n	80039cc <UART_SetConfig+0x348>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <UART_SetConfig+0x2e0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d125      	bne.n	80038f6 <UART_SetConfig+0x272>
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <UART_SetConfig+0x2cc>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b8:	d017      	beq.n	80038ea <UART_SetConfig+0x266>
 80038ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038be:	d817      	bhi.n	80038f0 <UART_SetConfig+0x26c>
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d00b      	beq.n	80038de <UART_SetConfig+0x25a>
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d811      	bhi.n	80038f0 <UART_SetConfig+0x26c>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <UART_SetConfig+0x254>
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d4:	d006      	beq.n	80038e4 <UART_SetConfig+0x260>
 80038d6:	e00b      	b.n	80038f0 <UART_SetConfig+0x26c>
 80038d8:	2301      	movs	r3, #1
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e076      	b.n	80039cc <UART_SetConfig+0x348>
 80038de:	2302      	movs	r3, #2
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e073      	b.n	80039cc <UART_SetConfig+0x348>
 80038e4:	2304      	movs	r3, #4
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e070      	b.n	80039cc <UART_SetConfig+0x348>
 80038ea:	2308      	movs	r3, #8
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e06d      	b.n	80039cc <UART_SetConfig+0x348>
 80038f0:	2310      	movs	r3, #16
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e06a      	b.n	80039cc <UART_SetConfig+0x348>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <UART_SetConfig+0x2e4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d138      	bne.n	8003972 <UART_SetConfig+0x2ee>
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <UART_SetConfig+0x2cc>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800390a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390e:	d017      	beq.n	8003940 <UART_SetConfig+0x2bc>
 8003910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003914:	d82a      	bhi.n	800396c <UART_SetConfig+0x2e8>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d00b      	beq.n	8003934 <UART_SetConfig+0x2b0>
 800391c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003920:	d824      	bhi.n	800396c <UART_SetConfig+0x2e8>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <UART_SetConfig+0x2aa>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d006      	beq.n	800393a <UART_SetConfig+0x2b6>
 800392c:	e01e      	b.n	800396c <UART_SetConfig+0x2e8>
 800392e:	2300      	movs	r3, #0
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e04b      	b.n	80039cc <UART_SetConfig+0x348>
 8003934:	2302      	movs	r3, #2
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e048      	b.n	80039cc <UART_SetConfig+0x348>
 800393a:	2304      	movs	r3, #4
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e045      	b.n	80039cc <UART_SetConfig+0x348>
 8003940:	2308      	movs	r3, #8
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e042      	b.n	80039cc <UART_SetConfig+0x348>
 8003946:	bf00      	nop
 8003948:	efff69f3 	.word	0xefff69f3
 800394c:	40011000 	.word	0x40011000
 8003950:	40023800 	.word	0x40023800
 8003954:	40004400 	.word	0x40004400
 8003958:	40004800 	.word	0x40004800
 800395c:	40004c00 	.word	0x40004c00
 8003960:	40005000 	.word	0x40005000
 8003964:	40011400 	.word	0x40011400
 8003968:	40007800 	.word	0x40007800
 800396c:	2310      	movs	r3, #16
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e02c      	b.n	80039cc <UART_SetConfig+0x348>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <UART_SetConfig+0x4bc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d125      	bne.n	80039c8 <UART_SetConfig+0x344>
 800397c:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <UART_SetConfig+0x4c0>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800398a:	d017      	beq.n	80039bc <UART_SetConfig+0x338>
 800398c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003990:	d817      	bhi.n	80039c2 <UART_SetConfig+0x33e>
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d00b      	beq.n	80039b0 <UART_SetConfig+0x32c>
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	d811      	bhi.n	80039c2 <UART_SetConfig+0x33e>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <UART_SetConfig+0x326>
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a6:	d006      	beq.n	80039b6 <UART_SetConfig+0x332>
 80039a8:	e00b      	b.n	80039c2 <UART_SetConfig+0x33e>
 80039aa:	2300      	movs	r3, #0
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e00d      	b.n	80039cc <UART_SetConfig+0x348>
 80039b0:	2302      	movs	r3, #2
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e00a      	b.n	80039cc <UART_SetConfig+0x348>
 80039b6:	2304      	movs	r3, #4
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e007      	b.n	80039cc <UART_SetConfig+0x348>
 80039bc:	2308      	movs	r3, #8
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e004      	b.n	80039cc <UART_SetConfig+0x348>
 80039c2:	2310      	movs	r3, #16
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e001      	b.n	80039cc <UART_SetConfig+0x348>
 80039c8:	2310      	movs	r3, #16
 80039ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d4:	d15b      	bne.n	8003a8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d828      	bhi.n	8003a2e <UART_SetConfig+0x3aa>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x360>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7fe fd6c 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e013      	b.n	8003a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe fd7c 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003a14:	61b8      	str	r0, [r7, #24]
        break;
 8003a16:	e00f      	b.n	8003a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <UART_SetConfig+0x4c4>)
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e00c      	b.n	8003a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe fc4f 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8003a22:	61b8      	str	r0, [r7, #24]
        break;
 8003a24:	e008      	b.n	8003a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e004      	b.n	8003a38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	77bb      	strb	r3, [r7, #30]
        break;
 8003a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d074      	beq.n	8003b28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	005a      	lsls	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d916      	bls.n	8003a88 <UART_SetConfig+0x404>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d212      	bcs.n	8003a88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f023 030f 	bic.w	r3, r3, #15
 8003a6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	89fb      	ldrh	r3, [r7, #14]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	89fa      	ldrh	r2, [r7, #14]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	e04f      	b.n	8003b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77bb      	strb	r3, [r7, #30]
 8003a8c:	e04c      	b.n	8003b28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d828      	bhi.n	8003ae6 <UART_SetConfig+0x462>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0x418>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003ad7 	.word	0x08003ad7
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ae7 	.word	0x08003ae7
 8003ab8:	08003ae7 	.word	0x08003ae7
 8003abc:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7fe fd10 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	61b8      	str	r0, [r7, #24]
        break;
 8003ac6:	e013      	b.n	8003af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7fe fd20 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003acc:	61b8      	str	r0, [r7, #24]
        break;
 8003ace:	e00f      	b.n	8003af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <UART_SetConfig+0x4c4>)
 8003ad2:	61bb      	str	r3, [r7, #24]
        break;
 8003ad4:	e00c      	b.n	8003af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7fe fbf3 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8003ada:	61b8      	str	r0, [r7, #24]
        break;
 8003adc:	e008      	b.n	8003af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	61bb      	str	r3, [r7, #24]
        break;
 8003ae4:	e004      	b.n	8003af0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	77bb      	strb	r3, [r7, #30]
        break;
 8003aee:	bf00      	nop
    }

    if (pclk != 0U)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085a      	lsrs	r2, r3, #1
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b0f      	cmp	r3, #15
 8003b0e:	d909      	bls.n	8003b24 <UART_SetConfig+0x4a0>
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d205      	bcs.n	8003b24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e001      	b.n	8003b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40007c00 	.word	0x40007c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fc6c 	bl	800157c <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10e      	bne.n	8003cd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f831 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e027      	b.n	8003d22 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d10e      	bne.n	8003cfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f81b 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e011      	b.n	8003d22 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b09c      	sub	sp, #112	; 0x70
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	e0a7      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	f000 80a3 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd fc19 	bl	800157c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13f      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d70:	667b      	str	r3, [r7, #100]	; 0x64
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e068      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d050      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d148      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e6      	bne.n	8003e04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	613b      	str	r3, [r7, #16]
   return(result);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e56:	623a      	str	r2, [r7, #32]
 8003e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	69f9      	ldr	r1, [r7, #28]
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e010      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f43f af48 	beq.w	8003d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3770      	adds	r7, #112	; 0x70
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4d0d      	ldr	r5, [pc, #52]	; (8003efc <__libc_init_array+0x38>)
 8003ec8:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	2600      	movs	r6, #0
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	4d0b      	ldr	r5, [pc, #44]	; (8003f04 <__libc_init_array+0x40>)
 8003ed6:	4c0c      	ldr	r4, [pc, #48]	; (8003f08 <__libc_init_array+0x44>)
 8003ed8:	f001 f902 	bl	80050e0 <_init>
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	08005c54 	.word	0x08005c54
 8003f00:	08005c54 	.word	0x08005c54
 8003f04:	08005c54 	.word	0x08005c54
 8003f08:	08005c58 	.word	0x08005c58

08003f0c <memcmp>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	3901      	subs	r1, #1
 8003f10:	4402      	add	r2, r0
 8003f12:	4290      	cmp	r0, r2
 8003f14:	d101      	bne.n	8003f1a <memcmp+0xe>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e005      	b.n	8003f26 <memcmp+0x1a>
 8003f1a:	7803      	ldrb	r3, [r0, #0]
 8003f1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d001      	beq.n	8003f28 <memcmp+0x1c>
 8003f24:	1b18      	subs	r0, r3, r4
 8003f26:	bd10      	pop	{r4, pc}
 8003f28:	3001      	adds	r0, #1
 8003f2a:	e7f2      	b.n	8003f12 <memcmp+0x6>

08003f2c <memset>:
 8003f2c:	4402      	add	r2, r0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <iprintf>:
 8003f3c:	b40f      	push	{r0, r1, r2, r3}
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <iprintf+0x2c>)
 8003f40:	b513      	push	{r0, r1, r4, lr}
 8003f42:	681c      	ldr	r4, [r3, #0]
 8003f44:	b124      	cbz	r4, 8003f50 <iprintf+0x14>
 8003f46:	69a3      	ldr	r3, [r4, #24]
 8003f48:	b913      	cbnz	r3, 8003f50 <iprintf+0x14>
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 fb24 	bl	8004598 <__sinit>
 8003f50:	ab05      	add	r3, sp, #20
 8003f52:	9a04      	ldr	r2, [sp, #16]
 8003f54:	68a1      	ldr	r1, [r4, #8]
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fd35 	bl	80049c8 <_vfiprintf_r>
 8003f5e:	b002      	add	sp, #8
 8003f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f64:	b004      	add	sp, #16
 8003f66:	4770      	bx	lr
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <_puts_r>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	460e      	mov	r6, r1
 8003f70:	4605      	mov	r5, r0
 8003f72:	b118      	cbz	r0, 8003f7c <_puts_r+0x10>
 8003f74:	6983      	ldr	r3, [r0, #24]
 8003f76:	b90b      	cbnz	r3, 8003f7c <_puts_r+0x10>
 8003f78:	f000 fb0e 	bl	8004598 <__sinit>
 8003f7c:	69ab      	ldr	r3, [r5, #24]
 8003f7e:	68ac      	ldr	r4, [r5, #8]
 8003f80:	b913      	cbnz	r3, 8003f88 <_puts_r+0x1c>
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 fb08 	bl	8004598 <__sinit>
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <_puts_r+0xd0>)
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	d120      	bne.n	8003fd0 <_puts_r+0x64>
 8003f8e:	686c      	ldr	r4, [r5, #4]
 8003f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f92:	07db      	lsls	r3, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_puts_r+0x36>
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	0598      	lsls	r0, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_puts_r+0x36>
 8003f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9e:	f000 fb99 	bl	80046d4 <__retarget_lock_acquire_recursive>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	0719      	lsls	r1, r3, #28
 8003fa6:	d51d      	bpl.n	8003fe4 <_puts_r+0x78>
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	b1db      	cbz	r3, 8003fe4 <_puts_r+0x78>
 8003fac:	3e01      	subs	r6, #1
 8003fae:	68a3      	ldr	r3, [r4, #8]
 8003fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	60a3      	str	r3, [r4, #8]
 8003fb8:	bb39      	cbnz	r1, 800400a <_puts_r+0x9e>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da38      	bge.n	8004030 <_puts_r+0xc4>
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	210a      	movs	r1, #10
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 f90e 	bl	80041e4 <__swbuf_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d011      	beq.n	8003ff0 <_puts_r+0x84>
 8003fcc:	250a      	movs	r5, #10
 8003fce:	e011      	b.n	8003ff4 <_puts_r+0x88>
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <_puts_r+0xd4>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d101      	bne.n	8003fda <_puts_r+0x6e>
 8003fd6:	68ac      	ldr	r4, [r5, #8]
 8003fd8:	e7da      	b.n	8003f90 <_puts_r+0x24>
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <_puts_r+0xd8>)
 8003fdc:	429c      	cmp	r4, r3
 8003fde:	bf08      	it	eq
 8003fe0:	68ec      	ldreq	r4, [r5, #12]
 8003fe2:	e7d5      	b.n	8003f90 <_puts_r+0x24>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 f94e 	bl	8004288 <__swsetup_r>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d0dd      	beq.n	8003fac <_puts_r+0x40>
 8003ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff6:	07da      	lsls	r2, r3, #31
 8003ff8:	d405      	bmi.n	8004006 <_puts_r+0x9a>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	059b      	lsls	r3, r3, #22
 8003ffe:	d402      	bmi.n	8004006 <_puts_r+0x9a>
 8004000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004002:	f000 fb68 	bl	80046d6 <__retarget_lock_release_recursive>
 8004006:	4628      	mov	r0, r5
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	2b00      	cmp	r3, #0
 800400c:	da04      	bge.n	8004018 <_puts_r+0xac>
 800400e:	69a2      	ldr	r2, [r4, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	dc06      	bgt.n	8004022 <_puts_r+0xb6>
 8004014:	290a      	cmp	r1, #10
 8004016:	d004      	beq.n	8004022 <_puts_r+0xb6>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	7019      	strb	r1, [r3, #0]
 8004020:	e7c5      	b.n	8003fae <_puts_r+0x42>
 8004022:	4622      	mov	r2, r4
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f8dd 	bl	80041e4 <__swbuf_r>
 800402a:	3001      	adds	r0, #1
 800402c:	d1bf      	bne.n	8003fae <_puts_r+0x42>
 800402e:	e7df      	b.n	8003ff0 <_puts_r+0x84>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	250a      	movs	r5, #10
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	6022      	str	r2, [r4, #0]
 8004038:	701d      	strb	r5, [r3, #0]
 800403a:	e7db      	b.n	8003ff4 <_puts_r+0x88>
 800403c:	08005bd8 	.word	0x08005bd8
 8004040:	08005bf8 	.word	0x08005bf8
 8004044:	08005bb8 	.word	0x08005bb8

08004048 <puts>:
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <puts+0xc>)
 800404a:	4601      	mov	r1, r0
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f7ff bf8d 	b.w	8003f6c <_puts_r>
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <setvbuf>:
 8004058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800405c:	461d      	mov	r5, r3
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <setvbuf+0x17c>)
 8004060:	681f      	ldr	r7, [r3, #0]
 8004062:	4604      	mov	r4, r0
 8004064:	460e      	mov	r6, r1
 8004066:	4690      	mov	r8, r2
 8004068:	b127      	cbz	r7, 8004074 <setvbuf+0x1c>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	b913      	cbnz	r3, 8004074 <setvbuf+0x1c>
 800406e:	4638      	mov	r0, r7
 8004070:	f000 fa92 	bl	8004598 <__sinit>
 8004074:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <setvbuf+0x180>)
 8004076:	429c      	cmp	r4, r3
 8004078:	d167      	bne.n	800414a <setvbuf+0xf2>
 800407a:	687c      	ldr	r4, [r7, #4]
 800407c:	f1b8 0f02 	cmp.w	r8, #2
 8004080:	d006      	beq.n	8004090 <setvbuf+0x38>
 8004082:	f1b8 0f01 	cmp.w	r8, #1
 8004086:	f200 809f 	bhi.w	80041c8 <setvbuf+0x170>
 800408a:	2d00      	cmp	r5, #0
 800408c:	f2c0 809c 	blt.w	80041c8 <setvbuf+0x170>
 8004090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004092:	07db      	lsls	r3, r3, #31
 8004094:	d405      	bmi.n	80040a2 <setvbuf+0x4a>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	0598      	lsls	r0, r3, #22
 800409a:	d402      	bmi.n	80040a2 <setvbuf+0x4a>
 800409c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800409e:	f000 fb19 	bl	80046d4 <__retarget_lock_acquire_recursive>
 80040a2:	4621      	mov	r1, r4
 80040a4:	4638      	mov	r0, r7
 80040a6:	f000 f9e3 	bl	8004470 <_fflush_r>
 80040aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ac:	b141      	cbz	r1, 80040c0 <setvbuf+0x68>
 80040ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040b2:	4299      	cmp	r1, r3
 80040b4:	d002      	beq.n	80040bc <setvbuf+0x64>
 80040b6:	4638      	mov	r0, r7
 80040b8:	f000 fb7c 	bl	80047b4 <_free_r>
 80040bc:	2300      	movs	r3, #0
 80040be:	6363      	str	r3, [r4, #52]	; 0x34
 80040c0:	2300      	movs	r3, #0
 80040c2:	61a3      	str	r3, [r4, #24]
 80040c4:	6063      	str	r3, [r4, #4]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	0619      	lsls	r1, r3, #24
 80040ca:	d503      	bpl.n	80040d4 <setvbuf+0x7c>
 80040cc:	6921      	ldr	r1, [r4, #16]
 80040ce:	4638      	mov	r0, r7
 80040d0:	f000 fb70 	bl	80047b4 <_free_r>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	f1b8 0f02 	cmp.w	r8, #2
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	d06c      	beq.n	80041c0 <setvbuf+0x168>
 80040e6:	ab01      	add	r3, sp, #4
 80040e8:	466a      	mov	r2, sp
 80040ea:	4621      	mov	r1, r4
 80040ec:	4638      	mov	r0, r7
 80040ee:	f000 faf3 	bl	80046d8 <__swhatbuf_r>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	4318      	orrs	r0, r3
 80040f6:	81a0      	strh	r0, [r4, #12]
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	d130      	bne.n	800415e <setvbuf+0x106>
 80040fc:	9d00      	ldr	r5, [sp, #0]
 80040fe:	4628      	mov	r0, r5
 8004100:	f000 fb50 	bl	80047a4 <malloc>
 8004104:	4606      	mov	r6, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d155      	bne.n	80041b6 <setvbuf+0x15e>
 800410a:	f8dd 9000 	ldr.w	r9, [sp]
 800410e:	45a9      	cmp	r9, r5
 8004110:	d14a      	bne.n	80041a8 <setvbuf+0x150>
 8004112:	f04f 35ff 	mov.w	r5, #4294967295
 8004116:	2200      	movs	r2, #0
 8004118:	60a2      	str	r2, [r4, #8]
 800411a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800411e:	6022      	str	r2, [r4, #0]
 8004120:	6122      	str	r2, [r4, #16]
 8004122:	2201      	movs	r2, #1
 8004124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004128:	6162      	str	r2, [r4, #20]
 800412a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	07d2      	lsls	r2, r2, #31
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	d405      	bmi.n	8004142 <setvbuf+0xea>
 8004136:	f413 7f00 	tst.w	r3, #512	; 0x200
 800413a:	d102      	bne.n	8004142 <setvbuf+0xea>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f000 faca 	bl	80046d6 <__retarget_lock_release_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	b003      	add	sp, #12
 8004146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <setvbuf+0x184>)
 800414c:	429c      	cmp	r4, r3
 800414e:	d101      	bne.n	8004154 <setvbuf+0xfc>
 8004150:	68bc      	ldr	r4, [r7, #8]
 8004152:	e793      	b.n	800407c <setvbuf+0x24>
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <setvbuf+0x188>)
 8004156:	429c      	cmp	r4, r3
 8004158:	bf08      	it	eq
 800415a:	68fc      	ldreq	r4, [r7, #12]
 800415c:	e78e      	b.n	800407c <setvbuf+0x24>
 800415e:	2e00      	cmp	r6, #0
 8004160:	d0cd      	beq.n	80040fe <setvbuf+0xa6>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	b913      	cbnz	r3, 800416c <setvbuf+0x114>
 8004166:	4638      	mov	r0, r7
 8004168:	f000 fa16 	bl	8004598 <__sinit>
 800416c:	f1b8 0f01 	cmp.w	r8, #1
 8004170:	bf08      	it	eq
 8004172:	89a3      	ldrheq	r3, [r4, #12]
 8004174:	6026      	str	r6, [r4, #0]
 8004176:	bf04      	itt	eq
 8004178:	f043 0301 	orreq.w	r3, r3, #1
 800417c:	81a3      	strheq	r3, [r4, #12]
 800417e:	89a2      	ldrh	r2, [r4, #12]
 8004180:	f012 0308 	ands.w	r3, r2, #8
 8004184:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004188:	d01c      	beq.n	80041c4 <setvbuf+0x16c>
 800418a:	07d3      	lsls	r3, r2, #31
 800418c:	bf41      	itttt	mi
 800418e:	2300      	movmi	r3, #0
 8004190:	426d      	negmi	r5, r5
 8004192:	60a3      	strmi	r3, [r4, #8]
 8004194:	61a5      	strmi	r5, [r4, #24]
 8004196:	bf58      	it	pl
 8004198:	60a5      	strpl	r5, [r4, #8]
 800419a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800419c:	f015 0501 	ands.w	r5, r5, #1
 80041a0:	d115      	bne.n	80041ce <setvbuf+0x176>
 80041a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80041a6:	e7c8      	b.n	800413a <setvbuf+0xe2>
 80041a8:	4648      	mov	r0, r9
 80041aa:	f000 fafb 	bl	80047a4 <malloc>
 80041ae:	4606      	mov	r6, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d0ae      	beq.n	8004112 <setvbuf+0xba>
 80041b4:	464d      	mov	r5, r9
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	e7d0      	b.n	8004162 <setvbuf+0x10a>
 80041c0:	2500      	movs	r5, #0
 80041c2:	e7a8      	b.n	8004116 <setvbuf+0xbe>
 80041c4:	60a3      	str	r3, [r4, #8]
 80041c6:	e7e8      	b.n	800419a <setvbuf+0x142>
 80041c8:	f04f 35ff 	mov.w	r5, #4294967295
 80041cc:	e7b9      	b.n	8004142 <setvbuf+0xea>
 80041ce:	2500      	movs	r5, #0
 80041d0:	e7b7      	b.n	8004142 <setvbuf+0xea>
 80041d2:	bf00      	nop
 80041d4:	2000000c 	.word	0x2000000c
 80041d8:	08005bd8 	.word	0x08005bd8
 80041dc:	08005bf8 	.word	0x08005bf8
 80041e0:	08005bb8 	.word	0x08005bb8

080041e4 <__swbuf_r>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	460e      	mov	r6, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	4605      	mov	r5, r0
 80041ec:	b118      	cbz	r0, 80041f6 <__swbuf_r+0x12>
 80041ee:	6983      	ldr	r3, [r0, #24]
 80041f0:	b90b      	cbnz	r3, 80041f6 <__swbuf_r+0x12>
 80041f2:	f000 f9d1 	bl	8004598 <__sinit>
 80041f6:	4b21      	ldr	r3, [pc, #132]	; (800427c <__swbuf_r+0x98>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d12b      	bne.n	8004254 <__swbuf_r+0x70>
 80041fc:	686c      	ldr	r4, [r5, #4]
 80041fe:	69a3      	ldr	r3, [r4, #24]
 8004200:	60a3      	str	r3, [r4, #8]
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	071a      	lsls	r2, r3, #28
 8004206:	d52f      	bpl.n	8004268 <__swbuf_r+0x84>
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	b36b      	cbz	r3, 8004268 <__swbuf_r+0x84>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	1ac0      	subs	r0, r0, r3
 8004212:	6963      	ldr	r3, [r4, #20]
 8004214:	b2f6      	uxtb	r6, r6
 8004216:	4283      	cmp	r3, r0
 8004218:	4637      	mov	r7, r6
 800421a:	dc04      	bgt.n	8004226 <__swbuf_r+0x42>
 800421c:	4621      	mov	r1, r4
 800421e:	4628      	mov	r0, r5
 8004220:	f000 f926 	bl	8004470 <_fflush_r>
 8004224:	bb30      	cbnz	r0, 8004274 <__swbuf_r+0x90>
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60a3      	str	r3, [r4, #8]
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	6022      	str	r2, [r4, #0]
 8004232:	701e      	strb	r6, [r3, #0]
 8004234:	6963      	ldr	r3, [r4, #20]
 8004236:	3001      	adds	r0, #1
 8004238:	4283      	cmp	r3, r0
 800423a:	d004      	beq.n	8004246 <__swbuf_r+0x62>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	07db      	lsls	r3, r3, #31
 8004240:	d506      	bpl.n	8004250 <__swbuf_r+0x6c>
 8004242:	2e0a      	cmp	r6, #10
 8004244:	d104      	bne.n	8004250 <__swbuf_r+0x6c>
 8004246:	4621      	mov	r1, r4
 8004248:	4628      	mov	r0, r5
 800424a:	f000 f911 	bl	8004470 <_fflush_r>
 800424e:	b988      	cbnz	r0, 8004274 <__swbuf_r+0x90>
 8004250:	4638      	mov	r0, r7
 8004252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <__swbuf_r+0x9c>)
 8004256:	429c      	cmp	r4, r3
 8004258:	d101      	bne.n	800425e <__swbuf_r+0x7a>
 800425a:	68ac      	ldr	r4, [r5, #8]
 800425c:	e7cf      	b.n	80041fe <__swbuf_r+0x1a>
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <__swbuf_r+0xa0>)
 8004260:	429c      	cmp	r4, r3
 8004262:	bf08      	it	eq
 8004264:	68ec      	ldreq	r4, [r5, #12]
 8004266:	e7ca      	b.n	80041fe <__swbuf_r+0x1a>
 8004268:	4621      	mov	r1, r4
 800426a:	4628      	mov	r0, r5
 800426c:	f000 f80c 	bl	8004288 <__swsetup_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	d0cb      	beq.n	800420c <__swbuf_r+0x28>
 8004274:	f04f 37ff 	mov.w	r7, #4294967295
 8004278:	e7ea      	b.n	8004250 <__swbuf_r+0x6c>
 800427a:	bf00      	nop
 800427c:	08005bd8 	.word	0x08005bd8
 8004280:	08005bf8 	.word	0x08005bf8
 8004284:	08005bb8 	.word	0x08005bb8

08004288 <__swsetup_r>:
 8004288:	4b32      	ldr	r3, [pc, #200]	; (8004354 <__swsetup_r+0xcc>)
 800428a:	b570      	push	{r4, r5, r6, lr}
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	4606      	mov	r6, r0
 8004290:	460c      	mov	r4, r1
 8004292:	b125      	cbz	r5, 800429e <__swsetup_r+0x16>
 8004294:	69ab      	ldr	r3, [r5, #24]
 8004296:	b913      	cbnz	r3, 800429e <__swsetup_r+0x16>
 8004298:	4628      	mov	r0, r5
 800429a:	f000 f97d 	bl	8004598 <__sinit>
 800429e:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <__swsetup_r+0xd0>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d10f      	bne.n	80042c4 <__swsetup_r+0x3c>
 80042a4:	686c      	ldr	r4, [r5, #4]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042ac:	0719      	lsls	r1, r3, #28
 80042ae:	d42c      	bmi.n	800430a <__swsetup_r+0x82>
 80042b0:	06dd      	lsls	r5, r3, #27
 80042b2:	d411      	bmi.n	80042d8 <__swsetup_r+0x50>
 80042b4:	2309      	movs	r3, #9
 80042b6:	6033      	str	r3, [r6, #0]
 80042b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	e03e      	b.n	8004342 <__swsetup_r+0xba>
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <__swsetup_r+0xd4>)
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d101      	bne.n	80042ce <__swsetup_r+0x46>
 80042ca:	68ac      	ldr	r4, [r5, #8]
 80042cc:	e7eb      	b.n	80042a6 <__swsetup_r+0x1e>
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <__swsetup_r+0xd8>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	bf08      	it	eq
 80042d4:	68ec      	ldreq	r4, [r5, #12]
 80042d6:	e7e6      	b.n	80042a6 <__swsetup_r+0x1e>
 80042d8:	0758      	lsls	r0, r3, #29
 80042da:	d512      	bpl.n	8004302 <__swsetup_r+0x7a>
 80042dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042de:	b141      	cbz	r1, 80042f2 <__swsetup_r+0x6a>
 80042e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e4:	4299      	cmp	r1, r3
 80042e6:	d002      	beq.n	80042ee <__swsetup_r+0x66>
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 fa63 	bl	80047b4 <_free_r>
 80042ee:	2300      	movs	r3, #0
 80042f0:	6363      	str	r3, [r4, #52]	; 0x34
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	2300      	movs	r3, #0
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	b94b      	cbnz	r3, 8004322 <__swsetup_r+0x9a>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004318:	d003      	beq.n	8004322 <__swsetup_r+0x9a>
 800431a:	4621      	mov	r1, r4
 800431c:	4630      	mov	r0, r6
 800431e:	f000 fa01 	bl	8004724 <__smakebuf_r>
 8004322:	89a0      	ldrh	r0, [r4, #12]
 8004324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004328:	f010 0301 	ands.w	r3, r0, #1
 800432c:	d00a      	beq.n	8004344 <__swsetup_r+0xbc>
 800432e:	2300      	movs	r3, #0
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	6963      	ldr	r3, [r4, #20]
 8004334:	425b      	negs	r3, r3
 8004336:	61a3      	str	r3, [r4, #24]
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	b943      	cbnz	r3, 800434e <__swsetup_r+0xc6>
 800433c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004340:	d1ba      	bne.n	80042b8 <__swsetup_r+0x30>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	0781      	lsls	r1, r0, #30
 8004346:	bf58      	it	pl
 8004348:	6963      	ldrpl	r3, [r4, #20]
 800434a:	60a3      	str	r3, [r4, #8]
 800434c:	e7f4      	b.n	8004338 <__swsetup_r+0xb0>
 800434e:	2000      	movs	r0, #0
 8004350:	e7f7      	b.n	8004342 <__swsetup_r+0xba>
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c
 8004358:	08005bd8 	.word	0x08005bd8
 800435c:	08005bf8 	.word	0x08005bf8
 8004360:	08005bb8 	.word	0x08005bb8

08004364 <__sflush_r>:
 8004364:	898a      	ldrh	r2, [r1, #12]
 8004366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436a:	4605      	mov	r5, r0
 800436c:	0710      	lsls	r0, r2, #28
 800436e:	460c      	mov	r4, r1
 8004370:	d458      	bmi.n	8004424 <__sflush_r+0xc0>
 8004372:	684b      	ldr	r3, [r1, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	dc05      	bgt.n	8004384 <__sflush_r+0x20>
 8004378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	dc02      	bgt.n	8004384 <__sflush_r+0x20>
 800437e:	2000      	movs	r0, #0
 8004380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004386:	2e00      	cmp	r6, #0
 8004388:	d0f9      	beq.n	800437e <__sflush_r+0x1a>
 800438a:	2300      	movs	r3, #0
 800438c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004390:	682f      	ldr	r7, [r5, #0]
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	d032      	beq.n	80043fc <__sflush_r+0x98>
 8004396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	075a      	lsls	r2, r3, #29
 800439c:	d505      	bpl.n	80043aa <__sflush_r+0x46>
 800439e:	6863      	ldr	r3, [r4, #4]
 80043a0:	1ac0      	subs	r0, r0, r3
 80043a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043a4:	b10b      	cbz	r3, 80043aa <__sflush_r+0x46>
 80043a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043a8:	1ac0      	subs	r0, r0, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	4602      	mov	r2, r0
 80043ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b0:	6a21      	ldr	r1, [r4, #32]
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b0      	blx	r6
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	d106      	bne.n	80043ca <__sflush_r+0x66>
 80043bc:	6829      	ldr	r1, [r5, #0]
 80043be:	291d      	cmp	r1, #29
 80043c0:	d82c      	bhi.n	800441c <__sflush_r+0xb8>
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <__sflush_r+0x108>)
 80043c4:	40ca      	lsrs	r2, r1
 80043c6:	07d6      	lsls	r6, r2, #31
 80043c8:	d528      	bpl.n	800441c <__sflush_r+0xb8>
 80043ca:	2200      	movs	r2, #0
 80043cc:	6062      	str	r2, [r4, #4]
 80043ce:	04d9      	lsls	r1, r3, #19
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	6022      	str	r2, [r4, #0]
 80043d4:	d504      	bpl.n	80043e0 <__sflush_r+0x7c>
 80043d6:	1c42      	adds	r2, r0, #1
 80043d8:	d101      	bne.n	80043de <__sflush_r+0x7a>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	b903      	cbnz	r3, 80043e0 <__sflush_r+0x7c>
 80043de:	6560      	str	r0, [r4, #84]	; 0x54
 80043e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e2:	602f      	str	r7, [r5, #0]
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d0ca      	beq.n	800437e <__sflush_r+0x1a>
 80043e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ec:	4299      	cmp	r1, r3
 80043ee:	d002      	beq.n	80043f6 <__sflush_r+0x92>
 80043f0:	4628      	mov	r0, r5
 80043f2:	f000 f9df 	bl	80047b4 <_free_r>
 80043f6:	2000      	movs	r0, #0
 80043f8:	6360      	str	r0, [r4, #52]	; 0x34
 80043fa:	e7c1      	b.n	8004380 <__sflush_r+0x1c>
 80043fc:	6a21      	ldr	r1, [r4, #32]
 80043fe:	2301      	movs	r3, #1
 8004400:	4628      	mov	r0, r5
 8004402:	47b0      	blx	r6
 8004404:	1c41      	adds	r1, r0, #1
 8004406:	d1c7      	bne.n	8004398 <__sflush_r+0x34>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0c4      	beq.n	8004398 <__sflush_r+0x34>
 800440e:	2b1d      	cmp	r3, #29
 8004410:	d001      	beq.n	8004416 <__sflush_r+0xb2>
 8004412:	2b16      	cmp	r3, #22
 8004414:	d101      	bne.n	800441a <__sflush_r+0xb6>
 8004416:	602f      	str	r7, [r5, #0]
 8004418:	e7b1      	b.n	800437e <__sflush_r+0x1a>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	e7ad      	b.n	8004380 <__sflush_r+0x1c>
 8004424:	690f      	ldr	r7, [r1, #16]
 8004426:	2f00      	cmp	r7, #0
 8004428:	d0a9      	beq.n	800437e <__sflush_r+0x1a>
 800442a:	0793      	lsls	r3, r2, #30
 800442c:	680e      	ldr	r6, [r1, #0]
 800442e:	bf08      	it	eq
 8004430:	694b      	ldreq	r3, [r1, #20]
 8004432:	600f      	str	r7, [r1, #0]
 8004434:	bf18      	it	ne
 8004436:	2300      	movne	r3, #0
 8004438:	eba6 0807 	sub.w	r8, r6, r7
 800443c:	608b      	str	r3, [r1, #8]
 800443e:	f1b8 0f00 	cmp.w	r8, #0
 8004442:	dd9c      	ble.n	800437e <__sflush_r+0x1a>
 8004444:	6a21      	ldr	r1, [r4, #32]
 8004446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004448:	4643      	mov	r3, r8
 800444a:	463a      	mov	r2, r7
 800444c:	4628      	mov	r0, r5
 800444e:	47b0      	blx	r6
 8004450:	2800      	cmp	r0, #0
 8004452:	dc06      	bgt.n	8004462 <__sflush_r+0xfe>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445a:	81a3      	strh	r3, [r4, #12]
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e78e      	b.n	8004380 <__sflush_r+0x1c>
 8004462:	4407      	add	r7, r0
 8004464:	eba8 0800 	sub.w	r8, r8, r0
 8004468:	e7e9      	b.n	800443e <__sflush_r+0xda>
 800446a:	bf00      	nop
 800446c:	20400001 	.word	0x20400001

08004470 <_fflush_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	690b      	ldr	r3, [r1, #16]
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b913      	cbnz	r3, 8004480 <_fflush_r+0x10>
 800447a:	2500      	movs	r5, #0
 800447c:	4628      	mov	r0, r5
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	b118      	cbz	r0, 800448a <_fflush_r+0x1a>
 8004482:	6983      	ldr	r3, [r0, #24]
 8004484:	b90b      	cbnz	r3, 800448a <_fflush_r+0x1a>
 8004486:	f000 f887 	bl	8004598 <__sinit>
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <_fflush_r+0x6c>)
 800448c:	429c      	cmp	r4, r3
 800448e:	d11b      	bne.n	80044c8 <_fflush_r+0x58>
 8004490:	686c      	ldr	r4, [r5, #4]
 8004492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ef      	beq.n	800447a <_fflush_r+0xa>
 800449a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800449c:	07d0      	lsls	r0, r2, #31
 800449e:	d404      	bmi.n	80044aa <_fflush_r+0x3a>
 80044a0:	0599      	lsls	r1, r3, #22
 80044a2:	d402      	bmi.n	80044aa <_fflush_r+0x3a>
 80044a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a6:	f000 f915 	bl	80046d4 <__retarget_lock_acquire_recursive>
 80044aa:	4628      	mov	r0, r5
 80044ac:	4621      	mov	r1, r4
 80044ae:	f7ff ff59 	bl	8004364 <__sflush_r>
 80044b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044b4:	07da      	lsls	r2, r3, #31
 80044b6:	4605      	mov	r5, r0
 80044b8:	d4e0      	bmi.n	800447c <_fflush_r+0xc>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	d4dd      	bmi.n	800447c <_fflush_r+0xc>
 80044c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c2:	f000 f908 	bl	80046d6 <__retarget_lock_release_recursive>
 80044c6:	e7d9      	b.n	800447c <_fflush_r+0xc>
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_fflush_r+0x70>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d101      	bne.n	80044d2 <_fflush_r+0x62>
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	e7df      	b.n	8004492 <_fflush_r+0x22>
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <_fflush_r+0x74>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf08      	it	eq
 80044d8:	68ec      	ldreq	r4, [r5, #12]
 80044da:	e7da      	b.n	8004492 <_fflush_r+0x22>
 80044dc:	08005bd8 	.word	0x08005bd8
 80044e0:	08005bf8 	.word	0x08005bf8
 80044e4:	08005bb8 	.word	0x08005bb8

080044e8 <std>:
 80044e8:	2300      	movs	r3, #0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	4604      	mov	r4, r0
 80044ee:	e9c0 3300 	strd	r3, r3, [r0]
 80044f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044f6:	6083      	str	r3, [r0, #8]
 80044f8:	8181      	strh	r1, [r0, #12]
 80044fa:	6643      	str	r3, [r0, #100]	; 0x64
 80044fc:	81c2      	strh	r2, [r0, #14]
 80044fe:	6183      	str	r3, [r0, #24]
 8004500:	4619      	mov	r1, r3
 8004502:	2208      	movs	r2, #8
 8004504:	305c      	adds	r0, #92	; 0x5c
 8004506:	f7ff fd11 	bl	8003f2c <memset>
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <std+0x38>)
 800450c:	6263      	str	r3, [r4, #36]	; 0x24
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <std+0x3c>)
 8004510:	62a3      	str	r3, [r4, #40]	; 0x28
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <std+0x40>)
 8004514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <std+0x44>)
 8004518:	6224      	str	r4, [r4, #32]
 800451a:	6323      	str	r3, [r4, #48]	; 0x30
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	08004f71 	.word	0x08004f71
 8004524:	08004f93 	.word	0x08004f93
 8004528:	08004fcb 	.word	0x08004fcb
 800452c:	08004fef 	.word	0x08004fef

08004530 <_cleanup_r>:
 8004530:	4901      	ldr	r1, [pc, #4]	; (8004538 <_cleanup_r+0x8>)
 8004532:	f000 b8af 	b.w	8004694 <_fwalk_reent>
 8004536:	bf00      	nop
 8004538:	08004471 	.word	0x08004471

0800453c <__sfmoreglue>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	2268      	movs	r2, #104	; 0x68
 8004540:	1e4d      	subs	r5, r1, #1
 8004542:	4355      	muls	r5, r2
 8004544:	460e      	mov	r6, r1
 8004546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800454a:	f000 f99f 	bl	800488c <_malloc_r>
 800454e:	4604      	mov	r4, r0
 8004550:	b140      	cbz	r0, 8004564 <__sfmoreglue+0x28>
 8004552:	2100      	movs	r1, #0
 8004554:	e9c0 1600 	strd	r1, r6, [r0]
 8004558:	300c      	adds	r0, #12
 800455a:	60a0      	str	r0, [r4, #8]
 800455c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004560:	f7ff fce4 	bl	8003f2c <memset>
 8004564:	4620      	mov	r0, r4
 8004566:	bd70      	pop	{r4, r5, r6, pc}

08004568 <__sfp_lock_acquire>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__sfp_lock_acquire+0x8>)
 800456a:	f000 b8b3 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	2000016d 	.word	0x2000016d

08004574 <__sfp_lock_release>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sfp_lock_release+0x8>)
 8004576:	f000 b8ae 	b.w	80046d6 <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	2000016d 	.word	0x2000016d

08004580 <__sinit_lock_acquire>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__sinit_lock_acquire+0x8>)
 8004582:	f000 b8a7 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	2000016e 	.word	0x2000016e

0800458c <__sinit_lock_release>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__sinit_lock_release+0x8>)
 800458e:	f000 b8a2 	b.w	80046d6 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	2000016e 	.word	0x2000016e

08004598 <__sinit>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	f7ff fff0 	bl	8004580 <__sinit_lock_acquire>
 80045a0:	69a3      	ldr	r3, [r4, #24]
 80045a2:	b11b      	cbz	r3, 80045ac <__sinit+0x14>
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a8:	f7ff bff0 	b.w	800458c <__sinit_lock_release>
 80045ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045b0:	6523      	str	r3, [r4, #80]	; 0x50
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <__sinit+0x68>)
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <__sinit+0x6c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	bf04      	itt	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	61a3      	streq	r3, [r4, #24]
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 f820 	bl	8004608 <__sfp>
 80045c8:	6060      	str	r0, [r4, #4]
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 f81c 	bl	8004608 <__sfp>
 80045d0:	60a0      	str	r0, [r4, #8]
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 f818 	bl	8004608 <__sfp>
 80045d8:	2200      	movs	r2, #0
 80045da:	60e0      	str	r0, [r4, #12]
 80045dc:	2104      	movs	r1, #4
 80045de:	6860      	ldr	r0, [r4, #4]
 80045e0:	f7ff ff82 	bl	80044e8 <std>
 80045e4:	68a0      	ldr	r0, [r4, #8]
 80045e6:	2201      	movs	r2, #1
 80045e8:	2109      	movs	r1, #9
 80045ea:	f7ff ff7d 	bl	80044e8 <std>
 80045ee:	68e0      	ldr	r0, [r4, #12]
 80045f0:	2202      	movs	r2, #2
 80045f2:	2112      	movs	r1, #18
 80045f4:	f7ff ff78 	bl	80044e8 <std>
 80045f8:	2301      	movs	r3, #1
 80045fa:	61a3      	str	r3, [r4, #24]
 80045fc:	e7d2      	b.n	80045a4 <__sinit+0xc>
 80045fe:	bf00      	nop
 8004600:	08005bb4 	.word	0x08005bb4
 8004604:	08004531 	.word	0x08004531

08004608 <__sfp>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	4607      	mov	r7, r0
 800460c:	f7ff ffac 	bl	8004568 <__sfp_lock_acquire>
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <__sfp+0x84>)
 8004612:	681e      	ldr	r6, [r3, #0]
 8004614:	69b3      	ldr	r3, [r6, #24]
 8004616:	b913      	cbnz	r3, 800461e <__sfp+0x16>
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff ffbd 	bl	8004598 <__sinit>
 800461e:	3648      	adds	r6, #72	; 0x48
 8004620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004624:	3b01      	subs	r3, #1
 8004626:	d503      	bpl.n	8004630 <__sfp+0x28>
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	b30b      	cbz	r3, 8004670 <__sfp+0x68>
 800462c:	6836      	ldr	r6, [r6, #0]
 800462e:	e7f7      	b.n	8004620 <__sfp+0x18>
 8004630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004634:	b9d5      	cbnz	r5, 800466c <__sfp+0x64>
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <__sfp+0x88>)
 8004638:	60e3      	str	r3, [r4, #12]
 800463a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800463e:	6665      	str	r5, [r4, #100]	; 0x64
 8004640:	f000 f847 	bl	80046d2 <__retarget_lock_init_recursive>
 8004644:	f7ff ff96 	bl	8004574 <__sfp_lock_release>
 8004648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800464c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004650:	6025      	str	r5, [r4, #0]
 8004652:	61a5      	str	r5, [r4, #24]
 8004654:	2208      	movs	r2, #8
 8004656:	4629      	mov	r1, r5
 8004658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800465c:	f7ff fc66 	bl	8003f2c <memset>
 8004660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004668:	4620      	mov	r0, r4
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	3468      	adds	r4, #104	; 0x68
 800466e:	e7d9      	b.n	8004624 <__sfp+0x1c>
 8004670:	2104      	movs	r1, #4
 8004672:	4638      	mov	r0, r7
 8004674:	f7ff ff62 	bl	800453c <__sfmoreglue>
 8004678:	4604      	mov	r4, r0
 800467a:	6030      	str	r0, [r6, #0]
 800467c:	2800      	cmp	r0, #0
 800467e:	d1d5      	bne.n	800462c <__sfp+0x24>
 8004680:	f7ff ff78 	bl	8004574 <__sfp_lock_release>
 8004684:	230c      	movs	r3, #12
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	e7ee      	b.n	8004668 <__sfp+0x60>
 800468a:	bf00      	nop
 800468c:	08005bb4 	.word	0x08005bb4
 8004690:	ffff0001 	.word	0xffff0001

08004694 <_fwalk_reent>:
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004698:	4606      	mov	r6, r0
 800469a:	4688      	mov	r8, r1
 800469c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046a0:	2700      	movs	r7, #0
 80046a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a6:	f1b9 0901 	subs.w	r9, r9, #1
 80046aa:	d505      	bpl.n	80046b8 <_fwalk_reent+0x24>
 80046ac:	6824      	ldr	r4, [r4, #0]
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d1f7      	bne.n	80046a2 <_fwalk_reent+0xe>
 80046b2:	4638      	mov	r0, r7
 80046b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b8:	89ab      	ldrh	r3, [r5, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d907      	bls.n	80046ce <_fwalk_reent+0x3a>
 80046be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c2:	3301      	adds	r3, #1
 80046c4:	d003      	beq.n	80046ce <_fwalk_reent+0x3a>
 80046c6:	4629      	mov	r1, r5
 80046c8:	4630      	mov	r0, r6
 80046ca:	47c0      	blx	r8
 80046cc:	4307      	orrs	r7, r0
 80046ce:	3568      	adds	r5, #104	; 0x68
 80046d0:	e7e9      	b.n	80046a6 <_fwalk_reent+0x12>

080046d2 <__retarget_lock_init_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <__retarget_lock_acquire_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <__retarget_lock_release_recursive>:
 80046d6:	4770      	bx	lr

080046d8 <__swhatbuf_r>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	460e      	mov	r6, r1
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	2900      	cmp	r1, #0
 80046e2:	b096      	sub	sp, #88	; 0x58
 80046e4:	4614      	mov	r4, r2
 80046e6:	461d      	mov	r5, r3
 80046e8:	da08      	bge.n	80046fc <__swhatbuf_r+0x24>
 80046ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	061a      	lsls	r2, r3, #24
 80046f4:	d410      	bmi.n	8004718 <__swhatbuf_r+0x40>
 80046f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fa:	e00e      	b.n	800471a <__swhatbuf_r+0x42>
 80046fc:	466a      	mov	r2, sp
 80046fe:	f000 fc9d 	bl	800503c <_fstat_r>
 8004702:	2800      	cmp	r0, #0
 8004704:	dbf1      	blt.n	80046ea <__swhatbuf_r+0x12>
 8004706:	9a01      	ldr	r2, [sp, #4]
 8004708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800470c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004710:	425a      	negs	r2, r3
 8004712:	415a      	adcs	r2, r3
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	e7ee      	b.n	80046f6 <__swhatbuf_r+0x1e>
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	2000      	movs	r0, #0
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	b016      	add	sp, #88	; 0x58
 8004720:	bd70      	pop	{r4, r5, r6, pc}
	...

08004724 <__smakebuf_r>:
 8004724:	898b      	ldrh	r3, [r1, #12]
 8004726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004728:	079d      	lsls	r5, r3, #30
 800472a:	4606      	mov	r6, r0
 800472c:	460c      	mov	r4, r1
 800472e:	d507      	bpl.n	8004740 <__smakebuf_r+0x1c>
 8004730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2301      	movs	r3, #1
 800473a:	6163      	str	r3, [r4, #20]
 800473c:	b002      	add	sp, #8
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	ab01      	add	r3, sp, #4
 8004742:	466a      	mov	r2, sp
 8004744:	f7ff ffc8 	bl	80046d8 <__swhatbuf_r>
 8004748:	9900      	ldr	r1, [sp, #0]
 800474a:	4605      	mov	r5, r0
 800474c:	4630      	mov	r0, r6
 800474e:	f000 f89d 	bl	800488c <_malloc_r>
 8004752:	b948      	cbnz	r0, 8004768 <__smakebuf_r+0x44>
 8004754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004758:	059a      	lsls	r2, r3, #22
 800475a:	d4ef      	bmi.n	800473c <__smakebuf_r+0x18>
 800475c:	f023 0303 	bic.w	r3, r3, #3
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	e7e3      	b.n	8004730 <__smakebuf_r+0xc>
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <__smakebuf_r+0x7c>)
 800476a:	62b3      	str	r3, [r6, #40]	; 0x28
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	9b00      	ldr	r3, [sp, #0]
 8004778:	6163      	str	r3, [r4, #20]
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	6120      	str	r0, [r4, #16]
 800477e:	b15b      	cbz	r3, 8004798 <__smakebuf_r+0x74>
 8004780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004784:	4630      	mov	r0, r6
 8004786:	f000 fc6b 	bl	8005060 <_isatty_r>
 800478a:	b128      	cbz	r0, 8004798 <__smakebuf_r+0x74>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	89a0      	ldrh	r0, [r4, #12]
 800479a:	4305      	orrs	r5, r0
 800479c:	81a5      	strh	r5, [r4, #12]
 800479e:	e7cd      	b.n	800473c <__smakebuf_r+0x18>
 80047a0:	08004531 	.word	0x08004531

080047a4 <malloc>:
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <malloc+0xc>)
 80047a6:	4601      	mov	r1, r0
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f000 b86f 	b.w	800488c <_malloc_r>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d044      	beq.n	8004844 <_free_r+0x90>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f000 fc6b 	bl	80050a4 <__malloc_lock>
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	b933      	cbnz	r3, 80047e4 <_free_r+0x30>
 80047d6:	6063      	str	r3, [r4, #4]
 80047d8:	6014      	str	r4, [r2, #0]
 80047da:	b003      	add	sp, #12
 80047dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e0:	f000 bc66 	b.w	80050b0 <__malloc_unlock>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x46>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf01      	itttt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	1949      	addeq	r1, r1, r5
 80047f6:	6021      	streq	r1, [r4, #0]
 80047f8:	e7ed      	b.n	80047d6 <_free_r+0x22>
 80047fa:	461a      	mov	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b10b      	cbz	r3, 8004804 <_free_r+0x50>
 8004800:	42a3      	cmp	r3, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x46>
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	1855      	adds	r5, r2, r1
 8004808:	42a5      	cmp	r5, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x70>
 800480c:	6824      	ldr	r4, [r4, #0]
 800480e:	4421      	add	r1, r4
 8004810:	1854      	adds	r4, r2, r1
 8004812:	42a3      	cmp	r3, r4
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	d1e0      	bne.n	80047da <_free_r+0x26>
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	4421      	add	r1, r4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	e7da      	b.n	80047da <_free_r+0x26>
 8004824:	d902      	bls.n	800482c <_free_r+0x78>
 8004826:	230c      	movs	r3, #12
 8004828:	6003      	str	r3, [r0, #0]
 800482a:	e7d6      	b.n	80047da <_free_r+0x26>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	1961      	adds	r1, r4, r5
 8004830:	428b      	cmp	r3, r1
 8004832:	bf04      	itt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	6054      	str	r4, [r2, #4]
 8004842:	e7ca      	b.n	80047da <_free_r+0x26>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}
 8004848:	20000170 	.word	0x20000170

0800484c <sbrk_aligned>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4e0e      	ldr	r6, [pc, #56]	; (8004888 <sbrk_aligned+0x3c>)
 8004850:	460c      	mov	r4, r1
 8004852:	6831      	ldr	r1, [r6, #0]
 8004854:	4605      	mov	r5, r0
 8004856:	b911      	cbnz	r1, 800485e <sbrk_aligned+0x12>
 8004858:	f000 fb7a 	bl	8004f50 <_sbrk_r>
 800485c:	6030      	str	r0, [r6, #0]
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 fb75 	bl	8004f50 <_sbrk_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d00a      	beq.n	8004880 <sbrk_aligned+0x34>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d007      	beq.n	8004884 <sbrk_aligned+0x38>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fb6a 	bl	8004f50 <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d101      	bne.n	8004884 <sbrk_aligned+0x38>
 8004880:	f04f 34ff 	mov.w	r4, #4294967295
 8004884:	4620      	mov	r0, r4
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	20000174 	.word	0x20000174

0800488c <_malloc_r>:
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	1ccd      	adds	r5, r1, #3
 8004892:	f025 0503 	bic.w	r5, r5, #3
 8004896:	3508      	adds	r5, #8
 8004898:	2d0c      	cmp	r5, #12
 800489a:	bf38      	it	cc
 800489c:	250c      	movcc	r5, #12
 800489e:	2d00      	cmp	r5, #0
 80048a0:	4607      	mov	r7, r0
 80048a2:	db01      	blt.n	80048a8 <_malloc_r+0x1c>
 80048a4:	42a9      	cmp	r1, r5
 80048a6:	d905      	bls.n	80048b4 <_malloc_r+0x28>
 80048a8:	230c      	movs	r3, #12
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	2600      	movs	r6, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	4e2e      	ldr	r6, [pc, #184]	; (8004970 <_malloc_r+0xe4>)
 80048b6:	f000 fbf5 	bl	80050a4 <__malloc_lock>
 80048ba:	6833      	ldr	r3, [r6, #0]
 80048bc:	461c      	mov	r4, r3
 80048be:	bb34      	cbnz	r4, 800490e <_malloc_r+0x82>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4638      	mov	r0, r7
 80048c4:	f7ff ffc2 	bl	800484c <sbrk_aligned>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	4604      	mov	r4, r0
 80048cc:	d14d      	bne.n	800496a <_malloc_r+0xde>
 80048ce:	6834      	ldr	r4, [r6, #0]
 80048d0:	4626      	mov	r6, r4
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d140      	bne.n	8004958 <_malloc_r+0xcc>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4631      	mov	r1, r6
 80048da:	4638      	mov	r0, r7
 80048dc:	eb04 0803 	add.w	r8, r4, r3
 80048e0:	f000 fb36 	bl	8004f50 <_sbrk_r>
 80048e4:	4580      	cmp	r8, r0
 80048e6:	d13a      	bne.n	800495e <_malloc_r+0xd2>
 80048e8:	6821      	ldr	r1, [r4, #0]
 80048ea:	3503      	adds	r5, #3
 80048ec:	1a6d      	subs	r5, r5, r1
 80048ee:	f025 0503 	bic.w	r5, r5, #3
 80048f2:	3508      	adds	r5, #8
 80048f4:	2d0c      	cmp	r5, #12
 80048f6:	bf38      	it	cc
 80048f8:	250c      	movcc	r5, #12
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ffa5 	bl	800484c <sbrk_aligned>
 8004902:	3001      	adds	r0, #1
 8004904:	d02b      	beq.n	800495e <_malloc_r+0xd2>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	442b      	add	r3, r5
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	e00e      	b.n	800492c <_malloc_r+0xa0>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	1b52      	subs	r2, r2, r5
 8004912:	d41e      	bmi.n	8004952 <_malloc_r+0xc6>
 8004914:	2a0b      	cmp	r2, #11
 8004916:	d916      	bls.n	8004946 <_malloc_r+0xba>
 8004918:	1961      	adds	r1, r4, r5
 800491a:	42a3      	cmp	r3, r4
 800491c:	6025      	str	r5, [r4, #0]
 800491e:	bf18      	it	ne
 8004920:	6059      	strne	r1, [r3, #4]
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	bf08      	it	eq
 8004926:	6031      	streq	r1, [r6, #0]
 8004928:	5162      	str	r2, [r4, r5]
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	4638      	mov	r0, r7
 800492e:	f104 060b 	add.w	r6, r4, #11
 8004932:	f000 fbbd 	bl	80050b0 <__malloc_unlock>
 8004936:	f026 0607 	bic.w	r6, r6, #7
 800493a:	1d23      	adds	r3, r4, #4
 800493c:	1af2      	subs	r2, r6, r3
 800493e:	d0b6      	beq.n	80048ae <_malloc_r+0x22>
 8004940:	1b9b      	subs	r3, r3, r6
 8004942:	50a3      	str	r3, [r4, r2]
 8004944:	e7b3      	b.n	80048ae <_malloc_r+0x22>
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	42a3      	cmp	r3, r4
 800494a:	bf0c      	ite	eq
 800494c:	6032      	streq	r2, [r6, #0]
 800494e:	605a      	strne	r2, [r3, #4]
 8004950:	e7ec      	b.n	800492c <_malloc_r+0xa0>
 8004952:	4623      	mov	r3, r4
 8004954:	6864      	ldr	r4, [r4, #4]
 8004956:	e7b2      	b.n	80048be <_malloc_r+0x32>
 8004958:	4634      	mov	r4, r6
 800495a:	6876      	ldr	r6, [r6, #4]
 800495c:	e7b9      	b.n	80048d2 <_malloc_r+0x46>
 800495e:	230c      	movs	r3, #12
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4638      	mov	r0, r7
 8004964:	f000 fba4 	bl	80050b0 <__malloc_unlock>
 8004968:	e7a1      	b.n	80048ae <_malloc_r+0x22>
 800496a:	6025      	str	r5, [r4, #0]
 800496c:	e7de      	b.n	800492c <_malloc_r+0xa0>
 800496e:	bf00      	nop
 8004970:	20000170 	.word	0x20000170

08004974 <__sfputc_r>:
 8004974:	6893      	ldr	r3, [r2, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	b410      	push	{r4}
 800497c:	6093      	str	r3, [r2, #8]
 800497e:	da08      	bge.n	8004992 <__sfputc_r+0x1e>
 8004980:	6994      	ldr	r4, [r2, #24]
 8004982:	42a3      	cmp	r3, r4
 8004984:	db01      	blt.n	800498a <__sfputc_r+0x16>
 8004986:	290a      	cmp	r1, #10
 8004988:	d103      	bne.n	8004992 <__sfputc_r+0x1e>
 800498a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800498e:	f7ff bc29 	b.w	80041e4 <__swbuf_r>
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	1c58      	adds	r0, r3, #1
 8004996:	6010      	str	r0, [r2, #0]
 8004998:	7019      	strb	r1, [r3, #0]
 800499a:	4608      	mov	r0, r1
 800499c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <__sfputs_r>:
 80049a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a4:	4606      	mov	r6, r0
 80049a6:	460f      	mov	r7, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	18d5      	adds	r5, r2, r3
 80049ac:	42ac      	cmp	r4, r5
 80049ae:	d101      	bne.n	80049b4 <__sfputs_r+0x12>
 80049b0:	2000      	movs	r0, #0
 80049b2:	e007      	b.n	80049c4 <__sfputs_r+0x22>
 80049b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b8:	463a      	mov	r2, r7
 80049ba:	4630      	mov	r0, r6
 80049bc:	f7ff ffda 	bl	8004974 <__sfputc_r>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d1f3      	bne.n	80049ac <__sfputs_r+0xa>
 80049c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049c8 <_vfiprintf_r>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	460d      	mov	r5, r1
 80049ce:	b09d      	sub	sp, #116	; 0x74
 80049d0:	4614      	mov	r4, r2
 80049d2:	4698      	mov	r8, r3
 80049d4:	4606      	mov	r6, r0
 80049d6:	b118      	cbz	r0, 80049e0 <_vfiprintf_r+0x18>
 80049d8:	6983      	ldr	r3, [r0, #24]
 80049da:	b90b      	cbnz	r3, 80049e0 <_vfiprintf_r+0x18>
 80049dc:	f7ff fddc 	bl	8004598 <__sinit>
 80049e0:	4b89      	ldr	r3, [pc, #548]	; (8004c08 <_vfiprintf_r+0x240>)
 80049e2:	429d      	cmp	r5, r3
 80049e4:	d11b      	bne.n	8004a1e <_vfiprintf_r+0x56>
 80049e6:	6875      	ldr	r5, [r6, #4]
 80049e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ea:	07d9      	lsls	r1, r3, #31
 80049ec:	d405      	bmi.n	80049fa <_vfiprintf_r+0x32>
 80049ee:	89ab      	ldrh	r3, [r5, #12]
 80049f0:	059a      	lsls	r2, r3, #22
 80049f2:	d402      	bmi.n	80049fa <_vfiprintf_r+0x32>
 80049f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049f6:	f7ff fe6d 	bl	80046d4 <__retarget_lock_acquire_recursive>
 80049fa:	89ab      	ldrh	r3, [r5, #12]
 80049fc:	071b      	lsls	r3, r3, #28
 80049fe:	d501      	bpl.n	8004a04 <_vfiprintf_r+0x3c>
 8004a00:	692b      	ldr	r3, [r5, #16]
 8004a02:	b9eb      	cbnz	r3, 8004a40 <_vfiprintf_r+0x78>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff fc3e 	bl	8004288 <__swsetup_r>
 8004a0c:	b1c0      	cbz	r0, 8004a40 <_vfiprintf_r+0x78>
 8004a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a10:	07dc      	lsls	r4, r3, #31
 8004a12:	d50e      	bpl.n	8004a32 <_vfiprintf_r+0x6a>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	b01d      	add	sp, #116	; 0x74
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	4b7b      	ldr	r3, [pc, #492]	; (8004c0c <_vfiprintf_r+0x244>)
 8004a20:	429d      	cmp	r5, r3
 8004a22:	d101      	bne.n	8004a28 <_vfiprintf_r+0x60>
 8004a24:	68b5      	ldr	r5, [r6, #8]
 8004a26:	e7df      	b.n	80049e8 <_vfiprintf_r+0x20>
 8004a28:	4b79      	ldr	r3, [pc, #484]	; (8004c10 <_vfiprintf_r+0x248>)
 8004a2a:	429d      	cmp	r5, r3
 8004a2c:	bf08      	it	eq
 8004a2e:	68f5      	ldreq	r5, [r6, #12]
 8004a30:	e7da      	b.n	80049e8 <_vfiprintf_r+0x20>
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	0598      	lsls	r0, r3, #22
 8004a36:	d4ed      	bmi.n	8004a14 <_vfiprintf_r+0x4c>
 8004a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a3a:	f7ff fe4c 	bl	80046d6 <__retarget_lock_release_recursive>
 8004a3e:	e7e9      	b.n	8004a14 <_vfiprintf_r+0x4c>
 8004a40:	2300      	movs	r3, #0
 8004a42:	9309      	str	r3, [sp, #36]	; 0x24
 8004a44:	2320      	movs	r3, #32
 8004a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a4e:	2330      	movs	r3, #48	; 0x30
 8004a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c14 <_vfiprintf_r+0x24c>
 8004a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a58:	f04f 0901 	mov.w	r9, #1
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	469a      	mov	sl, r3
 8004a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a64:	b10a      	cbz	r2, 8004a6a <_vfiprintf_r+0xa2>
 8004a66:	2a25      	cmp	r2, #37	; 0x25
 8004a68:	d1f9      	bne.n	8004a5e <_vfiprintf_r+0x96>
 8004a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a6e:	d00b      	beq.n	8004a88 <_vfiprintf_r+0xc0>
 8004a70:	465b      	mov	r3, fp
 8004a72:	4622      	mov	r2, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff ff93 	bl	80049a2 <__sfputs_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f000 80aa 	beq.w	8004bd6 <_vfiprintf_r+0x20e>
 8004a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a84:	445a      	add	r2, fp
 8004a86:	9209      	str	r2, [sp, #36]	; 0x24
 8004a88:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a2 	beq.w	8004bd6 <_vfiprintf_r+0x20e>
 8004a92:	2300      	movs	r3, #0
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9c:	f10a 0a01 	add.w	sl, sl, #1
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	9307      	str	r3, [sp, #28]
 8004aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8004aaa:	4654      	mov	r4, sl
 8004aac:	2205      	movs	r2, #5
 8004aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab2:	4858      	ldr	r0, [pc, #352]	; (8004c14 <_vfiprintf_r+0x24c>)
 8004ab4:	f7fb fbcc 	bl	8000250 <memchr>
 8004ab8:	9a04      	ldr	r2, [sp, #16]
 8004aba:	b9d8      	cbnz	r0, 8004af4 <_vfiprintf_r+0x12c>
 8004abc:	06d1      	lsls	r1, r2, #27
 8004abe:	bf44      	itt	mi
 8004ac0:	2320      	movmi	r3, #32
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac6:	0713      	lsls	r3, r2, #28
 8004ac8:	bf44      	itt	mi
 8004aca:	232b      	movmi	r3, #43	; 0x2b
 8004acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad6:	d015      	beq.n	8004b04 <_vfiprintf_r+0x13c>
 8004ad8:	9a07      	ldr	r2, [sp, #28]
 8004ada:	4654      	mov	r4, sl
 8004adc:	2000      	movs	r0, #0
 8004ade:	f04f 0c0a 	mov.w	ip, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae8:	3b30      	subs	r3, #48	; 0x30
 8004aea:	2b09      	cmp	r3, #9
 8004aec:	d94e      	bls.n	8004b8c <_vfiprintf_r+0x1c4>
 8004aee:	b1b0      	cbz	r0, 8004b1e <_vfiprintf_r+0x156>
 8004af0:	9207      	str	r2, [sp, #28]
 8004af2:	e014      	b.n	8004b1e <_vfiprintf_r+0x156>
 8004af4:	eba0 0308 	sub.w	r3, r0, r8
 8004af8:	fa09 f303 	lsl.w	r3, r9, r3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	46a2      	mov	sl, r4
 8004b02:	e7d2      	b.n	8004aaa <_vfiprintf_r+0xe2>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	1d19      	adds	r1, r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	9103      	str	r1, [sp, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bfbb      	ittet	lt
 8004b10:	425b      	neglt	r3, r3
 8004b12:	f042 0202 	orrlt.w	r2, r2, #2
 8004b16:	9307      	strge	r3, [sp, #28]
 8004b18:	9307      	strlt	r3, [sp, #28]
 8004b1a:	bfb8      	it	lt
 8004b1c:	9204      	strlt	r2, [sp, #16]
 8004b1e:	7823      	ldrb	r3, [r4, #0]
 8004b20:	2b2e      	cmp	r3, #46	; 0x2e
 8004b22:	d10c      	bne.n	8004b3e <_vfiprintf_r+0x176>
 8004b24:	7863      	ldrb	r3, [r4, #1]
 8004b26:	2b2a      	cmp	r3, #42	; 0x2a
 8004b28:	d135      	bne.n	8004b96 <_vfiprintf_r+0x1ce>
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	9203      	str	r2, [sp, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bfb8      	it	lt
 8004b36:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b3a:	3402      	adds	r4, #2
 8004b3c:	9305      	str	r3, [sp, #20]
 8004b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c24 <_vfiprintf_r+0x25c>
 8004b42:	7821      	ldrb	r1, [r4, #0]
 8004b44:	2203      	movs	r2, #3
 8004b46:	4650      	mov	r0, sl
 8004b48:	f7fb fb82 	bl	8000250 <memchr>
 8004b4c:	b140      	cbz	r0, 8004b60 <_vfiprintf_r+0x198>
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	eba0 000a 	sub.w	r0, r0, sl
 8004b54:	fa03 f000 	lsl.w	r0, r3, r0
 8004b58:	9b04      	ldr	r3, [sp, #16]
 8004b5a:	4303      	orrs	r3, r0
 8004b5c:	3401      	adds	r4, #1
 8004b5e:	9304      	str	r3, [sp, #16]
 8004b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b64:	482c      	ldr	r0, [pc, #176]	; (8004c18 <_vfiprintf_r+0x250>)
 8004b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6a:	2206      	movs	r2, #6
 8004b6c:	f7fb fb70 	bl	8000250 <memchr>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d03f      	beq.n	8004bf4 <_vfiprintf_r+0x22c>
 8004b74:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <_vfiprintf_r+0x254>)
 8004b76:	bb1b      	cbnz	r3, 8004bc0 <_vfiprintf_r+0x1f8>
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	3307      	adds	r3, #7
 8004b7c:	f023 0307 	bic.w	r3, r3, #7
 8004b80:	3308      	adds	r3, #8
 8004b82:	9303      	str	r3, [sp, #12]
 8004b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b86:	443b      	add	r3, r7
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8a:	e767      	b.n	8004a5c <_vfiprintf_r+0x94>
 8004b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b90:	460c      	mov	r4, r1
 8004b92:	2001      	movs	r0, #1
 8004b94:	e7a5      	b.n	8004ae2 <_vfiprintf_r+0x11a>
 8004b96:	2300      	movs	r3, #0
 8004b98:	3401      	adds	r4, #1
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f04f 0c0a 	mov.w	ip, #10
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba8:	3a30      	subs	r2, #48	; 0x30
 8004baa:	2a09      	cmp	r2, #9
 8004bac:	d903      	bls.n	8004bb6 <_vfiprintf_r+0x1ee>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0c5      	beq.n	8004b3e <_vfiprintf_r+0x176>
 8004bb2:	9105      	str	r1, [sp, #20]
 8004bb4:	e7c3      	b.n	8004b3e <_vfiprintf_r+0x176>
 8004bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bba:	4604      	mov	r4, r0
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e7f0      	b.n	8004ba2 <_vfiprintf_r+0x1da>
 8004bc0:	ab03      	add	r3, sp, #12
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <_vfiprintf_r+0x258>)
 8004bc8:	a904      	add	r1, sp, #16
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	4607      	mov	r7, r0
 8004bd2:	1c78      	adds	r0, r7, #1
 8004bd4:	d1d6      	bne.n	8004b84 <_vfiprintf_r+0x1bc>
 8004bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd8:	07d9      	lsls	r1, r3, #31
 8004bda:	d405      	bmi.n	8004be8 <_vfiprintf_r+0x220>
 8004bdc:	89ab      	ldrh	r3, [r5, #12]
 8004bde:	059a      	lsls	r2, r3, #22
 8004be0:	d402      	bmi.n	8004be8 <_vfiprintf_r+0x220>
 8004be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004be4:	f7ff fd77 	bl	80046d6 <__retarget_lock_release_recursive>
 8004be8:	89ab      	ldrh	r3, [r5, #12]
 8004bea:	065b      	lsls	r3, r3, #25
 8004bec:	f53f af12 	bmi.w	8004a14 <_vfiprintf_r+0x4c>
 8004bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bf2:	e711      	b.n	8004a18 <_vfiprintf_r+0x50>
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <_vfiprintf_r+0x258>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f880 	bl	8004d04 <_printf_i>
 8004c04:	e7e4      	b.n	8004bd0 <_vfiprintf_r+0x208>
 8004c06:	bf00      	nop
 8004c08:	08005bd8 	.word	0x08005bd8
 8004c0c:	08005bf8 	.word	0x08005bf8
 8004c10:	08005bb8 	.word	0x08005bb8
 8004c14:	08005c18 	.word	0x08005c18
 8004c18:	08005c22 	.word	0x08005c22
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	080049a3 	.word	0x080049a3
 8004c24:	08005c1e 	.word	0x08005c1e

08004c28 <_printf_common>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	4699      	mov	r9, r3
 8004c30:	688a      	ldr	r2, [r1, #8]
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bfb8      	it	lt
 8004c3c:	4613      	movlt	r3, r2
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c44:	4607      	mov	r7, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	b10a      	cbz	r2, 8004c4e <_printf_common+0x26>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	0699      	lsls	r1, r3, #26
 8004c52:	bf42      	ittt	mi
 8004c54:	6833      	ldrmi	r3, [r6, #0]
 8004c56:	3302      	addmi	r3, #2
 8004c58:	6033      	strmi	r3, [r6, #0]
 8004c5a:	6825      	ldr	r5, [r4, #0]
 8004c5c:	f015 0506 	ands.w	r5, r5, #6
 8004c60:	d106      	bne.n	8004c70 <_printf_common+0x48>
 8004c62:	f104 0a19 	add.w	sl, r4, #25
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	6832      	ldr	r2, [r6, #0]
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dc26      	bgt.n	8004cbe <_printf_common+0x96>
 8004c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c74:	1e13      	subs	r3, r2, #0
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	bf18      	it	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	0692      	lsls	r2, r2, #26
 8004c7e:	d42b      	bmi.n	8004cd8 <_printf_common+0xb0>
 8004c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c84:	4649      	mov	r1, r9
 8004c86:	4638      	mov	r0, r7
 8004c88:	47c0      	blx	r8
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d01e      	beq.n	8004ccc <_printf_common+0xa4>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	68e5      	ldr	r5, [r4, #12]
 8004c92:	6832      	ldr	r2, [r6, #0]
 8004c94:	f003 0306 	and.w	r3, r3, #6
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	bf08      	it	eq
 8004c9c:	1aad      	subeq	r5, r5, r2
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	bf0c      	ite	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	2500      	movne	r5, #0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bfc4      	itt	gt
 8004cae:	1a9b      	subgt	r3, r3, r2
 8004cb0:	18ed      	addgt	r5, r5, r3
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	341a      	adds	r4, #26
 8004cb6:	42b5      	cmp	r5, r6
 8004cb8:	d11a      	bne.n	8004cf0 <_printf_common+0xc8>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e008      	b.n	8004cd0 <_printf_common+0xa8>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4652      	mov	r2, sl
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	47c0      	blx	r8
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d103      	bne.n	8004cd4 <_printf_common+0xac>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	e7c6      	b.n	8004c66 <_printf_common+0x3e>
 8004cd8:	18e1      	adds	r1, r4, r3
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	2030      	movs	r0, #48	; 0x30
 8004cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ce2:	4422      	add	r2, r4
 8004ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cec:	3302      	adds	r3, #2
 8004cee:	e7c7      	b.n	8004c80 <_printf_common+0x58>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c0      	blx	r8
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d0e6      	beq.n	8004ccc <_printf_common+0xa4>
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7d9      	b.n	8004cb6 <_printf_common+0x8e>
	...

08004d04 <_printf_i>:
 8004d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	7e0f      	ldrb	r7, [r1, #24]
 8004d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d0c:	2f78      	cmp	r7, #120	; 0x78
 8004d0e:	4691      	mov	r9, r2
 8004d10:	4680      	mov	r8, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	469a      	mov	sl, r3
 8004d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d1a:	d807      	bhi.n	8004d2c <_printf_i+0x28>
 8004d1c:	2f62      	cmp	r7, #98	; 0x62
 8004d1e:	d80a      	bhi.n	8004d36 <_printf_i+0x32>
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	f000 80d8 	beq.w	8004ed6 <_printf_i+0x1d2>
 8004d26:	2f58      	cmp	r7, #88	; 0x58
 8004d28:	f000 80a3 	beq.w	8004e72 <_printf_i+0x16e>
 8004d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d34:	e03a      	b.n	8004dac <_printf_i+0xa8>
 8004d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d3a:	2b15      	cmp	r3, #21
 8004d3c:	d8f6      	bhi.n	8004d2c <_printf_i+0x28>
 8004d3e:	a101      	add	r1, pc, #4	; (adr r1, 8004d44 <_printf_i+0x40>)
 8004d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004db1 	.word	0x08004db1
 8004d4c:	08004d2d 	.word	0x08004d2d
 8004d50:	08004d2d 	.word	0x08004d2d
 8004d54:	08004d2d 	.word	0x08004d2d
 8004d58:	08004d2d 	.word	0x08004d2d
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004d2d 	.word	0x08004d2d
 8004d64:	08004d2d 	.word	0x08004d2d
 8004d68:	08004d2d 	.word	0x08004d2d
 8004d6c:	08004d2d 	.word	0x08004d2d
 8004d70:	08004ebd 	.word	0x08004ebd
 8004d74:	08004de1 	.word	0x08004de1
 8004d78:	08004e9f 	.word	0x08004e9f
 8004d7c:	08004d2d 	.word	0x08004d2d
 8004d80:	08004d2d 	.word	0x08004d2d
 8004d84:	08004edf 	.word	0x08004edf
 8004d88:	08004d2d 	.word	0x08004d2d
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004d2d 	.word	0x08004d2d
 8004d94:	08004d2d 	.word	0x08004d2d
 8004d98:	08004ea7 	.word	0x08004ea7
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	602a      	str	r2, [r5, #0]
 8004da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0a3      	b.n	8004ef8 <_printf_i+0x1f4>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	6829      	ldr	r1, [r5, #0]
 8004db4:	0606      	lsls	r6, r0, #24
 8004db6:	f101 0304 	add.w	r3, r1, #4
 8004dba:	d50a      	bpl.n	8004dd2 <_printf_i+0xce>
 8004dbc:	680e      	ldr	r6, [r1, #0]
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	da03      	bge.n	8004dcc <_printf_i+0xc8>
 8004dc4:	232d      	movs	r3, #45	; 0x2d
 8004dc6:	4276      	negs	r6, r6
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dcc:	485e      	ldr	r0, [pc, #376]	; (8004f48 <_printf_i+0x244>)
 8004dce:	230a      	movs	r3, #10
 8004dd0:	e019      	b.n	8004e06 <_printf_i+0x102>
 8004dd2:	680e      	ldr	r6, [r1, #0]
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dda:	bf18      	it	ne
 8004ddc:	b236      	sxthne	r6, r6
 8004dde:	e7ef      	b.n	8004dc0 <_printf_i+0xbc>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	1d19      	adds	r1, r3, #4
 8004de6:	6029      	str	r1, [r5, #0]
 8004de8:	0601      	lsls	r1, r0, #24
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0xec>
 8004dec:	681e      	ldr	r6, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <_printf_i+0xf2>
 8004df0:	0646      	lsls	r6, r0, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0xe8>
 8004df4:	881e      	ldrh	r6, [r3, #0]
 8004df6:	4854      	ldr	r0, [pc, #336]	; (8004f48 <_printf_i+0x244>)
 8004df8:	2f6f      	cmp	r7, #111	; 0x6f
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2308      	moveq	r3, #8
 8004dfe:	230a      	movne	r3, #10
 8004e00:	2100      	movs	r1, #0
 8004e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e06:	6865      	ldr	r5, [r4, #4]
 8004e08:	60a5      	str	r5, [r4, #8]
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	bfa2      	ittt	ge
 8004e0e:	6821      	ldrge	r1, [r4, #0]
 8004e10:	f021 0104 	bicge.w	r1, r1, #4
 8004e14:	6021      	strge	r1, [r4, #0]
 8004e16:	b90e      	cbnz	r6, 8004e1c <_printf_i+0x118>
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	d04d      	beq.n	8004eb8 <_printf_i+0x1b4>
 8004e1c:	4615      	mov	r5, r2
 8004e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e22:	fb03 6711 	mls	r7, r3, r1, r6
 8004e26:	5dc7      	ldrb	r7, [r0, r7]
 8004e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e2c:	4637      	mov	r7, r6
 8004e2e:	42bb      	cmp	r3, r7
 8004e30:	460e      	mov	r6, r1
 8004e32:	d9f4      	bls.n	8004e1e <_printf_i+0x11a>
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d10b      	bne.n	8004e50 <_printf_i+0x14c>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	07de      	lsls	r6, r3, #31
 8004e3c:	d508      	bpl.n	8004e50 <_printf_i+0x14c>
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	6861      	ldr	r1, [r4, #4]
 8004e42:	4299      	cmp	r1, r3
 8004e44:	bfde      	ittt	le
 8004e46:	2330      	movle	r3, #48	; 0x30
 8004e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e50:	1b52      	subs	r2, r2, r5
 8004e52:	6122      	str	r2, [r4, #16]
 8004e54:	f8cd a000 	str.w	sl, [sp]
 8004e58:	464b      	mov	r3, r9
 8004e5a:	aa03      	add	r2, sp, #12
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7ff fee2 	bl	8004c28 <_printf_common>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d14c      	bne.n	8004f02 <_printf_i+0x1fe>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	b004      	add	sp, #16
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e72:	4835      	ldr	r0, [pc, #212]	; (8004f48 <_printf_i+0x244>)
 8004e74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e78:	6829      	ldr	r1, [r5, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e80:	6029      	str	r1, [r5, #0]
 8004e82:	061d      	lsls	r5, r3, #24
 8004e84:	d514      	bpl.n	8004eb0 <_printf_i+0x1ac>
 8004e86:	07df      	lsls	r7, r3, #31
 8004e88:	bf44      	itt	mi
 8004e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e8e:	6023      	strmi	r3, [r4, #0]
 8004e90:	b91e      	cbnz	r6, 8004e9a <_printf_i+0x196>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	f023 0320 	bic.w	r3, r3, #32
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	2310      	movs	r3, #16
 8004e9c:	e7b0      	b.n	8004e00 <_printf_i+0xfc>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f043 0320 	orr.w	r3, r3, #32
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	2378      	movs	r3, #120	; 0x78
 8004ea8:	4828      	ldr	r0, [pc, #160]	; (8004f4c <_printf_i+0x248>)
 8004eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eae:	e7e3      	b.n	8004e78 <_printf_i+0x174>
 8004eb0:	0659      	lsls	r1, r3, #25
 8004eb2:	bf48      	it	mi
 8004eb4:	b2b6      	uxthmi	r6, r6
 8004eb6:	e7e6      	b.n	8004e86 <_printf_i+0x182>
 8004eb8:	4615      	mov	r5, r2
 8004eba:	e7bb      	b.n	8004e34 <_printf_i+0x130>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	6826      	ldr	r6, [r4, #0]
 8004ec0:	6961      	ldr	r1, [r4, #20]
 8004ec2:	1d18      	adds	r0, r3, #4
 8004ec4:	6028      	str	r0, [r5, #0]
 8004ec6:	0635      	lsls	r5, r6, #24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	d501      	bpl.n	8004ed0 <_printf_i+0x1cc>
 8004ecc:	6019      	str	r1, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <_printf_i+0x1d2>
 8004ed0:	0670      	lsls	r0, r6, #25
 8004ed2:	d5fb      	bpl.n	8004ecc <_printf_i+0x1c8>
 8004ed4:	8019      	strh	r1, [r3, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	4615      	mov	r5, r2
 8004edc:	e7ba      	b.n	8004e54 <_printf_i+0x150>
 8004ede:	682b      	ldr	r3, [r5, #0]
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	602a      	str	r2, [r5, #0]
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7fb f9b0 	bl	8000250 <memchr>
 8004ef0:	b108      	cbz	r0, 8004ef6 <_printf_i+0x1f2>
 8004ef2:	1b40      	subs	r0, r0, r5
 8004ef4:	6060      	str	r0, [r4, #4]
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	6123      	str	r3, [r4, #16]
 8004efa:	2300      	movs	r3, #0
 8004efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f00:	e7a8      	b.n	8004e54 <_printf_i+0x150>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	462a      	mov	r2, r5
 8004f06:	4649      	mov	r1, r9
 8004f08:	4640      	mov	r0, r8
 8004f0a:	47d0      	blx	sl
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d0ab      	beq.n	8004e68 <_printf_i+0x164>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	079b      	lsls	r3, r3, #30
 8004f14:	d413      	bmi.n	8004f3e <_printf_i+0x23a>
 8004f16:	68e0      	ldr	r0, [r4, #12]
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	bfb8      	it	lt
 8004f1e:	4618      	movlt	r0, r3
 8004f20:	e7a4      	b.n	8004e6c <_printf_i+0x168>
 8004f22:	2301      	movs	r3, #1
 8004f24:	4632      	mov	r2, r6
 8004f26:	4649      	mov	r1, r9
 8004f28:	4640      	mov	r0, r8
 8004f2a:	47d0      	blx	sl
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d09b      	beq.n	8004e68 <_printf_i+0x164>
 8004f30:	3501      	adds	r5, #1
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	9903      	ldr	r1, [sp, #12]
 8004f36:	1a5b      	subs	r3, r3, r1
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dcf2      	bgt.n	8004f22 <_printf_i+0x21e>
 8004f3c:	e7eb      	b.n	8004f16 <_printf_i+0x212>
 8004f3e:	2500      	movs	r5, #0
 8004f40:	f104 0619 	add.w	r6, r4, #25
 8004f44:	e7f5      	b.n	8004f32 <_printf_i+0x22e>
 8004f46:	bf00      	nop
 8004f48:	08005c29 	.word	0x08005c29
 8004f4c:	08005c3a 	.word	0x08005c3a

08004f50 <_sbrk_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d06      	ldr	r5, [pc, #24]	; (8004f6c <_sbrk_r+0x1c>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fc fa4c 	bl	80013f8 <_sbrk>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_sbrk_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_sbrk_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	20000178 	.word	0x20000178

08004f70 <__sread>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	460c      	mov	r4, r1
 8004f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f78:	f000 f8a0 	bl	80050bc <_read_r>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	bfab      	itete	ge
 8004f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f82:	89a3      	ldrhlt	r3, [r4, #12]
 8004f84:	181b      	addge	r3, r3, r0
 8004f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f8a:	bfac      	ite	ge
 8004f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f8e:	81a3      	strhlt	r3, [r4, #12]
 8004f90:	bd10      	pop	{r4, pc}

08004f92 <__swrite>:
 8004f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f96:	461f      	mov	r7, r3
 8004f98:	898b      	ldrh	r3, [r1, #12]
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	d505      	bpl.n	8004fb0 <__swrite+0x1e>
 8004fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa8:	2302      	movs	r3, #2
 8004faa:	2200      	movs	r2, #0
 8004fac:	f000 f868 	bl	8005080 <_lseek_r>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc6:	f000 b817 	b.w	8004ff8 <_write_r>

08004fca <__sseek>:
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	460c      	mov	r4, r1
 8004fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd2:	f000 f855 	bl	8005080 <_lseek_r>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	bf15      	itete	ne
 8004fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fe6:	81a3      	strheq	r3, [r4, #12]
 8004fe8:	bf18      	it	ne
 8004fea:	81a3      	strhne	r3, [r4, #12]
 8004fec:	bd10      	pop	{r4, pc}

08004fee <__sclose>:
 8004fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff2:	f000 b813 	b.w	800501c <_close_r>
	...

08004ff8 <_write_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_write_r+0x20>)
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4608      	mov	r0, r1
 8005000:	4611      	mov	r1, r2
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fc f892 	bl	8001130 <_write>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_write_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_write_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000178 	.word	0x20000178

0800501c <_close_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d06      	ldr	r5, [pc, #24]	; (8005038 <_close_r+0x1c>)
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fc f8ae 	bl	8001188 <_close>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_close_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_close_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000178 	.word	0x20000178

0800503c <_fstat_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d07      	ldr	r5, [pc, #28]	; (800505c <_fstat_r+0x20>)
 8005040:	2300      	movs	r3, #0
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	f7fc f8ed 	bl	8001228 <_fstat>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d102      	bne.n	8005058 <_fstat_r+0x1c>
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	b103      	cbz	r3, 8005058 <_fstat_r+0x1c>
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	bd38      	pop	{r3, r4, r5, pc}
 800505a:	bf00      	nop
 800505c:	20000178 	.word	0x20000178

08005060 <_isatty_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d06      	ldr	r5, [pc, #24]	; (800507c <_isatty_r+0x1c>)
 8005064:	2300      	movs	r3, #0
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	f7fc f84a 	bl	8001104 <_isatty>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_isatty_r+0x1a>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_isatty_r+0x1a>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	20000178 	.word	0x20000178

08005080 <_lseek_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d07      	ldr	r5, [pc, #28]	; (80050a0 <_lseek_r+0x20>)
 8005084:	4604      	mov	r4, r0
 8005086:	4608      	mov	r0, r1
 8005088:	4611      	mov	r1, r2
 800508a:	2200      	movs	r2, #0
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	f7fc f891 	bl	80011b6 <_lseek>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_lseek_r+0x1e>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_lseek_r+0x1e>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20000178 	.word	0x20000178

080050a4 <__malloc_lock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_lock+0x8>)
 80050a6:	f7ff bb15 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	2000016c 	.word	0x2000016c

080050b0 <__malloc_unlock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_unlock+0x8>)
 80050b2:	f7ff bb10 	b.w	80046d6 <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	2000016c 	.word	0x2000016c

080050bc <_read_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d07      	ldr	r5, [pc, #28]	; (80050dc <_read_r+0x20>)
 80050c0:	4604      	mov	r4, r0
 80050c2:	4608      	mov	r0, r1
 80050c4:	4611      	mov	r1, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f7fc f884 	bl	80011d8 <_read>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_read_r+0x1e>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_read_r+0x1e>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	20000178 	.word	0x20000178

080050e0 <_init>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

080050ec <_fini>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr
