
TemperaturaI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  080071a8  080071a8  000171a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800790c  0800790c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007914  08007914  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800791c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08007af8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007af8  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360f  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002297  00000000  00000000  00033819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00035ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029515  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014841  00000000  00000000  00060f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feacf  00000000  00000000  0007575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017422d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005410  00000000  00000000  00174280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00179690  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001796cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08007190 	.word	0x08007190

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08007190 	.word	0x08007190

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <Saludo>:

/**
 *
 */

void Saludo(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	printf("\x1b[2J"); //Clear the screen
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <Saludo+0x58>)
 80005fa:	f004 fbf7 	bl	8004dec <iprintf>
	printf("\n\r***************************************************************");
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <Saludo+0x5c>)
 8000600:	f004 fbf4 	bl	8004dec <iprintf>
	printf("\n\r* Universidad Escuela Colombiana de Ingenieria Julio Garavito *");
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <Saludo+0x60>)
 8000606:	f004 fbf1 	bl	8004dec <iprintf>
	printf("\n\r*                    DMIC - B - 2022                          *");
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <Saludo+0x64>)
 800060c:	f004 fbee 	bl	8004dec <iprintf>
	printf("\n\r*\t Jose De La Hoz                                       *");
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <Saludo+0x68>)
 8000612:	f004 fbeb 	bl	8004dec <iprintf>
	printf("\n\r*\t Jhan Carlos Reyes                                    *");
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <Saludo+0x6c>)
 8000618:	f004 fbe8 	bl	8004dec <iprintf>
	printf("\n\r*\t Esneider Silva                                       *");
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <Saludo+0x70>)
 800061e:	f004 fbe5 	bl	8004dec <iprintf>
	printf("\n\r*\t\t'GENERADOR DE NUMEROS PSEUDOALEATORIO'        *");
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <Saludo+0x74>)
 8000624:	f004 fbe2 	bl	8004dec <iprintf>
	printf("\n\r* Desarrollado para una tarjeta NUCLE0-F767ZI                 *");
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <Saludo+0x78>)
 800062a:	f004 fbdf 	bl	8004dec <iprintf>
	printf("\n\r***************************************************************");
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <Saludo+0x5c>)
 8000630:	f004 fbdc 	bl	8004dec <iprintf>
	printf("\r\n");
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <Saludo+0x7c>)
 8000636:	f004 fc5f 	bl	8004ef8 <puts>
	printf("\n\rPara una mejor experiencia, habilite la opcion de eco local en su terminal");
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <Saludo+0x80>)
 800063c:	f004 fbd6 	bl	8004dec <iprintf>
	printf("\r\n");
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <Saludo+0x7c>)
 8000642:	f004 fc59 	bl	8004ef8 <puts>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080071a8 	.word	0x080071a8
 8000650:	080071b0 	.word	0x080071b0
 8000654:	080071f4 	.word	0x080071f4
 8000658:	08007238 	.word	0x08007238
 800065c:	0800727c 	.word	0x0800727c
 8000660:	080072b8 	.word	0x080072b8
 8000664:	080072f4 	.word	0x080072f4
 8000668:	08007330 	.word	0x08007330
 800066c:	08007368 	.word	0x08007368
 8000670:	080073ac 	.word	0x080073ac
 8000674:	080073b0 	.word	0x080073b0

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fc94 	bl	8000faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f895 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f9c1 	bl	8000a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068a:	f000 f98f 	bl	80009ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800068e:	f000 f93f 	bl	8000910 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000692:	f000 f8fd 	bl	8000890 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); // declarar Uart3 (conectado con el stlink)
 8000696:	4840      	ldr	r0, [pc, #256]	; (8000798 <main+0x120>)
 8000698:	f000 fa24 	bl	8000ae4 <RetargetInit>
  uint8_t bufe[] = "error\r\n";
 800069c:	4a3f      	ldr	r2, [pc, #252]	; (800079c <main+0x124>)
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a6:	e883 0003 	stmia.w	r3, {r0, r1}
   char buffer[12];
   uint8_t buff_rx[2] = {0};
 80006aa:	2300      	movs	r3, #0
 80006ac:	81bb      	strh	r3, [r7, #12]
   uint8_t buff_tx[2] = {0};
 80006ae:	2300      	movs	r3, #0
 80006b0:	813b      	strh	r3, [r7, #8]
   static const uint8_t ADDR_W = 0x90;
   static const uint8_t POINTER_Temp = 0x00;
   uint16_t val = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
   uint16_t a1 = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	857b      	strh	r3, [r7, #42]	; 0x2a
   uint16_t a0 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	853b      	strh	r3, [r7, #40]	; 0x28
   float temp;
   HAL_StatusTypeDef ret;

   buff_tx[0]= POINTER_Temp;
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <main+0x128>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	723b      	strb	r3, [r7, #8]


	uint8_t buff[4]={0};	//Transmitir
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]


	Saludo();
 80006c8:	f7ff ff94 	bl	80005f4 <Saludo>


	while (1){
		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx, 1, HAL_MAX_DELAY);
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <main+0x12c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b299      	uxth	r1, r3
 80006d2:	f107 0208 	add.w	r2, r7, #8
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	4832      	ldr	r0, [pc, #200]	; (80007a8 <main+0x130>)
 80006e0:	f001 f820 	bl	8001724 <HAL_I2C_Master_Transmit>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			  if (ret == HAL_OK){
 80006ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d140      	bne.n	8000774 <main+0xfc>

				  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_W, buff_rx, 2, HAL_MAX_DELAY);
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <main+0x12c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b299      	uxth	r1, r3
 80006f8:	f107 020c 	add.w	r2, r7, #12
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2302      	movs	r3, #2
 8000704:	4828      	ldr	r0, [pc, #160]	; (80007a8 <main+0x130>)
 8000706:	f001 f901 	bl	800190c <HAL_I2C_Master_Receive>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  if(ret == HAL_OK){
 8000710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000714:	2b00      	cmp	r3, #0
 8000716:	d12d      	bne.n	8000774 <main+0xfc>

					  a1 = buff_rx[1];
 8000718:	7b7b      	ldrb	r3, [r7, #13]
 800071a:	857b      	strh	r3, [r7, #42]	; 0x2a
					  a1 = (a1 >> 5);
 800071c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	857b      	strh	r3, [r7, #42]	; 0x2a

					  a0 = buff_rx[0];
 8000722:	7b3b      	ldrb	r3, [r7, #12]
 8000724:	853b      	strh	r3, [r7, #40]	; 0x28
					  a0 = (a0 << 3);
 8000726:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	853b      	strh	r3, [r7, #40]	; 0x28

					  val = (a0 | a1);
 800072c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800072e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000730:	4313      	orrs	r3, r2
 8000732:	85bb      	strh	r3, [r7, #44]	; 0x2c

					  temp = val*0.125;
 8000734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800073e:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8000742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000746:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800074a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

					 // gcvt(temp, 3, buffer);

					  //HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
					 // HAL_Delay(400);
					  itoa(val, (char*) buff, 10);
 800074e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	220a      	movs	r2, #10
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fefb 	bl	8004550 <itoa>
					  //gcvt(temp, 4, buff);

					  printf("%.6f\r\n", temp);
 800075a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800075e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000762:	ec53 2b17 	vmov	r2, r3, d7
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <main+0x134>)
 8000768:	f004 fb40 	bl	8004dec <iprintf>
					  HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f000 fc78 	bl	8001064 <HAL_Delay>
				  }
			  }

			  if (ret != HAL_OK){
 8000774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0a7      	beq.n	80006cc <main+0x54>
				  HAL_UART_Transmit(&huart3, bufe, sizeof(bufe), HAL_MAX_DELAY);
 800077c:	f107 011c 	add.w	r1, r7, #28
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	2208      	movs	r2, #8
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <main+0x120>)
 8000788:	f003 f93e 	bl	8003a08 <HAL_UART_Transmit>
				  HAL_Delay(300);
 800078c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000790:	f000 fc68 	bl	8001064 <HAL_Delay>
		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_W, buff_tx, 1, HAL_MAX_DELAY);
 8000794:	e79a      	b.n	80006cc <main+0x54>
 8000796:	bf00      	nop
 8000798:	20000298 	.word	0x20000298
 800079c:	080074e8 	.word	0x080074e8
 80007a0:	080074f0 	.word	0x080074f0
 80007a4:	080074f1 	.word	0x080074f1
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	080074e0 	.word	0x080074e0

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fec8 	bl	8004554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <SystemClock_Config+0xd8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a2b      	ldr	r2, [pc, #172]	; (8000888 <SystemClock_Config+0xd8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <SystemClock_Config+0xd8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xdc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a25      	ldr	r2, [pc, #148]	; (800088c <SystemClock_Config+0xdc>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <SystemClock_Config+0xdc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fcb3 	bl	80021a0 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 f94a 	bl	8000ad8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000844:	f001 fc5c 	bl	8002100 <HAL_PWREx_EnableOverDrive>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800084e:	f000 f943 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff44 	bl	80026fc <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800087a:	f000 f92d 	bl	8000ad8 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f000 fe9a 	bl	8001604 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f8ff 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f001 fb77 	bl	8001fd0 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f8f6 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f001 fbb9 	bl	8002066 <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f8ed 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001f8 	.word	0x200001f8
 8000908:	40005400 	.word	0x40005400
 800090c:	10805d88 	.word	0x10805d88

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000934:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000938:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000946:	f241 3287 	movw	r2, #4999	; 0x1387
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_TIM2_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <MX_TIM2_Init+0x98>)
 800095a:	f002 fd1d 	bl	8003398 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f8b8 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000976:	f002 fd67 	bl	8003448 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000980:	f000 f8aa 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM2_Init+0x98>)
 8000992:	f002 ff5d 	bl	8003850 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800099c:	f000 f89c 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000024c 	.word	0x2000024c

080009ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_USART3_UART_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009f0:	f002 ffbc 	bl	800396c <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 f86d 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000298 	.word	0x20000298
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a29      	ldr	r2, [pc, #164]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_GPIO_Init+0xc0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2101      	movs	r1, #1
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0xc4>)
 8000a88:	f000 fda2 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0xc8>)
 8000aa2:	f000 fbe9 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0xc4>)
 8000abe:	f000 fbdb 	bl	8001278 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <RetargetInit+0x28>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <RetargetInit+0x2c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6898      	ldr	r0, [r3, #8]
 8000af8:	2300      	movs	r3, #0
 8000afa:	2202      	movs	r2, #2
 8000afc:	2100      	movs	r1, #0
 8000afe:	f004 fa03 	bl	8004f08 <setvbuf>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000320 	.word	0x20000320
 8000b10:	2000000c 	.word	0x2000000c

08000b14 <_isatty>:

int _isatty(int fd) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db04      	blt.n	8000b2c <_isatty+0x18>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	dc01      	bgt.n	8000b2c <_isatty+0x18>
    return 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e005      	b.n	8000b38 <_isatty+0x24>

  errno = EBADF;
 8000b2c:	f003 fcce 	bl	80044cc <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2209      	movs	r2, #9
 8000b34:	601a      	str	r2, [r3, #0]
  return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d002      	beq.n	8000b58 <_write+0x18>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d111      	bne.n	8000b7c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <_write+0x54>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	f002 ff4f 	bl	8003a08 <HAL_UART_Transmit>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b6e:	7dfb      	ldrb	r3, [r7, #23]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <_write+0x38>
      return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	e008      	b.n	8000b8a <_write+0x4a>
    else
      return EIO;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	e006      	b.n	8000b8a <_write+0x4a>
  }
  errno = EBADF;
 8000b7c:	f003 fca6 	bl	80044cc <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2209      	movs	r2, #9
 8000b84:	601a      	str	r2, [r3, #0]
  return -1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000320 	.word	0x20000320

08000b98 <_close>:

int _close(int fd) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db04      	blt.n	8000bb0 <_close+0x18>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	dc01      	bgt.n	8000bb0 <_close+0x18>
    return 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e006      	b.n	8000bbe <_close+0x26>

  errno = EBADF;
 8000bb0:	f003 fc8c 	bl	80044cc <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2209      	movs	r2, #9
 8000bb8:	601a      	str	r2, [r3, #0]
  return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bd2:	f003 fc7b 	bl	80044cc <__errno>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2209      	movs	r2, #9
 8000bda:	601a      	str	r2, [r3, #0]
  return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d110      	bne.n	8000c1c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <_read+0x4c>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	2201      	movs	r2, #1
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	f002 ff82 	bl	8003b0e <HAL_UART_Receive>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <_read+0x30>
      return 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e008      	b.n	8000c2a <_read+0x42>
    else
      return EIO;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	e006      	b.n	8000c2a <_read+0x42>
  }
  errno = EBADF;
 8000c1c:	f003 fc56 	bl	80044cc <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2209      	movs	r2, #9
 8000c24:	601a      	str	r2, [r3, #0]
  return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000320 	.word	0x20000320

08000c38 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db08      	blt.n	8000c5a <_fstat+0x22>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	dc05      	bgt.n	8000c5a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c54:	605a      	str	r2, [r3, #4]
    return 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e005      	b.n	8000c66 <_fstat+0x2e>
  }

  errno = EBADF;
 8000c5a:	f003 fc37 	bl	80044cc <__errno>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2209      	movs	r2, #9
 8000c62:	601a      	str	r2, [r3, #0]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0ae      	sub	sp, #184	; 0xb8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2290      	movs	r2, #144	; 0x90
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fc3b 	bl	8004554 <memset>
  if(hi2c->Instance==I2C1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_I2C_MspInit+0xb4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d13c      	bne.n	8000d62 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 ff26 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d02:	f7ff fee9 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0xbc>)
 8000d46:	f000 fa97 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	37b8      	adds	r7, #184	; 0xb8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d10b      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ae      	sub	sp, #184	; 0xb8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2290      	movs	r2, #144	; 0x90
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fbbd 	bl	8004554 <memset>
  if(huart->Instance==USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d13c      	bne.n	8000e5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fea8 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfe:	f7ff fe6b 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e5a:	f000 fa0d 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	37b8      	adds	r7, #184	; 0xb8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8b0 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f003 fae8 	bl	80044cc <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20080000 	.word	0x20080000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000324 	.word	0x20000324
 8000f30:	20000340 	.word	0x20000340

08000f34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f003 faa7 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb75 	bl	8000678 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000f9c:	0800791c 	.word	0x0800791c
  ldr r2, =_sbss
 8000fa0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000fa4:	2000033c 	.word	0x2000033c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>

08000faa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f92e 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f805 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff fe59 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f93b 	bl	800125e <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f911 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000328 	.word	0x20000328

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000328 	.word	0x20000328

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x40>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	05fa0000 	.word	0x05fa0000

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff47 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5c 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb0 	bl	80011cc <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e175      	b.n	8001584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8164 	bne.w	800157e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x56>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80be 	beq.w	800157e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_GPIO_Init+0x324>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a65      	ldr	r2, [pc, #404]	; (800159c <HAL_GPIO_Init+0x324>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_GPIO_Init+0x324>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800141a:	4a61      	ldr	r2, [pc, #388]	; (80015a0 <HAL_GPIO_Init+0x328>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_GPIO_Init+0x32c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d037      	beq.n	80014b6 <HAL_GPIO_Init+0x23e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <HAL_GPIO_Init+0x330>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d031      	beq.n	80014b2 <HAL_GPIO_Init+0x23a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a56      	ldr	r2, [pc, #344]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x236>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a55      	ldr	r2, [pc, #340]	; (80015b0 <HAL_GPIO_Init+0x338>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x232>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x33c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <HAL_GPIO_Init+0x340>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x22a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_GPIO_Init+0x344>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_GPIO_Init+0x348>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_GPIO_Init+0x34c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <HAL_GPIO_Init+0x350>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x21a>
 800148e:	2309      	movs	r3, #9
 8001490:	e012      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 8001492:	230a      	movs	r3, #10
 8001494:	e010      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 8001496:	2308      	movs	r3, #8
 8001498:	e00e      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 800149a:	2307      	movs	r3, #7
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 800149e:	2306      	movs	r3, #6
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x240>
 80014b6:	2300      	movs	r3, #0
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <HAL_GPIO_Init+0x328>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_GPIO_Init+0x354>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a34      	ldr	r2, [pc, #208]	; (80015cc <HAL_GPIO_Init+0x354>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_GPIO_Init+0x354>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a29      	ldr	r2, [pc, #164]	; (80015cc <HAL_GPIO_Init+0x354>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_GPIO_Init+0x354>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_GPIO_Init+0x354>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_GPIO_Init+0x354>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_GPIO_Init+0x354>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	f67f ae86 	bls.w	8001298 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40021400 	.word	0x40021400
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40021c00 	.word	0x40021c00
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40022400 	.word	0x40022400
 80015cc:	40013c00 	.word	0x40013c00

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fb44 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e006      	b.n	800168c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800168a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d104      	bne.n	800169e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_I2C_Init+0x11c>)
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69d9      	ldr	r1, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	02008000 	.word	0x02008000

08001724 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	461a      	mov	r2, r3
 8001730:	460b      	mov	r3, r1
 8001732:	817b      	strh	r3, [r7, #10]
 8001734:	4613      	mov	r3, r2
 8001736:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b20      	cmp	r3, #32
 8001742:	f040 80da 	bne.w	80018fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x30>
 8001750:	2302      	movs	r3, #2
 8001752:	e0d3      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800175c:	f7ff fc76 	bl	800104c <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2319      	movs	r3, #25
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f9e6 	bl	8001b40 <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0be      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2221      	movs	r2, #33	; 0x21
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2210      	movs	r2, #16
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	893a      	ldrh	r2, [r7, #8]
 800179e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2bff      	cmp	r3, #255	; 0xff
 80017ae:	d90e      	bls.n	80017ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_I2C_Master_Transmit+0x1e0>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fbd0 	bl	8001f6c <I2C_TransferConfig>
 80017cc:	e06c      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	8979      	ldrh	r1, [r7, #10]
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_I2C_Master_Transmit+0x1e0>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fbbf 	bl	8001f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ee:	e05b      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	6a39      	ldr	r1, [r7, #32]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f9e3 	bl	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e07b      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d034      	beq.n	80018a8 <HAL_I2C_Master_Transmit+0x184>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d130      	bne.n	80018a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	2200      	movs	r2, #0
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f975 	bl	8001b40 <I2C_WaitOnFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e04d      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d90e      	bls.n	8001888 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	22ff      	movs	r2, #255	; 0xff
 800186e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	b2da      	uxtb	r2, r3
 8001876:	8979      	ldrh	r1, [r7, #10]
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fb73 	bl	8001f6c <I2C_TransferConfig>
 8001886:	e00f      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	b2da      	uxtb	r2, r3
 8001898:	8979      	ldrh	r1, [r7, #10]
 800189a:	2300      	movs	r3, #0
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fb62 	bl	8001f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d19e      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9c2 	bl	8001c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01a      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2220      	movs	r2, #32
 80018cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_I2C_Master_Transmit+0x1e4>)
 80018da:	400b      	ands	r3, r1
 80018dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	80002000 	.word	0x80002000
 8001908:	fe00e800 	.word	0xfe00e800

0800190c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
 800191c:	4613      	mov	r3, r2
 800191e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b20      	cmp	r3, #32
 800192a:	f040 80db 	bne.w	8001ae4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_I2C_Master_Receive+0x30>
 8001938:	2302      	movs	r3, #2
 800193a:	e0d4      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001944:	f7ff fb82 	bl	800104c <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2319      	movs	r3, #25
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f8f2 	bl	8001b40 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0bf      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2222      	movs	r2, #34	; 0x22
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2210      	movs	r2, #16
 8001972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	893a      	ldrh	r2, [r7, #8]
 8001986:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	2bff      	cmp	r3, #255	; 0xff
 8001996:	d90e      	bls.n	80019b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	8979      	ldrh	r1, [r7, #10]
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <HAL_I2C_Master_Receive+0x1e4>)
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fadc 	bl	8001f6c <I2C_TransferConfig>
 80019b4:	e06d      	b.n	8001a92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_I2C_Master_Receive+0x1e4>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 facb 	bl	8001f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019d6:	e05c      	b.n	8001a92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	6a39      	ldr	r1, [r7, #32]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f96b 	bl	8001cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e07c      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d034      	beq.n	8001a92 <HAL_I2C_Master_Receive+0x186>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d130      	bne.n	8001a92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f880 	bl	8001b40 <I2C_WaitOnFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e04d      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2bff      	cmp	r3, #255	; 0xff
 8001a52:	d90e      	bls.n	8001a72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	22ff      	movs	r2, #255	; 0xff
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	8979      	ldrh	r1, [r7, #10]
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 fa7e 	bl	8001f6c <I2C_TransferConfig>
 8001a70:	e00f      	b.n	8001a92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	8979      	ldrh	r1, [r7, #10]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 fa6d 	bl	8001f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d19d      	bne.n	80019d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f8cd 	bl	8001c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e01a      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_I2C_Master_Receive+0x1e8>)
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	80002400 	.word	0x80002400
 8001af4:	fe00e800 	.word	0xfe00e800

08001af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d103      	bne.n	8001b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d007      	beq.n	8001b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	619a      	str	r2, [r3, #24]
  }
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b50:	e022      	b.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d01e      	beq.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff fa77 	bl	800104c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d113      	bne.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f043 0220 	orr.w	r2, r3, #32
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00f      	b.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d0cd      	beq.n	8001b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bcc:	e02c      	b.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f8ea 	bl	8001dac <I2C_IsErrorOccurred>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02a      	b.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d01e      	beq.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff fa2f 	bl	800104c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d113      	bne.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e007      	b.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d1cb      	bne.n	8001bce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c4c:	e028      	b.n	8001ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f8aa 	bl	8001dac <I2C_IsErrorOccurred>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e026      	b.n	8001cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff f9f3 	bl	800104c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d113      	bne.n	8001ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e007      	b.n	8001cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d1cf      	bne.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cc4:	e064      	b.n	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f86e 	bl	8001dac <I2C_IsErrorOccurred>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e062      	b.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d138      	bne.n	8001d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d105      	bne.n	8001d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e04e      	b.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d107      	bne.n	8001d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2210      	movs	r2, #16
 8001d16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d1e:	e002      	b.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e022      	b.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f977 	bl	800104c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10f      	bne.n	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f043 0220 	orr.w	r2, r3, #32
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d193      	bne.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	fe00e800 	.word	0xfe00e800

08001dac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d068      	beq.n	8001eaa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001de0:	e049      	b.n	8001e76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d045      	beq.n	8001e76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7ff f92f 	bl	800104c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <I2C_IsErrorOccurred+0x54>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d13a      	bne.n	8001e76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e22:	d121      	bne.n	8001e68 <I2C_IsErrorOccurred+0xbc>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e2a:	d01d      	beq.n	8001e68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d01a      	beq.n	8001e68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e42:	f7ff f903 	bl	800104c <HAL_GetTick>
 8001e46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e48:	e00e      	b.n	8001e68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e4a:	f7ff f8ff 	bl	800104c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b19      	cmp	r3, #25
 8001e56:	d907      	bls.n	8001e68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e66:	e006      	b.n	8001e76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d1e9      	bne.n	8001e4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d003      	beq.n	8001e8c <I2C_IsErrorOccurred+0xe0>
 8001e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0aa      	beq.n	8001de2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01c      	beq.n	8001f5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff fde9 	bl	8001af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <I2C_IsErrorOccurred+0x1bc>)
 8001f32:	400b      	ands	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	fe00e800 	.word	0xfe00e800

08001f6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f84:	7a7b      	ldrb	r3, [r7, #9]
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	0d5b      	lsrs	r3, r3, #21
 8001fa6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <I2C_TransferConfig+0x60>)
 8001fac:	430b      	orrs	r3, r1
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	ea02 0103 	and.w	r1, r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	03ff63ff 	.word	0x03ff63ff

08001fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d138      	bne.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e032      	b.n	800205a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b20      	cmp	r3, #32
 800207a:	d139      	bne.n	80020f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002086:	2302      	movs	r3, #2
 8002088:	e033      	b.n	80020f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2224      	movs	r2, #36	; 0x24
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_PWREx_EnableOverDrive+0x98>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_PWREx_EnableOverDrive+0x98>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_PWREx_EnableOverDrive+0x98>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212e:	f7fe ff8d 	bl	800104c <HAL_GetTick>
 8002132:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002134:	e009      	b.n	800214a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002136:	f7fe ff89 	bl	800104c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002144:	d901      	bls.n	800214a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e022      	b.n	8002190 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d1ee      	bne.n	8002136 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 800215e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002162:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002164:	f7fe ff72 	bl	800104c <HAL_GetTick>
 8002168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800216a:	e009      	b.n	8002180 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800216c:	f7fe ff6e 	bl	800104c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217a:	d901      	bls.n	8002180 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e007      	b.n	8002190 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800218c:	d1ee      	bne.n	800216c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e29b      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b96      	ldr	r3, [pc, #600]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x62>
 80021dc:	4b90      	ldr	r3, [pc, #576]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x130>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e275      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x7a>
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a83      	ldr	r2, [pc, #524]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x9c>
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7b      	ldr	r2, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xc0>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fee4 	bl	800104c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fee0 	bl	800104c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e229      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe8>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fed0 	bl	800104c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fecc 	bl	800104c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e215      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x110>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d069      	beq.n	80023b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x190>
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x17a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1e9      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	493d      	ldr	r1, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e040      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fe82 	bl	800104c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234c:	f7fe fe7e 	bl	800104c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1c7      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4929      	ldr	r1, [pc, #164]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
 800237e:	e018      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a26      	ldr	r2, [pc, #152]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fe5e 	bl	800104c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002394:	f7fe fe5a 	bl	800104c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1a3      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d038      	beq.n	8002430 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80023c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fe3b 	bl	800104c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023da:	f7fe fe37 	bl	800104c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e180      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x23a>
 80023f8:	e01a      	b.n	8002430 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_RCC_OscConfig+0x280>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7fe fe21 	bl	800104c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fe1d 	bl	800104c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d903      	bls.n	8002424 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e166      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
 8002420:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b92      	ldr	r3, [pc, #584]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a4 	beq.w	8002586 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a88      	ldr	r2, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b86      	ldr	r3, [pc, #536]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002466:	4b83      	ldr	r3, [pc, #524]	; (8002674 <HAL_RCC_OscConfig+0x4d4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002472:	4b80      	ldr	r3, [pc, #512]	; (8002674 <HAL_RCC_OscConfig+0x4d4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7f      	ldr	r2, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x4d4>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe fde5 	bl	800104c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe fde1 	bl	800104c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e12a      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x4d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x31a>
 80024ac:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a6f      	ldr	r2, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e02d      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x33c>
 80024c2:	4b6b      	ldr	r3, [pc, #428]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a67      	ldr	r2, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	e01c      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x35e>
 80024e4:	4b62      	ldr	r3, [pc, #392]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a61      	ldr	r2, [pc, #388]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a5e      	ldr	r2, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
 80024fe:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fd95 	bl	800104c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fd91 	bl	800104c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0d8      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ee      	beq.n	8002526 <HAL_RCC_OscConfig+0x386>
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fd7f 	bl	800104c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fd7b 	bl	800104c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0c2      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80ae 	beq.w	80026ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d06d      	beq.n	8002678 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d14b      	bne.n	800263c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fd4c 	bl	800104c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fd48 	bl	800104c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e091      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	071b      	lsls	r3, r3, #28
 8002602:	491b      	ldr	r1, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fd1a 	bl	800104c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fd16 	bl	800104c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e05f      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x47c>
 800263a:	e057      	b.n	80026ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fd00 	bl	800104c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fcfc 	bl	800104c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e045      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_OscConfig+0x4d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x4b0>
 800266e:	e03d      	b.n	80026ec <HAL_RCC_OscConfig+0x54c>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x558>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d030      	beq.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d129      	bne.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d122      	bne.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d119      	bne.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d10f      	bne.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d0      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 020f 	bic.w	r2, r3, #15
 800272a:	4965      	ldr	r1, [pc, #404]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002766:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e073      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fc2c 	bl	800104c <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe fc28 	bl	800104c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e053      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d210      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 020f 	bic.w	r2, r3, #15
 8002836:	4922      	ldr	r1, [pc, #136]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a0:	5ccb      	ldrb	r3, [r1, r3]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1d4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fb88 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023c00 	.word	0x40023c00
 80028c4:	40023800 	.word	0x40023800
 80028c8:	080074f4 	.word	0x080074f4
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b094      	sub	sp, #80	; 0x50
 80028da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	2300      	movs	r3, #0
 80028e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028e4:	2300      	movs	r3, #0
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ec:	4b79      	ldr	r3, [pc, #484]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d00d      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x40>
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	f200 80e1 	bhi.w	8002ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x34>
 8002902:	2b04      	cmp	r3, #4
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x3a>
 8002906:	e0db      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800290c:	e0db      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_GetSysClockFreq+0x208>)
 8002910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002912:	e0d8      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002914:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	2200      	movs	r2, #0
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
 8002934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
 8002942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	0159      	lsls	r1, r3, #5
 8002954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002958:	0150      	lsls	r0, r2, #5
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4621      	mov	r1, r4
 8002960:	1a51      	subs	r1, r2, r1
 8002962:	6139      	str	r1, [r7, #16]
 8002964:	4629      	mov	r1, r5
 8002966:	eb63 0301 	sbc.w	r3, r3, r1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002978:	4659      	mov	r1, fp
 800297a:	018b      	lsls	r3, r1, #6
 800297c:	4651      	mov	r1, sl
 800297e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002982:	4651      	mov	r1, sl
 8002984:	018a      	lsls	r2, r1, #6
 8002986:	4651      	mov	r1, sl
 8002988:	ebb2 0801 	subs.w	r8, r2, r1
 800298c:	4659      	mov	r1, fp
 800298e:	eb63 0901 	sbc.w	r9, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb18 0303 	adds.w	r3, r8, r3
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	462b      	mov	r3, r5
 80029b4:	eb49 0303 	adc.w	r3, r9, r3
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029c6:	4629      	mov	r1, r5
 80029c8:	024b      	lsls	r3, r1, #9
 80029ca:	4621      	mov	r1, r4
 80029cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d0:	4621      	mov	r1, r4
 80029d2:	024a      	lsls	r2, r1, #9
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	2200      	movs	r2, #0
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e4:	f7fd fc84 	bl	80002f0 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	e058      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	2200      	movs	r2, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	4611      	mov	r1, r2
 80029fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
 8002a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	f04f 0000 	mov.w	r0, #0
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	0159      	lsls	r1, r3, #5
 8002a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1e:	0150      	lsls	r0, r2, #5
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4641      	mov	r1, r8
 8002a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a44:	ebb2 040a 	subs.w	r4, r2, sl
 8002a48:	eb63 050b 	sbc.w	r5, r3, fp
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	00eb      	lsls	r3, r5, #3
 8002a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5a:	00e2      	lsls	r2, r4, #3
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4643      	mov	r3, r8
 8002a62:	18e3      	adds	r3, r4, r3
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	464b      	mov	r3, r9
 8002a68:	eb45 0303 	adc.w	r3, r5, r3
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	028b      	lsls	r3, r1, #10
 8002a7e:	4621      	mov	r1, r4
 8002a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a84:	4621      	mov	r1, r4
 8002a86:	028a      	lsls	r2, r1, #10
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	61fa      	str	r2, [r7, #28]
 8002a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a98:	f7fd fc2a 	bl	80002f0 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3750      	adds	r7, #80	; 0x50
 8002acc:	46bd      	mov	sp, r7
 8002ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	007a1200 	.word	0x007a1200

08002ae0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002afc:	f7ff fff0 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08007504 	.word	0x08007504

08002b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b24:	f7ff ffdc 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0b5b      	lsrs	r3, r3, #13
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4903      	ldr	r1, [pc, #12]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08007504 	.word	0x08007504

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b7a:	6093      	str	r3, [r2, #8]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	4964      	ldr	r1, [pc, #400]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d017      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	4959      	ldr	r1, [pc, #356]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d017      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bde:	4b4e      	ldr	r3, [pc, #312]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	494a      	ldr	r1, [pc, #296]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 808b 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6413      	str	r3, [r2, #64]	; 0x40
 8002c38:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c50:	f7fe f9fc 	bl	800104c <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7fe f9f8 	bl	800104c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e38f      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d035      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d02e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d114      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f9c0 	bl	800104c <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe f9bc 	bl	800104c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e351      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ee      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	4901      	ldr	r1, [pc, #4]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	0ffffcff 	.word	0x0ffffcff
 8002d24:	4bac      	ldr	r3, [pc, #688]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4aab      	ldr	r2, [pc, #684]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	4ba9      	ldr	r3, [pc, #676]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	49a6      	ldr	r1, [pc, #664]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d4e:	4ba2      	ldr	r3, [pc, #648]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	4aa0      	ldr	r2, [pc, #640]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d5e:	4b9e      	ldr	r3, [pc, #632]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	499b      	ldr	r1, [pc, #620]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d7c:	4b96      	ldr	r3, [pc, #600]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8a:	4993      	ldr	r1, [pc, #588]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d9e:	4b8e      	ldr	r3, [pc, #568]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dac:	498a      	ldr	r1, [pc, #552]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc0:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	4982      	ldr	r1, [pc, #520]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4979      	ldr	r1, [pc, #484]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e04:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4971      	ldr	r1, [pc, #452]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f023 020c 	bic.w	r2, r3, #12
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	4968      	ldr	r1, [pc, #416]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e48:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	4960      	ldr	r1, [pc, #384]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	4957      	ldr	r1, [pc, #348]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8c:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	494f      	ldr	r1, [pc, #316]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4946      	ldr	r1, [pc, #280]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	493e      	ldr	r1, [pc, #248]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f22:	492d      	ldr	r1, [pc, #180]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f44:	4924      	ldr	r1, [pc, #144]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f84:	4914      	ldr	r1, [pc, #80]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00f      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	4902      	ldr	r1, [pc, #8]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fd4:	e002      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fe8:	4b8a      	ldr	r3, [pc, #552]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	4986      	ldr	r1, [pc, #536]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800300c:	4b81      	ldr	r3, [pc, #516]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003012:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800301c:	497d      	ldr	r1, [pc, #500]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d006      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80d6 	beq.w	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a75      	ldr	r2, [pc, #468]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe f802 	bl	800104c <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800304c:	f7fd fffe 	bl	800104c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e195      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800305e:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d021      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11d      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	0e1b      	lsrs	r3, r3, #24
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4958      	ldr	r1, [pc, #352]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d129      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030e6:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f4:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	0f1b      	lsrs	r3, r3, #28
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	493e      	ldr	r1, [pc, #248]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003128:	f023 021f 	bic.w	r2, r3, #31
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	3b01      	subs	r3, #1
 8003132:	4938      	ldr	r1, [pc, #224]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01d      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003146:	4b33      	ldr	r3, [pc, #204]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314c:	0e1b      	lsrs	r3, r3, #24
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315a:	0f1b      	lsrs	r3, r3, #28
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	019a      	lsls	r2, r3, #6
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	071b      	lsls	r3, r3, #28
 800317a:	4926      	ldr	r1, [pc, #152]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d011      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	491a      	ldr	r1, [pc, #104]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031be:	f7fd ff45 	bl	800104c <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031c6:	f7fd ff41 	bl	800104c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0d8      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	f040 80ce 	bne.w	8003388 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a08      	ldr	r2, [pc, #32]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fd ff28 	bl	800104c <HAL_GetTick>
 80031fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031fe:	e00b      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003200:	f7fd ff24 	bl	800104c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d904      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0bb      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003224:	d0ec      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02e      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12a      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800324e:	4b51      	ldr	r3, [pc, #324]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800325c:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	0f1b      	lsrs	r3, r3, #28
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	061b      	lsls	r3, r3, #24
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	4944      	ldr	r1, [pc, #272]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800328a:	4b42      	ldr	r3, [pc, #264]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003290:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	493d      	ldr	r1, [pc, #244]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d022      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b8:	d11d      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	0e1b      	lsrs	r3, r3, #24
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	0f1b      	lsrs	r3, r3, #28
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	019a      	lsls	r2, r3, #6
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	431a      	orrs	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	4929      	ldr	r1, [pc, #164]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	0e1b      	lsrs	r3, r3, #24
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	019a      	lsls	r2, r3, #6
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	431a      	orrs	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	4917      	ldr	r1, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4911      	ldr	r1, [pc, #68]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7fd fe74 	bl	800104c <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003368:	f7fd fe70 	bl	800104c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003386:	d1ef      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e049      	b.n	800343e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fcda 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 f900 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_ConfigClockSource+0x1c>
 8003460:	2302      	movs	r3, #2
 8003462:	e0b4      	b.n	80035ce <HAL_TIM_ConfigClockSource+0x186>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_TIM_ConfigClockSource+0x190>)
 8003480:	4013      	ands	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d03e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd4>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	f200 8087 	bhi.w	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f000 8086 	beq.w	80035ba <HAL_TIM_ConfigClockSource+0x172>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d87f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d01a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xa6>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d87b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d050      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x11a>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d877      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d03c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xfa>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d873      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d058      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x13a>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d86f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d064      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d86b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d060      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15a>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d867      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15a>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d05a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	e062      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 f987 	bl	8003810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
      break;
 800351a:	e04f      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 f970 	bl	8003810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e03c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 f8e4 	bl	800371c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2150      	movs	r1, #80	; 0x50
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f93d 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 8003560:	e02c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 f903 	bl	800377a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f92d 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 8003580:	e01c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 f8c4 	bl	800371c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f91d 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80035a0:	e00c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 f914 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80035b2:	e003      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	e000      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	fffeff88 	.word	0xfffeff88

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d00f      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3d      	ldr	r2, [pc, #244]	; (80036f4 <TIM_Base_SetConfig+0x118>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <TIM_Base_SetConfig+0x11c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3b      	ldr	r2, [pc, #236]	; (80036fc <TIM_Base_SetConfig+0x120>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d027      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <TIM_Base_SetConfig+0x118>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d023      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <TIM_Base_SetConfig+0x11c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01f      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <TIM_Base_SetConfig+0x120>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <TIM_Base_SetConfig+0x124>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d017      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <TIM_Base_SetConfig+0x128>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <TIM_Base_SetConfig+0x12c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00f      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <TIM_Base_SetConfig+0x130>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00b      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <TIM_Base_SetConfig+0x134>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <TIM_Base_SetConfig+0x138>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a23      	ldr	r2, [pc, #140]	; (8003718 <TIM_Base_SetConfig+0x13c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <TIM_Base_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0xf8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <TIM_Base_SetConfig+0x124>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40010400 	.word	0x40010400
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800
 8003710:	40001800 	.word	0x40001800
 8003714:	40001c00 	.word	0x40001c00
 8003718:	40002000 	.word	0x40002000

0800371c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 030a 	bic.w	r3, r3, #10
 8003758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377a:	b480      	push	{r7}
 800377c:	b087      	sub	sp, #28
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f023 0210 	bic.w	r2, r3, #16
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	031b      	lsls	r3, r3, #12
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 0307 	orr.w	r3, r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800382a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	431a      	orrs	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e06d      	b.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d01d      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a16      	ldr	r2, [pc, #88]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10c      	bne.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4313      	orrs	r3, r2
 8003928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40010000 	.word	0x40010000
 8003954:	40010400 	.word	0x40010400
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40014000 	.word	0x40014000
 8003968:	40001800 	.word	0x40001800

0800396c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e040      	b.n	8003a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fa10 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f974 	bl	8003c98 <UART_SetConfig>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e022      	b.n	8003a00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fbcc 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fc53 	bl	80042a4 <UART_CheckIdleState>
 80039fe:	4603      	mov	r3, r0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d171      	bne.n	8003b04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Transmit+0x24>
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e06a      	b.n	8003b06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2221      	movs	r2, #33	; 0x21
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fb05 	bl	800104c <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Transmit+0x68>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a78:	e02c      	b.n	8003ad4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2180      	movs	r1, #128	; 0x80
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fc5a 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e038      	b.n	8003b06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3302      	adds	r3, #2
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e007      	b.n	8003ac2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1cc      	bne.n	8003a7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fc27 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e005      	b.n	8003b06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	f040 80b1 	bne.w	8003c8c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_Receive+0x28>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0a9      	b.n	8003c8e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2222      	movs	r2, #34	; 0x22
 8003b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b50:	f7fd fa7c 	bl	800104c <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d10e      	bne.n	8003b8e <HAL_UART_Receive+0x80>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_UART_Receive+0x76>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b82:	e02d      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b8c:	e028      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <HAL_UART_Receive+0xa4>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Receive+0x9a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	22ff      	movs	r2, #255	; 0xff
 8003ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba6:	e01b      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	227f      	movs	r2, #127	; 0x7f
 8003bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb0:	e016      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bba:	d10d      	bne.n	8003bd8 <HAL_UART_Receive+0xca>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_UART_Receive+0xc0>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	227f      	movs	r2, #127	; 0x7f
 8003bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bcc:	e008      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	223f      	movs	r2, #63	; 0x3f
 8003bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd6:	e003      	b.n	8003be0 <HAL_UART_Receive+0xd2>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003be6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d108      	bne.n	8003c04 <HAL_UART_Receive+0xf6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e003      	b.n	8003c0c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c0c:	e032      	b.n	8003c74 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2120      	movs	r1, #32
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fb90 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e032      	b.n	8003c8e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10c      	bne.n	8003c48 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	8a7b      	ldrh	r3, [r7, #18]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	3302      	adds	r3, #2
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e00c      	b.n	8003c62 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	8a7b      	ldrh	r3, [r7, #18]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4013      	ands	r3, r2
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1c6      	bne.n	8003c0e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4ba6      	ldr	r3, [pc, #664]	; (8003f5c <UART_SetConfig+0x2c4>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	6979      	ldr	r1, [r7, #20]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a94      	ldr	r2, [pc, #592]	; (8003f60 <UART_SetConfig+0x2c8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d120      	bne.n	8003d56 <UART_SetConfig+0xbe>
 8003d14:	4b93      	ldr	r3, [pc, #588]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d816      	bhi.n	8003d50 <UART_SetConfig+0xb8>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x90>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d45 	.word	0x08003d45
 8003d30:	08003d3f 	.word	0x08003d3f
 8003d34:	08003d4b 	.word	0x08003d4b
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e150      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e14d      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003d44:	2304      	movs	r3, #4
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e14a      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e147      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003d50:	2310      	movs	r3, #16
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e144      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a83      	ldr	r2, [pc, #524]	; (8003f68 <UART_SetConfig+0x2d0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d132      	bne.n	8003dc6 <UART_SetConfig+0x12e>
 8003d60:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d828      	bhi.n	8003dc0 <UART_SetConfig+0x128>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0xdc>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003dc1 	.word	0x08003dc1
 8003d7c:	08003dc1 	.word	0x08003dc1
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003db5 	.word	0x08003db5
 8003d88:	08003dc1 	.word	0x08003dc1
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dc1 	.word	0x08003dc1
 8003d94:	08003daf 	.word	0x08003daf
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dc1 	.word	0x08003dc1
 8003da4:	08003dbb 	.word	0x08003dbb
 8003da8:	2300      	movs	r3, #0
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e118      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e115      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003db4:	2304      	movs	r3, #4
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e112      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e10f      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e10c      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a68      	ldr	r2, [pc, #416]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d120      	bne.n	8003e12 <UART_SetConfig+0x17a>
 8003dd0:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dda:	2b30      	cmp	r3, #48	; 0x30
 8003ddc:	d013      	beq.n	8003e06 <UART_SetConfig+0x16e>
 8003dde:	2b30      	cmp	r3, #48	; 0x30
 8003de0:	d814      	bhi.n	8003e0c <UART_SetConfig+0x174>
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d009      	beq.n	8003dfa <UART_SetConfig+0x162>
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d810      	bhi.n	8003e0c <UART_SetConfig+0x174>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <UART_SetConfig+0x15c>
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d006      	beq.n	8003e00 <UART_SetConfig+0x168>
 8003df2:	e00b      	b.n	8003e0c <UART_SetConfig+0x174>
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e0f2      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e0ef      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e00:	2304      	movs	r3, #4
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e0ec      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e06:	2308      	movs	r3, #8
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e0e9      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e0e6      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a56      	ldr	r2, [pc, #344]	; (8003f70 <UART_SetConfig+0x2d8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d120      	bne.n	8003e5e <UART_SetConfig+0x1c6>
 8003e1c:	4b51      	ldr	r3, [pc, #324]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e26:	2bc0      	cmp	r3, #192	; 0xc0
 8003e28:	d013      	beq.n	8003e52 <UART_SetConfig+0x1ba>
 8003e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e2c:	d814      	bhi.n	8003e58 <UART_SetConfig+0x1c0>
 8003e2e:	2b80      	cmp	r3, #128	; 0x80
 8003e30:	d009      	beq.n	8003e46 <UART_SetConfig+0x1ae>
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d810      	bhi.n	8003e58 <UART_SetConfig+0x1c0>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <UART_SetConfig+0x1a8>
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d006      	beq.n	8003e4c <UART_SetConfig+0x1b4>
 8003e3e:	e00b      	b.n	8003e58 <UART_SetConfig+0x1c0>
 8003e40:	2300      	movs	r3, #0
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e0cc      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e46:	2302      	movs	r3, #2
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e0c9      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e0c6      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e52:	2308      	movs	r3, #8
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e0c3      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e0c0      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <UART_SetConfig+0x2dc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d125      	bne.n	8003eb4 <UART_SetConfig+0x21c>
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d017      	beq.n	8003ea8 <UART_SetConfig+0x210>
 8003e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7c:	d817      	bhi.n	8003eae <UART_SetConfig+0x216>
 8003e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e82:	d00b      	beq.n	8003e9c <UART_SetConfig+0x204>
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e88:	d811      	bhi.n	8003eae <UART_SetConfig+0x216>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <UART_SetConfig+0x1fe>
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e92:	d006      	beq.n	8003ea2 <UART_SetConfig+0x20a>
 8003e94:	e00b      	b.n	8003eae <UART_SetConfig+0x216>
 8003e96:	2300      	movs	r3, #0
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e0a1      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e09e      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e09b      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e098      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003eae:	2310      	movs	r3, #16
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e095      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <UART_SetConfig+0x2e0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d125      	bne.n	8003f0a <UART_SetConfig+0x272>
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ecc:	d017      	beq.n	8003efe <UART_SetConfig+0x266>
 8003ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed2:	d817      	bhi.n	8003f04 <UART_SetConfig+0x26c>
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed8:	d00b      	beq.n	8003ef2 <UART_SetConfig+0x25a>
 8003eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ede:	d811      	bhi.n	8003f04 <UART_SetConfig+0x26c>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <UART_SetConfig+0x254>
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d006      	beq.n	8003ef8 <UART_SetConfig+0x260>
 8003eea:	e00b      	b.n	8003f04 <UART_SetConfig+0x26c>
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e076      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e073      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e070      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003efe:	2308      	movs	r3, #8
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e06d      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f04:	2310      	movs	r3, #16
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e06a      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <UART_SetConfig+0x2e4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d138      	bne.n	8003f86 <UART_SetConfig+0x2ee>
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f22:	d017      	beq.n	8003f54 <UART_SetConfig+0x2bc>
 8003f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f28:	d82a      	bhi.n	8003f80 <UART_SetConfig+0x2e8>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	d00b      	beq.n	8003f48 <UART_SetConfig+0x2b0>
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f34:	d824      	bhi.n	8003f80 <UART_SetConfig+0x2e8>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <UART_SetConfig+0x2aa>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	d006      	beq.n	8003f4e <UART_SetConfig+0x2b6>
 8003f40:	e01e      	b.n	8003f80 <UART_SetConfig+0x2e8>
 8003f42:	2300      	movs	r3, #0
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e04b      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e048      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f4e:	2304      	movs	r3, #4
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e045      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f54:	2308      	movs	r3, #8
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e042      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f5a:	bf00      	nop
 8003f5c:	efff69f3 	.word	0xefff69f3
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40004400 	.word	0x40004400
 8003f6c:	40004800 	.word	0x40004800
 8003f70:	40004c00 	.word	0x40004c00
 8003f74:	40005000 	.word	0x40005000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	40007800 	.word	0x40007800
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e02c      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a72      	ldr	r2, [pc, #456]	; (8004154 <UART_SetConfig+0x4bc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d125      	bne.n	8003fdc <UART_SetConfig+0x344>
 8003f90:	4b71      	ldr	r3, [pc, #452]	; (8004158 <UART_SetConfig+0x4c0>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f9e:	d017      	beq.n	8003fd0 <UART_SetConfig+0x338>
 8003fa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fa4:	d817      	bhi.n	8003fd6 <UART_SetConfig+0x33e>
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d00b      	beq.n	8003fc4 <UART_SetConfig+0x32c>
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d811      	bhi.n	8003fd6 <UART_SetConfig+0x33e>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <UART_SetConfig+0x326>
 8003fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fba:	d006      	beq.n	8003fca <UART_SetConfig+0x332>
 8003fbc:	e00b      	b.n	8003fd6 <UART_SetConfig+0x33e>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e00d      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e00a      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e007      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e001      	b.n	8003fe0 <UART_SetConfig+0x348>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe8:	d15b      	bne.n	80040a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d828      	bhi.n	8004042 <UART_SetConfig+0x3aa>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x360>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004043 	.word	0x08004043
 8004008:	08004033 	.word	0x08004033
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe fd6c 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e013      	b.n	800404c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fd7c 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <UART_SetConfig+0x4c4>)
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e00c      	b.n	800404c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fc4f 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8004036:	61b8      	str	r0, [r7, #24]
        break;
 8004038:	e008      	b.n	800404c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e004      	b.n	800404c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	77bb      	strb	r3, [r7, #30]
        break;
 800404a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d074      	beq.n	800413c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	005a      	lsls	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d916      	bls.n	800409c <UART_SetConfig+0x404>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d212      	bcs.n	800409c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f023 030f 	bic.w	r3, r3, #15
 800407e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	b29a      	uxth	r2, r3
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	4313      	orrs	r3, r2
 8004090:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	89fa      	ldrh	r2, [r7, #14]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e04f      	b.n	800413c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	77bb      	strb	r3, [r7, #30]
 80040a0:	e04c      	b.n	800413c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d828      	bhi.n	80040fa <UART_SetConfig+0x462>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x418>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080040fb 	.word	0x080040fb
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	080040fb 	.word	0x080040fb
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	080040fb 	.word	0x080040fb
 80040d0:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe fd10 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e013      	b.n	8004104 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7fe fd20 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e00f      	b.n	8004104 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <UART_SetConfig+0x4c4>)
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e00c      	b.n	8004104 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe fbf3 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 80040ee:	61b8      	str	r0, [r7, #24]
        break;
 80040f0:	e008      	b.n	8004104 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e004      	b.n	8004104 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	77bb      	strb	r3, [r7, #30]
        break;
 8004102:	bf00      	nop
    }

    if (pclk != 0U)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085a      	lsrs	r2, r3, #1
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b0f      	cmp	r3, #15
 8004122:	d909      	bls.n	8004138 <UART_SetConfig+0x4a0>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d205      	bcs.n	8004138 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	e001      	b.n	800413c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004148:	7fbb      	ldrb	r3, [r7, #30]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40007c00 	.word	0x40007c00
 8004158:	40023800 	.word	0x40023800
 800415c:	00f42400 	.word	0x00f42400

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425e:	d10a      	bne.n	8004276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b4:	f7fc feca 	bl	800104c <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10e      	bne.n	80042e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f831 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e027      	b.n	8004336 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d10e      	bne.n	8004312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f81b 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e011      	b.n	8004336 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b09c      	sub	sp, #112	; 0x70
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	e0a7      	b.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	f000 80a3 	beq.w	80044a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fc fe77 	bl	800104c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <UART_WaitOnFlagUntilTimeout+0x32>
 800436a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800436c:	2b00      	cmp	r3, #0
 800436e:	d13f      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800437e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004384:	667b      	str	r3, [r7, #100]	; 0x64
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800438e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004390:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e068      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d050      	beq.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d148      	bne.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004416:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800442c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
 8004438:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800443c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e6      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800446a:	623a      	str	r2, [r7, #32]
 800446c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61bb      	str	r3, [r7, #24]
   return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e010      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	f43f af48 	beq.w	8004350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3770      	adds	r7, #112	; 0x70
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	2000000c 	.word	0x2000000c

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4d0d      	ldr	r5, [pc, #52]	; (8004510 <__libc_init_array+0x38>)
 80044dc:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	2600      	movs	r6, #0
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	4d0b      	ldr	r5, [pc, #44]	; (8004518 <__libc_init_array+0x40>)
 80044ea:	4c0c      	ldr	r4, [pc, #48]	; (800451c <__libc_init_array+0x44>)
 80044ec:	f002 fe50 	bl	8007190 <_init>
 80044f0:	1b64      	subs	r4, r4, r5
 80044f2:	10a4      	asrs	r4, r4, #2
 80044f4:	2600      	movs	r6, #0
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08007914 	.word	0x08007914
 8004514:	08007914 	.word	0x08007914
 8004518:	08007914 	.word	0x08007914
 800451c:	08007918 	.word	0x08007918

08004520 <__itoa>:
 8004520:	1e93      	subs	r3, r2, #2
 8004522:	2b22      	cmp	r3, #34	; 0x22
 8004524:	b510      	push	{r4, lr}
 8004526:	460c      	mov	r4, r1
 8004528:	d904      	bls.n	8004534 <__itoa+0x14>
 800452a:	2300      	movs	r3, #0
 800452c:	700b      	strb	r3, [r1, #0]
 800452e:	461c      	mov	r4, r3
 8004530:	4620      	mov	r0, r4
 8004532:	bd10      	pop	{r4, pc}
 8004534:	2a0a      	cmp	r2, #10
 8004536:	d109      	bne.n	800454c <__itoa+0x2c>
 8004538:	2800      	cmp	r0, #0
 800453a:	da07      	bge.n	800454c <__itoa+0x2c>
 800453c:	232d      	movs	r3, #45	; 0x2d
 800453e:	700b      	strb	r3, [r1, #0]
 8004540:	4240      	negs	r0, r0
 8004542:	2101      	movs	r1, #1
 8004544:	4421      	add	r1, r4
 8004546:	f000 fda5 	bl	8005094 <__utoa>
 800454a:	e7f1      	b.n	8004530 <__itoa+0x10>
 800454c:	2100      	movs	r1, #0
 800454e:	e7f9      	b.n	8004544 <__itoa+0x24>

08004550 <itoa>:
 8004550:	f7ff bfe6 	b.w	8004520 <__itoa>

08004554 <memset>:
 8004554:	4402      	add	r2, r0
 8004556:	4603      	mov	r3, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	d100      	bne.n	800455e <memset+0xa>
 800455c:	4770      	bx	lr
 800455e:	f803 1b01 	strb.w	r1, [r3], #1
 8004562:	e7f9      	b.n	8004558 <memset+0x4>

08004564 <__cvt>:
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	ed2d 8b02 	vpush	{d8}
 800456a:	eeb0 8b40 	vmov.f64	d8, d0
 800456e:	b085      	sub	sp, #20
 8004570:	4617      	mov	r7, r2
 8004572:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004574:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004576:	ee18 2a90 	vmov	r2, s17
 800457a:	f025 0520 	bic.w	r5, r5, #32
 800457e:	2a00      	cmp	r2, #0
 8004580:	bfb6      	itet	lt
 8004582:	222d      	movlt	r2, #45	; 0x2d
 8004584:	2200      	movge	r2, #0
 8004586:	eeb1 8b40 	vneglt.f64	d8, d0
 800458a:	2d46      	cmp	r5, #70	; 0x46
 800458c:	460c      	mov	r4, r1
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	d004      	beq.n	800459c <__cvt+0x38>
 8004592:	2d45      	cmp	r5, #69	; 0x45
 8004594:	d100      	bne.n	8004598 <__cvt+0x34>
 8004596:	3401      	adds	r4, #1
 8004598:	2102      	movs	r1, #2
 800459a:	e000      	b.n	800459e <__cvt+0x3a>
 800459c:	2103      	movs	r1, #3
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	ab02      	add	r3, sp, #8
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4622      	mov	r2, r4
 80045a8:	4633      	mov	r3, r6
 80045aa:	eeb0 0b48 	vmov.f64	d0, d8
 80045ae:	f000 feff 	bl	80053b0 <_dtoa_r>
 80045b2:	2d47      	cmp	r5, #71	; 0x47
 80045b4:	d101      	bne.n	80045ba <__cvt+0x56>
 80045b6:	07fb      	lsls	r3, r7, #31
 80045b8:	d51a      	bpl.n	80045f0 <__cvt+0x8c>
 80045ba:	2d46      	cmp	r5, #70	; 0x46
 80045bc:	eb00 0204 	add.w	r2, r0, r4
 80045c0:	d10c      	bne.n	80045dc <__cvt+0x78>
 80045c2:	7803      	ldrb	r3, [r0, #0]
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d107      	bne.n	80045d8 <__cvt+0x74>
 80045c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80045cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d0:	bf1c      	itt	ne
 80045d2:	f1c4 0401 	rsbne	r4, r4, #1
 80045d6:	6034      	strne	r4, [r6, #0]
 80045d8:	6833      	ldr	r3, [r6, #0]
 80045da:	441a      	add	r2, r3
 80045dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	bf08      	it	eq
 80045e6:	9203      	streq	r2, [sp, #12]
 80045e8:	2130      	movs	r1, #48	; 0x30
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d307      	bcc.n	8004600 <__cvt+0x9c>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045f4:	1a1b      	subs	r3, r3, r0
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	b005      	add	sp, #20
 80045fa:	ecbd 8b02 	vpop	{d8}
 80045fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004600:	1c5c      	adds	r4, r3, #1
 8004602:	9403      	str	r4, [sp, #12]
 8004604:	7019      	strb	r1, [r3, #0]
 8004606:	e7f0      	b.n	80045ea <__cvt+0x86>

08004608 <__exponent>:
 8004608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800460a:	4603      	mov	r3, r0
 800460c:	2900      	cmp	r1, #0
 800460e:	bfb8      	it	lt
 8004610:	4249      	neglt	r1, r1
 8004612:	f803 2b02 	strb.w	r2, [r3], #2
 8004616:	bfb4      	ite	lt
 8004618:	222d      	movlt	r2, #45	; 0x2d
 800461a:	222b      	movge	r2, #43	; 0x2b
 800461c:	2909      	cmp	r1, #9
 800461e:	7042      	strb	r2, [r0, #1]
 8004620:	dd2a      	ble.n	8004678 <__exponent+0x70>
 8004622:	f10d 0407 	add.w	r4, sp, #7
 8004626:	46a4      	mov	ip, r4
 8004628:	270a      	movs	r7, #10
 800462a:	46a6      	mov	lr, r4
 800462c:	460a      	mov	r2, r1
 800462e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004632:	fb07 1516 	mls	r5, r7, r6, r1
 8004636:	3530      	adds	r5, #48	; 0x30
 8004638:	2a63      	cmp	r2, #99	; 0x63
 800463a:	f104 34ff 	add.w	r4, r4, #4294967295
 800463e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004642:	4631      	mov	r1, r6
 8004644:	dcf1      	bgt.n	800462a <__exponent+0x22>
 8004646:	3130      	adds	r1, #48	; 0x30
 8004648:	f1ae 0502 	sub.w	r5, lr, #2
 800464c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004650:	1c44      	adds	r4, r0, #1
 8004652:	4629      	mov	r1, r5
 8004654:	4561      	cmp	r1, ip
 8004656:	d30a      	bcc.n	800466e <__exponent+0x66>
 8004658:	f10d 0209 	add.w	r2, sp, #9
 800465c:	eba2 020e 	sub.w	r2, r2, lr
 8004660:	4565      	cmp	r5, ip
 8004662:	bf88      	it	hi
 8004664:	2200      	movhi	r2, #0
 8004666:	4413      	add	r3, r2
 8004668:	1a18      	subs	r0, r3, r0
 800466a:	b003      	add	sp, #12
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004672:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004676:	e7ed      	b.n	8004654 <__exponent+0x4c>
 8004678:	2330      	movs	r3, #48	; 0x30
 800467a:	3130      	adds	r1, #48	; 0x30
 800467c:	7083      	strb	r3, [r0, #2]
 800467e:	70c1      	strb	r1, [r0, #3]
 8004680:	1d03      	adds	r3, r0, #4
 8004682:	e7f1      	b.n	8004668 <__exponent+0x60>
 8004684:	0000      	movs	r0, r0
	...

08004688 <_printf_float>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b08b      	sub	sp, #44	; 0x2c
 800468e:	460c      	mov	r4, r1
 8004690:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004694:	4616      	mov	r6, r2
 8004696:	461f      	mov	r7, r3
 8004698:	4605      	mov	r5, r0
 800469a:	f001 fdaf 	bl	80061fc <_localeconv_r>
 800469e:	f8d0 b000 	ldr.w	fp, [r0]
 80046a2:	4658      	mov	r0, fp
 80046a4:	f7fb fdcc 	bl	8000240 <strlen>
 80046a8:	2300      	movs	r3, #0
 80046aa:	9308      	str	r3, [sp, #32]
 80046ac:	f8d8 3000 	ldr.w	r3, [r8]
 80046b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	3307      	adds	r3, #7
 80046b8:	f023 0307 	bic.w	r3, r3, #7
 80046bc:	f103 0108 	add.w	r1, r3, #8
 80046c0:	f8c8 1000 	str.w	r1, [r8]
 80046c4:	4682      	mov	sl, r0
 80046c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80046ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004930 <_printf_float+0x2a8>
 80046d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80046d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80046da:	eeb4 6b47 	vcmp.f64	d6, d7
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e2:	dd24      	ble.n	800472e <_printf_float+0xa6>
 80046e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	d502      	bpl.n	80046f4 <_printf_float+0x6c>
 80046ee:	232d      	movs	r3, #45	; 0x2d
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f4:	4b90      	ldr	r3, [pc, #576]	; (8004938 <_printf_float+0x2b0>)
 80046f6:	4891      	ldr	r0, [pc, #580]	; (800493c <_printf_float+0x2b4>)
 80046f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046fc:	bf94      	ite	ls
 80046fe:	4698      	movls	r8, r3
 8004700:	4680      	movhi	r8, r0
 8004702:	2303      	movs	r3, #3
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	2300      	movs	r3, #0
 800470c:	6022      	str	r2, [r4, #0]
 800470e:	9304      	str	r3, [sp, #16]
 8004710:	9700      	str	r7, [sp, #0]
 8004712:	4633      	mov	r3, r6
 8004714:	aa09      	add	r2, sp, #36	; 0x24
 8004716:	4621      	mov	r1, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f9d3 	bl	8004ac4 <_printf_common>
 800471e:	3001      	adds	r0, #1
 8004720:	f040 808a 	bne.w	8004838 <_printf_float+0x1b0>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	b00b      	add	sp, #44	; 0x2c
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d709      	bvc.n	800474c <_printf_float+0xc4>
 8004738:	ee10 3a90 	vmov	r3, s1
 800473c:	2b00      	cmp	r3, #0
 800473e:	bfbc      	itt	lt
 8004740:	232d      	movlt	r3, #45	; 0x2d
 8004742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004746:	487e      	ldr	r0, [pc, #504]	; (8004940 <_printf_float+0x2b8>)
 8004748:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <_printf_float+0x2bc>)
 800474a:	e7d5      	b.n	80046f8 <_printf_float+0x70>
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004752:	9104      	str	r1, [sp, #16]
 8004754:	1c59      	adds	r1, r3, #1
 8004756:	d13c      	bne.n	80047d2 <_printf_float+0x14a>
 8004758:	2306      	movs	r3, #6
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	2300      	movs	r3, #0
 800475e:	9303      	str	r3, [sp, #12]
 8004760:	ab08      	add	r3, sp, #32
 8004762:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800476a:	ab07      	add	r3, sp, #28
 800476c:	6861      	ldr	r1, [r4, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	f10d 031b 	add.w	r3, sp, #27
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fef4 	bl	8004564 <__cvt>
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	9907      	ldr	r1, [sp, #28]
 8004780:	2b47      	cmp	r3, #71	; 0x47
 8004782:	4680      	mov	r8, r0
 8004784:	d108      	bne.n	8004798 <_printf_float+0x110>
 8004786:	1cc8      	adds	r0, r1, #3
 8004788:	db02      	blt.n	8004790 <_printf_float+0x108>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	4299      	cmp	r1, r3
 800478e:	dd41      	ble.n	8004814 <_printf_float+0x18c>
 8004790:	f1a9 0902 	sub.w	r9, r9, #2
 8004794:	fa5f f989 	uxtb.w	r9, r9
 8004798:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800479c:	d820      	bhi.n	80047e0 <_printf_float+0x158>
 800479e:	3901      	subs	r1, #1
 80047a0:	464a      	mov	r2, r9
 80047a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047a6:	9107      	str	r1, [sp, #28]
 80047a8:	f7ff ff2e 	bl	8004608 <__exponent>
 80047ac:	9a08      	ldr	r2, [sp, #32]
 80047ae:	9004      	str	r0, [sp, #16]
 80047b0:	1813      	adds	r3, r2, r0
 80047b2:	2a01      	cmp	r2, #1
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	dc02      	bgt.n	80047be <_printf_float+0x136>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	07d2      	lsls	r2, r2, #31
 80047bc:	d501      	bpl.n	80047c2 <_printf_float+0x13a>
 80047be:	3301      	adds	r3, #1
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0a2      	beq.n	8004710 <_printf_float+0x88>
 80047ca:	232d      	movs	r3, #45	; 0x2d
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d0:	e79e      	b.n	8004710 <_printf_float+0x88>
 80047d2:	9904      	ldr	r1, [sp, #16]
 80047d4:	2947      	cmp	r1, #71	; 0x47
 80047d6:	d1c1      	bne.n	800475c <_printf_float+0xd4>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1bf      	bne.n	800475c <_printf_float+0xd4>
 80047dc:	2301      	movs	r3, #1
 80047de:	e7bc      	b.n	800475a <_printf_float+0xd2>
 80047e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047e4:	d118      	bne.n	8004818 <_printf_float+0x190>
 80047e6:	2900      	cmp	r1, #0
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	dd0b      	ble.n	8004804 <_printf_float+0x17c>
 80047ec:	6121      	str	r1, [r4, #16]
 80047ee:	b913      	cbnz	r3, 80047f6 <_printf_float+0x16e>
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	07d0      	lsls	r0, r2, #31
 80047f4:	d502      	bpl.n	80047fc <_printf_float+0x174>
 80047f6:	3301      	adds	r3, #1
 80047f8:	440b      	add	r3, r1
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	2300      	movs	r3, #0
 80047fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004800:	9304      	str	r3, [sp, #16]
 8004802:	e7de      	b.n	80047c2 <_printf_float+0x13a>
 8004804:	b913      	cbnz	r3, 800480c <_printf_float+0x184>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	07d2      	lsls	r2, r2, #31
 800480a:	d501      	bpl.n	8004810 <_printf_float+0x188>
 800480c:	3302      	adds	r3, #2
 800480e:	e7f4      	b.n	80047fa <_printf_float+0x172>
 8004810:	2301      	movs	r3, #1
 8004812:	e7f2      	b.n	80047fa <_printf_float+0x172>
 8004814:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004818:	9b08      	ldr	r3, [sp, #32]
 800481a:	4299      	cmp	r1, r3
 800481c:	db05      	blt.n	800482a <_printf_float+0x1a2>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	6121      	str	r1, [r4, #16]
 8004822:	07d8      	lsls	r0, r3, #31
 8004824:	d5ea      	bpl.n	80047fc <_printf_float+0x174>
 8004826:	1c4b      	adds	r3, r1, #1
 8004828:	e7e7      	b.n	80047fa <_printf_float+0x172>
 800482a:	2900      	cmp	r1, #0
 800482c:	bfd4      	ite	le
 800482e:	f1c1 0202 	rsble	r2, r1, #2
 8004832:	2201      	movgt	r2, #1
 8004834:	4413      	add	r3, r2
 8004836:	e7e0      	b.n	80047fa <_printf_float+0x172>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	055a      	lsls	r2, r3, #21
 800483c:	d407      	bmi.n	800484e <_printf_float+0x1c6>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	4642      	mov	r2, r8
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	d12a      	bne.n	80048a2 <_printf_float+0x21a>
 800484c:	e76a      	b.n	8004724 <_printf_float+0x9c>
 800484e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004852:	f240 80e2 	bls.w	8004a1a <_printf_float+0x392>
 8004856:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800485a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004862:	d133      	bne.n	80048cc <_printf_float+0x244>
 8004864:	4a38      	ldr	r2, [pc, #224]	; (8004948 <_printf_float+0x2c0>)
 8004866:	2301      	movs	r3, #1
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af58 	beq.w	8004724 <_printf_float+0x9c>
 8004874:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004878:	429a      	cmp	r2, r3
 800487a:	db02      	blt.n	8004882 <_printf_float+0x1fa>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07d8      	lsls	r0, r3, #31
 8004880:	d50f      	bpl.n	80048a2 <_printf_float+0x21a>
 8004882:	4653      	mov	r3, sl
 8004884:	465a      	mov	r2, fp
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f af49 	beq.w	8004724 <_printf_float+0x9c>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	f104 091a 	add.w	r9, r4, #26
 800489a:	9b08      	ldr	r3, [sp, #32]
 800489c:	3b01      	subs	r3, #1
 800489e:	4543      	cmp	r3, r8
 80048a0:	dc09      	bgt.n	80048b6 <_printf_float+0x22e>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	f100 8108 	bmi.w	8004aba <_printf_float+0x432>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e738      	b.n	8004728 <_printf_float+0xa0>
 80048b6:	2301      	movs	r3, #1
 80048b8:	464a      	mov	r2, r9
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af2f 	beq.w	8004724 <_printf_float+0x9c>
 80048c6:	f108 0801 	add.w	r8, r8, #1
 80048ca:	e7e6      	b.n	800489a <_printf_float+0x212>
 80048cc:	9b07      	ldr	r3, [sp, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc3c      	bgt.n	800494c <_printf_float+0x2c4>
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <_printf_float+0x2c0>)
 80048d4:	2301      	movs	r3, #1
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	f43f af21 	beq.w	8004724 <_printf_float+0x9c>
 80048e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d102      	bne.n	80048f0 <_printf_float+0x268>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	07d9      	lsls	r1, r3, #31
 80048ee:	d5d8      	bpl.n	80048a2 <_printf_float+0x21a>
 80048f0:	4653      	mov	r3, sl
 80048f2:	465a      	mov	r2, fp
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f af12 	beq.w	8004724 <_printf_float+0x9c>
 8004900:	f04f 0900 	mov.w	r9, #0
 8004904:	f104 0a1a 	add.w	sl, r4, #26
 8004908:	9b07      	ldr	r3, [sp, #28]
 800490a:	425b      	negs	r3, r3
 800490c:	454b      	cmp	r3, r9
 800490e:	dc01      	bgt.n	8004914 <_printf_float+0x28c>
 8004910:	9b08      	ldr	r3, [sp, #32]
 8004912:	e795      	b.n	8004840 <_printf_float+0x1b8>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4631      	mov	r1, r6
 800491a:	4628      	mov	r0, r5
 800491c:	47b8      	blx	r7
 800491e:	3001      	adds	r0, #1
 8004920:	f43f af00 	beq.w	8004724 <_printf_float+0x9c>
 8004924:	f109 0901 	add.w	r9, r9, #1
 8004928:	e7ee      	b.n	8004908 <_printf_float+0x280>
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
 8004930:	ffffffff 	.word	0xffffffff
 8004934:	7fefffff 	.word	0x7fefffff
 8004938:	08007510 	.word	0x08007510
 800493c:	08007514 	.word	0x08007514
 8004940:	0800751c 	.word	0x0800751c
 8004944:	08007518 	.word	0x08007518
 8004948:	08007520 	.word	0x08007520
 800494c:	9a08      	ldr	r2, [sp, #32]
 800494e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004950:	429a      	cmp	r2, r3
 8004952:	bfa8      	it	ge
 8004954:	461a      	movge	r2, r3
 8004956:	2a00      	cmp	r2, #0
 8004958:	4691      	mov	r9, r2
 800495a:	dc38      	bgt.n	80049ce <_printf_float+0x346>
 800495c:	2300      	movs	r3, #0
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004964:	f104 021a 	add.w	r2, r4, #26
 8004968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800496a:	9905      	ldr	r1, [sp, #20]
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	eba3 0309 	sub.w	r3, r3, r9
 8004972:	428b      	cmp	r3, r1
 8004974:	dc33      	bgt.n	80049de <_printf_float+0x356>
 8004976:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800497a:	429a      	cmp	r2, r3
 800497c:	db3c      	blt.n	80049f8 <_printf_float+0x370>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	07da      	lsls	r2, r3, #31
 8004982:	d439      	bmi.n	80049f8 <_printf_float+0x370>
 8004984:	9b08      	ldr	r3, [sp, #32]
 8004986:	9a04      	ldr	r2, [sp, #16]
 8004988:	9907      	ldr	r1, [sp, #28]
 800498a:	1a9a      	subs	r2, r3, r2
 800498c:	eba3 0901 	sub.w	r9, r3, r1
 8004990:	4591      	cmp	r9, r2
 8004992:	bfa8      	it	ge
 8004994:	4691      	movge	r9, r2
 8004996:	f1b9 0f00 	cmp.w	r9, #0
 800499a:	dc35      	bgt.n	8004a08 <_printf_float+0x380>
 800499c:	f04f 0800 	mov.w	r8, #0
 80049a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a4:	f104 0a1a 	add.w	sl, r4, #26
 80049a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	eba3 0309 	sub.w	r3, r3, r9
 80049b2:	4543      	cmp	r3, r8
 80049b4:	f77f af75 	ble.w	80048a2 <_printf_float+0x21a>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4652      	mov	r2, sl
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f aeae 	beq.w	8004724 <_printf_float+0x9c>
 80049c8:	f108 0801 	add.w	r8, r8, #1
 80049cc:	e7ec      	b.n	80049a8 <_printf_float+0x320>
 80049ce:	4613      	mov	r3, r2
 80049d0:	4631      	mov	r1, r6
 80049d2:	4642      	mov	r2, r8
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	d1bf      	bne.n	800495c <_printf_float+0x2d4>
 80049dc:	e6a2      	b.n	8004724 <_printf_float+0x9c>
 80049de:	2301      	movs	r3, #1
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	9204      	str	r2, [sp, #16]
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f ae9b 	beq.w	8004724 <_printf_float+0x9c>
 80049ee:	9b05      	ldr	r3, [sp, #20]
 80049f0:	9a04      	ldr	r2, [sp, #16]
 80049f2:	3301      	adds	r3, #1
 80049f4:	9305      	str	r3, [sp, #20]
 80049f6:	e7b7      	b.n	8004968 <_printf_float+0x2e0>
 80049f8:	4653      	mov	r3, sl
 80049fa:	465a      	mov	r2, fp
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	d1be      	bne.n	8004984 <_printf_float+0x2fc>
 8004a06:	e68d      	b.n	8004724 <_printf_float+0x9c>
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	4442      	add	r2, r8
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1c1      	bne.n	800499c <_printf_float+0x314>
 8004a18:	e684      	b.n	8004724 <_printf_float+0x9c>
 8004a1a:	9a08      	ldr	r2, [sp, #32]
 8004a1c:	2a01      	cmp	r2, #1
 8004a1e:	dc01      	bgt.n	8004a24 <_printf_float+0x39c>
 8004a20:	07db      	lsls	r3, r3, #31
 8004a22:	d537      	bpl.n	8004a94 <_printf_float+0x40c>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4642      	mov	r2, r8
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f ae78 	beq.w	8004724 <_printf_float+0x9c>
 8004a34:	4653      	mov	r3, sl
 8004a36:	465a      	mov	r2, fp
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f ae70 	beq.w	8004724 <_printf_float+0x9c>
 8004a44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	d01b      	beq.n	8004a8a <_printf_float+0x402>
 8004a52:	9b08      	ldr	r3, [sp, #32]
 8004a54:	f108 0201 	add.w	r2, r8, #1
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d10e      	bne.n	8004a82 <_printf_float+0x3fa>
 8004a64:	e65e      	b.n	8004724 <_printf_float+0x9c>
 8004a66:	2301      	movs	r3, #1
 8004a68:	464a      	mov	r2, r9
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f ae57 	beq.w	8004724 <_printf_float+0x9c>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	9b08      	ldr	r3, [sp, #32]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4543      	cmp	r3, r8
 8004a80:	dcf1      	bgt.n	8004a66 <_printf_float+0x3de>
 8004a82:	9b04      	ldr	r3, [sp, #16]
 8004a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a88:	e6db      	b.n	8004842 <_printf_float+0x1ba>
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	f104 091a 	add.w	r9, r4, #26
 8004a92:	e7f2      	b.n	8004a7a <_printf_float+0x3f2>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4642      	mov	r2, r8
 8004a98:	e7df      	b.n	8004a5a <_printf_float+0x3d2>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f ae3d 	beq.w	8004724 <_printf_float+0x9c>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	4543      	cmp	r3, r8
 8004ab6:	dcf0      	bgt.n	8004a9a <_printf_float+0x412>
 8004ab8:	e6f7      	b.n	80048aa <_printf_float+0x222>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 0919 	add.w	r9, r4, #25
 8004ac2:	e7f4      	b.n	8004aae <_printf_float+0x426>

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4616      	mov	r6, r2
 8004aca:	4699      	mov	r9, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	bfb8      	it	lt
 8004ad8:	4613      	movlt	r3, r2
 8004ada:	6033      	str	r3, [r6, #0]
 8004adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	b10a      	cbz	r2, 8004aea <_printf_common+0x26>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	6833      	ldrmi	r3, [r6, #0]
 8004af2:	3302      	addmi	r3, #2
 8004af4:	6033      	strmi	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	f015 0506 	ands.w	r5, r5, #6
 8004afc:	d106      	bne.n	8004b0c <_printf_common+0x48>
 8004afe:	f104 0a19 	add.w	sl, r4, #25
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dc26      	bgt.n	8004b5a <_printf_common+0x96>
 8004b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b10:	1e13      	subs	r3, r2, #0
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	0692      	lsls	r2, r2, #26
 8004b1a:	d42b      	bmi.n	8004b74 <_printf_common+0xb0>
 8004b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b20:	4649      	mov	r1, r9
 8004b22:	4638      	mov	r0, r7
 8004b24:	47c0      	blx	r8
 8004b26:	3001      	adds	r0, #1
 8004b28:	d01e      	beq.n	8004b68 <_printf_common+0xa4>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	68e5      	ldr	r5, [r4, #12]
 8004b2e:	6832      	ldr	r2, [r6, #0]
 8004b30:	f003 0306 	and.w	r3, r3, #6
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	bf08      	it	eq
 8004b38:	1aad      	subeq	r5, r5, r2
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	bf0c      	ite	eq
 8004b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b44:	2500      	movne	r5, #0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	bfc4      	itt	gt
 8004b4a:	1a9b      	subgt	r3, r3, r2
 8004b4c:	18ed      	addgt	r5, r5, r3
 8004b4e:	2600      	movs	r6, #0
 8004b50:	341a      	adds	r4, #26
 8004b52:	42b5      	cmp	r5, r6
 8004b54:	d11a      	bne.n	8004b8c <_printf_common+0xc8>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e008      	b.n	8004b6c <_printf_common+0xa8>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4638      	mov	r0, r7
 8004b62:	47c0      	blx	r8
 8004b64:	3001      	adds	r0, #1
 8004b66:	d103      	bne.n	8004b70 <_printf_common+0xac>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	3501      	adds	r5, #1
 8004b72:	e7c6      	b.n	8004b02 <_printf_common+0x3e>
 8004b74:	18e1      	adds	r1, r4, r3
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	2030      	movs	r0, #48	; 0x30
 8004b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7e:	4422      	add	r2, r4
 8004b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b88:	3302      	adds	r3, #2
 8004b8a:	e7c7      	b.n	8004b1c <_printf_common+0x58>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4649      	mov	r1, r9
 8004b92:	4638      	mov	r0, r7
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0e6      	beq.n	8004b68 <_printf_common+0xa4>
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7d9      	b.n	8004b52 <_printf_common+0x8e>
	...

08004ba0 <_printf_i>:
 8004ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	7e0f      	ldrb	r7, [r1, #24]
 8004ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba8:	2f78      	cmp	r7, #120	; 0x78
 8004baa:	4691      	mov	r9, r2
 8004bac:	4680      	mov	r8, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	469a      	mov	sl, r3
 8004bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb6:	d807      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bb8:	2f62      	cmp	r7, #98	; 0x62
 8004bba:	d80a      	bhi.n	8004bd2 <_printf_i+0x32>
 8004bbc:	2f00      	cmp	r7, #0
 8004bbe:	f000 80d8 	beq.w	8004d72 <_printf_i+0x1d2>
 8004bc2:	2f58      	cmp	r7, #88	; 0x58
 8004bc4:	f000 80a3 	beq.w	8004d0e <_printf_i+0x16e>
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd0:	e03a      	b.n	8004c48 <_printf_i+0xa8>
 8004bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd6:	2b15      	cmp	r3, #21
 8004bd8:	d8f6      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bda:	a101      	add	r1, pc, #4	; (adr r1, 8004be0 <_printf_i+0x40>)
 8004bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004bc9 	.word	0x08004bc9
 8004bec:	08004bc9 	.word	0x08004bc9
 8004bf0:	08004bc9 	.word	0x08004bc9
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004bc9 	.word	0x08004bc9
 8004c00:	08004bc9 	.word	0x08004bc9
 8004c04:	08004bc9 	.word	0x08004bc9
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08004d59 	.word	0x08004d59
 8004c10:	08004c7d 	.word	0x08004c7d
 8004c14:	08004d3b 	.word	0x08004d3b
 8004c18:	08004bc9 	.word	0x08004bc9
 8004c1c:	08004bc9 	.word	0x08004bc9
 8004c20:	08004d7b 	.word	0x08004d7b
 8004c24:	08004bc9 	.word	0x08004bc9
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004bc9 	.word	0x08004bc9
 8004c30:	08004bc9 	.word	0x08004bc9
 8004c34:	08004d43 	.word	0x08004d43
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a3      	b.n	8004d94 <_printf_i+0x1f4>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	6829      	ldr	r1, [r5, #0]
 8004c50:	0606      	lsls	r6, r0, #24
 8004c52:	f101 0304 	add.w	r3, r1, #4
 8004c56:	d50a      	bpl.n	8004c6e <_printf_i+0xce>
 8004c58:	680e      	ldr	r6, [r1, #0]
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	2e00      	cmp	r6, #0
 8004c5e:	da03      	bge.n	8004c68 <_printf_i+0xc8>
 8004c60:	232d      	movs	r3, #45	; 0x2d
 8004c62:	4276      	negs	r6, r6
 8004c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c68:	485e      	ldr	r0, [pc, #376]	; (8004de4 <_printf_i+0x244>)
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	e019      	b.n	8004ca2 <_printf_i+0x102>
 8004c6e:	680e      	ldr	r6, [r1, #0]
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c76:	bf18      	it	ne
 8004c78:	b236      	sxthne	r6, r6
 8004c7a:	e7ef      	b.n	8004c5c <_printf_i+0xbc>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	1d19      	adds	r1, r3, #4
 8004c82:	6029      	str	r1, [r5, #0]
 8004c84:	0601      	lsls	r1, r0, #24
 8004c86:	d501      	bpl.n	8004c8c <_printf_i+0xec>
 8004c88:	681e      	ldr	r6, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <_printf_i+0xf2>
 8004c8c:	0646      	lsls	r6, r0, #25
 8004c8e:	d5fb      	bpl.n	8004c88 <_printf_i+0xe8>
 8004c90:	881e      	ldrh	r6, [r3, #0]
 8004c92:	4854      	ldr	r0, [pc, #336]	; (8004de4 <_printf_i+0x244>)
 8004c94:	2f6f      	cmp	r7, #111	; 0x6f
 8004c96:	bf0c      	ite	eq
 8004c98:	2308      	moveq	r3, #8
 8004c9a:	230a      	movne	r3, #10
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca2:	6865      	ldr	r5, [r4, #4]
 8004ca4:	60a5      	str	r5, [r4, #8]
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	bfa2      	ittt	ge
 8004caa:	6821      	ldrge	r1, [r4, #0]
 8004cac:	f021 0104 	bicge.w	r1, r1, #4
 8004cb0:	6021      	strge	r1, [r4, #0]
 8004cb2:	b90e      	cbnz	r6, 8004cb8 <_printf_i+0x118>
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	d04d      	beq.n	8004d54 <_printf_i+0x1b4>
 8004cb8:	4615      	mov	r5, r2
 8004cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc2:	5dc7      	ldrb	r7, [r0, r7]
 8004cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc8:	4637      	mov	r7, r6
 8004cca:	42bb      	cmp	r3, r7
 8004ccc:	460e      	mov	r6, r1
 8004cce:	d9f4      	bls.n	8004cba <_printf_i+0x11a>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d10b      	bne.n	8004cec <_printf_i+0x14c>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	07de      	lsls	r6, r3, #31
 8004cd8:	d508      	bpl.n	8004cec <_printf_i+0x14c>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	6861      	ldr	r1, [r4, #4]
 8004cde:	4299      	cmp	r1, r3
 8004ce0:	bfde      	ittt	le
 8004ce2:	2330      	movle	r3, #48	; 0x30
 8004ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cec:	1b52      	subs	r2, r2, r5
 8004cee:	6122      	str	r2, [r4, #16]
 8004cf0:	f8cd a000 	str.w	sl, [sp]
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	aa03      	add	r2, sp, #12
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f7ff fee2 	bl	8004ac4 <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d14c      	bne.n	8004d9e <_printf_i+0x1fe>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b004      	add	sp, #16
 8004d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0e:	4835      	ldr	r0, [pc, #212]	; (8004de4 <_printf_i+0x244>)
 8004d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d14:	6829      	ldr	r1, [r5, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d1c:	6029      	str	r1, [r5, #0]
 8004d1e:	061d      	lsls	r5, r3, #24
 8004d20:	d514      	bpl.n	8004d4c <_printf_i+0x1ac>
 8004d22:	07df      	lsls	r7, r3, #31
 8004d24:	bf44      	itt	mi
 8004d26:	f043 0320 	orrmi.w	r3, r3, #32
 8004d2a:	6023      	strmi	r3, [r4, #0]
 8004d2c:	b91e      	cbnz	r6, 8004d36 <_printf_i+0x196>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	f023 0320 	bic.w	r3, r3, #32
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	2310      	movs	r3, #16
 8004d38:	e7b0      	b.n	8004c9c <_printf_i+0xfc>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	f043 0320 	orr.w	r3, r3, #32
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	2378      	movs	r3, #120	; 0x78
 8004d44:	4828      	ldr	r0, [pc, #160]	; (8004de8 <_printf_i+0x248>)
 8004d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d4a:	e7e3      	b.n	8004d14 <_printf_i+0x174>
 8004d4c:	0659      	lsls	r1, r3, #25
 8004d4e:	bf48      	it	mi
 8004d50:	b2b6      	uxthmi	r6, r6
 8004d52:	e7e6      	b.n	8004d22 <_printf_i+0x182>
 8004d54:	4615      	mov	r5, r2
 8004d56:	e7bb      	b.n	8004cd0 <_printf_i+0x130>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	6826      	ldr	r6, [r4, #0]
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	6028      	str	r0, [r5, #0]
 8004d62:	0635      	lsls	r5, r6, #24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	d501      	bpl.n	8004d6c <_printf_i+0x1cc>
 8004d68:	6019      	str	r1, [r3, #0]
 8004d6a:	e002      	b.n	8004d72 <_printf_i+0x1d2>
 8004d6c:	0670      	lsls	r0, r6, #25
 8004d6e:	d5fb      	bpl.n	8004d68 <_printf_i+0x1c8>
 8004d70:	8019      	strh	r1, [r3, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	4615      	mov	r5, r2
 8004d78:	e7ba      	b.n	8004cf0 <_printf_i+0x150>
 8004d7a:	682b      	ldr	r3, [r5, #0]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	602a      	str	r2, [r5, #0]
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7fb fa62 	bl	8000250 <memchr>
 8004d8c:	b108      	cbz	r0, 8004d92 <_printf_i+0x1f2>
 8004d8e:	1b40      	subs	r0, r0, r5
 8004d90:	6060      	str	r0, [r4, #4]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	2300      	movs	r3, #0
 8004d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9c:	e7a8      	b.n	8004cf0 <_printf_i+0x150>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	462a      	mov	r2, r5
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	47d0      	blx	sl
 8004da8:	3001      	adds	r0, #1
 8004daa:	d0ab      	beq.n	8004d04 <_printf_i+0x164>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	079b      	lsls	r3, r3, #30
 8004db0:	d413      	bmi.n	8004dda <_printf_i+0x23a>
 8004db2:	68e0      	ldr	r0, [r4, #12]
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	4298      	cmp	r0, r3
 8004db8:	bfb8      	it	lt
 8004dba:	4618      	movlt	r0, r3
 8004dbc:	e7a4      	b.n	8004d08 <_printf_i+0x168>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d09b      	beq.n	8004d04 <_printf_i+0x164>
 8004dcc:	3501      	adds	r5, #1
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	9903      	ldr	r1, [sp, #12]
 8004dd2:	1a5b      	subs	r3, r3, r1
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dcf2      	bgt.n	8004dbe <_printf_i+0x21e>
 8004dd8:	e7eb      	b.n	8004db2 <_printf_i+0x212>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	f104 0619 	add.w	r6, r4, #25
 8004de0:	e7f5      	b.n	8004dce <_printf_i+0x22e>
 8004de2:	bf00      	nop
 8004de4:	08007522 	.word	0x08007522
 8004de8:	08007533 	.word	0x08007533

08004dec <iprintf>:
 8004dec:	b40f      	push	{r0, r1, r2, r3}
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <iprintf+0x2c>)
 8004df0:	b513      	push	{r0, r1, r4, lr}
 8004df2:	681c      	ldr	r4, [r3, #0]
 8004df4:	b124      	cbz	r4, 8004e00 <iprintf+0x14>
 8004df6:	69a3      	ldr	r3, [r4, #24]
 8004df8:	b913      	cbnz	r3, 8004e00 <iprintf+0x14>
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f001 f960 	bl	80060c0 <__sinit>
 8004e00:	ab05      	add	r3, sp, #20
 8004e02:	9a04      	ldr	r2, [sp, #16]
 8004e04:	68a1      	ldr	r1, [r4, #8]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f001 ff1d 	bl	8006c48 <_vfiprintf_r>
 8004e0e:	b002      	add	sp, #8
 8004e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e14:	b004      	add	sp, #16
 8004e16:	4770      	bx	lr
 8004e18:	2000000c 	.word	0x2000000c

08004e1c <_puts_r>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	460e      	mov	r6, r1
 8004e20:	4605      	mov	r5, r0
 8004e22:	b118      	cbz	r0, 8004e2c <_puts_r+0x10>
 8004e24:	6983      	ldr	r3, [r0, #24]
 8004e26:	b90b      	cbnz	r3, 8004e2c <_puts_r+0x10>
 8004e28:	f001 f94a 	bl	80060c0 <__sinit>
 8004e2c:	69ab      	ldr	r3, [r5, #24]
 8004e2e:	68ac      	ldr	r4, [r5, #8]
 8004e30:	b913      	cbnz	r3, 8004e38 <_puts_r+0x1c>
 8004e32:	4628      	mov	r0, r5
 8004e34:	f001 f944 	bl	80060c0 <__sinit>
 8004e38:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <_puts_r+0xd0>)
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	d120      	bne.n	8004e80 <_puts_r+0x64>
 8004e3e:	686c      	ldr	r4, [r5, #4]
 8004e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_puts_r+0x36>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	0598      	lsls	r0, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_puts_r+0x36>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f001 f9da 	bl	8006206 <__retarget_lock_acquire_recursive>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	0719      	lsls	r1, r3, #28
 8004e56:	d51d      	bpl.n	8004e94 <_puts_r+0x78>
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	b1db      	cbz	r3, 8004e94 <_puts_r+0x78>
 8004e5c:	3e01      	subs	r6, #1
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e64:	3b01      	subs	r3, #1
 8004e66:	60a3      	str	r3, [r4, #8]
 8004e68:	bb39      	cbnz	r1, 8004eba <_puts_r+0x9e>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	da38      	bge.n	8004ee0 <_puts_r+0xc4>
 8004e6e:	4622      	mov	r2, r4
 8004e70:	210a      	movs	r1, #10
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f950 	bl	8005118 <__swbuf_r>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d011      	beq.n	8004ea0 <_puts_r+0x84>
 8004e7c:	250a      	movs	r5, #10
 8004e7e:	e011      	b.n	8004ea4 <_puts_r+0x88>
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <_puts_r+0xd4>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d101      	bne.n	8004e8a <_puts_r+0x6e>
 8004e86:	68ac      	ldr	r4, [r5, #8]
 8004e88:	e7da      	b.n	8004e40 <_puts_r+0x24>
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <_puts_r+0xd8>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	bf08      	it	eq
 8004e90:	68ec      	ldreq	r4, [r5, #12]
 8004e92:	e7d5      	b.n	8004e40 <_puts_r+0x24>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 f990 	bl	80051bc <__swsetup_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d0dd      	beq.n	8004e5c <_puts_r+0x40>
 8004ea0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d405      	bmi.n	8004eb6 <_puts_r+0x9a>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	059b      	lsls	r3, r3, #22
 8004eae:	d402      	bmi.n	8004eb6 <_puts_r+0x9a>
 8004eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb2:	f001 f9a9 	bl	8006208 <__retarget_lock_release_recursive>
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da04      	bge.n	8004ec8 <_puts_r+0xac>
 8004ebe:	69a2      	ldr	r2, [r4, #24]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dc06      	bgt.n	8004ed2 <_puts_r+0xb6>
 8004ec4:	290a      	cmp	r1, #10
 8004ec6:	d004      	beq.n	8004ed2 <_puts_r+0xb6>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6022      	str	r2, [r4, #0]
 8004ece:	7019      	strb	r1, [r3, #0]
 8004ed0:	e7c5      	b.n	8004e5e <_puts_r+0x42>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f91f 	bl	8005118 <__swbuf_r>
 8004eda:	3001      	adds	r0, #1
 8004edc:	d1bf      	bne.n	8004e5e <_puts_r+0x42>
 8004ede:	e7df      	b.n	8004ea0 <_puts_r+0x84>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	250a      	movs	r5, #10
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	6022      	str	r2, [r4, #0]
 8004ee8:	701d      	strb	r5, [r3, #0]
 8004eea:	e7db      	b.n	8004ea4 <_puts_r+0x88>
 8004eec:	0800761c 	.word	0x0800761c
 8004ef0:	0800763c 	.word	0x0800763c
 8004ef4:	080075fc 	.word	0x080075fc

08004ef8 <puts>:
 8004ef8:	4b02      	ldr	r3, [pc, #8]	; (8004f04 <puts+0xc>)
 8004efa:	4601      	mov	r1, r0
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	f7ff bf8d 	b.w	8004e1c <_puts_r>
 8004f02:	bf00      	nop
 8004f04:	2000000c 	.word	0x2000000c

08004f08 <setvbuf>:
 8004f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	461d      	mov	r5, r3
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <setvbuf+0x17c>)
 8004f10:	681f      	ldr	r7, [r3, #0]
 8004f12:	4604      	mov	r4, r0
 8004f14:	460e      	mov	r6, r1
 8004f16:	4690      	mov	r8, r2
 8004f18:	b127      	cbz	r7, 8004f24 <setvbuf+0x1c>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	b913      	cbnz	r3, 8004f24 <setvbuf+0x1c>
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f001 f8ce 	bl	80060c0 <__sinit>
 8004f24:	4b58      	ldr	r3, [pc, #352]	; (8005088 <setvbuf+0x180>)
 8004f26:	429c      	cmp	r4, r3
 8004f28:	d167      	bne.n	8004ffa <setvbuf+0xf2>
 8004f2a:	687c      	ldr	r4, [r7, #4]
 8004f2c:	f1b8 0f02 	cmp.w	r8, #2
 8004f30:	d006      	beq.n	8004f40 <setvbuf+0x38>
 8004f32:	f1b8 0f01 	cmp.w	r8, #1
 8004f36:	f200 809f 	bhi.w	8005078 <setvbuf+0x170>
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	f2c0 809c 	blt.w	8005078 <setvbuf+0x170>
 8004f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f42:	07db      	lsls	r3, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <setvbuf+0x4a>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	0598      	lsls	r0, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <setvbuf+0x4a>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4e:	f001 f95a 	bl	8006206 <__retarget_lock_acquire_recursive>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4638      	mov	r0, r7
 8004f56:	f001 f81f 	bl	8005f98 <_fflush_r>
 8004f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5c:	b141      	cbz	r1, 8004f70 <setvbuf+0x68>
 8004f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f62:	4299      	cmp	r1, r3
 8004f64:	d002      	beq.n	8004f6c <setvbuf+0x64>
 8004f66:	4638      	mov	r0, r7
 8004f68:	f001 fd64 	bl	8006a34 <_free_r>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f70:	2300      	movs	r3, #0
 8004f72:	61a3      	str	r3, [r4, #24]
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	0619      	lsls	r1, r3, #24
 8004f7a:	d503      	bpl.n	8004f84 <setvbuf+0x7c>
 8004f7c:	6921      	ldr	r1, [r4, #16]
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f001 fd58 	bl	8006a34 <_free_r>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	f1b8 0f02 	cmp.w	r8, #2
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	d06c      	beq.n	8005070 <setvbuf+0x168>
 8004f96:	ab01      	add	r3, sp, #4
 8004f98:	466a      	mov	r2, sp
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f001 f934 	bl	800620a <__swhatbuf_r>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	4318      	orrs	r0, r3
 8004fa6:	81a0      	strh	r0, [r4, #12]
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	d130      	bne.n	800500e <setvbuf+0x106>
 8004fac:	9d00      	ldr	r5, [sp, #0]
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f001 f990 	bl	80062d4 <malloc>
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d155      	bne.n	8005066 <setvbuf+0x15e>
 8004fba:	f8dd 9000 	ldr.w	r9, [sp]
 8004fbe:	45a9      	cmp	r9, r5
 8004fc0:	d14a      	bne.n	8005058 <setvbuf+0x150>
 8004fc2:	f04f 35ff 	mov.w	r5, #4294967295
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	60a2      	str	r2, [r4, #8]
 8004fca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	6122      	str	r2, [r4, #16]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd8:	6162      	str	r2, [r4, #20]
 8004fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	07d2      	lsls	r2, r2, #31
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	d405      	bmi.n	8004ff2 <setvbuf+0xea>
 8004fe6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fea:	d102      	bne.n	8004ff2 <setvbuf+0xea>
 8004fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fee:	f001 f90b 	bl	8006208 <__retarget_lock_release_recursive>
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	b003      	add	sp, #12
 8004ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <setvbuf+0x184>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d101      	bne.n	8005004 <setvbuf+0xfc>
 8005000:	68bc      	ldr	r4, [r7, #8]
 8005002:	e793      	b.n	8004f2c <setvbuf+0x24>
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <setvbuf+0x188>)
 8005006:	429c      	cmp	r4, r3
 8005008:	bf08      	it	eq
 800500a:	68fc      	ldreq	r4, [r7, #12]
 800500c:	e78e      	b.n	8004f2c <setvbuf+0x24>
 800500e:	2e00      	cmp	r6, #0
 8005010:	d0cd      	beq.n	8004fae <setvbuf+0xa6>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	b913      	cbnz	r3, 800501c <setvbuf+0x114>
 8005016:	4638      	mov	r0, r7
 8005018:	f001 f852 	bl	80060c0 <__sinit>
 800501c:	f1b8 0f01 	cmp.w	r8, #1
 8005020:	bf08      	it	eq
 8005022:	89a3      	ldrheq	r3, [r4, #12]
 8005024:	6026      	str	r6, [r4, #0]
 8005026:	bf04      	itt	eq
 8005028:	f043 0301 	orreq.w	r3, r3, #1
 800502c:	81a3      	strheq	r3, [r4, #12]
 800502e:	89a2      	ldrh	r2, [r4, #12]
 8005030:	f012 0308 	ands.w	r3, r2, #8
 8005034:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005038:	d01c      	beq.n	8005074 <setvbuf+0x16c>
 800503a:	07d3      	lsls	r3, r2, #31
 800503c:	bf41      	itttt	mi
 800503e:	2300      	movmi	r3, #0
 8005040:	426d      	negmi	r5, r5
 8005042:	60a3      	strmi	r3, [r4, #8]
 8005044:	61a5      	strmi	r5, [r4, #24]
 8005046:	bf58      	it	pl
 8005048:	60a5      	strpl	r5, [r4, #8]
 800504a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800504c:	f015 0501 	ands.w	r5, r5, #1
 8005050:	d115      	bne.n	800507e <setvbuf+0x176>
 8005052:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005056:	e7c8      	b.n	8004fea <setvbuf+0xe2>
 8005058:	4648      	mov	r0, r9
 800505a:	f001 f93b 	bl	80062d4 <malloc>
 800505e:	4606      	mov	r6, r0
 8005060:	2800      	cmp	r0, #0
 8005062:	d0ae      	beq.n	8004fc2 <setvbuf+0xba>
 8005064:	464d      	mov	r5, r9
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	e7d0      	b.n	8005012 <setvbuf+0x10a>
 8005070:	2500      	movs	r5, #0
 8005072:	e7a8      	b.n	8004fc6 <setvbuf+0xbe>
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	e7e8      	b.n	800504a <setvbuf+0x142>
 8005078:	f04f 35ff 	mov.w	r5, #4294967295
 800507c:	e7b9      	b.n	8004ff2 <setvbuf+0xea>
 800507e:	2500      	movs	r5, #0
 8005080:	e7b7      	b.n	8004ff2 <setvbuf+0xea>
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c
 8005088:	0800761c 	.word	0x0800761c
 800508c:	0800763c 	.word	0x0800763c
 8005090:	080075fc 	.word	0x080075fc

08005094 <__utoa>:
 8005094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005096:	4c1f      	ldr	r4, [pc, #124]	; (8005114 <__utoa+0x80>)
 8005098:	b08b      	sub	sp, #44	; 0x2c
 800509a:	4605      	mov	r5, r0
 800509c:	460b      	mov	r3, r1
 800509e:	466e      	mov	r6, sp
 80050a0:	f104 0c20 	add.w	ip, r4, #32
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	6861      	ldr	r1, [r4, #4]
 80050a8:	4637      	mov	r7, r6
 80050aa:	c703      	stmia	r7!, {r0, r1}
 80050ac:	3408      	adds	r4, #8
 80050ae:	4564      	cmp	r4, ip
 80050b0:	463e      	mov	r6, r7
 80050b2:	d1f7      	bne.n	80050a4 <__utoa+0x10>
 80050b4:	7921      	ldrb	r1, [r4, #4]
 80050b6:	7139      	strb	r1, [r7, #4]
 80050b8:	1e91      	subs	r1, r2, #2
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	6038      	str	r0, [r7, #0]
 80050be:	2922      	cmp	r1, #34	; 0x22
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	d904      	bls.n	80050d0 <__utoa+0x3c>
 80050c6:	7019      	strb	r1, [r3, #0]
 80050c8:	460b      	mov	r3, r1
 80050ca:	4618      	mov	r0, r3
 80050cc:	b00b      	add	sp, #44	; 0x2c
 80050ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d0:	1e58      	subs	r0, r3, #1
 80050d2:	4684      	mov	ip, r0
 80050d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80050d8:	fb02 5617 	mls	r6, r2, r7, r5
 80050dc:	3628      	adds	r6, #40	; 0x28
 80050de:	446e      	add	r6, sp
 80050e0:	460c      	mov	r4, r1
 80050e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80050e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80050ea:	462e      	mov	r6, r5
 80050ec:	42b2      	cmp	r2, r6
 80050ee:	f101 0101 	add.w	r1, r1, #1
 80050f2:	463d      	mov	r5, r7
 80050f4:	d9ee      	bls.n	80050d4 <__utoa+0x40>
 80050f6:	2200      	movs	r2, #0
 80050f8:	545a      	strb	r2, [r3, r1]
 80050fa:	1919      	adds	r1, r3, r4
 80050fc:	1aa5      	subs	r5, r4, r2
 80050fe:	42aa      	cmp	r2, r5
 8005100:	dae3      	bge.n	80050ca <__utoa+0x36>
 8005102:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005106:	780e      	ldrb	r6, [r1, #0]
 8005108:	7006      	strb	r6, [r0, #0]
 800510a:	3201      	adds	r2, #1
 800510c:	f801 5901 	strb.w	r5, [r1], #-1
 8005110:	e7f4      	b.n	80050fc <__utoa+0x68>
 8005112:	bf00      	nop
 8005114:	08007544 	.word	0x08007544

08005118 <__swbuf_r>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	460e      	mov	r6, r1
 800511c:	4614      	mov	r4, r2
 800511e:	4605      	mov	r5, r0
 8005120:	b118      	cbz	r0, 800512a <__swbuf_r+0x12>
 8005122:	6983      	ldr	r3, [r0, #24]
 8005124:	b90b      	cbnz	r3, 800512a <__swbuf_r+0x12>
 8005126:	f000 ffcb 	bl	80060c0 <__sinit>
 800512a:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <__swbuf_r+0x98>)
 800512c:	429c      	cmp	r4, r3
 800512e:	d12b      	bne.n	8005188 <__swbuf_r+0x70>
 8005130:	686c      	ldr	r4, [r5, #4]
 8005132:	69a3      	ldr	r3, [r4, #24]
 8005134:	60a3      	str	r3, [r4, #8]
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	071a      	lsls	r2, r3, #28
 800513a:	d52f      	bpl.n	800519c <__swbuf_r+0x84>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	b36b      	cbz	r3, 800519c <__swbuf_r+0x84>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	1ac0      	subs	r0, r0, r3
 8005146:	6963      	ldr	r3, [r4, #20]
 8005148:	b2f6      	uxtb	r6, r6
 800514a:	4283      	cmp	r3, r0
 800514c:	4637      	mov	r7, r6
 800514e:	dc04      	bgt.n	800515a <__swbuf_r+0x42>
 8005150:	4621      	mov	r1, r4
 8005152:	4628      	mov	r0, r5
 8005154:	f000 ff20 	bl	8005f98 <_fflush_r>
 8005158:	bb30      	cbnz	r0, 80051a8 <__swbuf_r+0x90>
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	3b01      	subs	r3, #1
 800515e:	60a3      	str	r3, [r4, #8]
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	6022      	str	r2, [r4, #0]
 8005166:	701e      	strb	r6, [r3, #0]
 8005168:	6963      	ldr	r3, [r4, #20]
 800516a:	3001      	adds	r0, #1
 800516c:	4283      	cmp	r3, r0
 800516e:	d004      	beq.n	800517a <__swbuf_r+0x62>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	07db      	lsls	r3, r3, #31
 8005174:	d506      	bpl.n	8005184 <__swbuf_r+0x6c>
 8005176:	2e0a      	cmp	r6, #10
 8005178:	d104      	bne.n	8005184 <__swbuf_r+0x6c>
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 ff0b 	bl	8005f98 <_fflush_r>
 8005182:	b988      	cbnz	r0, 80051a8 <__swbuf_r+0x90>
 8005184:	4638      	mov	r0, r7
 8005186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <__swbuf_r+0x9c>)
 800518a:	429c      	cmp	r4, r3
 800518c:	d101      	bne.n	8005192 <__swbuf_r+0x7a>
 800518e:	68ac      	ldr	r4, [r5, #8]
 8005190:	e7cf      	b.n	8005132 <__swbuf_r+0x1a>
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <__swbuf_r+0xa0>)
 8005194:	429c      	cmp	r4, r3
 8005196:	bf08      	it	eq
 8005198:	68ec      	ldreq	r4, [r5, #12]
 800519a:	e7ca      	b.n	8005132 <__swbuf_r+0x1a>
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 f80c 	bl	80051bc <__swsetup_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d0cb      	beq.n	8005140 <__swbuf_r+0x28>
 80051a8:	f04f 37ff 	mov.w	r7, #4294967295
 80051ac:	e7ea      	b.n	8005184 <__swbuf_r+0x6c>
 80051ae:	bf00      	nop
 80051b0:	0800761c 	.word	0x0800761c
 80051b4:	0800763c 	.word	0x0800763c
 80051b8:	080075fc 	.word	0x080075fc

080051bc <__swsetup_r>:
 80051bc:	4b32      	ldr	r3, [pc, #200]	; (8005288 <__swsetup_r+0xcc>)
 80051be:	b570      	push	{r4, r5, r6, lr}
 80051c0:	681d      	ldr	r5, [r3, #0]
 80051c2:	4606      	mov	r6, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	b125      	cbz	r5, 80051d2 <__swsetup_r+0x16>
 80051c8:	69ab      	ldr	r3, [r5, #24]
 80051ca:	b913      	cbnz	r3, 80051d2 <__swsetup_r+0x16>
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 ff77 	bl	80060c0 <__sinit>
 80051d2:	4b2e      	ldr	r3, [pc, #184]	; (800528c <__swsetup_r+0xd0>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d10f      	bne.n	80051f8 <__swsetup_r+0x3c>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051e0:	0719      	lsls	r1, r3, #28
 80051e2:	d42c      	bmi.n	800523e <__swsetup_r+0x82>
 80051e4:	06dd      	lsls	r5, r3, #27
 80051e6:	d411      	bmi.n	800520c <__swsetup_r+0x50>
 80051e8:	2309      	movs	r3, #9
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051f0:	81a3      	strh	r3, [r4, #12]
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	e03e      	b.n	8005276 <__swsetup_r+0xba>
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <__swsetup_r+0xd4>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d101      	bne.n	8005202 <__swsetup_r+0x46>
 80051fe:	68ac      	ldr	r4, [r5, #8]
 8005200:	e7eb      	b.n	80051da <__swsetup_r+0x1e>
 8005202:	4b24      	ldr	r3, [pc, #144]	; (8005294 <__swsetup_r+0xd8>)
 8005204:	429c      	cmp	r4, r3
 8005206:	bf08      	it	eq
 8005208:	68ec      	ldreq	r4, [r5, #12]
 800520a:	e7e6      	b.n	80051da <__swsetup_r+0x1e>
 800520c:	0758      	lsls	r0, r3, #29
 800520e:	d512      	bpl.n	8005236 <__swsetup_r+0x7a>
 8005210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005212:	b141      	cbz	r1, 8005226 <__swsetup_r+0x6a>
 8005214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005218:	4299      	cmp	r1, r3
 800521a:	d002      	beq.n	8005222 <__swsetup_r+0x66>
 800521c:	4630      	mov	r0, r6
 800521e:	f001 fc09 	bl	8006a34 <_free_r>
 8005222:	2300      	movs	r3, #0
 8005224:	6363      	str	r3, [r4, #52]	; 0x34
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	2300      	movs	r3, #0
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f043 0308 	orr.w	r3, r3, #8
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	b94b      	cbnz	r3, 8005256 <__swsetup_r+0x9a>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524c:	d003      	beq.n	8005256 <__swsetup_r+0x9a>
 800524e:	4621      	mov	r1, r4
 8005250:	4630      	mov	r0, r6
 8005252:	f000 ffff 	bl	8006254 <__smakebuf_r>
 8005256:	89a0      	ldrh	r0, [r4, #12]
 8005258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800525c:	f010 0301 	ands.w	r3, r0, #1
 8005260:	d00a      	beq.n	8005278 <__swsetup_r+0xbc>
 8005262:	2300      	movs	r3, #0
 8005264:	60a3      	str	r3, [r4, #8]
 8005266:	6963      	ldr	r3, [r4, #20]
 8005268:	425b      	negs	r3, r3
 800526a:	61a3      	str	r3, [r4, #24]
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	b943      	cbnz	r3, 8005282 <__swsetup_r+0xc6>
 8005270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005274:	d1ba      	bne.n	80051ec <__swsetup_r+0x30>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	0781      	lsls	r1, r0, #30
 800527a:	bf58      	it	pl
 800527c:	6963      	ldrpl	r3, [r4, #20]
 800527e:	60a3      	str	r3, [r4, #8]
 8005280:	e7f4      	b.n	800526c <__swsetup_r+0xb0>
 8005282:	2000      	movs	r0, #0
 8005284:	e7f7      	b.n	8005276 <__swsetup_r+0xba>
 8005286:	bf00      	nop
 8005288:	2000000c 	.word	0x2000000c
 800528c:	0800761c 	.word	0x0800761c
 8005290:	0800763c 	.word	0x0800763c
 8005294:	080075fc 	.word	0x080075fc

08005298 <quorem>:
 8005298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	6903      	ldr	r3, [r0, #16]
 800529e:	690c      	ldr	r4, [r1, #16]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	4607      	mov	r7, r0
 80052a4:	f2c0 8081 	blt.w	80053aa <quorem+0x112>
 80052a8:	3c01      	subs	r4, #1
 80052aa:	f101 0814 	add.w	r8, r1, #20
 80052ae:	f100 0514 	add.w	r5, r0, #20
 80052b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052c0:	3301      	adds	r3, #1
 80052c2:	429a      	cmp	r2, r3
 80052c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80052d0:	d331      	bcc.n	8005336 <quorem+0x9e>
 80052d2:	f04f 0e00 	mov.w	lr, #0
 80052d6:	4640      	mov	r0, r8
 80052d8:	46ac      	mov	ip, r5
 80052da:	46f2      	mov	sl, lr
 80052dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80052e0:	b293      	uxth	r3, r2
 80052e2:	fb06 e303 	mla	r3, r6, r3, lr
 80052e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ebaa 0303 	sub.w	r3, sl, r3
 80052f0:	f8dc a000 	ldr.w	sl, [ip]
 80052f4:	0c12      	lsrs	r2, r2, #16
 80052f6:	fa13 f38a 	uxtah	r3, r3, sl
 80052fa:	fb06 e202 	mla	r2, r6, r2, lr
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005306:	b292      	uxth	r2, r2
 8005308:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800530c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005310:	f8bd 3000 	ldrh.w	r3, [sp]
 8005314:	4581      	cmp	r9, r0
 8005316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800531a:	f84c 3b04 	str.w	r3, [ip], #4
 800531e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005322:	d2db      	bcs.n	80052dc <quorem+0x44>
 8005324:	f855 300b 	ldr.w	r3, [r5, fp]
 8005328:	b92b      	cbnz	r3, 8005336 <quorem+0x9e>
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	3b04      	subs	r3, #4
 800532e:	429d      	cmp	r5, r3
 8005330:	461a      	mov	r2, r3
 8005332:	d32e      	bcc.n	8005392 <quorem+0xfa>
 8005334:	613c      	str	r4, [r7, #16]
 8005336:	4638      	mov	r0, r7
 8005338:	f001 fa64 	bl	8006804 <__mcmp>
 800533c:	2800      	cmp	r0, #0
 800533e:	db24      	blt.n	800538a <quorem+0xf2>
 8005340:	3601      	adds	r6, #1
 8005342:	4628      	mov	r0, r5
 8005344:	f04f 0c00 	mov.w	ip, #0
 8005348:	f858 2b04 	ldr.w	r2, [r8], #4
 800534c:	f8d0 e000 	ldr.w	lr, [r0]
 8005350:	b293      	uxth	r3, r2
 8005352:	ebac 0303 	sub.w	r3, ip, r3
 8005356:	0c12      	lsrs	r2, r2, #16
 8005358:	fa13 f38e 	uxtah	r3, r3, lr
 800535c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536a:	45c1      	cmp	r9, r8
 800536c:	f840 3b04 	str.w	r3, [r0], #4
 8005370:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005374:	d2e8      	bcs.n	8005348 <quorem+0xb0>
 8005376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800537a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800537e:	b922      	cbnz	r2, 800538a <quorem+0xf2>
 8005380:	3b04      	subs	r3, #4
 8005382:	429d      	cmp	r5, r3
 8005384:	461a      	mov	r2, r3
 8005386:	d30a      	bcc.n	800539e <quorem+0x106>
 8005388:	613c      	str	r4, [r7, #16]
 800538a:	4630      	mov	r0, r6
 800538c:	b003      	add	sp, #12
 800538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	3b04      	subs	r3, #4
 8005396:	2a00      	cmp	r2, #0
 8005398:	d1cc      	bne.n	8005334 <quorem+0x9c>
 800539a:	3c01      	subs	r4, #1
 800539c:	e7c7      	b.n	800532e <quorem+0x96>
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	3b04      	subs	r3, #4
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d1f0      	bne.n	8005388 <quorem+0xf0>
 80053a6:	3c01      	subs	r4, #1
 80053a8:	e7eb      	b.n	8005382 <quorem+0xea>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e7ee      	b.n	800538c <quorem+0xf4>
	...

080053b0 <_dtoa_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	ed2d 8b02 	vpush	{d8}
 80053b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053ba:	b091      	sub	sp, #68	; 0x44
 80053bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053c0:	ec59 8b10 	vmov	r8, r9, d0
 80053c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80053c6:	9106      	str	r1, [sp, #24]
 80053c8:	4606      	mov	r6, r0
 80053ca:	9208      	str	r2, [sp, #32]
 80053cc:	930c      	str	r3, [sp, #48]	; 0x30
 80053ce:	b975      	cbnz	r5, 80053ee <_dtoa_r+0x3e>
 80053d0:	2010      	movs	r0, #16
 80053d2:	f000 ff7f 	bl	80062d4 <malloc>
 80053d6:	4602      	mov	r2, r0
 80053d8:	6270      	str	r0, [r6, #36]	; 0x24
 80053da:	b920      	cbnz	r0, 80053e6 <_dtoa_r+0x36>
 80053dc:	4baa      	ldr	r3, [pc, #680]	; (8005688 <_dtoa_r+0x2d8>)
 80053de:	21ea      	movs	r1, #234	; 0xea
 80053e0:	48aa      	ldr	r0, [pc, #680]	; (800568c <_dtoa_r+0x2dc>)
 80053e2:	f001 fdc7 	bl	8006f74 <__assert_func>
 80053e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053ea:	6005      	str	r5, [r0, #0]
 80053ec:	60c5      	str	r5, [r0, #12]
 80053ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	b151      	cbz	r1, 800540a <_dtoa_r+0x5a>
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	604a      	str	r2, [r1, #4]
 80053f8:	2301      	movs	r3, #1
 80053fa:	4093      	lsls	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
 80053fe:	4630      	mov	r0, r6
 8005400:	f000 ffbe 	bl	8006380 <_Bfree>
 8005404:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f1b9 0300 	subs.w	r3, r9, #0
 800540e:	bfbb      	ittet	lt
 8005410:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005414:	9303      	strlt	r3, [sp, #12]
 8005416:	2300      	movge	r3, #0
 8005418:	2201      	movlt	r2, #1
 800541a:	bfac      	ite	ge
 800541c:	6023      	strge	r3, [r4, #0]
 800541e:	6022      	strlt	r2, [r4, #0]
 8005420:	4b9b      	ldr	r3, [pc, #620]	; (8005690 <_dtoa_r+0x2e0>)
 8005422:	9c03      	ldr	r4, [sp, #12]
 8005424:	43a3      	bics	r3, r4
 8005426:	d11c      	bne.n	8005462 <_dtoa_r+0xb2>
 8005428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800542a:	f242 730f 	movw	r3, #9999	; 0x270f
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005434:	ea53 0308 	orrs.w	r3, r3, r8
 8005438:	f000 84fd 	beq.w	8005e36 <_dtoa_r+0xa86>
 800543c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800543e:	b963      	cbnz	r3, 800545a <_dtoa_r+0xaa>
 8005440:	4b94      	ldr	r3, [pc, #592]	; (8005694 <_dtoa_r+0x2e4>)
 8005442:	e01f      	b.n	8005484 <_dtoa_r+0xd4>
 8005444:	4b94      	ldr	r3, [pc, #592]	; (8005698 <_dtoa_r+0x2e8>)
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	3308      	adds	r3, #8
 800544a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	9801      	ldr	r0, [sp, #4]
 8005450:	b011      	add	sp, #68	; 0x44
 8005452:	ecbd 8b02 	vpop	{d8}
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545a:	4b8e      	ldr	r3, [pc, #568]	; (8005694 <_dtoa_r+0x2e4>)
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	3303      	adds	r3, #3
 8005460:	e7f3      	b.n	800544a <_dtoa_r+0x9a>
 8005462:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005466:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d10b      	bne.n	8005488 <_dtoa_r+0xd8>
 8005470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005472:	2301      	movs	r3, #1
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 84d9 	beq.w	8005e30 <_dtoa_r+0xa80>
 800547e:	4887      	ldr	r0, [pc, #540]	; (800569c <_dtoa_r+0x2ec>)
 8005480:	6018      	str	r0, [r3, #0]
 8005482:	1e43      	subs	r3, r0, #1
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	e7e2      	b.n	800544e <_dtoa_r+0x9e>
 8005488:	a90f      	add	r1, sp, #60	; 0x3c
 800548a:	aa0e      	add	r2, sp, #56	; 0x38
 800548c:	4630      	mov	r0, r6
 800548e:	eeb0 0b48 	vmov.f64	d0, d8
 8005492:	f001 fa5d 	bl	8006950 <__d2b>
 8005496:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800549a:	4605      	mov	r5, r0
 800549c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800549e:	2900      	cmp	r1, #0
 80054a0:	d046      	beq.n	8005530 <_dtoa_r+0x180>
 80054a2:	ee18 4a90 	vmov	r4, s17
 80054a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054aa:	ec53 2b18 	vmov	r2, r3, d8
 80054ae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80054b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80054ba:	2400      	movs	r4, #0
 80054bc:	ec43 2b16 	vmov	d6, r2, r3
 80054c0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80054c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005670 <_dtoa_r+0x2c0>
 80054c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8005678 <_dtoa_r+0x2c8>
 80054d0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80054d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005680 <_dtoa_r+0x2d0>
 80054d8:	ee07 1a90 	vmov	s15, r1
 80054dc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80054e0:	eeb0 7b46 	vmov.f64	d7, d6
 80054e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80054e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80054ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	ee16 ba90 	vmov	fp, s13
 80054f8:	940a      	str	r4, [sp, #40]	; 0x28
 80054fa:	d508      	bpl.n	800550e <_dtoa_r+0x15e>
 80054fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005500:	eeb4 6b47 	vcmp.f64	d6, d7
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	bf18      	it	ne
 800550a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800550e:	f1bb 0f16 	cmp.w	fp, #22
 8005512:	d82f      	bhi.n	8005574 <_dtoa_r+0x1c4>
 8005514:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <_dtoa_r+0x2f0>)
 8005516:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800551a:	ed93 7b00 	vldr	d7, [r3]
 800551e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	d501      	bpl.n	800552c <_dtoa_r+0x17c>
 8005528:	f10b 3bff 	add.w	fp, fp, #4294967295
 800552c:	2300      	movs	r3, #0
 800552e:	e022      	b.n	8005576 <_dtoa_r+0x1c6>
 8005530:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005532:	4401      	add	r1, r0
 8005534:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005538:	2b20      	cmp	r3, #32
 800553a:	bfc1      	itttt	gt
 800553c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005540:	fa04 f303 	lslgt.w	r3, r4, r3
 8005544:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005548:	fa28 f804 	lsrgt.w	r8, r8, r4
 800554c:	bfd6      	itet	le
 800554e:	f1c3 0320 	rsble	r3, r3, #32
 8005552:	ea43 0808 	orrgt.w	r8, r3, r8
 8005556:	fa08 f803 	lslle.w	r8, r8, r3
 800555a:	ee07 8a90 	vmov	s15, r8
 800555e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005562:	3901      	subs	r1, #1
 8005564:	ee17 4a90 	vmov	r4, s15
 8005568:	ec53 2b17 	vmov	r2, r3, d7
 800556c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005570:	2401      	movs	r4, #1
 8005572:	e7a3      	b.n	80054bc <_dtoa_r+0x10c>
 8005574:	2301      	movs	r3, #1
 8005576:	930b      	str	r3, [sp, #44]	; 0x2c
 8005578:	1a43      	subs	r3, r0, r1
 800557a:	1e5a      	subs	r2, r3, #1
 800557c:	bf45      	ittet	mi
 800557e:	f1c3 0301 	rsbmi	r3, r3, #1
 8005582:	9304      	strmi	r3, [sp, #16]
 8005584:	2300      	movpl	r3, #0
 8005586:	2300      	movmi	r3, #0
 8005588:	9205      	str	r2, [sp, #20]
 800558a:	bf54      	ite	pl
 800558c:	9304      	strpl	r3, [sp, #16]
 800558e:	9305      	strmi	r3, [sp, #20]
 8005590:	f1bb 0f00 	cmp.w	fp, #0
 8005594:	db18      	blt.n	80055c8 <_dtoa_r+0x218>
 8005596:	9b05      	ldr	r3, [sp, #20]
 8005598:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800559c:	445b      	add	r3, fp
 800559e:	9305      	str	r3, [sp, #20]
 80055a0:	2300      	movs	r3, #0
 80055a2:	9a06      	ldr	r2, [sp, #24]
 80055a4:	2a09      	cmp	r2, #9
 80055a6:	d849      	bhi.n	800563c <_dtoa_r+0x28c>
 80055a8:	2a05      	cmp	r2, #5
 80055aa:	bfc4      	itt	gt
 80055ac:	3a04      	subgt	r2, #4
 80055ae:	9206      	strgt	r2, [sp, #24]
 80055b0:	9a06      	ldr	r2, [sp, #24]
 80055b2:	f1a2 0202 	sub.w	r2, r2, #2
 80055b6:	bfcc      	ite	gt
 80055b8:	2400      	movgt	r4, #0
 80055ba:	2401      	movle	r4, #1
 80055bc:	2a03      	cmp	r2, #3
 80055be:	d848      	bhi.n	8005652 <_dtoa_r+0x2a2>
 80055c0:	e8df f002 	tbb	[pc, r2]
 80055c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80055c8:	9b04      	ldr	r3, [sp, #16]
 80055ca:	2200      	movs	r2, #0
 80055cc:	eba3 030b 	sub.w	r3, r3, fp
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9209      	str	r2, [sp, #36]	; 0x24
 80055d4:	f1cb 0300 	rsb	r3, fp, #0
 80055d8:	e7e3      	b.n	80055a2 <_dtoa_r+0x1f2>
 80055da:	2200      	movs	r2, #0
 80055dc:	9207      	str	r2, [sp, #28]
 80055de:	9a08      	ldr	r2, [sp, #32]
 80055e0:	2a00      	cmp	r2, #0
 80055e2:	dc39      	bgt.n	8005658 <_dtoa_r+0x2a8>
 80055e4:	f04f 0a01 	mov.w	sl, #1
 80055e8:	46d1      	mov	r9, sl
 80055ea:	4652      	mov	r2, sl
 80055ec:	f8cd a020 	str.w	sl, [sp, #32]
 80055f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80055f2:	2100      	movs	r1, #0
 80055f4:	6079      	str	r1, [r7, #4]
 80055f6:	2004      	movs	r0, #4
 80055f8:	f100 0c14 	add.w	ip, r0, #20
 80055fc:	4594      	cmp	ip, r2
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	d92f      	bls.n	8005662 <_dtoa_r+0x2b2>
 8005602:	4630      	mov	r0, r6
 8005604:	930d      	str	r3, [sp, #52]	; 0x34
 8005606:	f000 fe7b 	bl	8006300 <_Balloc>
 800560a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800560c:	9001      	str	r0, [sp, #4]
 800560e:	4602      	mov	r2, r0
 8005610:	2800      	cmp	r0, #0
 8005612:	d149      	bne.n	80056a8 <_dtoa_r+0x2f8>
 8005614:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <_dtoa_r+0x2f4>)
 8005616:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800561a:	e6e1      	b.n	80053e0 <_dtoa_r+0x30>
 800561c:	2201      	movs	r2, #1
 800561e:	e7dd      	b.n	80055dc <_dtoa_r+0x22c>
 8005620:	2200      	movs	r2, #0
 8005622:	9207      	str	r2, [sp, #28]
 8005624:	9a08      	ldr	r2, [sp, #32]
 8005626:	eb0b 0a02 	add.w	sl, fp, r2
 800562a:	f10a 0901 	add.w	r9, sl, #1
 800562e:	464a      	mov	r2, r9
 8005630:	2a01      	cmp	r2, #1
 8005632:	bfb8      	it	lt
 8005634:	2201      	movlt	r2, #1
 8005636:	e7db      	b.n	80055f0 <_dtoa_r+0x240>
 8005638:	2201      	movs	r2, #1
 800563a:	e7f2      	b.n	8005622 <_dtoa_r+0x272>
 800563c:	2401      	movs	r4, #1
 800563e:	2200      	movs	r2, #0
 8005640:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005644:	f04f 3aff 	mov.w	sl, #4294967295
 8005648:	2100      	movs	r1, #0
 800564a:	46d1      	mov	r9, sl
 800564c:	2212      	movs	r2, #18
 800564e:	9108      	str	r1, [sp, #32]
 8005650:	e7ce      	b.n	80055f0 <_dtoa_r+0x240>
 8005652:	2201      	movs	r2, #1
 8005654:	9207      	str	r2, [sp, #28]
 8005656:	e7f5      	b.n	8005644 <_dtoa_r+0x294>
 8005658:	f8dd a020 	ldr.w	sl, [sp, #32]
 800565c:	46d1      	mov	r9, sl
 800565e:	4652      	mov	r2, sl
 8005660:	e7c6      	b.n	80055f0 <_dtoa_r+0x240>
 8005662:	3101      	adds	r1, #1
 8005664:	6079      	str	r1, [r7, #4]
 8005666:	0040      	lsls	r0, r0, #1
 8005668:	e7c6      	b.n	80055f8 <_dtoa_r+0x248>
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	08007576 	.word	0x08007576
 800568c:	0800758d 	.word	0x0800758d
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	08007572 	.word	0x08007572
 8005698:	08007569 	.word	0x08007569
 800569c:	08007521 	.word	0x08007521
 80056a0:	080076e0 	.word	0x080076e0
 80056a4:	080075e8 	.word	0x080075e8
 80056a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80056aa:	9901      	ldr	r1, [sp, #4]
 80056ac:	6011      	str	r1, [r2, #0]
 80056ae:	f1b9 0f0e 	cmp.w	r9, #14
 80056b2:	d86c      	bhi.n	800578e <_dtoa_r+0x3de>
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d06a      	beq.n	800578e <_dtoa_r+0x3de>
 80056b8:	f1bb 0f00 	cmp.w	fp, #0
 80056bc:	f340 80a0 	ble.w	8005800 <_dtoa_r+0x450>
 80056c0:	49c1      	ldr	r1, [pc, #772]	; (80059c8 <_dtoa_r+0x618>)
 80056c2:	f00b 020f 	and.w	r2, fp, #15
 80056c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80056ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80056ce:	ed92 7b00 	vldr	d7, [r2]
 80056d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80056d6:	f000 8087 	beq.w	80057e8 <_dtoa_r+0x438>
 80056da:	4abc      	ldr	r2, [pc, #752]	; (80059cc <_dtoa_r+0x61c>)
 80056dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80056e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80056e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80056e8:	f001 010f 	and.w	r1, r1, #15
 80056ec:	2203      	movs	r2, #3
 80056ee:	48b7      	ldr	r0, [pc, #732]	; (80059cc <_dtoa_r+0x61c>)
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d17b      	bne.n	80057ec <_dtoa_r+0x43c>
 80056f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80056f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80056fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005702:	2900      	cmp	r1, #0
 8005704:	f000 80a2 	beq.w	800584c <_dtoa_r+0x49c>
 8005708:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800570c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005710:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	f140 8098 	bpl.w	800584c <_dtoa_r+0x49c>
 800571c:	f1b9 0f00 	cmp.w	r9, #0
 8005720:	f000 8094 	beq.w	800584c <_dtoa_r+0x49c>
 8005724:	f1ba 0f00 	cmp.w	sl, #0
 8005728:	dd2f      	ble.n	800578a <_dtoa_r+0x3da>
 800572a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800572e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005732:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005736:	f10b 37ff 	add.w	r7, fp, #4294967295
 800573a:	3201      	adds	r2, #1
 800573c:	4650      	mov	r0, sl
 800573e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005742:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005746:	ee07 2a90 	vmov	s15, r2
 800574a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800574e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005752:	ee15 4a90 	vmov	r4, s11
 8005756:	ec52 1b15 	vmov	r1, r2, d5
 800575a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800575e:	2800      	cmp	r0, #0
 8005760:	d177      	bne.n	8005852 <_dtoa_r+0x4a2>
 8005762:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005766:	ee36 6b47 	vsub.f64	d6, d6, d7
 800576a:	ec42 1b17 	vmov	d7, r1, r2
 800576e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005776:	f300 8263 	bgt.w	8005c40 <_dtoa_r+0x890>
 800577a:	eeb1 7b47 	vneg.f64	d7, d7
 800577e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005786:	f100 8258 	bmi.w	8005c3a <_dtoa_r+0x88a>
 800578a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800578e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005790:	2a00      	cmp	r2, #0
 8005792:	f2c0 811d 	blt.w	80059d0 <_dtoa_r+0x620>
 8005796:	f1bb 0f0e 	cmp.w	fp, #14
 800579a:	f300 8119 	bgt.w	80059d0 <_dtoa_r+0x620>
 800579e:	4b8a      	ldr	r3, [pc, #552]	; (80059c8 <_dtoa_r+0x618>)
 80057a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057a4:	ed93 6b00 	vldr	d6, [r3]
 80057a8:	9b08      	ldr	r3, [sp, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f280 80b7 	bge.w	800591e <_dtoa_r+0x56e>
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	f300 80b3 	bgt.w	800591e <_dtoa_r+0x56e>
 80057b8:	f040 823f 	bne.w	8005c3a <_dtoa_r+0x88a>
 80057bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80057c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80057c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d0:	464c      	mov	r4, r9
 80057d2:	464f      	mov	r7, r9
 80057d4:	f280 8215 	bge.w	8005c02 <_dtoa_r+0x852>
 80057d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057dc:	2331      	movs	r3, #49	; 0x31
 80057de:	f808 3b01 	strb.w	r3, [r8], #1
 80057e2:	f10b 0b01 	add.w	fp, fp, #1
 80057e6:	e211      	b.n	8005c0c <_dtoa_r+0x85c>
 80057e8:	2202      	movs	r2, #2
 80057ea:	e780      	b.n	80056ee <_dtoa_r+0x33e>
 80057ec:	07cc      	lsls	r4, r1, #31
 80057ee:	d504      	bpl.n	80057fa <_dtoa_r+0x44a>
 80057f0:	ed90 6b00 	vldr	d6, [r0]
 80057f4:	3201      	adds	r2, #1
 80057f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057fa:	1049      	asrs	r1, r1, #1
 80057fc:	3008      	adds	r0, #8
 80057fe:	e777      	b.n	80056f0 <_dtoa_r+0x340>
 8005800:	d022      	beq.n	8005848 <_dtoa_r+0x498>
 8005802:	f1cb 0100 	rsb	r1, fp, #0
 8005806:	4a70      	ldr	r2, [pc, #448]	; (80059c8 <_dtoa_r+0x618>)
 8005808:	f001 000f 	and.w	r0, r1, #15
 800580c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005810:	ed92 7b00 	vldr	d7, [r2]
 8005814:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800581c:	486b      	ldr	r0, [pc, #428]	; (80059cc <_dtoa_r+0x61c>)
 800581e:	1109      	asrs	r1, r1, #4
 8005820:	2400      	movs	r4, #0
 8005822:	2202      	movs	r2, #2
 8005824:	b929      	cbnz	r1, 8005832 <_dtoa_r+0x482>
 8005826:	2c00      	cmp	r4, #0
 8005828:	f43f af6a 	beq.w	8005700 <_dtoa_r+0x350>
 800582c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005830:	e766      	b.n	8005700 <_dtoa_r+0x350>
 8005832:	07cf      	lsls	r7, r1, #31
 8005834:	d505      	bpl.n	8005842 <_dtoa_r+0x492>
 8005836:	ed90 6b00 	vldr	d6, [r0]
 800583a:	3201      	adds	r2, #1
 800583c:	2401      	movs	r4, #1
 800583e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005842:	1049      	asrs	r1, r1, #1
 8005844:	3008      	adds	r0, #8
 8005846:	e7ed      	b.n	8005824 <_dtoa_r+0x474>
 8005848:	2202      	movs	r2, #2
 800584a:	e759      	b.n	8005700 <_dtoa_r+0x350>
 800584c:	465f      	mov	r7, fp
 800584e:	4648      	mov	r0, r9
 8005850:	e775      	b.n	800573e <_dtoa_r+0x38e>
 8005852:	ec42 1b17 	vmov	d7, r1, r2
 8005856:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <_dtoa_r+0x618>)
 8005858:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800585c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005860:	9a01      	ldr	r2, [sp, #4]
 8005862:	1814      	adds	r4, r2, r0
 8005864:	9a07      	ldr	r2, [sp, #28]
 8005866:	b352      	cbz	r2, 80058be <_dtoa_r+0x50e>
 8005868:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800586c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005870:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005874:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800587c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005880:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005884:	ee14 2a90 	vmov	r2, s9
 8005888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800588c:	3230      	adds	r2, #48	; 0x30
 800588e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589a:	f808 2b01 	strb.w	r2, [r8], #1
 800589e:	d439      	bmi.n	8005914 <_dtoa_r+0x564>
 80058a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80058a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80058a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ac:	d472      	bmi.n	8005994 <_dtoa_r+0x5e4>
 80058ae:	45a0      	cmp	r8, r4
 80058b0:	f43f af6b 	beq.w	800578a <_dtoa_r+0x3da>
 80058b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80058b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80058bc:	e7e0      	b.n	8005880 <_dtoa_r+0x4d0>
 80058be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80058c6:	4621      	mov	r1, r4
 80058c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80058cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80058d0:	ee14 2a90 	vmov	r2, s9
 80058d4:	3230      	adds	r2, #48	; 0x30
 80058d6:	f808 2b01 	strb.w	r2, [r8], #1
 80058da:	45a0      	cmp	r8, r4
 80058dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80058e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80058e4:	d118      	bne.n	8005918 <_dtoa_r+0x568>
 80058e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80058ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80058ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80058f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f6:	dc4d      	bgt.n	8005994 <_dtoa_r+0x5e4>
 80058f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005904:	f57f af41 	bpl.w	800578a <_dtoa_r+0x3da>
 8005908:	4688      	mov	r8, r1
 800590a:	3901      	subs	r1, #1
 800590c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d0f9      	beq.n	8005908 <_dtoa_r+0x558>
 8005914:	46bb      	mov	fp, r7
 8005916:	e02a      	b.n	800596e <_dtoa_r+0x5be>
 8005918:	ee26 6b03 	vmul.f64	d6, d6, d3
 800591c:	e7d6      	b.n	80058cc <_dtoa_r+0x51c>
 800591e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005922:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005926:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800592a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800592e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005932:	ee15 3a10 	vmov	r3, s10
 8005936:	3330      	adds	r3, #48	; 0x30
 8005938:	f808 3b01 	strb.w	r3, [r8], #1
 800593c:	9b01      	ldr	r3, [sp, #4]
 800593e:	eba8 0303 	sub.w	r3, r8, r3
 8005942:	4599      	cmp	r9, r3
 8005944:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005948:	eea3 7b46 	vfms.f64	d7, d3, d6
 800594c:	d133      	bne.n	80059b6 <_dtoa_r+0x606>
 800594e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595a:	dc1a      	bgt.n	8005992 <_dtoa_r+0x5e2>
 800595c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	d103      	bne.n	800596e <_dtoa_r+0x5be>
 8005966:	ee15 3a10 	vmov	r3, s10
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d411      	bmi.n	8005992 <_dtoa_r+0x5e2>
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	f000 fd05 	bl	8006380 <_Bfree>
 8005976:	2300      	movs	r3, #0
 8005978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800597a:	f888 3000 	strb.w	r3, [r8]
 800597e:	f10b 0301 	add.w	r3, fp, #1
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005986:	2b00      	cmp	r3, #0
 8005988:	f43f ad61 	beq.w	800544e <_dtoa_r+0x9e>
 800598c:	f8c3 8000 	str.w	r8, [r3]
 8005990:	e55d      	b.n	800544e <_dtoa_r+0x9e>
 8005992:	465f      	mov	r7, fp
 8005994:	4643      	mov	r3, r8
 8005996:	4698      	mov	r8, r3
 8005998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800599c:	2a39      	cmp	r2, #57	; 0x39
 800599e:	d106      	bne.n	80059ae <_dtoa_r+0x5fe>
 80059a0:	9a01      	ldr	r2, [sp, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1f7      	bne.n	8005996 <_dtoa_r+0x5e6>
 80059a6:	9901      	ldr	r1, [sp, #4]
 80059a8:	2230      	movs	r2, #48	; 0x30
 80059aa:	3701      	adds	r7, #1
 80059ac:	700a      	strb	r2, [r1, #0]
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	3201      	adds	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e7ae      	b.n	8005914 <_dtoa_r+0x564>
 80059b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80059ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d1b2      	bne.n	800592a <_dtoa_r+0x57a>
 80059c4:	e7d3      	b.n	800596e <_dtoa_r+0x5be>
 80059c6:	bf00      	nop
 80059c8:	080076e0 	.word	0x080076e0
 80059cc:	080076b8 	.word	0x080076b8
 80059d0:	9907      	ldr	r1, [sp, #28]
 80059d2:	2900      	cmp	r1, #0
 80059d4:	f000 80d0 	beq.w	8005b78 <_dtoa_r+0x7c8>
 80059d8:	9906      	ldr	r1, [sp, #24]
 80059da:	2901      	cmp	r1, #1
 80059dc:	f300 80b4 	bgt.w	8005b48 <_dtoa_r+0x798>
 80059e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059e2:	2900      	cmp	r1, #0
 80059e4:	f000 80ac 	beq.w	8005b40 <_dtoa_r+0x790>
 80059e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80059f0:	461c      	mov	r4, r3
 80059f2:	930a      	str	r3, [sp, #40]	; 0x28
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	9b05      	ldr	r3, [sp, #20]
 80059fc:	2101      	movs	r1, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	4630      	mov	r0, r6
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	f000 fd74 	bl	80064f0 <__i2b>
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	f1b8 0f00 	cmp.w	r8, #0
 8005a10:	dd0d      	ble.n	8005a2e <_dtoa_r+0x67e>
 8005a12:	9a05      	ldr	r2, [sp, #20]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	dd0a      	ble.n	8005a2e <_dtoa_r+0x67e>
 8005a18:	4542      	cmp	r2, r8
 8005a1a:	9904      	ldr	r1, [sp, #16]
 8005a1c:	bfa8      	it	ge
 8005a1e:	4642      	movge	r2, r8
 8005a20:	1a89      	subs	r1, r1, r2
 8005a22:	9104      	str	r1, [sp, #16]
 8005a24:	9905      	ldr	r1, [sp, #20]
 8005a26:	eba8 0802 	sub.w	r8, r8, r2
 8005a2a:	1a8a      	subs	r2, r1, r2
 8005a2c:	9205      	str	r2, [sp, #20]
 8005a2e:	b303      	cbz	r3, 8005a72 <_dtoa_r+0x6c2>
 8005a30:	9a07      	ldr	r2, [sp, #28]
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	f000 80a5 	beq.w	8005b82 <_dtoa_r+0x7d2>
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	dd13      	ble.n	8005a64 <_dtoa_r+0x6b4>
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4630      	mov	r0, r6
 8005a42:	930d      	str	r3, [sp, #52]	; 0x34
 8005a44:	f000 fe14 	bl	8006670 <__pow5mult>
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 fd64 	bl	800651c <__multiply>
 8005a54:	4629      	mov	r1, r5
 8005a56:	900a      	str	r0, [sp, #40]	; 0x28
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fc91 	bl	8006380 <_Bfree>
 8005a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a62:	4615      	mov	r5, r2
 8005a64:	1b1a      	subs	r2, r3, r4
 8005a66:	d004      	beq.n	8005a72 <_dtoa_r+0x6c2>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 fe00 	bl	8006670 <__pow5mult>
 8005a70:	4605      	mov	r5, r0
 8005a72:	2101      	movs	r1, #1
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 fd3b 	bl	80064f0 <__i2b>
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	f340 8081 	ble.w	8005b86 <_dtoa_r+0x7d6>
 8005a84:	461a      	mov	r2, r3
 8005a86:	4601      	mov	r1, r0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 fdf1 	bl	8006670 <__pow5mult>
 8005a8e:	9b06      	ldr	r3, [sp, #24]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	4604      	mov	r4, r0
 8005a94:	dd7a      	ble.n	8005b8c <_dtoa_r+0x7dc>
 8005a96:	2300      	movs	r3, #0
 8005a98:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005aa0:	6910      	ldr	r0, [r2, #16]
 8005aa2:	f000 fcd5 	bl	8006450 <__hi0bits>
 8005aa6:	f1c0 0020 	rsb	r0, r0, #32
 8005aaa:	9b05      	ldr	r3, [sp, #20]
 8005aac:	4418      	add	r0, r3
 8005aae:	f010 001f 	ands.w	r0, r0, #31
 8005ab2:	f000 808c 	beq.w	8005bce <_dtoa_r+0x81e>
 8005ab6:	f1c0 0220 	rsb	r2, r0, #32
 8005aba:	2a04      	cmp	r2, #4
 8005abc:	f340 8085 	ble.w	8005bca <_dtoa_r+0x81a>
 8005ac0:	f1c0 001c 	rsb	r0, r0, #28
 8005ac4:	9b04      	ldr	r3, [sp, #16]
 8005ac6:	4403      	add	r3, r0
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	4403      	add	r3, r0
 8005ace:	4480      	add	r8, r0
 8005ad0:	9305      	str	r3, [sp, #20]
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd05      	ble.n	8005ae4 <_dtoa_r+0x734>
 8005ad8:	4629      	mov	r1, r5
 8005ada:	461a      	mov	r2, r3
 8005adc:	4630      	mov	r0, r6
 8005ade:	f000 fe21 	bl	8006724 <__lshift>
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	9b05      	ldr	r3, [sp, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd05      	ble.n	8005af6 <_dtoa_r+0x746>
 8005aea:	4621      	mov	r1, r4
 8005aec:	461a      	mov	r2, r3
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 fe18 	bl	8006724 <__lshift>
 8005af4:	4604      	mov	r4, r0
 8005af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d06a      	beq.n	8005bd2 <_dtoa_r+0x822>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fe80 	bl	8006804 <__mcmp>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	da64      	bge.n	8005bd2 <_dtoa_r+0x822>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	220a      	movs	r2, #10
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 fc58 	bl	80063c4 <__multadd>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8191 	beq.w	8005e44 <_dtoa_r+0xa94>
 8005b22:	4639      	mov	r1, r7
 8005b24:	2300      	movs	r3, #0
 8005b26:	220a      	movs	r2, #10
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f000 fc4b 	bl	80063c4 <__multadd>
 8005b2e:	f1ba 0f00 	cmp.w	sl, #0
 8005b32:	4607      	mov	r7, r0
 8005b34:	f300 808d 	bgt.w	8005c52 <_dtoa_r+0x8a2>
 8005b38:	9b06      	ldr	r3, [sp, #24]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	dc50      	bgt.n	8005be0 <_dtoa_r+0x830>
 8005b3e:	e088      	b.n	8005c52 <_dtoa_r+0x8a2>
 8005b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b46:	e751      	b.n	80059ec <_dtoa_r+0x63c>
 8005b48:	f109 34ff 	add.w	r4, r9, #4294967295
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	bfbf      	itttt	lt
 8005b50:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8005b52:	1ae3      	sublt	r3, r4, r3
 8005b54:	18d2      	addlt	r2, r2, r3
 8005b56:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005b58:	bfb6      	itet	lt
 8005b5a:	4623      	movlt	r3, r4
 8005b5c:	1b1c      	subge	r4, r3, r4
 8005b5e:	2400      	movlt	r4, #0
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	bfb5      	itete	lt
 8005b66:	9a04      	ldrlt	r2, [sp, #16]
 8005b68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005b6c:	eba2 0809 	sublt.w	r8, r2, r9
 8005b70:	464a      	movge	r2, r9
 8005b72:	bfb8      	it	lt
 8005b74:	2200      	movlt	r2, #0
 8005b76:	e73c      	b.n	80059f2 <_dtoa_r+0x642>
 8005b78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005b7c:	9f07      	ldr	r7, [sp, #28]
 8005b7e:	461c      	mov	r4, r3
 8005b80:	e744      	b.n	8005a0c <_dtoa_r+0x65c>
 8005b82:	461a      	mov	r2, r3
 8005b84:	e770      	b.n	8005a68 <_dtoa_r+0x6b8>
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	dc18      	bgt.n	8005bbe <_dtoa_r+0x80e>
 8005b8c:	9b02      	ldr	r3, [sp, #8]
 8005b8e:	b9b3      	cbnz	r3, 8005bbe <_dtoa_r+0x80e>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005b96:	b9a2      	cbnz	r2, 8005bc2 <_dtoa_r+0x812>
 8005b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b9c:	0d12      	lsrs	r2, r2, #20
 8005b9e:	0512      	lsls	r2, r2, #20
 8005ba0:	b18a      	cbz	r2, 8005bc6 <_dtoa_r+0x816>
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	9b05      	ldr	r3, [sp, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f47f af70 	bne.w	8005a9a <_dtoa_r+0x6ea>
 8005bba:	2001      	movs	r0, #1
 8005bbc:	e775      	b.n	8005aaa <_dtoa_r+0x6fa>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e7f6      	b.n	8005bb0 <_dtoa_r+0x800>
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	e7f4      	b.n	8005bb0 <_dtoa_r+0x800>
 8005bc6:	920a      	str	r2, [sp, #40]	; 0x28
 8005bc8:	e7f3      	b.n	8005bb2 <_dtoa_r+0x802>
 8005bca:	d082      	beq.n	8005ad2 <_dtoa_r+0x722>
 8005bcc:	4610      	mov	r0, r2
 8005bce:	301c      	adds	r0, #28
 8005bd0:	e778      	b.n	8005ac4 <_dtoa_r+0x714>
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	dc37      	bgt.n	8005c48 <_dtoa_r+0x898>
 8005bd8:	9b06      	ldr	r3, [sp, #24]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	dd34      	ble.n	8005c48 <_dtoa_r+0x898>
 8005bde:	46ca      	mov	sl, r9
 8005be0:	f1ba 0f00 	cmp.w	sl, #0
 8005be4:	d10d      	bne.n	8005c02 <_dtoa_r+0x852>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4653      	mov	r3, sl
 8005bea:	2205      	movs	r2, #5
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 fbe9 	bl	80063c4 <__multadd>
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 fe04 	bl	8006804 <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f73f adeb 	bgt.w	80057d8 <_dtoa_r+0x428>
 8005c02:	9b08      	ldr	r3, [sp, #32]
 8005c04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c08:	ea6f 0b03 	mvn.w	fp, r3
 8005c0c:	f04f 0900 	mov.w	r9, #0
 8005c10:	4621      	mov	r1, r4
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 fbb4 	bl	8006380 <_Bfree>
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	f43f aea8 	beq.w	800596e <_dtoa_r+0x5be>
 8005c1e:	f1b9 0f00 	cmp.w	r9, #0
 8005c22:	d005      	beq.n	8005c30 <_dtoa_r+0x880>
 8005c24:	45b9      	cmp	r9, r7
 8005c26:	d003      	beq.n	8005c30 <_dtoa_r+0x880>
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f000 fba8 	bl	8006380 <_Bfree>
 8005c30:	4639      	mov	r1, r7
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 fba4 	bl	8006380 <_Bfree>
 8005c38:	e699      	b.n	800596e <_dtoa_r+0x5be>
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	4627      	mov	r7, r4
 8005c3e:	e7e0      	b.n	8005c02 <_dtoa_r+0x852>
 8005c40:	46bb      	mov	fp, r7
 8005c42:	4604      	mov	r4, r0
 8005c44:	4607      	mov	r7, r0
 8005c46:	e5c7      	b.n	80057d8 <_dtoa_r+0x428>
 8005c48:	9b07      	ldr	r3, [sp, #28]
 8005c4a:	46ca      	mov	sl, r9
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8100 	beq.w	8005e52 <_dtoa_r+0xaa2>
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	dd05      	ble.n	8005c64 <_dtoa_r+0x8b4>
 8005c58:	4639      	mov	r1, r7
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 fd61 	bl	8006724 <__lshift>
 8005c62:	4607      	mov	r7, r0
 8005c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d05d      	beq.n	8005d26 <_dtoa_r+0x976>
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 fb47 	bl	8006300 <_Balloc>
 8005c72:	4680      	mov	r8, r0
 8005c74:	b928      	cbnz	r0, 8005c82 <_dtoa_r+0x8d2>
 8005c76:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <_dtoa_r+0xad0>)
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c7e:	f7ff bbaf 	b.w	80053e0 <_dtoa_r+0x30>
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	3202      	adds	r2, #2
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	f107 010c 	add.w	r1, r7, #12
 8005c8c:	300c      	adds	r0, #12
 8005c8e:	f000 fb29 	bl	80062e4 <memcpy>
 8005c92:	2201      	movs	r2, #1
 8005c94:	4641      	mov	r1, r8
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 fd44 	bl	8006724 <__lshift>
 8005c9c:	9b01      	ldr	r3, [sp, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	4453      	add	r3, sl
 8005ca6:	9308      	str	r3, [sp, #32]
 8005ca8:	9b02      	ldr	r3, [sp, #8]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	46b9      	mov	r9, r7
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4628      	mov	r0, r5
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	f7ff faeb 	bl	8005298 <quorem>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	3330      	adds	r3, #48	; 0x30
 8005cc6:	9005      	str	r0, [sp, #20]
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4628      	mov	r0, r5
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	f000 fd99 	bl	8006804 <__mcmp>
 8005cd2:	463a      	mov	r2, r7
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 fdaf 	bl	800683c <__mdiff>
 8005cde:	68c2      	ldr	r2, [r0, #12]
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	bb0a      	cbnz	r2, 8005d2a <_dtoa_r+0x97a>
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 fd8b 	bl	8006804 <__mcmp>
 8005cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005cfa:	f000 fb41 	bl	8006380 <_Bfree>
 8005cfe:	9b06      	ldr	r3, [sp, #24]
 8005d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d02:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005d06:	ea43 0102 	orr.w	r1, r3, r2
 8005d0a:	9b07      	ldr	r3, [sp, #28]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	d10d      	bne.n	8005d2e <_dtoa_r+0x97e>
 8005d12:	2b39      	cmp	r3, #57	; 0x39
 8005d14:	d029      	beq.n	8005d6a <_dtoa_r+0x9ba>
 8005d16:	f1ba 0f00 	cmp.w	sl, #0
 8005d1a:	dd01      	ble.n	8005d20 <_dtoa_r+0x970>
 8005d1c:	9b05      	ldr	r3, [sp, #20]
 8005d1e:	3331      	adds	r3, #49	; 0x31
 8005d20:	9a02      	ldr	r2, [sp, #8]
 8005d22:	7013      	strb	r3, [r2, #0]
 8005d24:	e774      	b.n	8005c10 <_dtoa_r+0x860>
 8005d26:	4638      	mov	r0, r7
 8005d28:	e7b8      	b.n	8005c9c <_dtoa_r+0x8ec>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	e7e1      	b.n	8005cf2 <_dtoa_r+0x942>
 8005d2e:	f1ba 0f00 	cmp.w	sl, #0
 8005d32:	db06      	blt.n	8005d42 <_dtoa_r+0x992>
 8005d34:	9906      	ldr	r1, [sp, #24]
 8005d36:	ea41 0a0a 	orr.w	sl, r1, sl
 8005d3a:	9907      	ldr	r1, [sp, #28]
 8005d3c:	ea5a 0101 	orrs.w	r1, sl, r1
 8005d40:	d120      	bne.n	8005d84 <_dtoa_r+0x9d4>
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	ddec      	ble.n	8005d20 <_dtoa_r+0x970>
 8005d46:	4629      	mov	r1, r5
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	f000 fce9 	bl	8006724 <__lshift>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4605      	mov	r5, r0
 8005d56:	f000 fd55 	bl	8006804 <__mcmp>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	dc02      	bgt.n	8005d66 <_dtoa_r+0x9b6>
 8005d60:	d1de      	bne.n	8005d20 <_dtoa_r+0x970>
 8005d62:	07da      	lsls	r2, r3, #31
 8005d64:	d5dc      	bpl.n	8005d20 <_dtoa_r+0x970>
 8005d66:	2b39      	cmp	r3, #57	; 0x39
 8005d68:	d1d8      	bne.n	8005d1c <_dtoa_r+0x96c>
 8005d6a:	9a02      	ldr	r2, [sp, #8]
 8005d6c:	2339      	movs	r3, #57	; 0x39
 8005d6e:	7013      	strb	r3, [r2, #0]
 8005d70:	4643      	mov	r3, r8
 8005d72:	4698      	mov	r8, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005d7a:	2a39      	cmp	r2, #57	; 0x39
 8005d7c:	d051      	beq.n	8005e22 <_dtoa_r+0xa72>
 8005d7e:	3201      	adds	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e745      	b.n	8005c10 <_dtoa_r+0x860>
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	dd03      	ble.n	8005d90 <_dtoa_r+0x9e0>
 8005d88:	2b39      	cmp	r3, #57	; 0x39
 8005d8a:	d0ee      	beq.n	8005d6a <_dtoa_r+0x9ba>
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	e7c7      	b.n	8005d20 <_dtoa_r+0x970>
 8005d90:	9a04      	ldr	r2, [sp, #16]
 8005d92:	9908      	ldr	r1, [sp, #32]
 8005d94:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d98:	428a      	cmp	r2, r1
 8005d9a:	d02b      	beq.n	8005df4 <_dtoa_r+0xa44>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	2300      	movs	r3, #0
 8005da0:	220a      	movs	r2, #10
 8005da2:	4630      	mov	r0, r6
 8005da4:	f000 fb0e 	bl	80063c4 <__multadd>
 8005da8:	45b9      	cmp	r9, r7
 8005daa:	4605      	mov	r5, r0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	f04f 020a 	mov.w	r2, #10
 8005db4:	4649      	mov	r1, r9
 8005db6:	4630      	mov	r0, r6
 8005db8:	d107      	bne.n	8005dca <_dtoa_r+0xa1a>
 8005dba:	f000 fb03 	bl	80063c4 <__multadd>
 8005dbe:	4681      	mov	r9, r0
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	e774      	b.n	8005cb4 <_dtoa_r+0x904>
 8005dca:	f000 fafb 	bl	80063c4 <__multadd>
 8005dce:	4639      	mov	r1, r7
 8005dd0:	4681      	mov	r9, r0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	220a      	movs	r2, #10
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 faf4 	bl	80063c4 <__multadd>
 8005ddc:	4607      	mov	r7, r0
 8005dde:	e7f0      	b.n	8005dc2 <_dtoa_r+0xa12>
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	9a01      	ldr	r2, [sp, #4]
 8005de6:	bfcc      	ite	gt
 8005de8:	46d0      	movgt	r8, sl
 8005dea:	f04f 0801 	movle.w	r8, #1
 8005dee:	4490      	add	r8, r2
 8005df0:	f04f 0900 	mov.w	r9, #0
 8005df4:	4629      	mov	r1, r5
 8005df6:	2201      	movs	r2, #1
 8005df8:	4630      	mov	r0, r6
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	f000 fc92 	bl	8006724 <__lshift>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4605      	mov	r5, r0
 8005e04:	f000 fcfe 	bl	8006804 <__mcmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dcb1      	bgt.n	8005d70 <_dtoa_r+0x9c0>
 8005e0c:	d102      	bne.n	8005e14 <_dtoa_r+0xa64>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	07db      	lsls	r3, r3, #31
 8005e12:	d4ad      	bmi.n	8005d70 <_dtoa_r+0x9c0>
 8005e14:	4643      	mov	r3, r8
 8005e16:	4698      	mov	r8, r3
 8005e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e1c:	2a30      	cmp	r2, #48	; 0x30
 8005e1e:	d0fa      	beq.n	8005e16 <_dtoa_r+0xa66>
 8005e20:	e6f6      	b.n	8005c10 <_dtoa_r+0x860>
 8005e22:	9a01      	ldr	r2, [sp, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d1a4      	bne.n	8005d72 <_dtoa_r+0x9c2>
 8005e28:	f10b 0b01 	add.w	fp, fp, #1
 8005e2c:	2331      	movs	r3, #49	; 0x31
 8005e2e:	e778      	b.n	8005d22 <_dtoa_r+0x972>
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <_dtoa_r+0xad4>)
 8005e32:	f7ff bb27 	b.w	8005484 <_dtoa_r+0xd4>
 8005e36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f47f ab03 	bne.w	8005444 <_dtoa_r+0x94>
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <_dtoa_r+0xad8>)
 8005e40:	f7ff bb20 	b.w	8005484 <_dtoa_r+0xd4>
 8005e44:	f1ba 0f00 	cmp.w	sl, #0
 8005e48:	dc03      	bgt.n	8005e52 <_dtoa_r+0xaa2>
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f73f aec7 	bgt.w	8005be0 <_dtoa_r+0x830>
 8005e52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e56:	4621      	mov	r1, r4
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f7ff fa1d 	bl	8005298 <quorem>
 8005e5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e62:	f808 3b01 	strb.w	r3, [r8], #1
 8005e66:	9a01      	ldr	r2, [sp, #4]
 8005e68:	eba8 0202 	sub.w	r2, r8, r2
 8005e6c:	4592      	cmp	sl, r2
 8005e6e:	ddb7      	ble.n	8005de0 <_dtoa_r+0xa30>
 8005e70:	4629      	mov	r1, r5
 8005e72:	2300      	movs	r3, #0
 8005e74:	220a      	movs	r2, #10
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 faa4 	bl	80063c4 <__multadd>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	e7ea      	b.n	8005e56 <_dtoa_r+0xaa6>
 8005e80:	080075e8 	.word	0x080075e8
 8005e84:	08007520 	.word	0x08007520
 8005e88:	08007569 	.word	0x08007569

08005e8c <__sflush_r>:
 8005e8c:	898a      	ldrh	r2, [r1, #12]
 8005e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	4605      	mov	r5, r0
 8005e94:	0710      	lsls	r0, r2, #28
 8005e96:	460c      	mov	r4, r1
 8005e98:	d458      	bmi.n	8005f4c <__sflush_r+0xc0>
 8005e9a:	684b      	ldr	r3, [r1, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dc05      	bgt.n	8005eac <__sflush_r+0x20>
 8005ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dc02      	bgt.n	8005eac <__sflush_r+0x20>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	d0f9      	beq.n	8005ea6 <__sflush_r+0x1a>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eb8:	682f      	ldr	r7, [r5, #0]
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	d032      	beq.n	8005f24 <__sflush_r+0x98>
 8005ebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	075a      	lsls	r2, r3, #29
 8005ec4:	d505      	bpl.n	8005ed2 <__sflush_r+0x46>
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	1ac0      	subs	r0, r0, r3
 8005eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ecc:	b10b      	cbz	r3, 8005ed2 <__sflush_r+0x46>
 8005ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ed0:	1ac0      	subs	r0, r0, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed8:	6a21      	ldr	r1, [r4, #32]
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b0      	blx	r6
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	d106      	bne.n	8005ef2 <__sflush_r+0x66>
 8005ee4:	6829      	ldr	r1, [r5, #0]
 8005ee6:	291d      	cmp	r1, #29
 8005ee8:	d82c      	bhi.n	8005f44 <__sflush_r+0xb8>
 8005eea:	4a2a      	ldr	r2, [pc, #168]	; (8005f94 <__sflush_r+0x108>)
 8005eec:	40ca      	lsrs	r2, r1
 8005eee:	07d6      	lsls	r6, r2, #31
 8005ef0:	d528      	bpl.n	8005f44 <__sflush_r+0xb8>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6062      	str	r2, [r4, #4]
 8005ef6:	04d9      	lsls	r1, r3, #19
 8005ef8:	6922      	ldr	r2, [r4, #16]
 8005efa:	6022      	str	r2, [r4, #0]
 8005efc:	d504      	bpl.n	8005f08 <__sflush_r+0x7c>
 8005efe:	1c42      	adds	r2, r0, #1
 8005f00:	d101      	bne.n	8005f06 <__sflush_r+0x7a>
 8005f02:	682b      	ldr	r3, [r5, #0]
 8005f04:	b903      	cbnz	r3, 8005f08 <__sflush_r+0x7c>
 8005f06:	6560      	str	r0, [r4, #84]	; 0x54
 8005f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f0a:	602f      	str	r7, [r5, #0]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d0ca      	beq.n	8005ea6 <__sflush_r+0x1a>
 8005f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d002      	beq.n	8005f1e <__sflush_r+0x92>
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 fd8b 	bl	8006a34 <_free_r>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6360      	str	r0, [r4, #52]	; 0x34
 8005f22:	e7c1      	b.n	8005ea8 <__sflush_r+0x1c>
 8005f24:	6a21      	ldr	r1, [r4, #32]
 8005f26:	2301      	movs	r3, #1
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b0      	blx	r6
 8005f2c:	1c41      	adds	r1, r0, #1
 8005f2e:	d1c7      	bne.n	8005ec0 <__sflush_r+0x34>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0c4      	beq.n	8005ec0 <__sflush_r+0x34>
 8005f36:	2b1d      	cmp	r3, #29
 8005f38:	d001      	beq.n	8005f3e <__sflush_r+0xb2>
 8005f3a:	2b16      	cmp	r3, #22
 8005f3c:	d101      	bne.n	8005f42 <__sflush_r+0xb6>
 8005f3e:	602f      	str	r7, [r5, #0]
 8005f40:	e7b1      	b.n	8005ea6 <__sflush_r+0x1a>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	e7ad      	b.n	8005ea8 <__sflush_r+0x1c>
 8005f4c:	690f      	ldr	r7, [r1, #16]
 8005f4e:	2f00      	cmp	r7, #0
 8005f50:	d0a9      	beq.n	8005ea6 <__sflush_r+0x1a>
 8005f52:	0793      	lsls	r3, r2, #30
 8005f54:	680e      	ldr	r6, [r1, #0]
 8005f56:	bf08      	it	eq
 8005f58:	694b      	ldreq	r3, [r1, #20]
 8005f5a:	600f      	str	r7, [r1, #0]
 8005f5c:	bf18      	it	ne
 8005f5e:	2300      	movne	r3, #0
 8005f60:	eba6 0807 	sub.w	r8, r6, r7
 8005f64:	608b      	str	r3, [r1, #8]
 8005f66:	f1b8 0f00 	cmp.w	r8, #0
 8005f6a:	dd9c      	ble.n	8005ea6 <__sflush_r+0x1a>
 8005f6c:	6a21      	ldr	r1, [r4, #32]
 8005f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f70:	4643      	mov	r3, r8
 8005f72:	463a      	mov	r2, r7
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b0      	blx	r6
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	dc06      	bgt.n	8005f8a <__sflush_r+0xfe>
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e78e      	b.n	8005ea8 <__sflush_r+0x1c>
 8005f8a:	4407      	add	r7, r0
 8005f8c:	eba8 0800 	sub.w	r8, r8, r0
 8005f90:	e7e9      	b.n	8005f66 <__sflush_r+0xda>
 8005f92:	bf00      	nop
 8005f94:	20400001 	.word	0x20400001

08005f98 <_fflush_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	690b      	ldr	r3, [r1, #16]
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	b913      	cbnz	r3, 8005fa8 <_fflush_r+0x10>
 8005fa2:	2500      	movs	r5, #0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	b118      	cbz	r0, 8005fb2 <_fflush_r+0x1a>
 8005faa:	6983      	ldr	r3, [r0, #24]
 8005fac:	b90b      	cbnz	r3, 8005fb2 <_fflush_r+0x1a>
 8005fae:	f000 f887 	bl	80060c0 <__sinit>
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <_fflush_r+0x6c>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	d11b      	bne.n	8005ff0 <_fflush_r+0x58>
 8005fb8:	686c      	ldr	r4, [r5, #4]
 8005fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ef      	beq.n	8005fa2 <_fflush_r+0xa>
 8005fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fc4:	07d0      	lsls	r0, r2, #31
 8005fc6:	d404      	bmi.n	8005fd2 <_fflush_r+0x3a>
 8005fc8:	0599      	lsls	r1, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_fflush_r+0x3a>
 8005fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fce:	f000 f91a 	bl	8006206 <__retarget_lock_acquire_recursive>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7ff ff59 	bl	8005e8c <__sflush_r>
 8005fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fdc:	07da      	lsls	r2, r3, #31
 8005fde:	4605      	mov	r5, r0
 8005fe0:	d4e0      	bmi.n	8005fa4 <_fflush_r+0xc>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	d4dd      	bmi.n	8005fa4 <_fflush_r+0xc>
 8005fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fea:	f000 f90d 	bl	8006208 <__retarget_lock_release_recursive>
 8005fee:	e7d9      	b.n	8005fa4 <_fflush_r+0xc>
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <_fflush_r+0x70>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d101      	bne.n	8005ffa <_fflush_r+0x62>
 8005ff6:	68ac      	ldr	r4, [r5, #8]
 8005ff8:	e7df      	b.n	8005fba <_fflush_r+0x22>
 8005ffa:	4b04      	ldr	r3, [pc, #16]	; (800600c <_fflush_r+0x74>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	bf08      	it	eq
 8006000:	68ec      	ldreq	r4, [r5, #12]
 8006002:	e7da      	b.n	8005fba <_fflush_r+0x22>
 8006004:	0800761c 	.word	0x0800761c
 8006008:	0800763c 	.word	0x0800763c
 800600c:	080075fc 	.word	0x080075fc

08006010 <std>:
 8006010:	2300      	movs	r3, #0
 8006012:	b510      	push	{r4, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	e9c0 3300 	strd	r3, r3, [r0]
 800601a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601e:	6083      	str	r3, [r0, #8]
 8006020:	8181      	strh	r1, [r0, #12]
 8006022:	6643      	str	r3, [r0, #100]	; 0x64
 8006024:	81c2      	strh	r2, [r0, #14]
 8006026:	6183      	str	r3, [r0, #24]
 8006028:	4619      	mov	r1, r3
 800602a:	2208      	movs	r2, #8
 800602c:	305c      	adds	r0, #92	; 0x5c
 800602e:	f7fe fa91 	bl	8004554 <memset>
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x38>)
 8006034:	6263      	str	r3, [r4, #36]	; 0x24
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x3c>)
 8006038:	62a3      	str	r3, [r4, #40]	; 0x28
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <std+0x40>)
 800603c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <std+0x44>)
 8006040:	6224      	str	r4, [r4, #32]
 8006042:	6323      	str	r3, [r4, #48]	; 0x30
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	08006ec9 	.word	0x08006ec9
 800604c:	08006eeb 	.word	0x08006eeb
 8006050:	08006f23 	.word	0x08006f23
 8006054:	08006f47 	.word	0x08006f47

08006058 <_cleanup_r>:
 8006058:	4901      	ldr	r1, [pc, #4]	; (8006060 <_cleanup_r+0x8>)
 800605a:	f000 b8af 	b.w	80061bc <_fwalk_reent>
 800605e:	bf00      	nop
 8006060:	08005f99 	.word	0x08005f99

08006064 <__sfmoreglue>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	2268      	movs	r2, #104	; 0x68
 8006068:	1e4d      	subs	r5, r1, #1
 800606a:	4355      	muls	r5, r2
 800606c:	460e      	mov	r6, r1
 800606e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006072:	f000 fd4b 	bl	8006b0c <_malloc_r>
 8006076:	4604      	mov	r4, r0
 8006078:	b140      	cbz	r0, 800608c <__sfmoreglue+0x28>
 800607a:	2100      	movs	r1, #0
 800607c:	e9c0 1600 	strd	r1, r6, [r0]
 8006080:	300c      	adds	r0, #12
 8006082:	60a0      	str	r0, [r4, #8]
 8006084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006088:	f7fe fa64 	bl	8004554 <memset>
 800608c:	4620      	mov	r0, r4
 800608e:	bd70      	pop	{r4, r5, r6, pc}

08006090 <__sfp_lock_acquire>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__sfp_lock_acquire+0x8>)
 8006092:	f000 b8b8 	b.w	8006206 <__retarget_lock_acquire_recursive>
 8006096:	bf00      	nop
 8006098:	2000032d 	.word	0x2000032d

0800609c <__sfp_lock_release>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__sfp_lock_release+0x8>)
 800609e:	f000 b8b3 	b.w	8006208 <__retarget_lock_release_recursive>
 80060a2:	bf00      	nop
 80060a4:	2000032d 	.word	0x2000032d

080060a8 <__sinit_lock_acquire>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sinit_lock_acquire+0x8>)
 80060aa:	f000 b8ac 	b.w	8006206 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	2000032e 	.word	0x2000032e

080060b4 <__sinit_lock_release>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sinit_lock_release+0x8>)
 80060b6:	f000 b8a7 	b.w	8006208 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	2000032e 	.word	0x2000032e

080060c0 <__sinit>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	f7ff fff0 	bl	80060a8 <__sinit_lock_acquire>
 80060c8:	69a3      	ldr	r3, [r4, #24]
 80060ca:	b11b      	cbz	r3, 80060d4 <__sinit+0x14>
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f7ff bff0 	b.w	80060b4 <__sinit_lock_release>
 80060d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060d8:	6523      	str	r3, [r4, #80]	; 0x50
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <__sinit+0x68>)
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <__sinit+0x6c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	bf04      	itt	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	61a3      	streq	r3, [r4, #24]
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f820 	bl	8006130 <__sfp>
 80060f0:	6060      	str	r0, [r4, #4]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 f81c 	bl	8006130 <__sfp>
 80060f8:	60a0      	str	r0, [r4, #8]
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f818 	bl	8006130 <__sfp>
 8006100:	2200      	movs	r2, #0
 8006102:	60e0      	str	r0, [r4, #12]
 8006104:	2104      	movs	r1, #4
 8006106:	6860      	ldr	r0, [r4, #4]
 8006108:	f7ff ff82 	bl	8006010 <std>
 800610c:	68a0      	ldr	r0, [r4, #8]
 800610e:	2201      	movs	r2, #1
 8006110:	2109      	movs	r1, #9
 8006112:	f7ff ff7d 	bl	8006010 <std>
 8006116:	68e0      	ldr	r0, [r4, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	2112      	movs	r1, #18
 800611c:	f7ff ff78 	bl	8006010 <std>
 8006120:	2301      	movs	r3, #1
 8006122:	61a3      	str	r3, [r4, #24]
 8006124:	e7d2      	b.n	80060cc <__sinit+0xc>
 8006126:	bf00      	nop
 8006128:	0800750c 	.word	0x0800750c
 800612c:	08006059 	.word	0x08006059

08006130 <__sfp>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	4607      	mov	r7, r0
 8006134:	f7ff ffac 	bl	8006090 <__sfp_lock_acquire>
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <__sfp+0x84>)
 800613a:	681e      	ldr	r6, [r3, #0]
 800613c:	69b3      	ldr	r3, [r6, #24]
 800613e:	b913      	cbnz	r3, 8006146 <__sfp+0x16>
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff ffbd 	bl	80060c0 <__sinit>
 8006146:	3648      	adds	r6, #72	; 0x48
 8006148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800614c:	3b01      	subs	r3, #1
 800614e:	d503      	bpl.n	8006158 <__sfp+0x28>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	b30b      	cbz	r3, 8006198 <__sfp+0x68>
 8006154:	6836      	ldr	r6, [r6, #0]
 8006156:	e7f7      	b.n	8006148 <__sfp+0x18>
 8006158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800615c:	b9d5      	cbnz	r5, 8006194 <__sfp+0x64>
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <__sfp+0x88>)
 8006160:	60e3      	str	r3, [r4, #12]
 8006162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006166:	6665      	str	r5, [r4, #100]	; 0x64
 8006168:	f000 f84c 	bl	8006204 <__retarget_lock_init_recursive>
 800616c:	f7ff ff96 	bl	800609c <__sfp_lock_release>
 8006170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006178:	6025      	str	r5, [r4, #0]
 800617a:	61a5      	str	r5, [r4, #24]
 800617c:	2208      	movs	r2, #8
 800617e:	4629      	mov	r1, r5
 8006180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006184:	f7fe f9e6 	bl	8004554 <memset>
 8006188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800618c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006190:	4620      	mov	r0, r4
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	3468      	adds	r4, #104	; 0x68
 8006196:	e7d9      	b.n	800614c <__sfp+0x1c>
 8006198:	2104      	movs	r1, #4
 800619a:	4638      	mov	r0, r7
 800619c:	f7ff ff62 	bl	8006064 <__sfmoreglue>
 80061a0:	4604      	mov	r4, r0
 80061a2:	6030      	str	r0, [r6, #0]
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d1d5      	bne.n	8006154 <__sfp+0x24>
 80061a8:	f7ff ff78 	bl	800609c <__sfp_lock_release>
 80061ac:	230c      	movs	r3, #12
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	e7ee      	b.n	8006190 <__sfp+0x60>
 80061b2:	bf00      	nop
 80061b4:	0800750c 	.word	0x0800750c
 80061b8:	ffff0001 	.word	0xffff0001

080061bc <_fwalk_reent>:
 80061bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c0:	4606      	mov	r6, r0
 80061c2:	4688      	mov	r8, r1
 80061c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c8:	2700      	movs	r7, #0
 80061ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ce:	f1b9 0901 	subs.w	r9, r9, #1
 80061d2:	d505      	bpl.n	80061e0 <_fwalk_reent+0x24>
 80061d4:	6824      	ldr	r4, [r4, #0]
 80061d6:	2c00      	cmp	r4, #0
 80061d8:	d1f7      	bne.n	80061ca <_fwalk_reent+0xe>
 80061da:	4638      	mov	r0, r7
 80061dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e0:	89ab      	ldrh	r3, [r5, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d907      	bls.n	80061f6 <_fwalk_reent+0x3a>
 80061e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ea:	3301      	adds	r3, #1
 80061ec:	d003      	beq.n	80061f6 <_fwalk_reent+0x3a>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4630      	mov	r0, r6
 80061f2:	47c0      	blx	r8
 80061f4:	4307      	orrs	r7, r0
 80061f6:	3568      	adds	r5, #104	; 0x68
 80061f8:	e7e9      	b.n	80061ce <_fwalk_reent+0x12>
	...

080061fc <_localeconv_r>:
 80061fc:	4800      	ldr	r0, [pc, #0]	; (8006200 <_localeconv_r+0x4>)
 80061fe:	4770      	bx	lr
 8006200:	20000160 	.word	0x20000160

08006204 <__retarget_lock_init_recursive>:
 8006204:	4770      	bx	lr

08006206 <__retarget_lock_acquire_recursive>:
 8006206:	4770      	bx	lr

08006208 <__retarget_lock_release_recursive>:
 8006208:	4770      	bx	lr

0800620a <__swhatbuf_r>:
 800620a:	b570      	push	{r4, r5, r6, lr}
 800620c:	460e      	mov	r6, r1
 800620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006212:	2900      	cmp	r1, #0
 8006214:	b096      	sub	sp, #88	; 0x58
 8006216:	4614      	mov	r4, r2
 8006218:	461d      	mov	r5, r3
 800621a:	da08      	bge.n	800622e <__swhatbuf_r+0x24>
 800621c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	602a      	str	r2, [r5, #0]
 8006224:	061a      	lsls	r2, r3, #24
 8006226:	d410      	bmi.n	800624a <__swhatbuf_r+0x40>
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	e00e      	b.n	800624c <__swhatbuf_r+0x42>
 800622e:	466a      	mov	r2, sp
 8006230:	f000 fee0 	bl	8006ff4 <_fstat_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	dbf1      	blt.n	800621c <__swhatbuf_r+0x12>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800623e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006242:	425a      	negs	r2, r3
 8006244:	415a      	adcs	r2, r3
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	e7ee      	b.n	8006228 <__swhatbuf_r+0x1e>
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	2000      	movs	r0, #0
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	b016      	add	sp, #88	; 0x58
 8006252:	bd70      	pop	{r4, r5, r6, pc}

08006254 <__smakebuf_r>:
 8006254:	898b      	ldrh	r3, [r1, #12]
 8006256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006258:	079d      	lsls	r5, r3, #30
 800625a:	4606      	mov	r6, r0
 800625c:	460c      	mov	r4, r1
 800625e:	d507      	bpl.n	8006270 <__smakebuf_r+0x1c>
 8006260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	2301      	movs	r3, #1
 800626a:	6163      	str	r3, [r4, #20]
 800626c:	b002      	add	sp, #8
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	ab01      	add	r3, sp, #4
 8006272:	466a      	mov	r2, sp
 8006274:	f7ff ffc9 	bl	800620a <__swhatbuf_r>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	4605      	mov	r5, r0
 800627c:	4630      	mov	r0, r6
 800627e:	f000 fc45 	bl	8006b0c <_malloc_r>
 8006282:	b948      	cbnz	r0, 8006298 <__smakebuf_r+0x44>
 8006284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006288:	059a      	lsls	r2, r3, #22
 800628a:	d4ef      	bmi.n	800626c <__smakebuf_r+0x18>
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	e7e3      	b.n	8006260 <__smakebuf_r+0xc>
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <__smakebuf_r+0x7c>)
 800629a:	62b3      	str	r3, [r6, #40]	; 0x28
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	6020      	str	r0, [r4, #0]
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	6163      	str	r3, [r4, #20]
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	6120      	str	r0, [r4, #16]
 80062ae:	b15b      	cbz	r3, 80062c8 <__smakebuf_r+0x74>
 80062b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 feaf 	bl	8007018 <_isatty_r>
 80062ba:	b128      	cbz	r0, 80062c8 <__smakebuf_r+0x74>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	89a0      	ldrh	r0, [r4, #12]
 80062ca:	4305      	orrs	r5, r0
 80062cc:	81a5      	strh	r5, [r4, #12]
 80062ce:	e7cd      	b.n	800626c <__smakebuf_r+0x18>
 80062d0:	08006059 	.word	0x08006059

080062d4 <malloc>:
 80062d4:	4b02      	ldr	r3, [pc, #8]	; (80062e0 <malloc+0xc>)
 80062d6:	4601      	mov	r1, r0
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	f000 bc17 	b.w	8006b0c <_malloc_r>
 80062de:	bf00      	nop
 80062e0:	2000000c 	.word	0x2000000c

080062e4 <memcpy>:
 80062e4:	440a      	add	r2, r1
 80062e6:	4291      	cmp	r1, r2
 80062e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ec:	d100      	bne.n	80062f0 <memcpy+0xc>
 80062ee:	4770      	bx	lr
 80062f0:	b510      	push	{r4, lr}
 80062f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fa:	4291      	cmp	r1, r2
 80062fc:	d1f9      	bne.n	80062f2 <memcpy+0xe>
 80062fe:	bd10      	pop	{r4, pc}

08006300 <_Balloc>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006304:	4604      	mov	r4, r0
 8006306:	460d      	mov	r5, r1
 8006308:	b976      	cbnz	r6, 8006328 <_Balloc+0x28>
 800630a:	2010      	movs	r0, #16
 800630c:	f7ff ffe2 	bl	80062d4 <malloc>
 8006310:	4602      	mov	r2, r0
 8006312:	6260      	str	r0, [r4, #36]	; 0x24
 8006314:	b920      	cbnz	r0, 8006320 <_Balloc+0x20>
 8006316:	4b18      	ldr	r3, [pc, #96]	; (8006378 <_Balloc+0x78>)
 8006318:	4818      	ldr	r0, [pc, #96]	; (800637c <_Balloc+0x7c>)
 800631a:	2166      	movs	r1, #102	; 0x66
 800631c:	f000 fe2a 	bl	8006f74 <__assert_func>
 8006320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006324:	6006      	str	r6, [r0, #0]
 8006326:	60c6      	str	r6, [r0, #12]
 8006328:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800632a:	68f3      	ldr	r3, [r6, #12]
 800632c:	b183      	cbz	r3, 8006350 <_Balloc+0x50>
 800632e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006336:	b9b8      	cbnz	r0, 8006368 <_Balloc+0x68>
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f605 	lsl.w	r6, r1, r5
 800633e:	1d72      	adds	r2, r6, #5
 8006340:	0092      	lsls	r2, r2, #2
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fb60 	bl	8006a08 <_calloc_r>
 8006348:	b160      	cbz	r0, 8006364 <_Balloc+0x64>
 800634a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800634e:	e00e      	b.n	800636e <_Balloc+0x6e>
 8006350:	2221      	movs	r2, #33	; 0x21
 8006352:	2104      	movs	r1, #4
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fb57 	bl	8006a08 <_calloc_r>
 800635a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800635c:	60f0      	str	r0, [r6, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e4      	bne.n	800632e <_Balloc+0x2e>
 8006364:	2000      	movs	r0, #0
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	6802      	ldr	r2, [r0, #0]
 800636a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800636e:	2300      	movs	r3, #0
 8006370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006374:	e7f7      	b.n	8006366 <_Balloc+0x66>
 8006376:	bf00      	nop
 8006378:	08007576 	.word	0x08007576
 800637c:	0800765c 	.word	0x0800765c

08006380 <_Bfree>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006384:	4605      	mov	r5, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b976      	cbnz	r6, 80063a8 <_Bfree+0x28>
 800638a:	2010      	movs	r0, #16
 800638c:	f7ff ffa2 	bl	80062d4 <malloc>
 8006390:	4602      	mov	r2, r0
 8006392:	6268      	str	r0, [r5, #36]	; 0x24
 8006394:	b920      	cbnz	r0, 80063a0 <_Bfree+0x20>
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <_Bfree+0x3c>)
 8006398:	4809      	ldr	r0, [pc, #36]	; (80063c0 <_Bfree+0x40>)
 800639a:	218a      	movs	r1, #138	; 0x8a
 800639c:	f000 fdea 	bl	8006f74 <__assert_func>
 80063a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a4:	6006      	str	r6, [r0, #0]
 80063a6:	60c6      	str	r6, [r0, #12]
 80063a8:	b13c      	cbz	r4, 80063ba <_Bfree+0x3a>
 80063aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063ac:	6862      	ldr	r2, [r4, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b4:	6021      	str	r1, [r4, #0]
 80063b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	08007576 	.word	0x08007576
 80063c0:	0800765c 	.word	0x0800765c

080063c4 <__multadd>:
 80063c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c8:	690d      	ldr	r5, [r1, #16]
 80063ca:	4607      	mov	r7, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	461e      	mov	r6, r3
 80063d0:	f101 0c14 	add.w	ip, r1, #20
 80063d4:	2000      	movs	r0, #0
 80063d6:	f8dc 3000 	ldr.w	r3, [ip]
 80063da:	b299      	uxth	r1, r3
 80063dc:	fb02 6101 	mla	r1, r2, r1, r6
 80063e0:	0c1e      	lsrs	r6, r3, #16
 80063e2:	0c0b      	lsrs	r3, r1, #16
 80063e4:	fb02 3306 	mla	r3, r2, r6, r3
 80063e8:	b289      	uxth	r1, r1
 80063ea:	3001      	adds	r0, #1
 80063ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063f0:	4285      	cmp	r5, r0
 80063f2:	f84c 1b04 	str.w	r1, [ip], #4
 80063f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063fa:	dcec      	bgt.n	80063d6 <__multadd+0x12>
 80063fc:	b30e      	cbz	r6, 8006442 <__multadd+0x7e>
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc19      	bgt.n	8006438 <__multadd+0x74>
 8006404:	6861      	ldr	r1, [r4, #4]
 8006406:	4638      	mov	r0, r7
 8006408:	3101      	adds	r1, #1
 800640a:	f7ff ff79 	bl	8006300 <_Balloc>
 800640e:	4680      	mov	r8, r0
 8006410:	b928      	cbnz	r0, 800641e <__multadd+0x5a>
 8006412:	4602      	mov	r2, r0
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <__multadd+0x84>)
 8006416:	480d      	ldr	r0, [pc, #52]	; (800644c <__multadd+0x88>)
 8006418:	21b5      	movs	r1, #181	; 0xb5
 800641a:	f000 fdab 	bl	8006f74 <__assert_func>
 800641e:	6922      	ldr	r2, [r4, #16]
 8006420:	3202      	adds	r2, #2
 8006422:	f104 010c 	add.w	r1, r4, #12
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	300c      	adds	r0, #12
 800642a:	f7ff ff5b 	bl	80062e4 <memcpy>
 800642e:	4621      	mov	r1, r4
 8006430:	4638      	mov	r0, r7
 8006432:	f7ff ffa5 	bl	8006380 <_Bfree>
 8006436:	4644      	mov	r4, r8
 8006438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800643c:	3501      	adds	r5, #1
 800643e:	615e      	str	r6, [r3, #20]
 8006440:	6125      	str	r5, [r4, #16]
 8006442:	4620      	mov	r0, r4
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	080075e8 	.word	0x080075e8
 800644c:	0800765c 	.word	0x0800765c

08006450 <__hi0bits>:
 8006450:	0c03      	lsrs	r3, r0, #16
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	b9d3      	cbnz	r3, 800648c <__hi0bits+0x3c>
 8006456:	0400      	lsls	r0, r0, #16
 8006458:	2310      	movs	r3, #16
 800645a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800645e:	bf04      	itt	eq
 8006460:	0200      	lsleq	r0, r0, #8
 8006462:	3308      	addeq	r3, #8
 8006464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006468:	bf04      	itt	eq
 800646a:	0100      	lsleq	r0, r0, #4
 800646c:	3304      	addeq	r3, #4
 800646e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006472:	bf04      	itt	eq
 8006474:	0080      	lsleq	r0, r0, #2
 8006476:	3302      	addeq	r3, #2
 8006478:	2800      	cmp	r0, #0
 800647a:	db05      	blt.n	8006488 <__hi0bits+0x38>
 800647c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006480:	f103 0301 	add.w	r3, r3, #1
 8006484:	bf08      	it	eq
 8006486:	2320      	moveq	r3, #32
 8006488:	4618      	mov	r0, r3
 800648a:	4770      	bx	lr
 800648c:	2300      	movs	r3, #0
 800648e:	e7e4      	b.n	800645a <__hi0bits+0xa>

08006490 <__lo0bits>:
 8006490:	6803      	ldr	r3, [r0, #0]
 8006492:	f013 0207 	ands.w	r2, r3, #7
 8006496:	4601      	mov	r1, r0
 8006498:	d00b      	beq.n	80064b2 <__lo0bits+0x22>
 800649a:	07da      	lsls	r2, r3, #31
 800649c:	d423      	bmi.n	80064e6 <__lo0bits+0x56>
 800649e:	0798      	lsls	r0, r3, #30
 80064a0:	bf49      	itett	mi
 80064a2:	085b      	lsrmi	r3, r3, #1
 80064a4:	089b      	lsrpl	r3, r3, #2
 80064a6:	2001      	movmi	r0, #1
 80064a8:	600b      	strmi	r3, [r1, #0]
 80064aa:	bf5c      	itt	pl
 80064ac:	600b      	strpl	r3, [r1, #0]
 80064ae:	2002      	movpl	r0, #2
 80064b0:	4770      	bx	lr
 80064b2:	b298      	uxth	r0, r3
 80064b4:	b9a8      	cbnz	r0, 80064e2 <__lo0bits+0x52>
 80064b6:	0c1b      	lsrs	r3, r3, #16
 80064b8:	2010      	movs	r0, #16
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	b90a      	cbnz	r2, 80064c2 <__lo0bits+0x32>
 80064be:	3008      	adds	r0, #8
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	071a      	lsls	r2, r3, #28
 80064c4:	bf04      	itt	eq
 80064c6:	091b      	lsreq	r3, r3, #4
 80064c8:	3004      	addeq	r0, #4
 80064ca:	079a      	lsls	r2, r3, #30
 80064cc:	bf04      	itt	eq
 80064ce:	089b      	lsreq	r3, r3, #2
 80064d0:	3002      	addeq	r0, #2
 80064d2:	07da      	lsls	r2, r3, #31
 80064d4:	d403      	bmi.n	80064de <__lo0bits+0x4e>
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	f100 0001 	add.w	r0, r0, #1
 80064dc:	d005      	beq.n	80064ea <__lo0bits+0x5a>
 80064de:	600b      	str	r3, [r1, #0]
 80064e0:	4770      	bx	lr
 80064e2:	4610      	mov	r0, r2
 80064e4:	e7e9      	b.n	80064ba <__lo0bits+0x2a>
 80064e6:	2000      	movs	r0, #0
 80064e8:	4770      	bx	lr
 80064ea:	2020      	movs	r0, #32
 80064ec:	4770      	bx	lr
	...

080064f0 <__i2b>:
 80064f0:	b510      	push	{r4, lr}
 80064f2:	460c      	mov	r4, r1
 80064f4:	2101      	movs	r1, #1
 80064f6:	f7ff ff03 	bl	8006300 <_Balloc>
 80064fa:	4602      	mov	r2, r0
 80064fc:	b928      	cbnz	r0, 800650a <__i2b+0x1a>
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <__i2b+0x24>)
 8006500:	4805      	ldr	r0, [pc, #20]	; (8006518 <__i2b+0x28>)
 8006502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006506:	f000 fd35 	bl	8006f74 <__assert_func>
 800650a:	2301      	movs	r3, #1
 800650c:	6144      	str	r4, [r0, #20]
 800650e:	6103      	str	r3, [r0, #16]
 8006510:	bd10      	pop	{r4, pc}
 8006512:	bf00      	nop
 8006514:	080075e8 	.word	0x080075e8
 8006518:	0800765c 	.word	0x0800765c

0800651c <__multiply>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	4691      	mov	r9, r2
 8006522:	690a      	ldr	r2, [r1, #16]
 8006524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006528:	429a      	cmp	r2, r3
 800652a:	bfb8      	it	lt
 800652c:	460b      	movlt	r3, r1
 800652e:	460c      	mov	r4, r1
 8006530:	bfbc      	itt	lt
 8006532:	464c      	movlt	r4, r9
 8006534:	4699      	movlt	r9, r3
 8006536:	6927      	ldr	r7, [r4, #16]
 8006538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800653c:	68a3      	ldr	r3, [r4, #8]
 800653e:	6861      	ldr	r1, [r4, #4]
 8006540:	eb07 060a 	add.w	r6, r7, sl
 8006544:	42b3      	cmp	r3, r6
 8006546:	b085      	sub	sp, #20
 8006548:	bfb8      	it	lt
 800654a:	3101      	addlt	r1, #1
 800654c:	f7ff fed8 	bl	8006300 <_Balloc>
 8006550:	b930      	cbnz	r0, 8006560 <__multiply+0x44>
 8006552:	4602      	mov	r2, r0
 8006554:	4b44      	ldr	r3, [pc, #272]	; (8006668 <__multiply+0x14c>)
 8006556:	4845      	ldr	r0, [pc, #276]	; (800666c <__multiply+0x150>)
 8006558:	f240 115d 	movw	r1, #349	; 0x15d
 800655c:	f000 fd0a 	bl	8006f74 <__assert_func>
 8006560:	f100 0514 	add.w	r5, r0, #20
 8006564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006568:	462b      	mov	r3, r5
 800656a:	2200      	movs	r2, #0
 800656c:	4543      	cmp	r3, r8
 800656e:	d321      	bcc.n	80065b4 <__multiply+0x98>
 8006570:	f104 0314 	add.w	r3, r4, #20
 8006574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006578:	f109 0314 	add.w	r3, r9, #20
 800657c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006580:	9202      	str	r2, [sp, #8]
 8006582:	1b3a      	subs	r2, r7, r4
 8006584:	3a15      	subs	r2, #21
 8006586:	f022 0203 	bic.w	r2, r2, #3
 800658a:	3204      	adds	r2, #4
 800658c:	f104 0115 	add.w	r1, r4, #21
 8006590:	428f      	cmp	r7, r1
 8006592:	bf38      	it	cc
 8006594:	2204      	movcc	r2, #4
 8006596:	9201      	str	r2, [sp, #4]
 8006598:	9a02      	ldr	r2, [sp, #8]
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	429a      	cmp	r2, r3
 800659e:	d80c      	bhi.n	80065ba <__multiply+0x9e>
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	dd03      	ble.n	80065ac <__multiply+0x90>
 80065a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d05a      	beq.n	8006662 <__multiply+0x146>
 80065ac:	6106      	str	r6, [r0, #16]
 80065ae:	b005      	add	sp, #20
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	f843 2b04 	str.w	r2, [r3], #4
 80065b8:	e7d8      	b.n	800656c <__multiply+0x50>
 80065ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80065be:	f1ba 0f00 	cmp.w	sl, #0
 80065c2:	d024      	beq.n	800660e <__multiply+0xf2>
 80065c4:	f104 0e14 	add.w	lr, r4, #20
 80065c8:	46a9      	mov	r9, r5
 80065ca:	f04f 0c00 	mov.w	ip, #0
 80065ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065d2:	f8d9 1000 	ldr.w	r1, [r9]
 80065d6:	fa1f fb82 	uxth.w	fp, r2
 80065da:	b289      	uxth	r1, r1
 80065dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80065e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80065e4:	f8d9 2000 	ldr.w	r2, [r9]
 80065e8:	4461      	add	r1, ip
 80065ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80065f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065f6:	b289      	uxth	r1, r1
 80065f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065fc:	4577      	cmp	r7, lr
 80065fe:	f849 1b04 	str.w	r1, [r9], #4
 8006602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006606:	d8e2      	bhi.n	80065ce <__multiply+0xb2>
 8006608:	9a01      	ldr	r2, [sp, #4]
 800660a:	f845 c002 	str.w	ip, [r5, r2]
 800660e:	9a03      	ldr	r2, [sp, #12]
 8006610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006614:	3304      	adds	r3, #4
 8006616:	f1b9 0f00 	cmp.w	r9, #0
 800661a:	d020      	beq.n	800665e <__multiply+0x142>
 800661c:	6829      	ldr	r1, [r5, #0]
 800661e:	f104 0c14 	add.w	ip, r4, #20
 8006622:	46ae      	mov	lr, r5
 8006624:	f04f 0a00 	mov.w	sl, #0
 8006628:	f8bc b000 	ldrh.w	fp, [ip]
 800662c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006630:	fb09 220b 	mla	r2, r9, fp, r2
 8006634:	4492      	add	sl, r2
 8006636:	b289      	uxth	r1, r1
 8006638:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800663c:	f84e 1b04 	str.w	r1, [lr], #4
 8006640:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006644:	f8be 1000 	ldrh.w	r1, [lr]
 8006648:	0c12      	lsrs	r2, r2, #16
 800664a:	fb09 1102 	mla	r1, r9, r2, r1
 800664e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006652:	4567      	cmp	r7, ip
 8006654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006658:	d8e6      	bhi.n	8006628 <__multiply+0x10c>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	50a9      	str	r1, [r5, r2]
 800665e:	3504      	adds	r5, #4
 8006660:	e79a      	b.n	8006598 <__multiply+0x7c>
 8006662:	3e01      	subs	r6, #1
 8006664:	e79c      	b.n	80065a0 <__multiply+0x84>
 8006666:	bf00      	nop
 8006668:	080075e8 	.word	0x080075e8
 800666c:	0800765c 	.word	0x0800765c

08006670 <__pow5mult>:
 8006670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006674:	4615      	mov	r5, r2
 8006676:	f012 0203 	ands.w	r2, r2, #3
 800667a:	4606      	mov	r6, r0
 800667c:	460f      	mov	r7, r1
 800667e:	d007      	beq.n	8006690 <__pow5mult+0x20>
 8006680:	4c25      	ldr	r4, [pc, #148]	; (8006718 <__pow5mult+0xa8>)
 8006682:	3a01      	subs	r2, #1
 8006684:	2300      	movs	r3, #0
 8006686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800668a:	f7ff fe9b 	bl	80063c4 <__multadd>
 800668e:	4607      	mov	r7, r0
 8006690:	10ad      	asrs	r5, r5, #2
 8006692:	d03d      	beq.n	8006710 <__pow5mult+0xa0>
 8006694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006696:	b97c      	cbnz	r4, 80066b8 <__pow5mult+0x48>
 8006698:	2010      	movs	r0, #16
 800669a:	f7ff fe1b 	bl	80062d4 <malloc>
 800669e:	4602      	mov	r2, r0
 80066a0:	6270      	str	r0, [r6, #36]	; 0x24
 80066a2:	b928      	cbnz	r0, 80066b0 <__pow5mult+0x40>
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <__pow5mult+0xac>)
 80066a6:	481e      	ldr	r0, [pc, #120]	; (8006720 <__pow5mult+0xb0>)
 80066a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066ac:	f000 fc62 	bl	8006f74 <__assert_func>
 80066b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066b4:	6004      	str	r4, [r0, #0]
 80066b6:	60c4      	str	r4, [r0, #12]
 80066b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066c0:	b94c      	cbnz	r4, 80066d6 <__pow5mult+0x66>
 80066c2:	f240 2171 	movw	r1, #625	; 0x271
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ff12 	bl	80064f0 <__i2b>
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80066d2:	4604      	mov	r4, r0
 80066d4:	6003      	str	r3, [r0, #0]
 80066d6:	f04f 0900 	mov.w	r9, #0
 80066da:	07eb      	lsls	r3, r5, #31
 80066dc:	d50a      	bpl.n	80066f4 <__pow5mult+0x84>
 80066de:	4639      	mov	r1, r7
 80066e0:	4622      	mov	r2, r4
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff ff1a 	bl	800651c <__multiply>
 80066e8:	4639      	mov	r1, r7
 80066ea:	4680      	mov	r8, r0
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7ff fe47 	bl	8006380 <_Bfree>
 80066f2:	4647      	mov	r7, r8
 80066f4:	106d      	asrs	r5, r5, #1
 80066f6:	d00b      	beq.n	8006710 <__pow5mult+0xa0>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	b938      	cbnz	r0, 800670c <__pow5mult+0x9c>
 80066fc:	4622      	mov	r2, r4
 80066fe:	4621      	mov	r1, r4
 8006700:	4630      	mov	r0, r6
 8006702:	f7ff ff0b 	bl	800651c <__multiply>
 8006706:	6020      	str	r0, [r4, #0]
 8006708:	f8c0 9000 	str.w	r9, [r0]
 800670c:	4604      	mov	r4, r0
 800670e:	e7e4      	b.n	80066da <__pow5mult+0x6a>
 8006710:	4638      	mov	r0, r7
 8006712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006716:	bf00      	nop
 8006718:	080077a8 	.word	0x080077a8
 800671c:	08007576 	.word	0x08007576
 8006720:	0800765c 	.word	0x0800765c

08006724 <__lshift>:
 8006724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	460c      	mov	r4, r1
 800672a:	6849      	ldr	r1, [r1, #4]
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	4607      	mov	r7, r0
 8006736:	4691      	mov	r9, r2
 8006738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800673c:	f108 0601 	add.w	r6, r8, #1
 8006740:	42b3      	cmp	r3, r6
 8006742:	db0b      	blt.n	800675c <__lshift+0x38>
 8006744:	4638      	mov	r0, r7
 8006746:	f7ff fddb 	bl	8006300 <_Balloc>
 800674a:	4605      	mov	r5, r0
 800674c:	b948      	cbnz	r0, 8006762 <__lshift+0x3e>
 800674e:	4602      	mov	r2, r0
 8006750:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <__lshift+0xd8>)
 8006752:	482b      	ldr	r0, [pc, #172]	; (8006800 <__lshift+0xdc>)
 8006754:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006758:	f000 fc0c 	bl	8006f74 <__assert_func>
 800675c:	3101      	adds	r1, #1
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	e7ee      	b.n	8006740 <__lshift+0x1c>
 8006762:	2300      	movs	r3, #0
 8006764:	f100 0114 	add.w	r1, r0, #20
 8006768:	f100 0210 	add.w	r2, r0, #16
 800676c:	4618      	mov	r0, r3
 800676e:	4553      	cmp	r3, sl
 8006770:	db37      	blt.n	80067e2 <__lshift+0xbe>
 8006772:	6920      	ldr	r0, [r4, #16]
 8006774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006778:	f104 0314 	add.w	r3, r4, #20
 800677c:	f019 091f 	ands.w	r9, r9, #31
 8006780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006788:	d02f      	beq.n	80067ea <__lshift+0xc6>
 800678a:	f1c9 0e20 	rsb	lr, r9, #32
 800678e:	468a      	mov	sl, r1
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	fa02 f209 	lsl.w	r2, r2, r9
 800679a:	ea42 020c 	orr.w	r2, r2, ip
 800679e:	f84a 2b04 	str.w	r2, [sl], #4
 80067a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a6:	4298      	cmp	r0, r3
 80067a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067ac:	d8f2      	bhi.n	8006794 <__lshift+0x70>
 80067ae:	1b03      	subs	r3, r0, r4
 80067b0:	3b15      	subs	r3, #21
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	3304      	adds	r3, #4
 80067b8:	f104 0215 	add.w	r2, r4, #21
 80067bc:	4290      	cmp	r0, r2
 80067be:	bf38      	it	cc
 80067c0:	2304      	movcc	r3, #4
 80067c2:	f841 c003 	str.w	ip, [r1, r3]
 80067c6:	f1bc 0f00 	cmp.w	ip, #0
 80067ca:	d001      	beq.n	80067d0 <__lshift+0xac>
 80067cc:	f108 0602 	add.w	r6, r8, #2
 80067d0:	3e01      	subs	r6, #1
 80067d2:	4638      	mov	r0, r7
 80067d4:	612e      	str	r6, [r5, #16]
 80067d6:	4621      	mov	r1, r4
 80067d8:	f7ff fdd2 	bl	8006380 <_Bfree>
 80067dc:	4628      	mov	r0, r5
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80067e6:	3301      	adds	r3, #1
 80067e8:	e7c1      	b.n	800676e <__lshift+0x4a>
 80067ea:	3904      	subs	r1, #4
 80067ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80067f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80067f4:	4298      	cmp	r0, r3
 80067f6:	d8f9      	bhi.n	80067ec <__lshift+0xc8>
 80067f8:	e7ea      	b.n	80067d0 <__lshift+0xac>
 80067fa:	bf00      	nop
 80067fc:	080075e8 	.word	0x080075e8
 8006800:	0800765c 	.word	0x0800765c

08006804 <__mcmp>:
 8006804:	b530      	push	{r4, r5, lr}
 8006806:	6902      	ldr	r2, [r0, #16]
 8006808:	690c      	ldr	r4, [r1, #16]
 800680a:	1b12      	subs	r2, r2, r4
 800680c:	d10e      	bne.n	800682c <__mcmp+0x28>
 800680e:	f100 0314 	add.w	r3, r0, #20
 8006812:	3114      	adds	r1, #20
 8006814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800681c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006824:	42a5      	cmp	r5, r4
 8006826:	d003      	beq.n	8006830 <__mcmp+0x2c>
 8006828:	d305      	bcc.n	8006836 <__mcmp+0x32>
 800682a:	2201      	movs	r2, #1
 800682c:	4610      	mov	r0, r2
 800682e:	bd30      	pop	{r4, r5, pc}
 8006830:	4283      	cmp	r3, r0
 8006832:	d3f3      	bcc.n	800681c <__mcmp+0x18>
 8006834:	e7fa      	b.n	800682c <__mcmp+0x28>
 8006836:	f04f 32ff 	mov.w	r2, #4294967295
 800683a:	e7f7      	b.n	800682c <__mcmp+0x28>

0800683c <__mdiff>:
 800683c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	460c      	mov	r4, r1
 8006842:	4606      	mov	r6, r0
 8006844:	4611      	mov	r1, r2
 8006846:	4620      	mov	r0, r4
 8006848:	4690      	mov	r8, r2
 800684a:	f7ff ffdb 	bl	8006804 <__mcmp>
 800684e:	1e05      	subs	r5, r0, #0
 8006850:	d110      	bne.n	8006874 <__mdiff+0x38>
 8006852:	4629      	mov	r1, r5
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff fd53 	bl	8006300 <_Balloc>
 800685a:	b930      	cbnz	r0, 800686a <__mdiff+0x2e>
 800685c:	4b3a      	ldr	r3, [pc, #232]	; (8006948 <__mdiff+0x10c>)
 800685e:	4602      	mov	r2, r0
 8006860:	f240 2132 	movw	r1, #562	; 0x232
 8006864:	4839      	ldr	r0, [pc, #228]	; (800694c <__mdiff+0x110>)
 8006866:	f000 fb85 	bl	8006f74 <__assert_func>
 800686a:	2301      	movs	r3, #1
 800686c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006874:	bfa4      	itt	ge
 8006876:	4643      	movge	r3, r8
 8006878:	46a0      	movge	r8, r4
 800687a:	4630      	mov	r0, r6
 800687c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006880:	bfa6      	itte	ge
 8006882:	461c      	movge	r4, r3
 8006884:	2500      	movge	r5, #0
 8006886:	2501      	movlt	r5, #1
 8006888:	f7ff fd3a 	bl	8006300 <_Balloc>
 800688c:	b920      	cbnz	r0, 8006898 <__mdiff+0x5c>
 800688e:	4b2e      	ldr	r3, [pc, #184]	; (8006948 <__mdiff+0x10c>)
 8006890:	4602      	mov	r2, r0
 8006892:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006896:	e7e5      	b.n	8006864 <__mdiff+0x28>
 8006898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800689c:	6926      	ldr	r6, [r4, #16]
 800689e:	60c5      	str	r5, [r0, #12]
 80068a0:	f104 0914 	add.w	r9, r4, #20
 80068a4:	f108 0514 	add.w	r5, r8, #20
 80068a8:	f100 0e14 	add.w	lr, r0, #20
 80068ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068b4:	f108 0210 	add.w	r2, r8, #16
 80068b8:	46f2      	mov	sl, lr
 80068ba:	2100      	movs	r1, #0
 80068bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80068c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80068c4:	fa1f f883 	uxth.w	r8, r3
 80068c8:	fa11 f18b 	uxtah	r1, r1, fp
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	eba1 0808 	sub.w	r8, r1, r8
 80068d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80068da:	fa1f f888 	uxth.w	r8, r8
 80068de:	1419      	asrs	r1, r3, #16
 80068e0:	454e      	cmp	r6, r9
 80068e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80068e6:	f84a 3b04 	str.w	r3, [sl], #4
 80068ea:	d8e7      	bhi.n	80068bc <__mdiff+0x80>
 80068ec:	1b33      	subs	r3, r6, r4
 80068ee:	3b15      	subs	r3, #21
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	3304      	adds	r3, #4
 80068f6:	3415      	adds	r4, #21
 80068f8:	42a6      	cmp	r6, r4
 80068fa:	bf38      	it	cc
 80068fc:	2304      	movcc	r3, #4
 80068fe:	441d      	add	r5, r3
 8006900:	4473      	add	r3, lr
 8006902:	469e      	mov	lr, r3
 8006904:	462e      	mov	r6, r5
 8006906:	4566      	cmp	r6, ip
 8006908:	d30e      	bcc.n	8006928 <__mdiff+0xec>
 800690a:	f10c 0203 	add.w	r2, ip, #3
 800690e:	1b52      	subs	r2, r2, r5
 8006910:	f022 0203 	bic.w	r2, r2, #3
 8006914:	3d03      	subs	r5, #3
 8006916:	45ac      	cmp	ip, r5
 8006918:	bf38      	it	cc
 800691a:	2200      	movcc	r2, #0
 800691c:	441a      	add	r2, r3
 800691e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006922:	b17b      	cbz	r3, 8006944 <__mdiff+0x108>
 8006924:	6107      	str	r7, [r0, #16]
 8006926:	e7a3      	b.n	8006870 <__mdiff+0x34>
 8006928:	f856 8b04 	ldr.w	r8, [r6], #4
 800692c:	fa11 f288 	uxtah	r2, r1, r8
 8006930:	1414      	asrs	r4, r2, #16
 8006932:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006936:	b292      	uxth	r2, r2
 8006938:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800693c:	f84e 2b04 	str.w	r2, [lr], #4
 8006940:	1421      	asrs	r1, r4, #16
 8006942:	e7e0      	b.n	8006906 <__mdiff+0xca>
 8006944:	3f01      	subs	r7, #1
 8006946:	e7ea      	b.n	800691e <__mdiff+0xe2>
 8006948:	080075e8 	.word	0x080075e8
 800694c:	0800765c 	.word	0x0800765c

08006950 <__d2b>:
 8006950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4689      	mov	r9, r1
 8006956:	2101      	movs	r1, #1
 8006958:	ec57 6b10 	vmov	r6, r7, d0
 800695c:	4690      	mov	r8, r2
 800695e:	f7ff fccf 	bl	8006300 <_Balloc>
 8006962:	4604      	mov	r4, r0
 8006964:	b930      	cbnz	r0, 8006974 <__d2b+0x24>
 8006966:	4602      	mov	r2, r0
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <__d2b+0xb0>)
 800696a:	4826      	ldr	r0, [pc, #152]	; (8006a04 <__d2b+0xb4>)
 800696c:	f240 310a 	movw	r1, #778	; 0x30a
 8006970:	f000 fb00 	bl	8006f74 <__assert_func>
 8006974:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800697c:	bb35      	cbnz	r5, 80069cc <__d2b+0x7c>
 800697e:	2e00      	cmp	r6, #0
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	d028      	beq.n	80069d6 <__d2b+0x86>
 8006984:	4668      	mov	r0, sp
 8006986:	9600      	str	r6, [sp, #0]
 8006988:	f7ff fd82 	bl	8006490 <__lo0bits>
 800698c:	9900      	ldr	r1, [sp, #0]
 800698e:	b300      	cbz	r0, 80069d2 <__d2b+0x82>
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	f1c0 0320 	rsb	r3, r0, #32
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	430b      	orrs	r3, r1
 800699c:	40c2      	lsrs	r2, r0
 800699e:	6163      	str	r3, [r4, #20]
 80069a0:	9201      	str	r2, [sp, #4]
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	61a3      	str	r3, [r4, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2202      	movne	r2, #2
 80069ac:	2201      	moveq	r2, #1
 80069ae:	6122      	str	r2, [r4, #16]
 80069b0:	b1d5      	cbz	r5, 80069e8 <__d2b+0x98>
 80069b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069b6:	4405      	add	r5, r0
 80069b8:	f8c9 5000 	str.w	r5, [r9]
 80069bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069c0:	f8c8 0000 	str.w	r0, [r8]
 80069c4:	4620      	mov	r0, r4
 80069c6:	b003      	add	sp, #12
 80069c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d0:	e7d5      	b.n	800697e <__d2b+0x2e>
 80069d2:	6161      	str	r1, [r4, #20]
 80069d4:	e7e5      	b.n	80069a2 <__d2b+0x52>
 80069d6:	a801      	add	r0, sp, #4
 80069d8:	f7ff fd5a 	bl	8006490 <__lo0bits>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	6163      	str	r3, [r4, #20]
 80069e0:	2201      	movs	r2, #1
 80069e2:	6122      	str	r2, [r4, #16]
 80069e4:	3020      	adds	r0, #32
 80069e6:	e7e3      	b.n	80069b0 <__d2b+0x60>
 80069e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069f0:	f8c9 0000 	str.w	r0, [r9]
 80069f4:	6918      	ldr	r0, [r3, #16]
 80069f6:	f7ff fd2b 	bl	8006450 <__hi0bits>
 80069fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069fe:	e7df      	b.n	80069c0 <__d2b+0x70>
 8006a00:	080075e8 	.word	0x080075e8
 8006a04:	0800765c 	.word	0x0800765c

08006a08 <_calloc_r>:
 8006a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a0a:	fba1 2402 	umull	r2, r4, r1, r2
 8006a0e:	b94c      	cbnz	r4, 8006a24 <_calloc_r+0x1c>
 8006a10:	4611      	mov	r1, r2
 8006a12:	9201      	str	r2, [sp, #4]
 8006a14:	f000 f87a 	bl	8006b0c <_malloc_r>
 8006a18:	9a01      	ldr	r2, [sp, #4]
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	b930      	cbnz	r0, 8006a2c <_calloc_r+0x24>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	b003      	add	sp, #12
 8006a22:	bd30      	pop	{r4, r5, pc}
 8006a24:	220c      	movs	r2, #12
 8006a26:	6002      	str	r2, [r0, #0]
 8006a28:	2500      	movs	r5, #0
 8006a2a:	e7f8      	b.n	8006a1e <_calloc_r+0x16>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f7fd fd91 	bl	8004554 <memset>
 8006a32:	e7f4      	b.n	8006a1e <_calloc_r+0x16>

08006a34 <_free_r>:
 8006a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d044      	beq.n	8006ac4 <_free_r+0x90>
 8006a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3e:	9001      	str	r0, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f1a1 0404 	sub.w	r4, r1, #4
 8006a46:	bfb8      	it	lt
 8006a48:	18e4      	addlt	r4, r4, r3
 8006a4a:	f000 fb19 	bl	8007080 <__malloc_lock>
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <_free_r+0x94>)
 8006a50:	9801      	ldr	r0, [sp, #4]
 8006a52:	6813      	ldr	r3, [r2, #0]
 8006a54:	b933      	cbnz	r3, 8006a64 <_free_r+0x30>
 8006a56:	6063      	str	r3, [r4, #4]
 8006a58:	6014      	str	r4, [r2, #0]
 8006a5a:	b003      	add	sp, #12
 8006a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a60:	f000 bb14 	b.w	800708c <__malloc_unlock>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d908      	bls.n	8006a7a <_free_r+0x46>
 8006a68:	6825      	ldr	r5, [r4, #0]
 8006a6a:	1961      	adds	r1, r4, r5
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	bf01      	itttt	eq
 8006a70:	6819      	ldreq	r1, [r3, #0]
 8006a72:	685b      	ldreq	r3, [r3, #4]
 8006a74:	1949      	addeq	r1, r1, r5
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	e7ed      	b.n	8006a56 <_free_r+0x22>
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	b10b      	cbz	r3, 8006a84 <_free_r+0x50>
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	d9fa      	bls.n	8006a7a <_free_r+0x46>
 8006a84:	6811      	ldr	r1, [r2, #0]
 8006a86:	1855      	adds	r5, r2, r1
 8006a88:	42a5      	cmp	r5, r4
 8006a8a:	d10b      	bne.n	8006aa4 <_free_r+0x70>
 8006a8c:	6824      	ldr	r4, [r4, #0]
 8006a8e:	4421      	add	r1, r4
 8006a90:	1854      	adds	r4, r2, r1
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	6011      	str	r1, [r2, #0]
 8006a96:	d1e0      	bne.n	8006a5a <_free_r+0x26>
 8006a98:	681c      	ldr	r4, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	6053      	str	r3, [r2, #4]
 8006a9e:	4421      	add	r1, r4
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	e7da      	b.n	8006a5a <_free_r+0x26>
 8006aa4:	d902      	bls.n	8006aac <_free_r+0x78>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	6003      	str	r3, [r0, #0]
 8006aaa:	e7d6      	b.n	8006a5a <_free_r+0x26>
 8006aac:	6825      	ldr	r5, [r4, #0]
 8006aae:	1961      	adds	r1, r4, r5
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	bf04      	itt	eq
 8006ab4:	6819      	ldreq	r1, [r3, #0]
 8006ab6:	685b      	ldreq	r3, [r3, #4]
 8006ab8:	6063      	str	r3, [r4, #4]
 8006aba:	bf04      	itt	eq
 8006abc:	1949      	addeq	r1, r1, r5
 8006abe:	6021      	streq	r1, [r4, #0]
 8006ac0:	6054      	str	r4, [r2, #4]
 8006ac2:	e7ca      	b.n	8006a5a <_free_r+0x26>
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bd30      	pop	{r4, r5, pc}
 8006ac8:	20000330 	.word	0x20000330

08006acc <sbrk_aligned>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4e0e      	ldr	r6, [pc, #56]	; (8006b08 <sbrk_aligned+0x3c>)
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	6831      	ldr	r1, [r6, #0]
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	b911      	cbnz	r1, 8006ade <sbrk_aligned+0x12>
 8006ad8:	f000 f9e6 	bl	8006ea8 <_sbrk_r>
 8006adc:	6030      	str	r0, [r6, #0]
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 f9e1 	bl	8006ea8 <_sbrk_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d00a      	beq.n	8006b00 <sbrk_aligned+0x34>
 8006aea:	1cc4      	adds	r4, r0, #3
 8006aec:	f024 0403 	bic.w	r4, r4, #3
 8006af0:	42a0      	cmp	r0, r4
 8006af2:	d007      	beq.n	8006b04 <sbrk_aligned+0x38>
 8006af4:	1a21      	subs	r1, r4, r0
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 f9d6 	bl	8006ea8 <_sbrk_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d101      	bne.n	8006b04 <sbrk_aligned+0x38>
 8006b00:	f04f 34ff 	mov.w	r4, #4294967295
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	20000334 	.word	0x20000334

08006b0c <_malloc_r>:
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	1ccd      	adds	r5, r1, #3
 8006b12:	f025 0503 	bic.w	r5, r5, #3
 8006b16:	3508      	adds	r5, #8
 8006b18:	2d0c      	cmp	r5, #12
 8006b1a:	bf38      	it	cc
 8006b1c:	250c      	movcc	r5, #12
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	4607      	mov	r7, r0
 8006b22:	db01      	blt.n	8006b28 <_malloc_r+0x1c>
 8006b24:	42a9      	cmp	r1, r5
 8006b26:	d905      	bls.n	8006b34 <_malloc_r+0x28>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b34:	4e2e      	ldr	r6, [pc, #184]	; (8006bf0 <_malloc_r+0xe4>)
 8006b36:	f000 faa3 	bl	8007080 <__malloc_lock>
 8006b3a:	6833      	ldr	r3, [r6, #0]
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	bb34      	cbnz	r4, 8006b8e <_malloc_r+0x82>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4638      	mov	r0, r7
 8006b44:	f7ff ffc2 	bl	8006acc <sbrk_aligned>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	d14d      	bne.n	8006bea <_malloc_r+0xde>
 8006b4e:	6834      	ldr	r4, [r6, #0]
 8006b50:	4626      	mov	r6, r4
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d140      	bne.n	8006bd8 <_malloc_r+0xcc>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	eb04 0803 	add.w	r8, r4, r3
 8006b60:	f000 f9a2 	bl	8006ea8 <_sbrk_r>
 8006b64:	4580      	cmp	r8, r0
 8006b66:	d13a      	bne.n	8006bde <_malloc_r+0xd2>
 8006b68:	6821      	ldr	r1, [r4, #0]
 8006b6a:	3503      	adds	r5, #3
 8006b6c:	1a6d      	subs	r5, r5, r1
 8006b6e:	f025 0503 	bic.w	r5, r5, #3
 8006b72:	3508      	adds	r5, #8
 8006b74:	2d0c      	cmp	r5, #12
 8006b76:	bf38      	it	cc
 8006b78:	250c      	movcc	r5, #12
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff ffa5 	bl	8006acc <sbrk_aligned>
 8006b82:	3001      	adds	r0, #1
 8006b84:	d02b      	beq.n	8006bde <_malloc_r+0xd2>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	442b      	add	r3, r5
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	e00e      	b.n	8006bac <_malloc_r+0xa0>
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	1b52      	subs	r2, r2, r5
 8006b92:	d41e      	bmi.n	8006bd2 <_malloc_r+0xc6>
 8006b94:	2a0b      	cmp	r2, #11
 8006b96:	d916      	bls.n	8006bc6 <_malloc_r+0xba>
 8006b98:	1961      	adds	r1, r4, r5
 8006b9a:	42a3      	cmp	r3, r4
 8006b9c:	6025      	str	r5, [r4, #0]
 8006b9e:	bf18      	it	ne
 8006ba0:	6059      	strne	r1, [r3, #4]
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	bf08      	it	eq
 8006ba6:	6031      	streq	r1, [r6, #0]
 8006ba8:	5162      	str	r2, [r4, r5]
 8006baa:	604b      	str	r3, [r1, #4]
 8006bac:	4638      	mov	r0, r7
 8006bae:	f104 060b 	add.w	r6, r4, #11
 8006bb2:	f000 fa6b 	bl	800708c <__malloc_unlock>
 8006bb6:	f026 0607 	bic.w	r6, r6, #7
 8006bba:	1d23      	adds	r3, r4, #4
 8006bbc:	1af2      	subs	r2, r6, r3
 8006bbe:	d0b6      	beq.n	8006b2e <_malloc_r+0x22>
 8006bc0:	1b9b      	subs	r3, r3, r6
 8006bc2:	50a3      	str	r3, [r4, r2]
 8006bc4:	e7b3      	b.n	8006b2e <_malloc_r+0x22>
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	bf0c      	ite	eq
 8006bcc:	6032      	streq	r2, [r6, #0]
 8006bce:	605a      	strne	r2, [r3, #4]
 8006bd0:	e7ec      	b.n	8006bac <_malloc_r+0xa0>
 8006bd2:	4623      	mov	r3, r4
 8006bd4:	6864      	ldr	r4, [r4, #4]
 8006bd6:	e7b2      	b.n	8006b3e <_malloc_r+0x32>
 8006bd8:	4634      	mov	r4, r6
 8006bda:	6876      	ldr	r6, [r6, #4]
 8006bdc:	e7b9      	b.n	8006b52 <_malloc_r+0x46>
 8006bde:	230c      	movs	r3, #12
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4638      	mov	r0, r7
 8006be4:	f000 fa52 	bl	800708c <__malloc_unlock>
 8006be8:	e7a1      	b.n	8006b2e <_malloc_r+0x22>
 8006bea:	6025      	str	r5, [r4, #0]
 8006bec:	e7de      	b.n	8006bac <_malloc_r+0xa0>
 8006bee:	bf00      	nop
 8006bf0:	20000330 	.word	0x20000330

08006bf4 <__sfputc_r>:
 8006bf4:	6893      	ldr	r3, [r2, #8]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	b410      	push	{r4}
 8006bfc:	6093      	str	r3, [r2, #8]
 8006bfe:	da08      	bge.n	8006c12 <__sfputc_r+0x1e>
 8006c00:	6994      	ldr	r4, [r2, #24]
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	db01      	blt.n	8006c0a <__sfputc_r+0x16>
 8006c06:	290a      	cmp	r1, #10
 8006c08:	d103      	bne.n	8006c12 <__sfputc_r+0x1e>
 8006c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0e:	f7fe ba83 	b.w	8005118 <__swbuf_r>
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	1c58      	adds	r0, r3, #1
 8006c16:	6010      	str	r0, [r2, #0]
 8006c18:	7019      	strb	r1, [r3, #0]
 8006c1a:	4608      	mov	r0, r1
 8006c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <__sfputs_r>:
 8006c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	4614      	mov	r4, r2
 8006c2a:	18d5      	adds	r5, r2, r3
 8006c2c:	42ac      	cmp	r4, r5
 8006c2e:	d101      	bne.n	8006c34 <__sfputs_r+0x12>
 8006c30:	2000      	movs	r0, #0
 8006c32:	e007      	b.n	8006c44 <__sfputs_r+0x22>
 8006c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c38:	463a      	mov	r2, r7
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ffda 	bl	8006bf4 <__sfputc_r>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d1f3      	bne.n	8006c2c <__sfputs_r+0xa>
 8006c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c48 <_vfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	b09d      	sub	sp, #116	; 0x74
 8006c50:	4614      	mov	r4, r2
 8006c52:	4698      	mov	r8, r3
 8006c54:	4606      	mov	r6, r0
 8006c56:	b118      	cbz	r0, 8006c60 <_vfiprintf_r+0x18>
 8006c58:	6983      	ldr	r3, [r0, #24]
 8006c5a:	b90b      	cbnz	r3, 8006c60 <_vfiprintf_r+0x18>
 8006c5c:	f7ff fa30 	bl	80060c0 <__sinit>
 8006c60:	4b89      	ldr	r3, [pc, #548]	; (8006e88 <_vfiprintf_r+0x240>)
 8006c62:	429d      	cmp	r5, r3
 8006c64:	d11b      	bne.n	8006c9e <_vfiprintf_r+0x56>
 8006c66:	6875      	ldr	r5, [r6, #4]
 8006c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	d405      	bmi.n	8006c7a <_vfiprintf_r+0x32>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	059a      	lsls	r2, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_vfiprintf_r+0x32>
 8006c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c76:	f7ff fac6 	bl	8006206 <__retarget_lock_acquire_recursive>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	071b      	lsls	r3, r3, #28
 8006c7e:	d501      	bpl.n	8006c84 <_vfiprintf_r+0x3c>
 8006c80:	692b      	ldr	r3, [r5, #16]
 8006c82:	b9eb      	cbnz	r3, 8006cc0 <_vfiprintf_r+0x78>
 8006c84:	4629      	mov	r1, r5
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7fe fa98 	bl	80051bc <__swsetup_r>
 8006c8c:	b1c0      	cbz	r0, 8006cc0 <_vfiprintf_r+0x78>
 8006c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c90:	07dc      	lsls	r4, r3, #31
 8006c92:	d50e      	bpl.n	8006cb2 <_vfiprintf_r+0x6a>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	b01d      	add	sp, #116	; 0x74
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <_vfiprintf_r+0x244>)
 8006ca0:	429d      	cmp	r5, r3
 8006ca2:	d101      	bne.n	8006ca8 <_vfiprintf_r+0x60>
 8006ca4:	68b5      	ldr	r5, [r6, #8]
 8006ca6:	e7df      	b.n	8006c68 <_vfiprintf_r+0x20>
 8006ca8:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <_vfiprintf_r+0x248>)
 8006caa:	429d      	cmp	r5, r3
 8006cac:	bf08      	it	eq
 8006cae:	68f5      	ldreq	r5, [r6, #12]
 8006cb0:	e7da      	b.n	8006c68 <_vfiprintf_r+0x20>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	0598      	lsls	r0, r3, #22
 8006cb6:	d4ed      	bmi.n	8006c94 <_vfiprintf_r+0x4c>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cba:	f7ff faa5 	bl	8006208 <__retarget_lock_release_recursive>
 8006cbe:	e7e9      	b.n	8006c94 <_vfiprintf_r+0x4c>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cce:	2330      	movs	r3, #48	; 0x30
 8006cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e94 <_vfiprintf_r+0x24c>
 8006cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cd8:	f04f 0901 	mov.w	r9, #1
 8006cdc:	4623      	mov	r3, r4
 8006cde:	469a      	mov	sl, r3
 8006ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce4:	b10a      	cbz	r2, 8006cea <_vfiprintf_r+0xa2>
 8006ce6:	2a25      	cmp	r2, #37	; 0x25
 8006ce8:	d1f9      	bne.n	8006cde <_vfiprintf_r+0x96>
 8006cea:	ebba 0b04 	subs.w	fp, sl, r4
 8006cee:	d00b      	beq.n	8006d08 <_vfiprintf_r+0xc0>
 8006cf0:	465b      	mov	r3, fp
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ff93 	bl	8006c22 <__sfputs_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f000 80aa 	beq.w	8006e56 <_vfiprintf_r+0x20e>
 8006d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d04:	445a      	add	r2, fp
 8006d06:	9209      	str	r2, [sp, #36]	; 0x24
 8006d08:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80a2 	beq.w	8006e56 <_vfiprintf_r+0x20e>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295
 8006d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1c:	f10a 0a01 	add.w	sl, sl, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	9307      	str	r3, [sp, #28]
 8006d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d28:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4858      	ldr	r0, [pc, #352]	; (8006e94 <_vfiprintf_r+0x24c>)
 8006d34:	f7f9 fa8c 	bl	8000250 <memchr>
 8006d38:	9a04      	ldr	r2, [sp, #16]
 8006d3a:	b9d8      	cbnz	r0, 8006d74 <_vfiprintf_r+0x12c>
 8006d3c:	06d1      	lsls	r1, r2, #27
 8006d3e:	bf44      	itt	mi
 8006d40:	2320      	movmi	r3, #32
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d46:	0713      	lsls	r3, r2, #28
 8006d48:	bf44      	itt	mi
 8006d4a:	232b      	movmi	r3, #43	; 0x2b
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d50:	f89a 3000 	ldrb.w	r3, [sl]
 8006d54:	2b2a      	cmp	r3, #42	; 0x2a
 8006d56:	d015      	beq.n	8006d84 <_vfiprintf_r+0x13c>
 8006d58:	9a07      	ldr	r2, [sp, #28]
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f04f 0c0a 	mov.w	ip, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	; 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94e      	bls.n	8006e0c <_vfiprintf_r+0x1c4>
 8006d6e:	b1b0      	cbz	r0, 8006d9e <_vfiprintf_r+0x156>
 8006d70:	9207      	str	r2, [sp, #28]
 8006d72:	e014      	b.n	8006d9e <_vfiprintf_r+0x156>
 8006d74:	eba0 0308 	sub.w	r3, r0, r8
 8006d78:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	46a2      	mov	sl, r4
 8006d82:	e7d2      	b.n	8006d2a <_vfiprintf_r+0xe2>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d19      	adds	r1, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	425b      	neglt	r3, r3
 8006d92:	f042 0202 	orrlt.w	r2, r2, #2
 8006d96:	9307      	strge	r3, [sp, #28]
 8006d98:	9307      	strlt	r3, [sp, #28]
 8006d9a:	bfb8      	it	lt
 8006d9c:	9204      	strlt	r2, [sp, #16]
 8006d9e:	7823      	ldrb	r3, [r4, #0]
 8006da0:	2b2e      	cmp	r3, #46	; 0x2e
 8006da2:	d10c      	bne.n	8006dbe <_vfiprintf_r+0x176>
 8006da4:	7863      	ldrb	r3, [r4, #1]
 8006da6:	2b2a      	cmp	r3, #42	; 0x2a
 8006da8:	d135      	bne.n	8006e16 <_vfiprintf_r+0x1ce>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	9203      	str	r2, [sp, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfb8      	it	lt
 8006db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dba:	3402      	adds	r4, #2
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ea4 <_vfiprintf_r+0x25c>
 8006dc2:	7821      	ldrb	r1, [r4, #0]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	f7f9 fa42 	bl	8000250 <memchr>
 8006dcc:	b140      	cbz	r0, 8006de0 <_vfiprintf_r+0x198>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	eba0 000a 	sub.w	r0, r0, sl
 8006dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	4303      	orrs	r3, r0
 8006ddc:	3401      	adds	r4, #1
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	482c      	ldr	r0, [pc, #176]	; (8006e98 <_vfiprintf_r+0x250>)
 8006de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dea:	2206      	movs	r2, #6
 8006dec:	f7f9 fa30 	bl	8000250 <memchr>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d03f      	beq.n	8006e74 <_vfiprintf_r+0x22c>
 8006df4:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <_vfiprintf_r+0x254>)
 8006df6:	bb1b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x1f8>
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	3307      	adds	r3, #7
 8006dfc:	f023 0307 	bic.w	r3, r3, #7
 8006e00:	3308      	adds	r3, #8
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	443b      	add	r3, r7
 8006e08:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0a:	e767      	b.n	8006cdc <_vfiprintf_r+0x94>
 8006e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e10:	460c      	mov	r4, r1
 8006e12:	2001      	movs	r0, #1
 8006e14:	e7a5      	b.n	8006d62 <_vfiprintf_r+0x11a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	3401      	adds	r4, #1
 8006e1a:	9305      	str	r3, [sp, #20]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f04f 0c0a 	mov.w	ip, #10
 8006e22:	4620      	mov	r0, r4
 8006e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e28:	3a30      	subs	r2, #48	; 0x30
 8006e2a:	2a09      	cmp	r2, #9
 8006e2c:	d903      	bls.n	8006e36 <_vfiprintf_r+0x1ee>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0c5      	beq.n	8006dbe <_vfiprintf_r+0x176>
 8006e32:	9105      	str	r1, [sp, #20]
 8006e34:	e7c3      	b.n	8006dbe <_vfiprintf_r+0x176>
 8006e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e7f0      	b.n	8006e22 <_vfiprintf_r+0x1da>
 8006e40:	ab03      	add	r3, sp, #12
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	462a      	mov	r2, r5
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <_vfiprintf_r+0x258>)
 8006e48:	a904      	add	r1, sp, #16
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f7fd fc1c 	bl	8004688 <_printf_float>
 8006e50:	4607      	mov	r7, r0
 8006e52:	1c78      	adds	r0, r7, #1
 8006e54:	d1d6      	bne.n	8006e04 <_vfiprintf_r+0x1bc>
 8006e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e58:	07d9      	lsls	r1, r3, #31
 8006e5a:	d405      	bmi.n	8006e68 <_vfiprintf_r+0x220>
 8006e5c:	89ab      	ldrh	r3, [r5, #12]
 8006e5e:	059a      	lsls	r2, r3, #22
 8006e60:	d402      	bmi.n	8006e68 <_vfiprintf_r+0x220>
 8006e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e64:	f7ff f9d0 	bl	8006208 <__retarget_lock_release_recursive>
 8006e68:	89ab      	ldrh	r3, [r5, #12]
 8006e6a:	065b      	lsls	r3, r3, #25
 8006e6c:	f53f af12 	bmi.w	8006c94 <_vfiprintf_r+0x4c>
 8006e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e72:	e711      	b.n	8006c98 <_vfiprintf_r+0x50>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <_vfiprintf_r+0x258>)
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7fd fe8e 	bl	8004ba0 <_printf_i>
 8006e84:	e7e4      	b.n	8006e50 <_vfiprintf_r+0x208>
 8006e86:	bf00      	nop
 8006e88:	0800761c 	.word	0x0800761c
 8006e8c:	0800763c 	.word	0x0800763c
 8006e90:	080075fc 	.word	0x080075fc
 8006e94:	080077b4 	.word	0x080077b4
 8006e98:	080077be 	.word	0x080077be
 8006e9c:	08004689 	.word	0x08004689
 8006ea0:	08006c23 	.word	0x08006c23
 8006ea4:	080077ba 	.word	0x080077ba

08006ea8 <_sbrk_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d06      	ldr	r5, [pc, #24]	; (8006ec4 <_sbrk_r+0x1c>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	f7fa f808 	bl	8000ec8 <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_sbrk_r+0x1a>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_sbrk_r+0x1a>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20000338 	.word	0x20000338

08006ec8 <__sread>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	f000 f8e2 	bl	8007098 <_read_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bfab      	itete	ge
 8006ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eda:	89a3      	ldrhlt	r3, [r4, #12]
 8006edc:	181b      	addge	r3, r3, r0
 8006ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ee2:	bfac      	ite	ge
 8006ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ee6:	81a3      	strhlt	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__swrite>:
 8006eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	461f      	mov	r7, r3
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	05db      	lsls	r3, r3, #23
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4616      	mov	r6, r2
 8006efa:	d505      	bpl.n	8006f08 <__swrite+0x1e>
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	2302      	movs	r3, #2
 8006f02:	2200      	movs	r2, #0
 8006f04:	f000 f898 	bl	8007038 <_lseek_r>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	4628      	mov	r0, r5
 8006f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	f000 b817 	b.w	8006f50 <_write_r>

08006f22 <__sseek>:
 8006f22:	b510      	push	{r4, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2a:	f000 f885 	bl	8007038 <_lseek_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	bf15      	itete	ne
 8006f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f3e:	81a3      	strheq	r3, [r4, #12]
 8006f40:	bf18      	it	ne
 8006f42:	81a3      	strhne	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__sclose>:
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 b831 	b.w	8006fb0 <_close_r>
	...

08006f50 <_write_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	; (8006f70 <_write_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7f9 fdee 	bl	8000b40 <_write>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_write_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_write_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000338 	.word	0x20000338

08006f74 <__assert_func>:
 8006f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f76:	4614      	mov	r4, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <__assert_func+0x2c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4605      	mov	r5, r0
 8006f80:	68d8      	ldr	r0, [r3, #12]
 8006f82:	b14c      	cbz	r4, 8006f98 <__assert_func+0x24>
 8006f84:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <__assert_func+0x30>)
 8006f86:	9100      	str	r1, [sp, #0]
 8006f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f8c:	4906      	ldr	r1, [pc, #24]	; (8006fa8 <__assert_func+0x34>)
 8006f8e:	462b      	mov	r3, r5
 8006f90:	f000 f81e 	bl	8006fd0 <fiprintf>
 8006f94:	f000 f89f 	bl	80070d6 <abort>
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <__assert_func+0x38>)
 8006f9a:	461c      	mov	r4, r3
 8006f9c:	e7f3      	b.n	8006f86 <__assert_func+0x12>
 8006f9e:	bf00      	nop
 8006fa0:	2000000c 	.word	0x2000000c
 8006fa4:	080077c5 	.word	0x080077c5
 8006fa8:	080077d2 	.word	0x080077d2
 8006fac:	08007800 	.word	0x08007800

08006fb0 <_close_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_close_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7f9 fdec 	bl	8000b98 <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_close_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_close_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000338 	.word	0x20000338

08006fd0 <fiprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b503      	push	{r0, r1, lr}
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	ab03      	add	r3, sp, #12
 8006fd8:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <fiprintf+0x20>)
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	f7ff fe31 	bl	8006c48 <_vfiprintf_r>
 8006fe6:	b002      	add	sp, #8
 8006fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fec:	b003      	add	sp, #12
 8006fee:	4770      	bx	lr
 8006ff0:	2000000c 	.word	0x2000000c

08006ff4 <_fstat_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	; (8007014 <_fstat_r+0x20>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	f7f9 fe19 	bl	8000c38 <_fstat>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d102      	bne.n	8007010 <_fstat_r+0x1c>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	b103      	cbz	r3, 8007010 <_fstat_r+0x1c>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	bf00      	nop
 8007014:	20000338 	.word	0x20000338

08007018 <_isatty_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_isatty_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7f9 fd76 	bl	8000b14 <_isatty>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_isatty_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_isatty_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000338 	.word	0x20000338

08007038 <_lseek_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	; (8007058 <_lseek_r+0x20>)
 800703c:	4604      	mov	r4, r0
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	2200      	movs	r2, #0
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7f9 fdbd 	bl	8000bc6 <_lseek>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_lseek_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_lseek_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000338 	.word	0x20000338

0800705c <__ascii_mbtowc>:
 800705c:	b082      	sub	sp, #8
 800705e:	b901      	cbnz	r1, 8007062 <__ascii_mbtowc+0x6>
 8007060:	a901      	add	r1, sp, #4
 8007062:	b142      	cbz	r2, 8007076 <__ascii_mbtowc+0x1a>
 8007064:	b14b      	cbz	r3, 800707a <__ascii_mbtowc+0x1e>
 8007066:	7813      	ldrb	r3, [r2, #0]
 8007068:	600b      	str	r3, [r1, #0]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	1e10      	subs	r0, r2, #0
 800706e:	bf18      	it	ne
 8007070:	2001      	movne	r0, #1
 8007072:	b002      	add	sp, #8
 8007074:	4770      	bx	lr
 8007076:	4610      	mov	r0, r2
 8007078:	e7fb      	b.n	8007072 <__ascii_mbtowc+0x16>
 800707a:	f06f 0001 	mvn.w	r0, #1
 800707e:	e7f8      	b.n	8007072 <__ascii_mbtowc+0x16>

08007080 <__malloc_lock>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__malloc_lock+0x8>)
 8007082:	f7ff b8c0 	b.w	8006206 <__retarget_lock_acquire_recursive>
 8007086:	bf00      	nop
 8007088:	2000032c 	.word	0x2000032c

0800708c <__malloc_unlock>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__malloc_unlock+0x8>)
 800708e:	f7ff b8bb 	b.w	8006208 <__retarget_lock_release_recursive>
 8007092:	bf00      	nop
 8007094:	2000032c 	.word	0x2000032c

08007098 <_read_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	; (80070b8 <_read_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7f9 fd9e 	bl	8000be8 <_read>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_read_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_read_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20000338 	.word	0x20000338

080070bc <__ascii_wctomb>:
 80070bc:	b149      	cbz	r1, 80070d2 <__ascii_wctomb+0x16>
 80070be:	2aff      	cmp	r2, #255	; 0xff
 80070c0:	bf85      	ittet	hi
 80070c2:	238a      	movhi	r3, #138	; 0x8a
 80070c4:	6003      	strhi	r3, [r0, #0]
 80070c6:	700a      	strbls	r2, [r1, #0]
 80070c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070cc:	bf98      	it	ls
 80070ce:	2001      	movls	r0, #1
 80070d0:	4770      	bx	lr
 80070d2:	4608      	mov	r0, r1
 80070d4:	4770      	bx	lr

080070d6 <abort>:
 80070d6:	b508      	push	{r3, lr}
 80070d8:	2006      	movs	r0, #6
 80070da:	f000 f82b 	bl	8007134 <raise>
 80070de:	2001      	movs	r0, #1
 80070e0:	f000 f854 	bl	800718c <_exit>

080070e4 <_raise_r>:
 80070e4:	291f      	cmp	r1, #31
 80070e6:	b538      	push	{r3, r4, r5, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	d904      	bls.n	80070f8 <_raise_r+0x14>
 80070ee:	2316      	movs	r3, #22
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	f04f 30ff 	mov.w	r0, #4294967295
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070fa:	b112      	cbz	r2, 8007102 <_raise_r+0x1e>
 80070fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007100:	b94b      	cbnz	r3, 8007116 <_raise_r+0x32>
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f830 	bl	8007168 <_getpid_r>
 8007108:	462a      	mov	r2, r5
 800710a:	4601      	mov	r1, r0
 800710c:	4620      	mov	r0, r4
 800710e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007112:	f000 b817 	b.w	8007144 <_kill_r>
 8007116:	2b01      	cmp	r3, #1
 8007118:	d00a      	beq.n	8007130 <_raise_r+0x4c>
 800711a:	1c59      	adds	r1, r3, #1
 800711c:	d103      	bne.n	8007126 <_raise_r+0x42>
 800711e:	2316      	movs	r3, #22
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	2001      	movs	r0, #1
 8007124:	e7e7      	b.n	80070f6 <_raise_r+0x12>
 8007126:	2400      	movs	r4, #0
 8007128:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800712c:	4628      	mov	r0, r5
 800712e:	4798      	blx	r3
 8007130:	2000      	movs	r0, #0
 8007132:	e7e0      	b.n	80070f6 <_raise_r+0x12>

08007134 <raise>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <raise+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f7ff bfd3 	b.w	80070e4 <_raise_r>
 800713e:	bf00      	nop
 8007140:	2000000c 	.word	0x2000000c

08007144 <_kill_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d07      	ldr	r5, [pc, #28]	; (8007164 <_kill_r+0x20>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	f000 f813 	bl	800717c <_kill>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d102      	bne.n	8007160 <_kill_r+0x1c>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b103      	cbz	r3, 8007160 <_kill_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	20000338 	.word	0x20000338

08007168 <_getpid_r>:
 8007168:	f000 b800 	b.w	800716c <_getpid>

0800716c <_getpid>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <_getpid+0xc>)
 800716e:	2258      	movs	r2, #88	; 0x58
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
 8007176:	4770      	bx	lr
 8007178:	20000338 	.word	0x20000338

0800717c <_kill>:
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <_kill+0xc>)
 800717e:	2258      	movs	r2, #88	; 0x58
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	f04f 30ff 	mov.w	r0, #4294967295
 8007186:	4770      	bx	lr
 8007188:	20000338 	.word	0x20000338

0800718c <_exit>:
 800718c:	e7fe      	b.n	800718c <_exit>
	...

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
