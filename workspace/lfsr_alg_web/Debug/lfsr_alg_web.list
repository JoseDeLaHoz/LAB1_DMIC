
lfsr_alg_web.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08008bc0  08008bc0  00018bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f84  08008f84  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f8c  08008f8c  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  08008f98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200009b8  08009950  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08009950  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011446  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f9  00000000  00000000  00031e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027704  00000000  00000000  00035aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011030  00000000  00000000  0005d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd7f4  00000000  00000000  0006e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b9c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  0016ba18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0017050c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00170548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009b8 	.word	0x200009b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08008ba8 	.word	0x08008ba8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009bc 	.word	0x200009bc
 800023c:	08008ba8 	.word	0x08008ba8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fbbe 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f84d 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f939 	bl	8000878 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f907 	bl	8000818 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 f8b7 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //Apagar el LED
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	481e      	ldr	r0, [pc, #120]	; (800068c <main+0x98>)
 8000614:	f000 ff82 	bl	800151c <HAL_GPIO_WritePin>

	RetargetInit(&huart3); // declarar Uart3 (conectado con el stlink)
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <main+0x9c>)
 800061a:	f000 f999 	bl	8000950 <RetargetInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t seed = 0x01;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
	uint8_t feed = 0x09;
 8000622:	2309      	movs	r3, #9
 8000624:	71bb      	strb	r3, [r7, #6]
	int8_t i = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	717b      	strb	r3, [r7, #5]


	while (1) {


			i = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	717b      	strb	r3, [r7, #5]
		 if (seed & 1)  {
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d015      	beq.n	8000664 <main+0x70>
			 seed = (seed >> 1) ^ feed;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	4053      	eors	r3, r2
 8000642:	71fb      	strb	r3, [r7, #7]
			 printf("seed: %d\n\r",seed);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <main+0xa0>)
 800064a:	f003 fd4f 	bl	80040ec <printf>
			 i++;
 800064e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3301      	adds	r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	717b      	strb	r3, [r7, #5]
			 HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fbe9 	bl	8000e34 <HAL_Delay>
 8000662:	e7e2      	b.n	800062a <main+0x36>
		 }


		 else{
			  seed = (seed >> 1);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
			  printf("seede: %d\n\r",seed);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4619      	mov	r1, r3
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <main+0xa4>)
 8000670:	f003 fd3c 	bl	80040ec <printf>
			  i++;
 8000674:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	3301      	adds	r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	717b      	strb	r3, [r7, #5]
			  			 HAL_Delay(500);
 8000680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000684:	f000 fbd6 	bl	8000e34 <HAL_Delay>
			i = 0;
 8000688:	e7cf      	b.n	800062a <main+0x36>
 800068a:	bf00      	nop
 800068c:	40020400 	.word	0x40020400
 8000690:	20000a20 	.word	0x20000a20
 8000694:	08008bc0 	.word	0x08008bc0
 8000698:	08008bcc 	.word	0x08008bcc

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fd16 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <SystemClock_Config+0xd8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <SystemClock_Config+0xd8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xd8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SystemClock_Config+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a25      	ldr	r2, [pc, #148]	; (8000778 <SystemClock_Config+0xdc>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xdc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f000 ff65 	bl	80015f0 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f90a 	bl	8000944 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000730:	f000 ff0e 	bl	8001550 <HAL_PWREx_EnableOverDrive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073a:	f000 f903 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2103      	movs	r1, #3
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f9f6 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000766:	f000 f8ed 	bl	8000944 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_TIM2_Init+0x98>)
 800079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_TIM2_Init+0x98>)
 80007a4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80007a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_TIM2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_TIM2_Init+0x98>)
 80007b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80007b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_TIM2_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_TIM2_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <MX_TIM2_Init+0x98>)
 80007c6:	f002 f80f 	bl	80027e8 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f8b8 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_TIM2_Init+0x98>)
 80007e2:	f002 f859 	bl	8002898 <HAL_TIM_ConfigClockSource>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007ec:	f000 f8aa 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_TIM2_Init+0x98>)
 80007fe:	f002 fa4f 	bl	8002ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 f89c 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200009d4 	.word	0x200009d4

08000818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART3_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800085c:	f002 faae 	bl	8002dbc <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f86d 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000a20 	.word	0x20000a20
 8000874:	40004800 	.word	0x40004800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_GPIO_Init+0xc0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a29      	ldr	r2, [pc, #164]	; (8000938 <MX_GPIO_Init+0xc0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <MX_GPIO_Init+0xc0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_GPIO_Init+0xc4>)
 80008f4:	f000 fe12 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_GPIO_Init+0xc8>)
 800090e:	f000 fc59 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0xc4>)
 800092a:	f000 fc4b 	bl	80011c4 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40020800 	.word	0x40020800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <RetargetInit+0x28>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <RetargetInit+0x2c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6898      	ldr	r0, [r3, #8]
 8000964:	2300      	movs	r3, #0
 8000966:	2202      	movs	r2, #2
 8000968:	2100      	movs	r1, #0
 800096a:	f003 fbd1 	bl	8004110 <setvbuf>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000aa8 	.word	0x20000aa8
 800097c:	2000000c 	.word	0x2000000c

08000980 <_isatty>:

int _isatty(int fd) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db04      	blt.n	8000998 <_isatty+0x18>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b02      	cmp	r3, #2
 8000992:	dc01      	bgt.n	8000998 <_isatty+0x18>
    return 1;
 8000994:	2301      	movs	r3, #1
 8000996:	e005      	b.n	80009a4 <_isatty+0x24>

  errno = EBADF;
 8000998:	f003 fb76 	bl	8004088 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	2209      	movs	r2, #9
 80009a0:	601a      	str	r2, [r3, #0]
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_write>:

int _write(int fd, char* ptr, int len) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d002      	beq.n	80009c4 <_write+0x18>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d111      	bne.n	80009e8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <_write+0x54>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	f002 fa41 	bl	8002e58 <HAL_UART_Transmit>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <_write+0x38>
      return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	e008      	b.n	80009f6 <_write+0x4a>
    else
      return EIO;
 80009e4:	2305      	movs	r3, #5
 80009e6:	e006      	b.n	80009f6 <_write+0x4a>
  }
  errno = EBADF;
 80009e8:	f003 fb4e 	bl	8004088 <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2209      	movs	r2, #9
 80009f0:	601a      	str	r2, [r3, #0]
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000aa8 	.word	0x20000aa8

08000a04 <_close>:

int _close(int fd) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db04      	blt.n	8000a1c <_close+0x18>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	dc01      	bgt.n	8000a1c <_close+0x18>
    return 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e006      	b.n	8000a2a <_close+0x26>

  errno = EBADF;
 8000a1c:	f003 fb34 	bl	8004088 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2209      	movs	r2, #9
 8000a24:	601a      	str	r2, [r3, #0]
  return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000a3e:	f003 fb23 	bl	8004088 <__errno>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2209      	movs	r2, #9
 8000a46:	601a      	str	r2, [r3, #0]
  return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_read>:

int _read(int fd, char* ptr, int len) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d110      	bne.n	8000a88 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <_read+0x4c>)
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	2201      	movs	r2, #1
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	f002 fa74 	bl	8002f5e <HAL_UART_Receive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <_read+0x30>
      return 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e008      	b.n	8000a96 <_read+0x42>
    else
      return EIO;
 8000a84:	2305      	movs	r3, #5
 8000a86:	e006      	b.n	8000a96 <_read+0x42>
  }
  errno = EBADF;
 8000a88:	f003 fafe 	bl	8004088 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2209      	movs	r2, #9
 8000a90:	601a      	str	r2, [r3, #0]
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000aa8 	.word	0x20000aa8

08000aa4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db08      	blt.n	8000ac6 <_fstat+0x22>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	dc05      	bgt.n	8000ac6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac0:	605a      	str	r2, [r3, #4]
    return 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e005      	b.n	8000ad2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000ac6:	f003 fadf 	bl	8004088 <__errno>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2209      	movs	r2, #9
 8000ace:	601a      	str	r2, [r3, #0]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d10b      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ae      	sub	sp, #184	; 0xb8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2290      	movs	r2, #144	; 0x90
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 faab 	bl	80040dc <memset>
  if(huart->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d144      	bne.n	8000c1a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f9fa 	bl	8001f98 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff fecb 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_UART_MspInit+0xcc>)
 8000c06:	f000 fadd 	bl	80011c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2027      	movs	r0, #39	; 0x27
 8000c10:	f000 fa0f 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c14:	2027      	movs	r0, #39	; 0x27
 8000c16:	f000 fa28 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	37b8      	adds	r7, #184	; 0xb8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004800 	.word	0x40004800
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f8ba 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USART3_IRQHandler+0x10>)
 8000c8a:	f002 fa2d 	bl	80030e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000a20 	.word	0x20000a20

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f003 f9de 	bl	8004088 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20080000 	.word	0x20080000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000aac 	.word	0x20000aac
 8000d00:	20000af0 	.word	0x20000af0

08000d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f003 f99d 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc4b 	bl	80005f4 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	200009b8 	.word	0x200009b8
  ldr r2, =_sidata
 8000d6c:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 8000d70:	200009b8 	.word	0x200009b8
  ldr r4, =_ebss
 8000d74:	20000af0 	.word	0x20000af0

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>

08000d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f94c 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f805 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fea7 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f967 	bl	8001086 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f92f 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000ab0 	.word	0x20000ab0

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000ab0 	.word	0x20000ab0

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <__NVIC_SetPriorityGrouping+0x40>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x40>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	05fa0000 	.word	0x05fa0000

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff3e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff31 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff feb6 	bl	8000e1c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d008      	beq.n	80010d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e052      	b.n	8001176 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0216 	bic.w	r2, r2, #22
 80010de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <HAL_DMA_Abort+0x62>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0208 	bic.w	r2, r2, #8
 800110e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001120:	e013      	b.n	800114a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001122:	f7ff fe7b 	bl	8000e1c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b05      	cmp	r3, #5
 800112e:	d90c      	bls.n	800114a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e015      	b.n	8001176 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e4      	bne.n	8001122 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	223f      	movs	r2, #63	; 0x3f
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d004      	beq.n	800119c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00c      	b.n	80011b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2205      	movs	r2, #5
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e175      	b.n	80014d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8164 	bne.w	80014ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x56>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80be 	beq.w	80014ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_GPIO_Init+0x324>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001366:	4a61      	ldr	r2, [pc, #388]	; (80014ec <HAL_GPIO_Init+0x328>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d037      	beq.n	8001402 <HAL_GPIO_Init+0x23e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a57      	ldr	r2, [pc, #348]	; (80014f4 <HAL_GPIO_Init+0x330>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x23a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a56      	ldr	r2, [pc, #344]	; (80014f8 <HAL_GPIO_Init+0x334>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x236>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a55      	ldr	r2, [pc, #340]	; (80014fc <HAL_GPIO_Init+0x338>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x232>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x33c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a53      	ldr	r2, [pc, #332]	; (8001504 <HAL_GPIO_Init+0x340>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x22a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x344>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x348>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_GPIO_Init+0x34c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x350>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x21a>
 80013da:	2309      	movs	r3, #9
 80013dc:	e012      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013de:	230a      	movs	r3, #10
 80013e0:	e010      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e00e      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x240>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x328>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_GPIO_Init+0x354>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <HAL_GPIO_Init+0x354>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_GPIO_Init+0x354>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_GPIO_Init+0x354>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_GPIO_Init+0x354>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_GPIO_Init+0x354>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_GPIO_Init+0x354>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_GPIO_Init+0x354>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae86 	bls.w	80011e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40021c00 	.word	0x40021c00
 8001510:	40022000 	.word	0x40022000
 8001514:	40022400 	.word	0x40022400
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157e:	f7ff fc4d 	bl	8000e1c <HAL_GetTick>
 8001582:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001584:	e009      	b.n	800159a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001586:	f7ff fc49 	bl	8000e1c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001594:	d901      	bls.n	800159a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e022      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a6:	d1ee      	bne.n	8001586 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b4:	f7ff fc32 	bl	8000e1c <HAL_GetTick>
 80015b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ba:	e009      	b.n	80015d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015bc:	f7ff fc2e 	bl	8000e1c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ca:	d901      	bls.n	80015d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e007      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015dc:	d1ee      	bne.n	80015bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e29b      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8087 	beq.w	8001722 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b04      	cmp	r3, #4
 800161e:	d00c      	beq.n	800163a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d112      	bne.n	8001652 <HAL_RCC_OscConfig+0x62>
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b8d      	ldr	r3, [pc, #564]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06c      	beq.n	8001720 <HAL_RCC_OscConfig+0x130>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d168      	bne.n	8001720 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e275      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x7a>
 800165c:	4b84      	ldr	r3, [pc, #528]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a83      	ldr	r2, [pc, #524]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e02e      	b.n	80016c8 <HAL_RCC_OscConfig+0xd8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x9c>
 8001672:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7e      	ldr	r2, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xd8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 8001696:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a75      	ldr	r2, [pc, #468]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b73      	ldr	r3, [pc, #460]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xd8>
 80016b0:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6e      	ldr	r2, [pc, #440]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a6b      	ldr	r2, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fba4 	bl	8000e1c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fba0 	bl	8000e1c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e229      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b61      	ldr	r3, [pc, #388]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb90 	bl	8000e1c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fb8c 	bl	8000e1c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e215      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	4b57      	ldr	r3, [pc, #348]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x110>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d069      	beq.n	8001802 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x190>
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x17a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1e9      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	e040      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb42 	bl	8000e1c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fb3e 	bl	8000e1c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1c7      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4929      	ldr	r1, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
 80017ce:	e018      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a26      	ldr	r2, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb1e 	bl	8000e1c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fb1a 	bl	8000e1c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1a3      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d038      	beq.n	8001880 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d019      	beq.n	800184a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fafb 	bl	8000e1c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff faf7 	bl	8000e1c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e180      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x23a>
 8001848:	e01a      	b.n	8001880 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800184c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fae1 	bl	8000e1c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff fadd 	bl	8000e1c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d903      	bls.n	8001874 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e166      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
 8001870:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a4 	beq.w	80019d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a88      	ldr	r2, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018c2:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x4d4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x4d4>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff faa5 	bl	8000e1c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff faa1 	bl	8000e1c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e12a      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e8:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x4d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x31a>
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	e02d      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x33c>
 8001912:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e01c      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x35e>
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a61      	ldr	r2, [pc, #388]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	e00b      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fa55 	bl	8000e1c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fa51 	bl	8000e1c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0d8      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCC_OscConfig+0x386>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff fa3f 	bl	8000e1c <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fa3b 	bl	8000e1c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0c2      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80ae 	beq.w	8001b3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d06d      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d14b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fa0c 	bl	8000e1c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fa08 	bl	8000e1c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e091      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	071b      	lsls	r3, r3, #28
 8001a52:	491b      	ldr	r1, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9da 	bl	8000e1c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f9d6 	bl	8000e1c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e05f      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x47c>
 8001a8a:	e057      	b.n	8001b3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f9c0 	bl	8000e1c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f9bc 	bl	8000e1c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e045      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4b0>
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x54c>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x558>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d030      	beq.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d129      	bne.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d122      	bne.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001afe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d119      	bne.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10f      	bne.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d0      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 020f 	bic.w	r2, r3, #15
 8001b7a:	4965      	ldr	r1, [pc, #404]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d040      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d115      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e073      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06b      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4936      	ldr	r1, [pc, #216]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7ff f8ec 	bl	8000e1c <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f8e8 	bl	8000e1c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e053      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d210      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f821 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f848 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08008bd8 	.word	0x08008bd8
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b094      	sub	sp, #80	; 0x50
 8001d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d34:	2300      	movs	r3, #0
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3c:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d00d      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x40>
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	f200 80e1 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x34>
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d56:	e0db      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5c:	e0db      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d62:	e0d8      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d6e:	4b6d      	ldr	r3, [pc, #436]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	2200      	movs	r2, #0
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d96:	4622      	mov	r2, r4
 8001d98:	462b      	mov	r3, r5
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0159      	lsls	r1, r3, #5
 8001da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da8:	0150      	lsls	r0, r2, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4621      	mov	r1, r4
 8001db0:	1a51      	subs	r1, r2, r1
 8001db2:	6139      	str	r1, [r7, #16]
 8001db4:	4629      	mov	r1, r5
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dc8:	4659      	mov	r1, fp
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	4651      	mov	r1, sl
 8001dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	018a      	lsls	r2, r1, #6
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ddc:	4659      	mov	r1, fp
 8001dde:	eb63 0901 	sbc.w	r9, r3, r1
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df6:	4690      	mov	r8, r2
 8001df8:	4699      	mov	r9, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	eb18 0303 	adds.w	r3, r8, r3
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	462b      	mov	r3, r5
 8001e04:	eb49 0303 	adc.w	r3, r9, r3
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e16:	4629      	mov	r1, r5
 8001e18:	024b      	lsls	r3, r1, #9
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e20:	4621      	mov	r1, r4
 8001e22:	024a      	lsls	r2, r1, #9
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e34:	f7fe fa5c 	bl	80002f0 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e40:	e058      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	0159      	lsls	r1, r3, #5
 8001e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6e:	0150      	lsls	r0, r2, #5
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4641      	mov	r1, r8
 8001e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e94:	ebb2 040a 	subs.w	r4, r2, sl
 8001e98:	eb63 050b 	sbc.w	r5, r3, fp
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	00eb      	lsls	r3, r5, #3
 8001ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eaa:	00e2      	lsls	r2, r4, #3
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	eb45 0303 	adc.w	r3, r5, r3
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	028b      	lsls	r3, r1, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	028a      	lsls	r2, r1, #10
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	61fa      	str	r2, [r7, #28]
 8001ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee8:	f7fe fa02 	bl	80002f0 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3750      	adds	r7, #80	; 0x50
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08008be8 	.word	0x08008be8

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08008be8 	.word	0x08008be8

08001f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc0:	4b69      	ldr	r3, [pc, #420]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a68      	ldr	r2, [pc, #416]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fca:	6093      	str	r3, [r2, #8]
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd4:	4964      	ldr	r1, [pc, #400]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d017      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	4959      	ldr	r1, [pc, #356]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d017      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002034:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	494a      	ldr	r1, [pc, #296]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 808b 	beq.w	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a34      	ldr	r2, [pc, #208]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7fe febc 	bl	8000e1c <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a8:	f7fe feb8 	bl	8000e1c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e38f      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020c6:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d035      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d02e      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d114      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe80 	bl	8000e1c <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe fe7c 	bl	8000e1c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e351      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ee      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800214e:	d111      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800215e:	400b      	ands	r3, r1
 8002160:	4901      	ldr	r1, [pc, #4]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
 8002170:	0ffffcff 	.word	0x0ffffcff
 8002174:	4bac      	ldr	r3, [pc, #688]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4aab      	ldr	r2, [pc, #684]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	4ba9      	ldr	r3, [pc, #676]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	49a6      	ldr	r1, [pc, #664]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	4313      	orrs	r3, r2
 8002190:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800219e:	4ba2      	ldr	r3, [pc, #648]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a4:	4aa0      	ldr	r2, [pc, #640]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	499b      	ldr	r1, [pc, #620]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021cc:	4b96      	ldr	r3, [pc, #600]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021da:	4993      	ldr	r1, [pc, #588]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ee:	4b8e      	ldr	r3, [pc, #568]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021fc:	498a      	ldr	r1, [pc, #552]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002210:	4b85      	ldr	r3, [pc, #532]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221e:	4982      	ldr	r1, [pc, #520]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4979      	ldr	r1, [pc, #484]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002254:	4b74      	ldr	r3, [pc, #464]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4971      	ldr	r1, [pc, #452]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f023 020c 	bic.w	r2, r3, #12
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	4968      	ldr	r1, [pc, #416]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002298:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4960      	ldr	r1, [pc, #384]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ba:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c8:	4957      	ldr	r1, [pc, #348]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022dc:	4b52      	ldr	r3, [pc, #328]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	494f      	ldr	r1, [pc, #316]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4946      	ldr	r1, [pc, #280]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	493e      	ldr	r1, [pc, #248]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	4935      	ldr	r1, [pc, #212]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002372:	492d      	ldr	r1, [pc, #180]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d011      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002394:	4924      	ldr	r1, [pc, #144]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	4914      	ldr	r1, [pc, #80]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f8:	490b      	ldr	r1, [pc, #44]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00f      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241c:	4902      	ldr	r1, [pc, #8]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002424:	e002      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002438:	4b8a      	ldr	r3, [pc, #552]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800243e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	4986      	ldr	r1, [pc, #536]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800245c:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002462:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246c:	497d      	ldr	r1, [pc, #500]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d006      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80d6 	beq.w	8002634 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002488:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002494:	f7fe fcc2 	bl	8000e1c <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800249c:	f7fe fcbe 	bl	8000e1c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e195      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ae:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d021      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11d      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	0e1b      	lsrs	r3, r3, #24
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	019a      	lsls	r2, r3, #6
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	071b      	lsls	r3, r3, #28
 8002502:	4958      	ldr	r1, [pc, #352]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02e      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002534:	d129      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254a:	0f1b      	lsrs	r3, r3, #28
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	019a      	lsls	r2, r3, #6
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	493e      	ldr	r1, [pc, #248]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002572:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002578:	f023 021f 	bic.w	r2, r3, #31
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	3b01      	subs	r3, #1
 8002582:	4938      	ldr	r1, [pc, #224]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01d      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025aa:	0f1b      	lsrs	r3, r3, #28
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	019a      	lsls	r2, r3, #6
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	4926      	ldr	r1, [pc, #152]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d011      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	019a      	lsls	r2, r3, #6
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	491a      	ldr	r1, [pc, #104]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800260c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260e:	f7fe fc05 	bl	8000e1c <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002616:	f7fe fc01 	bl	8000e1c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0d8      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 80ce 	bne.w	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a08      	ldr	r2, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fbe8 	bl	8000e1c <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800264e:	e00b      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002650:	f7fe fbe4 	bl	8000e1c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d904      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0bb      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002668:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002674:	d0ec      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02e      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d12a      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	0f1b      	lsrs	r3, r3, #28
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	019a      	lsls	r2, r3, #6
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	061b      	lsls	r3, r3, #24
 80026cc:	431a      	orrs	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	071b      	lsls	r3, r3, #28
 80026d2:	4944      	ldr	r1, [pc, #272]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026da:	4b42      	ldr	r3, [pc, #264]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	493d      	ldr	r1, [pc, #244]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d022      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002708:	d11d      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	0e1b      	lsrs	r3, r3, #24
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	0f1b      	lsrs	r3, r3, #28
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	019a      	lsls	r2, r3, #6
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	071b      	lsls	r3, r3, #28
 800273e:	4929      	ldr	r1, [pc, #164]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	0e1b      	lsrs	r3, r3, #24
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	019a      	lsls	r2, r3, #6
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431a      	orrs	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	071b      	lsls	r3, r3, #28
 8002786:	4917      	ldr	r1, [pc, #92]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	4911      	ldr	r1, [pc, #68]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7fe fb34 	bl	8000e1c <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027b8:	f7fe fb30 	bl	8000e1c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e007      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d6:	d1ef      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e049      	b.n	800288e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f988 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 f900 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0b4      	b.n	8002a1e <HAL_TIM_ConfigClockSource+0x186>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_TIM_ConfigClockSource+0x190>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ec:	d03e      	beq.n	800296c <HAL_TIM_ConfigClockSource+0xd4>
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	f200 8087 	bhi.w	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	f000 8086 	beq.w	8002a0a <HAL_TIM_ConfigClockSource+0x172>
 80028fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002902:	d87f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d01a      	beq.n	800293e <HAL_TIM_ConfigClockSource+0xa6>
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d87b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d050      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002910:	2b60      	cmp	r3, #96	; 0x60
 8002912:	d877      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d03c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xfa>
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d873      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d058      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d86f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d064      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d86b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d060      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d867      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05c      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d05a      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	e062      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f000 f987 	bl	8002c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
      break;
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f000 f970 	bl	8002c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e03c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 f8e4 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f93d 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 80029b0:	e02c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f000 f903 	bl	8002bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f92d 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 80029d0:	e01c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 f8c4 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f91d 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 80029f0:	e00c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 f914 	bl	8002c2a <TIM_ITRx_SetConfig>
      break;
 8002a02:	e003      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e000      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	fffeff88 	.word	0xfffeff88

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d00f      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d027      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d023      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d017      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <TIM_Base_SetConfig+0x134>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <TIM_Base_SetConfig+0x13c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40010400 	.word	0x40010400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	40001800 	.word	0x40001800
 8002b64:	40001c00 	.word	0x40001c00
 8002b68:	40002000 	.word	0x40002000

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 030a 	bic.w	r3, r3, #10
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f043 0307 	orr.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e06d      	b.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d022      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d01d      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10c      	bne.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010400 	.word	0x40010400
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40000c00 	.word	0x40000c00
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40001800 	.word	0x40001800

08002dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e040      	b.n	8002e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd febe 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fc86 	bl	800370c <UART_SetConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e022      	b.n	8002e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fede 	bl	8003bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 ff65 	bl	8003d18 <UART_CheckIdleState>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d171      	bne.n	8002f54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Transmit+0x24>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06a      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	; 0x21
 8002e8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fd ffc5 	bl	8000e1c <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d108      	bne.n	8002ec0 <HAL_UART_Transmit+0x68>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e003      	b.n	8002ec8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec8:	e02c      	b.n	8002f24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 ff6c 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e038      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	3302      	adds	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e007      	b.n	8002f12 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1cc      	bne.n	8002eca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2140      	movs	r1, #64	; 0x40
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 ff39 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e005      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	; 0x28
 8002f62:	af02      	add	r7, sp, #8
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 80b1 	bne.w	80030dc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Receive+0x28>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0a9      	b.n	80030de <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2222      	movs	r2, #34	; 0x22
 8002f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd ff3c 	bl	8000e1c <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d10e      	bne.n	8002fde <HAL_UART_Receive+0x80>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_UART_Receive+0x76>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002fce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fd2:	e02d      	b.n	8003030 <HAL_UART_Receive+0xd2>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	22ff      	movs	r2, #255	; 0xff
 8002fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fdc:	e028      	b.n	8003030 <HAL_UART_Receive+0xd2>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_UART_Receive+0xa4>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_UART_Receive+0x9a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ff6:	e01b      	b.n	8003030 <HAL_UART_Receive+0xd2>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	227f      	movs	r2, #127	; 0x7f
 8002ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003000:	e016      	b.n	8003030 <HAL_UART_Receive+0xd2>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800300a:	d10d      	bne.n	8003028 <HAL_UART_Receive+0xca>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <HAL_UART_Receive+0xc0>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	227f      	movs	r2, #127	; 0x7f
 8003018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800301c:	e008      	b.n	8003030 <HAL_UART_Receive+0xd2>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003026:	e003      	b.n	8003030 <HAL_UART_Receive+0xd2>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003036:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Receive+0xf6>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800305c:	e032      	b.n	80030c4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2120      	movs	r1, #32
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fea2 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e032      	b.n	80030de <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	b29a      	uxth	r2, r3
 8003086:	8a7b      	ldrh	r3, [r7, #18]
 8003088:	4013      	ands	r3, r2
 800308a:	b29a      	uxth	r2, r3
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	3302      	adds	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e00c      	b.n	80030b2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	8a7b      	ldrh	r3, [r7, #18]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	3301      	adds	r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1c6      	bne.n	800305e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0ba      	sub	sp, #232	; 0xe8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800310e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003112:	f640 030f 	movw	r3, #2063	; 0x80f
 8003116:	4013      	ands	r3, r2
 8003118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800311c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d115      	bne.n	8003150 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00f      	beq.n	8003150 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 82ac 	beq.w	800369e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
      return;
 800314e:	e2a6      	b.n	800369e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8117 	beq.w	8003388 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800315a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003166:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800316a:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_UART_IRQHandler+0x298>)
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 810a 	beq.w	8003388 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_UART_IRQHandler+0xbc>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_UART_IRQHandler+0xec>
 80031b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2202      	movs	r2, #2
 80031c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d011      	beq.n	8003204 <HAL_UART_IRQHandler+0x11c>
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2204      	movs	r2, #4
 80031f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d017      	beq.n	8003240 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003220:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_UART_IRQHandler+0x18a>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8212 	beq.w	80036a2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d005      	beq.n	80032ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d04f      	beq.n	800336a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fe37 	bl	8003f3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d141      	bne.n	8003362 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3308      	adds	r3, #8
 80032e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3308      	adds	r3, #8
 8003306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800330a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800330e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1d9      	bne.n	80032de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <HAL_UART_IRQHandler+0x29c>)
 8003338:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd ff1d 	bl	800117e <HAL_DMA_Abort_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d017      	beq.n	800337a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003354:	4610      	mov	r0, r2
 8003356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003358:	e00f      	b.n	800337a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9b6 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	e00b      	b.n	800337a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9b2 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e007      	b.n	800337a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9ae 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003378:	e193      	b.n	80036a2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337a:	bf00      	nop
    return;
 800337c:	e191      	b.n	80036a2 <HAL_UART_IRQHandler+0x5ba>
 800337e:	bf00      	nop
 8003380:	04000120 	.word	0x04000120
 8003384:	08004007 	.word	0x08004007

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	2b01      	cmp	r3, #1
 800338e:	f040 814c 	bne.w	800362a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8145 	beq.w	800362a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 813e 	beq.w	800362a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2210      	movs	r2, #16
 80033b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	f040 80b6 	bne.w	8003532 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8165 	beq.w	80036a6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033e6:	429a      	cmp	r2, r3
 80033e8:	f080 815d 	bcs.w	80036a6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003400:	f000 8086 	beq.w	8003510 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800342e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003432:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800343a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1da      	bne.n	8003404 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3308      	adds	r3, #8
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800345e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800347a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e1      	bne.n	800344e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e3      	bne.n	800348a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	f023 0310 	bic.w	r3, r3, #16
 80034e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e4      	bne.n	80034d0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fdc7 	bl	800109e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003522:	b29b      	uxth	r3, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8d8 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003530:	e0b9      	b.n	80036a6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800353e:	b29b      	uxth	r3, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80ab 	beq.w	80036aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a6 	beq.w	80036aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e4      	bne.n	800355e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	623b      	str	r3, [r7, #32]
   return(result);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b8:	633a      	str	r2, [r7, #48]	; 0x30
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e3      	bne.n	8003594 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0310 	bic.w	r3, r3, #16
 80035f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	69b9      	ldr	r1, [r7, #24]
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	617b      	str	r3, [r7, #20]
   return(result);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e4      	bne.n	80035e0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f85c 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003628:	e03f      	b.n	80036aa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <HAL_UART_IRQHandler+0x56c>
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800364a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f853 	bl	80036f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003652:	e02d      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01c      	beq.n	80036ae <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
    }
    return;
 800367c:	e017      	b.n	80036ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fccb 	bl	8004032 <UART_EndTransmit_IT>
    return;
 800369c:	e008      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800369e:	bf00      	nop
 80036a0:	e006      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80036a2:	bf00      	nop
 80036a4:	e004      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80036ae:	bf00      	nop
  }

}
 80036b0:	37e8      	adds	r7, #232	; 0xe8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4ba6      	ldr	r3, [pc, #664]	; (80039d0 <UART_SetConfig+0x2c4>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	6979      	ldr	r1, [r7, #20]
 8003740:	430b      	orrs	r3, r1
 8003742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a94      	ldr	r2, [pc, #592]	; (80039d4 <UART_SetConfig+0x2c8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d120      	bne.n	80037ca <UART_SetConfig+0xbe>
 8003788:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <UART_SetConfig+0x2cc>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d816      	bhi.n	80037c4 <UART_SetConfig+0xb8>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0x90>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037b9 	.word	0x080037b9
 80037a4:	080037b3 	.word	0x080037b3
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	2301      	movs	r3, #1
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e150      	b.n	8003a54 <UART_SetConfig+0x348>
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e14d      	b.n	8003a54 <UART_SetConfig+0x348>
 80037b8:	2304      	movs	r3, #4
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e14a      	b.n	8003a54 <UART_SetConfig+0x348>
 80037be:	2308      	movs	r3, #8
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e147      	b.n	8003a54 <UART_SetConfig+0x348>
 80037c4:	2310      	movs	r3, #16
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e144      	b.n	8003a54 <UART_SetConfig+0x348>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a83      	ldr	r2, [pc, #524]	; (80039dc <UART_SetConfig+0x2d0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d132      	bne.n	800383a <UART_SetConfig+0x12e>
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <UART_SetConfig+0x2cc>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d828      	bhi.n	8003834 <UART_SetConfig+0x128>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0xdc>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003835 	.word	0x08003835
 80037f0:	08003835 	.word	0x08003835
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003835 	.word	0x08003835
 8003804:	08003835 	.word	0x08003835
 8003808:	08003823 	.word	0x08003823
 800380c:	08003835 	.word	0x08003835
 8003810:	08003835 	.word	0x08003835
 8003814:	08003835 	.word	0x08003835
 8003818:	0800382f 	.word	0x0800382f
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e118      	b.n	8003a54 <UART_SetConfig+0x348>
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e115      	b.n	8003a54 <UART_SetConfig+0x348>
 8003828:	2304      	movs	r3, #4
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e112      	b.n	8003a54 <UART_SetConfig+0x348>
 800382e:	2308      	movs	r3, #8
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e10f      	b.n	8003a54 <UART_SetConfig+0x348>
 8003834:	2310      	movs	r3, #16
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e10c      	b.n	8003a54 <UART_SetConfig+0x348>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a68      	ldr	r2, [pc, #416]	; (80039e0 <UART_SetConfig+0x2d4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d120      	bne.n	8003886 <UART_SetConfig+0x17a>
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <UART_SetConfig+0x2cc>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d013      	beq.n	800387a <UART_SetConfig+0x16e>
 8003852:	2b30      	cmp	r3, #48	; 0x30
 8003854:	d814      	bhi.n	8003880 <UART_SetConfig+0x174>
 8003856:	2b20      	cmp	r3, #32
 8003858:	d009      	beq.n	800386e <UART_SetConfig+0x162>
 800385a:	2b20      	cmp	r3, #32
 800385c:	d810      	bhi.n	8003880 <UART_SetConfig+0x174>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <UART_SetConfig+0x15c>
 8003862:	2b10      	cmp	r3, #16
 8003864:	d006      	beq.n	8003874 <UART_SetConfig+0x168>
 8003866:	e00b      	b.n	8003880 <UART_SetConfig+0x174>
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0f2      	b.n	8003a54 <UART_SetConfig+0x348>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e0ef      	b.n	8003a54 <UART_SetConfig+0x348>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0ec      	b.n	8003a54 <UART_SetConfig+0x348>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e0e9      	b.n	8003a54 <UART_SetConfig+0x348>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0e6      	b.n	8003a54 <UART_SetConfig+0x348>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <UART_SetConfig+0x2d8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d120      	bne.n	80038d2 <UART_SetConfig+0x1c6>
 8003890:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <UART_SetConfig+0x2cc>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800389a:	2bc0      	cmp	r3, #192	; 0xc0
 800389c:	d013      	beq.n	80038c6 <UART_SetConfig+0x1ba>
 800389e:	2bc0      	cmp	r3, #192	; 0xc0
 80038a0:	d814      	bhi.n	80038cc <UART_SetConfig+0x1c0>
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d009      	beq.n	80038ba <UART_SetConfig+0x1ae>
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d810      	bhi.n	80038cc <UART_SetConfig+0x1c0>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <UART_SetConfig+0x1a8>
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d006      	beq.n	80038c0 <UART_SetConfig+0x1b4>
 80038b2:	e00b      	b.n	80038cc <UART_SetConfig+0x1c0>
 80038b4:	2300      	movs	r3, #0
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e0cc      	b.n	8003a54 <UART_SetConfig+0x348>
 80038ba:	2302      	movs	r3, #2
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e0c9      	b.n	8003a54 <UART_SetConfig+0x348>
 80038c0:	2304      	movs	r3, #4
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e0c6      	b.n	8003a54 <UART_SetConfig+0x348>
 80038c6:	2308      	movs	r3, #8
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e0c3      	b.n	8003a54 <UART_SetConfig+0x348>
 80038cc:	2310      	movs	r3, #16
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0c0      	b.n	8003a54 <UART_SetConfig+0x348>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <UART_SetConfig+0x2dc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d125      	bne.n	8003928 <UART_SetConfig+0x21c>
 80038dc:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <UART_SetConfig+0x2cc>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ea:	d017      	beq.n	800391c <UART_SetConfig+0x210>
 80038ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f0:	d817      	bhi.n	8003922 <UART_SetConfig+0x216>
 80038f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f6:	d00b      	beq.n	8003910 <UART_SetConfig+0x204>
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d811      	bhi.n	8003922 <UART_SetConfig+0x216>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <UART_SetConfig+0x1fe>
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	d006      	beq.n	8003916 <UART_SetConfig+0x20a>
 8003908:	e00b      	b.n	8003922 <UART_SetConfig+0x216>
 800390a:	2300      	movs	r3, #0
 800390c:	77fb      	strb	r3, [r7, #31]
 800390e:	e0a1      	b.n	8003a54 <UART_SetConfig+0x348>
 8003910:	2302      	movs	r3, #2
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e09e      	b.n	8003a54 <UART_SetConfig+0x348>
 8003916:	2304      	movs	r3, #4
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e09b      	b.n	8003a54 <UART_SetConfig+0x348>
 800391c:	2308      	movs	r3, #8
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e098      	b.n	8003a54 <UART_SetConfig+0x348>
 8003922:	2310      	movs	r3, #16
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e095      	b.n	8003a54 <UART_SetConfig+0x348>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <UART_SetConfig+0x2e0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d125      	bne.n	800397e <UART_SetConfig+0x272>
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <UART_SetConfig+0x2cc>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800393c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003940:	d017      	beq.n	8003972 <UART_SetConfig+0x266>
 8003942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003946:	d817      	bhi.n	8003978 <UART_SetConfig+0x26c>
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d00b      	beq.n	8003966 <UART_SetConfig+0x25a>
 800394e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003952:	d811      	bhi.n	8003978 <UART_SetConfig+0x26c>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <UART_SetConfig+0x254>
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d006      	beq.n	800396c <UART_SetConfig+0x260>
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x26c>
 8003960:	2301      	movs	r3, #1
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e076      	b.n	8003a54 <UART_SetConfig+0x348>
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e073      	b.n	8003a54 <UART_SetConfig+0x348>
 800396c:	2304      	movs	r3, #4
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e070      	b.n	8003a54 <UART_SetConfig+0x348>
 8003972:	2308      	movs	r3, #8
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e06d      	b.n	8003a54 <UART_SetConfig+0x348>
 8003978:	2310      	movs	r3, #16
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e06a      	b.n	8003a54 <UART_SetConfig+0x348>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <UART_SetConfig+0x2e4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d138      	bne.n	80039fa <UART_SetConfig+0x2ee>
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <UART_SetConfig+0x2cc>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003996:	d017      	beq.n	80039c8 <UART_SetConfig+0x2bc>
 8003998:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800399c:	d82a      	bhi.n	80039f4 <UART_SetConfig+0x2e8>
 800399e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a2:	d00b      	beq.n	80039bc <UART_SetConfig+0x2b0>
 80039a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a8:	d824      	bhi.n	80039f4 <UART_SetConfig+0x2e8>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <UART_SetConfig+0x2aa>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d006      	beq.n	80039c2 <UART_SetConfig+0x2b6>
 80039b4:	e01e      	b.n	80039f4 <UART_SetConfig+0x2e8>
 80039b6:	2300      	movs	r3, #0
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e04b      	b.n	8003a54 <UART_SetConfig+0x348>
 80039bc:	2302      	movs	r3, #2
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e048      	b.n	8003a54 <UART_SetConfig+0x348>
 80039c2:	2304      	movs	r3, #4
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e045      	b.n	8003a54 <UART_SetConfig+0x348>
 80039c8:	2308      	movs	r3, #8
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e042      	b.n	8003a54 <UART_SetConfig+0x348>
 80039ce:	bf00      	nop
 80039d0:	efff69f3 	.word	0xefff69f3
 80039d4:	40011000 	.word	0x40011000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40004400 	.word	0x40004400
 80039e0:	40004800 	.word	0x40004800
 80039e4:	40004c00 	.word	0x40004c00
 80039e8:	40005000 	.word	0x40005000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	40007800 	.word	0x40007800
 80039f4:	2310      	movs	r3, #16
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e02c      	b.n	8003a54 <UART_SetConfig+0x348>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a72      	ldr	r2, [pc, #456]	; (8003bc8 <UART_SetConfig+0x4bc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d125      	bne.n	8003a50 <UART_SetConfig+0x344>
 8003a04:	4b71      	ldr	r3, [pc, #452]	; (8003bcc <UART_SetConfig+0x4c0>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a12:	d017      	beq.n	8003a44 <UART_SetConfig+0x338>
 8003a14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a18:	d817      	bhi.n	8003a4a <UART_SetConfig+0x33e>
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d00b      	beq.n	8003a38 <UART_SetConfig+0x32c>
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d811      	bhi.n	8003a4a <UART_SetConfig+0x33e>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <UART_SetConfig+0x326>
 8003a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2e:	d006      	beq.n	8003a3e <UART_SetConfig+0x332>
 8003a30:	e00b      	b.n	8003a4a <UART_SetConfig+0x33e>
 8003a32:	2300      	movs	r3, #0
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e00d      	b.n	8003a54 <UART_SetConfig+0x348>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e00a      	b.n	8003a54 <UART_SetConfig+0x348>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e007      	b.n	8003a54 <UART_SetConfig+0x348>
 8003a44:	2308      	movs	r3, #8
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e004      	b.n	8003a54 <UART_SetConfig+0x348>
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e001      	b.n	8003a54 <UART_SetConfig+0x348>
 8003a50:	2310      	movs	r3, #16
 8003a52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5c:	d15b      	bne.n	8003b16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d828      	bhi.n	8003ab6 <UART_SetConfig+0x3aa>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x360>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ab7 	.word	0x08003ab7
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003ab7 	.word	0x08003ab7
 8003a88:	08003ab7 	.word	0x08003ab7
 8003a8c:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe fa5a 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003a94:	61b8      	str	r0, [r7, #24]
        break;
 8003a96:	e013      	b.n	8003ac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe fa6a 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	61b8      	str	r0, [r7, #24]
        break;
 8003a9e:	e00f      	b.n	8003ac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <UART_SetConfig+0x4c4>)
 8003aa2:	61bb      	str	r3, [r7, #24]
        break;
 8003aa4:	e00c      	b.n	8003ac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe f93d 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8003aaa:	61b8      	str	r0, [r7, #24]
        break;
 8003aac:	e008      	b.n	8003ac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	61bb      	str	r3, [r7, #24]
        break;
 8003ab4:	e004      	b.n	8003ac0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	77bb      	strb	r3, [r7, #30]
        break;
 8003abe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d074      	beq.n	8003bb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	005a      	lsls	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d916      	bls.n	8003b10 <UART_SetConfig+0x404>
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d212      	bcs.n	8003b10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	89fb      	ldrh	r3, [r7, #14]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	89fa      	ldrh	r2, [r7, #14]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e04f      	b.n	8003bb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77bb      	strb	r3, [r7, #30]
 8003b14:	e04c      	b.n	8003bb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b16:	7ffb      	ldrb	r3, [r7, #31]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d828      	bhi.n	8003b6e <UART_SetConfig+0x462>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0x418>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b6f 	.word	0x08003b6f
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b6f 	.word	0x08003b6f
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7fe f9fe 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e013      	b.n	8003b78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fa0e 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61b8      	str	r0, [r7, #24]
        break;
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <UART_SetConfig+0x4c4>)
 8003b5a:	61bb      	str	r3, [r7, #24]
        break;
 8003b5c:	e00c      	b.n	8003b78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7fe f8e1 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8003b62:	61b8      	str	r0, [r7, #24]
        break;
 8003b64:	e008      	b.n	8003b78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e004      	b.n	8003b78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77bb      	strb	r3, [r7, #30]
        break;
 8003b76:	bf00      	nop
    }

    if (pclk != 0U)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	085a      	lsrs	r2, r3, #1
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	441a      	add	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d909      	bls.n	8003bac <UART_SetConfig+0x4a0>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d205      	bcs.n	8003bac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	e001      	b.n	8003bb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40007c00 	.word	0x40007c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400

08003bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01a      	beq.n	8003cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d10a      	bne.n	8003cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d28:	f7fd f878 	bl	8000e1c <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d10e      	bne.n	8003d5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f831 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e027      	b.n	8003daa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d10e      	bne.n	8003d86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f81b 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e011      	b.n	8003daa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b09c      	sub	sp, #112	; 0x70
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	e0a7      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	f000 80a3 	beq.w	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd f825 	bl	8000e1c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d13f      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e5      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e068      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d050      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	d148      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003eac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ede:	623a      	str	r2, [r7, #32]
 8003ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e010      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f43f af48 	beq.w	8003dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3770      	adds	r7, #112	; 0x70
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b095      	sub	sp, #84	; 0x54
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f64:	643b      	str	r3, [r7, #64]	; 0x40
 8003f66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e6      	bne.n	8003f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d118      	bne.n	8003fe6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f023 0310 	bic.w	r3, r3, #16
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e6      	bne.n	8003fb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ffa:	bf00      	nop
 8003ffc:	3754      	adds	r7, #84	; 0x54
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fb51 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b088      	sub	sp, #32
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60bb      	str	r3, [r7, #8]
   return(result);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	613b      	str	r3, [r7, #16]
   return(result);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fb1d 	bl	80036b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000000c 	.word	0x2000000c

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f004 fd7e 	bl	8008ba8 <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	08008f8c 	.word	0x08008f8c
 80040d0:	08008f8c 	.word	0x08008f8c
 80040d4:	08008f8c 	.word	0x08008f8c
 80040d8:	08008f94 	.word	0x08008f94

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <printf>:
 80040ec:	b40f      	push	{r0, r1, r2, r3}
 80040ee:	b507      	push	{r0, r1, r2, lr}
 80040f0:	4906      	ldr	r1, [pc, #24]	; (800410c <printf+0x20>)
 80040f2:	ab04      	add	r3, sp, #16
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040fa:	6881      	ldr	r1, [r0, #8]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	f000 f8bf 	bl	8004280 <_vfprintf_r>
 8004102:	b003      	add	sp, #12
 8004104:	f85d eb04 	ldr.w	lr, [sp], #4
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr
 800410c:	2000000c 	.word	0x2000000c

08004110 <setvbuf>:
 8004110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004114:	461d      	mov	r5, r3
 8004116:	4b58      	ldr	r3, [pc, #352]	; (8004278 <setvbuf+0x168>)
 8004118:	681f      	ldr	r7, [r3, #0]
 800411a:	4604      	mov	r4, r0
 800411c:	460e      	mov	r6, r1
 800411e:	4690      	mov	r8, r2
 8004120:	b127      	cbz	r7, 800412c <setvbuf+0x1c>
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	b913      	cbnz	r3, 800412c <setvbuf+0x1c>
 8004126:	4638      	mov	r0, r7
 8004128:	f002 fa52 	bl	80065d0 <__sinit>
 800412c:	f1b8 0f02 	cmp.w	r8, #2
 8004130:	d006      	beq.n	8004140 <setvbuf+0x30>
 8004132:	f1b8 0f01 	cmp.w	r8, #1
 8004136:	f200 809a 	bhi.w	800426e <setvbuf+0x15e>
 800413a:	2d00      	cmp	r5, #0
 800413c:	f2c0 8097 	blt.w	800426e <setvbuf+0x15e>
 8004140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004142:	07db      	lsls	r3, r3, #31
 8004144:	d405      	bmi.n	8004152 <setvbuf+0x42>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	0598      	lsls	r0, r3, #22
 800414a:	d402      	bmi.n	8004152 <setvbuf+0x42>
 800414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414e:	f002 fcff 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8004152:	4621      	mov	r1, r4
 8004154:	4638      	mov	r0, r7
 8004156:	f002 f9cf 	bl	80064f8 <_fflush_r>
 800415a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800415c:	b141      	cbz	r1, 8004170 <setvbuf+0x60>
 800415e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004162:	4299      	cmp	r1, r3
 8004164:	d002      	beq.n	800416c <setvbuf+0x5c>
 8004166:	4638      	mov	r0, r7
 8004168:	f002 fac2 	bl	80066f0 <_free_r>
 800416c:	2300      	movs	r3, #0
 800416e:	6323      	str	r3, [r4, #48]	; 0x30
 8004170:	2300      	movs	r3, #0
 8004172:	61a3      	str	r3, [r4, #24]
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	0619      	lsls	r1, r3, #24
 800417a:	d503      	bpl.n	8004184 <setvbuf+0x74>
 800417c:	6921      	ldr	r1, [r4, #16]
 800417e:	4638      	mov	r0, r7
 8004180:	f002 fab6 	bl	80066f0 <_free_r>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	f1b8 0f02 	cmp.w	r8, #2
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	d067      	beq.n	8004266 <setvbuf+0x156>
 8004196:	ab01      	add	r3, sp, #4
 8004198:	466a      	mov	r2, sp
 800419a:	4621      	mov	r1, r4
 800419c:	4638      	mov	r0, r7
 800419e:	f002 fcd9 	bl	8006b54 <__swhatbuf_r>
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	4318      	orrs	r0, r3
 80041a6:	81a0      	strh	r0, [r4, #12]
 80041a8:	bb35      	cbnz	r5, 80041f8 <setvbuf+0xe8>
 80041aa:	9d00      	ldr	r5, [sp, #0]
 80041ac:	4628      	mov	r0, r5
 80041ae:	f002 fd3d 	bl	8006c2c <malloc>
 80041b2:	4606      	mov	r6, r0
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d151      	bne.n	800425c <setvbuf+0x14c>
 80041b8:	f8dd 9000 	ldr.w	r9, [sp]
 80041bc:	45a9      	cmp	r9, r5
 80041be:	d146      	bne.n	800424e <setvbuf+0x13e>
 80041c0:	f04f 35ff 	mov.w	r5, #4294967295
 80041c4:	2200      	movs	r2, #0
 80041c6:	60a2      	str	r2, [r4, #8]
 80041c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	6122      	str	r2, [r4, #16]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d6:	6162      	str	r2, [r4, #20]
 80041d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041da:	f043 0302 	orr.w	r3, r3, #2
 80041de:	07d2      	lsls	r2, r2, #31
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	d405      	bmi.n	80041f0 <setvbuf+0xe0>
 80041e4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80041e8:	d102      	bne.n	80041f0 <setvbuf+0xe0>
 80041ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ec:	f002 fcb1 	bl	8006b52 <__retarget_lock_release_recursive>
 80041f0:	4628      	mov	r0, r5
 80041f2:	b003      	add	sp, #12
 80041f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	d0d7      	beq.n	80041ac <setvbuf+0x9c>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	b913      	cbnz	r3, 8004206 <setvbuf+0xf6>
 8004200:	4638      	mov	r0, r7
 8004202:	f002 f9e5 	bl	80065d0 <__sinit>
 8004206:	9b00      	ldr	r3, [sp, #0]
 8004208:	6026      	str	r6, [r4, #0]
 800420a:	42ab      	cmp	r3, r5
 800420c:	bf1e      	ittt	ne
 800420e:	89a3      	ldrhne	r3, [r4, #12]
 8004210:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8004214:	81a3      	strhne	r3, [r4, #12]
 8004216:	f1b8 0f01 	cmp.w	r8, #1
 800421a:	bf02      	ittt	eq
 800421c:	89a3      	ldrheq	r3, [r4, #12]
 800421e:	f043 0301 	orreq.w	r3, r3, #1
 8004222:	81a3      	strheq	r3, [r4, #12]
 8004224:	89a2      	ldrh	r2, [r4, #12]
 8004226:	f012 0308 	ands.w	r3, r2, #8
 800422a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800422e:	d01c      	beq.n	800426a <setvbuf+0x15a>
 8004230:	07d3      	lsls	r3, r2, #31
 8004232:	bf41      	itttt	mi
 8004234:	2300      	movmi	r3, #0
 8004236:	426d      	negmi	r5, r5
 8004238:	60a3      	strmi	r3, [r4, #8]
 800423a:	61a5      	strmi	r5, [r4, #24]
 800423c:	bf58      	it	pl
 800423e:	60a5      	strpl	r5, [r4, #8]
 8004240:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004242:	f015 0501 	ands.w	r5, r5, #1
 8004246:	d115      	bne.n	8004274 <setvbuf+0x164>
 8004248:	f412 7f00 	tst.w	r2, #512	; 0x200
 800424c:	e7cc      	b.n	80041e8 <setvbuf+0xd8>
 800424e:	4648      	mov	r0, r9
 8004250:	f002 fcec 	bl	8006c2c <malloc>
 8004254:	4606      	mov	r6, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d0b2      	beq.n	80041c0 <setvbuf+0xb0>
 800425a:	464d      	mov	r5, r9
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	e7ca      	b.n	80041fc <setvbuf+0xec>
 8004266:	2500      	movs	r5, #0
 8004268:	e7ac      	b.n	80041c4 <setvbuf+0xb4>
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	e7e8      	b.n	8004240 <setvbuf+0x130>
 800426e:	f04f 35ff 	mov.w	r5, #4294967295
 8004272:	e7bd      	b.n	80041f0 <setvbuf+0xe0>
 8004274:	2500      	movs	r5, #0
 8004276:	e7bb      	b.n	80041f0 <setvbuf+0xe0>
 8004278:	2000000c 	.word	0x2000000c
 800427c:	00000000 	.word	0x00000000

08004280 <_vfprintf_r>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	ed2d 8b04 	vpush	{d8-d9}
 8004288:	b0cb      	sub	sp, #300	; 0x12c
 800428a:	460d      	mov	r5, r1
 800428c:	4692      	mov	sl, r2
 800428e:	461c      	mov	r4, r3
 8004290:	4698      	mov	r8, r3
 8004292:	4606      	mov	r6, r0
 8004294:	f002 fc56 	bl	8006b44 <_localeconv_r>
 8004298:	6803      	ldr	r3, [r0, #0]
 800429a:	930f      	str	r3, [sp, #60]	; 0x3c
 800429c:	4618      	mov	r0, r3
 800429e:	f7fb ffcf 	bl	8000240 <strlen>
 80042a2:	900a      	str	r0, [sp, #40]	; 0x28
 80042a4:	b126      	cbz	r6, 80042b0 <_vfprintf_r+0x30>
 80042a6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80042a8:	b913      	cbnz	r3, 80042b0 <_vfprintf_r+0x30>
 80042aa:	4630      	mov	r0, r6
 80042ac:	f002 f990 	bl	80065d0 <__sinit>
 80042b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042b2:	07d8      	lsls	r0, r3, #31
 80042b4:	d405      	bmi.n	80042c2 <_vfprintf_r+0x42>
 80042b6:	89ab      	ldrh	r3, [r5, #12]
 80042b8:	0599      	lsls	r1, r3, #22
 80042ba:	d402      	bmi.n	80042c2 <_vfprintf_r+0x42>
 80042bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042be:	f002 fc47 	bl	8006b50 <__retarget_lock_acquire_recursive>
 80042c2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80042c6:	049a      	lsls	r2, r3, #18
 80042c8:	d406      	bmi.n	80042d8 <_vfprintf_r+0x58>
 80042ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042ce:	81ab      	strh	r3, [r5, #12]
 80042d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d6:	666b      	str	r3, [r5, #100]	; 0x64
 80042d8:	89ab      	ldrh	r3, [r5, #12]
 80042da:	071f      	lsls	r7, r3, #28
 80042dc:	d501      	bpl.n	80042e2 <_vfprintf_r+0x62>
 80042de:	692b      	ldr	r3, [r5, #16]
 80042e0:	b9bb      	cbnz	r3, 8004312 <_vfprintf_r+0x92>
 80042e2:	4629      	mov	r1, r5
 80042e4:	4630      	mov	r0, r6
 80042e6:	f001 fa2f 	bl	8005748 <__swsetup_r>
 80042ea:	b190      	cbz	r0, 8004312 <_vfprintf_r+0x92>
 80042ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042ee:	07dc      	lsls	r4, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_vfprintf_r+0x84>
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042fa:	b04b      	add	sp, #300	; 0x12c
 80042fc:	ecbd 8b04 	vpop	{d8-d9}
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004304:	89ab      	ldrh	r3, [r5, #12]
 8004306:	0598      	lsls	r0, r3, #22
 8004308:	d4f3      	bmi.n	80042f2 <_vfprintf_r+0x72>
 800430a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800430c:	f002 fc21 	bl	8006b52 <__retarget_lock_release_recursive>
 8004310:	e7ef      	b.n	80042f2 <_vfprintf_r+0x72>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	f003 021a 	and.w	r2, r3, #26
 8004318:	2a0a      	cmp	r2, #10
 800431a:	d116      	bne.n	800434a <_vfprintf_r+0xca>
 800431c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8004320:	2a00      	cmp	r2, #0
 8004322:	db12      	blt.n	800434a <_vfprintf_r+0xca>
 8004324:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8004326:	07d1      	lsls	r1, r2, #31
 8004328:	d404      	bmi.n	8004334 <_vfprintf_r+0xb4>
 800432a:	059a      	lsls	r2, r3, #22
 800432c:	d402      	bmi.n	8004334 <_vfprintf_r+0xb4>
 800432e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004330:	f002 fc0f 	bl	8006b52 <__retarget_lock_release_recursive>
 8004334:	4623      	mov	r3, r4
 8004336:	4652      	mov	r2, sl
 8004338:	4629      	mov	r1, r5
 800433a:	4630      	mov	r0, r6
 800433c:	b04b      	add	sp, #300	; 0x12c
 800433e:	ecbd 8b04 	vpop	{d8-d9}
 8004342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004346:	f001 b9bf 	b.w	80056c8 <__sbprintf>
 800434a:	2300      	movs	r3, #0
 800434c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8004350:	ed9f 8b97 	vldr	d8, [pc, #604]	; 80045b0 <_vfprintf_r+0x330>
 8004354:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8004358:	ac21      	add	r4, sp, #132	; 0x84
 800435a:	941e      	str	r4, [sp, #120]	; 0x78
 800435c:	9303      	str	r3, [sp, #12]
 800435e:	9308      	str	r3, [sp, #32]
 8004360:	930e      	str	r3, [sp, #56]	; 0x38
 8004362:	9310      	str	r3, [sp, #64]	; 0x40
 8004364:	930b      	str	r3, [sp, #44]	; 0x2c
 8004366:	4653      	mov	r3, sl
 8004368:	461f      	mov	r7, r3
 800436a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800436e:	b10a      	cbz	r2, 8004374 <_vfprintf_r+0xf4>
 8004370:	2a25      	cmp	r2, #37	; 0x25
 8004372:	d1f9      	bne.n	8004368 <_vfprintf_r+0xe8>
 8004374:	ebb7 090a 	subs.w	r9, r7, sl
 8004378:	d00d      	beq.n	8004396 <_vfprintf_r+0x116>
 800437a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800437c:	444b      	add	r3, r9
 800437e:	9320      	str	r3, [sp, #128]	; 0x80
 8004380:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004382:	3301      	adds	r3, #1
 8004384:	2b07      	cmp	r3, #7
 8004386:	e9c4 a900 	strd	sl, r9, [r4]
 800438a:	931f      	str	r3, [sp, #124]	; 0x7c
 800438c:	dc77      	bgt.n	800447e <_vfprintf_r+0x1fe>
 800438e:	3408      	adds	r4, #8
 8004390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004392:	444b      	add	r3, r9
 8004394:	930b      	str	r3, [sp, #44]	; 0x2c
 8004396:	783b      	ldrb	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f001 8150 	beq.w	800563e <_vfprintf_r+0x13be>
 800439e:	2200      	movs	r2, #0
 80043a0:	1c7b      	adds	r3, r7, #1
 80043a2:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 80043a6:	f04f 37ff 	mov.w	r7, #4294967295
 80043aa:	920c      	str	r2, [sp, #48]	; 0x30
 80043ac:	4693      	mov	fp, r2
 80043ae:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80043b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b6:	9204      	str	r2, [sp, #16]
 80043b8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	3b20      	subs	r3, #32
 80043be:	2b5a      	cmp	r3, #90	; 0x5a
 80043c0:	f200 85a7 	bhi.w	8004f12 <_vfprintf_r+0xc92>
 80043c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043c8:	05a5007d 	.word	0x05a5007d
 80043cc:	008505a5 	.word	0x008505a5
 80043d0:	05a505a5 	.word	0x05a505a5
 80043d4:	006505a5 	.word	0x006505a5
 80043d8:	05a505a5 	.word	0x05a505a5
 80043dc:	00920088 	.word	0x00920088
 80043e0:	008f05a5 	.word	0x008f05a5
 80043e4:	05a50095 	.word	0x05a50095
 80043e8:	00b100ae 	.word	0x00b100ae
 80043ec:	00b100b1 	.word	0x00b100b1
 80043f0:	00b100b1 	.word	0x00b100b1
 80043f4:	00b100b1 	.word	0x00b100b1
 80043f8:	00b100b1 	.word	0x00b100b1
 80043fc:	05a505a5 	.word	0x05a505a5
 8004400:	05a505a5 	.word	0x05a505a5
 8004404:	05a505a5 	.word	0x05a505a5
 8004408:	013305a5 	.word	0x013305a5
 800440c:	00df05a5 	.word	0x00df05a5
 8004410:	013300fc 	.word	0x013300fc
 8004414:	01330133 	.word	0x01330133
 8004418:	05a505a5 	.word	0x05a505a5
 800441c:	05a505a5 	.word	0x05a505a5
 8004420:	05a500c2 	.word	0x05a500c2
 8004424:	046905a5 	.word	0x046905a5
 8004428:	05a505a5 	.word	0x05a505a5
 800442c:	04b705a5 	.word	0x04b705a5
 8004430:	04db05a5 	.word	0x04db05a5
 8004434:	05a505a5 	.word	0x05a505a5
 8004438:	05a50501 	.word	0x05a50501
 800443c:	05a505a5 	.word	0x05a505a5
 8004440:	05a505a5 	.word	0x05a505a5
 8004444:	05a505a5 	.word	0x05a505a5
 8004448:	013305a5 	.word	0x013305a5
 800444c:	00df05a5 	.word	0x00df05a5
 8004450:	013300fe 	.word	0x013300fe
 8004454:	01330133 	.word	0x01330133
 8004458:	00fe00c5 	.word	0x00fe00c5
 800445c:	05a500d9 	.word	0x05a500d9
 8004460:	05a500d2 	.word	0x05a500d2
 8004464:	046b043e 	.word	0x046b043e
 8004468:	00d904a4 	.word	0x00d904a4
 800446c:	04b705a5 	.word	0x04b705a5
 8004470:	04dd007b 	.word	0x04dd007b
 8004474:	05a505a5 	.word	0x05a505a5
 8004478:	05a50522 	.word	0x05a50522
 800447c:	007b      	.short	0x007b
 800447e:	aa1e      	add	r2, sp, #120	; 0x78
 8004480:	4629      	mov	r1, r5
 8004482:	4630      	mov	r0, r6
 8004484:	f003 fbcf 	bl	8007c26 <__sprint_r>
 8004488:	2800      	cmp	r0, #0
 800448a:	f040 812a 	bne.w	80046e2 <_vfprintf_r+0x462>
 800448e:	ac21      	add	r4, sp, #132	; 0x84
 8004490:	e77e      	b.n	8004390 <_vfprintf_r+0x110>
 8004492:	4630      	mov	r0, r6
 8004494:	f002 fb56 	bl	8006b44 <_localeconv_r>
 8004498:	6843      	ldr	r3, [r0, #4]
 800449a:	9310      	str	r3, [sp, #64]	; 0x40
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb fecf 	bl	8000240 <strlen>
 80044a2:	900e      	str	r0, [sp, #56]	; 0x38
 80044a4:	4630      	mov	r0, r6
 80044a6:	f002 fb4d 	bl	8006b44 <_localeconv_r>
 80044aa:	6883      	ldr	r3, [r0, #8]
 80044ac:	9308      	str	r3, [sp, #32]
 80044ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b0:	b12b      	cbz	r3, 80044be <_vfprintf_r+0x23e>
 80044b2:	9b08      	ldr	r3, [sp, #32]
 80044b4:	b11b      	cbz	r3, 80044be <_vfprintf_r+0x23e>
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b10b      	cbz	r3, 80044be <_vfprintf_r+0x23e>
 80044ba:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80044be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c0:	e777      	b.n	80043b2 <_vfprintf_r+0x132>
 80044c2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f9      	bne.n	80044be <_vfprintf_r+0x23e>
 80044ca:	2320      	movs	r3, #32
 80044cc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80044d0:	e7f5      	b.n	80044be <_vfprintf_r+0x23e>
 80044d2:	f04b 0b01 	orr.w	fp, fp, #1
 80044d6:	e7f2      	b.n	80044be <_vfprintf_r+0x23e>
 80044d8:	f858 3b04 	ldr.w	r3, [r8], #4
 80044dc:	930c      	str	r3, [sp, #48]	; 0x30
 80044de:	2b00      	cmp	r3, #0
 80044e0:	daed      	bge.n	80044be <_vfprintf_r+0x23e>
 80044e2:	425b      	negs	r3, r3
 80044e4:	930c      	str	r3, [sp, #48]	; 0x30
 80044e6:	f04b 0b04 	orr.w	fp, fp, #4
 80044ea:	e7e8      	b.n	80044be <_vfprintf_r+0x23e>
 80044ec:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 80044f0:	e7e5      	b.n	80044be <_vfprintf_r+0x23e>
 80044f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f8:	9204      	str	r2, [sp, #16]
 80044fa:	2a2a      	cmp	r2, #42	; 0x2a
 80044fc:	d110      	bne.n	8004520 <_vfprintf_r+0x2a0>
 80044fe:	f858 7b04 	ldr.w	r7, [r8], #4
 8004502:	9309      	str	r3, [sp, #36]	; 0x24
 8004504:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 8004508:	e7d9      	b.n	80044be <_vfprintf_r+0x23e>
 800450a:	210a      	movs	r1, #10
 800450c:	fb01 2707 	mla	r7, r1, r7, r2
 8004510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004514:	9204      	str	r2, [sp, #16]
 8004516:	9a04      	ldr	r2, [sp, #16]
 8004518:	3a30      	subs	r2, #48	; 0x30
 800451a:	2a09      	cmp	r2, #9
 800451c:	d9f5      	bls.n	800450a <_vfprintf_r+0x28a>
 800451e:	e74b      	b.n	80043b8 <_vfprintf_r+0x138>
 8004520:	2700      	movs	r7, #0
 8004522:	e7f8      	b.n	8004516 <_vfprintf_r+0x296>
 8004524:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8004528:	e7c9      	b.n	80044be <_vfprintf_r+0x23e>
 800452a:	2200      	movs	r2, #0
 800452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452e:	920c      	str	r2, [sp, #48]	; 0x30
 8004530:	9a04      	ldr	r2, [sp, #16]
 8004532:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004534:	3a30      	subs	r2, #48	; 0x30
 8004536:	200a      	movs	r0, #10
 8004538:	fb00 2201 	mla	r2, r0, r1, r2
 800453c:	920c      	str	r2, [sp, #48]	; 0x30
 800453e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004542:	9204      	str	r2, [sp, #16]
 8004544:	3a30      	subs	r2, #48	; 0x30
 8004546:	2a09      	cmp	r2, #9
 8004548:	d9f2      	bls.n	8004530 <_vfprintf_r+0x2b0>
 800454a:	e735      	b.n	80043b8 <_vfprintf_r+0x138>
 800454c:	f04b 0b08 	orr.w	fp, fp, #8
 8004550:	e7b5      	b.n	80044be <_vfprintf_r+0x23e>
 8004552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b68      	cmp	r3, #104	; 0x68
 8004558:	bf01      	itttt	eq
 800455a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 800455c:	3301      	addeq	r3, #1
 800455e:	9309      	streq	r3, [sp, #36]	; 0x24
 8004560:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8004564:	bf18      	it	ne
 8004566:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800456a:	e7a8      	b.n	80044be <_vfprintf_r+0x23e>
 800456c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b6c      	cmp	r3, #108	; 0x6c
 8004572:	d105      	bne.n	8004580 <_vfprintf_r+0x300>
 8004574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004576:	3301      	adds	r3, #1
 8004578:	9309      	str	r3, [sp, #36]	; 0x24
 800457a:	f04b 0b20 	orr.w	fp, fp, #32
 800457e:	e79e      	b.n	80044be <_vfprintf_r+0x23e>
 8004580:	f04b 0b10 	orr.w	fp, fp, #16
 8004584:	e79b      	b.n	80044be <_vfprintf_r+0x23e>
 8004586:	4642      	mov	r2, r8
 8004588:	2000      	movs	r0, #0
 800458a:	f852 3b04 	ldr.w	r3, [r2], #4
 800458e:	9205      	str	r2, [sp, #20]
 8004590:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8004594:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8004598:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800459c:	9002      	str	r0, [sp, #8]
 800459e:	2701      	movs	r7, #1
 80045a0:	4681      	mov	r9, r0
 80045a2:	4680      	mov	r8, r0
 80045a4:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 80045a8:	e19b      	b.n	80048e2 <_vfprintf_r+0x662>
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w
	...
 80045b8:	ffffffff 	.word	0xffffffff
 80045bc:	7fefffff 	.word	0x7fefffff
 80045c0:	f04b 0b10 	orr.w	fp, fp, #16
 80045c4:	f01b 0f20 	tst.w	fp, #32
 80045c8:	d016      	beq.n	80045f8 <_vfprintf_r+0x378>
 80045ca:	f108 0807 	add.w	r8, r8, #7
 80045ce:	f028 0307 	bic.w	r3, r8, #7
 80045d2:	461a      	mov	r2, r3
 80045d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80045d8:	f852 8b08 	ldr.w	r8, [r2], #8
 80045dc:	9205      	str	r2, [sp, #20]
 80045de:	f1b9 0f00 	cmp.w	r9, #0
 80045e2:	da07      	bge.n	80045f4 <_vfprintf_r+0x374>
 80045e4:	f1d8 0800 	rsbs	r8, r8, #0
 80045e8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80045ec:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80045f0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80045f4:	2301      	movs	r3, #1
 80045f6:	e365      	b.n	8004cc4 <_vfprintf_r+0xa44>
 80045f8:	4642      	mov	r2, r8
 80045fa:	f01b 0f10 	tst.w	fp, #16
 80045fe:	f852 3b04 	ldr.w	r3, [r2], #4
 8004602:	9205      	str	r2, [sp, #20]
 8004604:	d003      	beq.n	800460e <_vfprintf_r+0x38e>
 8004606:	4698      	mov	r8, r3
 8004608:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800460c:	e7e7      	b.n	80045de <_vfprintf_r+0x35e>
 800460e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004612:	d004      	beq.n	800461e <_vfprintf_r+0x39e>
 8004614:	fa0f f883 	sxth.w	r8, r3
 8004618:	f343 39c0 	sbfx	r9, r3, #15, #1
 800461c:	e7df      	b.n	80045de <_vfprintf_r+0x35e>
 800461e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8004622:	d0f0      	beq.n	8004606 <_vfprintf_r+0x386>
 8004624:	fa4f f883 	sxtb.w	r8, r3
 8004628:	f343 19c0 	sbfx	r9, r3, #7, #1
 800462c:	e7d7      	b.n	80045de <_vfprintf_r+0x35e>
 800462e:	f108 0807 	add.w	r8, r8, #7
 8004632:	f028 0307 	bic.w	r3, r8, #7
 8004636:	ecb3 8b02 	vldmia	r3!, {d8}
 800463a:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 80045b8 <_vfprintf_r+0x338>
 800463e:	eeb0 6bc8 	vabs.f64	d6, d8
 8004642:	eeb4 6b47 	vcmp.f64	d6, d7
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	dd18      	ble.n	8004680 <_vfprintf_r+0x400>
 800464e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	d502      	bpl.n	800465e <_vfprintf_r+0x3de>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800465e:	4a28      	ldr	r2, [pc, #160]	; (8004700 <_vfprintf_r+0x480>)
 8004660:	4828      	ldr	r0, [pc, #160]	; (8004704 <_vfprintf_r+0x484>)
 8004662:	9b04      	ldr	r3, [sp, #16]
 8004664:	2b47      	cmp	r3, #71	; 0x47
 8004666:	bfd4      	ite	le
 8004668:	4692      	movle	sl, r2
 800466a:	4682      	movgt	sl, r0
 800466c:	2300      	movs	r3, #0
 800466e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	2703      	movs	r7, #3
 8004676:	4699      	mov	r9, r3
 8004678:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800467c:	4698      	mov	r8, r3
 800467e:	e130      	b.n	80048e2 <_vfprintf_r+0x662>
 8004680:	eeb4 8b48 	vcmp.f64	d8, d8
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d70a      	bvc.n	80046a0 <_vfprintf_r+0x420>
 800468a:	ee18 3a90 	vmov	r3, s17
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfb8      	it	lt
 8004692:	232d      	movlt	r3, #45	; 0x2d
 8004694:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <_vfprintf_r+0x488>)
 8004696:	481d      	ldr	r0, [pc, #116]	; (800470c <_vfprintf_r+0x48c>)
 8004698:	bfb8      	it	lt
 800469a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800469e:	e7e0      	b.n	8004662 <_vfprintf_r+0x3e2>
 80046a0:	9b04      	ldr	r3, [sp, #16]
 80046a2:	f023 0920 	bic.w	r9, r3, #32
 80046a6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80046aa:	d131      	bne.n	8004710 <_vfprintf_r+0x490>
 80046ac:	2330      	movs	r3, #48	; 0x30
 80046ae:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80046b2:	9b04      	ldr	r3, [sp, #16]
 80046b4:	2b61      	cmp	r3, #97	; 0x61
 80046b6:	bf0c      	ite	eq
 80046b8:	2378      	moveq	r3, #120	; 0x78
 80046ba:	2358      	movne	r3, #88	; 0x58
 80046bc:	2f63      	cmp	r7, #99	; 0x63
 80046be:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80046c2:	f04b 0b02 	orr.w	fp, fp, #2
 80046c6:	f340 81e3 	ble.w	8004a90 <_vfprintf_r+0x810>
 80046ca:	1c79      	adds	r1, r7, #1
 80046cc:	4630      	mov	r0, r6
 80046ce:	f002 fab5 	bl	8006c3c <_malloc_r>
 80046d2:	4682      	mov	sl, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f040 81e0 	bne.w	8004a9a <_vfprintf_r+0x81a>
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e0:	81ab      	strh	r3, [r5, #12]
 80046e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e4:	07d9      	lsls	r1, r3, #31
 80046e6:	d405      	bmi.n	80046f4 <_vfprintf_r+0x474>
 80046e8:	89ab      	ldrh	r3, [r5, #12]
 80046ea:	059a      	lsls	r2, r3, #22
 80046ec:	d402      	bmi.n	80046f4 <_vfprintf_r+0x474>
 80046ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046f0:	f002 fa2f 	bl	8006b52 <__retarget_lock_release_recursive>
 80046f4:	89ab      	ldrh	r3, [r5, #12]
 80046f6:	065b      	lsls	r3, r3, #25
 80046f8:	f57f adfe 	bpl.w	80042f8 <_vfprintf_r+0x78>
 80046fc:	e5f9      	b.n	80042f2 <_vfprintf_r+0x72>
 80046fe:	bf00      	nop
 8004700:	08008bf4 	.word	0x08008bf4
 8004704:	08008bf8 	.word	0x08008bf8
 8004708:	08008bfc 	.word	0x08008bfc
 800470c:	08008c00 	.word	0x08008c00
 8004710:	1c7b      	adds	r3, r7, #1
 8004712:	f000 81c4 	beq.w	8004a9e <_vfprintf_r+0x81e>
 8004716:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800471a:	f040 81c4 	bne.w	8004aa6 <_vfprintf_r+0x826>
 800471e:	2f00      	cmp	r7, #0
 8004720:	f040 81c1 	bne.w	8004aa6 <_vfprintf_r+0x826>
 8004724:	9702      	str	r7, [sp, #8]
 8004726:	2701      	movs	r7, #1
 8004728:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800472c:	930d      	str	r3, [sp, #52]	; 0x34
 800472e:	ee18 3a90 	vmov	r3, s17
 8004732:	2b00      	cmp	r3, #0
 8004734:	f280 81ba 	bge.w	8004aac <_vfprintf_r+0x82c>
 8004738:	eeb1 9b48 	vneg.f64	d9, d8
 800473c:	232d      	movs	r3, #45	; 0x2d
 800473e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8004742:	9313      	str	r3, [sp, #76]	; 0x4c
 8004744:	f040 81cb 	bne.w	8004ade <_vfprintf_r+0x85e>
 8004748:	eeb0 0b49 	vmov.f64	d0, d9
 800474c:	a818      	add	r0, sp, #96	; 0x60
 800474e:	f003 f9bf 	bl	8007ad0 <frexp>
 8004752:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8004756:	ee20 0b07 	vmul.f64	d0, d0, d7
 800475a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	bf08      	it	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	bf08      	it	eq
 800476a:	9318      	streq	r3, [sp, #96]	; 0x60
 800476c:	49b7      	ldr	r1, [pc, #732]	; (8004a4c <_vfprintf_r+0x7cc>)
 800476e:	4bb8      	ldr	r3, [pc, #736]	; (8004a50 <_vfprintf_r+0x7d0>)
 8004770:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8004774:	2a61      	cmp	r2, #97	; 0x61
 8004776:	bf18      	it	ne
 8004778:	4619      	movne	r1, r3
 800477a:	1e7a      	subs	r2, r7, #1
 800477c:	4653      	mov	r3, sl
 800477e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004782:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8004786:	f1b2 3fff 	cmp.w	r2, #4294967295
 800478a:	ee16 ca90 	vmov	ip, s13
 800478e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8004792:	f803 0b01 	strb.w	r0, [r3], #1
 8004796:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800479a:	4610      	mov	r0, r2
 800479c:	ee30 0b46 	vsub.f64	d0, d0, d6
 80047a0:	d006      	beq.n	80047b0 <_vfprintf_r+0x530>
 80047a2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80047ae:	d1e6      	bne.n	800477e <_vfprintf_r+0x4fe>
 80047b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80047b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	dc09      	bgt.n	80047d2 <_vfprintf_r+0x552>
 80047be:	eeb4 0b47 	vcmp.f64	d0, d7
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	f040 8184 	bne.w	8004ad2 <_vfprintf_r+0x852>
 80047ca:	f01c 0f01 	tst.w	ip, #1
 80047ce:	f000 8180 	beq.w	8004ad2 <_vfprintf_r+0x852>
 80047d2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80047d6:	931c      	str	r3, [sp, #112]	; 0x70
 80047d8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80047dc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80047de:	1e42      	subs	r2, r0, #1
 80047e0:	921c      	str	r2, [sp, #112]	; 0x70
 80047e2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80047e6:	4562      	cmp	r2, ip
 80047e8:	f000 8164 	beq.w	8004ab4 <_vfprintf_r+0x834>
 80047ec:	2a39      	cmp	r2, #57	; 0x39
 80047ee:	bf16      	itet	ne
 80047f0:	3201      	addne	r2, #1
 80047f2:	7a8a      	ldrbeq	r2, [r1, #10]
 80047f4:	b2d2      	uxtbne	r2, r2
 80047f6:	f800 2c01 	strb.w	r2, [r0, #-1]
 80047fa:	eba3 030a 	sub.w	r3, r3, sl
 80047fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004802:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	f040 81ac 	bne.w	8004b64 <_vfprintf_r+0x8e4>
 800480c:	f118 0f03 	cmn.w	r8, #3
 8004810:	db02      	blt.n	8004818 <_vfprintf_r+0x598>
 8004812:	4547      	cmp	r7, r8
 8004814:	f280 81ce 	bge.w	8004bb4 <_vfprintf_r+0x934>
 8004818:	9b04      	ldr	r3, [sp, #16]
 800481a:	3b02      	subs	r3, #2
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	9904      	ldr	r1, [sp, #16]
 8004820:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004824:	f021 0120 	bic.w	r1, r1, #32
 8004828:	2941      	cmp	r1, #65	; 0x41
 800482a:	bf08      	it	eq
 800482c:	320f      	addeq	r2, #15
 800482e:	f108 33ff 	add.w	r3, r8, #4294967295
 8004832:	bf06      	itte	eq
 8004834:	b2d2      	uxtbeq	r2, r2
 8004836:	2101      	moveq	r1, #1
 8004838:	2100      	movne	r1, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	9318      	str	r3, [sp, #96]	; 0x60
 800483e:	bfb8      	it	lt
 8004840:	f1c8 0301 	rsblt	r3, r8, #1
 8004844:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8004848:	bfb4      	ite	lt
 800484a:	222d      	movlt	r2, #45	; 0x2d
 800484c:	222b      	movge	r2, #43	; 0x2b
 800484e:	2b09      	cmp	r3, #9
 8004850:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8004854:	f340 819d 	ble.w	8004b92 <_vfprintf_r+0x912>
 8004858:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800485c:	200a      	movs	r0, #10
 800485e:	4611      	mov	r1, r2
 8004860:	fb93 f7f0 	sdiv	r7, r3, r0
 8004864:	fb00 3017 	mls	r0, r0, r7, r3
 8004868:	3030      	adds	r0, #48	; 0x30
 800486a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800486e:	4618      	mov	r0, r3
 8004870:	2863      	cmp	r0, #99	; 0x63
 8004872:	f102 32ff 	add.w	r2, r2, #4294967295
 8004876:	463b      	mov	r3, r7
 8004878:	dcf0      	bgt.n	800485c <_vfprintf_r+0x5dc>
 800487a:	3330      	adds	r3, #48	; 0x30
 800487c:	1e88      	subs	r0, r1, #2
 800487e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004882:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8004886:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800488a:	4603      	mov	r3, r0
 800488c:	42bb      	cmp	r3, r7
 800488e:	f0c0 817b 	bcc.w	8004b88 <_vfprintf_r+0x908>
 8004892:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8004896:	1a52      	subs	r2, r2, r1
 8004898:	42b8      	cmp	r0, r7
 800489a:	bf88      	it	hi
 800489c:	2200      	movhi	r2, #0
 800489e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 80048a2:	441a      	add	r2, r3
 80048a4:	ab1a      	add	r3, sp, #104	; 0x68
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	9a03      	ldr	r2, [sp, #12]
 80048aa:	9311      	str	r3, [sp, #68]	; 0x44
 80048ac:	2a01      	cmp	r2, #1
 80048ae:	eb03 0702 	add.w	r7, r3, r2
 80048b2:	dc02      	bgt.n	80048ba <_vfprintf_r+0x63a>
 80048b4:	f01b 0f01 	tst.w	fp, #1
 80048b8:	d001      	beq.n	80048be <_vfprintf_r+0x63e>
 80048ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048bc:	441f      	add	r7, r3
 80048be:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	930d      	str	r3, [sp, #52]	; 0x34
 80048c8:	2300      	movs	r3, #0
 80048ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80048ce:	4698      	mov	r8, r3
 80048d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048d2:	b113      	cbz	r3, 80048da <_vfprintf_r+0x65a>
 80048d4:	232d      	movs	r3, #45	; 0x2d
 80048d6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80048da:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80048de:	f04f 0900 	mov.w	r9, #0
 80048e2:	45b9      	cmp	r9, r7
 80048e4:	464b      	mov	r3, r9
 80048e6:	bfb8      	it	lt
 80048e8:	463b      	movlt	r3, r7
 80048ea:	930d      	str	r3, [sp, #52]	; 0x34
 80048ec:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80048f0:	b113      	cbz	r3, 80048f8 <_vfprintf_r+0x678>
 80048f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048f4:	3301      	adds	r3, #1
 80048f6:	930d      	str	r3, [sp, #52]	; 0x34
 80048f8:	f01b 0302 	ands.w	r3, fp, #2
 80048fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80048fe:	bf1e      	ittt	ne
 8004900:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8004902:	3302      	addne	r3, #2
 8004904:	930d      	strne	r3, [sp, #52]	; 0x34
 8004906:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800490a:	9314      	str	r3, [sp, #80]	; 0x50
 800490c:	d120      	bne.n	8004950 <_vfprintf_r+0x6d0>
 800490e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	dd1b      	ble.n	8004950 <_vfprintf_r+0x6d0>
 8004918:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800491c:	494d      	ldr	r1, [pc, #308]	; (8004a54 <_vfprintf_r+0x7d4>)
 800491e:	6021      	str	r1, [r4, #0]
 8004920:	2b10      	cmp	r3, #16
 8004922:	f102 0201 	add.w	r2, r2, #1
 8004926:	f104 0008 	add.w	r0, r4, #8
 800492a:	f300 8302 	bgt.w	8004f32 <_vfprintf_r+0xcb2>
 800492e:	eb0c 0103 	add.w	r1, ip, r3
 8004932:	2a07      	cmp	r2, #7
 8004934:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	f340 830f 	ble.w	8004f5c <_vfprintf_r+0xcdc>
 800493e:	aa1e      	add	r2, sp, #120	; 0x78
 8004940:	4629      	mov	r1, r5
 8004942:	4630      	mov	r0, r6
 8004944:	f003 f96f 	bl	8007c26 <__sprint_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	f040 8655 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800494e:	ac21      	add	r4, sp, #132	; 0x84
 8004950:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8004954:	b173      	cbz	r3, 8004974 <_vfprintf_r+0x6f4>
 8004956:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	2301      	movs	r3, #1
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004962:	3301      	adds	r3, #1
 8004964:	9320      	str	r3, [sp, #128]	; 0x80
 8004966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004968:	3301      	adds	r3, #1
 800496a:	2b07      	cmp	r3, #7
 800496c:	931f      	str	r3, [sp, #124]	; 0x7c
 800496e:	f300 82f7 	bgt.w	8004f60 <_vfprintf_r+0xce0>
 8004972:	3408      	adds	r4, #8
 8004974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004976:	b16b      	cbz	r3, 8004994 <_vfprintf_r+0x714>
 8004978:	ab17      	add	r3, sp, #92	; 0x5c
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	2302      	movs	r3, #2
 800497e:	6063      	str	r3, [r4, #4]
 8004980:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004982:	3302      	adds	r3, #2
 8004984:	9320      	str	r3, [sp, #128]	; 0x80
 8004986:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004988:	3301      	adds	r3, #1
 800498a:	2b07      	cmp	r3, #7
 800498c:	931f      	str	r3, [sp, #124]	; 0x7c
 800498e:	f300 82f1 	bgt.w	8004f74 <_vfprintf_r+0xcf4>
 8004992:	3408      	adds	r4, #8
 8004994:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d120      	bne.n	80049dc <_vfprintf_r+0x75c>
 800499a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dd1b      	ble.n	80049dc <_vfprintf_r+0x75c>
 80049a4:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 80049a8:	492b      	ldr	r1, [pc, #172]	; (8004a58 <_vfprintf_r+0x7d8>)
 80049aa:	6021      	str	r1, [r4, #0]
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	f102 0201 	add.w	r2, r2, #1
 80049b2:	f104 0008 	add.w	r0, r4, #8
 80049b6:	f300 82e7 	bgt.w	8004f88 <_vfprintf_r+0xd08>
 80049ba:	eb0c 0103 	add.w	r1, ip, r3
 80049be:	2a07      	cmp	r2, #7
 80049c0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	f340 82f4 	ble.w	8004fb2 <_vfprintf_r+0xd32>
 80049ca:	aa1e      	add	r2, sp, #120	; 0x78
 80049cc:	4629      	mov	r1, r5
 80049ce:	4630      	mov	r0, r6
 80049d0:	f003 f929 	bl	8007c26 <__sprint_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f040 860f 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80049da:	ac21      	add	r4, sp, #132	; 0x84
 80049dc:	eba9 0907 	sub.w	r9, r9, r7
 80049e0:	f1b9 0f00 	cmp.w	r9, #0
 80049e4:	dd1c      	ble.n	8004a20 <_vfprintf_r+0x7a0>
 80049e6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80049ea:	481b      	ldr	r0, [pc, #108]	; (8004a58 <_vfprintf_r+0x7d8>)
 80049ec:	6020      	str	r0, [r4, #0]
 80049ee:	f1b9 0f10 	cmp.w	r9, #16
 80049f2:	f102 0201 	add.w	r2, r2, #1
 80049f6:	f104 0108 	add.w	r1, r4, #8
 80049fa:	f300 82dc 	bgt.w	8004fb6 <_vfprintf_r+0xd36>
 80049fe:	444b      	add	r3, r9
 8004a00:	2a07      	cmp	r2, #7
 8004a02:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8004a06:	f8c4 9004 	str.w	r9, [r4, #4]
 8004a0a:	f340 82e8 	ble.w	8004fde <_vfprintf_r+0xd5e>
 8004a0e:	aa1e      	add	r2, sp, #120	; 0x78
 8004a10:	4629      	mov	r1, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	f003 f907 	bl	8007c26 <__sprint_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	f040 85ed 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004a1e:	ac21      	add	r4, sp, #132	; 0x84
 8004a20:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004a24:	9820      	ldr	r0, [sp, #128]	; 0x80
 8004a26:	f040 82e1 	bne.w	8004fec <_vfprintf_r+0xd6c>
 8004a2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4438      	add	r0, r7
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	e9c4 a700 	strd	sl, r7, [r4]
 8004a36:	9020      	str	r0, [sp, #128]	; 0x80
 8004a38:	931f      	str	r3, [sp, #124]	; 0x7c
 8004a3a:	f300 831c 	bgt.w	8005076 <_vfprintf_r+0xdf6>
 8004a3e:	3408      	adds	r4, #8
 8004a40:	f01b 0f04 	tst.w	fp, #4
 8004a44:	f040 85b7 	bne.w	80055b6 <_vfprintf_r+0x1336>
 8004a48:	e008      	b.n	8004a5c <_vfprintf_r+0x7dc>
 8004a4a:	bf00      	nop
 8004a4c:	08008c04 	.word	0x08008c04
 8004a50:	08008c15 	.word	0x08008c15
 8004a54:	08008c28 	.word	0x08008c28
 8004a58:	08008c38 	.word	0x08008c38
 8004a5c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8004a60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a62:	428a      	cmp	r2, r1
 8004a64:	bfac      	ite	ge
 8004a66:	189b      	addge	r3, r3, r2
 8004a68:	185b      	addlt	r3, r3, r1
 8004a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a6e:	b13b      	cbz	r3, 8004a80 <_vfprintf_r+0x800>
 8004a70:	aa1e      	add	r2, sp, #120	; 0x78
 8004a72:	4629      	mov	r1, r5
 8004a74:	4630      	mov	r0, r6
 8004a76:	f003 f8d6 	bl	8007c26 <__sprint_r>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f040 85bc 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004a80:	2300      	movs	r3, #0
 8004a82:	931f      	str	r3, [sp, #124]	; 0x7c
 8004a84:	9b02      	ldr	r3, [sp, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 85d3 	bne.w	8005632 <_vfprintf_r+0x13b2>
 8004a8c:	ac21      	add	r4, sp, #132	; 0x84
 8004a8e:	e0e6      	b.n	8004c5e <_vfprintf_r+0x9de>
 8004a90:	2300      	movs	r3, #0
 8004a92:	9302      	str	r3, [sp, #8]
 8004a94:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8004a98:	e646      	b.n	8004728 <_vfprintf_r+0x4a8>
 8004a9a:	9002      	str	r0, [sp, #8]
 8004a9c:	e644      	b.n	8004728 <_vfprintf_r+0x4a8>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9302      	str	r3, [sp, #8]
 8004aa2:	2706      	movs	r7, #6
 8004aa4:	e640      	b.n	8004728 <_vfprintf_r+0x4a8>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9302      	str	r3, [sp, #8]
 8004aaa:	e63d      	b.n	8004728 <_vfprintf_r+0x4a8>
 8004aac:	2300      	movs	r3, #0
 8004aae:	eeb0 9b48 	vmov.f64	d9, d8
 8004ab2:	e644      	b.n	800473e <_vfprintf_r+0x4be>
 8004ab4:	f800 ec01 	strb.w	lr, [r0, #-1]
 8004ab8:	e690      	b.n	80047dc <_vfprintf_r+0x55c>
 8004aba:	f802 eb01 	strb.w	lr, [r2], #1
 8004abe:	ebac 0102 	sub.w	r1, ip, r2
 8004ac2:	2900      	cmp	r1, #0
 8004ac4:	daf9      	bge.n	8004aba <_vfprintf_r+0x83a>
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	3001      	adds	r0, #1
 8004aca:	bfb8      	it	lt
 8004acc:	2200      	movlt	r2, #0
 8004ace:	4413      	add	r3, r2
 8004ad0:	e693      	b.n	80047fa <_vfprintf_r+0x57a>
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	eb03 0c00 	add.w	ip, r3, r0
 8004ad8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004adc:	e7ef      	b.n	8004abe <_vfprintf_r+0x83e>
 8004ade:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8004ae2:	d006      	beq.n	8004af2 <_vfprintf_r+0x872>
 8004ae4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8004ae8:	d119      	bne.n	8004b1e <_vfprintf_r+0x89e>
 8004aea:	f107 0801 	add.w	r8, r7, #1
 8004aee:	2102      	movs	r1, #2
 8004af0:	e001      	b.n	8004af6 <_vfprintf_r+0x876>
 8004af2:	46b8      	mov	r8, r7
 8004af4:	2103      	movs	r1, #3
 8004af6:	ab1c      	add	r3, sp, #112	; 0x70
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	ab19      	add	r3, sp, #100	; 0x64
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4642      	mov	r2, r8
 8004b00:	ab18      	add	r3, sp, #96	; 0x60
 8004b02:	4630      	mov	r0, r6
 8004b04:	eeb0 0b49 	vmov.f64	d0, d9
 8004b08:	f000 ff12 	bl	8005930 <_dtoa_r>
 8004b0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b10:	4682      	mov	sl, r0
 8004b12:	d106      	bne.n	8004b22 <_vfprintf_r+0x8a2>
 8004b14:	f01b 0f01 	tst.w	fp, #1
 8004b18:	d103      	bne.n	8004b22 <_vfprintf_r+0x8a2>
 8004b1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004b1c:	e66d      	b.n	80047fa <_vfprintf_r+0x57a>
 8004b1e:	46b8      	mov	r8, r7
 8004b20:	e7e5      	b.n	8004aee <_vfprintf_r+0x86e>
 8004b22:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8004b26:	eb0a 0308 	add.w	r3, sl, r8
 8004b2a:	d10d      	bne.n	8004b48 <_vfprintf_r+0x8c8>
 8004b2c:	f89a 2000 	ldrb.w	r2, [sl]
 8004b30:	2a30      	cmp	r2, #48	; 0x30
 8004b32:	d107      	bne.n	8004b44 <_vfprintf_r+0x8c4>
 8004b34:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	bf1c      	itt	ne
 8004b3e:	f1c8 0201 	rsbne	r2, r8, #1
 8004b42:	9218      	strne	r2, [sp, #96]	; 0x60
 8004b44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004b46:	4413      	add	r3, r2
 8004b48:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	bf08      	it	eq
 8004b52:	931c      	streq	r3, [sp, #112]	; 0x70
 8004b54:	2130      	movs	r1, #48	; 0x30
 8004b56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d9de      	bls.n	8004b1a <_vfprintf_r+0x89a>
 8004b5c:	1c50      	adds	r0, r2, #1
 8004b5e:	901c      	str	r0, [sp, #112]	; 0x70
 8004b60:	7011      	strb	r1, [r2, #0]
 8004b62:	e7f8      	b.n	8004b56 <_vfprintf_r+0x8d6>
 8004b64:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8004b68:	f47f ae59 	bne.w	800481e <_vfprintf_r+0x59e>
 8004b6c:	f00b 0301 	and.w	r3, fp, #1
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	ea43 0307 	orr.w	r3, r3, r7
 8004b78:	dd18      	ble.n	8004bac <_vfprintf_r+0x92c>
 8004b7a:	b38b      	cbz	r3, 8004be0 <_vfprintf_r+0x960>
 8004b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b7e:	4443      	add	r3, r8
 8004b80:	441f      	add	r7, r3
 8004b82:	2366      	movs	r3, #102	; 0x66
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	e030      	b.n	8004bea <_vfprintf_r+0x96a>
 8004b88:	f813 cb01 	ldrb.w	ip, [r3], #1
 8004b8c:	f802 cb01 	strb.w	ip, [r2], #1
 8004b90:	e67c      	b.n	800488c <_vfprintf_r+0x60c>
 8004b92:	b941      	cbnz	r1, 8004ba6 <_vfprintf_r+0x926>
 8004b94:	2230      	movs	r2, #48	; 0x30
 8004b96:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8004b9a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8004b9e:	3330      	adds	r3, #48	; 0x30
 8004ba0:	f802 3b01 	strb.w	r3, [r2], #1
 8004ba4:	e67e      	b.n	80048a4 <_vfprintf_r+0x624>
 8004ba6:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8004baa:	e7f8      	b.n	8004b9e <_vfprintf_r+0x91e>
 8004bac:	b1d3      	cbz	r3, 8004be4 <_vfprintf_r+0x964>
 8004bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	e7e5      	b.n	8004b80 <_vfprintf_r+0x900>
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	4543      	cmp	r3, r8
 8004bb8:	dc07      	bgt.n	8004bca <_vfprintf_r+0x94a>
 8004bba:	f01b 0f01 	tst.w	fp, #1
 8004bbe:	d02a      	beq.n	8004c16 <_vfprintf_r+0x996>
 8004bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc2:	eb08 0703 	add.w	r7, r8, r3
 8004bc6:	2367      	movs	r3, #103	; 0x67
 8004bc8:	e7dc      	b.n	8004b84 <_vfprintf_r+0x904>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bce:	f1b8 0f00 	cmp.w	r8, #0
 8004bd2:	eb03 0702 	add.w	r7, r3, r2
 8004bd6:	dcf6      	bgt.n	8004bc6 <_vfprintf_r+0x946>
 8004bd8:	f1c8 0301 	rsb	r3, r8, #1
 8004bdc:	441f      	add	r7, r3
 8004bde:	e7f2      	b.n	8004bc6 <_vfprintf_r+0x946>
 8004be0:	4647      	mov	r7, r8
 8004be2:	e7ce      	b.n	8004b82 <_vfprintf_r+0x902>
 8004be4:	2366      	movs	r3, #102	; 0x66
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	2701      	movs	r7, #1
 8004bea:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8004bee:	9307      	str	r3, [sp, #28]
 8004bf0:	d025      	beq.n	8004c3e <_vfprintf_r+0x9be>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f1b8 0f00 	cmp.w	r8, #0
 8004bf8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004bfc:	f77f ae68 	ble.w	80048d0 <_vfprintf_r+0x650>
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2bff      	cmp	r3, #255	; 0xff
 8004c06:	d108      	bne.n	8004c1a <_vfprintf_r+0x99a>
 8004c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c10:	fb02 7703 	mla	r7, r2, r3, r7
 8004c14:	e65c      	b.n	80048d0 <_vfprintf_r+0x650>
 8004c16:	4647      	mov	r7, r8
 8004c18:	e7d5      	b.n	8004bc6 <_vfprintf_r+0x946>
 8004c1a:	4543      	cmp	r3, r8
 8004c1c:	daf4      	bge.n	8004c08 <_vfprintf_r+0x988>
 8004c1e:	eba8 0803 	sub.w	r8, r8, r3
 8004c22:	9b08      	ldr	r3, [sp, #32]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	b133      	cbz	r3, 8004c36 <_vfprintf_r+0x9b6>
 8004c28:	9b07      	ldr	r3, [sp, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	9307      	str	r3, [sp, #28]
 8004c2e:	9b08      	ldr	r3, [sp, #32]
 8004c30:	3301      	adds	r3, #1
 8004c32:	9308      	str	r3, [sp, #32]
 8004c34:	e7e4      	b.n	8004c00 <_vfprintf_r+0x980>
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	9306      	str	r3, [sp, #24]
 8004c3c:	e7e0      	b.n	8004c00 <_vfprintf_r+0x980>
 8004c3e:	9b07      	ldr	r3, [sp, #28]
 8004c40:	9306      	str	r3, [sp, #24]
 8004c42:	e645      	b.n	80048d0 <_vfprintf_r+0x650>
 8004c44:	f108 0304 	add.w	r3, r8, #4
 8004c48:	f01b 0f20 	tst.w	fp, #32
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	d00c      	beq.n	8004c6a <_vfprintf_r+0x9ea>
 8004c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c52:	f8d8 3000 	ldr.w	r3, [r8]
 8004c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c58:	17d2      	asrs	r2, r2, #31
 8004c5a:	e9c3 1200 	strd	r1, r2, [r3]
 8004c5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004c62:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004c66:	f7ff bb7e 	b.w	8004366 <_vfprintf_r+0xe6>
 8004c6a:	f01b 0f10 	tst.w	fp, #16
 8004c6e:	d004      	beq.n	8004c7a <_vfprintf_r+0x9fa>
 8004c70:	f8d8 3000 	ldr.w	r3, [r8]
 8004c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e7f1      	b.n	8004c5e <_vfprintf_r+0x9de>
 8004c7a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004c7e:	d004      	beq.n	8004c8a <_vfprintf_r+0xa0a>
 8004c80:	f8d8 3000 	ldr.w	r3, [r8]
 8004c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	e7e9      	b.n	8004c5e <_vfprintf_r+0x9de>
 8004c8a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8004c8e:	d0ef      	beq.n	8004c70 <_vfprintf_r+0x9f0>
 8004c90:	f8d8 3000 	ldr.w	r3, [r8]
 8004c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e7e1      	b.n	8004c5e <_vfprintf_r+0x9de>
 8004c9a:	f04b 0b10 	orr.w	fp, fp, #16
 8004c9e:	f01b 0320 	ands.w	r3, fp, #32
 8004ca2:	d020      	beq.n	8004ce6 <_vfprintf_r+0xa66>
 8004ca4:	f108 0807 	add.w	r8, r8, #7
 8004ca8:	f028 0307 	bic.w	r3, r8, #7
 8004cac:	461a      	mov	r2, r3
 8004cae:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004cb2:	f852 8b08 	ldr.w	r8, [r2], #8
 8004cb6:	9205      	str	r2, [sp, #20]
 8004cb8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8004cc4:	1c7a      	adds	r2, r7, #1
 8004cc6:	f000 84cd 	beq.w	8005664 <_vfprintf_r+0x13e4>
 8004cca:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8004cce:	9202      	str	r2, [sp, #8]
 8004cd0:	ea58 0209 	orrs.w	r2, r8, r9
 8004cd4:	f040 84cc 	bne.w	8005670 <_vfprintf_r+0x13f0>
 8004cd8:	2f00      	cmp	r7, #0
 8004cda:	f000 810f 	beq.w	8004efc <_vfprintf_r+0xc7c>
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	f040 84c9 	bne.w	8005676 <_vfprintf_r+0x13f6>
 8004ce4:	e0ae      	b.n	8004e44 <_vfprintf_r+0xbc4>
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	f01b 0910 	ands.w	r9, fp, #16
 8004cec:	f852 8b04 	ldr.w	r8, [r2], #4
 8004cf0:	9205      	str	r2, [sp, #20]
 8004cf2:	d001      	beq.n	8004cf8 <_vfprintf_r+0xa78>
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	e7df      	b.n	8004cb8 <_vfprintf_r+0xa38>
 8004cf8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8004cfc:	d002      	beq.n	8004d04 <_vfprintf_r+0xa84>
 8004cfe:	fa1f f888 	uxth.w	r8, r8
 8004d02:	e7d9      	b.n	8004cb8 <_vfprintf_r+0xa38>
 8004d04:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8004d08:	d0d6      	beq.n	8004cb8 <_vfprintf_r+0xa38>
 8004d0a:	fa5f f888 	uxtb.w	r8, r8
 8004d0e:	e7f1      	b.n	8004cf4 <_vfprintf_r+0xa74>
 8004d10:	4643      	mov	r3, r8
 8004d12:	2278      	movs	r2, #120	; 0x78
 8004d14:	f853 8b04 	ldr.w	r8, [r3], #4
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	2330      	movs	r3, #48	; 0x30
 8004d1c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8004d20:	4bb0      	ldr	r3, [pc, #704]	; (8004fe4 <_vfprintf_r+0xd64>)
 8004d22:	9312      	str	r3, [sp, #72]	; 0x48
 8004d24:	f04f 0900 	mov.w	r9, #0
 8004d28:	f04b 0b02 	orr.w	fp, fp, #2
 8004d2c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8004d30:	2302      	movs	r3, #2
 8004d32:	9204      	str	r2, [sp, #16]
 8004d34:	e7c3      	b.n	8004cbe <_vfprintf_r+0xa3e>
 8004d36:	4643      	mov	r3, r8
 8004d38:	1c79      	adds	r1, r7, #1
 8004d3a:	f853 ab04 	ldr.w	sl, [r3], #4
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f04f 0800 	mov.w	r8, #0
 8004d44:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8004d48:	d010      	beq.n	8004d6c <_vfprintf_r+0xaec>
 8004d4a:	463a      	mov	r2, r7
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	4650      	mov	r0, sl
 8004d50:	f7fb fa7e 	bl	8000250 <memchr>
 8004d54:	9002      	str	r0, [sp, #8]
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f000 80e8 	beq.w	8004f2c <_vfprintf_r+0xcac>
 8004d5c:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8004d60:	eba0 070a 	sub.w	r7, r0, sl
 8004d64:	f8cd 8008 	str.w	r8, [sp, #8]
 8004d68:	46c1      	mov	r9, r8
 8004d6a:	e5ba      	b.n	80048e2 <_vfprintf_r+0x662>
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	f7fb fa67 	bl	8000240 <strlen>
 8004d72:	46c1      	mov	r9, r8
 8004d74:	4607      	mov	r7, r0
 8004d76:	f8cd 8008 	str.w	r8, [sp, #8]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	e47c      	b.n	8004678 <_vfprintf_r+0x3f8>
 8004d7e:	f04b 0b10 	orr.w	fp, fp, #16
 8004d82:	f01b 0320 	ands.w	r3, fp, #32
 8004d86:	d00b      	beq.n	8004da0 <_vfprintf_r+0xb20>
 8004d88:	f108 0807 	add.w	r8, r8, #7
 8004d8c:	f028 0307 	bic.w	r3, r8, #7
 8004d90:	461a      	mov	r2, r3
 8004d92:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004d96:	f852 8b08 	ldr.w	r8, [r2], #8
 8004d9a:	9205      	str	r2, [sp, #20]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e78e      	b.n	8004cbe <_vfprintf_r+0xa3e>
 8004da0:	4642      	mov	r2, r8
 8004da2:	f01b 0910 	ands.w	r9, fp, #16
 8004da6:	f852 8b04 	ldr.w	r8, [r2], #4
 8004daa:	9205      	str	r2, [sp, #20]
 8004dac:	d001      	beq.n	8004db2 <_vfprintf_r+0xb32>
 8004dae:	4699      	mov	r9, r3
 8004db0:	e7f4      	b.n	8004d9c <_vfprintf_r+0xb1c>
 8004db2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8004db6:	d002      	beq.n	8004dbe <_vfprintf_r+0xb3e>
 8004db8:	fa1f f888 	uxth.w	r8, r8
 8004dbc:	e7ee      	b.n	8004d9c <_vfprintf_r+0xb1c>
 8004dbe:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8004dc2:	d0eb      	beq.n	8004d9c <_vfprintf_r+0xb1c>
 8004dc4:	fa5f f888 	uxtb.w	r8, r8
 8004dc8:	e7f1      	b.n	8004dae <_vfprintf_r+0xb2e>
 8004dca:	4b87      	ldr	r3, [pc, #540]	; (8004fe8 <_vfprintf_r+0xd68>)
 8004dcc:	9312      	str	r3, [sp, #72]	; 0x48
 8004dce:	f01b 0320 	ands.w	r3, fp, #32
 8004dd2:	d01d      	beq.n	8004e10 <_vfprintf_r+0xb90>
 8004dd4:	f108 0807 	add.w	r8, r8, #7
 8004dd8:	f028 0307 	bic.w	r3, r8, #7
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004de2:	f852 8b08 	ldr.w	r8, [r2], #8
 8004de6:	9205      	str	r2, [sp, #20]
 8004de8:	f01b 0f01 	tst.w	fp, #1
 8004dec:	d00a      	beq.n	8004e04 <_vfprintf_r+0xb84>
 8004dee:	ea58 0309 	orrs.w	r3, r8, r9
 8004df2:	d007      	beq.n	8004e04 <_vfprintf_r+0xb84>
 8004df4:	2330      	movs	r3, #48	; 0x30
 8004df6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8004dfa:	9b04      	ldr	r3, [sp, #16]
 8004dfc:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8004e00:	f04b 0b02 	orr.w	fp, fp, #2
 8004e04:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e758      	b.n	8004cbe <_vfprintf_r+0xa3e>
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <_vfprintf_r+0xd64>)
 8004e0e:	e7dd      	b.n	8004dcc <_vfprintf_r+0xb4c>
 8004e10:	4642      	mov	r2, r8
 8004e12:	f01b 0910 	ands.w	r9, fp, #16
 8004e16:	f852 8b04 	ldr.w	r8, [r2], #4
 8004e1a:	9205      	str	r2, [sp, #20]
 8004e1c:	d001      	beq.n	8004e22 <_vfprintf_r+0xba2>
 8004e1e:	4699      	mov	r9, r3
 8004e20:	e7e2      	b.n	8004de8 <_vfprintf_r+0xb68>
 8004e22:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8004e26:	d002      	beq.n	8004e2e <_vfprintf_r+0xbae>
 8004e28:	fa1f f888 	uxth.w	r8, r8
 8004e2c:	e7dc      	b.n	8004de8 <_vfprintf_r+0xb68>
 8004e2e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8004e32:	d0d9      	beq.n	8004de8 <_vfprintf_r+0xb68>
 8004e34:	fa5f f888 	uxtb.w	r8, r8
 8004e38:	e7f1      	b.n	8004e1e <_vfprintf_r+0xb9e>
 8004e3a:	f1b8 0f0a 	cmp.w	r8, #10
 8004e3e:	f179 0300 	sbcs.w	r3, r9, #0
 8004e42:	d207      	bcs.n	8004e54 <_vfprintf_r+0xbd4>
 8004e44:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004e48:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8004e4c:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8004e50:	f000 bc2f 	b.w	80056b2 <_vfprintf_r+0x1432>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	9b02      	ldr	r3, [sp, #8]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8004e62:	9306      	str	r3, [sp, #24]
 8004e64:	220a      	movs	r2, #10
 8004e66:	2300      	movs	r3, #0
 8004e68:	4640      	mov	r0, r8
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	f7fb fa40 	bl	80002f0 <__aeabi_uldivmod>
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	9303      	str	r3, [sp, #12]
 8004e76:	9b06      	ldr	r3, [sp, #24]
 8004e78:	3230      	adds	r2, #48	; 0x30
 8004e7a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004e7e:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8004e82:	b1db      	cbz	r3, 8004ebc <_vfprintf_r+0xc3c>
 8004e84:	9b08      	ldr	r3, [sp, #32]
 8004e86:	9a03      	ldr	r2, [sp, #12]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d116      	bne.n	8004ebc <_vfprintf_r+0xc3c>
 8004e8e:	2aff      	cmp	r2, #255	; 0xff
 8004e90:	d014      	beq.n	8004ebc <_vfprintf_r+0xc3c>
 8004e92:	f1b8 0f0a 	cmp.w	r8, #10
 8004e96:	f179 0300 	sbcs.w	r3, r9, #0
 8004e9a:	d30f      	bcc.n	8004ebc <_vfprintf_r+0xc3c>
 8004e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004ea0:	ebaa 0a03 	sub.w	sl, sl, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	f002 fe9d 	bl	8007be6 <strncpy>
 8004eac:	9b08      	ldr	r3, [sp, #32]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	b11b      	cbz	r3, 8004eba <_vfprintf_r+0xc3a>
 8004eb2:	9b08      	ldr	r3, [sp, #32]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	9308      	str	r3, [sp, #32]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	f7fb fa14 	bl	80002f0 <__aeabi_uldivmod>
 8004ec8:	f1b8 0f0a 	cmp.w	r8, #10
 8004ecc:	f179 0300 	sbcs.w	r3, r9, #0
 8004ed0:	f0c0 83ef 	bcc.w	80056b2 <_vfprintf_r+0x1432>
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	46d3      	mov	fp, sl
 8004eda:	e7c3      	b.n	8004e64 <_vfprintf_r+0xbe4>
 8004edc:	f008 030f 	and.w	r3, r8, #15
 8004ee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ee2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8004eec:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8004ef0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8004ef4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ef8:	d1f0      	bne.n	8004edc <_vfprintf_r+0xc5c>
 8004efa:	e3da      	b.n	80056b2 <_vfprintf_r+0x1432>
 8004efc:	b933      	cbnz	r3, 8004f0c <_vfprintf_r+0xc8c>
 8004efe:	f01b 0f01 	tst.w	fp, #1
 8004f02:	d003      	beq.n	8004f0c <_vfprintf_r+0xc8c>
 8004f04:	2330      	movs	r3, #48	; 0x30
 8004f06:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8004f0a:	e79f      	b.n	8004e4c <_vfprintf_r+0xbcc>
 8004f0c:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8004f10:	e3cf      	b.n	80056b2 <_vfprintf_r+0x1432>
 8004f12:	9b04      	ldr	r3, [sp, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8392 	beq.w	800563e <_vfprintf_r+0x13be>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8004f20:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8004f24:	f8cd 8014 	str.w	r8, [sp, #20]
 8004f28:	f7ff bb36 	b.w	8004598 <_vfprintf_r+0x318>
 8004f2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004f30:	e723      	b.n	8004d7a <_vfprintf_r+0xafa>
 8004f32:	2110      	movs	r1, #16
 8004f34:	6061      	str	r1, [r4, #4]
 8004f36:	2a07      	cmp	r2, #7
 8004f38:	4461      	add	r1, ip
 8004f3a:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8004f3e:	dd0a      	ble.n	8004f56 <_vfprintf_r+0xcd6>
 8004f40:	aa1e      	add	r2, sp, #120	; 0x78
 8004f42:	4629      	mov	r1, r5
 8004f44:	4630      	mov	r0, r6
 8004f46:	9315      	str	r3, [sp, #84]	; 0x54
 8004f48:	f002 fe6d 	bl	8007c26 <__sprint_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 8353 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f54:	a821      	add	r0, sp, #132	; 0x84
 8004f56:	3b10      	subs	r3, #16
 8004f58:	4604      	mov	r4, r0
 8004f5a:	e4dd      	b.n	8004918 <_vfprintf_r+0x698>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	e4f7      	b.n	8004950 <_vfprintf_r+0x6d0>
 8004f60:	aa1e      	add	r2, sp, #120	; 0x78
 8004f62:	4629      	mov	r1, r5
 8004f64:	4630      	mov	r0, r6
 8004f66:	f002 fe5e 	bl	8007c26 <__sprint_r>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f040 8344 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004f70:	ac21      	add	r4, sp, #132	; 0x84
 8004f72:	e4ff      	b.n	8004974 <_vfprintf_r+0x6f4>
 8004f74:	aa1e      	add	r2, sp, #120	; 0x78
 8004f76:	4629      	mov	r1, r5
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f002 fe54 	bl	8007c26 <__sprint_r>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	f040 833a 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004f84:	ac21      	add	r4, sp, #132	; 0x84
 8004f86:	e505      	b.n	8004994 <_vfprintf_r+0x714>
 8004f88:	2110      	movs	r1, #16
 8004f8a:	6061      	str	r1, [r4, #4]
 8004f8c:	2a07      	cmp	r2, #7
 8004f8e:	4461      	add	r1, ip
 8004f90:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8004f94:	dd0a      	ble.n	8004fac <_vfprintf_r+0xd2c>
 8004f96:	aa1e      	add	r2, sp, #120	; 0x78
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f9e:	f002 fe42 	bl	8007c26 <__sprint_r>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 8328 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004faa:	a821      	add	r0, sp, #132	; 0x84
 8004fac:	3b10      	subs	r3, #16
 8004fae:	4604      	mov	r4, r0
 8004fb0:	e4f8      	b.n	80049a4 <_vfprintf_r+0x724>
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	e512      	b.n	80049dc <_vfprintf_r+0x75c>
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	4403      	add	r3, r0
 8004fba:	2a07      	cmp	r2, #7
 8004fbc:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8004fc0:	6060      	str	r0, [r4, #4]
 8004fc2:	dd08      	ble.n	8004fd6 <_vfprintf_r+0xd56>
 8004fc4:	aa1e      	add	r2, sp, #120	; 0x78
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f002 fe2c 	bl	8007c26 <__sprint_r>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f040 8312 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8004fd4:	a921      	add	r1, sp, #132	; 0x84
 8004fd6:	f1a9 0910 	sub.w	r9, r9, #16
 8004fda:	460c      	mov	r4, r1
 8004fdc:	e503      	b.n	80049e6 <_vfprintf_r+0x766>
 8004fde:	460c      	mov	r4, r1
 8004fe0:	e51e      	b.n	8004a20 <_vfprintf_r+0x7a0>
 8004fe2:	bf00      	nop
 8004fe4:	08008c04 	.word	0x08008c04
 8004fe8:	08008c15 	.word	0x08008c15
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	2b65      	cmp	r3, #101	; 0x65
 8004ff0:	f340 8252 	ble.w	8005498 <_vfprintf_r+0x1218>
 8004ff4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	d16c      	bne.n	80050d8 <_vfprintf_r+0xe58>
 8004ffe:	4b75      	ldr	r3, [pc, #468]	; (80051d4 <_vfprintf_r+0xf54>)
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	2301      	movs	r3, #1
 8005004:	4418      	add	r0, r3
 8005006:	6063      	str	r3, [r4, #4]
 8005008:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800500a:	9020      	str	r0, [sp, #128]	; 0x80
 800500c:	3301      	adds	r3, #1
 800500e:	2b07      	cmp	r3, #7
 8005010:	931f      	str	r3, [sp, #124]	; 0x7c
 8005012:	dc3a      	bgt.n	800508a <_vfprintf_r+0xe0a>
 8005014:	3408      	adds	r4, #8
 8005016:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005018:	9a03      	ldr	r2, [sp, #12]
 800501a:	4293      	cmp	r3, r2
 800501c:	db03      	blt.n	8005026 <_vfprintf_r+0xda6>
 800501e:	f01b 0f01 	tst.w	fp, #1
 8005022:	f43f ad0d 	beq.w	8004a40 <_vfprintf_r+0x7c0>
 8005026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005032:	4413      	add	r3, r2
 8005034:	9320      	str	r3, [sp, #128]	; 0x80
 8005036:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005038:	3301      	adds	r3, #1
 800503a:	2b07      	cmp	r3, #7
 800503c:	931f      	str	r3, [sp, #124]	; 0x7c
 800503e:	dc2e      	bgt.n	800509e <_vfprintf_r+0xe1e>
 8005040:	3408      	adds	r4, #8
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	1e5f      	subs	r7, r3, #1
 8005046:	2f00      	cmp	r7, #0
 8005048:	f77f acfa 	ble.w	8004a40 <_vfprintf_r+0x7c0>
 800504c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80051d8 <_vfprintf_r+0xf58>
 8005050:	f04f 0910 	mov.w	r9, #16
 8005054:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8005058:	2f10      	cmp	r7, #16
 800505a:	f103 0301 	add.w	r3, r3, #1
 800505e:	f104 0108 	add.w	r1, r4, #8
 8005062:	f8c4 8000 	str.w	r8, [r4]
 8005066:	dc24      	bgt.n	80050b2 <_vfprintf_r+0xe32>
 8005068:	443a      	add	r2, r7
 800506a:	6067      	str	r7, [r4, #4]
 800506c:	9220      	str	r2, [sp, #128]	; 0x80
 800506e:	2b07      	cmp	r3, #7
 8005070:	931f      	str	r3, [sp, #124]	; 0x7c
 8005072:	f340 829d 	ble.w	80055b0 <_vfprintf_r+0x1330>
 8005076:	aa1e      	add	r2, sp, #120	; 0x78
 8005078:	4629      	mov	r1, r5
 800507a:	4630      	mov	r0, r6
 800507c:	f002 fdd3 	bl	8007c26 <__sprint_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	f040 82b9 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005086:	ac21      	add	r4, sp, #132	; 0x84
 8005088:	e4da      	b.n	8004a40 <_vfprintf_r+0x7c0>
 800508a:	aa1e      	add	r2, sp, #120	; 0x78
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f002 fdc9 	bl	8007c26 <__sprint_r>
 8005094:	2800      	cmp	r0, #0
 8005096:	f040 82af 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800509a:	ac21      	add	r4, sp, #132	; 0x84
 800509c:	e7bb      	b.n	8005016 <_vfprintf_r+0xd96>
 800509e:	aa1e      	add	r2, sp, #120	; 0x78
 80050a0:	4629      	mov	r1, r5
 80050a2:	4630      	mov	r0, r6
 80050a4:	f002 fdbf 	bl	8007c26 <__sprint_r>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f040 82a5 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80050ae:	ac21      	add	r4, sp, #132	; 0x84
 80050b0:	e7c7      	b.n	8005042 <_vfprintf_r+0xdc2>
 80050b2:	3210      	adds	r2, #16
 80050b4:	2b07      	cmp	r3, #7
 80050b6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80050ba:	f8c4 9004 	str.w	r9, [r4, #4]
 80050be:	dd08      	ble.n	80050d2 <_vfprintf_r+0xe52>
 80050c0:	aa1e      	add	r2, sp, #120	; 0x78
 80050c2:	4629      	mov	r1, r5
 80050c4:	4630      	mov	r0, r6
 80050c6:	f002 fdae 	bl	8007c26 <__sprint_r>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f040 8294 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80050d0:	a921      	add	r1, sp, #132	; 0x84
 80050d2:	3f10      	subs	r7, #16
 80050d4:	460c      	mov	r4, r1
 80050d6:	e7bd      	b.n	8005054 <_vfprintf_r+0xdd4>
 80050d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dc7e      	bgt.n	80051dc <_vfprintf_r+0xf5c>
 80050de:	4b3d      	ldr	r3, [pc, #244]	; (80051d4 <_vfprintf_r+0xf54>)
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	2301      	movs	r3, #1
 80050e4:	4418      	add	r0, r3
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80050ea:	9020      	str	r0, [sp, #128]	; 0x80
 80050ec:	3301      	adds	r3, #1
 80050ee:	2b07      	cmp	r3, #7
 80050f0:	931f      	str	r3, [sp, #124]	; 0x7c
 80050f2:	dc47      	bgt.n	8005184 <_vfprintf_r+0xf04>
 80050f4:	3408      	adds	r4, #8
 80050f6:	9903      	ldr	r1, [sp, #12]
 80050f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050fc:	430a      	orrs	r2, r1
 80050fe:	f00b 0101 	and.w	r1, fp, #1
 8005102:	430a      	orrs	r2, r1
 8005104:	f43f ac9c 	beq.w	8004a40 <_vfprintf_r+0x7c0>
 8005108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800510e:	6062      	str	r2, [r4, #4]
 8005110:	4413      	add	r3, r2
 8005112:	9320      	str	r3, [sp, #128]	; 0x80
 8005114:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005116:	3301      	adds	r3, #1
 8005118:	2b07      	cmp	r3, #7
 800511a:	931f      	str	r3, [sp, #124]	; 0x7c
 800511c:	dc3c      	bgt.n	8005198 <_vfprintf_r+0xf18>
 800511e:	f104 0308 	add.w	r3, r4, #8
 8005122:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8005124:	2f00      	cmp	r7, #0
 8005126:	da1c      	bge.n	8005162 <_vfprintf_r+0xee2>
 8005128:	4c2b      	ldr	r4, [pc, #172]	; (80051d8 <_vfprintf_r+0xf58>)
 800512a:	427f      	negs	r7, r7
 800512c:	461a      	mov	r2, r3
 800512e:	f04f 0810 	mov.w	r8, #16
 8005132:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8005136:	2f10      	cmp	r7, #16
 8005138:	f101 0101 	add.w	r1, r1, #1
 800513c:	f103 0308 	add.w	r3, r3, #8
 8005140:	6014      	str	r4, [r2, #0]
 8005142:	dc33      	bgt.n	80051ac <_vfprintf_r+0xf2c>
 8005144:	6057      	str	r7, [r2, #4]
 8005146:	2907      	cmp	r1, #7
 8005148:	4407      	add	r7, r0
 800514a:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 800514e:	dd08      	ble.n	8005162 <_vfprintf_r+0xee2>
 8005150:	aa1e      	add	r2, sp, #120	; 0x78
 8005152:	4629      	mov	r1, r5
 8005154:	4630      	mov	r0, r6
 8005156:	f002 fd66 	bl	8007c26 <__sprint_r>
 800515a:	2800      	cmp	r0, #0
 800515c:	f040 824c 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005160:	ab21      	add	r3, sp, #132	; 0x84
 8005162:	9a03      	ldr	r2, [sp, #12]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	9903      	ldr	r1, [sp, #12]
 8005168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800516a:	f8c3 a000 	str.w	sl, [r3]
 800516e:	440a      	add	r2, r1
 8005170:	9220      	str	r2, [sp, #128]	; 0x80
 8005172:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005174:	3201      	adds	r2, #1
 8005176:	2a07      	cmp	r2, #7
 8005178:	921f      	str	r2, [sp, #124]	; 0x7c
 800517a:	f73f af7c 	bgt.w	8005076 <_vfprintf_r+0xdf6>
 800517e:	f103 0408 	add.w	r4, r3, #8
 8005182:	e45d      	b.n	8004a40 <_vfprintf_r+0x7c0>
 8005184:	aa1e      	add	r2, sp, #120	; 0x78
 8005186:	4629      	mov	r1, r5
 8005188:	4630      	mov	r0, r6
 800518a:	f002 fd4c 	bl	8007c26 <__sprint_r>
 800518e:	2800      	cmp	r0, #0
 8005190:	f040 8232 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005194:	ac21      	add	r4, sp, #132	; 0x84
 8005196:	e7ae      	b.n	80050f6 <_vfprintf_r+0xe76>
 8005198:	aa1e      	add	r2, sp, #120	; 0x78
 800519a:	4629      	mov	r1, r5
 800519c:	4630      	mov	r0, r6
 800519e:	f002 fd42 	bl	8007c26 <__sprint_r>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 8228 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80051a8:	ab21      	add	r3, sp, #132	; 0x84
 80051aa:	e7ba      	b.n	8005122 <_vfprintf_r+0xea2>
 80051ac:	3010      	adds	r0, #16
 80051ae:	2907      	cmp	r1, #7
 80051b0:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 80051b4:	f8c2 8004 	str.w	r8, [r2, #4]
 80051b8:	dd08      	ble.n	80051cc <_vfprintf_r+0xf4c>
 80051ba:	aa1e      	add	r2, sp, #120	; 0x78
 80051bc:	4629      	mov	r1, r5
 80051be:	4630      	mov	r0, r6
 80051c0:	f002 fd31 	bl	8007c26 <__sprint_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f040 8217 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80051ca:	ab21      	add	r3, sp, #132	; 0x84
 80051cc:	3f10      	subs	r7, #16
 80051ce:	461a      	mov	r2, r3
 80051d0:	e7af      	b.n	8005132 <_vfprintf_r+0xeb2>
 80051d2:	bf00      	nop
 80051d4:	08008c26 	.word	0x08008c26
 80051d8:	08008c38 	.word	0x08008c38
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	4543      	cmp	r3, r8
 80051e0:	bfa8      	it	ge
 80051e2:	4643      	movge	r3, r8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	4699      	mov	r9, r3
 80051e8:	dd0a      	ble.n	8005200 <_vfprintf_r+0xf80>
 80051ea:	4418      	add	r0, r3
 80051ec:	e9c4 a300 	strd	sl, r3, [r4]
 80051f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051f2:	9020      	str	r0, [sp, #128]	; 0x80
 80051f4:	3301      	adds	r3, #1
 80051f6:	2b07      	cmp	r3, #7
 80051f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80051fa:	f300 8084 	bgt.w	8005306 <_vfprintf_r+0x1086>
 80051fe:	3408      	adds	r4, #8
 8005200:	f1b9 0f00 	cmp.w	r9, #0
 8005204:	bfac      	ite	ge
 8005206:	eba8 0709 	subge.w	r7, r8, r9
 800520a:	4647      	movlt	r7, r8
 800520c:	2f00      	cmp	r7, #0
 800520e:	dd1b      	ble.n	8005248 <_vfprintf_r+0xfc8>
 8005210:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 800565c <_vfprintf_r+0x13dc>
 8005214:	f8c4 9000 	str.w	r9, [r4]
 8005218:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800521c:	2f10      	cmp	r7, #16
 800521e:	f103 0301 	add.w	r3, r3, #1
 8005222:	f104 0108 	add.w	r1, r4, #8
 8005226:	dc78      	bgt.n	800531a <_vfprintf_r+0x109a>
 8005228:	6067      	str	r7, [r4, #4]
 800522a:	2b07      	cmp	r3, #7
 800522c:	4417      	add	r7, r2
 800522e:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8005232:	f340 8085 	ble.w	8005340 <_vfprintf_r+0x10c0>
 8005236:	aa1e      	add	r2, sp, #120	; 0x78
 8005238:	4629      	mov	r1, r5
 800523a:	4630      	mov	r0, r6
 800523c:	f002 fcf3 	bl	8007c26 <__sprint_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	f040 81d9 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005246:	ac21      	add	r4, sp, #132	; 0x84
 8005248:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800524c:	44d0      	add	r8, sl
 800524e:	d00a      	beq.n	8005266 <_vfprintf_r+0xfe6>
 8005250:	9b07      	ldr	r3, [sp, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d176      	bne.n	8005344 <_vfprintf_r+0x10c4>
 8005256:	9b06      	ldr	r3, [sp, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d176      	bne.n	800534a <_vfprintf_r+0x10ca>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	4453      	add	r3, sl
 8005260:	4598      	cmp	r8, r3
 8005262:	bf28      	it	cs
 8005264:	4698      	movcs	r8, r3
 8005266:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005268:	9a03      	ldr	r2, [sp, #12]
 800526a:	4293      	cmp	r3, r2
 800526c:	db02      	blt.n	8005274 <_vfprintf_r+0xff4>
 800526e:	f01b 0f01 	tst.w	fp, #1
 8005272:	d00e      	beq.n	8005292 <_vfprintf_r+0x1012>
 8005274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005280:	4413      	add	r3, r2
 8005282:	9320      	str	r3, [sp, #128]	; 0x80
 8005284:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005286:	3301      	adds	r3, #1
 8005288:	2b07      	cmp	r3, #7
 800528a:	931f      	str	r3, [sp, #124]	; 0x7c
 800528c:	f300 80dd 	bgt.w	800544a <_vfprintf_r+0x11ca>
 8005290:	3408      	adds	r4, #8
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	eb0a 0203 	add.w	r2, sl, r3
 800529a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800529c:	eba2 0208 	sub.w	r2, r2, r8
 80052a0:	eba1 0903 	sub.w	r9, r1, r3
 80052a4:	4591      	cmp	r9, r2
 80052a6:	bfa8      	it	ge
 80052a8:	4691      	movge	r9, r2
 80052aa:	f1b9 0f00 	cmp.w	r9, #0
 80052ae:	dd0b      	ble.n	80052c8 <_vfprintf_r+0x1048>
 80052b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052b2:	444b      	add	r3, r9
 80052b4:	9320      	str	r3, [sp, #128]	; 0x80
 80052b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052b8:	3301      	adds	r3, #1
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	e9c4 8900 	strd	r8, r9, [r4]
 80052c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80052c2:	f300 80cc 	bgt.w	800545e <_vfprintf_r+0x11de>
 80052c6:	3408      	adds	r4, #8
 80052c8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	eba3 0707 	sub.w	r7, r3, r7
 80052d4:	bfa8      	it	ge
 80052d6:	eba7 0709 	subge.w	r7, r7, r9
 80052da:	2f00      	cmp	r7, #0
 80052dc:	f77f abb0 	ble.w	8004a40 <_vfprintf_r+0x7c0>
 80052e0:	f8df 8378 	ldr.w	r8, [pc, #888]	; 800565c <_vfprintf_r+0x13dc>
 80052e4:	f04f 0910 	mov.w	r9, #16
 80052e8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80052ec:	2f10      	cmp	r7, #16
 80052ee:	f103 0301 	add.w	r3, r3, #1
 80052f2:	f104 0108 	add.w	r1, r4, #8
 80052f6:	f8c4 8000 	str.w	r8, [r4]
 80052fa:	f300 80ba 	bgt.w	8005472 <_vfprintf_r+0x11f2>
 80052fe:	6067      	str	r7, [r4, #4]
 8005300:	4417      	add	r7, r2
 8005302:	9720      	str	r7, [sp, #128]	; 0x80
 8005304:	e6b3      	b.n	800506e <_vfprintf_r+0xdee>
 8005306:	aa1e      	add	r2, sp, #120	; 0x78
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f002 fc8b 	bl	8007c26 <__sprint_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	f040 8171 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005316:	ac21      	add	r4, sp, #132	; 0x84
 8005318:	e772      	b.n	8005200 <_vfprintf_r+0xf80>
 800531a:	2010      	movs	r0, #16
 800531c:	4402      	add	r2, r0
 800531e:	2b07      	cmp	r3, #7
 8005320:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8005324:	6060      	str	r0, [r4, #4]
 8005326:	dd08      	ble.n	800533a <_vfprintf_r+0x10ba>
 8005328:	aa1e      	add	r2, sp, #120	; 0x78
 800532a:	4629      	mov	r1, r5
 800532c:	4630      	mov	r0, r6
 800532e:	f002 fc7a 	bl	8007c26 <__sprint_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	f040 8160 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005338:	a921      	add	r1, sp, #132	; 0x84
 800533a:	3f10      	subs	r7, #16
 800533c:	460c      	mov	r4, r1
 800533e:	e769      	b.n	8005214 <_vfprintf_r+0xf94>
 8005340:	460c      	mov	r4, r1
 8005342:	e781      	b.n	8005248 <_vfprintf_r+0xfc8>
 8005344:	9b06      	ldr	r3, [sp, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04f      	beq.n	80053ea <_vfprintf_r+0x116a>
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	3b01      	subs	r3, #1
 800534e:	9306      	str	r3, [sp, #24]
 8005350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005358:	6063      	str	r3, [r4, #4]
 800535a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800535c:	4413      	add	r3, r2
 800535e:	9320      	str	r3, [sp, #128]	; 0x80
 8005360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005362:	3301      	adds	r3, #1
 8005364:	2b07      	cmp	r3, #7
 8005366:	931f      	str	r3, [sp, #124]	; 0x7c
 8005368:	dc46      	bgt.n	80053f8 <_vfprintf_r+0x1178>
 800536a:	3408      	adds	r4, #8
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	9a08      	ldr	r2, [sp, #32]
 8005370:	eb0a 0903 	add.w	r9, sl, r3
 8005374:	eba9 0308 	sub.w	r3, r9, r8
 8005378:	f892 9000 	ldrb.w	r9, [r2]
 800537c:	4599      	cmp	r9, r3
 800537e:	bfa8      	it	ge
 8005380:	4699      	movge	r9, r3
 8005382:	f1b9 0f00 	cmp.w	r9, #0
 8005386:	dd0a      	ble.n	800539e <_vfprintf_r+0x111e>
 8005388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800538a:	444b      	add	r3, r9
 800538c:	9320      	str	r3, [sp, #128]	; 0x80
 800538e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005390:	3301      	adds	r3, #1
 8005392:	2b07      	cmp	r3, #7
 8005394:	e9c4 8900 	strd	r8, r9, [r4]
 8005398:	931f      	str	r3, [sp, #124]	; 0x7c
 800539a:	dc37      	bgt.n	800540c <_vfprintf_r+0x118c>
 800539c:	3408      	adds	r4, #8
 800539e:	9b08      	ldr	r3, [sp, #32]
 80053a0:	781f      	ldrb	r7, [r3, #0]
 80053a2:	f1b9 0f00 	cmp.w	r9, #0
 80053a6:	bfa8      	it	ge
 80053a8:	eba7 0709 	subge.w	r7, r7, r9
 80053ac:	2f00      	cmp	r7, #0
 80053ae:	dd18      	ble.n	80053e2 <_vfprintf_r+0x1162>
 80053b0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80053b4:	48a9      	ldr	r0, [pc, #676]	; (800565c <_vfprintf_r+0x13dc>)
 80053b6:	6020      	str	r0, [r4, #0]
 80053b8:	2f10      	cmp	r7, #16
 80053ba:	f103 0301 	add.w	r3, r3, #1
 80053be:	f104 0108 	add.w	r1, r4, #8
 80053c2:	dc2d      	bgt.n	8005420 <_vfprintf_r+0x11a0>
 80053c4:	6067      	str	r7, [r4, #4]
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	4417      	add	r7, r2
 80053ca:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80053ce:	dd3a      	ble.n	8005446 <_vfprintf_r+0x11c6>
 80053d0:	aa1e      	add	r2, sp, #120	; 0x78
 80053d2:	4629      	mov	r1, r5
 80053d4:	4630      	mov	r0, r6
 80053d6:	f002 fc26 	bl	8007c26 <__sprint_r>
 80053da:	2800      	cmp	r0, #0
 80053dc:	f040 810c 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80053e0:	ac21      	add	r4, sp, #132	; 0x84
 80053e2:	9b08      	ldr	r3, [sp, #32]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	4498      	add	r8, r3
 80053e8:	e732      	b.n	8005250 <_vfprintf_r+0xfd0>
 80053ea:	9b08      	ldr	r3, [sp, #32]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	9308      	str	r3, [sp, #32]
 80053f0:	9b07      	ldr	r3, [sp, #28]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	9307      	str	r3, [sp, #28]
 80053f6:	e7ab      	b.n	8005350 <_vfprintf_r+0x10d0>
 80053f8:	aa1e      	add	r2, sp, #120	; 0x78
 80053fa:	4629      	mov	r1, r5
 80053fc:	4630      	mov	r0, r6
 80053fe:	f002 fc12 	bl	8007c26 <__sprint_r>
 8005402:	2800      	cmp	r0, #0
 8005404:	f040 80f8 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005408:	ac21      	add	r4, sp, #132	; 0x84
 800540a:	e7af      	b.n	800536c <_vfprintf_r+0x10ec>
 800540c:	aa1e      	add	r2, sp, #120	; 0x78
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	f002 fc08 	bl	8007c26 <__sprint_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	f040 80ee 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800541c:	ac21      	add	r4, sp, #132	; 0x84
 800541e:	e7be      	b.n	800539e <_vfprintf_r+0x111e>
 8005420:	2010      	movs	r0, #16
 8005422:	4402      	add	r2, r0
 8005424:	2b07      	cmp	r3, #7
 8005426:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800542a:	6060      	str	r0, [r4, #4]
 800542c:	dd08      	ble.n	8005440 <_vfprintf_r+0x11c0>
 800542e:	aa1e      	add	r2, sp, #120	; 0x78
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f002 fbf7 	bl	8007c26 <__sprint_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	f040 80dd 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800543e:	a921      	add	r1, sp, #132	; 0x84
 8005440:	3f10      	subs	r7, #16
 8005442:	460c      	mov	r4, r1
 8005444:	e7b4      	b.n	80053b0 <_vfprintf_r+0x1130>
 8005446:	460c      	mov	r4, r1
 8005448:	e7cb      	b.n	80053e2 <_vfprintf_r+0x1162>
 800544a:	aa1e      	add	r2, sp, #120	; 0x78
 800544c:	4629      	mov	r1, r5
 800544e:	4630      	mov	r0, r6
 8005450:	f002 fbe9 	bl	8007c26 <__sprint_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	f040 80cf 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800545a:	ac21      	add	r4, sp, #132	; 0x84
 800545c:	e719      	b.n	8005292 <_vfprintf_r+0x1012>
 800545e:	aa1e      	add	r2, sp, #120	; 0x78
 8005460:	4629      	mov	r1, r5
 8005462:	4630      	mov	r0, r6
 8005464:	f002 fbdf 	bl	8007c26 <__sprint_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	f040 80c5 	bne.w	80055f8 <_vfprintf_r+0x1378>
 800546e:	ac21      	add	r4, sp, #132	; 0x84
 8005470:	e72a      	b.n	80052c8 <_vfprintf_r+0x1048>
 8005472:	3210      	adds	r2, #16
 8005474:	2b07      	cmp	r3, #7
 8005476:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800547a:	f8c4 9004 	str.w	r9, [r4, #4]
 800547e:	dd08      	ble.n	8005492 <_vfprintf_r+0x1212>
 8005480:	aa1e      	add	r2, sp, #120	; 0x78
 8005482:	4629      	mov	r1, r5
 8005484:	4630      	mov	r0, r6
 8005486:	f002 fbce 	bl	8007c26 <__sprint_r>
 800548a:	2800      	cmp	r0, #0
 800548c:	f040 80b4 	bne.w	80055f8 <_vfprintf_r+0x1378>
 8005490:	a921      	add	r1, sp, #132	; 0x84
 8005492:	3f10      	subs	r7, #16
 8005494:	460c      	mov	r4, r1
 8005496:	e727      	b.n	80052e8 <_vfprintf_r+0x1068>
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800549c:	2901      	cmp	r1, #1
 800549e:	f100 0001 	add.w	r0, r0, #1
 80054a2:	f102 0201 	add.w	r2, r2, #1
 80054a6:	f104 0308 	add.w	r3, r4, #8
 80054aa:	dc02      	bgt.n	80054b2 <_vfprintf_r+0x1232>
 80054ac:	f01b 0f01 	tst.w	fp, #1
 80054b0:	d073      	beq.n	800559a <_vfprintf_r+0x131a>
 80054b2:	2101      	movs	r1, #1
 80054b4:	2a07      	cmp	r2, #7
 80054b6:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 80054ba:	f8c4 a000 	str.w	sl, [r4]
 80054be:	6061      	str	r1, [r4, #4]
 80054c0:	dd08      	ble.n	80054d4 <_vfprintf_r+0x1254>
 80054c2:	aa1e      	add	r2, sp, #120	; 0x78
 80054c4:	4629      	mov	r1, r5
 80054c6:	4630      	mov	r0, r6
 80054c8:	f002 fbad 	bl	8007c26 <__sprint_r>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f040 8093 	bne.w	80055f8 <_vfprintf_r+0x1378>
 80054d2:	ab21      	add	r3, sp, #132	; 0x84
 80054d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054e0:	440a      	add	r2, r1
 80054e2:	9220      	str	r2, [sp, #128]	; 0x80
 80054e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80054e6:	3201      	adds	r2, #1
 80054e8:	2a07      	cmp	r2, #7
 80054ea:	921f      	str	r2, [sp, #124]	; 0x7c
 80054ec:	dc25      	bgt.n	800553a <_vfprintf_r+0x12ba>
 80054ee:	3308      	adds	r3, #8
 80054f0:	9a03      	ldr	r2, [sp, #12]
 80054f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	f102 34ff 	add.w	r4, r2, #4294967295
 80054fe:	d025      	beq.n	800554c <_vfprintf_r+0x12cc>
 8005500:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8005502:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005504:	f10a 0001 	add.w	r0, sl, #1
 8005508:	e9c3 0400 	strd	r0, r4, [r3]
 800550c:	9803      	ldr	r0, [sp, #12]
 800550e:	3101      	adds	r1, #1
 8005510:	3a01      	subs	r2, #1
 8005512:	4402      	add	r2, r0
 8005514:	2907      	cmp	r1, #7
 8005516:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800551a:	dd47      	ble.n	80055ac <_vfprintf_r+0x132c>
 800551c:	aa1e      	add	r2, sp, #120	; 0x78
 800551e:	4629      	mov	r1, r5
 8005520:	4630      	mov	r0, r6
 8005522:	f002 fb80 	bl	8007c26 <__sprint_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	d166      	bne.n	80055f8 <_vfprintf_r+0x1378>
 800552a:	ab21      	add	r3, sp, #132	; 0x84
 800552c:	aa1a      	add	r2, sp, #104	; 0x68
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005532:	605a      	str	r2, [r3, #4]
 8005534:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005536:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005538:	e619      	b.n	800516e <_vfprintf_r+0xeee>
 800553a:	aa1e      	add	r2, sp, #120	; 0x78
 800553c:	4629      	mov	r1, r5
 800553e:	4630      	mov	r0, r6
 8005540:	f002 fb71 	bl	8007c26 <__sprint_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	d157      	bne.n	80055f8 <_vfprintf_r+0x1378>
 8005548:	ab21      	add	r3, sp, #132	; 0x84
 800554a:	e7d1      	b.n	80054f0 <_vfprintf_r+0x1270>
 800554c:	2c00      	cmp	r4, #0
 800554e:	dded      	ble.n	800552c <_vfprintf_r+0x12ac>
 8005550:	4f42      	ldr	r7, [pc, #264]	; (800565c <_vfprintf_r+0x13dc>)
 8005552:	f04f 0810 	mov.w	r8, #16
 8005556:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800555a:	2c10      	cmp	r4, #16
 800555c:	f102 0201 	add.w	r2, r2, #1
 8005560:	f103 0008 	add.w	r0, r3, #8
 8005564:	601f      	str	r7, [r3, #0]
 8005566:	dc07      	bgt.n	8005578 <_vfprintf_r+0x12f8>
 8005568:	605c      	str	r4, [r3, #4]
 800556a:	2a07      	cmp	r2, #7
 800556c:	440c      	add	r4, r1
 800556e:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8005572:	dcd3      	bgt.n	800551c <_vfprintf_r+0x129c>
 8005574:	4603      	mov	r3, r0
 8005576:	e7d9      	b.n	800552c <_vfprintf_r+0x12ac>
 8005578:	3110      	adds	r1, #16
 800557a:	2a07      	cmp	r2, #7
 800557c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8005580:	f8c3 8004 	str.w	r8, [r3, #4]
 8005584:	dd06      	ble.n	8005594 <_vfprintf_r+0x1314>
 8005586:	aa1e      	add	r2, sp, #120	; 0x78
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	f002 fb4b 	bl	8007c26 <__sprint_r>
 8005590:	bb90      	cbnz	r0, 80055f8 <_vfprintf_r+0x1378>
 8005592:	a821      	add	r0, sp, #132	; 0x84
 8005594:	3c10      	subs	r4, #16
 8005596:	4603      	mov	r3, r0
 8005598:	e7dd      	b.n	8005556 <_vfprintf_r+0x12d6>
 800559a:	2101      	movs	r1, #1
 800559c:	2a07      	cmp	r2, #7
 800559e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 80055a2:	f8c4 a000 	str.w	sl, [r4]
 80055a6:	6061      	str	r1, [r4, #4]
 80055a8:	ddc0      	ble.n	800552c <_vfprintf_r+0x12ac>
 80055aa:	e7b7      	b.n	800551c <_vfprintf_r+0x129c>
 80055ac:	3308      	adds	r3, #8
 80055ae:	e7bd      	b.n	800552c <_vfprintf_r+0x12ac>
 80055b0:	460c      	mov	r4, r1
 80055b2:	f7ff ba45 	b.w	8004a40 <_vfprintf_r+0x7c0>
 80055b6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80055ba:	1a9f      	subs	r7, r3, r2
 80055bc:	2f00      	cmp	r7, #0
 80055be:	f77f aa4d 	ble.w	8004a5c <_vfprintf_r+0x7dc>
 80055c2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005660 <_vfprintf_r+0x13e0>
 80055c6:	f04f 0910 	mov.w	r9, #16
 80055ca:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80055ce:	2f10      	cmp	r7, #16
 80055d0:	f103 0301 	add.w	r3, r3, #1
 80055d4:	f8c4 8000 	str.w	r8, [r4]
 80055d8:	dc18      	bgt.n	800560c <_vfprintf_r+0x138c>
 80055da:	6067      	str	r7, [r4, #4]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	4417      	add	r7, r2
 80055e0:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80055e4:	f77f aa3a 	ble.w	8004a5c <_vfprintf_r+0x7dc>
 80055e8:	aa1e      	add	r2, sp, #120	; 0x78
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	f002 fb1a 	bl	8007c26 <__sprint_r>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f43f aa32 	beq.w	8004a5c <_vfprintf_r+0x7dc>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f43f a871 	beq.w	80046e2 <_vfprintf_r+0x462>
 8005600:	4619      	mov	r1, r3
 8005602:	4630      	mov	r0, r6
 8005604:	f001 f874 	bl	80066f0 <_free_r>
 8005608:	f7ff b86b 	b.w	80046e2 <_vfprintf_r+0x462>
 800560c:	3210      	adds	r2, #16
 800560e:	2b07      	cmp	r3, #7
 8005610:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8005614:	f8c4 9004 	str.w	r9, [r4, #4]
 8005618:	dc02      	bgt.n	8005620 <_vfprintf_r+0x13a0>
 800561a:	3408      	adds	r4, #8
 800561c:	3f10      	subs	r7, #16
 800561e:	e7d4      	b.n	80055ca <_vfprintf_r+0x134a>
 8005620:	aa1e      	add	r2, sp, #120	; 0x78
 8005622:	4629      	mov	r1, r5
 8005624:	4630      	mov	r0, r6
 8005626:	f002 fafe 	bl	8007c26 <__sprint_r>
 800562a:	2800      	cmp	r0, #0
 800562c:	d1e4      	bne.n	80055f8 <_vfprintf_r+0x1378>
 800562e:	ac21      	add	r4, sp, #132	; 0x84
 8005630:	e7f4      	b.n	800561c <_vfprintf_r+0x139c>
 8005632:	9902      	ldr	r1, [sp, #8]
 8005634:	4630      	mov	r0, r6
 8005636:	f001 f85b 	bl	80066f0 <_free_r>
 800563a:	f7ff ba27 	b.w	8004a8c <_vfprintf_r+0x80c>
 800563e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005640:	b91b      	cbnz	r3, 800564a <_vfprintf_r+0x13ca>
 8005642:	2300      	movs	r3, #0
 8005644:	931f      	str	r3, [sp, #124]	; 0x7c
 8005646:	f7ff b84c 	b.w	80046e2 <_vfprintf_r+0x462>
 800564a:	aa1e      	add	r2, sp, #120	; 0x78
 800564c:	4629      	mov	r1, r5
 800564e:	4630      	mov	r0, r6
 8005650:	f002 fae9 	bl	8007c26 <__sprint_r>
 8005654:	2800      	cmp	r0, #0
 8005656:	d0f4      	beq.n	8005642 <_vfprintf_r+0x13c2>
 8005658:	f7ff b843 	b.w	80046e2 <_vfprintf_r+0x462>
 800565c:	08008c38 	.word	0x08008c38
 8005660:	08008c28 	.word	0x08008c28
 8005664:	ea58 0209 	orrs.w	r2, r8, r9
 8005668:	f8cd b008 	str.w	fp, [sp, #8]
 800566c:	f43f ab37 	beq.w	8004cde <_vfprintf_r+0xa5e>
 8005670:	2b01      	cmp	r3, #1
 8005672:	f43f abe2 	beq.w	8004e3a <_vfprintf_r+0xbba>
 8005676:	2b02      	cmp	r3, #2
 8005678:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800567c:	f43f ac2e 	beq.w	8004edc <_vfprintf_r+0xc5c>
 8005680:	f008 0307 	and.w	r3, r8, #7
 8005684:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8005688:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800568c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8005690:	3330      	adds	r3, #48	; 0x30
 8005692:	ea58 0109 	orrs.w	r1, r8, r9
 8005696:	4652      	mov	r2, sl
 8005698:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800569c:	d1f0      	bne.n	8005680 <_vfprintf_r+0x1400>
 800569e:	9902      	ldr	r1, [sp, #8]
 80056a0:	07c8      	lsls	r0, r1, #31
 80056a2:	d506      	bpl.n	80056b2 <_vfprintf_r+0x1432>
 80056a4:	2b30      	cmp	r3, #48	; 0x30
 80056a6:	d004      	beq.n	80056b2 <_vfprintf_r+0x1432>
 80056a8:	2330      	movs	r3, #48	; 0x30
 80056aa:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80056ae:	f1a2 0a02 	sub.w	sl, r2, #2
 80056b2:	ab4a      	add	r3, sp, #296	; 0x128
 80056b4:	46b9      	mov	r9, r7
 80056b6:	eba3 070a 	sub.w	r7, r3, sl
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f7fe bfd9 	b.w	8004678 <_vfprintf_r+0x3f8>
 80056c6:	bf00      	nop

080056c8 <__sbprintf>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	460c      	mov	r4, r1
 80056cc:	8989      	ldrh	r1, [r1, #12]
 80056ce:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80056d2:	f021 0102 	bic.w	r1, r1, #2
 80056d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80056da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80056dc:	911b      	str	r1, [sp, #108]	; 0x6c
 80056de:	89e1      	ldrh	r1, [r4, #14]
 80056e0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80056e4:	69e1      	ldr	r1, [r4, #28]
 80056e6:	9109      	str	r1, [sp, #36]	; 0x24
 80056e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80056ec:	a91c      	add	r1, sp, #112	; 0x70
 80056ee:	9102      	str	r1, [sp, #8]
 80056f0:	9106      	str	r1, [sp, #24]
 80056f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056f6:	4606      	mov	r6, r0
 80056f8:	9104      	str	r1, [sp, #16]
 80056fa:	9107      	str	r1, [sp, #28]
 80056fc:	a818      	add	r0, sp, #96	; 0x60
 80056fe:	2100      	movs	r1, #0
 8005700:	e9cd 3200 	strd	r3, r2, [sp]
 8005704:	9108      	str	r1, [sp, #32]
 8005706:	f001 fa21 	bl	8006b4c <__retarget_lock_init_recursive>
 800570a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800570e:	a902      	add	r1, sp, #8
 8005710:	4630      	mov	r0, r6
 8005712:	f7fe fdb5 	bl	8004280 <_vfprintf_r>
 8005716:	1e05      	subs	r5, r0, #0
 8005718:	db07      	blt.n	800572a <__sbprintf+0x62>
 800571a:	a902      	add	r1, sp, #8
 800571c:	4630      	mov	r0, r6
 800571e:	f000 feeb 	bl	80064f8 <_fflush_r>
 8005722:	2800      	cmp	r0, #0
 8005724:	bf18      	it	ne
 8005726:	f04f 35ff 	movne.w	r5, #4294967295
 800572a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800572e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005730:	065b      	lsls	r3, r3, #25
 8005732:	bf42      	ittt	mi
 8005734:	89a3      	ldrhmi	r3, [r4, #12]
 8005736:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800573a:	81a3      	strhmi	r3, [r4, #12]
 800573c:	f001 fa07 	bl	8006b4e <__retarget_lock_close_recursive>
 8005740:	4628      	mov	r0, r5
 8005742:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__swsetup_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <__swsetup_r+0xac>)
 800574c:	4605      	mov	r5, r0
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	460c      	mov	r4, r1
 8005752:	b118      	cbz	r0, 800575c <__swsetup_r+0x14>
 8005754:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005756:	b90b      	cbnz	r3, 800575c <__swsetup_r+0x14>
 8005758:	f000 ff3a 	bl	80065d0 <__sinit>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005762:	0718      	lsls	r0, r3, #28
 8005764:	d422      	bmi.n	80057ac <__swsetup_r+0x64>
 8005766:	06d9      	lsls	r1, r3, #27
 8005768:	d407      	bmi.n	800577a <__swsetup_r+0x32>
 800576a:	2309      	movs	r3, #9
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	e034      	b.n	80057e4 <__swsetup_r+0x9c>
 800577a:	0758      	lsls	r0, r3, #29
 800577c:	d512      	bpl.n	80057a4 <__swsetup_r+0x5c>
 800577e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005780:	b141      	cbz	r1, 8005794 <__swsetup_r+0x4c>
 8005782:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005786:	4299      	cmp	r1, r3
 8005788:	d002      	beq.n	8005790 <__swsetup_r+0x48>
 800578a:	4628      	mov	r0, r5
 800578c:	f000 ffb0 	bl	80066f0 <_free_r>
 8005790:	2300      	movs	r3, #0
 8005792:	6323      	str	r3, [r4, #48]	; 0x30
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800579a:	81a3      	strh	r3, [r4, #12]
 800579c:	2300      	movs	r3, #0
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f043 0308 	orr.w	r3, r3, #8
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	b94b      	cbnz	r3, 80057c4 <__swsetup_r+0x7c>
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ba:	d003      	beq.n	80057c4 <__swsetup_r+0x7c>
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f001 f9f4 	bl	8006bac <__smakebuf_r>
 80057c4:	89a0      	ldrh	r0, [r4, #12]
 80057c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ca:	f010 0301 	ands.w	r3, r0, #1
 80057ce:	d00a      	beq.n	80057e6 <__swsetup_r+0x9e>
 80057d0:	2300      	movs	r3, #0
 80057d2:	60a3      	str	r3, [r4, #8]
 80057d4:	6963      	ldr	r3, [r4, #20]
 80057d6:	425b      	negs	r3, r3
 80057d8:	61a3      	str	r3, [r4, #24]
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	b943      	cbnz	r3, 80057f0 <__swsetup_r+0xa8>
 80057de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057e2:	d1c4      	bne.n	800576e <__swsetup_r+0x26>
 80057e4:	bd38      	pop	{r3, r4, r5, pc}
 80057e6:	0781      	lsls	r1, r0, #30
 80057e8:	bf58      	it	pl
 80057ea:	6963      	ldrpl	r3, [r4, #20]
 80057ec:	60a3      	str	r3, [r4, #8]
 80057ee:	e7f4      	b.n	80057da <__swsetup_r+0x92>
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7f7      	b.n	80057e4 <__swsetup_r+0x9c>
 80057f4:	2000000c 	.word	0x2000000c

080057f8 <register_fini>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <register_fini+0xc>)
 80057fa:	b113      	cbz	r3, 8005802 <register_fini+0xa>
 80057fc:	4802      	ldr	r0, [pc, #8]	; (8005808 <register_fini+0x10>)
 80057fe:	f000 b805 	b.w	800580c <atexit>
 8005802:	4770      	bx	lr
 8005804:	00000000 	.word	0x00000000
 8005808:	08006621 	.word	0x08006621

0800580c <atexit>:
 800580c:	2300      	movs	r3, #0
 800580e:	4601      	mov	r1, r0
 8005810:	461a      	mov	r2, r3
 8005812:	4618      	mov	r0, r3
 8005814:	f002 bf22 	b.w	800865c <__register_exitproc>

08005818 <quorem>:
 8005818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	6903      	ldr	r3, [r0, #16]
 800581e:	690c      	ldr	r4, [r1, #16]
 8005820:	42a3      	cmp	r3, r4
 8005822:	4607      	mov	r7, r0
 8005824:	f2c0 8081 	blt.w	800592a <quorem+0x112>
 8005828:	3c01      	subs	r4, #1
 800582a:	f101 0814 	add.w	r8, r1, #20
 800582e:	f100 0514 	add.w	r5, r0, #20
 8005832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800583c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005840:	3301      	adds	r3, #1
 8005842:	429a      	cmp	r2, r3
 8005844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800584c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005850:	d331      	bcc.n	80058b6 <quorem+0x9e>
 8005852:	f04f 0e00 	mov.w	lr, #0
 8005856:	4640      	mov	r0, r8
 8005858:	46ac      	mov	ip, r5
 800585a:	46f2      	mov	sl, lr
 800585c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005860:	b293      	uxth	r3, r2
 8005862:	fb06 e303 	mla	r3, r6, r3, lr
 8005866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800586a:	b29b      	uxth	r3, r3
 800586c:	ebaa 0303 	sub.w	r3, sl, r3
 8005870:	f8dc a000 	ldr.w	sl, [ip]
 8005874:	0c12      	lsrs	r2, r2, #16
 8005876:	fa13 f38a 	uxtah	r3, r3, sl
 800587a:	fb06 e202 	mla	r2, r6, r2, lr
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005886:	b292      	uxth	r2, r2
 8005888:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800588c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005890:	f8bd 3000 	ldrh.w	r3, [sp]
 8005894:	4581      	cmp	r9, r0
 8005896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800589a:	f84c 3b04 	str.w	r3, [ip], #4
 800589e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058a2:	d2db      	bcs.n	800585c <quorem+0x44>
 80058a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80058a8:	b92b      	cbnz	r3, 80058b6 <quorem+0x9e>
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	429d      	cmp	r5, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	d32e      	bcc.n	8005912 <quorem+0xfa>
 80058b4:	613c      	str	r4, [r7, #16]
 80058b6:	4638      	mov	r0, r7
 80058b8:	f001 fe64 	bl	8007584 <__mcmp>
 80058bc:	2800      	cmp	r0, #0
 80058be:	db24      	blt.n	800590a <quorem+0xf2>
 80058c0:	3601      	adds	r6, #1
 80058c2:	4628      	mov	r0, r5
 80058c4:	f04f 0c00 	mov.w	ip, #0
 80058c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80058cc:	f8d0 e000 	ldr.w	lr, [r0]
 80058d0:	b293      	uxth	r3, r2
 80058d2:	ebac 0303 	sub.w	r3, ip, r3
 80058d6:	0c12      	lsrs	r2, r2, #16
 80058d8:	fa13 f38e 	uxtah	r3, r3, lr
 80058dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058ea:	45c1      	cmp	r9, r8
 80058ec:	f840 3b04 	str.w	r3, [r0], #4
 80058f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058f4:	d2e8      	bcs.n	80058c8 <quorem+0xb0>
 80058f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fe:	b922      	cbnz	r2, 800590a <quorem+0xf2>
 8005900:	3b04      	subs	r3, #4
 8005902:	429d      	cmp	r5, r3
 8005904:	461a      	mov	r2, r3
 8005906:	d30a      	bcc.n	800591e <quorem+0x106>
 8005908:	613c      	str	r4, [r7, #16]
 800590a:	4630      	mov	r0, r6
 800590c:	b003      	add	sp, #12
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	3b04      	subs	r3, #4
 8005916:	2a00      	cmp	r2, #0
 8005918:	d1cc      	bne.n	80058b4 <quorem+0x9c>
 800591a:	3c01      	subs	r4, #1
 800591c:	e7c7      	b.n	80058ae <quorem+0x96>
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	3b04      	subs	r3, #4
 8005922:	2a00      	cmp	r2, #0
 8005924:	d1f0      	bne.n	8005908 <quorem+0xf0>
 8005926:	3c01      	subs	r4, #1
 8005928:	e7eb      	b.n	8005902 <quorem+0xea>
 800592a:	2000      	movs	r0, #0
 800592c:	e7ee      	b.n	800590c <quorem+0xf4>
	...

08005930 <_dtoa_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b02 	vpush	{d8}
 8005938:	b091      	sub	sp, #68	; 0x44
 800593a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800593e:	9106      	str	r1, [sp, #24]
 8005940:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005942:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005944:	9208      	str	r2, [sp, #32]
 8005946:	ec59 8b10 	vmov	r8, r9, d0
 800594a:	4606      	mov	r6, r0
 800594c:	930c      	str	r3, [sp, #48]	; 0x30
 800594e:	b141      	cbz	r1, 8005962 <_dtoa_r+0x32>
 8005950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005952:	604a      	str	r2, [r1, #4]
 8005954:	2301      	movs	r3, #1
 8005956:	4093      	lsls	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
 800595a:	f001 fc04 	bl	8007166 <_Bfree>
 800595e:	2300      	movs	r3, #0
 8005960:	6433      	str	r3, [r6, #64]	; 0x40
 8005962:	f1b9 0300 	subs.w	r3, r9, #0
 8005966:	bfbb      	ittet	lt
 8005968:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800596c:	9303      	strlt	r3, [sp, #12]
 800596e:	2300      	movge	r3, #0
 8005970:	2201      	movlt	r2, #1
 8005972:	bfac      	ite	ge
 8005974:	6023      	strge	r3, [r4, #0]
 8005976:	6022      	strlt	r2, [r4, #0]
 8005978:	4b99      	ldr	r3, [pc, #612]	; (8005be0 <_dtoa_r+0x2b0>)
 800597a:	9c03      	ldr	r4, [sp, #12]
 800597c:	43a3      	bics	r3, r4
 800597e:	d11c      	bne.n	80059ba <_dtoa_r+0x8a>
 8005980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005982:	f242 730f 	movw	r3, #9999	; 0x270f
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800598c:	ea53 0308 	orrs.w	r3, r3, r8
 8005990:	f000 84f8 	beq.w	8006384 <_dtoa_r+0xa54>
 8005994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005996:	b90b      	cbnz	r3, 800599c <_dtoa_r+0x6c>
 8005998:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <_dtoa_r+0x2b4>)
 800599a:	e01f      	b.n	80059dc <_dtoa_r+0xac>
 800599c:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <_dtoa_r+0x2b4>)
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	3303      	adds	r3, #3
 80059a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	9801      	ldr	r0, [sp, #4]
 80059a8:	b011      	add	sp, #68	; 0x44
 80059aa:	ecbd 8b02 	vpop	{d8}
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	4b8d      	ldr	r3, [pc, #564]	; (8005be8 <_dtoa_r+0x2b8>)
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	3308      	adds	r3, #8
 80059b8:	e7f3      	b.n	80059a2 <_dtoa_r+0x72>
 80059ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80059be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80059c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c6:	d10b      	bne.n	80059e0 <_dtoa_r+0xb0>
 80059c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ca:	2301      	movs	r3, #1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 84d4 	beq.w	800637e <_dtoa_r+0xa4e>
 80059d6:	4885      	ldr	r0, [pc, #532]	; (8005bec <_dtoa_r+0x2bc>)
 80059d8:	6018      	str	r0, [r3, #0]
 80059da:	1e43      	subs	r3, r0, #1
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	e7e2      	b.n	80059a6 <_dtoa_r+0x76>
 80059e0:	a90f      	add	r1, sp, #60	; 0x3c
 80059e2:	aa0e      	add	r2, sp, #56	; 0x38
 80059e4:	4630      	mov	r0, r6
 80059e6:	eeb0 0b48 	vmov.f64	d0, d8
 80059ea:	f001 fe71 	bl	80076d0 <__d2b>
 80059ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80059f2:	4605      	mov	r5, r0
 80059f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d046      	beq.n	8005a88 <_dtoa_r+0x158>
 80059fa:	ee18 4a90 	vmov	r4, s17
 80059fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a02:	ec53 2b18 	vmov	r2, r3, d8
 8005a06:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005a0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005a12:	2400      	movs	r4, #0
 8005a14:	ec43 2b16 	vmov	d6, r2, r3
 8005a18:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005a1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005bc8 <_dtoa_r+0x298>
 8005a20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a24:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8005bd0 <_dtoa_r+0x2a0>
 8005a28:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005a2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005bd8 <_dtoa_r+0x2a8>
 8005a30:	ee07 1a90 	vmov	s15, r1
 8005a34:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005a38:	eeb0 7b46 	vmov.f64	d7, d6
 8005a3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005a40:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005a44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	ee16 ba90 	vmov	fp, s13
 8005a50:	940a      	str	r4, [sp, #40]	; 0x28
 8005a52:	d508      	bpl.n	8005a66 <_dtoa_r+0x136>
 8005a54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a58:	eeb4 6b47 	vcmp.f64	d6, d7
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	bf18      	it	ne
 8005a62:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005a66:	f1bb 0f16 	cmp.w	fp, #22
 8005a6a:	d82f      	bhi.n	8005acc <_dtoa_r+0x19c>
 8005a6c:	4b60      	ldr	r3, [pc, #384]	; (8005bf0 <_dtoa_r+0x2c0>)
 8005a6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a72:	ed93 7b00 	vldr	d7, [r3]
 8005a76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	d501      	bpl.n	8005a84 <_dtoa_r+0x154>
 8005a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a84:	2300      	movs	r3, #0
 8005a86:	e022      	b.n	8005ace <_dtoa_r+0x19e>
 8005a88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a8a:	4401      	add	r1, r0
 8005a8c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	bfc1      	itttt	gt
 8005a94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a98:	fa04 f303 	lslgt.w	r3, r4, r3
 8005a9c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005aa0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005aa4:	bfd6      	itet	le
 8005aa6:	f1c3 0320 	rsble	r3, r3, #32
 8005aaa:	ea43 0808 	orrgt.w	r8, r3, r8
 8005aae:	fa08 f803 	lslle.w	r8, r8, r3
 8005ab2:	ee07 8a90 	vmov	s15, r8
 8005ab6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005aba:	3901      	subs	r1, #1
 8005abc:	ee17 4a90 	vmov	r4, s15
 8005ac0:	ec53 2b17 	vmov	r2, r3, d7
 8005ac4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005ac8:	2401      	movs	r4, #1
 8005aca:	e7a3      	b.n	8005a14 <_dtoa_r+0xe4>
 8005acc:	2301      	movs	r3, #1
 8005ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad0:	1a43      	subs	r3, r0, r1
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	bf45      	ittet	mi
 8005ad6:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ada:	9304      	strmi	r3, [sp, #16]
 8005adc:	2300      	movpl	r3, #0
 8005ade:	2300      	movmi	r3, #0
 8005ae0:	9205      	str	r2, [sp, #20]
 8005ae2:	bf54      	ite	pl
 8005ae4:	9304      	strpl	r3, [sp, #16]
 8005ae6:	9305      	strmi	r3, [sp, #20]
 8005ae8:	f1bb 0f00 	cmp.w	fp, #0
 8005aec:	db18      	blt.n	8005b20 <_dtoa_r+0x1f0>
 8005aee:	9b05      	ldr	r3, [sp, #20]
 8005af0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005af4:	445b      	add	r3, fp
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	2300      	movs	r3, #0
 8005afa:	9a06      	ldr	r2, [sp, #24]
 8005afc:	2a09      	cmp	r2, #9
 8005afe:	d84a      	bhi.n	8005b96 <_dtoa_r+0x266>
 8005b00:	2a05      	cmp	r2, #5
 8005b02:	bfc4      	itt	gt
 8005b04:	3a04      	subgt	r2, #4
 8005b06:	9206      	strgt	r2, [sp, #24]
 8005b08:	9a06      	ldr	r2, [sp, #24]
 8005b0a:	f1a2 0202 	sub.w	r2, r2, #2
 8005b0e:	bfcc      	ite	gt
 8005b10:	2400      	movgt	r4, #0
 8005b12:	2401      	movle	r4, #1
 8005b14:	2a03      	cmp	r2, #3
 8005b16:	d849      	bhi.n	8005bac <_dtoa_r+0x27c>
 8005b18:	e8df f002 	tbb	[pc, r2]
 8005b1c:	3b2d2f0b 	.word	0x3b2d2f0b
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	2200      	movs	r2, #0
 8005b24:	eba3 030b 	sub.w	r3, r3, fp
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b2c:	f1cb 0300 	rsb	r3, fp, #0
 8005b30:	e7e3      	b.n	8005afa <_dtoa_r+0x1ca>
 8005b32:	2200      	movs	r2, #0
 8005b34:	9207      	str	r2, [sp, #28]
 8005b36:	9a08      	ldr	r2, [sp, #32]
 8005b38:	2a00      	cmp	r2, #0
 8005b3a:	dc3a      	bgt.n	8005bb2 <_dtoa_r+0x282>
 8005b3c:	f04f 0a01 	mov.w	sl, #1
 8005b40:	46d1      	mov	r9, sl
 8005b42:	4652      	mov	r2, sl
 8005b44:	f8cd a020 	str.w	sl, [sp, #32]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6471      	str	r1, [r6, #68]	; 0x44
 8005b4c:	2004      	movs	r0, #4
 8005b4e:	f100 0714 	add.w	r7, r0, #20
 8005b52:	4297      	cmp	r7, r2
 8005b54:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8005b56:	d931      	bls.n	8005bbc <_dtoa_r+0x28c>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b5c:	f001 fade 	bl	800711c <_Balloc>
 8005b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b62:	9001      	str	r0, [sp, #4]
 8005b64:	4602      	mov	r2, r0
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d148      	bne.n	8005bfc <_dtoa_r+0x2cc>
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <_dtoa_r+0x2c4>)
 8005b6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b70:	4821      	ldr	r0, [pc, #132]	; (8005bf8 <_dtoa_r+0x2c8>)
 8005b72:	f002 fdb5 	bl	80086e0 <__assert_func>
 8005b76:	2201      	movs	r2, #1
 8005b78:	e7dc      	b.n	8005b34 <_dtoa_r+0x204>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	9207      	str	r2, [sp, #28]
 8005b7e:	9a08      	ldr	r2, [sp, #32]
 8005b80:	eb0b 0a02 	add.w	sl, fp, r2
 8005b84:	f10a 0901 	add.w	r9, sl, #1
 8005b88:	464a      	mov	r2, r9
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	bfb8      	it	lt
 8005b8e:	2201      	movlt	r2, #1
 8005b90:	e7da      	b.n	8005b48 <_dtoa_r+0x218>
 8005b92:	2201      	movs	r2, #1
 8005b94:	e7f2      	b.n	8005b7c <_dtoa_r+0x24c>
 8005b96:	2401      	movs	r4, #1
 8005b98:	2200      	movs	r2, #0
 8005b9a:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005b9e:	f04f 3aff 	mov.w	sl, #4294967295
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	46d1      	mov	r9, sl
 8005ba6:	2212      	movs	r2, #18
 8005ba8:	9108      	str	r1, [sp, #32]
 8005baa:	e7cd      	b.n	8005b48 <_dtoa_r+0x218>
 8005bac:	2201      	movs	r2, #1
 8005bae:	9207      	str	r2, [sp, #28]
 8005bb0:	e7f5      	b.n	8005b9e <_dtoa_r+0x26e>
 8005bb2:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005bb6:	46d1      	mov	r9, sl
 8005bb8:	4652      	mov	r2, sl
 8005bba:	e7c5      	b.n	8005b48 <_dtoa_r+0x218>
 8005bbc:	3101      	adds	r1, #1
 8005bbe:	6471      	str	r1, [r6, #68]	; 0x44
 8005bc0:	0040      	lsls	r0, r0, #1
 8005bc2:	e7c4      	b.n	8005b4e <_dtoa_r+0x21e>
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	636f4361 	.word	0x636f4361
 8005bcc:	3fd287a7 	.word	0x3fd287a7
 8005bd0:	8b60c8b3 	.word	0x8b60c8b3
 8005bd4:	3fc68a28 	.word	0x3fc68a28
 8005bd8:	509f79fb 	.word	0x509f79fb
 8005bdc:	3fd34413 	.word	0x3fd34413
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	08008c48 	.word	0x08008c48
 8005be8:	08008c4c 	.word	0x08008c4c
 8005bec:	08008c27 	.word	0x08008c27
 8005bf0:	08008d48 	.word	0x08008d48
 8005bf4:	08008c55 	.word	0x08008c55
 8005bf8:	08008c66 	.word	0x08008c66
 8005bfc:	9a01      	ldr	r2, [sp, #4]
 8005bfe:	6432      	str	r2, [r6, #64]	; 0x40
 8005c00:	f1b9 0f0e 	cmp.w	r9, #14
 8005c04:	d86c      	bhi.n	8005ce0 <_dtoa_r+0x3b0>
 8005c06:	2c00      	cmp	r4, #0
 8005c08:	d06a      	beq.n	8005ce0 <_dtoa_r+0x3b0>
 8005c0a:	f1bb 0f00 	cmp.w	fp, #0
 8005c0e:	f340 80a0 	ble.w	8005d52 <_dtoa_r+0x422>
 8005c12:	49c1      	ldr	r1, [pc, #772]	; (8005f18 <_dtoa_r+0x5e8>)
 8005c14:	f00b 020f 	and.w	r2, fp, #15
 8005c18:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005c1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c20:	ed92 7b00 	vldr	d7, [r2]
 8005c24:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005c28:	f000 8087 	beq.w	8005d3a <_dtoa_r+0x40a>
 8005c2c:	4abb      	ldr	r2, [pc, #748]	; (8005f1c <_dtoa_r+0x5ec>)
 8005c2e:	ed92 6b08 	vldr	d6, [r2, #32]
 8005c32:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005c36:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005c3a:	f001 010f 	and.w	r1, r1, #15
 8005c3e:	2203      	movs	r2, #3
 8005c40:	48b6      	ldr	r0, [pc, #728]	; (8005f1c <_dtoa_r+0x5ec>)
 8005c42:	2900      	cmp	r1, #0
 8005c44:	d17b      	bne.n	8005d3e <_dtoa_r+0x40e>
 8005c46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005c4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c54:	2900      	cmp	r1, #0
 8005c56:	f000 80a2 	beq.w	8005d9e <_dtoa_r+0x46e>
 8005c5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005c5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	f140 8098 	bpl.w	8005d9e <_dtoa_r+0x46e>
 8005c6e:	f1b9 0f00 	cmp.w	r9, #0
 8005c72:	f000 8094 	beq.w	8005d9e <_dtoa_r+0x46e>
 8005c76:	f1ba 0f00 	cmp.w	sl, #0
 8005c7a:	dd2f      	ble.n	8005cdc <_dtoa_r+0x3ac>
 8005c7c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005c80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005c8c:	3201      	adds	r2, #1
 8005c8e:	4650      	mov	r0, sl
 8005c90:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c94:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005c98:	ee07 2a90 	vmov	s15, r2
 8005c9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ca0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ca4:	ee15 4a90 	vmov	r4, s11
 8005ca8:	ec52 1b15 	vmov	r1, r2, d5
 8005cac:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d177      	bne.n	8005da4 <_dtoa_r+0x474>
 8005cb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005cb8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cbc:	ec42 1b17 	vmov	d7, r1, r2
 8005cc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc8:	f300 8262 	bgt.w	8006190 <_dtoa_r+0x860>
 8005ccc:	eeb1 7b47 	vneg.f64	d7, d7
 8005cd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd8:	f100 8257 	bmi.w	800618a <_dtoa_r+0x85a>
 8005cdc:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ce0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	f2c0 811c 	blt.w	8005f20 <_dtoa_r+0x5f0>
 8005ce8:	f1bb 0f0e 	cmp.w	fp, #14
 8005cec:	f300 8118 	bgt.w	8005f20 <_dtoa_r+0x5f0>
 8005cf0:	4b89      	ldr	r3, [pc, #548]	; (8005f18 <_dtoa_r+0x5e8>)
 8005cf2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cf6:	ed93 6b00 	vldr	d6, [r3]
 8005cfa:	9b08      	ldr	r3, [sp, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f280 80b7 	bge.w	8005e70 <_dtoa_r+0x540>
 8005d02:	f1b9 0f00 	cmp.w	r9, #0
 8005d06:	f300 80b3 	bgt.w	8005e70 <_dtoa_r+0x540>
 8005d0a:	f040 823e 	bne.w	800618a <_dtoa_r+0x85a>
 8005d0e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005d12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d22:	464c      	mov	r4, r9
 8005d24:	464f      	mov	r7, r9
 8005d26:	f280 8214 	bge.w	8006152 <_dtoa_r+0x822>
 8005d2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d2e:	2331      	movs	r3, #49	; 0x31
 8005d30:	f808 3b01 	strb.w	r3, [r8], #1
 8005d34:	f10b 0b01 	add.w	fp, fp, #1
 8005d38:	e210      	b.n	800615c <_dtoa_r+0x82c>
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	e780      	b.n	8005c40 <_dtoa_r+0x310>
 8005d3e:	07cc      	lsls	r4, r1, #31
 8005d40:	d504      	bpl.n	8005d4c <_dtoa_r+0x41c>
 8005d42:	ed90 6b00 	vldr	d6, [r0]
 8005d46:	3201      	adds	r2, #1
 8005d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d4c:	1049      	asrs	r1, r1, #1
 8005d4e:	3008      	adds	r0, #8
 8005d50:	e777      	b.n	8005c42 <_dtoa_r+0x312>
 8005d52:	d022      	beq.n	8005d9a <_dtoa_r+0x46a>
 8005d54:	f1cb 0100 	rsb	r1, fp, #0
 8005d58:	4a6f      	ldr	r2, [pc, #444]	; (8005f18 <_dtoa_r+0x5e8>)
 8005d5a:	f001 000f 	and.w	r0, r1, #15
 8005d5e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005d62:	ed92 7b00 	vldr	d7, [r2]
 8005d66:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d6e:	486b      	ldr	r0, [pc, #428]	; (8005f1c <_dtoa_r+0x5ec>)
 8005d70:	1109      	asrs	r1, r1, #4
 8005d72:	2400      	movs	r4, #0
 8005d74:	2202      	movs	r2, #2
 8005d76:	b929      	cbnz	r1, 8005d84 <_dtoa_r+0x454>
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	f43f af6a 	beq.w	8005c52 <_dtoa_r+0x322>
 8005d7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d82:	e766      	b.n	8005c52 <_dtoa_r+0x322>
 8005d84:	07cf      	lsls	r7, r1, #31
 8005d86:	d505      	bpl.n	8005d94 <_dtoa_r+0x464>
 8005d88:	ed90 6b00 	vldr	d6, [r0]
 8005d8c:	3201      	adds	r2, #1
 8005d8e:	2401      	movs	r4, #1
 8005d90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d94:	1049      	asrs	r1, r1, #1
 8005d96:	3008      	adds	r0, #8
 8005d98:	e7ed      	b.n	8005d76 <_dtoa_r+0x446>
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	e759      	b.n	8005c52 <_dtoa_r+0x322>
 8005d9e:	465f      	mov	r7, fp
 8005da0:	4648      	mov	r0, r9
 8005da2:	e775      	b.n	8005c90 <_dtoa_r+0x360>
 8005da4:	ec42 1b17 	vmov	d7, r1, r2
 8005da8:	4a5b      	ldr	r2, [pc, #364]	; (8005f18 <_dtoa_r+0x5e8>)
 8005daa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005dae:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005db2:	9a01      	ldr	r2, [sp, #4]
 8005db4:	1814      	adds	r4, r2, r0
 8005db6:	9a07      	ldr	r2, [sp, #28]
 8005db8:	b352      	cbz	r2, 8005e10 <_dtoa_r+0x4e0>
 8005dba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005dbe:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005dc2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dc6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005dca:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005dce:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005dd2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005dd6:	ee14 2a90 	vmov	r2, s9
 8005dda:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005dde:	3230      	adds	r2, #48	; 0x30
 8005de0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005de4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	f808 2b01 	strb.w	r2, [r8], #1
 8005df0:	d439      	bmi.n	8005e66 <_dtoa_r+0x536>
 8005df2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005df6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfe:	d472      	bmi.n	8005ee6 <_dtoa_r+0x5b6>
 8005e00:	45a0      	cmp	r8, r4
 8005e02:	f43f af6b 	beq.w	8005cdc <_dtoa_r+0x3ac>
 8005e06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005e0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e0e:	e7e0      	b.n	8005dd2 <_dtoa_r+0x4a2>
 8005e10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e18:	4621      	mov	r1, r4
 8005e1a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005e1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e22:	ee14 2a90 	vmov	r2, s9
 8005e26:	3230      	adds	r2, #48	; 0x30
 8005e28:	f808 2b01 	strb.w	r2, [r8], #1
 8005e2c:	45a0      	cmp	r8, r4
 8005e2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e32:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e36:	d118      	bne.n	8005e6a <_dtoa_r+0x53a>
 8005e38:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005e3c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005e40:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	dc4d      	bgt.n	8005ee6 <_dtoa_r+0x5b6>
 8005e4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	f57f af41 	bpl.w	8005cdc <_dtoa_r+0x3ac>
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	3901      	subs	r1, #1
 8005e5e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005e62:	2b30      	cmp	r3, #48	; 0x30
 8005e64:	d0f9      	beq.n	8005e5a <_dtoa_r+0x52a>
 8005e66:	46bb      	mov	fp, r7
 8005e68:	e02a      	b.n	8005ec0 <_dtoa_r+0x590>
 8005e6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e6e:	e7d6      	b.n	8005e1e <_dtoa_r+0x4ee>
 8005e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e74:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005e78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e7c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005e80:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005e84:	ee15 3a10 	vmov	r3, s10
 8005e88:	3330      	adds	r3, #48	; 0x30
 8005e8a:	f808 3b01 	strb.w	r3, [r8], #1
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	eba8 0303 	sub.w	r3, r8, r3
 8005e94:	4599      	cmp	r9, r3
 8005e96:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005e9a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005e9e:	d133      	bne.n	8005f08 <_dtoa_r+0x5d8>
 8005ea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	dc1a      	bgt.n	8005ee4 <_dtoa_r+0x5b4>
 8005eae:	eeb4 7b46 	vcmp.f64	d7, d6
 8005eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb6:	d103      	bne.n	8005ec0 <_dtoa_r+0x590>
 8005eb8:	ee15 3a10 	vmov	r3, s10
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	d411      	bmi.n	8005ee4 <_dtoa_r+0x5b4>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f001 f94f 	bl	8007166 <_Bfree>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ecc:	f888 3000 	strb.w	r3, [r8]
 8005ed0:	f10b 0301 	add.w	r3, fp, #1
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f43f ad64 	beq.w	80059a6 <_dtoa_r+0x76>
 8005ede:	f8c3 8000 	str.w	r8, [r3]
 8005ee2:	e560      	b.n	80059a6 <_dtoa_r+0x76>
 8005ee4:	465f      	mov	r7, fp
 8005ee6:	4643      	mov	r3, r8
 8005ee8:	4698      	mov	r8, r3
 8005eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eee:	2a39      	cmp	r2, #57	; 0x39
 8005ef0:	d106      	bne.n	8005f00 <_dtoa_r+0x5d0>
 8005ef2:	9a01      	ldr	r2, [sp, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1f7      	bne.n	8005ee8 <_dtoa_r+0x5b8>
 8005ef8:	9901      	ldr	r1, [sp, #4]
 8005efa:	2230      	movs	r2, #48	; 0x30
 8005efc:	3701      	adds	r7, #1
 8005efe:	700a      	strb	r2, [r1, #0]
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	3201      	adds	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e7ae      	b.n	8005e66 <_dtoa_r+0x536>
 8005f08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	d1b2      	bne.n	8005e7c <_dtoa_r+0x54c>
 8005f16:	e7d3      	b.n	8005ec0 <_dtoa_r+0x590>
 8005f18:	08008d48 	.word	0x08008d48
 8005f1c:	08008d20 	.word	0x08008d20
 8005f20:	9907      	ldr	r1, [sp, #28]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	f000 80d0 	beq.w	80060c8 <_dtoa_r+0x798>
 8005f28:	9906      	ldr	r1, [sp, #24]
 8005f2a:	2901      	cmp	r1, #1
 8005f2c:	f300 80b4 	bgt.w	8006098 <_dtoa_r+0x768>
 8005f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f32:	2900      	cmp	r1, #0
 8005f34:	f000 80ac 	beq.w	8006090 <_dtoa_r+0x760>
 8005f38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005f40:	461c      	mov	r4, r3
 8005f42:	930a      	str	r3, [sp, #40]	; 0x28
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	9b05      	ldr	r3, [sp, #20]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	4630      	mov	r0, r6
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	f001 f9a6 	bl	80072a4 <__i2b>
 8005f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	f1b8 0f00 	cmp.w	r8, #0
 8005f60:	dd0d      	ble.n	8005f7e <_dtoa_r+0x64e>
 8005f62:	9a05      	ldr	r2, [sp, #20]
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	dd0a      	ble.n	8005f7e <_dtoa_r+0x64e>
 8005f68:	4542      	cmp	r2, r8
 8005f6a:	9904      	ldr	r1, [sp, #16]
 8005f6c:	bfa8      	it	ge
 8005f6e:	4642      	movge	r2, r8
 8005f70:	1a89      	subs	r1, r1, r2
 8005f72:	9104      	str	r1, [sp, #16]
 8005f74:	9905      	ldr	r1, [sp, #20]
 8005f76:	eba8 0802 	sub.w	r8, r8, r2
 8005f7a:	1a8a      	subs	r2, r1, r2
 8005f7c:	9205      	str	r2, [sp, #20]
 8005f7e:	b303      	cbz	r3, 8005fc2 <_dtoa_r+0x692>
 8005f80:	9a07      	ldr	r2, [sp, #28]
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	f000 80a5 	beq.w	80060d2 <_dtoa_r+0x7a2>
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	dd13      	ble.n	8005fb4 <_dtoa_r+0x684>
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	930d      	str	r3, [sp, #52]	; 0x34
 8005f94:	f001 fa46 	bl	8007424 <__pow5mult>
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f001 f996 	bl	80072d0 <__multiply>
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	900a      	str	r0, [sp, #40]	; 0x28
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f001 f8dc 	bl	8007166 <_Bfree>
 8005fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	1b1a      	subs	r2, r3, r4
 8005fb6:	d004      	beq.n	8005fc2 <_dtoa_r+0x692>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f001 fa32 	bl	8007424 <__pow5mult>
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f001 f96d 	bl	80072a4 <__i2b>
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	f340 8081 	ble.w	80060d6 <_dtoa_r+0x7a6>
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f001 fa23 	bl	8007424 <__pow5mult>
 8005fde:	9b06      	ldr	r3, [sp, #24]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	dd7a      	ble.n	80060dc <_dtoa_r+0x7ac>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ff0:	6910      	ldr	r0, [r2, #16]
 8005ff2:	f001 f907 	bl	8007204 <__hi0bits>
 8005ff6:	f1c0 0020 	rsb	r0, r0, #32
 8005ffa:	9b05      	ldr	r3, [sp, #20]
 8005ffc:	4418      	add	r0, r3
 8005ffe:	f010 001f 	ands.w	r0, r0, #31
 8006002:	f000 808c 	beq.w	800611e <_dtoa_r+0x7ee>
 8006006:	f1c0 0220 	rsb	r2, r0, #32
 800600a:	2a04      	cmp	r2, #4
 800600c:	f340 8085 	ble.w	800611a <_dtoa_r+0x7ea>
 8006010:	f1c0 001c 	rsb	r0, r0, #28
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	4403      	add	r3, r0
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	9b05      	ldr	r3, [sp, #20]
 800601c:	4403      	add	r3, r0
 800601e:	4480      	add	r8, r0
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dd05      	ble.n	8006034 <_dtoa_r+0x704>
 8006028:	4629      	mov	r1, r5
 800602a:	461a      	mov	r2, r3
 800602c:	4630      	mov	r0, r6
 800602e:	f001 fa39 	bl	80074a4 <__lshift>
 8006032:	4605      	mov	r5, r0
 8006034:	9b05      	ldr	r3, [sp, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd05      	ble.n	8006046 <_dtoa_r+0x716>
 800603a:	4621      	mov	r1, r4
 800603c:	461a      	mov	r2, r3
 800603e:	4630      	mov	r0, r6
 8006040:	f001 fa30 	bl	80074a4 <__lshift>
 8006044:	4604      	mov	r4, r0
 8006046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d06a      	beq.n	8006122 <_dtoa_r+0x7f2>
 800604c:	4621      	mov	r1, r4
 800604e:	4628      	mov	r0, r5
 8006050:	f001 fa98 	bl	8007584 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	da64      	bge.n	8006122 <_dtoa_r+0x7f2>
 8006058:	2300      	movs	r3, #0
 800605a:	4629      	mov	r1, r5
 800605c:	220a      	movs	r2, #10
 800605e:	4630      	mov	r0, r6
 8006060:	f001 f88a 	bl	8007178 <__multadd>
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	f10b 3bff 	add.w	fp, fp, #4294967295
 800606a:	4605      	mov	r5, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8190 	beq.w	8006392 <_dtoa_r+0xa62>
 8006072:	4639      	mov	r1, r7
 8006074:	2300      	movs	r3, #0
 8006076:	220a      	movs	r2, #10
 8006078:	4630      	mov	r0, r6
 800607a:	f001 f87d 	bl	8007178 <__multadd>
 800607e:	f1ba 0f00 	cmp.w	sl, #0
 8006082:	4607      	mov	r7, r0
 8006084:	f300 808d 	bgt.w	80061a2 <_dtoa_r+0x872>
 8006088:	9b06      	ldr	r3, [sp, #24]
 800608a:	2b02      	cmp	r3, #2
 800608c:	dc50      	bgt.n	8006130 <_dtoa_r+0x800>
 800608e:	e088      	b.n	80061a2 <_dtoa_r+0x872>
 8006090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006092:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006096:	e751      	b.n	8005f3c <_dtoa_r+0x60c>
 8006098:	f109 34ff 	add.w	r4, r9, #4294967295
 800609c:	42a3      	cmp	r3, r4
 800609e:	bfbf      	itttt	lt
 80060a0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80060a2:	1ae3      	sublt	r3, r4, r3
 80060a4:	18d2      	addlt	r2, r2, r3
 80060a6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80060a8:	bfb6      	itet	lt
 80060aa:	4623      	movlt	r3, r4
 80060ac:	1b1c      	subge	r4, r3, r4
 80060ae:	2400      	movlt	r4, #0
 80060b0:	f1b9 0f00 	cmp.w	r9, #0
 80060b4:	bfb5      	itete	lt
 80060b6:	9a04      	ldrlt	r2, [sp, #16]
 80060b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80060bc:	eba2 0809 	sublt.w	r8, r2, r9
 80060c0:	464a      	movge	r2, r9
 80060c2:	bfb8      	it	lt
 80060c4:	2200      	movlt	r2, #0
 80060c6:	e73c      	b.n	8005f42 <_dtoa_r+0x612>
 80060c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80060cc:	9f07      	ldr	r7, [sp, #28]
 80060ce:	461c      	mov	r4, r3
 80060d0:	e744      	b.n	8005f5c <_dtoa_r+0x62c>
 80060d2:	461a      	mov	r2, r3
 80060d4:	e770      	b.n	8005fb8 <_dtoa_r+0x688>
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	dc18      	bgt.n	800610e <_dtoa_r+0x7de>
 80060dc:	9b02      	ldr	r3, [sp, #8]
 80060de:	b9b3      	cbnz	r3, 800610e <_dtoa_r+0x7de>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80060e6:	b9a2      	cbnz	r2, 8006112 <_dtoa_r+0x7e2>
 80060e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060ec:	0d12      	lsrs	r2, r2, #20
 80060ee:	0512      	lsls	r2, r2, #20
 80060f0:	b18a      	cbz	r2, 8006116 <_dtoa_r+0x7e6>
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	3301      	adds	r3, #1
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	9b05      	ldr	r3, [sp, #20]
 80060fa:	3301      	adds	r3, #1
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	2301      	movs	r3, #1
 8006100:	930a      	str	r3, [sp, #40]	; 0x28
 8006102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f af70 	bne.w	8005fea <_dtoa_r+0x6ba>
 800610a:	2001      	movs	r0, #1
 800610c:	e775      	b.n	8005ffa <_dtoa_r+0x6ca>
 800610e:	2300      	movs	r3, #0
 8006110:	e7f6      	b.n	8006100 <_dtoa_r+0x7d0>
 8006112:	9b02      	ldr	r3, [sp, #8]
 8006114:	e7f4      	b.n	8006100 <_dtoa_r+0x7d0>
 8006116:	920a      	str	r2, [sp, #40]	; 0x28
 8006118:	e7f3      	b.n	8006102 <_dtoa_r+0x7d2>
 800611a:	d082      	beq.n	8006022 <_dtoa_r+0x6f2>
 800611c:	4610      	mov	r0, r2
 800611e:	301c      	adds	r0, #28
 8006120:	e778      	b.n	8006014 <_dtoa_r+0x6e4>
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	dc37      	bgt.n	8006198 <_dtoa_r+0x868>
 8006128:	9b06      	ldr	r3, [sp, #24]
 800612a:	2b02      	cmp	r3, #2
 800612c:	dd34      	ble.n	8006198 <_dtoa_r+0x868>
 800612e:	46ca      	mov	sl, r9
 8006130:	f1ba 0f00 	cmp.w	sl, #0
 8006134:	d10d      	bne.n	8006152 <_dtoa_r+0x822>
 8006136:	4621      	mov	r1, r4
 8006138:	4653      	mov	r3, sl
 800613a:	2205      	movs	r2, #5
 800613c:	4630      	mov	r0, r6
 800613e:	f001 f81b 	bl	8007178 <__multadd>
 8006142:	4601      	mov	r1, r0
 8006144:	4604      	mov	r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f001 fa1c 	bl	8007584 <__mcmp>
 800614c:	2800      	cmp	r0, #0
 800614e:	f73f adec 	bgt.w	8005d2a <_dtoa_r+0x3fa>
 8006152:	9b08      	ldr	r3, [sp, #32]
 8006154:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006158:	ea6f 0b03 	mvn.w	fp, r3
 800615c:	f04f 0900 	mov.w	r9, #0
 8006160:	4621      	mov	r1, r4
 8006162:	4630      	mov	r0, r6
 8006164:	f000 ffff 	bl	8007166 <_Bfree>
 8006168:	2f00      	cmp	r7, #0
 800616a:	f43f aea9 	beq.w	8005ec0 <_dtoa_r+0x590>
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	d005      	beq.n	8006180 <_dtoa_r+0x850>
 8006174:	45b9      	cmp	r9, r7
 8006176:	d003      	beq.n	8006180 <_dtoa_r+0x850>
 8006178:	4649      	mov	r1, r9
 800617a:	4630      	mov	r0, r6
 800617c:	f000 fff3 	bl	8007166 <_Bfree>
 8006180:	4639      	mov	r1, r7
 8006182:	4630      	mov	r0, r6
 8006184:	f000 ffef 	bl	8007166 <_Bfree>
 8006188:	e69a      	b.n	8005ec0 <_dtoa_r+0x590>
 800618a:	2400      	movs	r4, #0
 800618c:	4627      	mov	r7, r4
 800618e:	e7e0      	b.n	8006152 <_dtoa_r+0x822>
 8006190:	46bb      	mov	fp, r7
 8006192:	4604      	mov	r4, r0
 8006194:	4607      	mov	r7, r0
 8006196:	e5c8      	b.n	8005d2a <_dtoa_r+0x3fa>
 8006198:	9b07      	ldr	r3, [sp, #28]
 800619a:	46ca      	mov	sl, r9
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80ff 	beq.w	80063a0 <_dtoa_r+0xa70>
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	dd05      	ble.n	80061b4 <_dtoa_r+0x884>
 80061a8:	4639      	mov	r1, r7
 80061aa:	4642      	mov	r2, r8
 80061ac:	4630      	mov	r0, r6
 80061ae:	f001 f979 	bl	80074a4 <__lshift>
 80061b2:	4607      	mov	r7, r0
 80061b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d05c      	beq.n	8006274 <_dtoa_r+0x944>
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 ffad 	bl	800711c <_Balloc>
 80061c2:	4680      	mov	r8, r0
 80061c4:	b920      	cbnz	r0, 80061d0 <_dtoa_r+0x8a0>
 80061c6:	4b82      	ldr	r3, [pc, #520]	; (80063d0 <_dtoa_r+0xaa0>)
 80061c8:	4602      	mov	r2, r0
 80061ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ce:	e4cf      	b.n	8005b70 <_dtoa_r+0x240>
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	3202      	adds	r2, #2
 80061d4:	0092      	lsls	r2, r2, #2
 80061d6:	f107 010c 	add.w	r1, r7, #12
 80061da:	300c      	adds	r0, #12
 80061dc:	f000 ff6a 	bl	80070b4 <memcpy>
 80061e0:	2201      	movs	r2, #1
 80061e2:	4641      	mov	r1, r8
 80061e4:	4630      	mov	r0, r6
 80061e6:	f001 f95d 	bl	80074a4 <__lshift>
 80061ea:	9b01      	ldr	r3, [sp, #4]
 80061ec:	3301      	adds	r3, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9b01      	ldr	r3, [sp, #4]
 80061f2:	4453      	add	r3, sl
 80061f4:	9308      	str	r3, [sp, #32]
 80061f6:	9b02      	ldr	r3, [sp, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	46b9      	mov	r9, r7
 80061fe:	9307      	str	r3, [sp, #28]
 8006200:	4607      	mov	r7, r0
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	4621      	mov	r1, r4
 8006206:	3b01      	subs	r3, #1
 8006208:	4628      	mov	r0, r5
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	f7ff fb04 	bl	8005818 <quorem>
 8006210:	4603      	mov	r3, r0
 8006212:	3330      	adds	r3, #48	; 0x30
 8006214:	9005      	str	r0, [sp, #20]
 8006216:	4649      	mov	r1, r9
 8006218:	4628      	mov	r0, r5
 800621a:	9309      	str	r3, [sp, #36]	; 0x24
 800621c:	f001 f9b2 	bl	8007584 <__mcmp>
 8006220:	463a      	mov	r2, r7
 8006222:	4682      	mov	sl, r0
 8006224:	4621      	mov	r1, r4
 8006226:	4630      	mov	r0, r6
 8006228:	f001 f9c8 	bl	80075bc <__mdiff>
 800622c:	68c2      	ldr	r2, [r0, #12]
 800622e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006230:	4680      	mov	r8, r0
 8006232:	bb0a      	cbnz	r2, 8006278 <_dtoa_r+0x948>
 8006234:	4601      	mov	r1, r0
 8006236:	4628      	mov	r0, r5
 8006238:	f001 f9a4 	bl	8007584 <__mcmp>
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	4602      	mov	r2, r0
 8006240:	4641      	mov	r1, r8
 8006242:	4630      	mov	r0, r6
 8006244:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006248:	f000 ff8d 	bl	8007166 <_Bfree>
 800624c:	9b06      	ldr	r3, [sp, #24]
 800624e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006250:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006254:	ea43 0102 	orr.w	r1, r3, r2
 8006258:	9b07      	ldr	r3, [sp, #28]
 800625a:	430b      	orrs	r3, r1
 800625c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625e:	d10d      	bne.n	800627c <_dtoa_r+0x94c>
 8006260:	2b39      	cmp	r3, #57	; 0x39
 8006262:	d029      	beq.n	80062b8 <_dtoa_r+0x988>
 8006264:	f1ba 0f00 	cmp.w	sl, #0
 8006268:	dd01      	ble.n	800626e <_dtoa_r+0x93e>
 800626a:	9b05      	ldr	r3, [sp, #20]
 800626c:	3331      	adds	r3, #49	; 0x31
 800626e:	9a02      	ldr	r2, [sp, #8]
 8006270:	7013      	strb	r3, [r2, #0]
 8006272:	e775      	b.n	8006160 <_dtoa_r+0x830>
 8006274:	4638      	mov	r0, r7
 8006276:	e7b8      	b.n	80061ea <_dtoa_r+0x8ba>
 8006278:	2201      	movs	r2, #1
 800627a:	e7e1      	b.n	8006240 <_dtoa_r+0x910>
 800627c:	f1ba 0f00 	cmp.w	sl, #0
 8006280:	db06      	blt.n	8006290 <_dtoa_r+0x960>
 8006282:	9906      	ldr	r1, [sp, #24]
 8006284:	ea41 0a0a 	orr.w	sl, r1, sl
 8006288:	9907      	ldr	r1, [sp, #28]
 800628a:	ea5a 0101 	orrs.w	r1, sl, r1
 800628e:	d120      	bne.n	80062d2 <_dtoa_r+0x9a2>
 8006290:	2a00      	cmp	r2, #0
 8006292:	ddec      	ble.n	800626e <_dtoa_r+0x93e>
 8006294:	4629      	mov	r1, r5
 8006296:	2201      	movs	r2, #1
 8006298:	4630      	mov	r0, r6
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	f001 f902 	bl	80074a4 <__lshift>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4605      	mov	r5, r0
 80062a4:	f001 f96e 	bl	8007584 <__mcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	dc02      	bgt.n	80062b4 <_dtoa_r+0x984>
 80062ae:	d1de      	bne.n	800626e <_dtoa_r+0x93e>
 80062b0:	07da      	lsls	r2, r3, #31
 80062b2:	d5dc      	bpl.n	800626e <_dtoa_r+0x93e>
 80062b4:	2b39      	cmp	r3, #57	; 0x39
 80062b6:	d1d8      	bne.n	800626a <_dtoa_r+0x93a>
 80062b8:	9a02      	ldr	r2, [sp, #8]
 80062ba:	2339      	movs	r3, #57	; 0x39
 80062bc:	7013      	strb	r3, [r2, #0]
 80062be:	4643      	mov	r3, r8
 80062c0:	4698      	mov	r8, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80062c8:	2a39      	cmp	r2, #57	; 0x39
 80062ca:	d051      	beq.n	8006370 <_dtoa_r+0xa40>
 80062cc:	3201      	adds	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e746      	b.n	8006160 <_dtoa_r+0x830>
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	dd03      	ble.n	80062de <_dtoa_r+0x9ae>
 80062d6:	2b39      	cmp	r3, #57	; 0x39
 80062d8:	d0ee      	beq.n	80062b8 <_dtoa_r+0x988>
 80062da:	3301      	adds	r3, #1
 80062dc:	e7c7      	b.n	800626e <_dtoa_r+0x93e>
 80062de:	9a04      	ldr	r2, [sp, #16]
 80062e0:	9908      	ldr	r1, [sp, #32]
 80062e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062e6:	428a      	cmp	r2, r1
 80062e8:	d02b      	beq.n	8006342 <_dtoa_r+0xa12>
 80062ea:	4629      	mov	r1, r5
 80062ec:	2300      	movs	r3, #0
 80062ee:	220a      	movs	r2, #10
 80062f0:	4630      	mov	r0, r6
 80062f2:	f000 ff41 	bl	8007178 <__multadd>
 80062f6:	45b9      	cmp	r9, r7
 80062f8:	4605      	mov	r5, r0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	f04f 020a 	mov.w	r2, #10
 8006302:	4649      	mov	r1, r9
 8006304:	4630      	mov	r0, r6
 8006306:	d107      	bne.n	8006318 <_dtoa_r+0x9e8>
 8006308:	f000 ff36 	bl	8007178 <__multadd>
 800630c:	4681      	mov	r9, r0
 800630e:	4607      	mov	r7, r0
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	3301      	adds	r3, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	e774      	b.n	8006202 <_dtoa_r+0x8d2>
 8006318:	f000 ff2e 	bl	8007178 <__multadd>
 800631c:	4639      	mov	r1, r7
 800631e:	4681      	mov	r9, r0
 8006320:	2300      	movs	r3, #0
 8006322:	220a      	movs	r2, #10
 8006324:	4630      	mov	r0, r6
 8006326:	f000 ff27 	bl	8007178 <__multadd>
 800632a:	4607      	mov	r7, r0
 800632c:	e7f0      	b.n	8006310 <_dtoa_r+0x9e0>
 800632e:	f1ba 0f00 	cmp.w	sl, #0
 8006332:	9a01      	ldr	r2, [sp, #4]
 8006334:	bfcc      	ite	gt
 8006336:	46d0      	movgt	r8, sl
 8006338:	f04f 0801 	movle.w	r8, #1
 800633c:	4490      	add	r8, r2
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	4629      	mov	r1, r5
 8006344:	2201      	movs	r2, #1
 8006346:	4630      	mov	r0, r6
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	f001 f8ab 	bl	80074a4 <__lshift>
 800634e:	4621      	mov	r1, r4
 8006350:	4605      	mov	r5, r0
 8006352:	f001 f917 	bl	8007584 <__mcmp>
 8006356:	2800      	cmp	r0, #0
 8006358:	dcb1      	bgt.n	80062be <_dtoa_r+0x98e>
 800635a:	d102      	bne.n	8006362 <_dtoa_r+0xa32>
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d4ad      	bmi.n	80062be <_dtoa_r+0x98e>
 8006362:	4643      	mov	r3, r8
 8006364:	4698      	mov	r8, r3
 8006366:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800636a:	2a30      	cmp	r2, #48	; 0x30
 800636c:	d0fa      	beq.n	8006364 <_dtoa_r+0xa34>
 800636e:	e6f7      	b.n	8006160 <_dtoa_r+0x830>
 8006370:	9a01      	ldr	r2, [sp, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d1a4      	bne.n	80062c0 <_dtoa_r+0x990>
 8006376:	f10b 0b01 	add.w	fp, fp, #1
 800637a:	2331      	movs	r3, #49	; 0x31
 800637c:	e778      	b.n	8006270 <_dtoa_r+0x940>
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <_dtoa_r+0xaa4>)
 8006380:	f7ff bb2c 	b.w	80059dc <_dtoa_r+0xac>
 8006384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f ab13 	bne.w	80059b2 <_dtoa_r+0x82>
 800638c:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <_dtoa_r+0xaa8>)
 800638e:	f7ff bb25 	b.w	80059dc <_dtoa_r+0xac>
 8006392:	f1ba 0f00 	cmp.w	sl, #0
 8006396:	dc03      	bgt.n	80063a0 <_dtoa_r+0xa70>
 8006398:	9b06      	ldr	r3, [sp, #24]
 800639a:	2b02      	cmp	r3, #2
 800639c:	f73f aec8 	bgt.w	8006130 <_dtoa_r+0x800>
 80063a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f7ff fa36 	bl	8005818 <quorem>
 80063ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80063b0:	f808 3b01 	strb.w	r3, [r8], #1
 80063b4:	9a01      	ldr	r2, [sp, #4]
 80063b6:	eba8 0202 	sub.w	r2, r8, r2
 80063ba:	4592      	cmp	sl, r2
 80063bc:	ddb7      	ble.n	800632e <_dtoa_r+0x9fe>
 80063be:	4629      	mov	r1, r5
 80063c0:	2300      	movs	r3, #0
 80063c2:	220a      	movs	r2, #10
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 fed7 	bl	8007178 <__multadd>
 80063ca:	4605      	mov	r5, r0
 80063cc:	e7ea      	b.n	80063a4 <_dtoa_r+0xa74>
 80063ce:	bf00      	nop
 80063d0:	08008c55 	.word	0x08008c55
 80063d4:	08008c26 	.word	0x08008c26
 80063d8:	08008c4c 	.word	0x08008c4c

080063dc <__sflush_r>:
 80063dc:	898b      	ldrh	r3, [r1, #12]
 80063de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	4605      	mov	r5, r0
 80063e8:	0718      	lsls	r0, r3, #28
 80063ea:	460c      	mov	r4, r1
 80063ec:	d45f      	bmi.n	80064ae <__sflush_r+0xd2>
 80063ee:	684b      	ldr	r3, [r1, #4]
 80063f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	818a      	strh	r2, [r1, #12]
 80063f8:	dc05      	bgt.n	8006406 <__sflush_r+0x2a>
 80063fa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dc02      	bgt.n	8006406 <__sflush_r+0x2a>
 8006400:	2000      	movs	r0, #0
 8006402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006408:	2e00      	cmp	r6, #0
 800640a:	d0f9      	beq.n	8006400 <__sflush_r+0x24>
 800640c:	2300      	movs	r3, #0
 800640e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006412:	682f      	ldr	r7, [r5, #0]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	d036      	beq.n	8006486 <__sflush_r+0xaa>
 8006418:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	075a      	lsls	r2, r3, #29
 800641e:	d505      	bpl.n	800642c <__sflush_r+0x50>
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	1ac0      	subs	r0, r0, r3
 8006424:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006426:	b10b      	cbz	r3, 800642c <__sflush_r+0x50>
 8006428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	2300      	movs	r3, #0
 800642e:	4602      	mov	r2, r0
 8006430:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006432:	69e1      	ldr	r1, [r4, #28]
 8006434:	4628      	mov	r0, r5
 8006436:	47b0      	blx	r6
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	d106      	bne.n	800644c <__sflush_r+0x70>
 800643e:	6829      	ldr	r1, [r5, #0]
 8006440:	291d      	cmp	r1, #29
 8006442:	d830      	bhi.n	80064a6 <__sflush_r+0xca>
 8006444:	4a2b      	ldr	r2, [pc, #172]	; (80064f4 <__sflush_r+0x118>)
 8006446:	40ca      	lsrs	r2, r1
 8006448:	07d6      	lsls	r6, r2, #31
 800644a:	d52c      	bpl.n	80064a6 <__sflush_r+0xca>
 800644c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006450:	b21b      	sxth	r3, r3
 8006452:	2200      	movs	r2, #0
 8006454:	6062      	str	r2, [r4, #4]
 8006456:	04d9      	lsls	r1, r3, #19
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	d504      	bpl.n	800646a <__sflush_r+0x8e>
 8006460:	1c42      	adds	r2, r0, #1
 8006462:	d101      	bne.n	8006468 <__sflush_r+0x8c>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b903      	cbnz	r3, 800646a <__sflush_r+0x8e>
 8006468:	6520      	str	r0, [r4, #80]	; 0x50
 800646a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800646c:	602f      	str	r7, [r5, #0]
 800646e:	2900      	cmp	r1, #0
 8006470:	d0c6      	beq.n	8006400 <__sflush_r+0x24>
 8006472:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006476:	4299      	cmp	r1, r3
 8006478:	d002      	beq.n	8006480 <__sflush_r+0xa4>
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f938 	bl	80066f0 <_free_r>
 8006480:	2000      	movs	r0, #0
 8006482:	6320      	str	r0, [r4, #48]	; 0x30
 8006484:	e7bd      	b.n	8006402 <__sflush_r+0x26>
 8006486:	69e1      	ldr	r1, [r4, #28]
 8006488:	2301      	movs	r3, #1
 800648a:	4628      	mov	r0, r5
 800648c:	47b0      	blx	r6
 800648e:	1c41      	adds	r1, r0, #1
 8006490:	d1c3      	bne.n	800641a <__sflush_r+0x3e>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0c0      	beq.n	800641a <__sflush_r+0x3e>
 8006498:	2b1d      	cmp	r3, #29
 800649a:	d001      	beq.n	80064a0 <__sflush_r+0xc4>
 800649c:	2b16      	cmp	r3, #22
 800649e:	d101      	bne.n	80064a4 <__sflush_r+0xc8>
 80064a0:	602f      	str	r7, [r5, #0]
 80064a2:	e7ad      	b.n	8006400 <__sflush_r+0x24>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	e7a9      	b.n	8006402 <__sflush_r+0x26>
 80064ae:	690f      	ldr	r7, [r1, #16]
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	d0a5      	beq.n	8006400 <__sflush_r+0x24>
 80064b4:	079b      	lsls	r3, r3, #30
 80064b6:	680e      	ldr	r6, [r1, #0]
 80064b8:	bf08      	it	eq
 80064ba:	694b      	ldreq	r3, [r1, #20]
 80064bc:	600f      	str	r7, [r1, #0]
 80064be:	bf18      	it	ne
 80064c0:	2300      	movne	r3, #0
 80064c2:	eba6 0807 	sub.w	r8, r6, r7
 80064c6:	608b      	str	r3, [r1, #8]
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	dd98      	ble.n	8006400 <__sflush_r+0x24>
 80064ce:	69e1      	ldr	r1, [r4, #28]
 80064d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064d2:	4643      	mov	r3, r8
 80064d4:	463a      	mov	r2, r7
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	2800      	cmp	r0, #0
 80064dc:	dc06      	bgt.n	80064ec <__sflush_r+0x110>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ea:	e78a      	b.n	8006402 <__sflush_r+0x26>
 80064ec:	4407      	add	r7, r0
 80064ee:	eba8 0800 	sub.w	r8, r8, r0
 80064f2:	e7e9      	b.n	80064c8 <__sflush_r+0xec>
 80064f4:	20400001 	.word	0x20400001

080064f8 <_fflush_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	460c      	mov	r4, r1
 80064fc:	4605      	mov	r5, r0
 80064fe:	b118      	cbz	r0, 8006508 <_fflush_r+0x10>
 8006500:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006502:	b90b      	cbnz	r3, 8006508 <_fflush_r+0x10>
 8006504:	f000 f864 	bl	80065d0 <__sinit>
 8006508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650c:	b1bb      	cbz	r3, 800653e <_fflush_r+0x46>
 800650e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006510:	07d0      	lsls	r0, r2, #31
 8006512:	d404      	bmi.n	800651e <_fflush_r+0x26>
 8006514:	0599      	lsls	r1, r3, #22
 8006516:	d402      	bmi.n	800651e <_fflush_r+0x26>
 8006518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800651a:	f000 fb19 	bl	8006b50 <__retarget_lock_acquire_recursive>
 800651e:	4628      	mov	r0, r5
 8006520:	4621      	mov	r1, r4
 8006522:	f7ff ff5b 	bl	80063dc <__sflush_r>
 8006526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006528:	07da      	lsls	r2, r3, #31
 800652a:	4605      	mov	r5, r0
 800652c:	d405      	bmi.n	800653a <_fflush_r+0x42>
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	059b      	lsls	r3, r3, #22
 8006532:	d402      	bmi.n	800653a <_fflush_r+0x42>
 8006534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006536:	f000 fb0c 	bl	8006b52 <__retarget_lock_release_recursive>
 800653a:	4628      	mov	r0, r5
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	461d      	mov	r5, r3
 8006540:	e7fb      	b.n	800653a <_fflush_r+0x42>
	...

08006544 <std>:
 8006544:	2300      	movs	r3, #0
 8006546:	b510      	push	{r4, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	e9c0 3300 	strd	r3, r3, [r0]
 800654e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006552:	6083      	str	r3, [r0, #8]
 8006554:	8181      	strh	r1, [r0, #12]
 8006556:	6643      	str	r3, [r0, #100]	; 0x64
 8006558:	81c2      	strh	r2, [r0, #14]
 800655a:	6183      	str	r3, [r0, #24]
 800655c:	4619      	mov	r1, r3
 800655e:	2208      	movs	r2, #8
 8006560:	305c      	adds	r0, #92	; 0x5c
 8006562:	f7fd fdbb 	bl	80040dc <memset>
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <std+0x40>)
 8006568:	6223      	str	r3, [r4, #32]
 800656a:	4b07      	ldr	r3, [pc, #28]	; (8006588 <std+0x44>)
 800656c:	6263      	str	r3, [r4, #36]	; 0x24
 800656e:	4b07      	ldr	r3, [pc, #28]	; (800658c <std+0x48>)
 8006570:	62a3      	str	r3, [r4, #40]	; 0x28
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <std+0x4c>)
 8006574:	61e4      	str	r4, [r4, #28]
 8006576:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006580:	f000 bae4 	b.w	8006b4c <__retarget_lock_init_recursive>
 8006584:	08007b61 	.word	0x08007b61
 8006588:	08007b83 	.word	0x08007b83
 800658c:	08007bbb 	.word	0x08007bbb
 8006590:	08007bdf 	.word	0x08007bdf

08006594 <_cleanup_r>:
 8006594:	4901      	ldr	r1, [pc, #4]	; (800659c <_cleanup_r+0x8>)
 8006596:	f000 bab5 	b.w	8006b04 <_fwalk_reent>
 800659a:	bf00      	nop
 800659c:	080087a9 	.word	0x080087a9

080065a0 <__sfp_lock_acquire>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__sfp_lock_acquire+0x8>)
 80065a2:	f000 bad5 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 80065a6:	bf00      	nop
 80065a8:	20000ab6 	.word	0x20000ab6

080065ac <__sfp_lock_release>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__sfp_lock_release+0x8>)
 80065ae:	f000 bad0 	b.w	8006b52 <__retarget_lock_release_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000ab6 	.word	0x20000ab6

080065b8 <__sinit_lock_acquire>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__sinit_lock_acquire+0x8>)
 80065ba:	f000 bac9 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	20000ab7 	.word	0x20000ab7

080065c4 <__sinit_lock_release>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__sinit_lock_release+0x8>)
 80065c6:	f000 bac4 	b.w	8006b52 <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000ab7 	.word	0x20000ab7

080065d0 <__sinit>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	4604      	mov	r4, r0
 80065d4:	f7ff fff0 	bl	80065b8 <__sinit_lock_acquire>
 80065d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065da:	b11a      	cbz	r2, 80065e4 <__sinit+0x14>
 80065dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e0:	f7ff bff0 	b.w	80065c4 <__sinit_lock_release>
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <__sinit+0x4c>)
 80065e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80065e8:	2303      	movs	r3, #3
 80065ea:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80065ee:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80065f2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80065f6:	6860      	ldr	r0, [r4, #4]
 80065f8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80065fc:	2104      	movs	r1, #4
 80065fe:	f7ff ffa1 	bl	8006544 <std>
 8006602:	68a0      	ldr	r0, [r4, #8]
 8006604:	2201      	movs	r2, #1
 8006606:	2109      	movs	r1, #9
 8006608:	f7ff ff9c 	bl	8006544 <std>
 800660c:	68e0      	ldr	r0, [r4, #12]
 800660e:	2202      	movs	r2, #2
 8006610:	2112      	movs	r1, #18
 8006612:	f7ff ff97 	bl	8006544 <std>
 8006616:	2301      	movs	r3, #1
 8006618:	63a3      	str	r3, [r4, #56]	; 0x38
 800661a:	e7df      	b.n	80065dc <__sinit+0xc>
 800661c:	08006595 	.word	0x08006595

08006620 <__libc_fini_array>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4d07      	ldr	r5, [pc, #28]	; (8006640 <__libc_fini_array+0x20>)
 8006624:	4c07      	ldr	r4, [pc, #28]	; (8006644 <__libc_fini_array+0x24>)
 8006626:	1b64      	subs	r4, r4, r5
 8006628:	10a4      	asrs	r4, r4, #2
 800662a:	b91c      	cbnz	r4, 8006634 <__libc_fini_array+0x14>
 800662c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006630:	f002 bac0 	b.w	8008bb4 <_fini>
 8006634:	3c01      	subs	r4, #1
 8006636:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800663a:	4798      	blx	r3
 800663c:	e7f5      	b.n	800662a <__libc_fini_array+0xa>
 800663e:	bf00      	nop
 8006640:	08008f94 	.word	0x08008f94
 8006644:	08008f98 	.word	0x08008f98

08006648 <_malloc_trim_r>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	4606      	mov	r6, r0
 800664e:	2008      	movs	r0, #8
 8006650:	460c      	mov	r4, r1
 8006652:	f001 fadb 	bl	8007c0c <sysconf>
 8006656:	4f23      	ldr	r7, [pc, #140]	; (80066e4 <_malloc_trim_r+0x9c>)
 8006658:	4680      	mov	r8, r0
 800665a:	4630      	mov	r0, r6
 800665c:	f000 fd52 	bl	8007104 <__malloc_lock>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	685d      	ldr	r5, [r3, #4]
 8006664:	f025 0503 	bic.w	r5, r5, #3
 8006668:	1b2c      	subs	r4, r5, r4
 800666a:	3c11      	subs	r4, #17
 800666c:	4444      	add	r4, r8
 800666e:	fbb4 f4f8 	udiv	r4, r4, r8
 8006672:	3c01      	subs	r4, #1
 8006674:	fb08 f404 	mul.w	r4, r8, r4
 8006678:	45a0      	cmp	r8, r4
 800667a:	dd05      	ble.n	8006688 <_malloc_trim_r+0x40>
 800667c:	4630      	mov	r0, r6
 800667e:	f000 fd47 	bl	8007110 <__malloc_unlock>
 8006682:	2000      	movs	r0, #0
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	2100      	movs	r1, #0
 800668a:	4630      	mov	r0, r6
 800668c:	f001 fa58 	bl	8007b40 <_sbrk_r>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	442b      	add	r3, r5
 8006694:	4298      	cmp	r0, r3
 8006696:	d1f1      	bne.n	800667c <_malloc_trim_r+0x34>
 8006698:	4261      	negs	r1, r4
 800669a:	4630      	mov	r0, r6
 800669c:	f001 fa50 	bl	8007b40 <_sbrk_r>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d110      	bne.n	80066c6 <_malloc_trim_r+0x7e>
 80066a4:	2100      	movs	r1, #0
 80066a6:	4630      	mov	r0, r6
 80066a8:	f001 fa4a 	bl	8007b40 <_sbrk_r>
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	1a83      	subs	r3, r0, r2
 80066b0:	2b0f      	cmp	r3, #15
 80066b2:	dde3      	ble.n	800667c <_malloc_trim_r+0x34>
 80066b4:	490c      	ldr	r1, [pc, #48]	; (80066e8 <_malloc_trim_r+0xa0>)
 80066b6:	6809      	ldr	r1, [r1, #0]
 80066b8:	1a40      	subs	r0, r0, r1
 80066ba:	490c      	ldr	r1, [pc, #48]	; (80066ec <_malloc_trim_r+0xa4>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6008      	str	r0, [r1, #0]
 80066c2:	6053      	str	r3, [r2, #4]
 80066c4:	e7da      	b.n	800667c <_malloc_trim_r+0x34>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <_malloc_trim_r+0xa4>)
 80066ca:	1b2d      	subs	r5, r5, r4
 80066cc:	f045 0501 	orr.w	r5, r5, #1
 80066d0:	605d      	str	r5, [r3, #4]
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	4630      	mov	r0, r6
 80066d6:	1b1b      	subs	r3, r3, r4
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	f000 fd19 	bl	8007110 <__malloc_unlock>
 80066de:	2001      	movs	r0, #1
 80066e0:	e7d0      	b.n	8006684 <_malloc_trim_r+0x3c>
 80066e2:	bf00      	nop
 80066e4:	2000043c 	.word	0x2000043c
 80066e8:	20000844 	.word	0x20000844
 80066ec:	20000ab8 	.word	0x20000ab8

080066f0 <_free_r>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	2900      	cmp	r1, #0
 80066f8:	f000 80b1 	beq.w	800685e <_free_r+0x16e>
 80066fc:	f000 fd02 	bl	8007104 <__malloc_lock>
 8006700:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006704:	4856      	ldr	r0, [pc, #344]	; (8006860 <_free_r+0x170>)
 8006706:	f022 0401 	bic.w	r4, r2, #1
 800670a:	f1a7 0308 	sub.w	r3, r7, #8
 800670e:	eb03 0c04 	add.w	ip, r3, r4
 8006712:	6881      	ldr	r1, [r0, #8]
 8006714:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006718:	4561      	cmp	r1, ip
 800671a:	f026 0603 	bic.w	r6, r6, #3
 800671e:	f002 0201 	and.w	r2, r2, #1
 8006722:	d11b      	bne.n	800675c <_free_r+0x6c>
 8006724:	4434      	add	r4, r6
 8006726:	b93a      	cbnz	r2, 8006738 <_free_r+0x48>
 8006728:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	4414      	add	r4, r2
 8006730:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006734:	60ca      	str	r2, [r1, #12]
 8006736:	6091      	str	r1, [r2, #8]
 8006738:	f044 0201 	orr.w	r2, r4, #1
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	6083      	str	r3, [r0, #8]
 8006740:	4b48      	ldr	r3, [pc, #288]	; (8006864 <_free_r+0x174>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	42a3      	cmp	r3, r4
 8006746:	d804      	bhi.n	8006752 <_free_r+0x62>
 8006748:	4b47      	ldr	r3, [pc, #284]	; (8006868 <_free_r+0x178>)
 800674a:	4628      	mov	r0, r5
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	f7ff ff7b 	bl	8006648 <_malloc_trim_r>
 8006752:	4628      	mov	r0, r5
 8006754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006758:	f000 bcda 	b.w	8007110 <__malloc_unlock>
 800675c:	f8cc 6004 	str.w	r6, [ip, #4]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d138      	bne.n	80067d6 <_free_r+0xe6>
 8006764:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006768:	1a5b      	subs	r3, r3, r1
 800676a:	440c      	add	r4, r1
 800676c:	6899      	ldr	r1, [r3, #8]
 800676e:	f100 0708 	add.w	r7, r0, #8
 8006772:	42b9      	cmp	r1, r7
 8006774:	d031      	beq.n	80067da <_free_r+0xea>
 8006776:	68df      	ldr	r7, [r3, #12]
 8006778:	60cf      	str	r7, [r1, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	eb0c 0106 	add.w	r1, ip, r6
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	07c9      	lsls	r1, r1, #31
 8006784:	d40b      	bmi.n	800679e <_free_r+0xae>
 8006786:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800678a:	4434      	add	r4, r6
 800678c:	bb3a      	cbnz	r2, 80067de <_free_r+0xee>
 800678e:	4e37      	ldr	r6, [pc, #220]	; (800686c <_free_r+0x17c>)
 8006790:	42b1      	cmp	r1, r6
 8006792:	d124      	bne.n	80067de <_free_r+0xee>
 8006794:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006798:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800679c:	2201      	movs	r2, #1
 800679e:	f044 0101 	orr.w	r1, r4, #1
 80067a2:	6059      	str	r1, [r3, #4]
 80067a4:	511c      	str	r4, [r3, r4]
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	d1d3      	bne.n	8006752 <_free_r+0x62>
 80067aa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80067ae:	d21b      	bcs.n	80067e8 <_free_r+0xf8>
 80067b0:	0961      	lsrs	r1, r4, #5
 80067b2:	08e2      	lsrs	r2, r4, #3
 80067b4:	2401      	movs	r4, #1
 80067b6:	408c      	lsls	r4, r1
 80067b8:	6841      	ldr	r1, [r0, #4]
 80067ba:	3201      	adds	r2, #1
 80067bc:	430c      	orrs	r4, r1
 80067be:	6044      	str	r4, [r0, #4]
 80067c0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80067c4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80067c8:	3908      	subs	r1, #8
 80067ca:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80067ce:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80067d2:	60e3      	str	r3, [r4, #12]
 80067d4:	e7bd      	b.n	8006752 <_free_r+0x62>
 80067d6:	2200      	movs	r2, #0
 80067d8:	e7d0      	b.n	800677c <_free_r+0x8c>
 80067da:	2201      	movs	r2, #1
 80067dc:	e7ce      	b.n	800677c <_free_r+0x8c>
 80067de:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80067e2:	60ce      	str	r6, [r1, #12]
 80067e4:	60b1      	str	r1, [r6, #8]
 80067e6:	e7da      	b.n	800679e <_free_r+0xae>
 80067e8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80067ec:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80067f0:	d214      	bcs.n	800681c <_free_r+0x12c>
 80067f2:	09a2      	lsrs	r2, r4, #6
 80067f4:	3238      	adds	r2, #56	; 0x38
 80067f6:	1c51      	adds	r1, r2, #1
 80067f8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80067fc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006800:	428e      	cmp	r6, r1
 8006802:	d125      	bne.n	8006850 <_free_r+0x160>
 8006804:	2401      	movs	r4, #1
 8006806:	1092      	asrs	r2, r2, #2
 8006808:	fa04 f202 	lsl.w	r2, r4, r2
 800680c:	6844      	ldr	r4, [r0, #4]
 800680e:	4322      	orrs	r2, r4
 8006810:	6042      	str	r2, [r0, #4]
 8006812:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006816:	60b3      	str	r3, [r6, #8]
 8006818:	60cb      	str	r3, [r1, #12]
 800681a:	e79a      	b.n	8006752 <_free_r+0x62>
 800681c:	2a14      	cmp	r2, #20
 800681e:	d801      	bhi.n	8006824 <_free_r+0x134>
 8006820:	325b      	adds	r2, #91	; 0x5b
 8006822:	e7e8      	b.n	80067f6 <_free_r+0x106>
 8006824:	2a54      	cmp	r2, #84	; 0x54
 8006826:	d802      	bhi.n	800682e <_free_r+0x13e>
 8006828:	0b22      	lsrs	r2, r4, #12
 800682a:	326e      	adds	r2, #110	; 0x6e
 800682c:	e7e3      	b.n	80067f6 <_free_r+0x106>
 800682e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006832:	d802      	bhi.n	800683a <_free_r+0x14a>
 8006834:	0be2      	lsrs	r2, r4, #15
 8006836:	3277      	adds	r2, #119	; 0x77
 8006838:	e7dd      	b.n	80067f6 <_free_r+0x106>
 800683a:	f240 5154 	movw	r1, #1364	; 0x554
 800683e:	428a      	cmp	r2, r1
 8006840:	bf9a      	itte	ls
 8006842:	0ca2      	lsrls	r2, r4, #18
 8006844:	327c      	addls	r2, #124	; 0x7c
 8006846:	227e      	movhi	r2, #126	; 0x7e
 8006848:	e7d5      	b.n	80067f6 <_free_r+0x106>
 800684a:	6889      	ldr	r1, [r1, #8]
 800684c:	428e      	cmp	r6, r1
 800684e:	d004      	beq.n	800685a <_free_r+0x16a>
 8006850:	684a      	ldr	r2, [r1, #4]
 8006852:	f022 0203 	bic.w	r2, r2, #3
 8006856:	42a2      	cmp	r2, r4
 8006858:	d8f7      	bhi.n	800684a <_free_r+0x15a>
 800685a:	68ce      	ldr	r6, [r1, #12]
 800685c:	e7d9      	b.n	8006812 <_free_r+0x122>
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	2000043c 	.word	0x2000043c
 8006864:	20000848 	.word	0x20000848
 8006868:	20000ae8 	.word	0x20000ae8
 800686c:	20000444 	.word	0x20000444

08006870 <__sfvwrite_r>:
 8006870:	6893      	ldr	r3, [r2, #8]
 8006872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	4690      	mov	r8, r2
 800687c:	b91b      	cbnz	r3, 8006886 <__sfvwrite_r+0x16>
 800687e:	2000      	movs	r0, #0
 8006880:	b003      	add	sp, #12
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	898b      	ldrh	r3, [r1, #12]
 8006888:	0718      	lsls	r0, r3, #28
 800688a:	d550      	bpl.n	800692e <__sfvwrite_r+0xbe>
 800688c:	690b      	ldr	r3, [r1, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d04d      	beq.n	800692e <__sfvwrite_r+0xbe>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f8d8 7000 	ldr.w	r7, [r8]
 8006898:	f013 0902 	ands.w	r9, r3, #2
 800689c:	d16c      	bne.n	8006978 <__sfvwrite_r+0x108>
 800689e:	f013 0301 	ands.w	r3, r3, #1
 80068a2:	f000 809c 	beq.w	80069de <__sfvwrite_r+0x16e>
 80068a6:	4648      	mov	r0, r9
 80068a8:	46ca      	mov	sl, r9
 80068aa:	46cb      	mov	fp, r9
 80068ac:	f1bb 0f00 	cmp.w	fp, #0
 80068b0:	f000 8103 	beq.w	8006aba <__sfvwrite_r+0x24a>
 80068b4:	b950      	cbnz	r0, 80068cc <__sfvwrite_r+0x5c>
 80068b6:	465a      	mov	r2, fp
 80068b8:	210a      	movs	r1, #10
 80068ba:	4650      	mov	r0, sl
 80068bc:	f7f9 fcc8 	bl	8000250 <memchr>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f000 80ff 	beq.w	8006ac4 <__sfvwrite_r+0x254>
 80068c6:	3001      	adds	r0, #1
 80068c8:	eba0 090a 	sub.w	r9, r0, sl
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	6921      	ldr	r1, [r4, #16]
 80068d0:	6963      	ldr	r3, [r4, #20]
 80068d2:	45d9      	cmp	r9, fp
 80068d4:	464a      	mov	r2, r9
 80068d6:	bf28      	it	cs
 80068d8:	465a      	movcs	r2, fp
 80068da:	4288      	cmp	r0, r1
 80068dc:	f240 80f5 	bls.w	8006aca <__sfvwrite_r+0x25a>
 80068e0:	68a5      	ldr	r5, [r4, #8]
 80068e2:	441d      	add	r5, r3
 80068e4:	42aa      	cmp	r2, r5
 80068e6:	f340 80f0 	ble.w	8006aca <__sfvwrite_r+0x25a>
 80068ea:	4651      	mov	r1, sl
 80068ec:	462a      	mov	r2, r5
 80068ee:	f000 fbef 	bl	80070d0 <memmove>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	442b      	add	r3, r5
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	4621      	mov	r1, r4
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff fdfc 	bl	80064f8 <_fflush_r>
 8006900:	2800      	cmp	r0, #0
 8006902:	d167      	bne.n	80069d4 <__sfvwrite_r+0x164>
 8006904:	ebb9 0905 	subs.w	r9, r9, r5
 8006908:	f040 80f7 	bne.w	8006afa <__sfvwrite_r+0x28a>
 800690c:	4621      	mov	r1, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff fdf2 	bl	80064f8 <_fflush_r>
 8006914:	2800      	cmp	r0, #0
 8006916:	d15d      	bne.n	80069d4 <__sfvwrite_r+0x164>
 8006918:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800691c:	44aa      	add	sl, r5
 800691e:	ebab 0b05 	sub.w	fp, fp, r5
 8006922:	1b55      	subs	r5, r2, r5
 8006924:	f8c8 5008 	str.w	r5, [r8, #8]
 8006928:	2d00      	cmp	r5, #0
 800692a:	d1bf      	bne.n	80068ac <__sfvwrite_r+0x3c>
 800692c:	e7a7      	b.n	800687e <__sfvwrite_r+0xe>
 800692e:	4621      	mov	r1, r4
 8006930:	4630      	mov	r0, r6
 8006932:	f7fe ff09 	bl	8005748 <__swsetup_r>
 8006936:	2800      	cmp	r0, #0
 8006938:	d0ab      	beq.n	8006892 <__sfvwrite_r+0x22>
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e79f      	b.n	8006880 <__sfvwrite_r+0x10>
 8006940:	e9d7 b900 	ldrd	fp, r9, [r7]
 8006944:	3708      	adds	r7, #8
 8006946:	f1b9 0f00 	cmp.w	r9, #0
 800694a:	d0f9      	beq.n	8006940 <__sfvwrite_r+0xd0>
 800694c:	45d1      	cmp	r9, sl
 800694e:	464b      	mov	r3, r9
 8006950:	69e1      	ldr	r1, [r4, #28]
 8006952:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006954:	bf28      	it	cs
 8006956:	4653      	movcs	r3, sl
 8006958:	465a      	mov	r2, fp
 800695a:	4630      	mov	r0, r6
 800695c:	47a8      	blx	r5
 800695e:	2800      	cmp	r0, #0
 8006960:	dd38      	ble.n	80069d4 <__sfvwrite_r+0x164>
 8006962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006966:	4483      	add	fp, r0
 8006968:	eba9 0900 	sub.w	r9, r9, r0
 800696c:	1a18      	subs	r0, r3, r0
 800696e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006972:	2800      	cmp	r0, #0
 8006974:	d1e7      	bne.n	8006946 <__sfvwrite_r+0xd6>
 8006976:	e782      	b.n	800687e <__sfvwrite_r+0xe>
 8006978:	f04f 0b00 	mov.w	fp, #0
 800697c:	f8df a180 	ldr.w	sl, [pc, #384]	; 8006b00 <__sfvwrite_r+0x290>
 8006980:	46d9      	mov	r9, fp
 8006982:	e7e0      	b.n	8006946 <__sfvwrite_r+0xd6>
 8006984:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8006988:	3708      	adds	r7, #8
 800698a:	f1ba 0f00 	cmp.w	sl, #0
 800698e:	d0f9      	beq.n	8006984 <__sfvwrite_r+0x114>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	68a2      	ldr	r2, [r4, #8]
 8006996:	0599      	lsls	r1, r3, #22
 8006998:	d563      	bpl.n	8006a62 <__sfvwrite_r+0x1f2>
 800699a:	4552      	cmp	r2, sl
 800699c:	d836      	bhi.n	8006a0c <__sfvwrite_r+0x19c>
 800699e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80069a2:	d033      	beq.n	8006a0c <__sfvwrite_r+0x19c>
 80069a4:	6921      	ldr	r1, [r4, #16]
 80069a6:	6965      	ldr	r5, [r4, #20]
 80069a8:	eba0 0b01 	sub.w	fp, r0, r1
 80069ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069b4:	f10b 0201 	add.w	r2, fp, #1
 80069b8:	106d      	asrs	r5, r5, #1
 80069ba:	4452      	add	r2, sl
 80069bc:	4295      	cmp	r5, r2
 80069be:	bf38      	it	cc
 80069c0:	4615      	movcc	r5, r2
 80069c2:	055b      	lsls	r3, r3, #21
 80069c4:	d53d      	bpl.n	8006a42 <__sfvwrite_r+0x1d2>
 80069c6:	4629      	mov	r1, r5
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 f937 	bl	8006c3c <_malloc_r>
 80069ce:	b948      	cbnz	r0, 80069e4 <__sfvwrite_r+0x174>
 80069d0:	230c      	movs	r3, #12
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	e7ad      	b.n	800693a <__sfvwrite_r+0xca>
 80069de:	4699      	mov	r9, r3
 80069e0:	469a      	mov	sl, r3
 80069e2:	e7d2      	b.n	800698a <__sfvwrite_r+0x11a>
 80069e4:	465a      	mov	r2, fp
 80069e6:	6921      	ldr	r1, [r4, #16]
 80069e8:	9001      	str	r0, [sp, #4]
 80069ea:	f000 fb63 	bl	80070b4 <memcpy>
 80069ee:	89a2      	ldrh	r2, [r4, #12]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80069f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069fa:	81a2      	strh	r2, [r4, #12]
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	6165      	str	r5, [r4, #20]
 8006a00:	445b      	add	r3, fp
 8006a02:	eba5 050b 	sub.w	r5, r5, fp
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	4652      	mov	r2, sl
 8006a0a:	60a5      	str	r5, [r4, #8]
 8006a0c:	4552      	cmp	r2, sl
 8006a0e:	bf28      	it	cs
 8006a10:	4652      	movcs	r2, sl
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	9201      	str	r2, [sp, #4]
 8006a16:	4649      	mov	r1, r9
 8006a18:	f000 fb5a 	bl	80070d0 <memmove>
 8006a1c:	68a3      	ldr	r3, [r4, #8]
 8006a1e:	9a01      	ldr	r2, [sp, #4]
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	60a3      	str	r3, [r4, #8]
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	441a      	add	r2, r3
 8006a28:	4655      	mov	r5, sl
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006a30:	44a9      	add	r9, r5
 8006a32:	ebaa 0a05 	sub.w	sl, sl, r5
 8006a36:	1b45      	subs	r5, r0, r5
 8006a38:	f8c8 5008 	str.w	r5, [r8, #8]
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	d1a4      	bne.n	800698a <__sfvwrite_r+0x11a>
 8006a40:	e71d      	b.n	800687e <__sfvwrite_r+0xe>
 8006a42:	462a      	mov	r2, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 fe9f 	bl	8007788 <_realloc_r>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1d5      	bne.n	80069fc <__sfvwrite_r+0x18c>
 8006a50:	6921      	ldr	r1, [r4, #16]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7ff fe4c 	bl	80066f0 <_free_r>
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	e7b6      	b.n	80069d0 <__sfvwrite_r+0x160>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	4283      	cmp	r3, r0
 8006a66:	d302      	bcc.n	8006a6e <__sfvwrite_r+0x1fe>
 8006a68:	6961      	ldr	r1, [r4, #20]
 8006a6a:	4551      	cmp	r1, sl
 8006a6c:	d915      	bls.n	8006a9a <__sfvwrite_r+0x22a>
 8006a6e:	4552      	cmp	r2, sl
 8006a70:	bf28      	it	cs
 8006a72:	4652      	movcs	r2, sl
 8006a74:	4649      	mov	r1, r9
 8006a76:	4615      	mov	r5, r2
 8006a78:	f000 fb2a 	bl	80070d0 <memmove>
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	1b5b      	subs	r3, r3, r5
 8006a82:	442a      	add	r2, r5
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1cf      	bne.n	8006a2c <__sfvwrite_r+0x1bc>
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff fd32 	bl	80064f8 <_fflush_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d0c9      	beq.n	8006a2c <__sfvwrite_r+0x1bc>
 8006a98:	e79c      	b.n	80069d4 <__sfvwrite_r+0x164>
 8006a9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006a9e:	459a      	cmp	sl, r3
 8006aa0:	bf38      	it	cc
 8006aa2:	4653      	movcc	r3, sl
 8006aa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006aa6:	fb93 f3f1 	sdiv	r3, r3, r1
 8006aaa:	464a      	mov	r2, r9
 8006aac:	434b      	muls	r3, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	69e1      	ldr	r1, [r4, #28]
 8006ab2:	47a8      	blx	r5
 8006ab4:	1e05      	subs	r5, r0, #0
 8006ab6:	dcb9      	bgt.n	8006a2c <__sfvwrite_r+0x1bc>
 8006ab8:	e78c      	b.n	80069d4 <__sfvwrite_r+0x164>
 8006aba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006abe:	2000      	movs	r0, #0
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	e6f3      	b.n	80068ac <__sfvwrite_r+0x3c>
 8006ac4:	f10b 0901 	add.w	r9, fp, #1
 8006ac8:	e700      	b.n	80068cc <__sfvwrite_r+0x5c>
 8006aca:	4293      	cmp	r3, r2
 8006acc:	dc08      	bgt.n	8006ae0 <__sfvwrite_r+0x270>
 8006ace:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006ad0:	69e1      	ldr	r1, [r4, #28]
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	47a8      	blx	r5
 8006ad8:	1e05      	subs	r5, r0, #0
 8006ada:	f73f af13 	bgt.w	8006904 <__sfvwrite_r+0x94>
 8006ade:	e779      	b.n	80069d4 <__sfvwrite_r+0x164>
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	9201      	str	r2, [sp, #4]
 8006ae4:	f000 faf4 	bl	80070d0 <memmove>
 8006ae8:	9a01      	ldr	r2, [sp, #4]
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	60a3      	str	r3, [r4, #8]
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	4413      	add	r3, r2
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	4615      	mov	r5, r2
 8006af8:	e704      	b.n	8006904 <__sfvwrite_r+0x94>
 8006afa:	2001      	movs	r0, #1
 8006afc:	e70c      	b.n	8006918 <__sfvwrite_r+0xa8>
 8006afe:	bf00      	nop
 8006b00:	7ffffc00 	.word	0x7ffffc00

08006b04 <_fwalk_reent>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4606      	mov	r6, r0
 8006b0a:	4688      	mov	r8, r1
 8006b0c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8006b10:	2700      	movs	r7, #0
 8006b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b16:	f1b9 0901 	subs.w	r9, r9, #1
 8006b1a:	d505      	bpl.n	8006b28 <_fwalk_reent+0x24>
 8006b1c:	6824      	ldr	r4, [r4, #0]
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d1f7      	bne.n	8006b12 <_fwalk_reent+0xe>
 8006b22:	4638      	mov	r0, r7
 8006b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b28:	89ab      	ldrh	r3, [r5, #12]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d907      	bls.n	8006b3e <_fwalk_reent+0x3a>
 8006b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b32:	3301      	adds	r3, #1
 8006b34:	d003      	beq.n	8006b3e <_fwalk_reent+0x3a>
 8006b36:	4629      	mov	r1, r5
 8006b38:	4630      	mov	r0, r6
 8006b3a:	47c0      	blx	r8
 8006b3c:	4307      	orrs	r7, r0
 8006b3e:	3568      	adds	r5, #104	; 0x68
 8006b40:	e7e9      	b.n	8006b16 <_fwalk_reent+0x12>
	...

08006b44 <_localeconv_r>:
 8006b44:	4800      	ldr	r0, [pc, #0]	; (8006b48 <_localeconv_r+0x4>)
 8006b46:	4770      	bx	lr
 8006b48:	2000093c 	.word	0x2000093c

08006b4c <__retarget_lock_init_recursive>:
 8006b4c:	4770      	bx	lr

08006b4e <__retarget_lock_close_recursive>:
 8006b4e:	4770      	bx	lr

08006b50 <__retarget_lock_acquire_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_release_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <__swhatbuf_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460e      	mov	r6, r1
 8006b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	b096      	sub	sp, #88	; 0x58
 8006b60:	4614      	mov	r4, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	da0a      	bge.n	8006b7c <__swhatbuf_r+0x28>
 8006b66:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	d116      	bne.n	8006ba2 <__swhatbuf_r+0x4e>
 8006b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	e015      	b.n	8006ba8 <__swhatbuf_r+0x54>
 8006b7c:	466a      	mov	r2, sp
 8006b7e:	f001 fee9 	bl	8008954 <_fstat_r>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	dbef      	blt.n	8006b66 <__swhatbuf_r+0x12>
 8006b86:	9a01      	ldr	r2, [sp, #4]
 8006b88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b90:	425a      	negs	r2, r3
 8006b92:	415a      	adcs	r2, r3
 8006b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	e002      	b.n	8006ba8 <__swhatbuf_r+0x54>
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	b016      	add	sp, #88	; 0x58
 8006baa:	bd70      	pop	{r4, r5, r6, pc}

08006bac <__smakebuf_r>:
 8006bac:	898b      	ldrh	r3, [r1, #12]
 8006bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb0:	079d      	lsls	r5, r3, #30
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	d507      	bpl.n	8006bc8 <__smakebuf_r+0x1c>
 8006bb8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	6163      	str	r3, [r4, #20]
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	ab01      	add	r3, sp, #4
 8006bca:	466a      	mov	r2, sp
 8006bcc:	f7ff ffc2 	bl	8006b54 <__swhatbuf_r>
 8006bd0:	9900      	ldr	r1, [sp, #0]
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f000 f831 	bl	8006c3c <_malloc_r>
 8006bda:	b948      	cbnz	r0, 8006bf0 <__smakebuf_r+0x44>
 8006bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be0:	059a      	lsls	r2, r3, #22
 8006be2:	d4ef      	bmi.n	8006bc4 <__smakebuf_r+0x18>
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e7e3      	b.n	8006bb8 <__smakebuf_r+0xc>
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <__smakebuf_r+0x7c>)
 8006bf2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	6163      	str	r3, [r4, #20]
 8006c02:	9b01      	ldr	r3, [sp, #4]
 8006c04:	6120      	str	r0, [r4, #16]
 8006c06:	b15b      	cbz	r3, 8006c20 <__smakebuf_r+0x74>
 8006c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f001 feb3 	bl	8008978 <_isatty_r>
 8006c12:	b128      	cbz	r0, 8006c20 <__smakebuf_r+0x74>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	89a0      	ldrh	r0, [r4, #12]
 8006c22:	4305      	orrs	r5, r0
 8006c24:	81a5      	strh	r5, [r4, #12]
 8006c26:	e7cd      	b.n	8006bc4 <__smakebuf_r+0x18>
 8006c28:	08006595 	.word	0x08006595

08006c2c <malloc>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <malloc+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f000 b803 	b.w	8006c3c <_malloc_r>
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <_malloc_r>:
 8006c3c:	f101 030b 	add.w	r3, r1, #11
 8006c40:	2b16      	cmp	r3, #22
 8006c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	4605      	mov	r5, r0
 8006c48:	d906      	bls.n	8006c58 <_malloc_r+0x1c>
 8006c4a:	f033 0707 	bics.w	r7, r3, #7
 8006c4e:	d504      	bpl.n	8006c5a <_malloc_r+0x1e>
 8006c50:	230c      	movs	r3, #12
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	2400      	movs	r4, #0
 8006c56:	e1a5      	b.n	8006fa4 <_malloc_r+0x368>
 8006c58:	2710      	movs	r7, #16
 8006c5a:	42b9      	cmp	r1, r7
 8006c5c:	d8f8      	bhi.n	8006c50 <_malloc_r+0x14>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fa50 	bl	8007104 <__malloc_lock>
 8006c64:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8006c68:	4eb0      	ldr	r6, [pc, #704]	; (8006f2c <_malloc_r+0x2f0>)
 8006c6a:	d237      	bcs.n	8006cdc <_malloc_r+0xa0>
 8006c6c:	f107 0208 	add.w	r2, r7, #8
 8006c70:	4432      	add	r2, r6
 8006c72:	f1a2 0108 	sub.w	r1, r2, #8
 8006c76:	6854      	ldr	r4, [r2, #4]
 8006c78:	428c      	cmp	r4, r1
 8006c7a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006c7e:	d102      	bne.n	8006c86 <_malloc_r+0x4a>
 8006c80:	68d4      	ldr	r4, [r2, #12]
 8006c82:	42a2      	cmp	r2, r4
 8006c84:	d010      	beq.n	8006ca8 <_malloc_r+0x6c>
 8006c86:	6863      	ldr	r3, [r4, #4]
 8006c88:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	60ca      	str	r2, [r1, #12]
 8006c92:	4423      	add	r3, r4
 8006c94:	6091      	str	r1, [r2, #8]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 fa36 	bl	8007110 <__malloc_unlock>
 8006ca4:	3408      	adds	r4, #8
 8006ca6:	e17d      	b.n	8006fa4 <_malloc_r+0x368>
 8006ca8:	3302      	adds	r3, #2
 8006caa:	6934      	ldr	r4, [r6, #16]
 8006cac:	49a0      	ldr	r1, [pc, #640]	; (8006f30 <_malloc_r+0x2f4>)
 8006cae:	428c      	cmp	r4, r1
 8006cb0:	d077      	beq.n	8006da2 <_malloc_r+0x166>
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	f022 0c03 	bic.w	ip, r2, #3
 8006cb8:	ebac 0007 	sub.w	r0, ip, r7
 8006cbc:	280f      	cmp	r0, #15
 8006cbe:	dd48      	ble.n	8006d52 <_malloc_r+0x116>
 8006cc0:	19e2      	adds	r2, r4, r7
 8006cc2:	f040 0301 	orr.w	r3, r0, #1
 8006cc6:	f047 0701 	orr.w	r7, r7, #1
 8006cca:	6067      	str	r7, [r4, #4]
 8006ccc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006cd0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	f844 000c 	str.w	r0, [r4, ip]
 8006cda:	e7e0      	b.n	8006c9e <_malloc_r+0x62>
 8006cdc:	0a7b      	lsrs	r3, r7, #9
 8006cde:	d02a      	beq.n	8006d36 <_malloc_r+0xfa>
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d812      	bhi.n	8006d0a <_malloc_r+0xce>
 8006ce4:	09bb      	lsrs	r3, r7, #6
 8006ce6:	3338      	adds	r3, #56	; 0x38
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8006cee:	f1a2 0c08 	sub.w	ip, r2, #8
 8006cf2:	6854      	ldr	r4, [r2, #4]
 8006cf4:	4564      	cmp	r4, ip
 8006cf6:	d006      	beq.n	8006d06 <_malloc_r+0xca>
 8006cf8:	6862      	ldr	r2, [r4, #4]
 8006cfa:	f022 0203 	bic.w	r2, r2, #3
 8006cfe:	1bd0      	subs	r0, r2, r7
 8006d00:	280f      	cmp	r0, #15
 8006d02:	dd1c      	ble.n	8006d3e <_malloc_r+0x102>
 8006d04:	3b01      	subs	r3, #1
 8006d06:	3301      	adds	r3, #1
 8006d08:	e7cf      	b.n	8006caa <_malloc_r+0x6e>
 8006d0a:	2b14      	cmp	r3, #20
 8006d0c:	d801      	bhi.n	8006d12 <_malloc_r+0xd6>
 8006d0e:	335b      	adds	r3, #91	; 0x5b
 8006d10:	e7ea      	b.n	8006ce8 <_malloc_r+0xac>
 8006d12:	2b54      	cmp	r3, #84	; 0x54
 8006d14:	d802      	bhi.n	8006d1c <_malloc_r+0xe0>
 8006d16:	0b3b      	lsrs	r3, r7, #12
 8006d18:	336e      	adds	r3, #110	; 0x6e
 8006d1a:	e7e5      	b.n	8006ce8 <_malloc_r+0xac>
 8006d1c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006d20:	d802      	bhi.n	8006d28 <_malloc_r+0xec>
 8006d22:	0bfb      	lsrs	r3, r7, #15
 8006d24:	3377      	adds	r3, #119	; 0x77
 8006d26:	e7df      	b.n	8006ce8 <_malloc_r+0xac>
 8006d28:	f240 5254 	movw	r2, #1364	; 0x554
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d804      	bhi.n	8006d3a <_malloc_r+0xfe>
 8006d30:	0cbb      	lsrs	r3, r7, #18
 8006d32:	337c      	adds	r3, #124	; 0x7c
 8006d34:	e7d8      	b.n	8006ce8 <_malloc_r+0xac>
 8006d36:	233f      	movs	r3, #63	; 0x3f
 8006d38:	e7d6      	b.n	8006ce8 <_malloc_r+0xac>
 8006d3a:	237e      	movs	r3, #126	; 0x7e
 8006d3c:	e7d4      	b.n	8006ce8 <_malloc_r+0xac>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	68e1      	ldr	r1, [r4, #12]
 8006d42:	db04      	blt.n	8006d4e <_malloc_r+0x112>
 8006d44:	68a3      	ldr	r3, [r4, #8]
 8006d46:	60d9      	str	r1, [r3, #12]
 8006d48:	608b      	str	r3, [r1, #8]
 8006d4a:	18a3      	adds	r3, r4, r2
 8006d4c:	e7a3      	b.n	8006c96 <_malloc_r+0x5a>
 8006d4e:	460c      	mov	r4, r1
 8006d50:	e7d0      	b.n	8006cf4 <_malloc_r+0xb8>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006d58:	db07      	blt.n	8006d6a <_malloc_r+0x12e>
 8006d5a:	44a4      	add	ip, r4
 8006d5c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	f8cc 3004 	str.w	r3, [ip, #4]
 8006d68:	e799      	b.n	8006c9e <_malloc_r+0x62>
 8006d6a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006d6e:	6870      	ldr	r0, [r6, #4]
 8006d70:	f080 8096 	bcs.w	8006ea0 <_malloc_r+0x264>
 8006d74:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8006d78:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006d7c:	f04f 0c01 	mov.w	ip, #1
 8006d80:	3201      	adds	r2, #1
 8006d82:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006d86:	ea4c 0000 	orr.w	r0, ip, r0
 8006d8a:	6070      	str	r0, [r6, #4]
 8006d8c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006d90:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8006d94:	3808      	subs	r0, #8
 8006d96:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006d9a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006d9e:	f8cc 400c 	str.w	r4, [ip, #12]
 8006da2:	2001      	movs	r0, #1
 8006da4:	109a      	asrs	r2, r3, #2
 8006da6:	fa00 f202 	lsl.w	r2, r0, r2
 8006daa:	6870      	ldr	r0, [r6, #4]
 8006dac:	4290      	cmp	r0, r2
 8006dae:	d326      	bcc.n	8006dfe <_malloc_r+0x1c2>
 8006db0:	4210      	tst	r0, r2
 8006db2:	d106      	bne.n	8006dc2 <_malloc_r+0x186>
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	0052      	lsls	r2, r2, #1
 8006dba:	4210      	tst	r0, r2
 8006dbc:	f103 0304 	add.w	r3, r3, #4
 8006dc0:	d0fa      	beq.n	8006db8 <_malloc_r+0x17c>
 8006dc2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8006dc6:	46c1      	mov	r9, r8
 8006dc8:	469e      	mov	lr, r3
 8006dca:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006dce:	454c      	cmp	r4, r9
 8006dd0:	f040 80ba 	bne.w	8006f48 <_malloc_r+0x30c>
 8006dd4:	f10e 0e01 	add.w	lr, lr, #1
 8006dd8:	f01e 0f03 	tst.w	lr, #3
 8006ddc:	f109 0908 	add.w	r9, r9, #8
 8006de0:	d1f3      	bne.n	8006dca <_malloc_r+0x18e>
 8006de2:	0798      	lsls	r0, r3, #30
 8006de4:	f040 80e4 	bne.w	8006fb0 <_malloc_r+0x374>
 8006de8:	6873      	ldr	r3, [r6, #4]
 8006dea:	ea23 0302 	bic.w	r3, r3, r2
 8006dee:	6073      	str	r3, [r6, #4]
 8006df0:	6870      	ldr	r0, [r6, #4]
 8006df2:	0052      	lsls	r2, r2, #1
 8006df4:	4290      	cmp	r0, r2
 8006df6:	d302      	bcc.n	8006dfe <_malloc_r+0x1c2>
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	f040 80e6 	bne.w	8006fca <_malloc_r+0x38e>
 8006dfe:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006e02:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006e06:	f023 0903 	bic.w	r9, r3, #3
 8006e0a:	45b9      	cmp	r9, r7
 8006e0c:	d304      	bcc.n	8006e18 <_malloc_r+0x1dc>
 8006e0e:	eba9 0207 	sub.w	r2, r9, r7
 8006e12:	2a0f      	cmp	r2, #15
 8006e14:	f300 8142 	bgt.w	800709c <_malloc_r+0x460>
 8006e18:	4b46      	ldr	r3, [pc, #280]	; (8006f34 <_malloc_r+0x2f8>)
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	3110      	adds	r1, #16
 8006e1e:	4439      	add	r1, r7
 8006e20:	2008      	movs	r0, #8
 8006e22:	9101      	str	r1, [sp, #4]
 8006e24:	f000 fef2 	bl	8007c0c <sysconf>
 8006e28:	4a43      	ldr	r2, [pc, #268]	; (8006f38 <_malloc_r+0x2fc>)
 8006e2a:	9901      	ldr	r1, [sp, #4]
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	bf1f      	itttt	ne
 8006e32:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006e36:	1809      	addne	r1, r1, r0
 8006e38:	4243      	negne	r3, r0
 8006e3a:	4019      	andne	r1, r3
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	9101      	str	r1, [sp, #4]
 8006e42:	f000 fe7d 	bl	8007b40 <_sbrk_r>
 8006e46:	1c42      	adds	r2, r0, #1
 8006e48:	eb0a 0b09 	add.w	fp, sl, r9
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	f000 80f8 	beq.w	8007042 <_malloc_r+0x406>
 8006e52:	4583      	cmp	fp, r0
 8006e54:	9901      	ldr	r1, [sp, #4]
 8006e56:	4a38      	ldr	r2, [pc, #224]	; (8006f38 <_malloc_r+0x2fc>)
 8006e58:	d902      	bls.n	8006e60 <_malloc_r+0x224>
 8006e5a:	45b2      	cmp	sl, r6
 8006e5c:	f040 80f1 	bne.w	8007042 <_malloc_r+0x406>
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <_malloc_r+0x300>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	45a3      	cmp	fp, r4
 8006e66:	eb00 0e01 	add.w	lr, r0, r1
 8006e6a:	f8c3 e000 	str.w	lr, [r3]
 8006e6e:	f108 3cff 	add.w	ip, r8, #4294967295
 8006e72:	f040 80ac 	bne.w	8006fce <_malloc_r+0x392>
 8006e76:	ea1b 0f0c 	tst.w	fp, ip
 8006e7a:	f040 80a8 	bne.w	8006fce <_malloc_r+0x392>
 8006e7e:	68b2      	ldr	r2, [r6, #8]
 8006e80:	4449      	add	r1, r9
 8006e82:	f041 0101 	orr.w	r1, r1, #1
 8006e86:	6051      	str	r1, [r2, #4]
 8006e88:	4a2d      	ldr	r2, [pc, #180]	; (8006f40 <_malloc_r+0x304>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6811      	ldr	r1, [r2, #0]
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	bf88      	it	hi
 8006e92:	6013      	strhi	r3, [r2, #0]
 8006e94:	4a2b      	ldr	r2, [pc, #172]	; (8006f44 <_malloc_r+0x308>)
 8006e96:	6811      	ldr	r1, [r2, #0]
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	bf88      	it	hi
 8006e9c:	6013      	strhi	r3, [r2, #0]
 8006e9e:	e0d0      	b.n	8007042 <_malloc_r+0x406>
 8006ea0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8006ea4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8006ea8:	d218      	bcs.n	8006edc <_malloc_r+0x2a0>
 8006eaa:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006eae:	3238      	adds	r2, #56	; 0x38
 8006eb0:	f102 0e01 	add.w	lr, r2, #1
 8006eb4:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006eb8:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8006ebc:	45f0      	cmp	r8, lr
 8006ebe:	d12b      	bne.n	8006f18 <_malloc_r+0x2dc>
 8006ec0:	1092      	asrs	r2, r2, #2
 8006ec2:	f04f 0c01 	mov.w	ip, #1
 8006ec6:	fa0c f202 	lsl.w	r2, ip, r2
 8006eca:	4310      	orrs	r0, r2
 8006ecc:	6070      	str	r0, [r6, #4]
 8006ece:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006ed2:	f8c8 4008 	str.w	r4, [r8, #8]
 8006ed6:	f8ce 400c 	str.w	r4, [lr, #12]
 8006eda:	e762      	b.n	8006da2 <_malloc_r+0x166>
 8006edc:	2a14      	cmp	r2, #20
 8006ede:	d801      	bhi.n	8006ee4 <_malloc_r+0x2a8>
 8006ee0:	325b      	adds	r2, #91	; 0x5b
 8006ee2:	e7e5      	b.n	8006eb0 <_malloc_r+0x274>
 8006ee4:	2a54      	cmp	r2, #84	; 0x54
 8006ee6:	d803      	bhi.n	8006ef0 <_malloc_r+0x2b4>
 8006ee8:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006eec:	326e      	adds	r2, #110	; 0x6e
 8006eee:	e7df      	b.n	8006eb0 <_malloc_r+0x274>
 8006ef0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006ef4:	d803      	bhi.n	8006efe <_malloc_r+0x2c2>
 8006ef6:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006efa:	3277      	adds	r2, #119	; 0x77
 8006efc:	e7d8      	b.n	8006eb0 <_malloc_r+0x274>
 8006efe:	f240 5e54 	movw	lr, #1364	; 0x554
 8006f02:	4572      	cmp	r2, lr
 8006f04:	bf9a      	itte	ls
 8006f06:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006f0a:	327c      	addls	r2, #124	; 0x7c
 8006f0c:	227e      	movhi	r2, #126	; 0x7e
 8006f0e:	e7cf      	b.n	8006eb0 <_malloc_r+0x274>
 8006f10:	f8de e008 	ldr.w	lr, [lr, #8]
 8006f14:	45f0      	cmp	r8, lr
 8006f16:	d005      	beq.n	8006f24 <_malloc_r+0x2e8>
 8006f18:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006f1c:	f022 0203 	bic.w	r2, r2, #3
 8006f20:	4562      	cmp	r2, ip
 8006f22:	d8f5      	bhi.n	8006f10 <_malloc_r+0x2d4>
 8006f24:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006f28:	e7d1      	b.n	8006ece <_malloc_r+0x292>
 8006f2a:	bf00      	nop
 8006f2c:	2000043c 	.word	0x2000043c
 8006f30:	20000444 	.word	0x20000444
 8006f34:	20000ae8 	.word	0x20000ae8
 8006f38:	20000844 	.word	0x20000844
 8006f3c:	20000ab8 	.word	0x20000ab8
 8006f40:	20000ae0 	.word	0x20000ae0
 8006f44:	20000ae4 	.word	0x20000ae4
 8006f48:	6860      	ldr	r0, [r4, #4]
 8006f4a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006f4e:	f020 0003 	bic.w	r0, r0, #3
 8006f52:	eba0 0a07 	sub.w	sl, r0, r7
 8006f56:	f1ba 0f0f 	cmp.w	sl, #15
 8006f5a:	dd12      	ble.n	8006f82 <_malloc_r+0x346>
 8006f5c:	68a3      	ldr	r3, [r4, #8]
 8006f5e:	19e2      	adds	r2, r4, r7
 8006f60:	f047 0701 	orr.w	r7, r7, #1
 8006f64:	6067      	str	r7, [r4, #4]
 8006f66:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006f6a:	f8cc 3008 	str.w	r3, [ip, #8]
 8006f6e:	f04a 0301 	orr.w	r3, sl, #1
 8006f72:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006f76:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006f7a:	6053      	str	r3, [r2, #4]
 8006f7c:	f844 a000 	str.w	sl, [r4, r0]
 8006f80:	e68d      	b.n	8006c9e <_malloc_r+0x62>
 8006f82:	f1ba 0f00 	cmp.w	sl, #0
 8006f86:	db11      	blt.n	8006fac <_malloc_r+0x370>
 8006f88:	4420      	add	r0, r4
 8006f8a:	6843      	ldr	r3, [r0, #4]
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	6043      	str	r3, [r0, #4]
 8006f92:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8006f96:	4628      	mov	r0, r5
 8006f98:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006f9c:	f8cc 3008 	str.w	r3, [ip, #8]
 8006fa0:	f000 f8b6 	bl	8007110 <__malloc_unlock>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	b003      	add	sp, #12
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4664      	mov	r4, ip
 8006fae:	e70e      	b.n	8006dce <_malloc_r+0x192>
 8006fb0:	f858 0908 	ldr.w	r0, [r8], #-8
 8006fb4:	4540      	cmp	r0, r8
 8006fb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fba:	f43f af12 	beq.w	8006de2 <_malloc_r+0x1a6>
 8006fbe:	e717      	b.n	8006df0 <_malloc_r+0x1b4>
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	0052      	lsls	r2, r2, #1
 8006fc4:	4210      	tst	r0, r2
 8006fc6:	d0fb      	beq.n	8006fc0 <_malloc_r+0x384>
 8006fc8:	e6fb      	b.n	8006dc2 <_malloc_r+0x186>
 8006fca:	4673      	mov	r3, lr
 8006fcc:	e7fa      	b.n	8006fc4 <_malloc_r+0x388>
 8006fce:	6810      	ldr	r0, [r2, #0]
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	bf1b      	ittet	ne
 8006fd4:	eba4 0b0b 	subne.w	fp, r4, fp
 8006fd8:	eb0b 020e 	addne.w	r2, fp, lr
 8006fdc:	6014      	streq	r4, [r2, #0]
 8006fde:	601a      	strne	r2, [r3, #0]
 8006fe0:	f014 0b07 	ands.w	fp, r4, #7
 8006fe4:	bf1a      	itte	ne
 8006fe6:	f1cb 0008 	rsbne	r0, fp, #8
 8006fea:	1824      	addne	r4, r4, r0
 8006fec:	4658      	moveq	r0, fp
 8006fee:	1862      	adds	r2, r4, r1
 8006ff0:	ea02 010c 	and.w	r1, r2, ip
 8006ff4:	4480      	add	r8, r0
 8006ff6:	eba8 0801 	sub.w	r8, r8, r1
 8006ffa:	ea08 080c 	and.w	r8, r8, ip
 8006ffe:	4641      	mov	r1, r8
 8007000:	4628      	mov	r0, r5
 8007002:	9201      	str	r2, [sp, #4]
 8007004:	f000 fd9c 	bl	8007b40 <_sbrk_r>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	9a01      	ldr	r2, [sp, #4]
 800700c:	4b28      	ldr	r3, [pc, #160]	; (80070b0 <_malloc_r+0x474>)
 800700e:	d107      	bne.n	8007020 <_malloc_r+0x3e4>
 8007010:	f1bb 0f00 	cmp.w	fp, #0
 8007014:	d023      	beq.n	800705e <_malloc_r+0x422>
 8007016:	f1ab 0008 	sub.w	r0, fp, #8
 800701a:	4410      	add	r0, r2
 800701c:	f04f 0800 	mov.w	r8, #0
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	60b4      	str	r4, [r6, #8]
 8007024:	1b00      	subs	r0, r0, r4
 8007026:	4440      	add	r0, r8
 8007028:	4442      	add	r2, r8
 800702a:	f040 0001 	orr.w	r0, r0, #1
 800702e:	45b2      	cmp	sl, r6
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	6060      	str	r0, [r4, #4]
 8007034:	f43f af28 	beq.w	8006e88 <_malloc_r+0x24c>
 8007038:	f1b9 0f0f 	cmp.w	r9, #15
 800703c:	d812      	bhi.n	8007064 <_malloc_r+0x428>
 800703e:	2301      	movs	r3, #1
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	68b3      	ldr	r3, [r6, #8]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	42bb      	cmp	r3, r7
 800704c:	eba3 0207 	sub.w	r2, r3, r7
 8007050:	d301      	bcc.n	8007056 <_malloc_r+0x41a>
 8007052:	2a0f      	cmp	r2, #15
 8007054:	dc22      	bgt.n	800709c <_malloc_r+0x460>
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f85a 	bl	8007110 <__malloc_unlock>
 800705c:	e5fa      	b.n	8006c54 <_malloc_r+0x18>
 800705e:	4610      	mov	r0, r2
 8007060:	46d8      	mov	r8, fp
 8007062:	e7dd      	b.n	8007020 <_malloc_r+0x3e4>
 8007064:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007068:	f1a9 090c 	sub.w	r9, r9, #12
 800706c:	f029 0907 	bic.w	r9, r9, #7
 8007070:	f002 0201 	and.w	r2, r2, #1
 8007074:	ea42 0209 	orr.w	r2, r2, r9
 8007078:	f8ca 2004 	str.w	r2, [sl, #4]
 800707c:	2105      	movs	r1, #5
 800707e:	eb0a 0209 	add.w	r2, sl, r9
 8007082:	f1b9 0f0f 	cmp.w	r9, #15
 8007086:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800708a:	f67f aefd 	bls.w	8006e88 <_malloc_r+0x24c>
 800708e:	f10a 0108 	add.w	r1, sl, #8
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fb2c 	bl	80066f0 <_free_r>
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <_malloc_r+0x474>)
 800709a:	e6f5      	b.n	8006e88 <_malloc_r+0x24c>
 800709c:	68b4      	ldr	r4, [r6, #8]
 800709e:	f047 0301 	orr.w	r3, r7, #1
 80070a2:	4427      	add	r7, r4
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	60b7      	str	r7, [r6, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	e5f6      	b.n	8006c9e <_malloc_r+0x62>
 80070b0:	20000ab8 	.word	0x20000ab8

080070b4 <memcpy>:
 80070b4:	440a      	add	r2, r1
 80070b6:	4291      	cmp	r1, r2
 80070b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	4770      	bx	lr
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ca:	4291      	cmp	r1, r2
 80070cc:	d1f9      	bne.n	80070c2 <memcpy+0xe>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <memmove>:
 80070d0:	4288      	cmp	r0, r1
 80070d2:	b510      	push	{r4, lr}
 80070d4:	eb01 0402 	add.w	r4, r1, r2
 80070d8:	d902      	bls.n	80070e0 <memmove+0x10>
 80070da:	4284      	cmp	r4, r0
 80070dc:	4623      	mov	r3, r4
 80070de:	d807      	bhi.n	80070f0 <memmove+0x20>
 80070e0:	1e43      	subs	r3, r0, #1
 80070e2:	42a1      	cmp	r1, r4
 80070e4:	d008      	beq.n	80070f8 <memmove+0x28>
 80070e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ee:	e7f8      	b.n	80070e2 <memmove+0x12>
 80070f0:	4402      	add	r2, r0
 80070f2:	4601      	mov	r1, r0
 80070f4:	428a      	cmp	r2, r1
 80070f6:	d100      	bne.n	80070fa <memmove+0x2a>
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007102:	e7f7      	b.n	80070f4 <memmove+0x24>

08007104 <__malloc_lock>:
 8007104:	4801      	ldr	r0, [pc, #4]	; (800710c <__malloc_lock+0x8>)
 8007106:	f7ff bd23 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 800710a:	bf00      	nop
 800710c:	20000ab5 	.word	0x20000ab5

08007110 <__malloc_unlock>:
 8007110:	4801      	ldr	r0, [pc, #4]	; (8007118 <__malloc_unlock+0x8>)
 8007112:	f7ff bd1e 	b.w	8006b52 <__retarget_lock_release_recursive>
 8007116:	bf00      	nop
 8007118:	20000ab5 	.word	0x20000ab5

0800711c <_Balloc>:
 800711c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800711e:	b570      	push	{r4, r5, r6, lr}
 8007120:	4605      	mov	r5, r0
 8007122:	460c      	mov	r4, r1
 8007124:	b17b      	cbz	r3, 8007146 <_Balloc+0x2a>
 8007126:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007128:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800712c:	b9a0      	cbnz	r0, 8007158 <_Balloc+0x3c>
 800712e:	2101      	movs	r1, #1
 8007130:	fa01 f604 	lsl.w	r6, r1, r4
 8007134:	1d72      	adds	r2, r6, #5
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	4628      	mov	r0, r5
 800713a:	f001 faef 	bl	800871c <_calloc_r>
 800713e:	b148      	cbz	r0, 8007154 <_Balloc+0x38>
 8007140:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007144:	e00b      	b.n	800715e <_Balloc+0x42>
 8007146:	2221      	movs	r2, #33	; 0x21
 8007148:	2104      	movs	r1, #4
 800714a:	f001 fae7 	bl	800871c <_calloc_r>
 800714e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007150:	2800      	cmp	r0, #0
 8007152:	d1e8      	bne.n	8007126 <_Balloc+0xa>
 8007154:	2000      	movs	r0, #0
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	6802      	ldr	r2, [r0, #0]
 800715a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800715e:	2300      	movs	r3, #0
 8007160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007164:	e7f7      	b.n	8007156 <_Balloc+0x3a>

08007166 <_Bfree>:
 8007166:	b131      	cbz	r1, 8007176 <_Bfree+0x10>
 8007168:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800716a:	684a      	ldr	r2, [r1, #4]
 800716c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007170:	6008      	str	r0, [r1, #0]
 8007172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007176:	4770      	bx	lr

08007178 <__multadd>:
 8007178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717c:	690d      	ldr	r5, [r1, #16]
 800717e:	4607      	mov	r7, r0
 8007180:	460c      	mov	r4, r1
 8007182:	461e      	mov	r6, r3
 8007184:	f101 0c14 	add.w	ip, r1, #20
 8007188:	2000      	movs	r0, #0
 800718a:	f8dc 3000 	ldr.w	r3, [ip]
 800718e:	b299      	uxth	r1, r3
 8007190:	fb02 6101 	mla	r1, r2, r1, r6
 8007194:	0c1e      	lsrs	r6, r3, #16
 8007196:	0c0b      	lsrs	r3, r1, #16
 8007198:	fb02 3306 	mla	r3, r2, r6, r3
 800719c:	b289      	uxth	r1, r1
 800719e:	3001      	adds	r0, #1
 80071a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071a4:	4285      	cmp	r5, r0
 80071a6:	f84c 1b04 	str.w	r1, [ip], #4
 80071aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071ae:	dcec      	bgt.n	800718a <__multadd+0x12>
 80071b0:	b30e      	cbz	r6, 80071f6 <__multadd+0x7e>
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dc19      	bgt.n	80071ec <__multadd+0x74>
 80071b8:	6861      	ldr	r1, [r4, #4]
 80071ba:	4638      	mov	r0, r7
 80071bc:	3101      	adds	r1, #1
 80071be:	f7ff ffad 	bl	800711c <_Balloc>
 80071c2:	4680      	mov	r8, r0
 80071c4:	b928      	cbnz	r0, 80071d2 <__multadd+0x5a>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <__multadd+0x84>)
 80071ca:	480d      	ldr	r0, [pc, #52]	; (8007200 <__multadd+0x88>)
 80071cc:	21b5      	movs	r1, #181	; 0xb5
 80071ce:	f001 fa87 	bl	80086e0 <__assert_func>
 80071d2:	6922      	ldr	r2, [r4, #16]
 80071d4:	3202      	adds	r2, #2
 80071d6:	f104 010c 	add.w	r1, r4, #12
 80071da:	0092      	lsls	r2, r2, #2
 80071dc:	300c      	adds	r0, #12
 80071de:	f7ff ff69 	bl	80070b4 <memcpy>
 80071e2:	4621      	mov	r1, r4
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff ffbe 	bl	8007166 <_Bfree>
 80071ea:	4644      	mov	r4, r8
 80071ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071f0:	3501      	adds	r5, #1
 80071f2:	615e      	str	r6, [r3, #20]
 80071f4:	6125      	str	r5, [r4, #16]
 80071f6:	4620      	mov	r0, r4
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fc:	08008c55 	.word	0x08008c55
 8007200:	08008cc1 	.word	0x08008cc1

08007204 <__hi0bits>:
 8007204:	0c03      	lsrs	r3, r0, #16
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	b9d3      	cbnz	r3, 8007240 <__hi0bits+0x3c>
 800720a:	0400      	lsls	r0, r0, #16
 800720c:	2310      	movs	r3, #16
 800720e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007212:	bf04      	itt	eq
 8007214:	0200      	lsleq	r0, r0, #8
 8007216:	3308      	addeq	r3, #8
 8007218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800721c:	bf04      	itt	eq
 800721e:	0100      	lsleq	r0, r0, #4
 8007220:	3304      	addeq	r3, #4
 8007222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007226:	bf04      	itt	eq
 8007228:	0080      	lsleq	r0, r0, #2
 800722a:	3302      	addeq	r3, #2
 800722c:	2800      	cmp	r0, #0
 800722e:	db05      	blt.n	800723c <__hi0bits+0x38>
 8007230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007234:	f103 0301 	add.w	r3, r3, #1
 8007238:	bf08      	it	eq
 800723a:	2320      	moveq	r3, #32
 800723c:	4618      	mov	r0, r3
 800723e:	4770      	bx	lr
 8007240:	2300      	movs	r3, #0
 8007242:	e7e4      	b.n	800720e <__hi0bits+0xa>

08007244 <__lo0bits>:
 8007244:	6803      	ldr	r3, [r0, #0]
 8007246:	f013 0207 	ands.w	r2, r3, #7
 800724a:	4601      	mov	r1, r0
 800724c:	d00b      	beq.n	8007266 <__lo0bits+0x22>
 800724e:	07da      	lsls	r2, r3, #31
 8007250:	d423      	bmi.n	800729a <__lo0bits+0x56>
 8007252:	0798      	lsls	r0, r3, #30
 8007254:	bf49      	itett	mi
 8007256:	085b      	lsrmi	r3, r3, #1
 8007258:	089b      	lsrpl	r3, r3, #2
 800725a:	2001      	movmi	r0, #1
 800725c:	600b      	strmi	r3, [r1, #0]
 800725e:	bf5c      	itt	pl
 8007260:	600b      	strpl	r3, [r1, #0]
 8007262:	2002      	movpl	r0, #2
 8007264:	4770      	bx	lr
 8007266:	b298      	uxth	r0, r3
 8007268:	b9a8      	cbnz	r0, 8007296 <__lo0bits+0x52>
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	2010      	movs	r0, #16
 800726e:	b2da      	uxtb	r2, r3
 8007270:	b90a      	cbnz	r2, 8007276 <__lo0bits+0x32>
 8007272:	3008      	adds	r0, #8
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	071a      	lsls	r2, r3, #28
 8007278:	bf04      	itt	eq
 800727a:	091b      	lsreq	r3, r3, #4
 800727c:	3004      	addeq	r0, #4
 800727e:	079a      	lsls	r2, r3, #30
 8007280:	bf04      	itt	eq
 8007282:	089b      	lsreq	r3, r3, #2
 8007284:	3002      	addeq	r0, #2
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d403      	bmi.n	8007292 <__lo0bits+0x4e>
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	f100 0001 	add.w	r0, r0, #1
 8007290:	d005      	beq.n	800729e <__lo0bits+0x5a>
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	4770      	bx	lr
 8007296:	4610      	mov	r0, r2
 8007298:	e7e9      	b.n	800726e <__lo0bits+0x2a>
 800729a:	2000      	movs	r0, #0
 800729c:	4770      	bx	lr
 800729e:	2020      	movs	r0, #32
 80072a0:	4770      	bx	lr
	...

080072a4 <__i2b>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	460c      	mov	r4, r1
 80072a8:	2101      	movs	r1, #1
 80072aa:	f7ff ff37 	bl	800711c <_Balloc>
 80072ae:	4602      	mov	r2, r0
 80072b0:	b928      	cbnz	r0, 80072be <__i2b+0x1a>
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <__i2b+0x24>)
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <__i2b+0x28>)
 80072b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072ba:	f001 fa11 	bl	80086e0 <__assert_func>
 80072be:	2301      	movs	r3, #1
 80072c0:	6144      	str	r4, [r0, #20]
 80072c2:	6103      	str	r3, [r0, #16]
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	bf00      	nop
 80072c8:	08008c55 	.word	0x08008c55
 80072cc:	08008cc1 	.word	0x08008cc1

080072d0 <__multiply>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	4691      	mov	r9, r2
 80072d6:	690a      	ldr	r2, [r1, #16]
 80072d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bfb8      	it	lt
 80072e0:	460b      	movlt	r3, r1
 80072e2:	460c      	mov	r4, r1
 80072e4:	bfbc      	itt	lt
 80072e6:	464c      	movlt	r4, r9
 80072e8:	4699      	movlt	r9, r3
 80072ea:	6927      	ldr	r7, [r4, #16]
 80072ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	6861      	ldr	r1, [r4, #4]
 80072f4:	eb07 060a 	add.w	r6, r7, sl
 80072f8:	42b3      	cmp	r3, r6
 80072fa:	b085      	sub	sp, #20
 80072fc:	bfb8      	it	lt
 80072fe:	3101      	addlt	r1, #1
 8007300:	f7ff ff0c 	bl	800711c <_Balloc>
 8007304:	b930      	cbnz	r0, 8007314 <__multiply+0x44>
 8007306:	4602      	mov	r2, r0
 8007308:	4b44      	ldr	r3, [pc, #272]	; (800741c <__multiply+0x14c>)
 800730a:	4845      	ldr	r0, [pc, #276]	; (8007420 <__multiply+0x150>)
 800730c:	f240 115d 	movw	r1, #349	; 0x15d
 8007310:	f001 f9e6 	bl	80086e0 <__assert_func>
 8007314:	f100 0514 	add.w	r5, r0, #20
 8007318:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800731c:	462b      	mov	r3, r5
 800731e:	2200      	movs	r2, #0
 8007320:	4543      	cmp	r3, r8
 8007322:	d321      	bcc.n	8007368 <__multiply+0x98>
 8007324:	f104 0314 	add.w	r3, r4, #20
 8007328:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800732c:	f109 0314 	add.w	r3, r9, #20
 8007330:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007334:	9202      	str	r2, [sp, #8]
 8007336:	1b3a      	subs	r2, r7, r4
 8007338:	3a15      	subs	r2, #21
 800733a:	f022 0203 	bic.w	r2, r2, #3
 800733e:	3204      	adds	r2, #4
 8007340:	f104 0115 	add.w	r1, r4, #21
 8007344:	428f      	cmp	r7, r1
 8007346:	bf38      	it	cc
 8007348:	2204      	movcc	r2, #4
 800734a:	9201      	str	r2, [sp, #4]
 800734c:	9a02      	ldr	r2, [sp, #8]
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d80c      	bhi.n	800736e <__multiply+0x9e>
 8007354:	2e00      	cmp	r6, #0
 8007356:	dd03      	ble.n	8007360 <__multiply+0x90>
 8007358:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800735c:	2b00      	cmp	r3, #0
 800735e:	d05a      	beq.n	8007416 <__multiply+0x146>
 8007360:	6106      	str	r6, [r0, #16]
 8007362:	b005      	add	sp, #20
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	f843 2b04 	str.w	r2, [r3], #4
 800736c:	e7d8      	b.n	8007320 <__multiply+0x50>
 800736e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007372:	f1ba 0f00 	cmp.w	sl, #0
 8007376:	d024      	beq.n	80073c2 <__multiply+0xf2>
 8007378:	f104 0e14 	add.w	lr, r4, #20
 800737c:	46a9      	mov	r9, r5
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007386:	f8d9 1000 	ldr.w	r1, [r9]
 800738a:	fa1f fb82 	uxth.w	fp, r2
 800738e:	b289      	uxth	r1, r1
 8007390:	fb0a 110b 	mla	r1, sl, fp, r1
 8007394:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007398:	f8d9 2000 	ldr.w	r2, [r9]
 800739c:	4461      	add	r1, ip
 800739e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80073a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073aa:	b289      	uxth	r1, r1
 80073ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073b0:	4577      	cmp	r7, lr
 80073b2:	f849 1b04 	str.w	r1, [r9], #4
 80073b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ba:	d8e2      	bhi.n	8007382 <__multiply+0xb2>
 80073bc:	9a01      	ldr	r2, [sp, #4]
 80073be:	f845 c002 	str.w	ip, [r5, r2]
 80073c2:	9a03      	ldr	r2, [sp, #12]
 80073c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073c8:	3304      	adds	r3, #4
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	d020      	beq.n	8007412 <__multiply+0x142>
 80073d0:	6829      	ldr	r1, [r5, #0]
 80073d2:	f104 0c14 	add.w	ip, r4, #20
 80073d6:	46ae      	mov	lr, r5
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	f8bc b000 	ldrh.w	fp, [ip]
 80073e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073e4:	fb09 220b 	mla	r2, r9, fp, r2
 80073e8:	4492      	add	sl, r2
 80073ea:	b289      	uxth	r1, r1
 80073ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073f0:	f84e 1b04 	str.w	r1, [lr], #4
 80073f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073f8:	f8be 1000 	ldrh.w	r1, [lr]
 80073fc:	0c12      	lsrs	r2, r2, #16
 80073fe:	fb09 1102 	mla	r1, r9, r2, r1
 8007402:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007406:	4567      	cmp	r7, ip
 8007408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800740c:	d8e6      	bhi.n	80073dc <__multiply+0x10c>
 800740e:	9a01      	ldr	r2, [sp, #4]
 8007410:	50a9      	str	r1, [r5, r2]
 8007412:	3504      	adds	r5, #4
 8007414:	e79a      	b.n	800734c <__multiply+0x7c>
 8007416:	3e01      	subs	r6, #1
 8007418:	e79c      	b.n	8007354 <__multiply+0x84>
 800741a:	bf00      	nop
 800741c:	08008c55 	.word	0x08008c55
 8007420:	08008cc1 	.word	0x08008cc1

08007424 <__pow5mult>:
 8007424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007428:	4615      	mov	r5, r2
 800742a:	f012 0203 	ands.w	r2, r2, #3
 800742e:	4606      	mov	r6, r0
 8007430:	460f      	mov	r7, r1
 8007432:	d007      	beq.n	8007444 <__pow5mult+0x20>
 8007434:	4c1a      	ldr	r4, [pc, #104]	; (80074a0 <__pow5mult+0x7c>)
 8007436:	3a01      	subs	r2, #1
 8007438:	2300      	movs	r3, #0
 800743a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800743e:	f7ff fe9b 	bl	8007178 <__multadd>
 8007442:	4607      	mov	r7, r0
 8007444:	10ad      	asrs	r5, r5, #2
 8007446:	d027      	beq.n	8007498 <__pow5mult+0x74>
 8007448:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800744a:	b944      	cbnz	r4, 800745e <__pow5mult+0x3a>
 800744c:	f240 2171 	movw	r1, #625	; 0x271
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff ff27 	bl	80072a4 <__i2b>
 8007456:	2300      	movs	r3, #0
 8007458:	64b0      	str	r0, [r6, #72]	; 0x48
 800745a:	4604      	mov	r4, r0
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	f04f 0900 	mov.w	r9, #0
 8007462:	07eb      	lsls	r3, r5, #31
 8007464:	d50a      	bpl.n	800747c <__pow5mult+0x58>
 8007466:	4639      	mov	r1, r7
 8007468:	4622      	mov	r2, r4
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ff30 	bl	80072d0 <__multiply>
 8007470:	4639      	mov	r1, r7
 8007472:	4680      	mov	r8, r0
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fe76 	bl	8007166 <_Bfree>
 800747a:	4647      	mov	r7, r8
 800747c:	106d      	asrs	r5, r5, #1
 800747e:	d00b      	beq.n	8007498 <__pow5mult+0x74>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	b938      	cbnz	r0, 8007494 <__pow5mult+0x70>
 8007484:	4622      	mov	r2, r4
 8007486:	4621      	mov	r1, r4
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff ff21 	bl	80072d0 <__multiply>
 800748e:	6020      	str	r0, [r4, #0]
 8007490:	f8c0 9000 	str.w	r9, [r0]
 8007494:	4604      	mov	r4, r0
 8007496:	e7e4      	b.n	8007462 <__pow5mult+0x3e>
 8007498:	4638      	mov	r0, r7
 800749a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749e:	bf00      	nop
 80074a0:	08008e10 	.word	0x08008e10

080074a4 <__lshift>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	6849      	ldr	r1, [r1, #4]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	4607      	mov	r7, r0
 80074b6:	4691      	mov	r9, r2
 80074b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074bc:	f108 0601 	add.w	r6, r8, #1
 80074c0:	42b3      	cmp	r3, r6
 80074c2:	db0b      	blt.n	80074dc <__lshift+0x38>
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fe29 	bl	800711c <_Balloc>
 80074ca:	4605      	mov	r5, r0
 80074cc:	b948      	cbnz	r0, 80074e2 <__lshift+0x3e>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b2a      	ldr	r3, [pc, #168]	; (800757c <__lshift+0xd8>)
 80074d2:	482b      	ldr	r0, [pc, #172]	; (8007580 <__lshift+0xdc>)
 80074d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074d8:	f001 f902 	bl	80086e0 <__assert_func>
 80074dc:	3101      	adds	r1, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	e7ee      	b.n	80074c0 <__lshift+0x1c>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f100 0114 	add.w	r1, r0, #20
 80074e8:	f100 0210 	add.w	r2, r0, #16
 80074ec:	4618      	mov	r0, r3
 80074ee:	4553      	cmp	r3, sl
 80074f0:	db37      	blt.n	8007562 <__lshift+0xbe>
 80074f2:	6920      	ldr	r0, [r4, #16]
 80074f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074f8:	f104 0314 	add.w	r3, r4, #20
 80074fc:	f019 091f 	ands.w	r9, r9, #31
 8007500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007508:	d02f      	beq.n	800756a <__lshift+0xc6>
 800750a:	f1c9 0e20 	rsb	lr, r9, #32
 800750e:	468a      	mov	sl, r1
 8007510:	f04f 0c00 	mov.w	ip, #0
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	fa02 f209 	lsl.w	r2, r2, r9
 800751a:	ea42 020c 	orr.w	r2, r2, ip
 800751e:	f84a 2b04 	str.w	r2, [sl], #4
 8007522:	f853 2b04 	ldr.w	r2, [r3], #4
 8007526:	4298      	cmp	r0, r3
 8007528:	fa22 fc0e 	lsr.w	ip, r2, lr
 800752c:	d8f2      	bhi.n	8007514 <__lshift+0x70>
 800752e:	1b03      	subs	r3, r0, r4
 8007530:	3b15      	subs	r3, #21
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	3304      	adds	r3, #4
 8007538:	f104 0215 	add.w	r2, r4, #21
 800753c:	4290      	cmp	r0, r2
 800753e:	bf38      	it	cc
 8007540:	2304      	movcc	r3, #4
 8007542:	f841 c003 	str.w	ip, [r1, r3]
 8007546:	f1bc 0f00 	cmp.w	ip, #0
 800754a:	d001      	beq.n	8007550 <__lshift+0xac>
 800754c:	f108 0602 	add.w	r6, r8, #2
 8007550:	3e01      	subs	r6, #1
 8007552:	4638      	mov	r0, r7
 8007554:	612e      	str	r6, [r5, #16]
 8007556:	4621      	mov	r1, r4
 8007558:	f7ff fe05 	bl	8007166 <_Bfree>
 800755c:	4628      	mov	r0, r5
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	f842 0f04 	str.w	r0, [r2, #4]!
 8007566:	3301      	adds	r3, #1
 8007568:	e7c1      	b.n	80074ee <__lshift+0x4a>
 800756a:	3904      	subs	r1, #4
 800756c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007570:	f841 2f04 	str.w	r2, [r1, #4]!
 8007574:	4298      	cmp	r0, r3
 8007576:	d8f9      	bhi.n	800756c <__lshift+0xc8>
 8007578:	e7ea      	b.n	8007550 <__lshift+0xac>
 800757a:	bf00      	nop
 800757c:	08008c55 	.word	0x08008c55
 8007580:	08008cc1 	.word	0x08008cc1

08007584 <__mcmp>:
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	6902      	ldr	r2, [r0, #16]
 8007588:	690c      	ldr	r4, [r1, #16]
 800758a:	1b12      	subs	r2, r2, r4
 800758c:	d10e      	bne.n	80075ac <__mcmp+0x28>
 800758e:	f100 0314 	add.w	r3, r0, #20
 8007592:	3114      	adds	r1, #20
 8007594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800759c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d003      	beq.n	80075b0 <__mcmp+0x2c>
 80075a8:	d305      	bcc.n	80075b6 <__mcmp+0x32>
 80075aa:	2201      	movs	r2, #1
 80075ac:	4610      	mov	r0, r2
 80075ae:	bd30      	pop	{r4, r5, pc}
 80075b0:	4283      	cmp	r3, r0
 80075b2:	d3f3      	bcc.n	800759c <__mcmp+0x18>
 80075b4:	e7fa      	b.n	80075ac <__mcmp+0x28>
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	e7f7      	b.n	80075ac <__mcmp+0x28>

080075bc <__mdiff>:
 80075bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	4606      	mov	r6, r0
 80075c4:	4611      	mov	r1, r2
 80075c6:	4620      	mov	r0, r4
 80075c8:	4690      	mov	r8, r2
 80075ca:	f7ff ffdb 	bl	8007584 <__mcmp>
 80075ce:	1e05      	subs	r5, r0, #0
 80075d0:	d110      	bne.n	80075f4 <__mdiff+0x38>
 80075d2:	4629      	mov	r1, r5
 80075d4:	4630      	mov	r0, r6
 80075d6:	f7ff fda1 	bl	800711c <_Balloc>
 80075da:	b930      	cbnz	r0, 80075ea <__mdiff+0x2e>
 80075dc:	4b3a      	ldr	r3, [pc, #232]	; (80076c8 <__mdiff+0x10c>)
 80075de:	4602      	mov	r2, r0
 80075e0:	f240 2132 	movw	r1, #562	; 0x232
 80075e4:	4839      	ldr	r0, [pc, #228]	; (80076cc <__mdiff+0x110>)
 80075e6:	f001 f87b 	bl	80086e0 <__assert_func>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	bfa4      	itt	ge
 80075f6:	4643      	movge	r3, r8
 80075f8:	46a0      	movge	r8, r4
 80075fa:	4630      	mov	r0, r6
 80075fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007600:	bfa6      	itte	ge
 8007602:	461c      	movge	r4, r3
 8007604:	2500      	movge	r5, #0
 8007606:	2501      	movlt	r5, #1
 8007608:	f7ff fd88 	bl	800711c <_Balloc>
 800760c:	b920      	cbnz	r0, 8007618 <__mdiff+0x5c>
 800760e:	4b2e      	ldr	r3, [pc, #184]	; (80076c8 <__mdiff+0x10c>)
 8007610:	4602      	mov	r2, r0
 8007612:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007616:	e7e5      	b.n	80075e4 <__mdiff+0x28>
 8007618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800761c:	6926      	ldr	r6, [r4, #16]
 800761e:	60c5      	str	r5, [r0, #12]
 8007620:	f104 0914 	add.w	r9, r4, #20
 8007624:	f108 0514 	add.w	r5, r8, #20
 8007628:	f100 0e14 	add.w	lr, r0, #20
 800762c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007634:	f108 0210 	add.w	r2, r8, #16
 8007638:	46f2      	mov	sl, lr
 800763a:	2100      	movs	r1, #0
 800763c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007644:	fa1f f883 	uxth.w	r8, r3
 8007648:	fa11 f18b 	uxtah	r1, r1, fp
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	eba1 0808 	sub.w	r8, r1, r8
 8007652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800765a:	fa1f f888 	uxth.w	r8, r8
 800765e:	1419      	asrs	r1, r3, #16
 8007660:	454e      	cmp	r6, r9
 8007662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007666:	f84a 3b04 	str.w	r3, [sl], #4
 800766a:	d8e7      	bhi.n	800763c <__mdiff+0x80>
 800766c:	1b33      	subs	r3, r6, r4
 800766e:	3b15      	subs	r3, #21
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	3304      	adds	r3, #4
 8007676:	3415      	adds	r4, #21
 8007678:	42a6      	cmp	r6, r4
 800767a:	bf38      	it	cc
 800767c:	2304      	movcc	r3, #4
 800767e:	441d      	add	r5, r3
 8007680:	4473      	add	r3, lr
 8007682:	469e      	mov	lr, r3
 8007684:	462e      	mov	r6, r5
 8007686:	4566      	cmp	r6, ip
 8007688:	d30e      	bcc.n	80076a8 <__mdiff+0xec>
 800768a:	f10c 0203 	add.w	r2, ip, #3
 800768e:	1b52      	subs	r2, r2, r5
 8007690:	f022 0203 	bic.w	r2, r2, #3
 8007694:	3d03      	subs	r5, #3
 8007696:	45ac      	cmp	ip, r5
 8007698:	bf38      	it	cc
 800769a:	2200      	movcc	r2, #0
 800769c:	441a      	add	r2, r3
 800769e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076a2:	b17b      	cbz	r3, 80076c4 <__mdiff+0x108>
 80076a4:	6107      	str	r7, [r0, #16]
 80076a6:	e7a3      	b.n	80075f0 <__mdiff+0x34>
 80076a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80076ac:	fa11 f288 	uxtah	r2, r1, r8
 80076b0:	1414      	asrs	r4, r2, #16
 80076b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076b6:	b292      	uxth	r2, r2
 80076b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076bc:	f84e 2b04 	str.w	r2, [lr], #4
 80076c0:	1421      	asrs	r1, r4, #16
 80076c2:	e7e0      	b.n	8007686 <__mdiff+0xca>
 80076c4:	3f01      	subs	r7, #1
 80076c6:	e7ea      	b.n	800769e <__mdiff+0xe2>
 80076c8:	08008c55 	.word	0x08008c55
 80076cc:	08008cc1 	.word	0x08008cc1

080076d0 <__d2b>:
 80076d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	4689      	mov	r9, r1
 80076d6:	2101      	movs	r1, #1
 80076d8:	ec57 6b10 	vmov	r6, r7, d0
 80076dc:	4690      	mov	r8, r2
 80076de:	f7ff fd1d 	bl	800711c <_Balloc>
 80076e2:	4604      	mov	r4, r0
 80076e4:	b930      	cbnz	r0, 80076f4 <__d2b+0x24>
 80076e6:	4602      	mov	r2, r0
 80076e8:	4b25      	ldr	r3, [pc, #148]	; (8007780 <__d2b+0xb0>)
 80076ea:	4826      	ldr	r0, [pc, #152]	; (8007784 <__d2b+0xb4>)
 80076ec:	f240 310a 	movw	r1, #778	; 0x30a
 80076f0:	f000 fff6 	bl	80086e0 <__assert_func>
 80076f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076fc:	bb35      	cbnz	r5, 800774c <__d2b+0x7c>
 80076fe:	2e00      	cmp	r6, #0
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	d028      	beq.n	8007756 <__d2b+0x86>
 8007704:	4668      	mov	r0, sp
 8007706:	9600      	str	r6, [sp, #0]
 8007708:	f7ff fd9c 	bl	8007244 <__lo0bits>
 800770c:	9900      	ldr	r1, [sp, #0]
 800770e:	b300      	cbz	r0, 8007752 <__d2b+0x82>
 8007710:	9a01      	ldr	r2, [sp, #4]
 8007712:	f1c0 0320 	rsb	r3, r0, #32
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	430b      	orrs	r3, r1
 800771c:	40c2      	lsrs	r2, r0
 800771e:	6163      	str	r3, [r4, #20]
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	61a3      	str	r3, [r4, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bf14      	ite	ne
 800772a:	2202      	movne	r2, #2
 800772c:	2201      	moveq	r2, #1
 800772e:	6122      	str	r2, [r4, #16]
 8007730:	b1d5      	cbz	r5, 8007768 <__d2b+0x98>
 8007732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007736:	4405      	add	r5, r0
 8007738:	f8c9 5000 	str.w	r5, [r9]
 800773c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007740:	f8c8 0000 	str.w	r0, [r8]
 8007744:	4620      	mov	r0, r4
 8007746:	b003      	add	sp, #12
 8007748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800774c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007750:	e7d5      	b.n	80076fe <__d2b+0x2e>
 8007752:	6161      	str	r1, [r4, #20]
 8007754:	e7e5      	b.n	8007722 <__d2b+0x52>
 8007756:	a801      	add	r0, sp, #4
 8007758:	f7ff fd74 	bl	8007244 <__lo0bits>
 800775c:	9b01      	ldr	r3, [sp, #4]
 800775e:	6163      	str	r3, [r4, #20]
 8007760:	2201      	movs	r2, #1
 8007762:	6122      	str	r2, [r4, #16]
 8007764:	3020      	adds	r0, #32
 8007766:	e7e3      	b.n	8007730 <__d2b+0x60>
 8007768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800776c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007770:	f8c9 0000 	str.w	r0, [r9]
 8007774:	6918      	ldr	r0, [r3, #16]
 8007776:	f7ff fd45 	bl	8007204 <__hi0bits>
 800777a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800777e:	e7df      	b.n	8007740 <__d2b+0x70>
 8007780:	08008c55 	.word	0x08008c55
 8007784:	08008cc1 	.word	0x08008cc1

08007788 <_realloc_r>:
 8007788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4681      	mov	r9, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b929      	cbnz	r1, 800779e <_realloc_r+0x16>
 8007792:	4611      	mov	r1, r2
 8007794:	b003      	add	sp, #12
 8007796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f7ff ba4f 	b.w	8006c3c <_malloc_r>
 800779e:	9201      	str	r2, [sp, #4]
 80077a0:	f7ff fcb0 	bl	8007104 <__malloc_lock>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	f102 080b 	add.w	r8, r2, #11
 80077aa:	f1b8 0f16 	cmp.w	r8, #22
 80077ae:	d90b      	bls.n	80077c8 <_realloc_r+0x40>
 80077b0:	f038 0807 	bics.w	r8, r8, #7
 80077b4:	d50a      	bpl.n	80077cc <_realloc_r+0x44>
 80077b6:	230c      	movs	r3, #12
 80077b8:	f8c9 3000 	str.w	r3, [r9]
 80077bc:	f04f 0b00 	mov.w	fp, #0
 80077c0:	4658      	mov	r0, fp
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c8:	f04f 0810 	mov.w	r8, #16
 80077cc:	4590      	cmp	r8, r2
 80077ce:	d3f2      	bcc.n	80077b6 <_realloc_r+0x2e>
 80077d0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80077d4:	f025 0603 	bic.w	r6, r5, #3
 80077d8:	45b0      	cmp	r8, r6
 80077da:	f1a4 0a08 	sub.w	sl, r4, #8
 80077de:	f340 816e 	ble.w	8007abe <_realloc_r+0x336>
 80077e2:	499b      	ldr	r1, [pc, #620]	; (8007a50 <_realloc_r+0x2c8>)
 80077e4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80077e8:	eb0a 0306 	add.w	r3, sl, r6
 80077ec:	459c      	cmp	ip, r3
 80077ee:	6859      	ldr	r1, [r3, #4]
 80077f0:	d005      	beq.n	80077fe <_realloc_r+0x76>
 80077f2:	f021 0001 	bic.w	r0, r1, #1
 80077f6:	4418      	add	r0, r3
 80077f8:	6840      	ldr	r0, [r0, #4]
 80077fa:	07c7      	lsls	r7, r0, #31
 80077fc:	d427      	bmi.n	800784e <_realloc_r+0xc6>
 80077fe:	f021 0103 	bic.w	r1, r1, #3
 8007802:	459c      	cmp	ip, r3
 8007804:	eb06 0701 	add.w	r7, r6, r1
 8007808:	d119      	bne.n	800783e <_realloc_r+0xb6>
 800780a:	f108 0010 	add.w	r0, r8, #16
 800780e:	42b8      	cmp	r0, r7
 8007810:	dc1f      	bgt.n	8007852 <_realloc_r+0xca>
 8007812:	eb0a 0308 	add.w	r3, sl, r8
 8007816:	4a8e      	ldr	r2, [pc, #568]	; (8007a50 <_realloc_r+0x2c8>)
 8007818:	eba7 0708 	sub.w	r7, r7, r8
 800781c:	f047 0701 	orr.w	r7, r7, #1
 8007820:	6093      	str	r3, [r2, #8]
 8007822:	605f      	str	r7, [r3, #4]
 8007824:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	ea43 0308 	orr.w	r3, r3, r8
 8007830:	f844 3c04 	str.w	r3, [r4, #-4]
 8007834:	4648      	mov	r0, r9
 8007836:	f7ff fc6b 	bl	8007110 <__malloc_unlock>
 800783a:	46a3      	mov	fp, r4
 800783c:	e7c0      	b.n	80077c0 <_realloc_r+0x38>
 800783e:	45b8      	cmp	r8, r7
 8007840:	dc07      	bgt.n	8007852 <_realloc_r+0xca>
 8007842:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007846:	60da      	str	r2, [r3, #12]
 8007848:	6093      	str	r3, [r2, #8]
 800784a:	4655      	mov	r5, sl
 800784c:	e07f      	b.n	800794e <_realloc_r+0x1c6>
 800784e:	2100      	movs	r1, #0
 8007850:	460b      	mov	r3, r1
 8007852:	07e8      	lsls	r0, r5, #31
 8007854:	f100 80e5 	bmi.w	8007a22 <_realloc_r+0x29a>
 8007858:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800785c:	ebaa 0505 	sub.w	r5, sl, r5
 8007860:	6868      	ldr	r0, [r5, #4]
 8007862:	f020 0003 	bic.w	r0, r0, #3
 8007866:	eb00 0b06 	add.w	fp, r0, r6
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a5 	beq.w	80079ba <_realloc_r+0x232>
 8007870:	459c      	cmp	ip, r3
 8007872:	eb01 070b 	add.w	r7, r1, fp
 8007876:	d14a      	bne.n	800790e <_realloc_r+0x186>
 8007878:	f108 0310 	add.w	r3, r8, #16
 800787c:	42bb      	cmp	r3, r7
 800787e:	f300 809c 	bgt.w	80079ba <_realloc_r+0x232>
 8007882:	46ab      	mov	fp, r5
 8007884:	68eb      	ldr	r3, [r5, #12]
 8007886:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800788a:	60d3      	str	r3, [r2, #12]
 800788c:	609a      	str	r2, [r3, #8]
 800788e:	1f32      	subs	r2, r6, #4
 8007890:	2a24      	cmp	r2, #36	; 0x24
 8007892:	d837      	bhi.n	8007904 <_realloc_r+0x17c>
 8007894:	2a13      	cmp	r2, #19
 8007896:	d933      	bls.n	8007900 <_realloc_r+0x178>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	60ab      	str	r3, [r5, #8]
 800789c:	6863      	ldr	r3, [r4, #4]
 800789e:	60eb      	str	r3, [r5, #12]
 80078a0:	2a1b      	cmp	r2, #27
 80078a2:	d81b      	bhi.n	80078dc <_realloc_r+0x154>
 80078a4:	3408      	adds	r4, #8
 80078a6:	f105 0310 	add.w	r3, r5, #16
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	68a2      	ldr	r2, [r4, #8]
 80078b4:	609a      	str	r2, [r3, #8]
 80078b6:	eb05 0308 	add.w	r3, r5, r8
 80078ba:	4a65      	ldr	r2, [pc, #404]	; (8007a50 <_realloc_r+0x2c8>)
 80078bc:	eba7 0708 	sub.w	r7, r7, r8
 80078c0:	f047 0701 	orr.w	r7, r7, #1
 80078c4:	6093      	str	r3, [r2, #8]
 80078c6:	605f      	str	r7, [r3, #4]
 80078c8:	686b      	ldr	r3, [r5, #4]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	ea43 0308 	orr.w	r3, r3, r8
 80078d2:	606b      	str	r3, [r5, #4]
 80078d4:	4648      	mov	r0, r9
 80078d6:	f7ff fc1b 	bl	8007110 <__malloc_unlock>
 80078da:	e771      	b.n	80077c0 <_realloc_r+0x38>
 80078dc:	68a3      	ldr	r3, [r4, #8]
 80078de:	612b      	str	r3, [r5, #16]
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	616b      	str	r3, [r5, #20]
 80078e4:	2a24      	cmp	r2, #36	; 0x24
 80078e6:	bf01      	itttt	eq
 80078e8:	6923      	ldreq	r3, [r4, #16]
 80078ea:	61ab      	streq	r3, [r5, #24]
 80078ec:	6962      	ldreq	r2, [r4, #20]
 80078ee:	61ea      	streq	r2, [r5, #28]
 80078f0:	bf19      	ittee	ne
 80078f2:	3410      	addne	r4, #16
 80078f4:	f105 0318 	addne.w	r3, r5, #24
 80078f8:	f105 0320 	addeq.w	r3, r5, #32
 80078fc:	3418      	addeq	r4, #24
 80078fe:	e7d4      	b.n	80078aa <_realloc_r+0x122>
 8007900:	465b      	mov	r3, fp
 8007902:	e7d2      	b.n	80078aa <_realloc_r+0x122>
 8007904:	4621      	mov	r1, r4
 8007906:	4658      	mov	r0, fp
 8007908:	f7ff fbe2 	bl	80070d0 <memmove>
 800790c:	e7d3      	b.n	80078b6 <_realloc_r+0x12e>
 800790e:	45b8      	cmp	r8, r7
 8007910:	dc53      	bgt.n	80079ba <_realloc_r+0x232>
 8007912:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007916:	4628      	mov	r0, r5
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	6093      	str	r3, [r2, #8]
 800791c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007920:	68eb      	ldr	r3, [r5, #12]
 8007922:	60d3      	str	r3, [r2, #12]
 8007924:	609a      	str	r2, [r3, #8]
 8007926:	1f32      	subs	r2, r6, #4
 8007928:	2a24      	cmp	r2, #36	; 0x24
 800792a:	d842      	bhi.n	80079b2 <_realloc_r+0x22a>
 800792c:	2a13      	cmp	r2, #19
 800792e:	d908      	bls.n	8007942 <_realloc_r+0x1ba>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	60ab      	str	r3, [r5, #8]
 8007934:	6863      	ldr	r3, [r4, #4]
 8007936:	60eb      	str	r3, [r5, #12]
 8007938:	2a1b      	cmp	r2, #27
 800793a:	d828      	bhi.n	800798e <_realloc_r+0x206>
 800793c:	3408      	adds	r4, #8
 800793e:	f105 0010 	add.w	r0, r5, #16
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	6863      	ldr	r3, [r4, #4]
 8007948:	6043      	str	r3, [r0, #4]
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	6083      	str	r3, [r0, #8]
 800794e:	686b      	ldr	r3, [r5, #4]
 8007950:	eba7 0008 	sub.w	r0, r7, r8
 8007954:	280f      	cmp	r0, #15
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	eb05 0207 	add.w	r2, r5, r7
 800795e:	f240 80b0 	bls.w	8007ac2 <_realloc_r+0x33a>
 8007962:	eb05 0108 	add.w	r1, r5, r8
 8007966:	ea48 0303 	orr.w	r3, r8, r3
 800796a:	f040 0001 	orr.w	r0, r0, #1
 800796e:	606b      	str	r3, [r5, #4]
 8007970:	6048      	str	r0, [r1, #4]
 8007972:	6853      	ldr	r3, [r2, #4]
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	3108      	adds	r1, #8
 800797c:	4648      	mov	r0, r9
 800797e:	f7fe feb7 	bl	80066f0 <_free_r>
 8007982:	4648      	mov	r0, r9
 8007984:	f7ff fbc4 	bl	8007110 <__malloc_unlock>
 8007988:	f105 0b08 	add.w	fp, r5, #8
 800798c:	e718      	b.n	80077c0 <_realloc_r+0x38>
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	612b      	str	r3, [r5, #16]
 8007992:	68e3      	ldr	r3, [r4, #12]
 8007994:	616b      	str	r3, [r5, #20]
 8007996:	2a24      	cmp	r2, #36	; 0x24
 8007998:	bf01      	itttt	eq
 800799a:	6923      	ldreq	r3, [r4, #16]
 800799c:	61ab      	streq	r3, [r5, #24]
 800799e:	6963      	ldreq	r3, [r4, #20]
 80079a0:	61eb      	streq	r3, [r5, #28]
 80079a2:	bf19      	ittee	ne
 80079a4:	3410      	addne	r4, #16
 80079a6:	f105 0018 	addne.w	r0, r5, #24
 80079aa:	f105 0020 	addeq.w	r0, r5, #32
 80079ae:	3418      	addeq	r4, #24
 80079b0:	e7c7      	b.n	8007942 <_realloc_r+0x1ba>
 80079b2:	4621      	mov	r1, r4
 80079b4:	f7ff fb8c 	bl	80070d0 <memmove>
 80079b8:	e7c9      	b.n	800794e <_realloc_r+0x1c6>
 80079ba:	45d8      	cmp	r8, fp
 80079bc:	dc31      	bgt.n	8007a22 <_realloc_r+0x29a>
 80079be:	4628      	mov	r0, r5
 80079c0:	68eb      	ldr	r3, [r5, #12]
 80079c2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80079c6:	60d3      	str	r3, [r2, #12]
 80079c8:	609a      	str	r2, [r3, #8]
 80079ca:	1f32      	subs	r2, r6, #4
 80079cc:	2a24      	cmp	r2, #36	; 0x24
 80079ce:	d824      	bhi.n	8007a1a <_realloc_r+0x292>
 80079d0:	2a13      	cmp	r2, #19
 80079d2:	d908      	bls.n	80079e6 <_realloc_r+0x25e>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	60ab      	str	r3, [r5, #8]
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	60eb      	str	r3, [r5, #12]
 80079dc:	2a1b      	cmp	r2, #27
 80079de:	d80a      	bhi.n	80079f6 <_realloc_r+0x26e>
 80079e0:	3408      	adds	r4, #8
 80079e2:	f105 0010 	add.w	r0, r5, #16
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	6043      	str	r3, [r0, #4]
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	6083      	str	r3, [r0, #8]
 80079f2:	465f      	mov	r7, fp
 80079f4:	e7ab      	b.n	800794e <_realloc_r+0x1c6>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	612b      	str	r3, [r5, #16]
 80079fa:	68e3      	ldr	r3, [r4, #12]
 80079fc:	616b      	str	r3, [r5, #20]
 80079fe:	2a24      	cmp	r2, #36	; 0x24
 8007a00:	bf01      	itttt	eq
 8007a02:	6923      	ldreq	r3, [r4, #16]
 8007a04:	61ab      	streq	r3, [r5, #24]
 8007a06:	6963      	ldreq	r3, [r4, #20]
 8007a08:	61eb      	streq	r3, [r5, #28]
 8007a0a:	bf19      	ittee	ne
 8007a0c:	3410      	addne	r4, #16
 8007a0e:	f105 0018 	addne.w	r0, r5, #24
 8007a12:	f105 0020 	addeq.w	r0, r5, #32
 8007a16:	3418      	addeq	r4, #24
 8007a18:	e7e5      	b.n	80079e6 <_realloc_r+0x25e>
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7ff fb58 	bl	80070d0 <memmove>
 8007a20:	e7e7      	b.n	80079f2 <_realloc_r+0x26a>
 8007a22:	4611      	mov	r1, r2
 8007a24:	4648      	mov	r0, r9
 8007a26:	f7ff f909 	bl	8006c3c <_malloc_r>
 8007a2a:	4683      	mov	fp, r0
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f43f af51 	beq.w	80078d4 <_realloc_r+0x14c>
 8007a32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	4453      	add	r3, sl
 8007a3c:	f1a0 0208 	sub.w	r2, r0, #8
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d107      	bne.n	8007a54 <_realloc_r+0x2cc>
 8007a44:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007a48:	f027 0703 	bic.w	r7, r7, #3
 8007a4c:	4437      	add	r7, r6
 8007a4e:	e6fc      	b.n	800784a <_realloc_r+0xc2>
 8007a50:	2000043c 	.word	0x2000043c
 8007a54:	1f32      	subs	r2, r6, #4
 8007a56:	2a24      	cmp	r2, #36	; 0x24
 8007a58:	d82d      	bhi.n	8007ab6 <_realloc_r+0x32e>
 8007a5a:	2a13      	cmp	r2, #19
 8007a5c:	d928      	bls.n	8007ab0 <_realloc_r+0x328>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	6043      	str	r3, [r0, #4]
 8007a66:	2a1b      	cmp	r2, #27
 8007a68:	d80e      	bhi.n	8007a88 <_realloc_r+0x300>
 8007a6a:	f104 0208 	add.w	r2, r4, #8
 8007a6e:	f100 0308 	add.w	r3, r0, #8
 8007a72:	6811      	ldr	r1, [r2, #0]
 8007a74:	6019      	str	r1, [r3, #0]
 8007a76:	6851      	ldr	r1, [r2, #4]
 8007a78:	6059      	str	r1, [r3, #4]
 8007a7a:	6892      	ldr	r2, [r2, #8]
 8007a7c:	609a      	str	r2, [r3, #8]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4648      	mov	r0, r9
 8007a82:	f7fe fe35 	bl	80066f0 <_free_r>
 8007a86:	e725      	b.n	80078d4 <_realloc_r+0x14c>
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	6083      	str	r3, [r0, #8]
 8007a8c:	68e3      	ldr	r3, [r4, #12]
 8007a8e:	60c3      	str	r3, [r0, #12]
 8007a90:	2a24      	cmp	r2, #36	; 0x24
 8007a92:	bf01      	itttt	eq
 8007a94:	6923      	ldreq	r3, [r4, #16]
 8007a96:	6103      	streq	r3, [r0, #16]
 8007a98:	6961      	ldreq	r1, [r4, #20]
 8007a9a:	6141      	streq	r1, [r0, #20]
 8007a9c:	bf19      	ittee	ne
 8007a9e:	f104 0210 	addne.w	r2, r4, #16
 8007aa2:	f100 0310 	addne.w	r3, r0, #16
 8007aa6:	f104 0218 	addeq.w	r2, r4, #24
 8007aaa:	f100 0318 	addeq.w	r3, r0, #24
 8007aae:	e7e0      	b.n	8007a72 <_realloc_r+0x2ea>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	e7dd      	b.n	8007a72 <_realloc_r+0x2ea>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f7ff fb0a 	bl	80070d0 <memmove>
 8007abc:	e7df      	b.n	8007a7e <_realloc_r+0x2f6>
 8007abe:	4637      	mov	r7, r6
 8007ac0:	e6c3      	b.n	800784a <_realloc_r+0xc2>
 8007ac2:	431f      	orrs	r7, r3
 8007ac4:	606f      	str	r7, [r5, #4]
 8007ac6:	6853      	ldr	r3, [r2, #4]
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	6053      	str	r3, [r2, #4]
 8007ace:	e758      	b.n	8007982 <_realloc_r+0x1fa>

08007ad0 <frexp>:
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	ee10 1a90 	vmov	r1, s1
 8007ad6:	6002      	str	r2, [r0, #0]
 8007ad8:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <frexp+0x68>)
 8007ada:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	dc23      	bgt.n	8007b2a <frexp+0x5a>
 8007ae2:	ee10 2a10 	vmov	r2, s0
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	d01f      	beq.n	8007b2a <frexp+0x5a>
 8007aea:	4a14      	ldr	r2, [pc, #80]	; (8007b3c <frexp+0x6c>)
 8007aec:	400a      	ands	r2, r1
 8007aee:	b952      	cbnz	r2, 8007b06 <frexp+0x36>
 8007af0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007b30 <frexp+0x60>
 8007af4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007af8:	ee10 1a90 	vmov	r1, s1
 8007afc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b04:	6002      	str	r2, [r0, #0]
 8007b06:	6802      	ldr	r2, [r0, #0]
 8007b08:	151b      	asrs	r3, r3, #20
 8007b0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007b0e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8007b12:	4413      	add	r3, r2
 8007b14:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	ec53 2b10 	vmov	r2, r3, d0
 8007b1e:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8007b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b26:	ec43 2b10 	vmov	d0, r2, r3
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w
 8007b30:	00000000 	.word	0x00000000
 8007b34:	43500000 	.word	0x43500000
 8007b38:	7fefffff 	.word	0x7fefffff
 8007b3c:	7ff00000 	.word	0x7ff00000

08007b40 <_sbrk_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	; (8007b5c <_sbrk_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 f8a4 	bl	8000c98 <_sbrk>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_sbrk_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_sbrk_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000aec 	.word	0x20000aec

08007b60 <__sread>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	f000 ff40 	bl	80089ec <_read_r>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	bfab      	itete	ge
 8007b70:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8007b72:	89a3      	ldrhlt	r3, [r4, #12]
 8007b74:	181b      	addge	r3, r3, r0
 8007b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b7a:	bfac      	ite	ge
 8007b7c:	6523      	strge	r3, [r4, #80]	; 0x50
 8007b7e:	81a3      	strhlt	r3, [r4, #12]
 8007b80:	bd10      	pop	{r4, pc}

08007b82 <__swrite>:
 8007b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b86:	461f      	mov	r7, r3
 8007b88:	898b      	ldrh	r3, [r1, #12]
 8007b8a:	05db      	lsls	r3, r3, #23
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4616      	mov	r6, r2
 8007b92:	d505      	bpl.n	8007ba0 <__swrite+0x1e>
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	2302      	movs	r3, #2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f000 ff02 	bl	80089a4 <_lseek_r>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007baa:	81a3      	strh	r3, [r4, #12]
 8007bac:	4632      	mov	r2, r6
 8007bae:	463b      	mov	r3, r7
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	f000 bd3f 	b.w	8008638 <_write_r>

08007bba <__sseek>:
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc2:	f000 feef 	bl	80089a4 <_lseek_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	bf15      	itete	ne
 8007bcc:	6520      	strne	r0, [r4, #80]	; 0x50
 8007bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bd6:	81a3      	strheq	r3, [r4, #12]
 8007bd8:	bf18      	it	ne
 8007bda:	81a3      	strhne	r3, [r4, #12]
 8007bdc:	bd10      	pop	{r4, pc}

08007bde <__sclose>:
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 bdd1 	b.w	8008788 <_close_r>

08007be6 <strncpy>:
 8007be6:	b510      	push	{r4, lr}
 8007be8:	3901      	subs	r1, #1
 8007bea:	4603      	mov	r3, r0
 8007bec:	b132      	cbz	r2, 8007bfc <strncpy+0x16>
 8007bee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bf2:	f803 4b01 	strb.w	r4, [r3], #1
 8007bf6:	3a01      	subs	r2, #1
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d1f7      	bne.n	8007bec <strncpy+0x6>
 8007bfc:	441a      	add	r2, r3
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <strncpy+0x20>
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <strncpy+0x1a>

08007c0c <sysconf>:
 8007c0c:	2808      	cmp	r0, #8
 8007c0e:	b508      	push	{r3, lr}
 8007c10:	d006      	beq.n	8007c20 <sysconf+0x14>
 8007c12:	f7fc fa39 	bl	8004088 <__errno>
 8007c16:	2316      	movs	r3, #22
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	bd08      	pop	{r3, pc}
 8007c20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c24:	e7fb      	b.n	8007c1e <sysconf+0x12>

08007c26 <__sprint_r>:
 8007c26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6893      	ldr	r3, [r2, #8]
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	4614      	mov	r4, r2
 8007c32:	b91b      	cbnz	r3, 8007c3c <__sprint_r+0x16>
 8007c34:	6053      	str	r3, [r2, #4]
 8007c36:	4618      	mov	r0, r3
 8007c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007c3e:	049d      	lsls	r5, r3, #18
 8007c40:	d520      	bpl.n	8007c84 <__sprint_r+0x5e>
 8007c42:	6815      	ldr	r5, [r2, #0]
 8007c44:	3508      	adds	r5, #8
 8007c46:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8007c4a:	f04f 0900 	mov.w	r9, #0
 8007c4e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007c52:	45ca      	cmp	sl, r9
 8007c54:	dc0b      	bgt.n	8007c6e <__sprint_r+0x48>
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	f026 0003 	bic.w	r0, r6, #3
 8007c5c:	1a18      	subs	r0, r3, r0
 8007c5e:	60a0      	str	r0, [r4, #8]
 8007c60:	3508      	adds	r5, #8
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d1ef      	bne.n	8007c46 <__sprint_r+0x20>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8007c6c:	e7e4      	b.n	8007c38 <__sprint_r+0x12>
 8007c6e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007c72:	463a      	mov	r2, r7
 8007c74:	4640      	mov	r0, r8
 8007c76:	f000 fe42 	bl	80088fe <_fputwc_r>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	d0f3      	beq.n	8007c66 <__sprint_r+0x40>
 8007c7e:	f109 0901 	add.w	r9, r9, #1
 8007c82:	e7e6      	b.n	8007c52 <__sprint_r+0x2c>
 8007c84:	f7fe fdf4 	bl	8006870 <__sfvwrite_r>
 8007c88:	e7ed      	b.n	8007c66 <__sprint_r+0x40>
	...

08007c8c <_vfiprintf_r>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	ed2d 8b02 	vpush	{d8}
 8007c94:	b0b9      	sub	sp, #228	; 0xe4
 8007c96:	460f      	mov	r7, r1
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	461c      	mov	r4, r3
 8007c9e:	4681      	mov	r9, r0
 8007ca0:	b118      	cbz	r0, 8007caa <_vfiprintf_r+0x1e>
 8007ca2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ca4:	b90b      	cbnz	r3, 8007caa <_vfiprintf_r+0x1e>
 8007ca6:	f7fe fc93 	bl	80065d0 <__sinit>
 8007caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cac:	07d8      	lsls	r0, r3, #31
 8007cae:	d405      	bmi.n	8007cbc <_vfiprintf_r+0x30>
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	0599      	lsls	r1, r3, #22
 8007cb4:	d402      	bmi.n	8007cbc <_vfiprintf_r+0x30>
 8007cb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cb8:	f7fe ff4a 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8007cbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007cc0:	049a      	lsls	r2, r3, #18
 8007cc2:	d406      	bmi.n	8007cd2 <_vfiprintf_r+0x46>
 8007cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cc8:	81bb      	strh	r3, [r7, #12]
 8007cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007cd2:	89bb      	ldrh	r3, [r7, #12]
 8007cd4:	071e      	lsls	r6, r3, #28
 8007cd6:	d501      	bpl.n	8007cdc <_vfiprintf_r+0x50>
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	b9bb      	cbnz	r3, 8007d0c <_vfiprintf_r+0x80>
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4648      	mov	r0, r9
 8007ce0:	f7fd fd32 	bl	8005748 <__swsetup_r>
 8007ce4:	b190      	cbz	r0, 8007d0c <_vfiprintf_r+0x80>
 8007ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce8:	07d8      	lsls	r0, r3, #31
 8007cea:	d508      	bpl.n	8007cfe <_vfiprintf_r+0x72>
 8007cec:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf0:	9302      	str	r3, [sp, #8]
 8007cf2:	9802      	ldr	r0, [sp, #8]
 8007cf4:	b039      	add	sp, #228	; 0xe4
 8007cf6:	ecbd 8b02 	vpop	{d8}
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	89bb      	ldrh	r3, [r7, #12]
 8007d00:	0599      	lsls	r1, r3, #22
 8007d02:	d4f3      	bmi.n	8007cec <_vfiprintf_r+0x60>
 8007d04:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007d06:	f7fe ff24 	bl	8006b52 <__retarget_lock_release_recursive>
 8007d0a:	e7ef      	b.n	8007cec <_vfiprintf_r+0x60>
 8007d0c:	89bb      	ldrh	r3, [r7, #12]
 8007d0e:	f003 021a 	and.w	r2, r3, #26
 8007d12:	2a0a      	cmp	r2, #10
 8007d14:	d116      	bne.n	8007d44 <_vfiprintf_r+0xb8>
 8007d16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	db12      	blt.n	8007d44 <_vfiprintf_r+0xb8>
 8007d1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d20:	07d2      	lsls	r2, r2, #31
 8007d22:	d404      	bmi.n	8007d2e <_vfiprintf_r+0xa2>
 8007d24:	059e      	lsls	r6, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_vfiprintf_r+0xa2>
 8007d28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007d2a:	f7fe ff12 	bl	8006b52 <__retarget_lock_release_recursive>
 8007d2e:	9a01      	ldr	r2, [sp, #4]
 8007d30:	462b      	mov	r3, r5
 8007d32:	4639      	mov	r1, r7
 8007d34:	4648      	mov	r0, r9
 8007d36:	b039      	add	sp, #228	; 0xe4
 8007d38:	ecbd 8b02 	vpop	{d8}
 8007d3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	f000 bc3a 	b.w	80085b8 <__sbprintf>
 8007d44:	2300      	movs	r3, #0
 8007d46:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8007d4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007d4e:	ae0f      	add	r6, sp, #60	; 0x3c
 8007d50:	ee08 3a10 	vmov	s16, r3
 8007d54:	960c      	str	r6, [sp, #48]	; 0x30
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	9b01      	ldr	r3, [sp, #4]
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d62:	b10a      	cbz	r2, 8007d68 <_vfiprintf_r+0xdc>
 8007d64:	2a25      	cmp	r2, #37	; 0x25
 8007d66:	d1f9      	bne.n	8007d5c <_vfiprintf_r+0xd0>
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	ebb5 0803 	subs.w	r8, r5, r3
 8007d6e:	d00d      	beq.n	8007d8c <_vfiprintf_r+0x100>
 8007d70:	e9c6 3800 	strd	r3, r8, [r6]
 8007d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d76:	4443      	add	r3, r8
 8007d78:	930e      	str	r3, [sp, #56]	; 0x38
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	2b07      	cmp	r3, #7
 8007d80:	930d      	str	r3, [sp, #52]	; 0x34
 8007d82:	dc75      	bgt.n	8007e70 <_vfiprintf_r+0x1e4>
 8007d84:	3608      	adds	r6, #8
 8007d86:	9b02      	ldr	r3, [sp, #8]
 8007d88:	4443      	add	r3, r8
 8007d8a:	9302      	str	r3, [sp, #8]
 8007d8c:	782b      	ldrb	r3, [r5, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 83d6 	beq.w	8008540 <_vfiprintf_r+0x8b4>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f04f 31ff 	mov.w	r1, #4294967295
 8007d9a:	1c6a      	adds	r2, r5, #1
 8007d9c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007da0:	9100      	str	r1, [sp, #0]
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	469a      	mov	sl, r3
 8007da6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007daa:	9201      	str	r2, [sp, #4]
 8007dac:	f1a3 0220 	sub.w	r2, r3, #32
 8007db0:	2a5a      	cmp	r2, #90	; 0x5a
 8007db2:	f200 831f 	bhi.w	80083f4 <_vfiprintf_r+0x768>
 8007db6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007dba:	009b      	.short	0x009b
 8007dbc:	031d031d 	.word	0x031d031d
 8007dc0:	031d00a3 	.word	0x031d00a3
 8007dc4:	031d031d 	.word	0x031d031d
 8007dc8:	031d0082 	.word	0x031d0082
 8007dcc:	00a6031d 	.word	0x00a6031d
 8007dd0:	031d00b0 	.word	0x031d00b0
 8007dd4:	00b200ad 	.word	0x00b200ad
 8007dd8:	00cd031d 	.word	0x00cd031d
 8007ddc:	00d000d0 	.word	0x00d000d0
 8007de0:	00d000d0 	.word	0x00d000d0
 8007de4:	00d000d0 	.word	0x00d000d0
 8007de8:	00d000d0 	.word	0x00d000d0
 8007dec:	031d00d0 	.word	0x031d00d0
 8007df0:	031d031d 	.word	0x031d031d
 8007df4:	031d031d 	.word	0x031d031d
 8007df8:	031d031d 	.word	0x031d031d
 8007dfc:	031d031d 	.word	0x031d031d
 8007e00:	010800fa 	.word	0x010800fa
 8007e04:	031d031d 	.word	0x031d031d
 8007e08:	031d031d 	.word	0x031d031d
 8007e0c:	031d031d 	.word	0x031d031d
 8007e10:	031d031d 	.word	0x031d031d
 8007e14:	031d031d 	.word	0x031d031d
 8007e18:	031d0158 	.word	0x031d0158
 8007e1c:	031d031d 	.word	0x031d031d
 8007e20:	031d01a1 	.word	0x031d01a1
 8007e24:	031d027e 	.word	0x031d027e
 8007e28:	029e031d 	.word	0x029e031d
 8007e2c:	031d031d 	.word	0x031d031d
 8007e30:	031d031d 	.word	0x031d031d
 8007e34:	031d031d 	.word	0x031d031d
 8007e38:	031d031d 	.word	0x031d031d
 8007e3c:	031d031d 	.word	0x031d031d
 8007e40:	010a00fa 	.word	0x010a00fa
 8007e44:	031d031d 	.word	0x031d031d
 8007e48:	00e0031d 	.word	0x00e0031d
 8007e4c:	00f4010a 	.word	0x00f4010a
 8007e50:	00ed031d 	.word	0x00ed031d
 8007e54:	0136031d 	.word	0x0136031d
 8007e58:	018f015a 	.word	0x018f015a
 8007e5c:	031d00f4 	.word	0x031d00f4
 8007e60:	009901a1 	.word	0x009901a1
 8007e64:	031d0280 	.word	0x031d0280
 8007e68:	0065031d 	.word	0x0065031d
 8007e6c:	0099031d 	.word	0x0099031d
 8007e70:	aa0c      	add	r2, sp, #48	; 0x30
 8007e72:	4639      	mov	r1, r7
 8007e74:	4648      	mov	r0, r9
 8007e76:	f7ff fed6 	bl	8007c26 <__sprint_r>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f040 833f 	bne.w	80084fe <_vfiprintf_r+0x872>
 8007e80:	ae0f      	add	r6, sp, #60	; 0x3c
 8007e82:	e780      	b.n	8007d86 <_vfiprintf_r+0xfa>
 8007e84:	4a9c      	ldr	r2, [pc, #624]	; (80080f8 <_vfiprintf_r+0x46c>)
 8007e86:	9205      	str	r2, [sp, #20]
 8007e88:	f01a 0220 	ands.w	r2, sl, #32
 8007e8c:	f000 8235 	beq.w	80082fa <_vfiprintf_r+0x66e>
 8007e90:	3407      	adds	r4, #7
 8007e92:	f024 0207 	bic.w	r2, r4, #7
 8007e96:	4693      	mov	fp, r2
 8007e98:	6855      	ldr	r5, [r2, #4]
 8007e9a:	f85b 4b08 	ldr.w	r4, [fp], #8
 8007e9e:	f01a 0f01 	tst.w	sl, #1
 8007ea2:	d009      	beq.n	8007eb8 <_vfiprintf_r+0x22c>
 8007ea4:	ea54 0205 	orrs.w	r2, r4, r5
 8007ea8:	bf1f      	itttt	ne
 8007eaa:	2230      	movne	r2, #48	; 0x30
 8007eac:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8007eb0:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8007eb4:	f04a 0a02 	orrne.w	sl, sl, #2
 8007eb8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007ebc:	e11a      	b.n	80080f4 <_vfiprintf_r+0x468>
 8007ebe:	4648      	mov	r0, r9
 8007ec0:	f7fe fe40 	bl	8006b44 <_localeconv_r>
 8007ec4:	6843      	ldr	r3, [r0, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	ee08 3a10 	vmov	s16, r3
 8007ecc:	f7f8 f9b8 	bl	8000240 <strlen>
 8007ed0:	9007      	str	r0, [sp, #28]
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f7fe fe36 	bl	8006b44 <_localeconv_r>
 8007ed8:	6883      	ldr	r3, [r0, #8]
 8007eda:	9306      	str	r3, [sp, #24]
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	b12b      	cbz	r3, 8007eec <_vfiprintf_r+0x260>
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	b11b      	cbz	r3, 8007eec <_vfiprintf_r+0x260>
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b10b      	cbz	r3, 8007eec <_vfiprintf_r+0x260>
 8007ee8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007eec:	9a01      	ldr	r2, [sp, #4]
 8007eee:	e75a      	b.n	8007da6 <_vfiprintf_r+0x11a>
 8007ef0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f9      	bne.n	8007eec <_vfiprintf_r+0x260>
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007efe:	e7f5      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f00:	f04a 0a01 	orr.w	sl, sl, #1
 8007f04:	e7f2      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f06:	f854 3b04 	ldr.w	r3, [r4], #4
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	daed      	bge.n	8007eec <_vfiprintf_r+0x260>
 8007f10:	425b      	negs	r3, r3
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	f04a 0a04 	orr.w	sl, sl, #4
 8007f18:	e7e8      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f1a:	232b      	movs	r3, #43	; 0x2b
 8007f1c:	e7ed      	b.n	8007efa <_vfiprintf_r+0x26e>
 8007f1e:	9a01      	ldr	r2, [sp, #4]
 8007f20:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007f24:	2b2a      	cmp	r3, #42	; 0x2a
 8007f26:	d112      	bne.n	8007f4e <_vfiprintf_r+0x2c2>
 8007f28:	f854 0b04 	ldr.w	r0, [r4], #4
 8007f2c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8007f30:	e9cd 3200 	strd	r3, r2, [sp]
 8007f34:	e7da      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	200a      	movs	r0, #10
 8007f3a:	fb00 1303 	mla	r3, r0, r3, r1
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007f44:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007f48:	2909      	cmp	r1, #9
 8007f4a:	d9f4      	bls.n	8007f36 <_vfiprintf_r+0x2aa>
 8007f4c:	e72d      	b.n	8007daa <_vfiprintf_r+0x11e>
 8007f4e:	2100      	movs	r1, #0
 8007f50:	9100      	str	r1, [sp, #0]
 8007f52:	e7f7      	b.n	8007f44 <_vfiprintf_r+0x2b8>
 8007f54:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007f58:	e7c8      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	9a01      	ldr	r2, [sp, #4]
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	9903      	ldr	r1, [sp, #12]
 8007f62:	3b30      	subs	r3, #48	; 0x30
 8007f64:	200a      	movs	r0, #10
 8007f66:	fb00 3301 	mla	r3, r0, r1, r3
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007f70:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007f74:	2909      	cmp	r1, #9
 8007f76:	d9f3      	bls.n	8007f60 <_vfiprintf_r+0x2d4>
 8007f78:	e717      	b.n	8007daa <_vfiprintf_r+0x11e>
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b68      	cmp	r3, #104	; 0x68
 8007f80:	bf01      	itttt	eq
 8007f82:	9b01      	ldreq	r3, [sp, #4]
 8007f84:	3301      	addeq	r3, #1
 8007f86:	9301      	streq	r3, [sp, #4]
 8007f88:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8007f8c:	bf18      	it	ne
 8007f8e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007f92:	e7ab      	b.n	8007eec <_vfiprintf_r+0x260>
 8007f94:	9b01      	ldr	r3, [sp, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b6c      	cmp	r3, #108	; 0x6c
 8007f9a:	d105      	bne.n	8007fa8 <_vfiprintf_r+0x31c>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	f04a 0a20 	orr.w	sl, sl, #32
 8007fa6:	e7a1      	b.n	8007eec <_vfiprintf_r+0x260>
 8007fa8:	f04a 0a10 	orr.w	sl, sl, #16
 8007fac:	e79e      	b.n	8007eec <_vfiprintf_r+0x260>
 8007fae:	46a3      	mov	fp, r4
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f85b 3b04 	ldr.w	r3, [fp], #4
 8007fb6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8007fba:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8007fc8:	e0ad      	b.n	8008126 <_vfiprintf_r+0x49a>
 8007fca:	f04a 0a10 	orr.w	sl, sl, #16
 8007fce:	f01a 0f20 	tst.w	sl, #32
 8007fd2:	d011      	beq.n	8007ff8 <_vfiprintf_r+0x36c>
 8007fd4:	3407      	adds	r4, #7
 8007fd6:	f024 0307 	bic.w	r3, r4, #7
 8007fda:	469b      	mov	fp, r3
 8007fdc:	685d      	ldr	r5, [r3, #4]
 8007fde:	f85b 4b08 	ldr.w	r4, [fp], #8
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	da06      	bge.n	8007ff4 <_vfiprintf_r+0x368>
 8007fe6:	4264      	negs	r4, r4
 8007fe8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007fec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007ff0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e04a      	b.n	800808e <_vfiprintf_r+0x402>
 8007ff8:	46a3      	mov	fp, r4
 8007ffa:	f01a 0f10 	tst.w	sl, #16
 8007ffe:	f85b 5b04 	ldr.w	r5, [fp], #4
 8008002:	d002      	beq.n	800800a <_vfiprintf_r+0x37e>
 8008004:	462c      	mov	r4, r5
 8008006:	17ed      	asrs	r5, r5, #31
 8008008:	e7eb      	b.n	8007fe2 <_vfiprintf_r+0x356>
 800800a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800800e:	d003      	beq.n	8008018 <_vfiprintf_r+0x38c>
 8008010:	b22c      	sxth	r4, r5
 8008012:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008016:	e7e4      	b.n	8007fe2 <_vfiprintf_r+0x356>
 8008018:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800801c:	d0f2      	beq.n	8008004 <_vfiprintf_r+0x378>
 800801e:	b26c      	sxtb	r4, r5
 8008020:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008024:	e7dd      	b.n	8007fe2 <_vfiprintf_r+0x356>
 8008026:	f01a 0f20 	tst.w	sl, #32
 800802a:	f104 0b04 	add.w	fp, r4, #4
 800802e:	d007      	beq.n	8008040 <_vfiprintf_r+0x3b4>
 8008030:	9a02      	ldr	r2, [sp, #8]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	9902      	ldr	r1, [sp, #8]
 8008036:	17d2      	asrs	r2, r2, #31
 8008038:	e9c3 1200 	strd	r1, r2, [r3]
 800803c:	465c      	mov	r4, fp
 800803e:	e68c      	b.n	8007d5a <_vfiprintf_r+0xce>
 8008040:	f01a 0f10 	tst.w	sl, #16
 8008044:	d003      	beq.n	800804e <_vfiprintf_r+0x3c2>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	9a02      	ldr	r2, [sp, #8]
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e7f6      	b.n	800803c <_vfiprintf_r+0x3b0>
 800804e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008052:	d003      	beq.n	800805c <_vfiprintf_r+0x3d0>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	9a02      	ldr	r2, [sp, #8]
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	e7ef      	b.n	800803c <_vfiprintf_r+0x3b0>
 800805c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008060:	d0f1      	beq.n	8008046 <_vfiprintf_r+0x3ba>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	9a02      	ldr	r2, [sp, #8]
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	e7e8      	b.n	800803c <_vfiprintf_r+0x3b0>
 800806a:	f04a 0a10 	orr.w	sl, sl, #16
 800806e:	f01a 0320 	ands.w	r3, sl, #32
 8008072:	d01f      	beq.n	80080b4 <_vfiprintf_r+0x428>
 8008074:	3407      	adds	r4, #7
 8008076:	f024 0307 	bic.w	r3, r4, #7
 800807a:	469b      	mov	fp, r3
 800807c:	685d      	ldr	r5, [r3, #4]
 800807e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8008082:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008086:	2300      	movs	r3, #0
 8008088:	2200      	movs	r2, #0
 800808a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800808e:	9a00      	ldr	r2, [sp, #0]
 8008090:	3201      	adds	r2, #1
 8008092:	f000 8262 	beq.w	800855a <_vfiprintf_r+0x8ce>
 8008096:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800809a:	9204      	str	r2, [sp, #16]
 800809c:	ea54 0205 	orrs.w	r2, r4, r5
 80080a0:	f040 8261 	bne.w	8008566 <_vfiprintf_r+0x8da>
 80080a4:	9a00      	ldr	r2, [sp, #0]
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	f000 8199 	beq.w	80083de <_vfiprintf_r+0x752>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	f040 825d 	bne.w	800856c <_vfiprintf_r+0x8e0>
 80080b2:	e139      	b.n	8008328 <_vfiprintf_r+0x69c>
 80080b4:	46a3      	mov	fp, r4
 80080b6:	f01a 0510 	ands.w	r5, sl, #16
 80080ba:	f85b 4b04 	ldr.w	r4, [fp], #4
 80080be:	d001      	beq.n	80080c4 <_vfiprintf_r+0x438>
 80080c0:	461d      	mov	r5, r3
 80080c2:	e7de      	b.n	8008082 <_vfiprintf_r+0x3f6>
 80080c4:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80080c8:	d001      	beq.n	80080ce <_vfiprintf_r+0x442>
 80080ca:	b2a4      	uxth	r4, r4
 80080cc:	e7d9      	b.n	8008082 <_vfiprintf_r+0x3f6>
 80080ce:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80080d2:	d0d6      	beq.n	8008082 <_vfiprintf_r+0x3f6>
 80080d4:	b2e4      	uxtb	r4, r4
 80080d6:	e7f3      	b.n	80080c0 <_vfiprintf_r+0x434>
 80080d8:	2330      	movs	r3, #48	; 0x30
 80080da:	46a3      	mov	fp, r4
 80080dc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80080e0:	2378      	movs	r3, #120	; 0x78
 80080e2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80080e6:	f85b 4b04 	ldr.w	r4, [fp], #4
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <_vfiprintf_r+0x46c>)
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	2500      	movs	r5, #0
 80080f0:	f04a 0a02 	orr.w	sl, sl, #2
 80080f4:	2302      	movs	r3, #2
 80080f6:	e7c7      	b.n	8008088 <_vfiprintf_r+0x3fc>
 80080f8:	08008c04 	.word	0x08008c04
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	46a3      	mov	fp, r4
 8008100:	2500      	movs	r5, #0
 8008102:	1c5c      	adds	r4, r3, #1
 8008104:	f85b 8b04 	ldr.w	r8, [fp], #4
 8008108:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800810c:	f000 80ce 	beq.w	80082ac <_vfiprintf_r+0x620>
 8008110:	461a      	mov	r2, r3
 8008112:	4629      	mov	r1, r5
 8008114:	4640      	mov	r0, r8
 8008116:	f7f8 f89b 	bl	8000250 <memchr>
 800811a:	2800      	cmp	r0, #0
 800811c:	f000 8174 	beq.w	8008408 <_vfiprintf_r+0x77c>
 8008120:	eba0 0308 	sub.w	r3, r0, r8
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	42ab      	cmp	r3, r5
 800812a:	bfb8      	it	lt
 800812c:	462b      	movlt	r3, r5
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8008134:	b113      	cbz	r3, 800813c <_vfiprintf_r+0x4b0>
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	f01a 0302 	ands.w	r3, sl, #2
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	bf1e      	ittt	ne
 8008144:	9b04      	ldrne	r3, [sp, #16]
 8008146:	3302      	addne	r3, #2
 8008148:	9304      	strne	r3, [sp, #16]
 800814a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	d11f      	bne.n	8008192 <_vfiprintf_r+0x506>
 8008152:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008156:	1a9c      	subs	r4, r3, r2
 8008158:	2c00      	cmp	r4, #0
 800815a:	dd1a      	ble.n	8008192 <_vfiprintf_r+0x506>
 800815c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008160:	48aa      	ldr	r0, [pc, #680]	; (800840c <_vfiprintf_r+0x780>)
 8008162:	6030      	str	r0, [r6, #0]
 8008164:	2c10      	cmp	r4, #16
 8008166:	f103 0301 	add.w	r3, r3, #1
 800816a:	f106 0108 	add.w	r1, r6, #8
 800816e:	f300 8153 	bgt.w	8008418 <_vfiprintf_r+0x78c>
 8008172:	6074      	str	r4, [r6, #4]
 8008174:	2b07      	cmp	r3, #7
 8008176:	4414      	add	r4, r2
 8008178:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800817c:	f340 815e 	ble.w	800843c <_vfiprintf_r+0x7b0>
 8008180:	aa0c      	add	r2, sp, #48	; 0x30
 8008182:	4639      	mov	r1, r7
 8008184:	4648      	mov	r0, r9
 8008186:	f7ff fd4e 	bl	8007c26 <__sprint_r>
 800818a:	2800      	cmp	r0, #0
 800818c:	f040 81b7 	bne.w	80084fe <_vfiprintf_r+0x872>
 8008190:	ae0f      	add	r6, sp, #60	; 0x3c
 8008192:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8008196:	b173      	cbz	r3, 80081b6 <_vfiprintf_r+0x52a>
 8008198:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800819c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819e:	6032      	str	r2, [r6, #0]
 80081a0:	2201      	movs	r2, #1
 80081a2:	6072      	str	r2, [r6, #4]
 80081a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081a6:	3301      	adds	r3, #1
 80081a8:	3201      	adds	r2, #1
 80081aa:	2b07      	cmp	r3, #7
 80081ac:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80081b0:	f300 8146 	bgt.w	8008440 <_vfiprintf_r+0x7b4>
 80081b4:	3608      	adds	r6, #8
 80081b6:	9b08      	ldr	r3, [sp, #32]
 80081b8:	b16b      	cbz	r3, 80081d6 <_vfiprintf_r+0x54a>
 80081ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80081bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081be:	6032      	str	r2, [r6, #0]
 80081c0:	2202      	movs	r2, #2
 80081c2:	6072      	str	r2, [r6, #4]
 80081c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c6:	3301      	adds	r3, #1
 80081c8:	3202      	adds	r2, #2
 80081ca:	2b07      	cmp	r3, #7
 80081cc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80081d0:	f300 813f 	bgt.w	8008452 <_vfiprintf_r+0x7c6>
 80081d4:	3608      	adds	r6, #8
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	2b80      	cmp	r3, #128	; 0x80
 80081da:	d11f      	bne.n	800821c <_vfiprintf_r+0x590>
 80081dc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80081e0:	1a9c      	subs	r4, r3, r2
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	dd1a      	ble.n	800821c <_vfiprintf_r+0x590>
 80081e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80081ea:	4889      	ldr	r0, [pc, #548]	; (8008410 <_vfiprintf_r+0x784>)
 80081ec:	6030      	str	r0, [r6, #0]
 80081ee:	2c10      	cmp	r4, #16
 80081f0:	f103 0301 	add.w	r3, r3, #1
 80081f4:	f106 0108 	add.w	r1, r6, #8
 80081f8:	f300 8134 	bgt.w	8008464 <_vfiprintf_r+0x7d8>
 80081fc:	6074      	str	r4, [r6, #4]
 80081fe:	2b07      	cmp	r3, #7
 8008200:	4414      	add	r4, r2
 8008202:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8008206:	f340 813f 	ble.w	8008488 <_vfiprintf_r+0x7fc>
 800820a:	aa0c      	add	r2, sp, #48	; 0x30
 800820c:	4639      	mov	r1, r7
 800820e:	4648      	mov	r0, r9
 8008210:	f7ff fd09 	bl	8007c26 <__sprint_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	f040 8172 	bne.w	80084fe <_vfiprintf_r+0x872>
 800821a:	ae0f      	add	r6, sp, #60	; 0x3c
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	1aec      	subs	r4, r5, r3
 8008220:	2c00      	cmp	r4, #0
 8008222:	dd1a      	ble.n	800825a <_vfiprintf_r+0x5ce>
 8008224:	4d7a      	ldr	r5, [pc, #488]	; (8008410 <_vfiprintf_r+0x784>)
 8008226:	6035      	str	r5, [r6, #0]
 8008228:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800822c:	2c10      	cmp	r4, #16
 800822e:	f103 0301 	add.w	r3, r3, #1
 8008232:	f106 0208 	add.w	r2, r6, #8
 8008236:	f300 8129 	bgt.w	800848c <_vfiprintf_r+0x800>
 800823a:	6074      	str	r4, [r6, #4]
 800823c:	2b07      	cmp	r3, #7
 800823e:	440c      	add	r4, r1
 8008240:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8008244:	f340 8133 	ble.w	80084ae <_vfiprintf_r+0x822>
 8008248:	aa0c      	add	r2, sp, #48	; 0x30
 800824a:	4639      	mov	r1, r7
 800824c:	4648      	mov	r0, r9
 800824e:	f7ff fcea 	bl	8007c26 <__sprint_r>
 8008252:	2800      	cmp	r0, #0
 8008254:	f040 8153 	bne.w	80084fe <_vfiprintf_r+0x872>
 8008258:	ae0f      	add	r6, sp, #60	; 0x3c
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800825e:	6073      	str	r3, [r6, #4]
 8008260:	4418      	add	r0, r3
 8008262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008264:	f8c6 8000 	str.w	r8, [r6]
 8008268:	3301      	adds	r3, #1
 800826a:	2b07      	cmp	r3, #7
 800826c:	900e      	str	r0, [sp, #56]	; 0x38
 800826e:	930d      	str	r3, [sp, #52]	; 0x34
 8008270:	f300 811f 	bgt.w	80084b2 <_vfiprintf_r+0x826>
 8008274:	f106 0308 	add.w	r3, r6, #8
 8008278:	f01a 0f04 	tst.w	sl, #4
 800827c:	f040 8121 	bne.w	80084c2 <_vfiprintf_r+0x836>
 8008280:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008284:	9904      	ldr	r1, [sp, #16]
 8008286:	428a      	cmp	r2, r1
 8008288:	bfac      	ite	ge
 800828a:	189b      	addge	r3, r3, r2
 800828c:	185b      	addlt	r3, r3, r1
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008292:	b13b      	cbz	r3, 80082a4 <_vfiprintf_r+0x618>
 8008294:	aa0c      	add	r2, sp, #48	; 0x30
 8008296:	4639      	mov	r1, r7
 8008298:	4648      	mov	r0, r9
 800829a:	f7ff fcc4 	bl	8007c26 <__sprint_r>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f040 812d 	bne.w	80084fe <_vfiprintf_r+0x872>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930d      	str	r3, [sp, #52]	; 0x34
 80082a8:	ae0f      	add	r6, sp, #60	; 0x3c
 80082aa:	e6c7      	b.n	800803c <_vfiprintf_r+0x3b0>
 80082ac:	4640      	mov	r0, r8
 80082ae:	f7f7 ffc7 	bl	8000240 <strlen>
 80082b2:	9000      	str	r0, [sp, #0]
 80082b4:	e737      	b.n	8008126 <_vfiprintf_r+0x49a>
 80082b6:	f04a 0a10 	orr.w	sl, sl, #16
 80082ba:	f01a 0320 	ands.w	r3, sl, #32
 80082be:	d008      	beq.n	80082d2 <_vfiprintf_r+0x646>
 80082c0:	3407      	adds	r4, #7
 80082c2:	f024 0307 	bic.w	r3, r4, #7
 80082c6:	469b      	mov	fp, r3
 80082c8:	685d      	ldr	r5, [r3, #4]
 80082ca:	f85b 4b08 	ldr.w	r4, [fp], #8
 80082ce:	2301      	movs	r3, #1
 80082d0:	e6da      	b.n	8008088 <_vfiprintf_r+0x3fc>
 80082d2:	46a3      	mov	fp, r4
 80082d4:	f01a 0510 	ands.w	r5, sl, #16
 80082d8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80082dc:	d001      	beq.n	80082e2 <_vfiprintf_r+0x656>
 80082de:	461d      	mov	r5, r3
 80082e0:	e7f5      	b.n	80082ce <_vfiprintf_r+0x642>
 80082e2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80082e6:	d001      	beq.n	80082ec <_vfiprintf_r+0x660>
 80082e8:	b2a4      	uxth	r4, r4
 80082ea:	e7f0      	b.n	80082ce <_vfiprintf_r+0x642>
 80082ec:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80082f0:	d0ed      	beq.n	80082ce <_vfiprintf_r+0x642>
 80082f2:	b2e4      	uxtb	r4, r4
 80082f4:	e7f3      	b.n	80082de <_vfiprintf_r+0x652>
 80082f6:	4a47      	ldr	r2, [pc, #284]	; (8008414 <_vfiprintf_r+0x788>)
 80082f8:	e5c5      	b.n	8007e86 <_vfiprintf_r+0x1fa>
 80082fa:	46a3      	mov	fp, r4
 80082fc:	f01a 0510 	ands.w	r5, sl, #16
 8008300:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008304:	d001      	beq.n	800830a <_vfiprintf_r+0x67e>
 8008306:	4615      	mov	r5, r2
 8008308:	e5c9      	b.n	8007e9e <_vfiprintf_r+0x212>
 800830a:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800830e:	d001      	beq.n	8008314 <_vfiprintf_r+0x688>
 8008310:	b2a4      	uxth	r4, r4
 8008312:	e5c4      	b.n	8007e9e <_vfiprintf_r+0x212>
 8008314:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008318:	f43f adc1 	beq.w	8007e9e <_vfiprintf_r+0x212>
 800831c:	b2e4      	uxtb	r4, r4
 800831e:	e7f2      	b.n	8008306 <_vfiprintf_r+0x67a>
 8008320:	2c0a      	cmp	r4, #10
 8008322:	f175 0300 	sbcs.w	r3, r5, #0
 8008326:	d205      	bcs.n	8008334 <_vfiprintf_r+0x6a8>
 8008328:	3430      	adds	r4, #48	; 0x30
 800832a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800832e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8008332:	e137      	b.n	80085a4 <_vfiprintf_r+0x918>
 8008334:	ab38      	add	r3, sp, #224	; 0xe0
 8008336:	9308      	str	r3, [sp, #32]
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800833e:	f04f 0a00 	mov.w	sl, #0
 8008342:	9309      	str	r3, [sp, #36]	; 0x24
 8008344:	9b08      	ldr	r3, [sp, #32]
 8008346:	220a      	movs	r2, #10
 8008348:	f103 38ff 	add.w	r8, r3, #4294967295
 800834c:	4620      	mov	r0, r4
 800834e:	2300      	movs	r3, #0
 8008350:	4629      	mov	r1, r5
 8008352:	f7f7 ffcd 	bl	80002f0 <__aeabi_uldivmod>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	3230      	adds	r2, #48	; 0x30
 800835a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	f10a 0a01 	add.w	sl, sl, #1
 8008364:	b1db      	cbz	r3, 800839e <_vfiprintf_r+0x712>
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	4553      	cmp	r3, sl
 800836c:	d117      	bne.n	800839e <_vfiprintf_r+0x712>
 800836e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008372:	d014      	beq.n	800839e <_vfiprintf_r+0x712>
 8008374:	2c0a      	cmp	r4, #10
 8008376:	f175 0300 	sbcs.w	r3, r5, #0
 800837a:	d310      	bcc.n	800839e <_vfiprintf_r+0x712>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	eba8 0803 	sub.w	r8, r8, r3
 8008382:	461a      	mov	r2, r3
 8008384:	ee18 1a10 	vmov	r1, s16
 8008388:	4640      	mov	r0, r8
 800838a:	f7ff fc2c 	bl	8007be6 <strncpy>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	b1a3      	cbz	r3, 80083be <_vfiprintf_r+0x732>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	3301      	adds	r3, #1
 8008398:	9306      	str	r3, [sp, #24]
 800839a:	f04f 0a00 	mov.w	sl, #0
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f7 ffa3 	bl	80002f0 <__aeabi_uldivmod>
 80083aa:	2c0a      	cmp	r4, #10
 80083ac:	f175 0300 	sbcs.w	r3, r5, #0
 80083b0:	f0c0 80f8 	bcc.w	80085a4 <_vfiprintf_r+0x918>
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	f8cd 8020 	str.w	r8, [sp, #32]
 80083bc:	e7c2      	b.n	8008344 <_vfiprintf_r+0x6b8>
 80083be:	469a      	mov	sl, r3
 80083c0:	e7ed      	b.n	800839e <_vfiprintf_r+0x712>
 80083c2:	f004 030f 	and.w	r3, r4, #15
 80083c6:	9a05      	ldr	r2, [sp, #20]
 80083c8:	0924      	lsrs	r4, r4, #4
 80083ca:	5cd3      	ldrb	r3, [r2, r3]
 80083cc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80083d0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80083d4:	092d      	lsrs	r5, r5, #4
 80083d6:	ea54 0305 	orrs.w	r3, r4, r5
 80083da:	d1f2      	bne.n	80083c2 <_vfiprintf_r+0x736>
 80083dc:	e0e2      	b.n	80085a4 <_vfiprintf_r+0x918>
 80083de:	b933      	cbnz	r3, 80083ee <_vfiprintf_r+0x762>
 80083e0:	f01a 0f01 	tst.w	sl, #1
 80083e4:	d003      	beq.n	80083ee <_vfiprintf_r+0x762>
 80083e6:	2330      	movs	r3, #48	; 0x30
 80083e8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 80083ec:	e79f      	b.n	800832e <_vfiprintf_r+0x6a2>
 80083ee:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80083f2:	e0d7      	b.n	80085a4 <_vfiprintf_r+0x918>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80a3 	beq.w	8008540 <_vfiprintf_r+0x8b4>
 80083fa:	2100      	movs	r1, #0
 80083fc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8008400:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8008404:	46a3      	mov	fp, r4
 8008406:	e5da      	b.n	8007fbe <_vfiprintf_r+0x332>
 8008408:	4605      	mov	r5, r0
 800840a:	e68c      	b.n	8008126 <_vfiprintf_r+0x49a>
 800840c:	08008e1c 	.word	0x08008e1c
 8008410:	08008e2c 	.word	0x08008e2c
 8008414:	08008c15 	.word	0x08008c15
 8008418:	2010      	movs	r0, #16
 800841a:	4402      	add	r2, r0
 800841c:	2b07      	cmp	r3, #7
 800841e:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8008422:	6070      	str	r0, [r6, #4]
 8008424:	dd07      	ble.n	8008436 <_vfiprintf_r+0x7aa>
 8008426:	aa0c      	add	r2, sp, #48	; 0x30
 8008428:	4639      	mov	r1, r7
 800842a:	4648      	mov	r0, r9
 800842c:	f7ff fbfb 	bl	8007c26 <__sprint_r>
 8008430:	2800      	cmp	r0, #0
 8008432:	d164      	bne.n	80084fe <_vfiprintf_r+0x872>
 8008434:	a90f      	add	r1, sp, #60	; 0x3c
 8008436:	3c10      	subs	r4, #16
 8008438:	460e      	mov	r6, r1
 800843a:	e68f      	b.n	800815c <_vfiprintf_r+0x4d0>
 800843c:	460e      	mov	r6, r1
 800843e:	e6a8      	b.n	8008192 <_vfiprintf_r+0x506>
 8008440:	aa0c      	add	r2, sp, #48	; 0x30
 8008442:	4639      	mov	r1, r7
 8008444:	4648      	mov	r0, r9
 8008446:	f7ff fbee 	bl	8007c26 <__sprint_r>
 800844a:	2800      	cmp	r0, #0
 800844c:	d157      	bne.n	80084fe <_vfiprintf_r+0x872>
 800844e:	ae0f      	add	r6, sp, #60	; 0x3c
 8008450:	e6b1      	b.n	80081b6 <_vfiprintf_r+0x52a>
 8008452:	aa0c      	add	r2, sp, #48	; 0x30
 8008454:	4639      	mov	r1, r7
 8008456:	4648      	mov	r0, r9
 8008458:	f7ff fbe5 	bl	8007c26 <__sprint_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	d14e      	bne.n	80084fe <_vfiprintf_r+0x872>
 8008460:	ae0f      	add	r6, sp, #60	; 0x3c
 8008462:	e6b8      	b.n	80081d6 <_vfiprintf_r+0x54a>
 8008464:	2010      	movs	r0, #16
 8008466:	4402      	add	r2, r0
 8008468:	2b07      	cmp	r3, #7
 800846a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800846e:	6070      	str	r0, [r6, #4]
 8008470:	dd07      	ble.n	8008482 <_vfiprintf_r+0x7f6>
 8008472:	aa0c      	add	r2, sp, #48	; 0x30
 8008474:	4639      	mov	r1, r7
 8008476:	4648      	mov	r0, r9
 8008478:	f7ff fbd5 	bl	8007c26 <__sprint_r>
 800847c:	2800      	cmp	r0, #0
 800847e:	d13e      	bne.n	80084fe <_vfiprintf_r+0x872>
 8008480:	a90f      	add	r1, sp, #60	; 0x3c
 8008482:	3c10      	subs	r4, #16
 8008484:	460e      	mov	r6, r1
 8008486:	e6ae      	b.n	80081e6 <_vfiprintf_r+0x55a>
 8008488:	460e      	mov	r6, r1
 800848a:	e6c7      	b.n	800821c <_vfiprintf_r+0x590>
 800848c:	2010      	movs	r0, #16
 800848e:	4401      	add	r1, r0
 8008490:	2b07      	cmp	r3, #7
 8008492:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008496:	6070      	str	r0, [r6, #4]
 8008498:	dd06      	ble.n	80084a8 <_vfiprintf_r+0x81c>
 800849a:	aa0c      	add	r2, sp, #48	; 0x30
 800849c:	4639      	mov	r1, r7
 800849e:	4648      	mov	r0, r9
 80084a0:	f7ff fbc1 	bl	8007c26 <__sprint_r>
 80084a4:	bb58      	cbnz	r0, 80084fe <_vfiprintf_r+0x872>
 80084a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80084a8:	3c10      	subs	r4, #16
 80084aa:	4616      	mov	r6, r2
 80084ac:	e6bb      	b.n	8008226 <_vfiprintf_r+0x59a>
 80084ae:	4616      	mov	r6, r2
 80084b0:	e6d3      	b.n	800825a <_vfiprintf_r+0x5ce>
 80084b2:	aa0c      	add	r2, sp, #48	; 0x30
 80084b4:	4639      	mov	r1, r7
 80084b6:	4648      	mov	r0, r9
 80084b8:	f7ff fbb5 	bl	8007c26 <__sprint_r>
 80084bc:	b9f8      	cbnz	r0, 80084fe <_vfiprintf_r+0x872>
 80084be:	ab0f      	add	r3, sp, #60	; 0x3c
 80084c0:	e6da      	b.n	8008278 <_vfiprintf_r+0x5ec>
 80084c2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80084c6:	1a54      	subs	r4, r2, r1
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	f77f aed9 	ble.w	8008280 <_vfiprintf_r+0x5f4>
 80084ce:	4d39      	ldr	r5, [pc, #228]	; (80085b4 <_vfiprintf_r+0x928>)
 80084d0:	2610      	movs	r6, #16
 80084d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80084d6:	2c10      	cmp	r4, #16
 80084d8:	f102 0201 	add.w	r2, r2, #1
 80084dc:	601d      	str	r5, [r3, #0]
 80084de:	dc1d      	bgt.n	800851c <_vfiprintf_r+0x890>
 80084e0:	605c      	str	r4, [r3, #4]
 80084e2:	2a07      	cmp	r2, #7
 80084e4:	440c      	add	r4, r1
 80084e6:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80084ea:	f77f aec9 	ble.w	8008280 <_vfiprintf_r+0x5f4>
 80084ee:	aa0c      	add	r2, sp, #48	; 0x30
 80084f0:	4639      	mov	r1, r7
 80084f2:	4648      	mov	r0, r9
 80084f4:	f7ff fb97 	bl	8007c26 <__sprint_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f43f aec1 	beq.w	8008280 <_vfiprintf_r+0x5f4>
 80084fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008500:	07d9      	lsls	r1, r3, #31
 8008502:	d405      	bmi.n	8008510 <_vfiprintf_r+0x884>
 8008504:	89bb      	ldrh	r3, [r7, #12]
 8008506:	059a      	lsls	r2, r3, #22
 8008508:	d402      	bmi.n	8008510 <_vfiprintf_r+0x884>
 800850a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800850c:	f7fe fb21 	bl	8006b52 <__retarget_lock_release_recursive>
 8008510:	89bb      	ldrh	r3, [r7, #12]
 8008512:	065b      	lsls	r3, r3, #25
 8008514:	f57f abed 	bpl.w	8007cf2 <_vfiprintf_r+0x66>
 8008518:	f7ff bbe8 	b.w	8007cec <_vfiprintf_r+0x60>
 800851c:	3110      	adds	r1, #16
 800851e:	2a07      	cmp	r2, #7
 8008520:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8008524:	605e      	str	r6, [r3, #4]
 8008526:	dc02      	bgt.n	800852e <_vfiprintf_r+0x8a2>
 8008528:	3308      	adds	r3, #8
 800852a:	3c10      	subs	r4, #16
 800852c:	e7d1      	b.n	80084d2 <_vfiprintf_r+0x846>
 800852e:	aa0c      	add	r2, sp, #48	; 0x30
 8008530:	4639      	mov	r1, r7
 8008532:	4648      	mov	r0, r9
 8008534:	f7ff fb77 	bl	8007c26 <__sprint_r>
 8008538:	2800      	cmp	r0, #0
 800853a:	d1e0      	bne.n	80084fe <_vfiprintf_r+0x872>
 800853c:	ab0f      	add	r3, sp, #60	; 0x3c
 800853e:	e7f4      	b.n	800852a <_vfiprintf_r+0x89e>
 8008540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008542:	b913      	cbnz	r3, 800854a <_vfiprintf_r+0x8be>
 8008544:	2300      	movs	r3, #0
 8008546:	930d      	str	r3, [sp, #52]	; 0x34
 8008548:	e7d9      	b.n	80084fe <_vfiprintf_r+0x872>
 800854a:	aa0c      	add	r2, sp, #48	; 0x30
 800854c:	4639      	mov	r1, r7
 800854e:	4648      	mov	r0, r9
 8008550:	f7ff fb69 	bl	8007c26 <__sprint_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	d0f5      	beq.n	8008544 <_vfiprintf_r+0x8b8>
 8008558:	e7d1      	b.n	80084fe <_vfiprintf_r+0x872>
 800855a:	ea54 0205 	orrs.w	r2, r4, r5
 800855e:	f8cd a010 	str.w	sl, [sp, #16]
 8008562:	f43f ada3 	beq.w	80080ac <_vfiprintf_r+0x420>
 8008566:	2b01      	cmp	r3, #1
 8008568:	f43f aeda 	beq.w	8008320 <_vfiprintf_r+0x694>
 800856c:	2b02      	cmp	r3, #2
 800856e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8008572:	f43f af26 	beq.w	80083c2 <_vfiprintf_r+0x736>
 8008576:	f004 0307 	and.w	r3, r4, #7
 800857a:	08e4      	lsrs	r4, r4, #3
 800857c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8008580:	08ed      	lsrs	r5, r5, #3
 8008582:	3330      	adds	r3, #48	; 0x30
 8008584:	ea54 0105 	orrs.w	r1, r4, r5
 8008588:	4642      	mov	r2, r8
 800858a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800858e:	d1f2      	bne.n	8008576 <_vfiprintf_r+0x8ea>
 8008590:	9904      	ldr	r1, [sp, #16]
 8008592:	07c8      	lsls	r0, r1, #31
 8008594:	d506      	bpl.n	80085a4 <_vfiprintf_r+0x918>
 8008596:	2b30      	cmp	r3, #48	; 0x30
 8008598:	d004      	beq.n	80085a4 <_vfiprintf_r+0x918>
 800859a:	2330      	movs	r3, #48	; 0x30
 800859c:	f808 3c01 	strb.w	r3, [r8, #-1]
 80085a0:	f1a2 0802 	sub.w	r8, r2, #2
 80085a4:	ab38      	add	r3, sp, #224	; 0xe0
 80085a6:	eba3 0308 	sub.w	r3, r3, r8
 80085aa:	9d00      	ldr	r5, [sp, #0]
 80085ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	e5b8      	b.n	8008126 <_vfiprintf_r+0x49a>
 80085b4:	08008e1c 	.word	0x08008e1c

080085b8 <__sbprintf>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	8989      	ldrh	r1, [r1, #12]
 80085be:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80085c2:	f021 0102 	bic.w	r1, r1, #2
 80085c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80085ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80085cc:	911b      	str	r1, [sp, #108]	; 0x6c
 80085ce:	89e1      	ldrh	r1, [r4, #14]
 80085d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80085d4:	69e1      	ldr	r1, [r4, #28]
 80085d6:	9109      	str	r1, [sp, #36]	; 0x24
 80085d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085da:	910b      	str	r1, [sp, #44]	; 0x2c
 80085dc:	a91c      	add	r1, sp, #112	; 0x70
 80085de:	9102      	str	r1, [sp, #8]
 80085e0:	9106      	str	r1, [sp, #24]
 80085e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085e6:	4606      	mov	r6, r0
 80085e8:	9104      	str	r1, [sp, #16]
 80085ea:	9107      	str	r1, [sp, #28]
 80085ec:	a818      	add	r0, sp, #96	; 0x60
 80085ee:	2100      	movs	r1, #0
 80085f0:	e9cd 3200 	strd	r3, r2, [sp]
 80085f4:	9108      	str	r1, [sp, #32]
 80085f6:	f7fe faa9 	bl	8006b4c <__retarget_lock_init_recursive>
 80085fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085fe:	a902      	add	r1, sp, #8
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff fb43 	bl	8007c8c <_vfiprintf_r>
 8008606:	1e05      	subs	r5, r0, #0
 8008608:	db07      	blt.n	800861a <__sbprintf+0x62>
 800860a:	a902      	add	r1, sp, #8
 800860c:	4630      	mov	r0, r6
 800860e:	f7fd ff73 	bl	80064f8 <_fflush_r>
 8008612:	2800      	cmp	r0, #0
 8008614:	bf18      	it	ne
 8008616:	f04f 35ff 	movne.w	r5, #4294967295
 800861a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800861e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008620:	065b      	lsls	r3, r3, #25
 8008622:	bf42      	ittt	mi
 8008624:	89a3      	ldrhmi	r3, [r4, #12]
 8008626:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800862a:	81a3      	strhmi	r3, [r4, #12]
 800862c:	f7fe fa8f 	bl	8006b4e <__retarget_lock_close_recursive>
 8008630:	4628      	mov	r0, r5
 8008632:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8008636:	bd70      	pop	{r4, r5, r6, pc}

08008638 <_write_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d07      	ldr	r5, [pc, #28]	; (8008658 <_write_r+0x20>)
 800863c:	4604      	mov	r4, r0
 800863e:	4608      	mov	r0, r1
 8008640:	4611      	mov	r1, r2
 8008642:	2200      	movs	r2, #0
 8008644:	602a      	str	r2, [r5, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	f7f8 f9b0 	bl	80009ac <_write>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_write_r+0x1e>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_write_r+0x1e>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	20000aec 	.word	0x20000aec

0800865c <__register_exitproc>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	f8df a078 	ldr.w	sl, [pc, #120]	; 80086dc <__register_exitproc+0x80>
 8008664:	4606      	mov	r6, r0
 8008666:	f8da 0000 	ldr.w	r0, [sl]
 800866a:	4698      	mov	r8, r3
 800866c:	460f      	mov	r7, r1
 800866e:	4691      	mov	r9, r2
 8008670:	f7fe fa6e 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8008674:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <__register_exitproc+0x7c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800867c:	b91c      	cbnz	r4, 8008686 <__register_exitproc+0x2a>
 800867e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008682:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008686:	6865      	ldr	r5, [r4, #4]
 8008688:	f8da 0000 	ldr.w	r0, [sl]
 800868c:	2d1f      	cmp	r5, #31
 800868e:	dd05      	ble.n	800869c <__register_exitproc+0x40>
 8008690:	f7fe fa5f 	bl	8006b52 <__retarget_lock_release_recursive>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	b19e      	cbz	r6, 80086c6 <__register_exitproc+0x6a>
 800869e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80086a2:	2201      	movs	r2, #1
 80086a4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80086a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80086ac:	40aa      	lsls	r2, r5
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80086b4:	2e02      	cmp	r6, #2
 80086b6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80086ba:	bf02      	ittt	eq
 80086bc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80086c0:	4313      	orreq	r3, r2
 80086c2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80086c6:	1c6b      	adds	r3, r5, #1
 80086c8:	3502      	adds	r5, #2
 80086ca:	6063      	str	r3, [r4, #4]
 80086cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80086d0:	f7fe fa3f 	bl	8006b52 <__retarget_lock_release_recursive>
 80086d4:	2000      	movs	r0, #0
 80086d6:	e7df      	b.n	8008698 <__register_exitproc+0x3c>
 80086d8:	08008bf0 	.word	0x08008bf0
 80086dc:	20000438 	.word	0x20000438

080086e0 <__assert_func>:
 80086e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086e2:	4614      	mov	r4, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <__assert_func+0x2c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4605      	mov	r5, r0
 80086ec:	68d8      	ldr	r0, [r3, #12]
 80086ee:	b14c      	cbz	r4, 8008704 <__assert_func+0x24>
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <__assert_func+0x30>)
 80086f2:	9100      	str	r1, [sp, #0]
 80086f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086f8:	4906      	ldr	r1, [pc, #24]	; (8008714 <__assert_func+0x34>)
 80086fa:	462b      	mov	r3, r5
 80086fc:	f000 f8ac 	bl	8008858 <fiprintf>
 8008700:	f000 f9f3 	bl	8008aea <abort>
 8008704:	4b04      	ldr	r3, [pc, #16]	; (8008718 <__assert_func+0x38>)
 8008706:	461c      	mov	r4, r3
 8008708:	e7f3      	b.n	80086f2 <__assert_func+0x12>
 800870a:	bf00      	nop
 800870c:	2000000c 	.word	0x2000000c
 8008710:	08008e3c 	.word	0x08008e3c
 8008714:	08008e49 	.word	0x08008e49
 8008718:	08008e77 	.word	0x08008e77

0800871c <_calloc_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	fba1 1502 	umull	r1, r5, r1, r2
 8008722:	b92d      	cbnz	r5, 8008730 <_calloc_r+0x14>
 8008724:	f7fe fa8a 	bl	8006c3c <_malloc_r>
 8008728:	4604      	mov	r4, r0
 800872a:	b938      	cbnz	r0, 800873c <_calloc_r+0x20>
 800872c:	4620      	mov	r0, r4
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	f7fb fcaa 	bl	8004088 <__errno>
 8008734:	230c      	movs	r3, #12
 8008736:	6003      	str	r3, [r0, #0]
 8008738:	2400      	movs	r4, #0
 800873a:	e7f7      	b.n	800872c <_calloc_r+0x10>
 800873c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008740:	f022 0203 	bic.w	r2, r2, #3
 8008744:	3a04      	subs	r2, #4
 8008746:	2a24      	cmp	r2, #36	; 0x24
 8008748:	d819      	bhi.n	800877e <_calloc_r+0x62>
 800874a:	2a13      	cmp	r2, #19
 800874c:	d915      	bls.n	800877a <_calloc_r+0x5e>
 800874e:	2a1b      	cmp	r2, #27
 8008750:	e9c0 5500 	strd	r5, r5, [r0]
 8008754:	d806      	bhi.n	8008764 <_calloc_r+0x48>
 8008756:	f100 0308 	add.w	r3, r0, #8
 800875a:	2200      	movs	r2, #0
 800875c:	e9c3 2200 	strd	r2, r2, [r3]
 8008760:	609a      	str	r2, [r3, #8]
 8008762:	e7e3      	b.n	800872c <_calloc_r+0x10>
 8008764:	2a24      	cmp	r2, #36	; 0x24
 8008766:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800876a:	bf11      	iteee	ne
 800876c:	f100 0310 	addne.w	r3, r0, #16
 8008770:	6105      	streq	r5, [r0, #16]
 8008772:	f100 0318 	addeq.w	r3, r0, #24
 8008776:	6145      	streq	r5, [r0, #20]
 8008778:	e7ef      	b.n	800875a <_calloc_r+0x3e>
 800877a:	4603      	mov	r3, r0
 800877c:	e7ed      	b.n	800875a <_calloc_r+0x3e>
 800877e:	4629      	mov	r1, r5
 8008780:	f7fb fcac 	bl	80040dc <memset>
 8008784:	e7d2      	b.n	800872c <_calloc_r+0x10>
	...

08008788 <_close_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	; (80087a4 <_close_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f8 f936 	bl	8000a04 <_close>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_close_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_close_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000aec 	.word	0x20000aec

080087a8 <_fclose_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4606      	mov	r6, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	b911      	cbnz	r1, 80087b6 <_fclose_r+0xe>
 80087b0:	2500      	movs	r5, #0
 80087b2:	4628      	mov	r0, r5
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	b118      	cbz	r0, 80087c0 <_fclose_r+0x18>
 80087b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087ba:	b90b      	cbnz	r3, 80087c0 <_fclose_r+0x18>
 80087bc:	f7fd ff08 	bl	80065d0 <__sinit>
 80087c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c2:	07d8      	lsls	r0, r3, #31
 80087c4:	d405      	bmi.n	80087d2 <_fclose_r+0x2a>
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	0599      	lsls	r1, r3, #22
 80087ca:	d402      	bmi.n	80087d2 <_fclose_r+0x2a>
 80087cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ce:	f7fe f9bf 	bl	8006b50 <__retarget_lock_acquire_recursive>
 80087d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d6:	b93b      	cbnz	r3, 80087e8 <_fclose_r+0x40>
 80087d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80087da:	f015 0501 	ands.w	r5, r5, #1
 80087de:	d1e7      	bne.n	80087b0 <_fclose_r+0x8>
 80087e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e2:	f7fe f9b6 	bl	8006b52 <__retarget_lock_release_recursive>
 80087e6:	e7e4      	b.n	80087b2 <_fclose_r+0xa>
 80087e8:	4621      	mov	r1, r4
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7fd fdf6 	bl	80063dc <__sflush_r>
 80087f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087f2:	4605      	mov	r5, r0
 80087f4:	b133      	cbz	r3, 8008804 <_fclose_r+0x5c>
 80087f6:	69e1      	ldr	r1, [r4, #28]
 80087f8:	4630      	mov	r0, r6
 80087fa:	4798      	blx	r3
 80087fc:	2800      	cmp	r0, #0
 80087fe:	bfb8      	it	lt
 8008800:	f04f 35ff 	movlt.w	r5, #4294967295
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	061a      	lsls	r2, r3, #24
 8008808:	d503      	bpl.n	8008812 <_fclose_r+0x6a>
 800880a:	6921      	ldr	r1, [r4, #16]
 800880c:	4630      	mov	r0, r6
 800880e:	f7fd ff6f 	bl	80066f0 <_free_r>
 8008812:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008814:	b141      	cbz	r1, 8008828 <_fclose_r+0x80>
 8008816:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800881a:	4299      	cmp	r1, r3
 800881c:	d002      	beq.n	8008824 <_fclose_r+0x7c>
 800881e:	4630      	mov	r0, r6
 8008820:	f7fd ff66 	bl	80066f0 <_free_r>
 8008824:	2300      	movs	r3, #0
 8008826:	6323      	str	r3, [r4, #48]	; 0x30
 8008828:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800882a:	b121      	cbz	r1, 8008836 <_fclose_r+0x8e>
 800882c:	4630      	mov	r0, r6
 800882e:	f7fd ff5f 	bl	80066f0 <_free_r>
 8008832:	2300      	movs	r3, #0
 8008834:	6463      	str	r3, [r4, #68]	; 0x44
 8008836:	f7fd feb3 	bl	80065a0 <__sfp_lock_acquire>
 800883a:	2300      	movs	r3, #0
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008840:	07db      	lsls	r3, r3, #31
 8008842:	d402      	bmi.n	800884a <_fclose_r+0xa2>
 8008844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008846:	f7fe f984 	bl	8006b52 <__retarget_lock_release_recursive>
 800884a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884c:	f7fe f97f 	bl	8006b4e <__retarget_lock_close_recursive>
 8008850:	f7fd feac 	bl	80065ac <__sfp_lock_release>
 8008854:	e7ad      	b.n	80087b2 <_fclose_r+0xa>
	...

08008858 <fiprintf>:
 8008858:	b40e      	push	{r1, r2, r3}
 800885a:	b503      	push	{r0, r1, lr}
 800885c:	4601      	mov	r1, r0
 800885e:	ab03      	add	r3, sp, #12
 8008860:	4805      	ldr	r0, [pc, #20]	; (8008878 <fiprintf+0x20>)
 8008862:	f853 2b04 	ldr.w	r2, [r3], #4
 8008866:	6800      	ldr	r0, [r0, #0]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	f7ff fa0f 	bl	8007c8c <_vfiprintf_r>
 800886e:	b002      	add	sp, #8
 8008870:	f85d eb04 	ldr.w	lr, [sp], #4
 8008874:	b003      	add	sp, #12
 8008876:	4770      	bx	lr
 8008878:	2000000c 	.word	0x2000000c

0800887c <__fputwc>:
 800887c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008880:	4680      	mov	r8, r0
 8008882:	460e      	mov	r6, r1
 8008884:	4615      	mov	r5, r2
 8008886:	f000 f887 	bl	8008998 <__locale_mb_cur_max>
 800888a:	2801      	cmp	r0, #1
 800888c:	d11c      	bne.n	80088c8 <__fputwc+0x4c>
 800888e:	1e73      	subs	r3, r6, #1
 8008890:	2bfe      	cmp	r3, #254	; 0xfe
 8008892:	d819      	bhi.n	80088c8 <__fputwc+0x4c>
 8008894:	f88d 6004 	strb.w	r6, [sp, #4]
 8008898:	4604      	mov	r4, r0
 800889a:	2700      	movs	r7, #0
 800889c:	f10d 0904 	add.w	r9, sp, #4
 80088a0:	42a7      	cmp	r7, r4
 80088a2:	d020      	beq.n	80088e6 <__fputwc+0x6a>
 80088a4:	68ab      	ldr	r3, [r5, #8]
 80088a6:	f817 1009 	ldrb.w	r1, [r7, r9]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	60ab      	str	r3, [r5, #8]
 80088b0:	da04      	bge.n	80088bc <__fputwc+0x40>
 80088b2:	69aa      	ldr	r2, [r5, #24]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	db1a      	blt.n	80088ee <__fputwc+0x72>
 80088b8:	290a      	cmp	r1, #10
 80088ba:	d018      	beq.n	80088ee <__fputwc+0x72>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	7019      	strb	r1, [r3, #0]
 80088c4:	3701      	adds	r7, #1
 80088c6:	e7eb      	b.n	80088a0 <__fputwc+0x24>
 80088c8:	a901      	add	r1, sp, #4
 80088ca:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80088ce:	4632      	mov	r2, r6
 80088d0:	4640      	mov	r0, r8
 80088d2:	f000 f8e7 	bl	8008aa4 <_wcrtomb_r>
 80088d6:	1c41      	adds	r1, r0, #1
 80088d8:	4604      	mov	r4, r0
 80088da:	d1de      	bne.n	800889a <__fputwc+0x1e>
 80088dc:	89ab      	ldrh	r3, [r5, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e2:	81ab      	strh	r3, [r5, #12]
 80088e4:	4606      	mov	r6, r0
 80088e6:	4630      	mov	r0, r6
 80088e8:	b003      	add	sp, #12
 80088ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ee:	462a      	mov	r2, r5
 80088f0:	4640      	mov	r0, r8
 80088f2:	f000 f88d 	bl	8008a10 <__swbuf_r>
 80088f6:	1c42      	adds	r2, r0, #1
 80088f8:	d1e4      	bne.n	80088c4 <__fputwc+0x48>
 80088fa:	4606      	mov	r6, r0
 80088fc:	e7f3      	b.n	80088e6 <__fputwc+0x6a>

080088fe <_fputwc_r>:
 80088fe:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008902:	4614      	mov	r4, r2
 8008904:	07da      	lsls	r2, r3, #31
 8008906:	4605      	mov	r5, r0
 8008908:	d407      	bmi.n	800891a <_fputwc_r+0x1c>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d404      	bmi.n	800891a <_fputwc_r+0x1c>
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	9101      	str	r1, [sp, #4]
 8008914:	f7fe f91c 	bl	8006b50 <__retarget_lock_acquire_recursive>
 8008918:	9901      	ldr	r1, [sp, #4]
 800891a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891e:	0498      	lsls	r0, r3, #18
 8008920:	d406      	bmi.n	8008930 <_fputwc_r+0x32>
 8008922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800892a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800892e:	6663      	str	r3, [r4, #100]	; 0x64
 8008930:	4622      	mov	r2, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f7ff ffa2 	bl	800887c <__fputwc>
 8008938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	4605      	mov	r5, r0
 800893e:	d405      	bmi.n	800894c <_fputwc_r+0x4e>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	059b      	lsls	r3, r3, #22
 8008944:	d402      	bmi.n	800894c <_fputwc_r+0x4e>
 8008946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008948:	f7fe f903 	bl	8006b52 <__retarget_lock_release_recursive>
 800894c:	4628      	mov	r0, r5
 800894e:	b003      	add	sp, #12
 8008950:	bd30      	pop	{r4, r5, pc}
	...

08008954 <_fstat_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_fstat_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 f89f 	bl	8000aa4 <_fstat>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_fstat_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_fstat_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	20000aec 	.word	0x20000aec

08008978 <_isatty_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d06      	ldr	r5, [pc, #24]	; (8008994 <_isatty_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f7 fffc 	bl	8000980 <_isatty>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_isatty_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_isatty_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000aec 	.word	0x20000aec

08008998 <__locale_mb_cur_max>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__locale_mb_cur_max+0x8>)
 800899a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800899e:	4770      	bx	lr
 80089a0:	2000084c 	.word	0x2000084c

080089a4 <_lseek_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	; (80089c4 <_lseek_r+0x20>)
 80089a8:	4604      	mov	r4, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	602a      	str	r2, [r5, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7f8 f83d 	bl	8000a32 <_lseek>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_lseek_r+0x1e>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_lseek_r+0x1e>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20000aec 	.word	0x20000aec

080089c8 <__ascii_mbtowc>:
 80089c8:	b082      	sub	sp, #8
 80089ca:	b901      	cbnz	r1, 80089ce <__ascii_mbtowc+0x6>
 80089cc:	a901      	add	r1, sp, #4
 80089ce:	b142      	cbz	r2, 80089e2 <__ascii_mbtowc+0x1a>
 80089d0:	b14b      	cbz	r3, 80089e6 <__ascii_mbtowc+0x1e>
 80089d2:	7813      	ldrb	r3, [r2, #0]
 80089d4:	600b      	str	r3, [r1, #0]
 80089d6:	7812      	ldrb	r2, [r2, #0]
 80089d8:	1e10      	subs	r0, r2, #0
 80089da:	bf18      	it	ne
 80089dc:	2001      	movne	r0, #1
 80089de:	b002      	add	sp, #8
 80089e0:	4770      	bx	lr
 80089e2:	4610      	mov	r0, r2
 80089e4:	e7fb      	b.n	80089de <__ascii_mbtowc+0x16>
 80089e6:	f06f 0001 	mvn.w	r0, #1
 80089ea:	e7f8      	b.n	80089de <__ascii_mbtowc+0x16>

080089ec <_read_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	; (8008a0c <_read_r+0x20>)
 80089f0:	4604      	mov	r4, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	602a      	str	r2, [r5, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f7f8 f82a 	bl	8000a54 <_read>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_read_r+0x1e>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_read_r+0x1e>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	20000aec 	.word	0x20000aec

08008a10 <__swbuf_r>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	460e      	mov	r6, r1
 8008a14:	4614      	mov	r4, r2
 8008a16:	4605      	mov	r5, r0
 8008a18:	b118      	cbz	r0, 8008a22 <__swbuf_r+0x12>
 8008a1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a1c:	b90b      	cbnz	r3, 8008a22 <__swbuf_r+0x12>
 8008a1e:	f7fd fdd7 	bl	80065d0 <__sinit>
 8008a22:	69a3      	ldr	r3, [r4, #24]
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	0719      	lsls	r1, r3, #28
 8008a2a:	d529      	bpl.n	8008a80 <__swbuf_r+0x70>
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	b33b      	cbz	r3, 8008a80 <__swbuf_r+0x70>
 8008a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a34:	b2f6      	uxtb	r6, r6
 8008a36:	049a      	lsls	r2, r3, #18
 8008a38:	4637      	mov	r7, r6
 8008a3a:	d52a      	bpl.n	8008a92 <__swbuf_r+0x82>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	6920      	ldr	r0, [r4, #16]
 8008a40:	1a18      	subs	r0, r3, r0
 8008a42:	6963      	ldr	r3, [r4, #20]
 8008a44:	4283      	cmp	r3, r0
 8008a46:	dc04      	bgt.n	8008a52 <__swbuf_r+0x42>
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7fd fd54 	bl	80064f8 <_fflush_r>
 8008a50:	b9e0      	cbnz	r0, 8008a8c <__swbuf_r+0x7c>
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	60a3      	str	r3, [r4, #8]
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	6022      	str	r2, [r4, #0]
 8008a5e:	701e      	strb	r6, [r3, #0]
 8008a60:	6962      	ldr	r2, [r4, #20]
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d004      	beq.n	8008a72 <__swbuf_r+0x62>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	07db      	lsls	r3, r3, #31
 8008a6c:	d506      	bpl.n	8008a7c <__swbuf_r+0x6c>
 8008a6e:	2e0a      	cmp	r6, #10
 8008a70:	d104      	bne.n	8008a7c <__swbuf_r+0x6c>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7fd fd3f 	bl	80064f8 <_fflush_r>
 8008a7a:	b938      	cbnz	r0, 8008a8c <__swbuf_r+0x7c>
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a80:	4621      	mov	r1, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7fc fe60 	bl	8005748 <__swsetup_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0d1      	beq.n	8008a30 <__swbuf_r+0x20>
 8008a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a90:	e7f4      	b.n	8008a7c <__swbuf_r+0x6c>
 8008a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a9e:	6663      	str	r3, [r4, #100]	; 0x64
 8008aa0:	e7cc      	b.n	8008a3c <__swbuf_r+0x2c>
	...

08008aa4 <_wcrtomb_r>:
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	4c09      	ldr	r4, [pc, #36]	; (8008acc <_wcrtomb_r+0x28>)
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8008aae:	4605      	mov	r5, r0
 8008ab0:	461e      	mov	r6, r3
 8008ab2:	b909      	cbnz	r1, 8008ab8 <_wcrtomb_r+0x14>
 8008ab4:	460a      	mov	r2, r1
 8008ab6:	a901      	add	r1, sp, #4
 8008ab8:	47b8      	blx	r7
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	bf01      	itttt	eq
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	6033      	streq	r3, [r6, #0]
 8008ac2:	238a      	moveq	r3, #138	; 0x8a
 8008ac4:	602b      	streq	r3, [r5, #0]
 8008ac6:	b005      	add	sp, #20
 8008ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	2000084c 	.word	0x2000084c

08008ad0 <__ascii_wctomb>:
 8008ad0:	b149      	cbz	r1, 8008ae6 <__ascii_wctomb+0x16>
 8008ad2:	2aff      	cmp	r2, #255	; 0xff
 8008ad4:	bf85      	ittet	hi
 8008ad6:	238a      	movhi	r3, #138	; 0x8a
 8008ad8:	6003      	strhi	r3, [r0, #0]
 8008ada:	700a      	strbls	r2, [r1, #0]
 8008adc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ae0:	bf98      	it	ls
 8008ae2:	2001      	movls	r0, #1
 8008ae4:	4770      	bx	lr
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4770      	bx	lr

08008aea <abort>:
 8008aea:	b508      	push	{r3, lr}
 8008aec:	2006      	movs	r0, #6
 8008aee:	f000 f82d 	bl	8008b4c <raise>
 8008af2:	2001      	movs	r0, #1
 8008af4:	f000 f856 	bl	8008ba4 <_exit>

08008af8 <_raise_r>:
 8008af8:	291f      	cmp	r1, #31
 8008afa:	b538      	push	{r3, r4, r5, lr}
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	d904      	bls.n	8008b0c <_raise_r+0x14>
 8008b02:	2316      	movs	r3, #22
 8008b04:	6003      	str	r3, [r0, #0]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008b10:	b112      	cbz	r2, 8008b18 <_raise_r+0x20>
 8008b12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b16:	b94b      	cbnz	r3, 8008b2c <_raise_r+0x34>
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f831 	bl	8008b80 <_getpid_r>
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4601      	mov	r1, r0
 8008b22:	4620      	mov	r0, r4
 8008b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b28:	f000 b818 	b.w	8008b5c <_kill_r>
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d00a      	beq.n	8008b46 <_raise_r+0x4e>
 8008b30:	1c59      	adds	r1, r3, #1
 8008b32:	d103      	bne.n	8008b3c <_raise_r+0x44>
 8008b34:	2316      	movs	r3, #22
 8008b36:	6003      	str	r3, [r0, #0]
 8008b38:	2001      	movs	r0, #1
 8008b3a:	e7e6      	b.n	8008b0a <_raise_r+0x12>
 8008b3c:	2400      	movs	r4, #0
 8008b3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b42:	4628      	mov	r0, r5
 8008b44:	4798      	blx	r3
 8008b46:	2000      	movs	r0, #0
 8008b48:	e7df      	b.n	8008b0a <_raise_r+0x12>
	...

08008b4c <raise>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <raise+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff bfd1 	b.w	8008af8 <_raise_r>
 8008b56:	bf00      	nop
 8008b58:	2000000c 	.word	0x2000000c

08008b5c <_kill_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_kill_r+0x20>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	4611      	mov	r1, r2
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	f000 f813 	bl	8008b94 <_kill>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d102      	bne.n	8008b78 <_kill_r+0x1c>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	b103      	cbz	r3, 8008b78 <_kill_r+0x1c>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd38      	pop	{r3, r4, r5, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000aec 	.word	0x20000aec

08008b80 <_getpid_r>:
 8008b80:	f000 b800 	b.w	8008b84 <_getpid>

08008b84 <_getpid>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <_getpid+0xc>)
 8008b86:	2258      	movs	r2, #88	; 0x58
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	4770      	bx	lr
 8008b90:	20000aec 	.word	0x20000aec

08008b94 <_kill>:
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <_kill+0xc>)
 8008b96:	2258      	movs	r2, #88	; 0x58
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9e:	4770      	bx	lr
 8008ba0:	20000aec 	.word	0x20000aec

08008ba4 <_exit>:
 8008ba4:	e7fe      	b.n	8008ba4 <_exit>
	...

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
